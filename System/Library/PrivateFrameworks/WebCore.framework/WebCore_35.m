unint64_t WebCore::jsRemotePlaybackPrototypeFunction_prompt(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E94D58);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRemotePlayback::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRemotePlayback::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RemotePlayback", "prompt", v16);
  }
  else
  {
    WebCore::RemotePlayback::prompt((WTF *)(*(_QWORD *)(v17 + 24) - 32), (uint64_t *)&v27);
    v14 = v27;
    if (!v27)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore36JSRemotePlaybackAvailabilityCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_BYTE *WebCore::jsReportPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t SlowCase;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v40 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "Report", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSReport::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSReport::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "Report", "toJSON");
  v11 = *(_QWORD **)(v4 + 24);
  v12 = *(_QWORD *)(v5 + 15056);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 60);
    v14 = *(_QWORD *)(v12 + 24);
    if (v14 < *(_QWORD *)(v12 + 32))
    {
LABEL_14:
      *(_QWORD *)(v12 + 24) = v14 + v13;
      goto LABEL_15;
    }
    v14 = *(_QWORD *)(v12 + 40);
    if ((v14 & 1) == 0)
    {
      v38 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 32) = v14 + HIDWORD(v38);
      *(_QWORD *)(v12 + 40) = v14 + (int)v38;
      goto LABEL_14;
    }
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::allocateSlow();
  }
  v14 = SlowCase;
LABEL_15:
  *(_DWORD *)v14 = 0;
  *(_DWORD *)v14 = *((_DWORD *)this + 212);
  *(_DWORD *)(v14 + 4) = 16783360;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_QWORD *)(v14 + 56) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = *((_QWORD *)this + 7);
  v16 = v11[1];
  if (!v16 || (v17 = *(_DWORD *)(v16 + 4)) == 0)
  {
    v18 = *(_QWORD *)(v15 + 41968);
    goto LABEL_23;
  }
  if (v17 == 1)
  {
    v32 = *(unsigned __int8 **)(v16 + 8);
    if ((*(_BYTE *)(v16 + 16) & 4) != 0)
    {
      v33 = *v32;
    }
    else
    {
      v36 = *(unsigned __int16 *)v32;
      if (v36 > 0xFF)
        goto LABEL_20;
      v33 = v36;
    }
    v18 = *(_QWORD *)(v15 + 8 * v33 + 42216);
    goto LABEL_23;
  }
LABEL_20:
  v18 = *(_QWORD *)(v15 + 64760);
  if (!v18 || v16 != *(_QWORD *)(v18 + 8))
    v18 = JSC::jsStringWithCacheSlowCase();
LABEL_23:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v19 = v41;
  v41 = 0;
  v42 = v14;
  v43 = -1;
  v44 = 0x1000000;
  v45 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v19, v18, 0, (uint64_t)&v41);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  v21 = *((_QWORD *)this + 7);
  v22 = v11[2];
  if (v22 && (v23 = *(_DWORD *)(v22 + 4)) != 0)
  {
    if (v23 != 1)
    {
LABEL_30:
      v24 = *(_QWORD *)(v21 + 64760);
      if (!v24 || v22 != *(_QWORD *)(v24 + 8))
        v24 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_33;
    }
    v34 = *(unsigned __int8 **)(v22 + 8);
    if ((*(_BYTE *)(v22 + 16) & 4) != 0)
    {
      v35 = *v34;
    }
    else
    {
      v37 = *(unsigned __int16 *)v34;
      if (v37 > 0xFF)
        goto LABEL_30;
      v35 = v37;
    }
    v24 = *(_QWORD *)(v21 + 8 * v35 + 42216);
  }
  else
  {
    v24 = *(_QWORD *)(v21 + 41968);
  }
LABEL_33:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v25 = v41;
  v41 = 0;
  v42 = v14;
  v43 = -1;
  v44 = 0x1000000;
  v45 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v25, v24, 0, (uint64_t)&v41);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  v27 = v11[3];
  v28 = v27
      ? WebCore::wrap<WebCore::ReportBody>((uint64_t)this, *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28), v27)
      : 2;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v29 = v41;
  v41 = 0;
  v42 = v14;
  v43 = -1;
  v44 = 0x1000000;
  v45 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v29, v28, 0, (uint64_t)&v41);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  return (_BYTE *)v14;
}

uint64_t WebCore::jsReportBodyPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;

  v11 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "ReportBody", "toJSON");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSReportBody::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSReportBody::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "ReportBody", "toJSON");
  else
    return 10;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ReportingObserver7OptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v3)
    {
      v5 = *(WTF::StringImpl ***)a2;
      v6 = 8 * v3;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    v4 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v4, (void *)a2);
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore27JSReportingObserverCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::jsReportingObserverPrototypeFunction_observe(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;

  v3 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "ReportingObserver", "observe");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSReportingObserver::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSReportingObserver::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "ReportingObserver", "observe");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_QWORD *)(v9 + 32);
  if (!v10)
    return 10;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return 10;
  WebCore::ReportingScope::registerReportingObserver(v11, (WebCore::ReportingObserver *)v9);
  if (!*(_BYTE *)(v9 + 72))
    return 10;
  *(_BYTE *)(v9 + 72) = 0;
  v13 = *(_QWORD *)(v9 + 32);
  v14 = v13 ? *(_QWORD *)(v13 + 8) : 0;
  v16 = *(_QWORD *)(v14 + 48);
  v15 = *(_QWORD *)(v14 + 56);
  if (v16 == v15)
    return 10;
  v17 = 10;
  do
  {
    WebCore::ReportingObserver::appendQueuedReportIfCorrectType(v9, (char **)(*(_QWORD *)(v14 + 64) + 8 * v16), v12);
    v19 = *(unsigned int *)(v14 + 72);
    v16 += v19 + 1;
    do
      v16 -= v19;
    while (v16 >= v19);
  }
  while (v15 != v16);
  return v17;
}

uint64_t WebCore::jsReportingObserverPrototypeFunction_disconnect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  bmalloc::api *v18;
  void *v19;
  uint64_t v20;

  v3 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "ReportingObserver", "disconnect");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSReportingObserver::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSReportingObserver::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "ReportingObserver", "disconnect");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_QWORD *)(v9 + 32);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = *(unsigned int *)(v11 + 44);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD **)(v11 + 32);
        v14 = v13 + 1;
        v15 = 10;
        v16 = *(unsigned int *)(v11 + 44);
        while (*v13 != v9)
        {
          ++v13;
          ++v14;
          if (!--v16)
            return v15;
        }
        *v13 = 0;
        if (*(_DWORD *)(v9 + 24) == 1)
        {
          WebCore::ReportingObserver::~ReportingObserver((WebCore::ReportingObserver *)v9, a2);
          bmalloc::api::isoDeallocate(v18, v19);
          v12 = *(unsigned int *)(v11 + 44);
        }
        else
        {
          --*(_DWORD *)(v9 + 24);
        }
        memmove(v13, v13 + 1, *(_QWORD *)(v11 + 32) + 8 * v12 - (_QWORD)v14);
        --*(_DWORD *)(v11 + 44);
      }
    }
  }
  return 10;
}

_BYTE *WebCore::jsReportingObserverPrototypeFunction_takeRecords(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  bmalloc::api *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v24;
  WTF *v25;
  int v26;
  int v27;

  v3 = *((_QWORD *)a2 + 5);
  v24 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "ReportingObserver", "takeRecords");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 0x4C);
  v6 = *(_DWORD *)(v4 + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSReportingObserver::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSReportingObserver::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "ReportingObserver", "takeRecords");
  v10 = *(_QWORD *)(v3 + 24);
  v11 = *(_QWORD *)(v4 + 40);
  v12 = *(WTF **)(v10 + 80);
  v25 = v12;
  v13 = *(_DWORD *)(v10 + 88);
  v14 = *(unsigned int *)(v10 + 92);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v26 = v13;
  v27 = v14;
  v16 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Report>>>::convert<WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>>,0ul>((uint64_t)this, v11, (uint64_t)&v25);
  if ((_DWORD)v14)
  {
    v17 = 8 * v14;
    v18 = v12;
    do
    {
      v19 = *(bmalloc::api **)v18;
      *(_QWORD *)v18 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          v20 = (_DWORD *)*((_QWORD *)v19 + 3);
          *((_QWORD *)v19 + 3) = 0;
          if (v20)
          {
            if (v20[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
            else
              --v20[2];
          }
          v21 = (WTF::StringImpl *)*((_QWORD *)v19 + 2);
          *((_QWORD *)v19 + 2) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v15);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v15);
            else
              *(_DWORD *)v22 -= 2;
          }
          bmalloc::api::isoDeallocate(v19, v15);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
      v18 = (WTF *)((char *)v18 + 8);
      v17 -= 8;
    }
    while (v17);
  }
  if (v12)
    WTF::fastFree(v12, v15);
  return (_BYTE *)v16;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Report>>>::convert<WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>>,0ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  WTF **v6;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  unint64_t SlowCase;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *Allocator;
  int v53;
  JSValue v54;
  void *v55;
  unint64_t v56;
  JSC::VM *v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v61;
  uint64_t v62;
  JSC::VM *v63;
  WTF *v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  WTF *v68;
  _OWORD v69[4];
  uint64_t v70;
  JSC::VM *v71;
  uint64_t v72[2];

  v63 = *(JSC::VM **)(a1 + 56);
  v71 = v63;
  v66 = 0;
  v67 = 0x800000000;
  v68 = (WTF *)((char *)v69 + 8);
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v5 = *(_DWORD *)(a3 + 12);
  if (v5 >= 9)
  {
    v66 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v67) == 1;
    v5 = *(_DWORD *)(a3 + 12);
    if (v5)
      goto LABEL_3;
  }
  else if (v5)
  {
LABEL_3:
    v6 = *(WTF ***)a3;
    v62 = *(_QWORD *)a3 + 8 * v5;
    while (1)
    {
      v7 = *v6;
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
      if (!v8)
        goto LABEL_12;
      v9 = *(_DWORD *)(v8 - 8);
      v10 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(WTF **)(v8 + 16 * v13);
      if (v14 != v7)
        break;
LABEL_9:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (!v16)
        goto LABEL_12;
      if ((*(_BYTE *)(v16 + 8) & 3) != 0)
        goto LABEL_12;
      SlowCase = *(_QWORD *)v16;
      if (!*(_QWORD *)v16)
        goto LABEL_12;
LABEL_54:
      if (*((_DWORD *)v63 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
        goto LABEL_82;
      v53 = v67;
      if ((_DWORD)v67 == HIDWORD(v67) || v68 != (WTF *)((char *)v69 + 8) && v68)
      {
        v54.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v67, v54) == 1)
          v66 = 1;
      }
      else
      {
        *((_QWORD *)v68 + v67) = SlowCase;
        LODWORD(v67) = v53 + 1;
      }
      if (++v6 == (WTF **)v62)
        goto LABEL_71;
    }
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(WTF **)(v8 + 16 * v13);
      ++v15;
      if (v14 == v7)
        goto LABEL_9;
    }
LABEL_12:
    ++*(_DWORD *)v7;
    v18 = *(_QWORD *)(a2 + 3296);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v20 = ((unint64_t)&WebCore::JSReport::s_info + ~((_QWORD)&WebCore::JSReport::s_info << 32)) ^ (((unint64_t)&WebCore::JSReport::s_info + ~((_QWORD)&WebCore::JSReport::s_info << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(char ***)(v18 + 16 * v23);
      if (v24 == &WebCore::JSReport::s_info)
      {
LABEL_17:
        v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
        if (v26)
          goto LABEL_19;
      }
      else
      {
        v25 = 1;
        while (v24)
        {
          v23 = ((_DWORD)v23 + v25) & v19;
          v24 = *(char ***)(v18 + 16 * v23);
          ++v25;
          if (v24 == &WebCore::JSReport::s_info)
            goto LABEL_17;
        }
      }
    }
    v27 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSReportPrototype::createStructure(v27, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSReportPrototype::create((WebCore::JSReportPrototype *)v27, Structure, v29, v30);
    v32 = WebCore::JSReport::createStructure(v27, a2, v31);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSReport::s_info);
LABEL_19:
    v33 = *(_QWORD *)(a2 + 56);
    v34 = *(_QWORD *)(v33 + 41456);
    v35 = *(_QWORD *)(v34 + 23536);
    v36 = *(_QWORD **)(v35 + 1584);
    if (v36)
      goto LABEL_39;
    v37 = *(_QWORD *)(v34 + 22648);
    if (__ldaxr((unsigned __int8 *)v37))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v37))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v37);
LABEL_24:
    v39 = *(_QWORD *)(v37 + 2824);
    if (!*(_QWORD *)(v39 + 1584))
    {
      v40 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v64, "IsoSpace T");
      v72[0] = 0;
      MEMORY[0x19AEA3204](v40, &v64, v33 + 192, v33 + 1872, 32, 8, v72);
      v42 = v72[0];
      v72[0] = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v64;
      v64 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1)
          WTF::fastFree(v43, v41);
        else
          --*(_DWORD *)v43;
      }
      v44 = *(_QWORD *)(v39 + 1584);
      *(_QWORD *)(v39 + 1584) = v40;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v45 = *(_QWORD *)(v35 + 1584);
    *(_QWORD *)(v35 + 1584) = v36;
    if (v45)
    {
      v46 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v46, v47);
    }
    v48 = __ldxr((unsigned __int8 *)v37);
    if (v48 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v37))
      {
LABEL_39:
        SlowCase = v36[3];
        if (SlowCase >= v36[4])
        {
          SlowCase = v36[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_41;
          }
          v56 = *(_QWORD *)(SlowCase + 8) ^ v36[6];
          v36[4] = SlowCase + HIDWORD(v56);
          v36[5] = SlowCase + (int)v56;
        }
        v36[3] = SlowCase + 32;
LABEL_41:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v26);
        *(_QWORD *)(SlowCase + 24) = v7;
        if (*(_BYTE *)(v33 + 755))
          __dmb(0xAu);
        v49 = *(_QWORD *)(a2 + 3320);
        if ((byte_1EE3367C8 & 1) == 0)
        {
          qword_1EE3367C0 = (uint64_t)&off_1E32DAD70;
          byte_1EE3367C8 = 1;
        }
        v64 = v7;
        if ((SlowCase & 8) != 0)
          v50 = (SlowCase - 112) | 1;
        else
          v50 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v50 & 1) != 0)
          v51 = v50 + 47;
        else
          v51 = *(_QWORD *)v50 + 32;
        Allocator = *(_QWORD **)(v51 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v51 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE3367C0;
        Allocator[2] = v49;
        v72[0] = (uint64_t)Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v49 + 32), (uint64_t *)&v64, v72);
        if (v72[0])
          *(_QWORD *)(v72[0] + 8) = 3;
        goto LABEL_54;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
    goto LABEL_39;
  }
LABEL_71:
  if (v66)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v64 = v68;
    v65 = v67;
    v57 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v57 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) == 0)
    {
      v58 = JSC::constructArray();
      goto LABEL_74;
    }
  }
LABEL_82:
  v58 = 0;
LABEL_74:
  v59 = *(uint64_t **)&v69[0];
  if (*(_QWORD *)&v69[0])
  {
    v64 = (WTF *)&v67;
    v61 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v69[0], (uint64_t *)&v64);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v59, v61);
  }
  if (v68 != (WTF *)((char *)v69 + 8) && v68)
    WTF::fastFree(v68, v55);
  return v58;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore24JSResizeObserverCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::jsResizeObserverPrototypeFunction_observe(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  WebCore::Element *v18;
  JSC::JSCell *v19;
  unsigned __int16 v20;
  uint64_t Object;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  JSValue v28;
  _QWORD v29[2];
  WTF::StringImpl *v30;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29[0] = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v29, "ResizeObserver", "observe");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSResizeObserver::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSResizeObserver::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v29, "ResizeObserver", "observe");
  v15 = *((int *)a2 + 8);
  if ((_DWORD)v15 == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v28);
  }
  v16 = *(unsigned int **)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v30 = v9;
  if ((v17 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v17 + 5) != 241
    || (v18 = *(WebCore::Element **)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v30, 0, "target", 7, "ResizeObserver", 15, a8, "observe", 8, "Element", 8);
    return 0;
  }
  if ((unint64_t)(v15 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    LOBYTE(v20) = 1;
    goto LABEL_15;
  }
  v19 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v29[1] = v9;
  if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_14:
    LOBYTE(v20) = 1;
LABEL_15:
    WebCore::ResizeObserver::observeInternal(v16, v18, v20);
    return 10;
  }
  if (((unint64_t)v19 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(v19);
    if (Object)
    {
      v24 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v26 = JSC::JSObject::get(v24, this, (unint64_t)v30);
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v25);
        else
          *(_DWORD *)v30 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        return 0;
      if (v26 == 10)
        goto LABEL_14;
      v27 = (JSC::VM *)*((_QWORD *)this + 7);
      v20 = WebCore::parseEnumeration<WebCore::ResizeObserverBoxOptions>(this, v26);
      if (*((_DWORD *)v27 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
          return 0;
      }
      if (v20 > 0xFFu)
        goto LABEL_15;
    }
  }
  JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::jsResizeObserverPrototypeFunction_unobserve(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::ResizeObserver *v16;
  uint64_t v17;
  const WebCore::Element *v18;
  JSValue v20;
  JSC::VM *v21;
  JSC::VM *v22;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "ResizeObserver", "unobserve");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSResizeObserver::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSResizeObserver::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "ResizeObserver", "unobserve");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v20);
  }
  else
  {
    v16 = *(WebCore::ResizeObserver **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v22 = v9;
    if ((v17 & 0xFFFE000000000002) == 0
      && *(unsigned __int8 *)(v17 + 5) == 241
      && (v18 = *(const WebCore::Element **)(v17 + 24)) != 0)
    {
      if (WebCore::ResizeObserver::removeTarget(v16, *(WebCore::Element **)(v17 + 24)))
        WebCore::ResizeObserver::removeObservation(v16, v18);
      return 10;
    }
    else
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v22, 0, "target", 7, "ResizeObserver", 15, a8, "unobserve", 10, "Element", 8);
      return 0;
    }
  }
}

uint64_t WebCore::jsResizeObserverPrototypeFunction_disconnect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return WebCore::IDLOperation<WebCore::JSResizeObserver>::call<&WebCore::jsResizeObserverPrototypeFunction_disconnectBody,(WebCore::CastedThisErrorBehavior)0>((uint64_t)this, *((_QWORD *)a2 + 5));
}

unint64_t WebCore::IDLOperation<WebCore::JSResizeObserver>::cast(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSResizeObserver::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSResizeObserver::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::IDLOperation<WebCore::JSResizeObserver>::call<&WebCore::jsResizeObserverPrototypeFunction_disconnectBody,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v5;

  v2 = a1;
  v5 = *(_QWORD *)(a1 + 56);
  v3 = WebCore::IDLOperation<WebCore::JSResizeObserver>::cast(a2);
  if (!v3)
    return (uint64_t)WebCore::throwThisTypeError(v2, (int)&v5, "ResizeObserver", "disconnect");
  WebCore::ResizeObserver::disconnect(*(WebCore::ResizeObserver **)(v3 + 24));
  return 10;
}

uint64_t WebCore::CryptoAlgorithmRsaHashedImportParams::parametersClass(WebCore::CryptoAlgorithmRsaHashedImportParams *this)
{
  return 12;
}

uint64_t WebCore::CryptoAlgorithmRsaHashedKeyGenParams::parametersClass(WebCore::CryptoAlgorithmRsaHashedKeyGenParams *this)
{
  return 11;
}

uint64_t WebCore::CryptoAlgorithmRsaKeyGenParams::parametersClass(WebCore::CryptoAlgorithmRsaKeyGenParams *this)
{
  return 13;
}

uint64_t WebCore::CryptoAlgorithmRsaOaepParams::parametersClass(WebCore::CryptoAlgorithmRsaOaepParams *this)
{
  return 14;
}

uint64_t WebCore::CryptoAlgorithmRsaPssParams::parametersClass(WebCore::CryptoAlgorithmRsaPssParams *this)
{
  return 15;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpCodecParameters>>>::convert<WebCore::RTCRtpCodecParameters,0ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  JSValue v43;
  void *v44;
  JSC::VM *v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v49;
  JSC::VM *v50;
  BOOL v51;
  uint64_t v52;
  WTF *v53;
  _OWORD v54[4];
  uint64_t v55;
  JSC::VM *v56;
  WTF *v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;

  v50 = *(JSC::VM **)(a1 + 56);
  v55 = 0;
  v56 = v50;
  v51 = 0;
  v52 = 0x800000000;
  v53 = (WTF *)((char *)v54 + 8);
  memset(v54, 0, sizeof(v54));
  v6 = *(_DWORD *)(a3 + 12);
  if (v6 >= 9)
  {
    v51 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v52) == 1;
    v6 = *(_DWORD *)(a3 + 12);
    if (v6)
      goto LABEL_3;
  }
  else if (v6)
  {
LABEL_3:
    v7 = *(_QWORD *)a3 + 16;
    for (i = 40 * v6; i; i -= 40)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v11 = 8 * *(unsigned __int8 *)(v10 + 14);
      v12 = JSC::allocateCell<JSC::JSFinalObject>(v9, v11 + 16);
      v13 = *(_DWORD *)(v10 + 8);
      *(_DWORD *)v12 = v10 >> 4;
      *(_DWORD *)(v12 + 4) = v13;
      *(_QWORD *)(v12 + 8) = 0;
      bzero((void *)(v12 + 16), v11);
      if (*(_BYTE *)(v9 + 755))
        __dmb(0xAu);
      v14 = *(unsigned __int16 *)(v7 + 8);
      if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
        goto LABEL_78;
      WTF::AtomStringImpl::addLiteral();
      v15 = v57;
      v57 = 0;
      v58 = v12;
      v59 = -1;
      v60 = 0x1000000;
      v61 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v12, (JSC::VM *)v9, (unint64_t)v15, v14 | 0xFFFE000000000000, 0, (uint64_t)&v57);
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v16);
        else
          *(_DWORD *)v15 -= 2;
      }
      v17 = (int)*(_QWORD *)v7 < 0
          ? COERCE__INT64((double)*(_QWORD *)v7) + 0x2000000000000
          : *(_QWORD *)v7 | 0xFFFE000000000000;
      if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
        goto LABEL_78;
      WTF::AtomStringImpl::addLiteral();
      v18 = v57;
      v57 = 0;
      v58 = v12;
      v59 = -1;
      v60 = 0x1000000;
      v61 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v12, (JSC::VM *)v9, (unint64_t)v18, v17, 0, (uint64_t)&v57);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      v20 = *(_QWORD *)(v7 - 8);
      if (!v20)
        goto LABEL_27;
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_DWORD *)(v20 + 4);
      if (v22)
      {
        if (v22 != 1)
          goto LABEL_20;
        v37 = *(unsigned __int8 **)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          v38 = *v37;
        }
        else
        {
          v41 = *(unsigned __int16 *)v37;
          if (v41 > 0xFF)
          {
LABEL_20:
            v23 = *(_QWORD *)(v21 + 64760);
            if (!v23 || v20 != *(_QWORD *)(v23 + 8))
              v23 = JSC::jsStringWithCacheSlowCase();
            goto LABEL_23;
          }
          v38 = v41;
        }
        v23 = *(_QWORD *)(v21 + 8 * v38 + 42216);
      }
      else
      {
        v23 = *(_QWORD *)(v21 + 41968);
      }
LABEL_23:
      if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
        goto LABEL_78;
      WTF::AtomStringImpl::addLiteral();
      v24 = v57;
      v57 = 0;
      v58 = v12;
      v59 = -1;
      v60 = 0x1000000;
      v61 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v12, (JSC::VM *)v9, (unint64_t)v24, v23, 0, (uint64_t)&v57);
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v25);
        else
          *(_DWORD *)v24 -= 2;
      }
LABEL_27:
      v26 = *(unsigned __int16 *)(v7 - 16);
      if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
        goto LABEL_78;
      v27 = v26 | 0xFFFE000000000000;
      WTF::AtomStringImpl::addLiteral();
      v28 = v57;
      v57 = 0;
      v58 = v12;
      v59 = -1;
      v60 = 0x1000000;
      v61 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v12, (JSC::VM *)v9, (unint64_t)v28, v27, 0, (uint64_t)&v57);
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v29);
        else
          *(_DWORD *)v28 -= 2;
      }
      v30 = *(_QWORD *)(v7 + 16);
      if (!v30)
        goto LABEL_41;
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_DWORD *)(v30 + 4);
      if (v32)
      {
        if (v32 == 1)
        {
          v39 = *(unsigned __int8 **)(v30 + 8);
          if ((*(_BYTE *)(v30 + 16) & 4) != 0)
          {
            v40 = *v39;
LABEL_59:
            v33 = *(_QWORD *)(v31 + 8 * v40 + 42216);
            goto LABEL_37;
          }
          v42 = *(unsigned __int16 *)v39;
          if (v42 <= 0xFF)
          {
            v40 = v42;
            goto LABEL_59;
          }
        }
        v33 = *(_QWORD *)(v31 + 64760);
        if (!v33 || v30 != *(_QWORD *)(v33 + 8))
          v33 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v33 = *(_QWORD *)(v31 + 41968);
      }
LABEL_37:
      if (!*(_DWORD *)(v9 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v34 = v57;
        v57 = 0;
        v58 = v12;
        v59 = -1;
        v60 = 0x1000000;
        v61 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v12, (JSC::VM *)v9, (unint64_t)v34, v33, 0, (uint64_t)&v57);
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v35);
          else
            *(_DWORD *)v34 -= 2;
        }
        goto LABEL_41;
      }
LABEL_78:
      v12 = 0;
LABEL_41:
      if (*((_DWORD *)v50 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
        goto LABEL_91;
      v36 = v52;
      if ((_DWORD)v52 == HIDWORD(v52) || v53 != (WTF *)((char *)v54 + 8) && v53)
      {
        v43.super.isa = (Class)v12;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v52, v43) == 1)
          v51 = 1;
      }
      else
      {
        *((_QWORD *)v53 + v52) = v12;
        LODWORD(v52) = v36 + 1;
      }
      v7 += 40;
    }
  }
  if (v51)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v57 = v53;
    LODWORD(v58) = v52;
    v45 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v45 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) == 0)
    {
      v46 = JSC::constructArray();
      goto LABEL_83;
    }
  }
LABEL_91:
  v46 = 0;
LABEL_83:
  v47 = *(uint64_t **)&v54[0];
  if (*(_QWORD *)&v54[0])
  {
    v57 = (WTF *)&v52;
    v49 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v54[0], (uint64_t *)&v57);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v47, v49);
  }
  if (v53 != (WTF *)((char *)v54 + 8) && v53)
    WTF::fastFree(v53, v44);
  return v46;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpHeaderExtensionParameters>>>::convert<WebCore::RTCRtpHeaderExtensionParameters,0ul>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  JSC::VM *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  JSValue v28;
  void *v29;
  JSC::VM *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  WTF *v37;
  _OWORD v38[4];
  uint64_t v39;
  JSC::VM *v40;
  WTF *v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;

  v6 = *(JSC::VM **)(a1 + 56);
  v39 = 0;
  v40 = v6;
  v35 = 0;
  v36 = 0x800000000;
  v37 = (WTF *)((char *)v38 + 8);
  memset(v38, 0, sizeof(v38));
  v7 = a3[3];
  if (v7 >= 9)
  {
    v35 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v36) == 1;
    v7 = a3[3];
    if (v7)
      goto LABEL_3;
  }
  else if (v7)
  {
LABEL_3:
    v8 = (unsigned __int16 *)(*(_QWORD *)a3 + 8);
    for (i = 16 * v7; i; i -= 16)
    {
      v10 = *(_QWORD *)(a1 + 56);
      v11 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v12 = 8 * *(unsigned __int8 *)(v11 + 14);
      v13 = JSC::allocateCell<JSC::JSFinalObject>(v10, v12 + 16);
      v14 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)v13 = v11 >> 4;
      *(_DWORD *)(v13 + 4) = v14;
      *(_QWORD *)(v13 + 8) = 0;
      bzero((void *)(v13 + 16), v12);
      if (*(_BYTE *)(v10 + 755))
        __dmb(0xAu);
      v15 = *v8;
      if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
        goto LABEL_42;
      WTF::AtomStringImpl::addLiteral();
      v16 = v41;
      v41 = 0;
      v42 = v13;
      v43 = -1;
      v44 = 0x1000000;
      v45 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v16, v15 | 0xFFFE000000000000, 0, (uint64_t)&v41);
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v17);
        else
          *(_DWORD *)v16 -= 2;
      }
      v18 = *((_QWORD *)v8 - 1);
      if (!v18)
        goto LABEL_20;
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_DWORD *)(v18 + 4);
      if (v20)
      {
        if (v20 == 1)
        {
          v25 = *(unsigned __int8 **)(v18 + 8);
          if ((*(_BYTE *)(v18 + 16) & 4) != 0)
          {
            v26 = *v25;
LABEL_31:
            v21 = *(_QWORD *)(v19 + 8 * v26 + 42216);
            goto LABEL_16;
          }
          v27 = *(unsigned __int16 *)v25;
          if (v27 <= 0xFF)
          {
            v26 = v27;
            goto LABEL_31;
          }
        }
        v21 = *(_QWORD *)(v19 + 64760);
        if (!v21 || v18 != *(_QWORD *)(v21 + 8))
          v21 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v21 = *(_QWORD *)(v19 + 41968);
      }
LABEL_16:
      if (!*(_DWORD *)(v10 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v22 = v41;
        v41 = 0;
        v42 = v13;
        v43 = -1;
        v44 = 0x1000000;
        v45 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v22, v21, 0, (uint64_t)&v41);
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v23);
          else
            *(_DWORD *)v22 -= 2;
        }
        goto LABEL_20;
      }
LABEL_42:
      v13 = 0;
LABEL_20:
      if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
        goto LABEL_55;
      v24 = v36;
      if ((_DWORD)v36 == HIDWORD(v36) || v37 != (WTF *)((char *)v38 + 8) && v37)
      {
        v28.super.isa = (Class)v13;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v36, v28) == 1)
          v35 = 1;
      }
      else
      {
        *((_QWORD *)v37 + v36) = v13;
        LODWORD(v36) = v24 + 1;
      }
      v8 += 8;
    }
  }
  if (v35)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v41 = v37;
    LODWORD(v42) = v36;
    v30 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v30 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) == 0)
    {
      v31 = JSC::constructArray();
      goto LABEL_47;
    }
  }
LABEL_55:
  v31 = 0;
LABEL_47:
  v32 = *(uint64_t **)&v38[0];
  if (*(_QWORD *)&v38[0])
  {
    v41 = (WTF *)&v36;
    v34 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v38[0], (uint64_t *)&v41);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v32, v34);
  }
  if (v37 != (WTF *)((char *)v38 + 8) && v37)
    WTF::fastFree(v37, v29);
  return v31;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCRtpScriptTransform,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCRtpScriptTransform::~RTCRtpScriptTransform((WebCore::RTCRtpScriptTransform *)(*(_QWORD *)(a1 + 8) - 24));
  return bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::JSRTCRtpReceiver::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_21RTCRtpSFrameTransformEEENS4_INS_21RTCRtpScriptTransformEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_(unint64_t result, uint64_t **a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  WTF *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  _QWORD *v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  WTF *v31;
  _QWORD *v32;

  v3 = result;
  v4 = **a2;
  if (!v4)
  {
    v5 = a2[4];
    if (*((_DWORD *)v5 + 2))
      goto LABEL_36;
    if (*v5)
      result = WebCore::wrap<WebCore::RTCRtpSFrameTransform>((int)a2[2], (JSC::VM *)a2[3], (WebCore::JSDOMGlobalObject *)*v5);
    else
      result = 2;
    v6 = a2[1];
    if (!*((_BYTE *)v6 + 8))
      *((_BYTE *)v6 + 8) = 1;
    *v6 = result;
    v4 = **a2;
  }
  if (v4 != 1)
  {
LABEL_34:
    v28 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v3 = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 16) = v28;
    *(_QWORD *)(v3 + 32) = a2[4];
    return result;
  }
  v7 = a2[4];
  if (*((_DWORD *)v7 + 2) == 1)
  {
    v8 = *v7;
    if (*v7)
    {
      result = (unint64_t)a2[3];
      v9 = *(_QWORD *)(*(_QWORD *)(result + 3320) + 32);
      if (!v9)
        goto LABEL_20;
      v10 = *(_DWORD *)(v9 - 8);
      v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WTF **)(v9 + 16 * v14);
      if (v15 != (WTF *)v8)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WTF **)(v9 + 16 * v14);
          ++v16;
          if (v15 == (WTF *)v8)
            goto LABEL_17;
        }
        goto LABEL_20;
      }
LABEL_17:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (!v17 || (*(_BYTE *)(v17 + 8) & 3) != 0 || (v18 = *(_QWORD *)v17) == 0)
      {
LABEL_20:
        v19 = (unsigned int *)(v8 + 24);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
        v31 = (WTF *)v8;
        if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v8 != &off_1E3361DC0)
        {
          __break(0xC471u);
          JUMPOUT(0x194E97400);
        }
        result = WebCore::createWrapper<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpScriptTransform>(result, &v31);
        v18 = result;
        v21 = v31;
        v31 = 0;
        if (v21)
        {
          v22 = (unsigned int *)((char *)v21 + 24);
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v30 = result;
            atomic_store(1u, v22);
            v25 = v22;
            v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v26 = off_1E32DD4B0;
            v26[1] = v25;
            v32 = v26;
            WTF::ensureOnMainThread();
            result = (unint64_t)v32;
            v32 = 0;
            if (result)
              result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
            v18 = v30;
          }
        }
      }
    }
    else
    {
      v18 = 2;
    }
    v27 = a2[1];
    if (!*((_BYTE *)v27 + 8))
      *((_BYTE *)v27 + 8) = 1;
    *v27 = v18;
    goto LABEL_34;
  }
LABEL_36:
  v29 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_21RTCRtpScriptTransformENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(v29);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_21RTCRtpScriptTransformENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 24);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_21RTCRtpScriptTransformENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E32DD4B0;
      v6[1] = v3;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_21RTCRtpScriptTransformENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;

  v4 = *a3;
  if (!*a3)
    goto LABEL_11;
  v5 = *(_QWORD *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v5);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
  *a2 = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_21RTCRtpScriptTransformENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  if (*a3)
  {
    v4 = (unsigned int *)(v3 + 24);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_21RTCRtpScriptTransformENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_21RTCRtpScriptTransformENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::RTCRtpSFrameTransform>,WebCore::IDLInterface<WebCore::RTCRtpScriptTransform>>>::convert(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;
  char **v25;
  BOOL v26;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;

  v3 = result;
  v42 = a2[7];
  LOBYTE(v39) = 0;
  v41 = 0;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_79;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCRtpSFrameTransform::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCRtpSFrameTransform::s_info && v7 != 0);
  }
  if (!v6)
  {
LABEL_47:
    v23 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v24 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v25 = (char **)(16 * v23);
    if ((_DWORD)v23)
      v26 = v25 == &WebCore::JSRTCRtpScriptTransform::s_info;
    else
      v26 = 1;
    if (!v26)
    {
      do
      {
        v25 = (char **)v25[2];
        v24 = v25 != 0;
      }
      while (v25 != &WebCore::JSRTCRtpScriptTransform::s_info && v25 != 0);
    }
    if (!v24)
      goto LABEL_79;
    v28 = *(_QWORD *)(a3 + 24);
    if (!v28)
      goto LABEL_79;
    v29 = (unsigned int *)(v28 + 24);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
    v44 = 1;
    if (!v41)
    {
      v43 = 0;
      v39 = v28;
      v40 = 1;
      v41 = 1;
      goto LABEL_72;
    }
    if (v40 != -1)
    {
      if (v40 == 1)
      {
        v43 = 0;
        v31 = v39;
        v39 = v28;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 24);
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            atomic_store(1u, v32);
            v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v35 = off_1E32DD4B0;
            v35[1] = v32;
            v45 = v35;
            WTF::ensureOnMainThread();
            result = (uint64_t)v45;
            v45 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
LABEL_72:
        if (v44 != -1)
          result = ((uint64_t (*)(_QWORD **, uint64_t *))off_1E32DCD68[v44])(&v45, &v43);
        if (v41)
          goto LABEL_75;
LABEL_79:
        result = JSC::throwTypeError();
        *(_DWORD *)(v3 + 24) = 1;
        return result;
      }
      result = ((uint64_t (*)(_QWORD **, uint64_t *))off_1E32DCD68[v40])(&v45, &v39);
    }
    v43 = 0;
    v39 = v28;
    v40 = 1;
    goto LABEL_72;
  }
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEA534C](v11);
LABEL_16:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_20:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
  v44 = 0;
  v14 = v41;
  if (v41)
  {
    if (v40 != -1)
    {
      if (!v40)
      {
        v43 = 0;
        v15 = v39;
        v39 = v10 - 32;
        if (!v15)
          goto LABEL_44;
        v16 = *(_QWORD *)(v15 + 24);
        if (__ldaxr((unsigned __int8 *)v16))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v16))
        {
          goto LABEL_32;
        }
        result = MEMORY[0x19AEA534C](v16);
LABEL_32:
        v18 = *(_QWORD *)(v16 + 8);
        v19 = v18 - 1;
        *(_QWORD *)(v16 + 8) = v18 - 1;
        if (v18 == 1)
        {
          v38 = *(_QWORD *)(v16 + 16);
          v20 = *(_QWORD *)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          v21 = v38 != 0;
        }
        else
        {
          v20 = 0;
          v21 = 1;
        }
        v22 = __ldxr((unsigned __int8 *)v16);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v16))
          {
LABEL_39:
            if (!v19)
            {
              if (v20)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
              if (!v21)
                result = WTF::fastFree((WTF *)v16, a2);
            }
LABEL_44:
            v14 = v44;
            if (v44 == -1)
              goto LABEL_46;
            goto LABEL_45;
          }
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
        goto LABEL_39;
      }
      result = ((uint64_t (*)(_QWORD **, uint64_t *))off_1E32DCD68[v40])(&v45, &v39);
    }
    v43 = 0;
    v39 = v10 - 32;
    v40 = 0;
    goto LABEL_44;
  }
  v43 = 0;
  v39 = v10 - 32;
  v40 = 0;
  v41 = 1;
LABEL_45:
  result = ((uint64_t (*)(_QWORD **, uint64_t *))off_1E32DCD68[v14])(&v45, &v43);
LABEL_46:
  if (!v41)
    goto LABEL_47;
LABEL_75:
  *(_BYTE *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = -1;
  v36 = v40;
  if (v40 == -1)
  {
    *(_DWORD *)(v3 + 24) = 0;
  }
  else
  {
    result = ((uint64_t (*)(uint64_t *))off_1E32DCD88[v40])(&v43);
    *(_DWORD *)(v3 + 16) = v36;
    v37 = v41;
    *(_DWORD *)(v3 + 24) = 0;
    if (v37)
    {
      if (v40 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E32DCD68[v40])(&v43, &v39);
    }
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  int v5;
  _BYTE v7[8];
  int v8;
  _BYTE v9[8];
  int v10;
  unsigned __int8 v11;
  char v12;

  if (*(_DWORD *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 32) = 1;
    return a1;
  }
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v9[0] = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    v4 = off_1E32DCD88[v3];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v4)(v9, v7, a2 + 8);
    v8 = v3;
    v9[0] = 0;
    v10 = -1;
    ((void (*)(char *, _BYTE *, _BYTE *))v4)(&v12, v9, v7);
    v10 = v3;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    ((void (*)(char *, uint64_t, _BYTE *))v4)(&v12, a1 + 8, v9);
    *(_DWORD *)(a1 + 16) = v3;
    v5 = v11;
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
    if (!v5)
      goto LABEL_9;
    if (v10 != -1)
      ((void (*)(char *, _BYTE *))off_1E32DCD68[v10])(&v12, v9);
  }
  v10 = -1;
LABEL_9:
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))off_1E32DCD68[v8])(&v12, v7);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_21RTCRtpScriptTransformENSD_ISI_EENSF_ISI_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32DCD68[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_21RTCRtpScriptTransformENSE_ISJ_EENSG_ISJ_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32DCD68[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

uint64_t WebCore::JSRTCRtpSFrameTransform::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14WritableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
        else
          --v3[4];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14WritableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSRTCRtpScriptTransform::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCRtpScriptTransformer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14WritableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
        else
          --v3[4];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14WritableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpCodecParameters>>::convert(uint64_t result, JSC::JSCell *this, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  double v15;
  double v16;
  double v17;
  long double v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  double v33;
  double v34;
  double v35;
  long double v36;
  double v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  double v61;
  double v62;
  JSC::VM *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  __int16 v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  __int16 v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  JSC::VM *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;

  v4 = *(JSC::VM **)(result + 56);
  v75 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    LOWORD(v7) = 0;
    v8 = 0;
    LOWORD(v9) = 1;
LABEL_86:
    LOWORD(v69) = v7;
    v70 = v6;
    v71 = v5;
    v72 = v9;
    v73 = v8;
    v74 = 0;
    goto LABEL_93;
  }
  v10 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_120;
  }
  v12 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v12, v10, (unint64_t)v69);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v13);
    else
      *(_DWORD *)v69 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_120;
  }
  if (v9 == 10)
  {
    LOWORD(v9) = 1;
  }
  else
  {
    v69 = (WTF::StringImpl *)v9;
    v14 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (v9 < 0xFFFE000000000000 || (v9 & 0x80000000) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v15 = (double)(int)v9;
      }
      else if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v69, v10);
      }
      else
      {
        *(_QWORD *)&v15 = v9 - 0x2000000000000;
      }
      if (*((_DWORD *)v14 + 20))
      {
        v61 = v15;
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
        v15 = v61;
        if ((result & 1) != 0)
          goto LABEL_120;
      }
      LOWORD(v9) = 0;
      if (fabs(v15) != INFINITY && v15 != 0.0)
      {
        v16 = -floor(-v15);
        v17 = floor(v15);
        if (v15 >= 0.0)
          v18 = v17;
        else
          v18 = v16;
        v19 = fmod(v18, 65536.0);
        if (v19 < 0.0)
          v19 = v19 + 65536.0;
        LODWORD(v9) = (int)v19;
      }
    }
  }
  WTF::AtomStringImpl::addLiteral();
  v20 = v69;
  v22 = JSC::JSObject::get(v12, v10, (unint64_t)v69);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_120;
  }
  if (v22 == 10)
  {
    v5 = 0;
    goto LABEL_33;
  }
  result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v10, v22, &v64);
  if (HIDWORD(v64))
  {
LABEL_120:
    v74 = 1;
    goto LABEL_93;
  }
  v5 = v64;
LABEL_33:
  WTF::AtomStringImpl::addLiteral();
  v23 = v69;
  v25 = JSC::JSObject::get(v12, v10, (unint64_t)v69);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_120;
  }
  if (v25 == 10)
  {
    v6 = 0;
    goto LABEL_50;
  }
  v69 = (WTF::StringImpl *)v25;
  v26 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 2)
  {
    v27 = *(WTF::StringImpl **)(v25 + 8);
    if ((v27 & 1) != 0)
    {
      v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, v10);
      if (!v27)
        goto LABEL_44;
    }
    else if (!v27)
    {
LABEL_44:
      v77 = v27;
      goto LABEL_45;
    }
    *(_DWORD *)v27 += 2;
    goto LABEL_44;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v69, v10);
LABEL_45:
  if (!*((_DWORD *)v26 + 20))
  {
    v6 = v77;
LABEL_47:
    LODWORD(v65) = 0;
LABEL_48:
    v28 = 0;
    v64 = 0;
    v29 = 1;
    goto LABEL_49;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
  v6 = v77;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_47;
  v28 = 1;
  LODWORD(v65) = 1;
  v77 = 0;
  if (!v6)
    goto LABEL_139;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_139:
    v6 = 0;
    v29 = 0;
    v74 = 1;
    goto LABEL_49;
  }
  result = WTF::StringImpl::destroy(v6, v58);
  v28 = (int)v65;
  if (!(_DWORD)v65)
  {
    v6 = v64;
    goto LABEL_48;
  }
  v74 = 1;
  if ((_DWORD)v65 == -1)
    goto LABEL_93;
  v6 = 0;
  v29 = 0;
LABEL_49:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v28])(&v77, &v64);
  if (!v29)
    goto LABEL_90;
LABEL_50:
  WTF::AtomStringImpl::addLiteral();
  v30 = v64;
  v7 = JSC::JSObject::get(v12, v10, (unint64_t)v64);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_148;
  }
  if (v7 == 10)
  {
    LOWORD(v7) = 0;
    goto LABEL_70;
  }
  v64 = (WTF::StringImpl *)v7;
  v32 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v7 >= 0xFFFE000000000000 && (v7 & 0x80000000) == 0)
  {
LABEL_70:
    WTF::AtomStringImpl::addLiteral();
    v38 = v64;
    result = JSC::JSObject::get(v12, v10, (unint64_t)v64);
    v39 = result;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        result = WTF::StringImpl::destroy(v38, this);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((_DWORD)result)
        goto LABEL_148;
    }
    if (v39 == 10)
    {
      v8 = 0;
      goto LABEL_86;
    }
    v77 = (WTF::StringImpl *)v39;
    v40 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if ((v39 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v39 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v77, v10);
LABEL_82:
      if (*((_DWORD *)v40 + 20))
      {
        v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v40);
        v8 = v76;
        if (v59)
        {
          v42 = 1;
          LODWORD(v65) = 1;
          v76 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v60);
            else
              *(_DWORD *)v8 -= 2;
          }
          v43 = 0;
          v8 = 0;
          v74 = 1;
          goto LABEL_85;
        }
      }
      else
      {
        v8 = v76;
      }
      v42 = 0;
      LODWORD(v65) = 0;
      v64 = 0;
      v43 = 1;
LABEL_85:
      result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v42])(&v77, &v64);
      if (v43)
        goto LABEL_86;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          result = WTF::StringImpl::destroy(v8, this);
        else
          *(_DWORD *)v8 -= 2;
      }
      goto LABEL_90;
    }
    v41 = *(WTF::StringImpl **)(v39 + 8);
    if ((v41 & 1) != 0)
    {
      v41 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v39, v10);
      if (!v41)
        goto LABEL_81;
    }
    else if (!v41)
    {
LABEL_81:
      v76 = v41;
      goto LABEL_82;
    }
    *(_DWORD *)v41 += 2;
    goto LABEL_81;
  }
  if (v7 >= 0xFFFE000000000000)
  {
    v33 = (double)(int)v7;
  }
  else if (v7 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v63 = (JSC::VM *)*((_QWORD *)v10 + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v64, v10);
    v32 = v63;
  }
  else
  {
    *(_QWORD *)&v33 = v7 - 0x2000000000000;
  }
  if (!*((_DWORD *)v32 + 20)
    || (v62 = v33, result = JSC::VM::hasExceptionsAfterHandlingTraps(v32), v33 = v62, (result & 1) == 0))
  {
    LOWORD(v7) = 0;
    if (fabs(v33) != INFINITY && v33 != 0.0)
    {
      v34 = -floor(-v33);
      v35 = floor(v33);
      if (v33 >= 0.0)
        v36 = v35;
      else
        v36 = v34;
      v37 = fmod(v36, 65536.0);
      if (v37 < 0.0)
        v37 = v37 + 65536.0;
      LODWORD(v7) = (int)v37;
    }
    goto LABEL_70;
  }
LABEL_148:
  v74 = 1;
LABEL_90:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      result = WTF::StringImpl::destroy(v6, this);
    else
      *(_DWORD *)v6 -= 2;
  }
LABEL_93:
  v44 = v74;
  if (!v74)
  {
    LOWORD(v64) = (_WORD)v69;
    v45 = v70;
    v65 = v70;
    v66 = v71;
    v67 = v72;
    v46 = v73;
    v70 = 0;
    v73 = 0;
    v68 = v46;
    v47 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v47 == *(_DWORD *)(a3 + 8))
    {
      v48 = WTF::Vector<WebCore::RTCRtpCodecParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v47 + 1, (unint64_t)&v64);
      v49 = *(_QWORD *)a3 + 40 * *(unsigned int *)(a3 + 12);
      *(_WORD *)v49 = *(_WORD *)v48;
      v50 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v49 + 8) = v50;
      v51 = *(_QWORD *)(v48 + 16);
      *(_WORD *)(v49 + 24) = *(_WORD *)(v48 + 24);
      *(_QWORD *)(v49 + 16) = v51;
      v52 = *(_QWORD *)(v48 + 32);
      *(_QWORD *)(v48 + 32) = 0;
      *(_QWORD *)(v49 + 32) = v52;
      v53 = v68;
      ++*(_DWORD *)(a3 + 12);
      v68 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, this);
        else
          *(_DWORD *)v53 -= 2;
      }
    }
    else
    {
      v54 = *(_QWORD *)a3 + 40 * v47;
      *(_WORD *)v54 = (_WORD)v69;
      v65 = 0;
      *(_QWORD *)(v54 + 8) = v45;
      v55 = v66;
      *(_WORD *)(v54 + 24) = v67;
      *(_QWORD *)(v54 + 16) = v55;
      *(_QWORD *)(v54 + 32) = v46;
      ++*(_DWORD *)(a3 + 12);
      v68 = 0;
    }
    v56 = v65;
    v65 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, this);
      else
        *(_DWORD *)v56 -= 2;
    }
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DCDF8[v44])(&v64, &v69);
  }
  if (v74 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DCDF8[v44])(&v64, &v69);
  return result;
}

unint64_t WTF::Vector<WebCore::RTCRtpCodecParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::RTCRtpCodecParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::RTCRtpCodecParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RTCRtpCodecParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 40 * v4);
      v10 = v3;
      do
      {
        *(_WORD *)v8 = *(_WORD *)v10;
        v11 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        *(_QWORD *)(v8 + 8) = v11;
        v12 = *((_QWORD *)v10 + 2);
        *(_WORD *)(v8 + 24) = *((_WORD *)v10 + 12);
        *(_QWORD *)(v8 + 16) = v12;
        v13 = *((_QWORD *)v10 + 4);
        *((_QWORD *)v10 + 4) = 0;
        *(_QWORD *)(v8 + 32) = v13;
        v14 = (WTF::StringImpl *)*((_QWORD *)v10 + 4);
        *((_QWORD *)v10 + 4) = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v7);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v7);
          else
            *(_DWORD *)v15 -= 2;
        }
        v10 = (WTF *)((char *)v10 + 40);
        v8 += 40;
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21RTCRtpCodecParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpHeaderExtensionParameters>>::convert(JSC::JSGlobalObject *a1, JSC::JSCell *this, uint64_t a3)
{
  unint64_t v3;
  JSC::VM *v5;
  WTF::StringImpl *v6;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  JSC::VM *v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  double v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int16 v26;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  uint64_t result;
  int v37;
  WTF::StringImpl *v38;
  double v39;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  __int16 v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v47 = v5;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
LABEL_40:
    v42 = v6;
    v43 = v3;
    v44 = 0;
LABEL_41:
    v25 = v42;
    v42 = 0;
    v45 = v25;
    v26 = v43;
    LOWORD(v46) = v43;
    v27 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v27 == *(_DWORD *)(a3 + 8))
    {
      v28 = WTF::Vector<WebCore::RTCRtpHeaderExtensionParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v27 + 1, (unint64_t)&v45);
      v30 = *(unsigned int *)(a3 + 12);
      v31 = *(_QWORD *)a3 + 16 * v30;
      v32 = *(_QWORD *)v28;
      *(_QWORD *)v28 = 0;
      *(_QWORD *)v31 = v32;
      *(_WORD *)(v31 + 8) = *(_WORD *)(v28 + 8);
      v33 = v45;
      *(_DWORD *)(a3 + 12) = v30 + 1;
      v45 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v29);
        else
          *(_DWORD *)v33 -= 2;
      }
    }
    else
    {
      v34 = *(_QWORD *)a3 + 16 * v27;
      *(_QWORD *)v34 = v25;
      *(_WORD *)(v34 + 8) = v26;
      *(_DWORD *)(a3 + 12) = v27 + 1;
    }
    v35 = 0;
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DCE08[v35])(&v45, &v42);
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
LABEL_63:
    v44 = 1;
    goto LABEL_52;
  }
  v9 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v3 = JSC::JSObject::get(v9, a1, (unint64_t)v42);
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v10);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    goto LABEL_63;
  if (v3 != 10)
  {
    v42 = (WTF::StringImpl *)v3;
    v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 < 0xFFFE000000000000 || (v3 & 0x80000000) != 0)
    {
      if (v3 >= 0xFFFE000000000000)
      {
        v12 = (double)(int)v3;
      }
      else if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v41 = (JSC::VM *)*((_QWORD *)a1 + 7);
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v42, a1);
        v11 = v41;
      }
      else
      {
        *(_QWORD *)&v12 = v3 - 0x2000000000000;
      }
      if (*((_DWORD *)v11 + 20))
      {
        v39 = v12;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
        v12 = v39;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          goto LABEL_63;
      }
      LOWORD(v3) = 0;
      if (fabs(v12) != INFINITY && v12 != 0.0)
      {
        v13 = -floor(-v12);
        v14 = floor(v12);
        if (v12 >= 0.0)
          v15 = v14;
        else
          v15 = v13;
        v16 = fmod(v15, 65536.0);
        if (v16 < 0.0)
          v16 = v16 + 65536.0;
        LODWORD(v3) = (int)v16;
      }
    }
  }
  WTF::AtomStringImpl::addLiteral();
  v17 = v42;
  v19 = JSC::JSObject::get(v9, a1, (unint64_t)v42);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
    goto LABEL_63;
  if (v19 == 10)
  {
    v6 = 0;
    goto LABEL_40;
  }
  v42 = (WTF::StringImpl *)v19;
  v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v19 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v19 + 5) == 2)
  {
    v21 = *(WTF::StringImpl **)(v19 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v19, a1);
      if (!v21)
        goto LABEL_35;
    }
    else if (!v21)
    {
LABEL_35:
      v48 = v21;
      goto LABEL_36;
    }
    *(_DWORD *)v21 += 2;
    goto LABEL_35;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v42, a1);
LABEL_36:
  if (!*((_DWORD *)v20 + 20))
  {
    v6 = v48;
LABEL_38:
    v22 = 0;
    v46 = 0;
    v45 = 0;
    v23 = 1;
    goto LABEL_39;
  }
  v37 = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
  v6 = v48;
  if (!v37)
    goto LABEL_38;
  v22 = 1;
  v46 = 1;
  v48 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v38);
    else
      *(_DWORD *)v6 -= 2;
  }
  v23 = 0;
  v6 = 0;
  v44 = 1;
LABEL_39:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v22])(&v48, &v45);
  if (v23)
    goto LABEL_40;
  if (!v6)
    goto LABEL_52;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_52:
    v35 = 1;
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DCE08[v35])(&v45, &v42);
  }
  result = WTF::StringImpl::destroy(v6, v24);
  v35 = v44;
  if (!v44)
    goto LABEL_41;
  if (v44 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E32DCE08[v35])(&v45, &v42);
  return result;
}

unint64_t WTF::Vector<WebCore::RTCRtpHeaderExtensionParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::RTCRtpHeaderExtensionParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::RTCRtpHeaderExtensionParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RTCRtpHeaderExtensionParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = v9;
      v12 = (WTF *)((char *)v7 + 16 * v8);
      v13 = v7;
      do
      {
        v14 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)v11 = v14;
        *(_WORD *)(v11 + 8) = *((_WORD *)v13 + 4);
        v15 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v10);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 16);
        v11 += 16;
      }
      while (v13 != v12);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31RTCRtpHeaderExtensionParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSRTCRtpSender::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCRtpTransceiver::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCSctpTransport::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCSessionDescription::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLEnumeration<WebCore::RTCStatsReport::Type>>::convert(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE3366EB & 1) == 0)
  {
    dword_1ECE799C0 += 2;
    dword_1ECE799E0 += 2;
    qword_1EE3368D8 = (uint64_t)&dword_1ECE799C0;
    unk_1EE3368E0 = &dword_1ECE799E0;
    dword_1ECE79A00 += 2;
    qword_1EE3368E8 = (uint64_t)&dword_1ECE79A00;
    dword_1ECE79A20 += 2;
    qword_1EE3368F0 = (uint64_t)&dword_1ECE79A20;
    dword_1ECE79A40 += 2;
    qword_1EE3368F8 = (uint64_t)&dword_1ECE79A40;
    dword_1ECE79A60 += 2;
    qword_1EE336900 = (uint64_t)&dword_1ECE79A60;
    dword_1ECE79A80 += 2;
    qword_1EE336908 = (uint64_t)&dword_1ECE79A80;
    dword_1ECE79AA0 += 2;
    qword_1EE336910 = (uint64_t)&dword_1ECE79AA0;
    dword_1ECE79AC0 += 2;
    qword_1EE336918 = (uint64_t)&dword_1ECE79AC0;
    dword_1ECE79AE0 += 2;
    qword_1EE336920 = (uint64_t)&dword_1ECE79AE0;
    dword_1ECE79B00 += 2;
    qword_1EE336928 = (uint64_t)&dword_1ECE79B00;
    dword_1ECE79B20 += 2;
    qword_1EE336930 = (uint64_t)&dword_1ECE79B20;
    dword_1ECE79B40 += 2;
    qword_1EE336938 = (uint64_t)&dword_1ECE79B40;
    dword_1ECE79B60 += 2;
    qword_1EE336940 = (uint64_t)&dword_1ECE79B60;
    byte_1EE3366EB = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_514[8 * (int)a2 + 496];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::JSRTCStatsReport::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRadioNodeList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSRange>(WebCore::JSRange *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSRange::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSRange::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSRange::s_info);
  }
  return result;
}

uint64_t WebCore::JSRange::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3896);
  *(_QWORD *)(a1 + 3896) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSRange::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::JSRange *v6;
  unint64_t v7;
  uint64_t result;

  v6 = *(WebCore::JSRange **)(a2 + 56);
  v7 = JSC::allocateCell<WebCore::JSRange>(v6, (JSC::VM *)0x20);
  result = WebCore::JSRange::JSRange(v7, a1, a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::Range,WebCore::JSRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Range *)::owner = (uint64_t)&off_1E32DD250;
  }
  v3 = (uint64_t *)(a1 + 32);
  v6 = a2;
  JSC::Weak<JSC::JSObject>::Weak(&v5, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Range *)::owner, a1);
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v3, &v6, &v5);
  if (v5)
    *(_QWORD *)(v5 + 8) = 3;
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSRange>(WebCore::JSRange *a1, JSC::VM *a2)
{
  _QWORD *v3;
  unint64_t result;
  unint64_t v5;

  v3 = (_QWORD *)WebCore::JSRange::subspaceForImpl(a1, a2);
  result = v3[3];
  if (result >= v3[4])
  {
    result = v3[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v5 = *(_QWORD *)(result + 8) ^ v3[6];
    v3[4] = result + HIDWORD(v5);
    v3[5] = result + (int)v5;
  }
  v3[3] = result + (((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSReadableByteStreamController::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::ReadableByteStreamControllerBuiltinsWrapper::readableByteStreamControllerInitializeReadableByteStreamControllerCodeExecutable((WebCore::ReadableByteStreamControllerBuiltinsWrapper *)(*v5 + 672));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000003, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSReadableByteStreamController::s_info
       + ~((_QWORD)&WebCore::JSReadableByteStreamController::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableByteStreamController::s_info
                                                                              + ~((_QWORD)&WebCore::JSReadableByteStreamController::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSReadableByteStreamController::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSReadableByteStreamController::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSReadableByteStreamControllerPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSReadableByteStreamControllerPrototype::create((WebCore::JSReadableByteStreamControllerPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSReadableByteStreamController::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSReadableByteStreamController::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSReadableByteStreamController::s_info
           + ~((_QWORD)&WebCore::JSReadableByteStreamController::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableByteStreamController::s_info
                                                                                  + ~((_QWORD)&WebCore::JSReadableByteStreamController::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSReadableByteStreamController::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSReadableByteStreamController::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSReadableByteStreamControllerPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSReadableByteStreamControllerPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSReadableByteStreamController::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSReadableByteStreamController::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSReadableByteStreamController::s_info
         + ~((_QWORD)&WebCore::JSReadableByteStreamController::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableByteStreamController::s_info
                                                                                + ~((_QWORD)&WebCore::JSReadableByteStreamController::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSReadableByteStreamController::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSReadableByteStreamController::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSReadableByteStreamControllerPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSReadableByteStreamControllerPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSReadableByteStreamController::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSReadableByteStreamController::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1744);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1744))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1744);
    *(_QWORD *)(v30 + 1744) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1744);
  *(_QWORD *)(v26 + 1744) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v2;
  JSC::HandleSet *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  JSC::HandleSet *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  JSC::HandleSet *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  JSC::HandleSet *v34;
  JSC::HandleSet *v35;
  uint64_t **v36;
  _QWORD *v37;
  _QWORD *v38;
  JSC::HandleSet *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *(uint64_t ***)result;
  if (*(_DWORD *)(*(_QWORD *)result + 8))
  {
    *(_DWORD *)(a2 + 24) = 1;
  }
  else if (*v2)
  {
    v3 = *(JSC::HandleSet **)(((unint64_t)(*v2 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = (_QWORD *)*((_QWORD *)v3 + 5);
    if (!v4)
    {
      v39 = *(JSC::HandleSet **)(((unint64_t)(*v2 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v42 = a2;
      v36 = *(uint64_t ***)result;
      result = JSC::HandleSet::grow(v3);
      v2 = v36;
      v3 = v39;
      a2 = v42;
      v4 = (_QWORD *)*((_QWORD *)v39 + 5);
    }
    *((_QWORD *)v3 + 5) = *v4;
    v4[2] = 0;
    v5 = v4 + 2;
    *v4 = 0;
    v4[1] = 0;
    v6 = *v2;
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v28 = *(_QWORD **)(((unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v29 = v28[3];
        v28 += 3;
        *(v5 - 2) = v29;
        *(v5 - 1) = v28;
        *v28 = v5 - 2;
        *(_QWORD *)(v29 + 8) = v5 - 2;
      }
    }
    else
    {
      v7 = 0;
    }
    *v5 = v7;
    v8 = v5 - 2;
    v9 = (unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000;
    v10 = *(JSC::HandleSet **)(v9 + 0x10);
    v11 = *((_QWORD *)v10 + 5);
    if (!v11)
    {
      v34 = *(JSC::HandleSet **)(((unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v40 = (unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000;
      v43 = a2;
      v37 = v5 - 2;
      v32 = v5;
      result = JSC::HandleSet::grow(v10);
      v5 = v32;
      v10 = v34;
      v8 = v37;
      v9 = v40;
      a2 = v43;
      v11 = *((_QWORD *)v34 + 5);
    }
    *((_QWORD *)v10 + 5) = *(_QWORD *)v11;
    *(_QWORD *)(v11 + 16) = 0;
    v12 = (uint64_t *)(v11 + 16);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    v13 = *v5;
    v14 = v11 & 0xFFFFFFFFFFFFF000;
    if (v13)
    {
      v15 = *(unint64_t **)((v11 & 0xFFFFFFFFFFFFF000) + 0x10);
      v16 = v15[3];
      v15 += 3;
      *(_QWORD *)v11 = v16;
      *(_QWORD *)(v11 + 8) = v15;
      *v15 = v11;
      *(_QWORD *)(v16 + 8) = v11;
    }
    *v12 = v13;
    v17 = *(JSC::HandleSet **)((v11 & 0xFFFFFFFFFFFFF000) + 0x10);
    v18 = *((_QWORD *)v17 + 5);
    if (!v18)
    {
      v35 = *(JSC::HandleSet **)((v11 & 0xFFFFFFFFFFFFF000) + 0x10);
      v41 = v9;
      v44 = a2;
      v38 = v8;
      v31 = (_QWORD *)v11;
      v33 = v11 & 0xFFFFFFFFFFFFF000;
      v30 = (uint64_t *)(v11 + 16);
      result = JSC::HandleSet::grow(v17);
      v12 = v30;
      v11 = (unint64_t)v31;
      v14 = v33;
      v17 = v35;
      v8 = v38;
      v9 = v41;
      a2 = v44;
      v18 = *((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v17 + 5) = *(_QWORD *)v18;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(a2 + 8) = v18 + 16;
    v19 = *v12;
    if (v19)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    *(_QWORD *)(v18 + 16) = v19;
    *(_BYTE *)(a2 + 16) = 1;
    *(_DWORD *)(a2 + 24) = 0;
    v22 = *(_QWORD *)(v14 + 16);
    v23 = *(_QWORD **)(v11 + 8);
    if (v23)
    {
      v24 = *(_QWORD *)v11;
      *v23 = *(_QWORD *)v11;
      *(_QWORD *)(v24 + 8) = v23;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    *(_QWORD *)v11 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v22 + 40) = v11;
    v25 = *(_QWORD *)(v9 + 16);
    v26 = (_QWORD *)v8[1];
    if (v26)
    {
      v27 = *v8;
      *v26 = *v8;
      *(_QWORD *)(v27 + 8) = v26;
      *v8 = 0;
      v8[1] = 0;
    }
    *v8 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v25 + 40) = v8;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_DWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t WebCore::JSReadableStream::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSReadableStreamBYOBReader::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::ReadableStreamBYOBReaderBuiltinsWrapper::readableStreamBYOBReaderInitializeReadableStreamBYOBReaderCodeExecutable((WebCore::ReadableStreamBYOBReaderBuiltinsWrapper *)(*v5 + 2624));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000001, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSReadableStreamBYOBReader::s_info
       + ~((_QWORD)&WebCore::JSReadableStreamBYOBReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamBYOBReader::s_info
                                                                          + ~((_QWORD)&WebCore::JSReadableStreamBYOBReader::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSReadableStreamBYOBReader::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSReadableStreamBYOBReader::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSReadableStreamBYOBReaderPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSReadableStreamBYOBReaderPrototype::create((WebCore::JSReadableStreamBYOBReaderPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSReadableStreamBYOBReader::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSReadableStreamBYOBReader::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSReadableStreamBYOBReader::s_info
           + ~((_QWORD)&WebCore::JSReadableStreamBYOBReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamBYOBReader::s_info
                                                                              + ~((_QWORD)&WebCore::JSReadableStreamBYOBReader::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSReadableStreamBYOBReader::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSReadableStreamBYOBReader::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSReadableStreamBYOBReaderPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSReadableStreamBYOBReaderPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSReadableStreamBYOBReader::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSReadableStreamBYOBReader::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSReadableStreamBYOBReader::s_info
         + ~((_QWORD)&WebCore::JSReadableStreamBYOBReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamBYOBReader::s_info
                                                                            + ~((_QWORD)&WebCore::JSReadableStreamBYOBReader::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSReadableStreamBYOBReader::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSReadableStreamBYOBReader::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSReadableStreamBYOBReaderPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSReadableStreamBYOBReaderPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSReadableStreamBYOBReader::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSReadableStreamBYOBReader::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1760);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1760))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1760);
    *(_QWORD *)(v30 + 1760) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1760);
  *(_QWORD *)(v26 + 1760) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSReadableStreamBYOBRequest::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::ReadableStreamBYOBRequestBuiltinsWrapper::readableStreamBYOBRequestInitializeReadableStreamBYOBRequestCodeExecutable((WebCore::ReadableStreamBYOBRequestBuiltinsWrapper *)(*v5 + 2880));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000002, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info
       + ~((_QWORD)&WebCore::JSReadableStreamBYOBRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info
                                                                           + ~((_QWORD)&WebCore::JSReadableStreamBYOBRequest::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSReadableStreamBYOBRequest::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSReadableStreamBYOBRequest::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSReadableStreamBYOBRequestPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSReadableStreamBYOBRequestPrototype::create((WebCore::JSReadableStreamBYOBRequestPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSReadableStreamBYOBRequest::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info
           + ~((_QWORD)&WebCore::JSReadableStreamBYOBRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info
                                                                               + ~((_QWORD)&WebCore::JSReadableStreamBYOBRequest::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSReadableStreamBYOBRequest::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSReadableStreamBYOBRequest::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSReadableStreamBYOBRequestPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSReadableStreamBYOBRequestPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSReadableStreamBYOBRequest::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info
         + ~((_QWORD)&WebCore::JSReadableStreamBYOBRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info
                                                                             + ~((_QWORD)&WebCore::JSReadableStreamBYOBRequest::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSReadableStreamBYOBRequest::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSReadableStreamBYOBRequest::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSReadableStreamBYOBRequestPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSReadableStreamBYOBRequestPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSReadableStreamBYOBRequest::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1768);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1768))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1768);
    *(_QWORD *)(v30 + 1768) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1768);
  *(_QWORD *)(v26 + 1768) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSReadableStreamDefaultController::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::ReadableStreamDefaultControllerBuiltinsWrapper::readableStreamDefaultControllerInitializeReadableStreamDefaultControllerCodeExecutable((WebCore::ReadableStreamDefaultControllerBuiltinsWrapper *)(*v5 + 3088));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000000, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSReadableStreamDefaultController::s_info
       + ~((_QWORD)&WebCore::JSReadableStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamDefaultController::s_info
                                                                                 + ~((_QWORD)&WebCore::JSReadableStreamDefaultController::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSReadableStreamDefaultController::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSReadableStreamDefaultController::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSReadableStreamDefaultControllerPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSReadableStreamDefaultControllerPrototype::create((WebCore::JSReadableStreamDefaultControllerPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSReadableStreamDefaultController::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSReadableStreamDefaultController::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSReadableStreamDefaultController::s_info
           + ~((_QWORD)&WebCore::JSReadableStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamDefaultController::s_info
                                                                                     + ~((_QWORD)&WebCore::JSReadableStreamDefaultController::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSReadableStreamDefaultController::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSReadableStreamDefaultController::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSReadableStreamDefaultControllerPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSReadableStreamDefaultControllerPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSReadableStreamDefaultController::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSReadableStreamDefaultController::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSReadableStreamDefaultController::s_info
         + ~((_QWORD)&WebCore::JSReadableStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamDefaultController::s_info
                                                                                   + ~((_QWORD)&WebCore::JSReadableStreamDefaultController::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSReadableStreamDefaultController::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSReadableStreamDefaultController::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSReadableStreamDefaultControllerPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSReadableStreamDefaultControllerPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSReadableStreamDefaultController::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSReadableStreamDefaultController::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1776);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1776))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1776);
    *(_QWORD *)(v30 + 1776) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1776);
  *(_QWORD *)(v26 + 1776) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSReadableStreamDefaultReader::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::ReadableStreamBYOBReaderBuiltinsWrapper::readableStreamBYOBReaderInitializeReadableStreamBYOBReaderCodeExecutable((WebCore::ReadableStreamBYOBReaderBuiltinsWrapper *)(*v5 + 3344));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000001, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSReadableStreamDefaultReader::s_info
       + ~((_QWORD)&WebCore::JSReadableStreamDefaultReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamDefaultReader::s_info
                                                                             + ~((_QWORD)&WebCore::JSReadableStreamDefaultReader::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSReadableStreamDefaultReader::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSReadableStreamDefaultReader::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSReadableStreamDefaultReaderPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSReadableStreamDefaultReaderPrototype::create((WebCore::JSReadableStreamDefaultReaderPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSReadableStreamDefaultReader::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSReadableStreamDefaultReader::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSReadableStreamDefaultReader::s_info
           + ~((_QWORD)&WebCore::JSReadableStreamDefaultReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamDefaultReader::s_info
                                                                                 + ~((_QWORD)&WebCore::JSReadableStreamDefaultReader::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSReadableStreamDefaultReader::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSReadableStreamDefaultReader::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSReadableStreamDefaultReaderPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSReadableStreamDefaultReaderPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSReadableStreamDefaultReader::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSReadableStreamDefaultReader::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSReadableStreamDefaultReader::s_info
         + ~((_QWORD)&WebCore::JSReadableStreamDefaultReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamDefaultReader::s_info
                                                                               + ~((_QWORD)&WebCore::JSReadableStreamDefaultReader::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSReadableStreamDefaultReader::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSReadableStreamDefaultReader::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSReadableStreamDefaultReaderPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSReadableStreamDefaultReaderPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSReadableStreamDefaultReader::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSReadableStreamDefaultReader::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1784);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1784))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1784);
    *(_QWORD *)(v30 + 1784) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1784);
  *(_QWORD *)(v26 + 1784) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSRemotePlayback::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSReport::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSReportBody::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSReportingObserver::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLNullable<WebCore::IDLCallbackFunction<WebCore::JSVoidCallback>>>::convert@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, WebCore::JSDOMGlobalObject *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6;
  WebCore::JSVoidCallback *v8;
  WebCore::JSVoidCallback *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
  }
  else
  {
    v11 = *(_QWORD *)(result + 56);
    if ((a2 & 0xFFFE000000000002) == 0
      && (v6 = *(unsigned __int8 *)(a2 + 5), v6 >= 0x17)
      && ((v6 & 0xFE) == 0x1A
       || (*(_BYTE *)(a2 + 6) & 4) != 0
       && ((*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x38))(&v12, a2), (_BYTE)v12)))
    {
      v8 = (WebCore::JSVoidCallback *)WTF::fastMalloc((WTF *)0x20);
      v9 = WebCore::JSVoidCallback::JSVoidCallback(v8, a2, a3);
      v10 = 0;
      v13 = 0;
      v12 = 0;
      *(_QWORD *)a4 = v9;
    }
    else
    {
      JSC::throwTypeError();
      v10 = 1;
      v13 = 1;
    }
    *(_DWORD *)(a4 + 8) = v10;
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E32DCE28[v10])(&v11, &v12);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSResizeObserver>(WebCore::JSResizeObserver *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSResizeObserver::s_info + ~((_QWORD)&WebCore::JSResizeObserver::s_info << 32)) ^ (((unint64_t)&WebCore::JSResizeObserver::s_info + ~((_QWORD)&WebCore::JSResizeObserver::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSResizeObserver::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSResizeObserver::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSResizeObserver::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSResizeObserver::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSResizeObserver::s_info);
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSResizeObserver::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 5992);
  *(_QWORD *)(a1 + 5992) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

void WebCore::ResizeObserverEntry::~ResizeObserverEntry(WebCore::ResizeObserverEntry *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  bmalloc::api *v13;
  uint64_t v14;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*((_QWORD *)this + 3);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (bmalloc::api *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
    {
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)(*(_QWORD *)v13 + 8) = 3;
        *(_QWORD *)v13 = 0;
      }
      bmalloc::api::isoDeallocate(v13, a2);
    }
    else
    {
      --*((_DWORD *)v13 + 2);
    }
  }
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
}

uint64_t WebCore::getDOMStructure<WebCore::JSResizeObserverEntry>(WebCore::JSResizeObserverEntry *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSResizeObserverEntry::s_info
        + ~((_QWORD)&WebCore::JSResizeObserverEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSResizeObserverEntry::s_info
                                                                      + ~((_QWORD)&WebCore::JSResizeObserverEntry::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSResizeObserverEntry::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSResizeObserverEntry::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSResizeObserverEntry::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSResizeObserverEntry::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSResizeObserverEntry::s_info);
}

uint64_t WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::ResizeObserverSize>>>::convert<WTF::Ref<WebCore::ResizeObserverSize,WTF::RawPtrTraits<WebCore::ResizeObserverSize>,WTF::DefaultRefDerefTraits<WebCore::ResizeObserverSize>>,0ul>(JSC *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v5;
  unsigned int v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  unint64_t SlowCase;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v30;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  JSC::VM *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *Allocator;
  int v55;
  JSValue v56;
  void *v57;
  unint64_t v58;
  JSC::VM *v59;
  JSC::JSObject *v60;
  JSC::JSGlobalObject *v61;
  uint64_t v62;
  uint64_t *v63;
  _QWORD *v65;
  uint64_t v67;
  WTF *v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  WTF *v72;
  _OWORD v73[4];
  uint64_t v74;
  JSC::VM *v75;
  uint64_t v76[2];

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v75 = v5;
  v70 = 0;
  v71 = 0x800000000;
  v72 = (WTF *)((char *)v73 + 8);
  memset(v73, 0, sizeof(v73));
  v74 = 0;
  v6 = *(_DWORD *)(a3 + 12);
  if (v6 >= 9)
  {
    v70 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v71) == 1;
    v6 = *(_DWORD *)(a3 + 12);
    if (v6)
      goto LABEL_3;
  }
  else if (v6)
  {
LABEL_3:
    v7 = *(WTF ***)a3;
    v67 = *(_QWORD *)a3 + 8 * v6;
    while (1)
    {
      v8 = *v7;
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
      if (!v9)
        goto LABEL_12;
      v10 = *(_DWORD *)(v9 - 8);
      v11 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WTF **)(v9 + 16 * v14);
      if (v15 != v8)
        break;
LABEL_9:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (!v17)
        goto LABEL_12;
      if ((*(_BYTE *)(v17 + 8) & 3) != 0)
        goto LABEL_12;
      SlowCase = *(_QWORD *)v17;
      if (!*(_QWORD *)v17)
        goto LABEL_12;
LABEL_56:
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        goto LABEL_89;
      v55 = v71;
      if ((_DWORD)v71 == HIDWORD(v71) || v72 != (WTF *)((char *)v73 + 8) && v72)
      {
        v56.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v71, v56) == 1)
          v70 = 1;
      }
      else
      {
        *((_QWORD *)v72 + v71) = SlowCase;
        LODWORD(v71) = v55 + 1;
      }
      if (++v7 == (WTF **)v67)
        goto LABEL_74;
    }
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(WTF **)(v9 + 16 * v14);
      ++v16;
      if (v15 == v8)
        goto LABEL_9;
    }
LABEL_12:
    ++*((_DWORD *)v8 + 2);
    if (*(void (***)(WebCore::ResizeObserverSize *__hidden))v8 != off_1E3402818)
    {
      __break(0xC471u);
      JUMPOUT(0x194E9E0FCLL);
    }
    v19 = *(_QWORD *)(a2 + 3296);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = ((unint64_t)&WebCore::JSResizeObserverSize::s_info
           + ~((_QWORD)&WebCore::JSResizeObserverSize::s_info << 32)) ^ (((unint64_t)&WebCore::JSResizeObserverSize::s_info
                                                                        + ~((_QWORD)&WebCore::JSResizeObserverSize::s_info << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(char ***)(v19 + 16 * v24);
      if (v25 == &WebCore::JSResizeObserverSize::s_info)
      {
LABEL_18:
        v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
        if (v27)
          goto LABEL_20;
      }
      else
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(char ***)(v19 + 16 * v24);
          ++v26;
          if (v25 == &WebCore::JSResizeObserverSize::s_info)
            goto LABEL_18;
        }
      }
    }
    v28 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSResizeObserverSizePrototype::createStructure(v28, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v32 = (JSC::JSCell *)WebCore::JSResizeObserverSizePrototype::create((WebCore::JSResizeObserverSizePrototype *)v28, Structure, v30, v31);
    v33 = WebCore::JSResizeObserverSize::createStructure(v28, a2, v32);
    v27 = WebCore::cacheDOMStructure((JSCell *)a2, v33, (uint64_t)&WebCore::JSResizeObserverSize::s_info);
LABEL_20:
    v34 = v5;
    v35 = *(_QWORD *)(a2 + 56);
    v36 = *(_QWORD *)(v35 + 41456);
    v37 = *(_QWORD *)(v36 + 23536);
    v38 = *(_QWORD **)(v37 + 6008);
    if (v38)
      goto LABEL_40;
    v39 = *(_QWORD *)(v36 + 22648);
    if (__ldaxr((unsigned __int8 *)v39))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v39))
    {
      goto LABEL_25;
    }
    MEMORY[0x19AEA534C](v39);
LABEL_25:
    v41 = *(_QWORD *)(v39 + 2824);
    if (!*(_QWORD *)(v41 + 6008))
    {
      v42 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v68, "IsoSpace T");
      v76[0] = 0;
      MEMORY[0x19AEA3204](v42, &v68, v35 + 192, v35 + 1872, 32, 8, v76);
      v44 = v76[0];
      v76[0] = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      v45 = v68;
      v68 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
          WTF::fastFree(v45, v43);
        else
          --*(_DWORD *)v45;
      }
      v46 = *(_QWORD *)(v41 + 6008);
      *(_QWORD *)(v41 + 6008) = v42;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v47 = *(_QWORD *)(v37 + 6008);
    *(_QWORD *)(v37 + 6008) = v38;
    if (v47)
    {
      v48 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v48, v49);
    }
    v50 = __ldxr((unsigned __int8 *)v39);
    if (v50 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v39))
      {
LABEL_40:
        SlowCase = v38[3];
        if (SlowCase >= v38[4])
        {
          SlowCase = v38[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_42;
          }
          v58 = *(_QWORD *)(SlowCase + 8) ^ v38[6];
          v38[4] = SlowCase + HIDWORD(v58);
          v38[5] = SlowCase + (int)v58;
        }
        v38[3] = SlowCase + 32;
LABEL_42:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v27);
        *(_QWORD *)(SlowCase + 24) = v8;
        if (*(_BYTE *)(v35 + 755))
          __dmb(0xAu);
        v51 = *(_QWORD *)(a2 + 3320);
        if ((byte_1EE336808 & 1) == 0)
        {
          qword_1EE336800 = (uint64_t)&off_1E32DAE00;
          byte_1EE336808 = 1;
        }
        v68 = v8;
        if ((SlowCase & 8) != 0)
          v52 = (SlowCase - 112) | 1;
        else
          v52 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v52 & 1) != 0)
          v53 = v52 + 47;
        else
          v53 = *(_QWORD *)v52 + 32;
        Allocator = *(_QWORD **)(v53 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v53 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE336800;
        Allocator[2] = v51;
        v76[0] = (uint64_t)Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v51 + 32), (uint64_t *)&v68, v76);
        if (v76[0])
          *(_QWORD *)(v76[0] + 8) = 3;
        v5 = v34;
        goto LABEL_56;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
    goto LABEL_40;
  }
LABEL_74:
  if (v70)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v68 = v72;
    v69 = v71;
    v59 = *(JSC::VM **)(a2 + 56);
    if (*((_DWORD *)v59 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
      v61 = 0;
    else
      v61 = (JSC::JSGlobalObject *)JSC::constructArray();
    if (!*((_DWORD *)v5 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) == 0)
    {
      v62 = JSC::objectConstructorFreeze(a1, v61, v60);
      goto LABEL_79;
    }
  }
LABEL_89:
  v62 = 0;
LABEL_79:
  v63 = *(uint64_t **)&v73[0];
  if (*(_QWORD *)&v73[0])
  {
    v68 = (WTF *)&v71;
    v65 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v73[0], (uint64_t *)&v68);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v63, v65);
  }
  if (v72 != (WTF *)((char *)v73 + 8) && v72)
    WTF::fastFree(v72, v57);
  return v62;
}

uint64_t WebCore::JSResizeObserverSize::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::EventHandler::dispatchTouchEvent(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, float a5, float a6)
{
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  WebCore::Quirks *v17;
  _QWORD *v18;
  uint64_t v19;
  WebCore::EventTarget **v20;
  uint64_t v21;
  WebCore::EventTarget **v22;
  uint64_t v23;
  WebCore::EventTarget **v24;
  float32x2_t v25;
  WebCore::EventTarget *v26;
  uint64_t v27;
  void *v28;
  WebCore::EventTarget *v29;
  uint64_t v30;
  WTF **v31;
  WTF *v32;
  uint64_t v33;
  uint64_t Ref;
  WTF **v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  float64x2_t *v81;
  int32x2_t v82;
  int8x8_t v83;
  void *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  char v100;
  int v101;
  WTF *v102;
  void *v103;
  uint64_t v104;
  WTF *v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  WebCore::Quirks *v113;
  WebCore::Quirks *v114;
  unsigned __int16 v115;
  char v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  WTF *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned __int8 *v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  WTF::StringImpl *v138;
  WTF *v139;
  WTF *v140;
  int v141;
  WebCore::Quirks *v142;
  uint64_t *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  WTF *v147;
  void *v148;
  uint64_t v149;
  WTF *v150;
  uint64_t *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  char **v156;
  void *v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  WTF **v161;
  WTF **v162;
  WTF *v163;
  uint64_t v164;
  WTF **v165;
  WTF **v166;
  WTF *v167;
  WTF *v168;
  uint64_t v169;
  WTF **v170;
  WTF **v171;
  WTF *v172;
  uint64_t v173;
  WTF *v174;
  uint64_t v175;
  WTF *v176;
  uint64_t *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t *v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  WebCore::Quirks *v185;
  WebCore::EventTarget *v186;
  int v187;
  double v188;
  double v189;
  _DWORD *v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  WebCore::Element **v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  WTF **v199;
  uint64_t v200;
  WTF *v201;
  WTF *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  WTF *v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  WTF *v211;
  char *v212;
  WTF *v213;
  void *v214;
  char v215;
  char v217;
  WebCore::EventTarget **v218;
  WebCore::EventTarget **v219;
  WebCore::EventTarget **v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char **v224;
  uint64_t v225;
  int v226;
  _DWORD *v227;
  unint64_t StatusReg;
  unsigned int v230;
  WTF ***v231;
  WebCore::EventTarget *v233;
  uint64_t v234;
  WebCore::Document *v235;
  WTF *v236[4];
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  __int16 v245;
  uint64_t v246;
  uint64_t v247;
  WTF *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  WTF *v254[2];

  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (_DWORD *)v6[36];
  if (!v7)
  {
    v215 = 0;
    return v215 & 1;
  }
  ++v7[2];
  v12 = v6[37];
  if (!v12)
  {
    v222 = 0;
    goto LABEL_13;
  }
  *(_DWORD *)(v12 + 24) += 2;
  WebCore::Document::updateLayout(v12, 2u, 0);
  v13 = *(unsigned int *)(a2 + 60);
  if (v13 < 2)
  {
LABEL_9:
    LODWORD(v222) = 1;
    goto LABEL_10;
  }
  v14 = 0;
  v15 = (int *)(*(_QWORD *)(a2 + 48) + 12);
  while (1)
  {
    v16 = *v15;
    v15 += 18;
    if ((v16 - 5) <= 0xFFFFFFFD)
      break;
LABEL_8:
    if (!--v13)
      goto LABEL_9;
  }
  if (v14 != 1)
  {
    v14 = 1;
    goto LABEL_8;
  }
  LODWORD(v222) = 0;
LABEL_10:
  v17 = *(WebCore::Quirks **)(v12 + 688);
  if (!v17)
    v17 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v12);
  BYTE4(v222) = WebCore::Quirks::shouldDisablePointerEventsQuirk(v17);
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
LABEL_13:
  v234 = *(_QWORD *)(*(_QWORD *)(v6[3] + 8) + 88);
  v18 = (_QWORD *)*a4;
  if (!*a4)
  {
    v22 = 0;
    v19 = 0;
    v21 = a1;
    goto LABEL_24;
  }
  v19 = *((unsigned int *)v18 - 1);
  v20 = (WebCore::EventTarget **)&v18[2 * v19];
  v21 = a1;
  if (!*((_DWORD *)v18 - 3))
  {
    v22 = (WebCore::EventTarget **)&v18[2 * v19];
LABEL_24:
    v20 = (WebCore::EventTarget **)&v18[2 * v19];
    if (v18)
      goto LABEL_21;
    goto LABEL_25;
  }
  v22 = (WebCore::EventTarget **)v18;
  if ((_DWORD)v19)
  {
    v23 = 16 * v19;
    v22 = (WebCore::EventTarget **)v18;
    while ((unint64_t)*v22 + 1 <= 1)
    {
      v22 += 2;
      v23 -= 16;
      if (!v23)
      {
        v22 = v20;
        break;
      }
    }
  }
  if (v18)
  {
LABEL_21:
    v24 = (WebCore::EventTarget **)&v18[2 * *((unsigned int *)v18 - 1)];
    goto LABEL_26;
  }
LABEL_25:
  v24 = 0;
LABEL_26:
  if (v24 != v22)
  {
    v221 = 0;
    v217 = 0;
    v219 = v20;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v25 = (float32x2_t)vdup_n_s32(0x3C800000u);
    v227 = v7;
    v235 = (WebCore::Document *)v12;
    v218 = v24;
    while (1)
    {
      v26 = *v22;
      if ((*((_BYTE *)*v22 + 22) & 2) != 0)
        *((_DWORD *)v26 + 6) += 2;
      else
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v26 + 88))(*v22);
      v233 = v26;
      v27 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = 0;
      v224 = (char **)(v27 + 8);
      v225 = v27;
      *(_QWORD *)(v27 + 16) = 0;
      v220 = v22;
      v29 = v22[1];
      v30 = *((unsigned int *)v29 + 3);
      if ((_DWORD)v30)
      {
        v31 = *(WTF ***)v29;
        v223 = *(_QWORD *)v29 + 8 * v30;
        while (1)
        {
          v32 = *v31;
          *(_DWORD *)v32 = *(_DWORD *)*v31 + 1;
          v236[0] = v32;
          v33 = *(unsigned int *)(v225 + 20);
          if ((_DWORD)v33 == *(_DWORD *)(v225 + 16))
          {
            Ref = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v224, v33 + 1, (unint64_t)v236);
            v33 = *(unsigned int *)(v225 + 20);
            v35 = (WTF **)(*(_QWORD *)(v225 + 8) + 8 * v33);
            v32 = *(WTF **)Ref;
          }
          else
          {
            v35 = (WTF **)&(*v224)[8 * v33];
            Ref = (uint64_t)v236;
          }
          *(_QWORD *)Ref = 0;
          *v35 = v32;
          *(_DWORD *)(v225 + 20) = v33 + 1;
          v36 = v236[0];
          v236[0] = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
            {
              v149 = *((_QWORD *)v36 + 2);
              *((_QWORD *)v36 + 2) = 0;
              if (v149)
              {
                if ((*(_BYTE *)(v149 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v149 + 24) == 2)
                  {
                    if ((*(_WORD *)(v149 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v149, v28);
                  }
                  else
                  {
                    *(_DWORD *)(v149 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v149 + 96))(v149);
                }
              }
              v150 = (WTF *)*((_QWORD *)v36 + 1);
              *((_QWORD *)v36 + 1) = 0;
              if (v150)
              {
                if (*(_DWORD *)v150 == 1)
                {
                  v151 = (uint64_t *)*((_QWORD *)v150 + 2);
                  *((_QWORD *)v150 + 2) = 0;
                  if (v151)
                  {
                    if (*v151)
                      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v151, (WTF::StringImpl *)v28);
                    WTF::fastFree((WTF *)v151, v28);
                  }
                  v152 = (unsigned int *)*((_QWORD *)v150 + 1);
                  *((_QWORD *)v150 + 1) = 0;
                  if (v152)
                  {
                    do
                    {
                      v153 = __ldaxr(v152);
                      v154 = v153 - 1;
                    }
                    while (__stlxr(v154, v152));
                    if (!v154)
                    {
                      atomic_store(1u, v152);
                      WTF::fastFree((WTF *)v152, v28);
                    }
                  }
                  WTF::fastFree(v150, v28);
                }
                else
                {
                  --*(_DWORD *)v150;
                }
              }
              Ref = WTF::fastFree(v36, v28);
              v12 = (uint64_t)v235;
            }
            else
            {
              --*(_DWORD *)v36;
            }
          }
          v37 = a1;
          if ((v222 & 0x100000000) == 0)
          {
            v38 = *(unsigned int *)(a2 + 60);
            if ((_DWORD)v38)
            {
              v39 = 0;
              v40 = *((unsigned int *)*v31 + 6);
              v41 = 9 * ((v40 + ~((_DWORD)v40 << 15)) ^ ((v40 + ~((_DWORD)v40 << 15)) >> 10));
              v42 = (v41 ^ (v41 >> 6)) + ~((v41 ^ (v41 >> 6)) << 11);
              v43 = (~(v40 << 32) + v40) ^ ((unint64_t)(~(v40 << 32) + v40) >> 22);
              v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
              v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
              v230 = (v45 >> 31) ^ v45;
              v226 = v42 ^ HIWORD(v42);
              while (1)
              {
                v46 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 72 * v39 + 12);
                if ((v46 - 3) > 1)
                  goto LABEL_58;
                v47 = *(_QWORD *)(StatusReg + 736);
                if (!v47)
                  break;
                v48 = *(_QWORD *)(v47 + 96);
                if (!v48)
                  goto LABEL_44;
LABEL_54:
                v56 = *(_QWORD *)(v48 + 40);
                if (!v56)
                {
                  Ref = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v48);
                  v56 = *(_QWORD *)(v48 + 40);
                }
                if (*a3 == *(_QWORD *)(v56 + 2088))
                  goto LABEL_171;
                v38 = *(unsigned int *)(a2 + 60);
LABEL_58:
                if (v39 >= v38)
                {
LABEL_410:
                  __break(0xC471u);
                  JUMPOUT(0x194E9FAB0);
                }
                if (*(_DWORD *)(*(_QWORD *)(a2 + 48) + 72 * v39) != (_DWORD)v40)
                  goto LABEL_171;
                v57 = *(_QWORD *)(v234 + 8);
                if (v57)
                {
                  v58 = *(_DWORD *)(v57 - 8);
                  v59 = v58 & v230;
                  v60 = *(_QWORD *)(v57 + 16 * v59);
                  if (v60 == v40)
                  {
LABEL_65:
                    Ref = *(_QWORD *)(v57 + 16 * v59 + 8);
                    if (Ref)
                    {
                      v62 = (*(_DWORD *)Ref)++;
                      v63 = *(unsigned __int8 *)(Ref + 40);
                      if (v62)
                      {
                        *(_DWORD *)Ref = v62;
                      }
                      else
                      {
                        WebCore::PointerCaptureController::CapturingData::~CapturingData((WebCore::PointerCaptureController::CapturingData *)Ref, (WTF::StringImpl *)v28);
                        Ref = WTF::fastFree(v102, v103);
                      }
                      v65 = v63 == 2;
                      v37 = a1;
                      if (v65)
                        goto LABEL_171;
                    }
                  }
                  else
                  {
                    v61 = 1;
                    while (v60 != 0x8000000000000000)
                    {
                      v59 = ((_DWORD)v59 + v61) & v58;
                      v60 = *(_QWORD *)(v57 + 16 * v59);
                      ++v61;
                      if (v60 == v40)
                        goto LABEL_65;
                    }
                  }
                }
                v64 = *(_DWORD *)(v37 + 744);
                if (*(_DWORD *)(v37 + 764))
                  v65 = v64 == 0;
                else
                  v65 = 0;
                if (v65)
                {
                  *(_DWORD *)(v37 + 744) = v40;
                  v64 = v40;
                }
                v66 = *(_QWORD *)(v234 + 8);
                if (!v66)
                  goto LABEL_85;
                v67 = *(_DWORD *)(v66 - 8);
                v68 = v67 & v230;
                v69 = *(_QWORD *)(v66 + 16 * v68);
                if (v69 != v40)
                {
                  v70 = 1;
                  while (v69 != 0x8000000000000000)
                  {
                    v68 = ((_DWORD)v68 + v70) & v67;
                    v69 = *(_QWORD *)(v66 + 16 * v68);
                    ++v70;
                    if (v69 == v40)
                      goto LABEL_80;
                  }
LABEL_85:
                  v74 = *((_QWORD *)v233 + 2);
                  if (v46)
                  {
                    if ((v74 & 0x2000000000000) == 0)
                      goto LABEL_97;
                    if ((*((_WORD *)v233 + 14) & 8) == 0)
                      goto LABEL_97;
                    if (!*(_BYTE *)(v234 + 17))
                      goto LABEL_97;
                    v75 = *(_QWORD *)(v234 + 8);
                    if (!v75)
                      goto LABEL_97;
                    v76 = *(_DWORD *)(v75 - 8);
                    v77 = v76 & v230;
                    v78 = *(_QWORD *)(v75 + 16 * v77);
                    if (v78 == v40)
                    {
LABEL_94:
                      Ref = *(_QWORD *)(v75 + 16 * v77 + 8);
                      if (!Ref)
                        goto LABEL_97;
                      ++*(_DWORD *)Ref;
                      v80 = *(_QWORD *)(Ref + 8) == (_QWORD)v233;
                      Ref = (uint64_t)WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)Ref, (WTF::StringImpl *)v28);
                      v74 = *((_QWORD *)v233 + 2);
                      if ((v74 & 0x2000000000000) == 0)
                        goto LABEL_101;
                    }
                    else
                    {
                      v79 = 1;
                      while (v78 != 0x8000000000000000)
                      {
                        v77 = ((_DWORD)v77 + v79) & v76;
                        v78 = *(_QWORD *)(v75 + 16 * v77);
                        ++v79;
                        if (v78 == v40)
                          goto LABEL_94;
                      }
LABEL_97:
                      v80 = 0;
                      if ((v74 & 0x2000000000000) == 0)
                      {
LABEL_101:
                        LODWORD(v254[0]) = 8;
                        BYTE4(v254[0]) = 1;
                        v81 = (float64x2_t *)*v31;
                        v236[2] = (WTF *)0x4000000040;
                        v82 = vmovn_s64(vcvtq_s64_f64(v81[3]));
                        v83 = (int8x8_t)vcgt_s32(v82, (int32x2_t)0xFE000000FE000000);
                        v236[0] = (WTF *)vorr_s8((int8x8_t)(*(_QWORD *)&v83 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v82), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v82, 6uLL)), v83));
                        v236[1] = (WTF *)((uint64_t)v236[0] & 0xFFFFFFC0 | ((unint64_t)((HIDWORD(v236[0]) & 0xFFFFFFC0) >> 6) << 38));
                        v236[3] = (WTF *)vmul_f32(vcvt_f32_s32((int32x2_t)v236[0]), v25);
                        v237 = (float)(int)((uint64_t)v236[0] & 0xFFFFFFC0) * 0.015625;
                        v238 = (float)(int)(HIDWORD(v236[0]) & 0xFFFFFFC0) * 0.015625;
                        v239 = v237 + 1.0;
                        v240 = v238;
                        v241 = v237 + 1.0;
                        v242 = v238 + 1.0;
                        v243 = v237;
                        v244 = v238 + 1.0;
                        v245 = 256;
                        v246 = 0;
                        v247 = 0;
                        v248 = v236[0];
                        v253 = 0;
                        v252 = 0;
                        v250 = 0;
                        v251 = 0;
                        v249 = 0;
                        WebCore::Document::hitTest((uint64_t)v235, v254, (WebCore::HitTestingTransformState *)v236, (uint64_t)v236);
                        v72 = v246;
                        if (v246)
                        {
                          do
                          {
                            v85 = *(_WORD *)(v72 + 28);
                            if ((v85 & 8) != 0)
                            {
                              if ((*(_BYTE *)(v72 + 22) & 2) != 0)
                                *(_DWORD *)(v72 + 24) += 2;
                              else
                                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 88))(v72);
                              WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v236, v84);
                              goto LABEL_123;
                            }
                            v87 = (uint64_t *)(v72 + 32);
                            v86 = *(_QWORD *)(v72 + 32);
                            if (v86)
                            {
                              if ((*(_WORD *)(v86 + 28) & 8) != 0)
                              {
                                v88 = *(_QWORD *)(v86 + 72) & 0xFFFFFFFFFFFFLL;
                                if (v88)
                                {
                                  v90 = *(_QWORD *)(v88 + 88);
                                  if (v90)
                                  {
                                    v91 = *(_QWORD *)(v90 + 224);
                                    if (v91)
                                    {
                                      v89 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v72);
                                      if (v89)
                                        goto LABEL_108;
                                      v85 = *(_WORD *)(v72 + 28);
                                    }
                                  }
                                }
                              }
                            }
                            if ((v85 & 0x80) != 0)
                            {
                              v92 = *(_QWORD *)(v72 + 200);
                              if (!v92)
                                break;
                              v87 = (uint64_t *)(v92 + 8);
                            }
                            v89 = *v87;
LABEL_108:
                            v72 = v89;
                          }
                          while (v89);
                        }
                        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v236, v84);
                        v74 = *((_QWORD *)v233 + 2);
LABEL_117:
                        if ((v74 & 0x2000000000000) == 0)
                        {
                          v72 = (uint64_t)v233;
                          Ref = (*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)v233 + 88))(v233);
                          goto LABEL_123;
                        }
                        v72 = (uint64_t)v233;
                        v93 = *((_DWORD *)v233 + 6) + 2;
LABEL_119:
                        *(_DWORD *)(v72 + 24) = v93;
                        goto LABEL_123;
                      }
                    }
                  }
                  else
                  {
                    v80 = 1;
                    if ((v74 & 0x2000000000000) == 0)
                      goto LABEL_101;
                  }
                  if (!v80 || (v74 & 0x8000000000000) == 0)
                    goto LABEL_101;
                  goto LABEL_117;
                }
LABEL_80:
                v71 = *(_QWORD *)(v66 + 16 * v68 + 8);
                if (!v71)
                  goto LABEL_85;
                v72 = *(_QWORD *)(v71 + 16);
                if (!v72)
                  goto LABEL_85;
                v73 = *(_DWORD *)(v72 + 24);
                *(_DWORD *)(v72 + 24) = v73 + 2;
                if (*(WebCore::Document **)(*(_QWORD *)(v72 + 40) + 8) != v235)
                {
                  if (v73)
                  {
                    *(_DWORD *)(v72 + 24) = v73;
                  }
                  else if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
                  {
                    Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v72, v28);
                  }
                  goto LABEL_85;
                }
                if (v73)
                {
                  *(_DWORD *)(v72 + 24) = v73;
                }
                else if ((*(_WORD *)(v72 + 30) & 0x400) != 0)
                {
                  v73 = 2;
                }
                else
                {
                  Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v72, v28);
                  v73 = *(_DWORD *)(v72 + 24);
                }
                *(_DWORD *)(v72 + 24) = v73 + 2;
                if ((*(_BYTE *)(v72 + 22) & 2) != 0)
                {
                  v101 = v73 + 4;
                  *(_DWORD *)(v72 + 24) = v101;
                }
                else
                {
                  Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 88))(v72);
                  v101 = *(_DWORD *)(v72 + 24);
                }
                v93 = v101 - 2;
                if (v93)
                  goto LABEL_119;
                if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
                  Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v72, v28);
LABEL_123:
                if ((*(_QWORD *)(v72 + 16) & 0x2000000000000) == 0
                  || (v94 = *(unsigned __int16 *)(v72 + 28), (v94 & 8) != 0))
                {
                  v98 = v72;
                  v37 = a1;
LABEL_156:
                  v105 = *(WTF **)(v37 + 776);
                  if (v105)
                  {
                    v106 = *((_DWORD *)v105 - 2);
                    v107 = v106 & v226;
                    v108 = *((_DWORD *)v105 + 5 * (v106 & v226));
                    if (v108 == (_DWORD)v40)
                    {
LABEL_158:
                      v105 = *(WTF **)((char *)v105 + 20 * v107 + 12);
                    }
                    else
                    {
                      v109 = 1;
                      v110 = *((_DWORD *)v105 + 5 * v107);
                      v111 = v106 & v226;
                      do
                      {
                        if (v110 == -1)
                        {
                          v105 = 0;
                          goto LABEL_168;
                        }
                        v111 = (v111 + v109) & v106;
                        v110 = *((_DWORD *)v105 + 5 * v111);
                        ++v109;
                      }
                      while (v110 != (_DWORD)v40);
                      v112 = 1;
                      while (v108 != -1)
                      {
                        v107 = (v107 + v112) & v106;
                        v108 = *((_DWORD *)v105 + 5 * v107);
                        ++v112;
                        if (v108 == (_DWORD)v40)
                          goto LABEL_158;
                      }
                      v105 = (WTF *)0x8000000000000000;
                    }
                  }
LABEL_168:
                  v236[0] = v105;
                  Ref = (uint64_t)WebCore::PointerCaptureController::dispatchEventForTouchAtIndex((const WebCore::PointerEvent *)v234, v98, (uint64_t *)a2, v39, v64 == (_DWORD)v40, *(WTF **)(*(_QWORD *)(*(_QWORD *)(v37 + 8) + 8) + 112), (uint64_t *)v236);
                  if ((*(_BYTE *)(v98 + 22) & 2) != 0)
                  {
                    if (*(_DWORD *)(v98 + 24) == 2)
                    {
                      if ((*(_WORD *)(v98 + 30) & 0x400) == 0)
                        Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v98, v28);
                    }
                    else
                    {
                      *(_DWORD *)(v98 + 24) -= 2;
                    }
                  }
                  else
                  {
                    Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 96))(v98);
                  }
                  goto LABEL_171;
                }
                v95 = *(_QWORD *)(v72 + 32);
                if (v95)
                {
                  if ((*(_WORD *)(v95 + 28) & 8) != 0)
                  {
                    v96 = *(_QWORD *)(v95 + 72) & 0xFFFFFFFFFFFFLL;
                    if (v96)
                    {
                      v104 = *(_QWORD *)(v96 + 88);
                      if (v104)
                      {
                        Ref = *(_QWORD *)(v104 + 224);
                        if (Ref)
                        {
                          Ref = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Ref + 16))(Ref, v72);
                          v98 = Ref;
                          if (Ref)
                            goto LABEL_150;
                          v94 = *(unsigned __int16 *)(v72 + 28);
                        }
                      }
                    }
                  }
                }
                if ((~v94 & 0x408) == 0)
                {
                  Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 368))(v72);
                  if ((_DWORD)Ref)
                  {
                    v97 = *(_QWORD *)(v72 + 112);
                    if (!v97)
                      goto LABEL_137;
LABEL_131:
                    v98 = *(_QWORD *)(v97 + 8);
                    if (!v98)
                      goto LABEL_138;
                    goto LABEL_150;
                  }
                }
                v98 = *(_QWORD *)(v72 + 32);
                if (!v98)
                  goto LABEL_138;
                v99 = *(_WORD *)(v98 + 28);
                if ((v99 & 0x80) != 0)
                {
                  v97 = *(_QWORD *)(v98 + 200);
                  if (!v97)
                  {
LABEL_137:
                    v98 = 0;
LABEL_138:
                    v100 = 1;
                    goto LABEL_152;
                  }
                  goto LABEL_131;
                }
                if ((v99 & 8) == 0)
                  goto LABEL_137;
LABEL_150:
                if ((*(_BYTE *)(v98 + 22) & 2) != 0)
                {
                  v100 = 0;
                  *(_DWORD *)(v98 + 24) += 2;
                }
                else
                {
                  Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
                  v100 = 0;
                }
LABEL_152:
                if ((*(_BYTE *)(v72 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v72 + 24) == 2)
                  {
                    if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
                      Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v72, v28);
                  }
                  else
                  {
                    *(_DWORD *)(v72 + 24) -= 2;
                  }
                }
                else
                {
                  Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 96))(v72);
                }
                v37 = a1;
                if ((v100 & 1) == 0)
                  goto LABEL_156;
LABEL_171:
                ++v39;
                v38 = *(unsigned int *)(a2 + 60);
                v12 = (uint64_t)v235;
                if (v39 >= v38)
                  goto LABEL_196;
              }
              Ref = WTF::Thread::initializeCurrentTLS((WTF::Thread *)Ref);
              v47 = Ref;
LABEL_44:
              v48 = *(_QWORD *)(v47 + 96);
              if (!v48)
              {
                v48 = WTF::fastMalloc((WTF *)0x60);
                *(_DWORD *)(v48 + 8) = 1;
                v49 = (unsigned int *)(v48 + 8);
                *(_QWORD *)v48 = off_1E31F4A70;
                v50 = (_QWORD *)WTF::fastMalloc((WTF *)8);
                *v50 = 0;
                *(_QWORD *)(v48 + 16) = v50;
                *(_QWORD *)v48 = off_1E3407108;
                *(_BYTE *)(v48 + 24) = 0;
                *(_QWORD *)(v48 + 32) = 0;
                *(_QWORD *)(v48 + 40) = 0;
                v51 = WTF::fastMalloc((WTF *)0x28);
                *(_DWORD *)(v51 + 28) = 0;
                *(_QWORD *)(v51 + 32) = 0;
                *(_QWORD *)(v51 + 8) = 0;
                *(_QWORD *)(v51 + 16) = 0;
                *(_QWORD *)v51 = 0;
                *(_WORD *)(v51 + 24) = 0;
                if (WTF::isUIThread((WTF *)v51))
                {
                  {
                    WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
                    qword_1ECE90CE8 = 0;
                  }
                  WebCore::ThreadTimers::setSharedTimer((uint64_t **)v51, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
                }
                *(_QWORD *)(v48 + 48) = v51;
                *(_OWORD *)(v48 + 56) = 0u;
                *(_OWORD *)(v48 + 72) = 0u;
                *(_BYTE *)(v48 + 88) = 0;
                if (pthread_main_np())
                {
                  WebCore::sharedMainThreadStaticData = v48;
                  do
                    v52 = __ldaxr(v49);
                  while (__stlxr(v52 + 1, v49));
                }
                Ref = *(_QWORD *)(v47 + 96);
                *(_QWORD *)(v47 + 96) = v48;
                if (Ref)
                {
                  v53 = (unsigned int *)(Ref + 8);
                  v37 = a1;
                  do
                  {
                    v54 = __ldaxr(v53);
                    v55 = v54 - 1;
                  }
                  while (__stlxr(v55, v53));
                  if (!v55)
                  {
                    atomic_store(1u, (unsigned int *)(Ref + 8));
                    Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Ref + 8))(Ref);
                  }
                }
                else
                {
                  v37 = a1;
                }
              }
              goto LABEL_54;
            }
          }
LABEL_196:
          if ((_DWORD)v222)
          {
            v113 = *(WebCore::Quirks **)(v12 + 688);
            if (!v113)
              v113 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v12);
            if (WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v113, v233))
            {
              v114 = *(WebCore::Quirks **)(v12 + 688);
              if (!v114)
                v114 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v12);
              v115 = WebCore::Quirks::simulatedMouseEventTypeForTarget(v114, v233);
              if (v115 >= 0x100u)
              {
                v116 = v115;
                v117 = *((unsigned int *)*v31 + 6);
                v118 = *(_DWORD *)(a1 + 740);
                if (!v118 || (_DWORD)v117 == v118)
                {
                  v119 = *(unsigned int *)(a2 + 60);
                  if ((_DWORD)v119)
                    break;
                }
              }
            }
          }
LABEL_250:
          if (++v31 == (WTF **)v223)
            goto LABEL_272;
        }
        v120 = 0;
        v121 = (~(v117 << 32) + v117) ^ ((unint64_t)(~(v117 << 32) + v117) >> 22);
        v122 = 9 * ((v121 + ~(v121 << 13)) ^ ((v121 + ~(v121 << 13)) >> 8));
        v123 = (v122 ^ (v122 >> 15)) + ~((v122 ^ (v122 >> 15)) << 27);
        v124 = (v123 >> 31) ^ v123;
        v125 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 112);
        while (2)
        {
          if (*(_DWORD *)(*(_QWORD *)(a2 + 48) + 72 * v120) != (_DWORD)v117)
            goto LABEL_234;
          v126 = *(_QWORD *)(v234 + 8);
          if (!v126)
            goto LABEL_216;
          v127 = *(_DWORD *)(v126 - 8);
          v128 = v127 & v124;
          v129 = *(_QWORD *)(v126 + 16 * v128);
          if (v129 == v117)
          {
LABEL_213:
            v131 = *(unsigned __int8 **)(v126 + 16 * v128 + 8);
            if (!v131)
              goto LABEL_216;
            v132 = (*(_DWORD *)v131)++;
            v133 = v131[42];
            if (v132)
            {
              *(_DWORD *)v131 = v132;
              if (!v133)
                goto LABEL_216;
            }
            else
            {
              WebCore::PointerCaptureController::CapturingData::~CapturingData((WebCore::PointerCaptureController::CapturingData *)v131, (WTF::StringImpl *)v28);
              WTF::fastFree(v147, v148);
              v119 = *(unsigned int *)(a2 + 60);
              if (!v133)
                goto LABEL_216;
            }
          }
          else
          {
            v130 = 1;
            while (v129 != 0x8000000000000000)
            {
              v128 = ((_DWORD)v128 + v130) & v127;
              v129 = *(_QWORD *)(v126 + 16 * v128);
              ++v130;
              if (v129 == v117)
                goto LABEL_213;
            }
LABEL_216:
            if (v120 >= v119)
              goto LABEL_410;
            v134 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 72 * v120 + 12);
            v135 = a1;
            v136 = *(_DWORD *)(a1 + 740);
            v137 = v117;
            v12 = (uint64_t)v235;
            if (v136 | v134)
            {
              if (v136 && (v134 - 3) < 2)
              {
                v137 = 0;
                v135 = a1;
                goto LABEL_221;
              }
              if (!v136)
              {
LABEL_234:
                if (++v120 >= v119)
                  goto LABEL_250;
                continue;
              }
            }
            else
            {
LABEL_221:
              *(_DWORD *)(v135 + 740) = v137;
            }
            ++*(_DWORD *)v125;
            v254[0] = v125;
            WebCore::MouseEvent::create((uint64_t *)a2, v120, v254, v116 != 0, (uint64_t *)v236);
            v139 = v254[0];
            v254[0] = 0;
            if (v139)
            {
              if (*(_DWORD *)v139 == 1)
              {
                v143 = (uint64_t *)*((_QWORD *)v139 + 2);
                *((_QWORD *)v139 + 2) = 0;
                if (v143)
                {
                  if (*v143)
                    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v143, v138);
                  WTF::fastFree((WTF *)v143, v138);
                }
                v144 = (unsigned int *)*((_QWORD *)v139 + 1);
                *((_QWORD *)v139 + 1) = 0;
                if (v144)
                {
                  do
                  {
                    v145 = __ldaxr(v144);
                    v146 = v145 - 1;
                  }
                  while (__stlxr(v146, v144));
                  if (!v146)
                  {
                    atomic_store(1u, v144);
                    WTF::fastFree((WTF *)v144, v138);
                  }
                }
                WTF::fastFree(v139, v138);
              }
              else
              {
                --*(_DWORD *)v139;
              }
            }
            (*(void (**)(WebCore::EventTarget *, WTF *))(*(_QWORD *)v233 + 48))(v233, v236[0]);
            v140 = v236[0];
            v141 = *((_DWORD *)v236[0] + 5);
            if (((HIDWORD(v221) | ((v141 & 0x40) >> 6)) & 1) != 0)
            {
              HIDWORD(v221) = 1;
            }
            else
            {
              v142 = (WebCore::Quirks *)*((_QWORD *)v235 + 86);
              if (!v142)
                v142 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v235);
              HIDWORD(v221) = WebCore::Quirks::shouldDispatchedSimulatedMouseEventsAssumeDefaultPrevented(v142, v233);
              v140 = v236[0];
              v141 = *((_DWORD *)v236[0] + 5);
            }
            v236[0] = 0;
            if (*((_DWORD *)v140 + 4) == 1)
              (*(void (**)(WTF *))(*(_QWORD *)v140 + 8))(v140);
            else
              --*((_DWORD *)v140 + 4);
            LODWORD(v221) = v221 | ((v141 & 0x80) >> 7);
            v119 = *(unsigned int *)(a2 + 60);
          }
          break;
        }
        v12 = (uint64_t)v235;
        goto LABEL_234;
      }
LABEL_272:
      v155 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v155 = 1;
      *(_QWORD *)(v155 + 8) = 0;
      v156 = (char **)(v155 + 8);
      *(_QWORD *)(v155 + 16) = 0;
      v158 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v158 = 1;
      *(_QWORD *)(v158 + 8) = 0;
      v159 = (char **)(v158 + 8);
      *(_QWORD *)(v158 + 16) = 0;
      v160 = *(unsigned int *)(a1 + 764);
      v231 = (WTF ***)(v158 + 8);
      if ((_DWORD)v160)
      {
        v161 = *(WTF ***)(a1 + 752);
        v162 = &v161[v160];
        do
        {
          v163 = *v161;
          *(_DWORD *)v163 = *(_DWORD *)*v161 + 1;
          v236[0] = v163;
          v164 = *(unsigned int *)(v155 + 20);
          if ((_DWORD)v164 == *(_DWORD *)(v155 + 16))
          {
            v165 = (WTF **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v156, v164 + 1, (unint64_t)v236);
            v164 = *(unsigned int *)(v155 + 20);
            v166 = (WTF **)(*(_QWORD *)(v155 + 8) + 8 * v164);
            v163 = *v165;
          }
          else
          {
            v166 = (WTF **)&(*v156)[8 * v164];
            v165 = v236;
          }
          *v165 = 0;
          *v166 = v163;
          *(_DWORD *)(v155 + 20) = v164 + 1;
          v167 = v236[0];
          v236[0] = 0;
          if (v167)
          {
            if (*(_DWORD *)v167 == 1)
            {
              v173 = *((_QWORD *)v167 + 2);
              *((_QWORD *)v167 + 2) = 0;
              if (v173)
              {
                if ((*(_BYTE *)(v173 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v173 + 24) == 2)
                  {
                    if ((*(_WORD *)(v173 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v173, v157);
                  }
                  else
                  {
                    *(_DWORD *)(v173 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v173 + 96))(v173);
                }
              }
              v174 = (WTF *)*((_QWORD *)v167 + 1);
              *((_QWORD *)v167 + 1) = 0;
              if (v174)
              {
                if (*(_DWORD *)v174 == 1)
                {
                  v177 = (uint64_t *)*((_QWORD *)v174 + 2);
                  *((_QWORD *)v174 + 2) = 0;
                  if (v177)
                  {
                    if (*v177)
                      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v177, (WTF::StringImpl *)v157);
                    WTF::fastFree((WTF *)v177, v157);
                  }
                  v178 = (unsigned int *)*((_QWORD *)v174 + 1);
                  *((_QWORD *)v174 + 1) = 0;
                  if (v178)
                  {
                    do
                    {
                      v179 = __ldaxr(v178);
                      v180 = v179 - 1;
                    }
                    while (__stlxr(v180, v178));
                    if (!v180)
                    {
                      atomic_store(1u, v178);
                      WTF::fastFree((WTF *)v178, v157);
                    }
                  }
                  WTF::fastFree(v174, v157);
                }
                else
                {
                  --*(_DWORD *)v174;
                }
              }
              WTF::fastFree(v167, v157);
              v159 = (char **)(v158 + 8);
            }
            else
            {
              --*(_DWORD *)v167;
            }
          }
          v168 = *v161;
          if (*((WebCore::EventTarget **)*v161 + 2) == v233)
          {
            ++*(_DWORD *)v168;
            v236[0] = v168;
            v169 = *(unsigned int *)(v158 + 20);
            if ((_DWORD)v169 == *(_DWORD *)(v158 + 16))
            {
              v170 = (WTF **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v159, v169 + 1, (unint64_t)v236);
              v169 = *(unsigned int *)(v158 + 20);
              v171 = (WTF **)(*(_QWORD *)(v158 + 8) + 8 * v169);
              v168 = *v170;
            }
            else
            {
              v171 = (WTF **)&(*v159)[8 * v169];
              v170 = v236;
            }
            *v170 = 0;
            *v171 = v168;
            *(_DWORD *)(v158 + 20) = v169 + 1;
            v172 = v236[0];
            v236[0] = 0;
            if (v172)
            {
              if (*(_DWORD *)v172 == 1)
              {
                v175 = *((_QWORD *)v172 + 2);
                *((_QWORD *)v172 + 2) = 0;
                if (v175)
                {
                  if ((*(_BYTE *)(v175 + 22) & 2) != 0)
                  {
                    if (*(_DWORD *)(v175 + 24) == 2)
                    {
                      if ((*(_WORD *)(v175 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v175, v157);
                    }
                    else
                    {
                      *(_DWORD *)(v175 + 24) -= 2;
                    }
                  }
                  else
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 96))(v175);
                  }
                }
                v176 = (WTF *)*((_QWORD *)v172 + 1);
                *((_QWORD *)v172 + 1) = 0;
                if (v176)
                {
                  if (*(_DWORD *)v176 == 1)
                  {
                    v181 = (uint64_t *)*((_QWORD *)v176 + 2);
                    *((_QWORD *)v176 + 2) = 0;
                    if (v181)
                    {
                      if (*v181)
                        WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v181, (WTF::StringImpl *)v157);
                      WTF::fastFree((WTF *)v181, v157);
                    }
                    v182 = (unsigned int *)*((_QWORD *)v176 + 1);
                    *((_QWORD *)v176 + 1) = 0;
                    if (v182)
                    {
                      do
                      {
                        v183 = __ldaxr(v182);
                        v184 = v183 - 1;
                      }
                      while (__stlxr(v184, v182));
                      if (!v184)
                      {
                        atomic_store(1u, v182);
                        WTF::fastFree((WTF *)v182, v157);
                      }
                    }
                    WTF::fastFree(v176, v157);
                  }
                  else
                  {
                    --*(_DWORD *)v176;
                  }
                }
                WTF::fastFree(v172, v157);
                v159 = (char **)(v158 + 8);
              }
              else
              {
                --*(_DWORD *)v172;
              }
            }
          }
          ++v161;
          v12 = (uint64_t)v235;
        }
        while (v161 != v162);
      }
      if (*(_BYTE *)(a2 + 72))
      {
        v185 = *(WebCore::Quirks **)(v12 + 688);
        v186 = v233;
        if (!v185)
          v185 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v12);
        v187 = WebCore::Quirks::shouldMakeTouchEventNonCancelableForTarget(v185, v233) ^ 1;
      }
      else
      {
        v187 = 0;
        v186 = v233;
      }
      v236[0] = *(WTF **)a2;
      WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)v236);
      v189 = v188;
      v190 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 112);
      ++*v190;
      v191 = *(_BYTE *)(a2 + 9);
      v192 = bmalloc::api::isoAllocate();
      v193 = WebCore::Event::Event(v192, 29, a3, 1, v187, 1, 1, v189);
      *(_QWORD *)(v193 + 72) = v190;
      *(_DWORD *)(v193 + 80) = 0;
      *(_BYTE *)(v193 + 84) = v191;
      *(_QWORD *)v193 = off_1E33A5D38;
      *(_QWORD *)(v193 + 88) = *(_QWORD *)(a2 + 84);
      *(_OWORD *)(v193 + 96) = 0u;
      *(_OWORD *)(v193 + 112) = 0u;
      *(_OWORD *)(v193 + 128) = 0u;
      *(_OWORD *)(v193 + 138) = 0u;
      WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)v193, 0, (const WebCore::IntPoint *)(a2 + 84));
      *(_QWORD *)v192 = off_1E33A8D78;
      *(_QWORD *)(v192 + 160) = 0;
      ++*(_DWORD *)v155;
      *(_QWORD *)(v192 + 168) = v155;
      ++*(_DWORD *)v158;
      *(_QWORD *)(v192 + 176) = v158;
      ++*(_DWORD *)v225;
      *(_QWORD *)(v192 + 184) = v225;
      *(float *)(v192 + 192) = a5;
      *(float *)(v192 + 196) = a6;
      WebCore::TouchEvent::setPlatformTouchEvent(v192, a2);
      v194 = (WebCore::Element **)*((_QWORD *)v235 + 86);
      if (!v194)
        v194 = (WebCore::Element **)WebCore::Document::ensureQuirks(v235);
      if ((WebCore::Quirks::shouldPreventDispatchOfTouchEvent(v194, (const WTF::AtomString *)(v192 + 24), v186) & 1) == 0)
        (*(void (**)(WebCore::EventTarget *, uint64_t))(*(_QWORD *)v186 + 48))(v186, v192);
      v195 = v221 | ((*(_DWORD *)(v192 + 20) & 0x80u) >> 7);
      LODWORD(v221) = v195;
      HIDWORD(v221) |= (*(_DWORD *)(v192 + 20) & 0x40u) >> 6;
      if ((v221 & 0x100000000) != 0 || (v195 & 1) != 0)
      {
        v196 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
        if (v196)
        {
          v197 = *(_QWORD *)(v196 + 8);
          if (v197)
          {
            ++*(_DWORD *)v197;
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v197 + 48) + 16) + 616))(*(_QWORD *)(*(_QWORD *)(v197 + 48) + 16));
            if (*(_DWORD *)v197 == 1)
            {
              WebCore::Page::~Page(v197);
              WTF::fastFree(v213, v214);
            }
            else
            {
              --*(_DWORD *)v197;
            }
            v217 = 1;
          }
        }
      }
      if (*(_DWORD *)(v192 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
      else
        --*(_DWORD *)(v192 + 16);
      v7 = v227;
      v12 = (uint64_t)v235;
      if (*(_DWORD *)v158 == 1)
      {
        v198 = *(unsigned int *)(v158 + 20);
        if ((_DWORD)v198)
        {
          v199 = *v231;
          v200 = 8 * v198;
          do
          {
            v201 = *v199;
            *v199 = 0;
            if (v201)
              WTF::RefCounted<WebCore::Touch>::deref(v201, (WTF::StringImpl *)a2);
            ++v199;
            v200 -= 8;
          }
          while (v200);
        }
        v202 = (WTF *)*v231;
        if (*v231)
        {
          *(_QWORD *)(v158 + 8) = 0;
          *(_DWORD *)(v158 + 16) = 0;
          WTF::fastFree(v202, (void *)a2);
        }
        WTF::fastFree((WTF *)v158, (void *)a2);
        v12 = (uint64_t)v235;
      }
      else
      {
        --*(_DWORD *)v158;
      }
      v21 = a1;
      if (*(_DWORD *)v155 == 1)
      {
        v203 = *(unsigned int *)(v155 + 20);
        if ((_DWORD)v203)
        {
          v204 = *v156;
          v205 = 8 * v203;
          do
          {
            v206 = *(WTF **)v204;
            *(_QWORD *)v204 = 0;
            if (v206)
              WTF::RefCounted<WebCore::Touch>::deref(v206, (WTF::StringImpl *)a2);
            v204 += 8;
            v205 -= 8;
          }
          while (v205);
        }
        v207 = *v156;
        if (*v156)
        {
          *(_QWORD *)(v155 + 8) = 0;
          *(_DWORD *)(v155 + 16) = 0;
          WTF::fastFree((WTF *)v207, (void *)a2);
        }
        WTF::fastFree((WTF *)v155, (void *)a2);
        v12 = (uint64_t)v235;
        v21 = a1;
      }
      else
      {
        --*(_DWORD *)v155;
      }
      if (*(_DWORD *)v225 == 1)
        break;
      --*(_DWORD *)v225;
      if (v186)
        goto LABEL_353;
LABEL_356:
      v22 = v219;
      if (v220 + 2 != v219)
      {
        v22 = v220 + 2;
        while ((unint64_t)*v22 + 1 <= 1)
        {
          v22 += 2;
          if (v22 == v219)
          {
            v22 = v219;
            break;
          }
        }
      }
      if (v22 == v218)
        goto LABEL_395;
    }
    v208 = *(unsigned int *)(v225 + 20);
    if ((_DWORD)v208)
    {
      v209 = *v224;
      v210 = 8 * v208;
      do
      {
        v211 = *(WTF **)v209;
        *(_QWORD *)v209 = 0;
        if (v211)
          WTF::RefCounted<WebCore::Touch>::deref(v211, (WTF::StringImpl *)a2);
        v209 += 8;
        v210 -= 8;
      }
      while (v210);
    }
    v212 = *v224;
    if (*v224)
    {
      *(_QWORD *)(v225 + 8) = 0;
      *(_DWORD *)(v225 + 16) = 0;
      WTF::fastFree((WTF *)v212, (void *)a2);
    }
    WTF::fastFree((WTF *)v225, (void *)a2);
    v12 = (uint64_t)v235;
    v21 = a1;
    if (!v186)
      goto LABEL_356;
LABEL_353:
    if ((*((_BYTE *)v186 + 22) & 2) != 0)
    {
      if (*((_DWORD *)v186 + 6) == 2)
      {
        if ((*((_WORD *)v186 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v186, (void *)a2);
      }
      else
      {
        *((_DWORD *)v186 + 6) -= 2;
      }
    }
    else
    {
      (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v186 + 96))(v186);
    }
    goto LABEL_356;
  }
  v217 = 0;
LABEL_395:
  if (!*(_DWORD *)(v21 + 764))
    *(_DWORD *)(v21 + 744) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, (void *)a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (v7[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  else
    --v7[2];
  v215 = v217;
  return v215 & 1;
}

void sub_194E9FABC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WebCore::Node *a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  _DWORD *v31;

  if (v30)
  {
    if (*(_DWORD *)(v30 + 24) == 2)
    {
      if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v30, a2);
    }
    else
    {
      *(_DWORD *)(v30 + 24) -= 2;
    }
  }
  if (v31[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
  else
    --v31[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::EventHandler::dispatchGestureEvent(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, float a5, float a6)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  double v22;
  double v23;
  _DWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  _DWORD *v33;
  char v34;
  uint64_t v35;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *(_DWORD **)(v6 + 288);
  if (!v7)
  {
    v31 = 0;
    return v31 & 1;
  }
  ++v7[2];
  v14 = *(_QWORD *)(v6 + 296);
  if (v14)
  {
    *(_DWORD *)(v14 + 24) += 2;
    WebCore::Document::updateLayout(v14, 2u, 0);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v16 = (_QWORD *)*a4;
  v33 = v7;
  if (*a4)
  {
    v17 = *((unsigned int *)v16 - 1);
    v18 = &v16[v17];
    if (*((_DWORD *)v16 - 3))
    {
      v19 = (_QWORD *)*a4;
      if ((_DWORD)v17)
      {
        v20 = 8 * v17;
        v19 = (_QWORD *)*a4;
        while ((unint64_t)(*v19 + 1) <= 1)
        {
          ++v19;
          v20 -= 8;
          if (!v20)
          {
            v19 = v18;
            break;
          }
        }
      }
      if (v16)
        goto LABEL_13;
LABEL_17:
      v21 = 0;
      goto LABEL_18;
    }
    v19 = &v16[v17];
  }
  else
  {
    v19 = 0;
    v17 = 0;
  }
  v18 = &v16[v17];
  if (!v16)
    goto LABEL_17;
LABEL_13:
  v21 = &v16[*((unsigned int *)v16 - 1)];
LABEL_18:
  if (v21 == v19)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    do
    {
      v35 = *a2;
      WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v35);
      v23 = v22;
      v24 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 112);
      ++*v24;
      v25 = *((_BYTE *)a2 + 9);
      v26 = bmalloc::api::isoAllocate();
      v27 = WebCore::Event::Event(v26, 14, a3, 1, 1, 1, 1, v23);
      *(_QWORD *)(v27 + 72) = v24;
      *(_DWORD *)(v27 + 80) = 0;
      *(_BYTE *)(v27 + 84) = v25;
      *(_QWORD *)v27 = off_1E33A5D38;
      *(_QWORD *)(v27 + 88) = *(uint64_t *)((char *)a2 + 84);
      *(_OWORD *)(v27 + 96) = 0u;
      *(_OWORD *)(v27 + 112) = 0u;
      *(_OWORD *)(v27 + 128) = 0u;
      *(_OWORD *)(v27 + 138) = 0u;
      WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)v27, 0, (const WebCore::IntPoint *)((char *)a2 + 84));
      *(_QWORD *)v26 = off_1E33A8C88;
      *(float *)(v26 + 156) = a5;
      *(float *)(v26 + 160) = a6;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v19 + 48))(*v19, v26);
      if ((*(_BYTE *)(v26 + 20) & 0x40) != 0)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v29 + 48) + 16) + 616))(*(_QWORD *)(*(_QWORD *)(v29 + 48) + 16));
            v34 = 1;
          }
        }
      }
      if (*(_DWORD *)(v26 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      else
        --*(_DWORD *)(v26 + 16);
      v30 = v19 + 1;
      v19 = v18;
      if (v30 != v18)
      {
        v19 = v30;
        while ((unint64_t)(*v19 + 1) <= 1)
        {
          if (++v19 == v18)
          {
            v19 = v18;
            break;
          }
        }
      }
    }
    while (v19 != v21);
  }
  if (v33[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
  else
    --v33[2];
  v31 = v34;
  return v31 & 1;
}

void sub_194EA0160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  _DWORD *v10;

  if (v10[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  else
    --v10[4];
  if (a10[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  else
    --a10[2];
  _Unwind_Resume(exception_object);
}

void WebCore::EventHandler::handleTouchEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  __int16 v7;
  void *v8;
  int *v9;
  uint64_t v10;
  WebCore::ScrollView *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  unsigned int v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  int *v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  int *v90;
  char v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int *v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  float v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  void *v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WebCore::Node *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  _DWORD *v137;
  char *v138;
  WTF *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  _DWORD *v146;
  char *v147;
  WTF *v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int j;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF **v162;
  WTF *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int k;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  WTF *v172;
  uint64_t v173;
  WTF **v174;
  uint64_t v175;
  WTF *v176;
  WTF *v177;
  int v178;
  unsigned int v179;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  unsigned int *v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int v212;
  int v213;
  uint64_t *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  WTF *v218;
  WTF *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  WebCore::ScrollView *v223;
  WebCore::ScrollView *v224;
  unint64_t v225;
  uint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  unsigned int v229;
  WTF *v230;
  WTF *v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  void (*v235)(WebCore::ScrollView *);
  WebCore::ScrollView *v236;
  uint64_t v237;
  uint64_t v238;
  WTF *v239;
  WTF *v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int v243;
  WTF *v244;
  WTF *v245;
  unint64_t v246;
  _BOOL4 v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  WebCore::Node *v256;
  __int16 v257;
  uint64_t v258;
  WebCore::Node **v259;
  uint64_t v260;
  int v261;
  WTF *v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF *v269;
  WTF::StringImpl *v270;
  WTF *v271;
  WTF *v272;
  int v273;
  uint64_t *v274;
  unsigned int *v275;
  unsigned int v276;
  BOOL v277;
  WTF *v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  WTF *v285;
  WTF *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  _DWORD *v290;
  char *v291;
  WTF *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  WTF *v298;
  WTF *v299;
  uint64_t v300;
  uint64_t v301;
  __int16 v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  unsigned int v313;
  void *v314;
  WTF *v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  WTF *v322;
  WTF *v323;
  WTF *v324;
  int v325;
  uint64_t *v326;
  unsigned int *v327;
  unsigned int v328;
  BOOL v329;
  WTF *v330;
  int v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  WTF *v337;
  WTF *v338;
  uint64_t v339;
  char *v340;
  char *v341;
  WTF *v342;
  uint64_t *v343;
  unsigned int v344;
  uint64_t v345;
  WTF *v346;
  WTF *v347;
  WebCore::Document *v348;
  WebCore::Document *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  _QWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  float32x2_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int32x2_t v371;
  int8x8_t v372;
  uint64_t v373;
  uint64_t v374;
  __int16 v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  WTF *v388;
  uint64_t v389;
  WTF *v390;
  uint64_t *v391;
  unsigned int *v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t *v395;
  unsigned int *v396;
  unsigned int v397;
  unsigned int v398;
  _QWORD *v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  _QWORD *v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  unsigned int v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  _QWORD *v416;
  int v417;
  char v418;
  float v419;
  float v420;
  void *v421;
  uint64_t v422;
  uint64_t *v423;
  unint64_t StatusReg;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  WebCore *v428;
  char v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  WebCore *v433;
  char v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  WebCore *v438;
  char v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  WebCore *v447;
  char v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  WebCore *v452;
  char v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  WebCore *v457;
  char v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  uint64_t v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  float v477;
  int v478;
  int64x2_t v479;
  unint64_t v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  unint64_t v484;
  WebCore::Document *v485;
  uint64_t *v486;
  unint64_t v487;
  uint64_t v489;
  WTF *v490;
  double v491;
  double v492;
  double v493;
  uint64_t v494;
  WebCore::ScrollView *v495;
  int v496;
  uint64_t *v497;
  char v498;
  uint64_t *v499;
  _QWORD *v500;
  uint64_t *v501;
  _QWORD *v502;
  uint64_t v503;
  char **v504;
  uint64_t v505;
  WTF *v506[3];
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  float v513;
  float v514;
  float v515;
  float v516;
  __int16 v517;
  uint64_t v518;
  uint64_t v519;
  WTF *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  char v524;
  uint64_t v525;
  WTF *v526;
  unint64_t v527;
  uint64_t v528;
  float32x2_t v529;
  float v530;
  float v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float v536;
  float v537;
  __int16 v538;
  uint64_t v539;
  uint64_t v540;
  int32x2_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  char v545;
  uint64_t v546;
  int v547;
  char v548;
  WTF *v549;
  uint64_t v550;
  _QWORD *v551;
  uint64_t *v552;
  uint64_t *v553;
  _QWORD *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  __int128 v560;
  char v561;
  uint64_t v562;

  v562 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296);
  if (!v3)
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    return;
  }
  v4 = a2;
  *(_DWORD *)(v3 + 24) += 2;
  if (*(_BYTE *)(a2 + 74))
  {
    v6 = *(unsigned __int8 *)(a2 + 8);
    if (v6 == 15)
      v7 = 1;
    else
      v7 = 2 * (v6 == 13);
  }
  else
  {
    v7 = 0;
  }
  LOBYTE(v560) = 0;
  v561 = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator(&v558, v7 | 0x100, v3, 1, 0, &v560, 1);
  v505 = a1;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v11 = *(WebCore::ScrollView **)(v10 + 288);
  if (v11)
  {
    ++*((_DWORD *)v11 + 2);
    v12 = *(_QWORD *)(v10 + 296);
    if (v12)
    {
      if (*(_QWORD *)(v12 + 1944))
      {
        v485 = (WebCore::Document *)v3;
        v556 = 0;
        v557 = 0;
        v554 = 0;
        v555 = 0;
        v13 = *(unsigned int *)(a1 + 764);
        v495 = v11;
        v503 = v4;
        if ((_DWORD)v13)
        {
          v14 = *(_QWORD *)(a1 + 752);
          for (i = 8 * v13; i; i -= 8)
          {
            v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
            if (v16)
            {
              if ((*(_BYTE *)(v16 + 22) & 2) != 0)
                *(_DWORD *)(v16 + 24) += 2;
              else
                (*(void (**)(_QWORD))(*(_QWORD *)v16 + 88))(*(_QWORD *)(*(_QWORD *)v14 + 16));
              v17 = WebCore::touchesForTargetInMap((WebCore::Node *)v16, (uint64_t *)&v554);
              v18 = v17;
              v19 = *(_DWORD **)v14;
              v20 = *(unsigned int *)(v17 + 12);
              if ((_DWORD)v20 == *(_DWORD *)(v17 + 8))
              {
                v21 = v20 + (v20 >> 2);
                if (v21 >= 0x10)
                  v22 = v21 + 1;
                else
                  v22 = 16;
                if (v22 <= v20 + 1)
                  v23 = v20 + 1;
                else
                  v23 = v22;
                if (v23 >> 29)
                {
                  __break(0xC471u);
LABEL_809:
                  JUMPOUT(0x194EA2CB4);
                }
                v24 = *(void **)v17;
                v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
                *(_DWORD *)(v18 + 8) = v23;
                *(_QWORD *)v18 = v25;
                memcpy(v25, v24, 8 * v20);
                if (v24)
                {
                  if (*(void **)v18 == v24)
                  {
                    *(_QWORD *)v18 = 0;
                    *(_DWORD *)(v18 + 8) = 0;
                  }
                  WTF::fastFree((WTF *)v24, v8);
                }
                v20 = *(unsigned int *)(v18 + 12);
                v26 = *(_QWORD *)v18;
                if (v19)
                  ++*v19;
                v27 = (_QWORD *)(v26 + 8 * v20);
                v11 = v495;
              }
              else
              {
                v27 = (_QWORD *)(*(_QWORD *)v17 + 8 * v20);
                if (v19)
                  ++*v19;
              }
              *v27 = v19;
              *(_DWORD *)(v18 + 12) = v20 + 1;
              if ((*(_BYTE *)(v16 + 22) & 2) != 0)
              {
                v4 = v503;
                if (*(_DWORD *)(v16 + 24) == 2)
                {
                  if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v16, v8);
                }
                else
                {
                  *(_DWORD *)(v16 + 24) -= 2;
                }
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
                v4 = v503;
              }
            }
            v14 += 8;
          }
        }
        v552 = 0;
        v553 = 0;
        v486 = (uint64_t *)(v505 + 728);
        v551 = 0;
        v28 = *(_QWORD *)(v505 + 728);
        if (!v28 || (v29 = *(unsigned int *)(v28 - 12), !(_DWORD)v29))
        {
LABEL_89:
          v504 = (char **)(v505 + 752);
          v483 = *(_DWORD *)(v505 + 764);
          v57 = v483 > 1 && *(_BYTE *)(v4 + 73) == 0;
          v58 = v57;
          v478 = v58;
          v477 = *(float *)(v505 + 712);
          if (*(_DWORD *)(v4 + 60))
          {
            v484 = 0;
            v59 = 0;
            v498 = 0;
            v501 = (uint64_t *)(v505 + 776);
            v497 = (uint64_t *)((char *)v485 + 632);
            v479 = vdupq_n_s64(0x8000000000000000);
            while (1)
            {
              v60 = *(_QWORD *)(v4 + 48) + 72 * v59;
              v61 = *(_DWORD *)v60;
              v550 = *(_QWORD *)(v60 + 4);
              v62 = WebCore::ScrollView::windowToContents(v11, (const WebCore::IntPoint *)&v550, (const WebCore::IntPoint *)v9);
              if (v59 >= *(unsigned int *)(v4 + 60))
              {
                __break(0xC471u);
                JUMPOUT(0x194EA2DB0);
              }
              v63 = v62;
              v64 = *(_QWORD *)(v4 + 48) + 72 * v59;
              v65 = *(_DWORD *)(v64 + 12);
              v67 = *(double *)(v64 + 16);
              v66 = *(double *)(v64 + 24);
              v69 = *(double *)(v64 + 32);
              v68 = *(double *)(v64 + 40);
              v496 = *(_DWORD *)(v64 + 64);
              v71 = *(double *)(v64 + 48);
              v70 = *(double *)(v64 + 56);
              v72 = v65 - 5 < 0xFFFFFFFE;
              v73 = (uint64_t *)(v505 + 776);
              v74 = *v501;
              if (*v501
                || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v501, 8u, 0), v73 = (uint64_t *)(v505 + 776), (v74 = *v501) != 0))
              {
                v75 = *(_DWORD *)(v74 - 8);
              }
              else
              {
                v75 = 0;
              }
              v76 = 9 * ((v61 + ~(v61 << 15)) ^ ((v61 + ~(v61 << 15)) >> 10));
              v77 = (v76 ^ (v76 >> 6)) + ~((v76 ^ (v76 >> 6)) << 11);
              v78 = v77 ^ HIWORD(v77);
              v79 = v75 & v78;
              v9 = (int *)(v74 + 20 * (v75 & v78));
              v80 = *v9;
              if (*v9 == -1)
              {
LABEL_109:
                *v9 = v61;
                *(_QWORD *)(v9 + 1) = v550;
                *(_QWORD *)(v9 + 3) = 0;
                v83 = *v73;
                if (*v73)
                  v84 = *(_DWORD *)(v83 - 12) + 1;
                else
                  v84 = 1;
                *(_DWORD *)(v83 - 12) = v84;
                v85 = *v73;
                if (*v73)
                  v86 = *(_DWORD *)(v85 - 12);
                else
                  v86 = 0;
                v87 = (*(_DWORD *)(v85 - 16) + v86);
                v88 = *(unsigned int *)(v85 - 4);
                if (v88 <= 0x400)
                {
                  if (3 * v88 > 4 * v87)
                    goto LABEL_122;
                  if ((_DWORD)v88)
LABEL_118:
                    v89 = (_DWORD)v88 << (6 * *(_DWORD *)(v85 - 12) >= (2 * v88));
                  else
                    v89 = 8;
                  v90 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v501, v89, v9);
                  v73 = (uint64_t *)(v505 + 776);
                  v9 = v90;
                  goto LABEL_122;
                }
                if (v88 <= 2 * v87)
                  goto LABEL_118;
              }
              else
              {
                v81 = 0;
                v82 = 1;
                while (v80 != v61)
                {
                  if (v80 == -2)
                    v81 = v9;
                  v79 = (v79 + v82) & v75;
                  v9 = (int *)(v74 + 20 * v79);
                  v80 = *v9;
                  ++v82;
                  if (*v9 == -1)
                  {
                    if (v81)
                    {
                      *v81 = -1;
                      *(int64x2_t *)(v81 + 1) = v479;
                      --*(_DWORD *)(*v73 - 16);
                      v9 = v81;
                    }
                    goto LABEL_109;
                  }
                }
              }
LABEL_122:
              v91 = v498 | v72;
              v498 |= v72;
              if (v65 == 1)
              {
                *(_QWORD *)(v9 + 3) = (v550 - v9[1]) | ((unint64_t)(HIDWORD(v550) - v9[2]) << 32);
                *(_QWORD *)(v9 + 1) = v550;
              }
              else
              {
                *(_QWORD *)(v9 + 3) = 0;
                if ((v91 & 1) == 0)
                {
                  v92 = *v73;
                  if (*v73)
                  {
                    v93 = *(_DWORD *)(v92 - 8);
                    v94 = v93 & v78;
                    v95 = (int *)(v92 + 20 * (v93 & v78));
                    v96 = *v95;
                    if (*v95 != v61)
                    {
                      v97 = 1;
                      while (v96 != -1)
                      {
                        v94 = (v94 + v97) & v93;
                        v95 = (int *)(v92 + 20 * v94);
                        v96 = *v95;
                        ++v97;
                        if (*v95 == v61)
                          goto LABEL_134;
                      }
                      v95 = (int *)(v92 + 20 * *(unsigned int *)(v92 - 4));
                    }
LABEL_134:
                    if ((int *)(v92 + 20 * *(unsigned int *)(v92 - 4)) != v95)
                    {
                      *v95 = -2;
                      ++*(_DWORD *)(*v73 - 16);
                      v98 = *v73;
                      v99 = *v73 ? *(_DWORD *)(v98 - 12) - 1 : -1;
                      *(_DWORD *)(v98 - 12) = v99;
                      v100 = *v73;
                      if (*v73)
                      {
                        v101 = 6 * *(_DWORD *)(v100 - 12);
                        v102 = *(_DWORD *)(v100 - 4);
                        if (v101 < v102 && v102 >= 9)
                          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v501, v102 >> 1, 0);
                      }
                    }
                  }
                }
              }
              v104 = HIDWORD(v63);
              v105 = v505;
              v106 = *(unsigned int *)(v505 + 764);
              if (!(_DWORD)v106)
              {
                v493 = v69;
                v494 = *(_QWORD *)&v70;
                v491 = v67;
                v492 = v66;
                v549 = 0;
                *(_DWORD *)(v505 + 736) = v61;
                v109 = v61;
LABEL_151:
                if (v109 == v61)
                  v110 = 2;
                else
                  v110 = 1;
                v547 = v110;
                v548 = 1;
                LODWORD(v111) = (_DWORD)v63 << 6;
                if ((int)v63 < -33554432)
                  LODWORD(v111) = 0x80000000;
                if ((int)v63 <= 0x1FFFFFF)
                  v111 = v111;
                else
                  v111 = 0x7FFFFFFFLL;
                LODWORD(v112) = HIDWORD(v63) << 6;
                if (SHIDWORD(v63) < -33554432)
                  LODWORD(v112) = 0x80000000;
                if (SHIDWORD(v63) <= 0x1FFFFFF)
                  v112 = v112;
                else
                  v112 = 0x7FFFFFFFLL;
                v113 = (WTF *)(v111 & 0xFFFFFFC0 | ((unint64_t)((v112 & 0xFFFFFFC0) >> 6) << 38));
                v526 = (WTF *)(v111 | (v112 << 32));
                v527 = (unint64_t)v113;
                v528 = 0x4000000040;
                v114 = (float)(int)v111 * 0.015625;
                v115 = (float)(int)v112 * 0.015625;
                v529.f32[0] = v114;
                v529.f32[1] = v115;
                v116 = (float)(v111 & 0xFFFFFFC0) * 0.015625;
                v117 = (float)(v112 & 0xFFFFFFC0) * 0.015625;
                v530 = v116;
                v531 = v117;
                v532 = v116 + 1.0;
                v533 = v117;
                v534 = v116 + 1.0;
                v535 = v117 + 1.0;
                v536 = v116;
                v537 = v117 + 1.0;
                v538 = 256;
                v539 = 0;
                v540 = 0;
                v490 = v526;
                v541 = (int32x2_t)v526;
                v546 = 0;
                v542 = 0;
                v543 = 0;
                v545 = 0;
                v544 = 0;
                v118 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v105 + 8) + 8) + 296);
                if (v118)
                {
                  *(_DWORD *)(v118 + 24) += 2;
                  WebCore::Document::hitTest(v118, &v547, (WebCore::HitTestingTransformState *)&v526, (uint64_t)&v526);
                  if (*(_DWORD *)(v118 + 24) == 2)
                  {
                    if ((*(_WORD *)(v118 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v118, v119);
                  }
                  else
                  {
                    *(_DWORD *)(v118 + 24) -= 2;
                  }
                }
                else
                {
                  WebCore::Document::hitTest(0, &v547, (WebCore::HitTestingTransformState *)&v526, (uint64_t)&v526);
                }
                if ((v547 & 1) == 0)
                {
                  v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 296);
                  if (v121)
                    *(_DWORD *)(v121 + 24) += 2;
                  v122 = v539;
                  if (v539)
                  {
                    do
                    {
                      v123 = *(_WORD *)(v122 + 28);
                      if ((v123 & 8) != 0)
                        break;
                      v125 = (uint64_t *)(v122 + 32);
                      v124 = *(_QWORD *)(v122 + 32);
                      if (v124)
                      {
                        if ((*(_WORD *)(v124 + 28) & 8) != 0)
                        {
                          v126 = *(_QWORD *)(v124 + 72) & 0xFFFFFFFFFFFFLL;
                          if (v126)
                          {
                            v128 = *(_QWORD *)(v126 + 88);
                            if (v128)
                            {
                              v129 = *(_QWORD *)(v128 + 224);
                              if (v129)
                              {
                                v127 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v122);
                                if (v127)
                                  goto LABEL_177;
                                v123 = *(_WORD *)(v122 + 28);
                              }
                            }
                          }
                        }
                      }
                      if ((v123 & 0x80) != 0)
                      {
                        v130 = *(_QWORD *)(v122 + 200);
                        if (!v130)
                        {
                          v122 = 0;
                          break;
                        }
                        v125 = (uint64_t *)(v130 + 8);
                      }
                      v127 = *v125;
LABEL_177:
                      v122 = v127;
                    }
                    while (v127);
                  }
                  WebCore::Document::updateHoverActiveState((unsigned __int8 *)v121, (unsigned __int8 *)&v547, v122, 0);
                  if (v121)
                  {
                    if (*(_DWORD *)(v121 + 24) == 2)
                    {
                      if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v121, v119);
                    }
                    else
                    {
                      *(_DWORD *)(v121 + 24) -= 2;
                    }
                  }
                }
                if (!v539)
                {
                  v197 = 7;
                  goto LABEL_377;
                }
                v489 = v539;
                if (v109 != v61 || *(_BYTE *)(v503 + 8) != 13)
                  goto LABEL_316;
                v198 = *(unsigned int *)(v503 + 60);
                if (!(_DWORD)v198)
                  goto LABEL_299;
                v120 = *(int **)(v503 + 48);
                if (!v120[3])
                {
                  v199 = 0;
                  v120 += 21;
                  while (v198 - 1 != v199)
                  {
                    v200 = *v120;
                    v120 += 18;
                    ++v199;
                    if (v200)
                    {
                      if (v199 < v198)
                        goto LABEL_316;
                      break;
                    }
                  }
LABEL_299:
                  v201 = *(_QWORD *)(v539 + 64) & 0xFFFFFFFFFFFFLL;
                  if (!v201)
                    goto LABEL_311;
                  v202 = (*(unsigned __int8 *)((*(_QWORD *)(v539 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
                  if ((*(_BYTE *)((*(_QWORD *)(v539 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
                    v202 = 0;
                  if (v202 == 1)
                  {
                    v203 = *(_DWORD *)((*(_QWORD *)(v539 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
                    *(_DWORD *)((*(_QWORD *)(v539 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v203;
                    v204 = *(_QWORD *)(v201 + 232);
                    if (v204)
                    {
                      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v204 + 72))(*(_QWORD *)(v201 + 232)) & 1) != 0
                        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v204 + 80))(v204))
                      {
                        v204 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v204 + 720))(v204);
                        v205 = (unsigned int *)(v204 + 8);
                        do
                          v206 = __ldaxr(v205);
                        while (__stlxr(v206 + 1, v205));
                      }
                      else
                      {
                        v204 = 0;
                      }
                      v203 = *(_DWORD *)(v201 + 16);
                    }
                    if (!v203)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194EA2D84);
                    }
                    *(_DWORD *)(v201 + 16) = v203 - 1;
                  }
                  else
                  {
LABEL_311:
                    v204 = 0;
                  }
                  v207 = *(_QWORD *)(v505 + 768);
                  *(_QWORD *)(v505 + 768) = v204;
                  if (v207)
                  {
                    v208 = (unsigned int *)(v207 + 8);
                    do
                    {
                      v209 = __ldaxr(v208);
                      v210 = v209 - 1;
                    }
                    while (__stlxr(v210, v208));
                    if (!v210)
                    {
                      atomic_store(1u, v208);
                      v218 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v218 = off_1E31FE290;
                      *((_QWORD *)v218 + 1) = v208;
                      v506[0] = v218;
                      WTF::ensureOnMainThread();
                      v219 = v506[0];
                      v506[0] = 0;
                      if (v219)
                        (*(void (**)(WTF *))(*(_QWORD *)v219 + 8))(v219);
                    }
                    goto LABEL_316;
                  }
                }
                else
                {
LABEL_316:
                  v204 = *(_QWORD *)(v505 + 768);
                }
                if (v204)
                {
                  v211 = (unsigned int *)(v204 + 8);
                  do
                    v212 = __ldaxr(v211);
                  while (__stlxr(v212 + 1, v211));
                  if (*(_BYTE *)(v204 + 144))
                  {
                    do
                      v220 = __ldaxr(v211);
                    while (__stlxr(v220 - 1, v211));
                    if (v220 == 1)
                    {
                      atomic_store(1u, v211);
                      v346 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v346 = off_1E31FE290;
                      *((_QWORD *)v346 + 1) = v211;
                      v506[0] = v346;
                      WTF::ensureOnMainThread();
                      v347 = v506[0];
                      v506[0] = 0;
                      if (v347)
                        (*(void (**)(WTF *))(*(_QWORD *)v347 + 8))(v347);
                    }
                    v204 = 0;
                  }
                  else if (v109 == v61)
                  {
                    WebCore::EventHandler::handleTouchEvent(*(_QWORD *)(v204 + 640), v503);
                    v213 = 1;
                    v214 = (uint64_t *)((char *)v485 + 624);
LABEL_372:
                    v241 = (unsigned int *)(v204 + 8);
                    do
                    {
                      v242 = __ldaxr(v241);
                      v243 = v242 - 1;
                    }
                    while (__stlxr(v243, v241));
                    if (v243)
                    {
LABEL_375:
                      if (v213)
                        goto LABEL_376;
LABEL_381:
                      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 296) + 696)
                                     + 236))
                        goto LABEL_406;
                      v246 = v489;
                      do
                      {
                        v506[0] = (WTF *)v246;
                        if (*v214
                          && WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(v214, v506))
                        {
                          v247 = 1;
                        }
                        else
                        {
                          v559 = v246;
                          if (*v497)
                            v247 = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(v497, &v559) != 0;
                          else
                            v247 = 0;
                        }
                        v249 = (uint64_t *)(v246 + 32);
                        v248 = *(_QWORD *)(v246 + 32);
                        v214 = (uint64_t *)((char *)v485 + 624);
                        if (!v248
                          || (*(_WORD *)(v248 + 28) & 8) == 0
                          || (v250 = *(_QWORD *)(v248 + 72) & 0xFFFFFFFFFFFFLL) == 0
                          || (v253 = *(_QWORD *)(v250 + 88)) == 0
                          || (v254 = *(_QWORD *)(v253 + 224)) == 0
                          || (v251 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v254 + 16))(v254, v246), v214 = (uint64_t *)((char *)v485 + 624), !v251))
                        {
                          if ((*(_WORD *)(v246 + 28) & 0x80) != 0)
                          {
                            v255 = *(_QWORD *)(v246 + 200);
                            if (!v255)
                              break;
                            v249 = (uint64_t *)(v255 + 8);
                          }
                          v251 = *v249;
                        }
                        if (v251)
                          v252 = v247;
                        else
                          v252 = 1;
                        v246 = v251;
                      }
                      while (v252 != 1);
                      if (v247)
                      {
LABEL_406:
                        v256 = (WebCore::Node *)v489;
                        v257 = *(_WORD *)(v489 + 28);
                        if ((v257 & 2) == 0)
                          goto LABEL_407;
                        v259 = (WebCore::Node **)(v489 + 32);
                        v258 = *(_QWORD *)(v489 + 32);
                        v4 = v503;
                        if (!v258
                          || (*(_WORD *)(v258 + 28) & 8) == 0
                          || (v260 = *(_QWORD *)(v258 + 72) & 0xFFFFFFFFFFFFLL) == 0
                          || (v310 = *(_QWORD *)(v260 + 88)) == 0
                          || (v311 = *(_QWORD *)(v310 + 224)) == 0)
                        {
LABEL_411:
                          if ((v257 & 0x80) != 0)
                          {
                            v345 = *((_QWORD *)v256 + 25);
                            if (!v345)
                            {
                              v256 = 0;
                              v11 = v495;
LABEL_407:
                              v4 = v503;
                              goto LABEL_413;
                            }
                            v259 = (WebCore::Node **)(v345 + 8);
                            v11 = v495;
                            v4 = v503;
                          }
                          v256 = *v259;
                          goto LABEL_413;
                        }
                        v256 = (WebCore::Node *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, v489);
                        if (!v256)
                        {
                          v256 = (WebCore::Node *)v489;
                          v257 = *(_WORD *)(v489 + 28);
                          goto LABEL_411;
                        }
LABEL_413:
                        v261 = v104;
                        if (v496)
                        {
                          v262 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 112);
                          ++*(_DWORD *)v262;
                          v506[0] = v262;
                          v263 = v550;
                          v264 = HIDWORD(v550);
                          v265 = WTF::fastMalloc((WTF *)0x88);
                          v269 = (WTF *)WebCore::Touch::Touch(v265, (WebCore::WindowProxy *)v506, (uint64_t)v256, v61, 1, (double)(int)v63, (double)v261, (double)v263, (double)v264, 0.0, 0.0, 0.0, v68, v266, v267, v268, *(uint64_t *)&v71, v494);
                          v271 = v549;
                          v549 = v269;
                          if (v271)
                            WTF::RefCounted<WebCore::Touch>::deref(v271, v270);
                          v272 = v506[0];
                          v506[0] = 0;
                          if (v272)
                          {
                            v273 = *(_DWORD *)v272 - 1;
                            if (*(_DWORD *)v272 == 1)
                            {
                              v274 = (uint64_t *)*((_QWORD *)v272 + 2);
                              *((_QWORD *)v272 + 2) = 0;
                              if (v274)
                              {
                                if (*v274)
                                  WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v274, v270);
                                WTF::fastFree((WTF *)v274, v270);
                              }
                              v275 = (unsigned int *)*((_QWORD *)v272 + 1);
                              *((_QWORD *)v272 + 1) = 0;
                              if (v275)
                              {
                                do
                                {
                                  v276 = __ldaxr(v275);
                                  v277 = --v276 == 0;
                                }
                                while (__stlxr(v276, v275));
LABEL_479:
                                if (v277)
                                {
                                  atomic_store(1u, v275);
                                  WTF::fastFree((WTF *)v275, v270);
                                }
                              }
                              goto LABEL_481;
                            }
LABEL_429:
                            *(_DWORD *)v272 = v273;
                          }
                        }
                        else
                        {
                          v278 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 112);
                          ++*(_DWORD *)v278;
                          v506[0] = v278;
                          v279 = v550;
                          v280 = HIDWORD(v550);
                          v281 = WTF::fastMalloc((WTF *)0x88);
                          v285 = (WTF *)WebCore::Touch::Touch(v281, (WebCore::WindowProxy *)v506, (uint64_t)v256, v61, 0, (double)(int)v63, (double)v261, (double)v279, (double)v280, v491, v492, v493, v68, v282, v283, v284, 0, 0);
                          v286 = v549;
                          v549 = v285;
                          if (v286)
                            WTF::RefCounted<WebCore::Touch>::deref(v286, v270);
                          v272 = v506[0];
                          v506[0] = 0;
                          if (v272)
                          {
                            v273 = *(_DWORD *)v272 - 1;
                            if (*(_DWORD *)v272 != 1)
                              goto LABEL_429;
                            v312 = (uint64_t *)*((_QWORD *)v272 + 2);
                            *((_QWORD *)v272 + 2) = 0;
                            if (v312)
                            {
                              if (*v312)
                                WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v312, v270);
                              WTF::fastFree((WTF *)v312, v270);
                            }
                            v275 = (unsigned int *)*((_QWORD *)v272 + 1);
                            *((_QWORD *)v272 + 1) = 0;
                            if (v275)
                            {
                              do
                              {
                                v313 = __ldaxr(v275);
                                v277 = --v313 == 0;
                              }
                              while (__stlxr(v313, v275));
                              goto LABEL_479;
                            }
LABEL_481:
                            WTF::fastFree(v272, v270);
                          }
                        }
                        v287 = *(unsigned int *)(v505 + 764);
                        if ((_DWORD)v287 == *(_DWORD *)(v505 + 760))
                        {
                          v288 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v504, v287 + 1, (unint64_t)&v549);
                          v287 = *(unsigned int *)(v505 + 764);
                          v289 = *(_QWORD *)(v505 + 752);
                          v290 = *(_DWORD **)v288;
                          if (*(_QWORD *)v288)
                            ++*v290;
                          *(_QWORD *)(v289 + 8 * v287) = v290;
                        }
                        else
                        {
                          v291 = *v504;
                          v292 = v549;
                          if (v549)
                            ++*(_DWORD *)v549;
                          *(_QWORD *)&v291[8 * v287] = v292;
                        }
                        *(_DWORD *)(v505 + 764) = v287 + 1;
                        if (!v256)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194EA2CD4);
                        }
                        v293 = WebCore::touchesForTargetInMap(v256, &v557);
                        v294 = v293;
                        v295 = *(unsigned int *)(v293 + 12);
                        if ((_DWORD)v295 == *(_DWORD *)(v293 + 8))
                        {
                          v296 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v293, v295 + 1, (unint64_t)&v549);
                          v295 = *(unsigned int *)(v294 + 12);
                          v297 = *(char **)v294;
                          v298 = *(WTF **)v296;
                          if (!*(_QWORD *)v296)
                          {
LABEL_443:
                            *(_QWORD *)&v297[8 * v295] = v298;
                            *(_DWORD *)(v294 + 12) = v295 + 1;
LABEL_444:
                            WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v526, v119);
                            v197 = 0;
                            goto LABEL_445;
                          }
                        }
                        else
                        {
                          v297 = *(char **)v293;
                          v298 = v549;
                          if (!v549)
                            goto LABEL_443;
                        }
                        ++*(_DWORD *)v298;
                        goto LABEL_443;
                      }
                      if (v109 == v61)
                      {
                        LODWORD(v559) = 8;
                        BYTE4(v559) = 1;
                        v506[0] = v490;
                        v506[1] = v113;
                        v506[2] = (WTF *)0x4000000040;
                        v507 = v114;
                        v508 = v115;
                        v509 = v116;
                        v510 = v117;
                        v511 = v116 + 1.0;
                        v512 = v117;
                        v513 = v116 + 1.0;
                        v514 = v117 + 1.0;
                        v515 = v116;
                        v516 = v117 + 1.0;
                        v517 = 256;
                        v518 = 0;
                        v519 = 0;
                        v520 = v490;
                        v525 = 0;
                        v521 = 0;
                        v522 = 0;
                        v524 = 0;
                        v523 = 0;
                        v300 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 296);
                        if (v300)
                          *(_DWORD *)(v300 + 24) += 2;
                        WebCore::Document::hitTest(v300, &v559, (WebCore::HitTestingTransformState *)v506, (uint64_t)v506);
                        v301 = v518;
                        if (v518)
                        {
                          do
                          {
                            v302 = *(_WORD *)(v301 + 28);
                            if ((v302 & 8) != 0)
                              break;
                            v304 = (uint64_t *)(v301 + 32);
                            v303 = *(_QWORD *)(v301 + 32);
                            if (v303)
                            {
                              if ((*(_WORD *)(v303 + 28) & 8) != 0)
                              {
                                v305 = *(_QWORD *)(v303 + 72) & 0xFFFFFFFFFFFFLL;
                                if (v305)
                                {
                                  v307 = *(_QWORD *)(v305 + 88);
                                  if (v307)
                                  {
                                    v308 = *(_QWORD *)(v307 + 224);
                                    if (v308)
                                    {
                                      v306 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v308 + 16))(v308, v301);
                                      if (v306)
                                        goto LABEL_461;
                                      v302 = *(_WORD *)(v301 + 28);
                                    }
                                  }
                                }
                              }
                            }
                            if ((v302 & 0x80) != 0)
                            {
                              v309 = *(_QWORD *)(v301 + 200);
                              if (!v309)
                              {
                                v301 = 0;
                                v11 = v495;
                                break;
                              }
                              v304 = (uint64_t *)(v309 + 8);
                              v11 = v495;
                            }
                            v306 = *v304;
LABEL_461:
                            v301 = v306;
                          }
                          while (v306);
                        }
                        WebCore::Document::updateHoverActiveState((unsigned __int8 *)v300, (unsigned __int8 *)&v559, v301, 0);
                        if (v300)
                        {
                          if (*(_DWORD *)(v300 + 24) == 2)
                          {
                            if ((*(_WORD *)(v300 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v300, v314);
                          }
                          else
                          {
                            *(_DWORD *)(v300 + 24) -= 2;
                          }
                        }
                        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v506, v314);
                      }
                      v4 = v503;
                      if (!*(_BYTE *)(v503 + 73))
                        goto LABEL_444;
                      if (v496)
                      {
                        v315 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 112);
                        ++*(_DWORD *)v315;
                        v506[0] = v315;
                        v316 = v550;
                        v317 = HIDWORD(v550);
                        v318 = WTF::fastMalloc((WTF *)0x88);
                        v322 = (WTF *)WebCore::Touch::Touch(v318, (WebCore::WindowProxy *)v506, v489, v61, 1, (double)(int)v63, (double)(int)v104, (double)v316, (double)v317, 0.0, 0.0, 0.0, v68, v319, v320, v321, *(uint64_t *)&v71, v494);
                        v323 = v549;
                        v549 = v322;
                        if (v323)
                          WTF::RefCounted<WebCore::Touch>::deref(v323, (WTF::StringImpl *)v119);
                        v324 = v506[0];
                        v506[0] = 0;
                        if (v324)
                        {
                          v325 = *(_DWORD *)v324 - 1;
                          if (*(_DWORD *)v324 == 1)
                          {
                            v326 = (uint64_t *)*((_QWORD *)v324 + 2);
                            *((_QWORD *)v324 + 2) = 0;
                            if (v326)
                            {
                              if (*v326)
                                WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v326, (WTF::StringImpl *)v119);
                              WTF::fastFree((WTF *)v326, v119);
                            }
                            v327 = (unsigned int *)*((_QWORD *)v324 + 1);
                            *((_QWORD *)v324 + 1) = 0;
                            if (v327)
                            {
                              do
                              {
                                v328 = __ldaxr(v327);
                                v329 = --v328 == 0;
                              }
                              while (__stlxr(v328, v327));
LABEL_519:
                              if (v329)
                              {
                                atomic_store(1u, v327);
                                WTF::fastFree((WTF *)v327, v119);
                              }
                            }
                            goto LABEL_521;
                          }
LABEL_506:
                          *(_DWORD *)v324 = v325;
                        }
                      }
                      else
                      {
                        v330 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 112);
                        ++*(_DWORD *)v330;
                        v506[0] = v330;
                        v331 = v550;
                        v332 = HIDWORD(v550);
                        v333 = WTF::fastMalloc((WTF *)0x88);
                        v337 = (WTF *)WebCore::Touch::Touch(v333, (WebCore::WindowProxy *)v506, v489, v61, 0, (double)(int)v63, (double)(int)v104, (double)v331, (double)v332, v491, v492, v493, v68, v334, v335, v336, 0, 0);
                        v338 = v549;
                        v549 = v337;
                        if (v338)
                          WTF::RefCounted<WebCore::Touch>::deref(v338, (WTF::StringImpl *)v119);
                        v324 = v506[0];
                        v506[0] = 0;
                        if (v324)
                        {
                          v325 = *(_DWORD *)v324 - 1;
                          if (*(_DWORD *)v324 != 1)
                            goto LABEL_506;
                          v343 = (uint64_t *)*((_QWORD *)v324 + 2);
                          *((_QWORD *)v324 + 2) = 0;
                          if (v343)
                          {
                            if (*v343)
                              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v343, (WTF::StringImpl *)v119);
                            WTF::fastFree((WTF *)v343, v119);
                          }
                          v327 = (unsigned int *)*((_QWORD *)v324 + 1);
                          *((_QWORD *)v324 + 1) = 0;
                          if (v327)
                          {
                            do
                            {
                              v344 = __ldaxr(v327);
                              v329 = --v344 == 0;
                            }
                            while (__stlxr(v344, v327));
                            goto LABEL_519;
                          }
LABEL_521:
                          WTF::fastFree(v324, v119);
                        }
                      }
                      v339 = *(unsigned int *)(v505 + 764);
                      if ((_DWORD)v339 == *(_DWORD *)(v505 + 760))
                      {
                        v340 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v504, v339 + 1, (unint64_t)&v549);
                        v339 = *(unsigned int *)(v505 + 764);
                        v341 = *(char **)(v505 + 752);
                        v342 = *(WTF **)v340;
                        if (!*(_QWORD *)v340)
                          goto LABEL_512;
LABEL_511:
                        ++*(_DWORD *)v342;
                      }
                      else
                      {
                        v341 = *v504;
                        v342 = v549;
                        if (v549)
                          goto LABEL_511;
                      }
LABEL_512:
                      *(_QWORD *)&v341[8 * v339] = v342;
                      *(_DWORD *)(v505 + 764) = v339 + 1;
                      goto LABEL_444;
                    }
                    atomic_store(1u, v241);
                    v244 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v244 = off_1E31FE290;
                    *((_QWORD *)v244 + 1) = v241;
                    v506[0] = v244;
                    WTF::ensureOnMainThread();
                    v245 = v506[0];
                    v506[0] = 0;
                    if (v245)
                      (*(void (**)(WTF *))(*(_QWORD *)v245 + 8))(v245);
                    v214 = (uint64_t *)((char *)v485 + 624);
                    if (!v213)
                      goto LABEL_381;
LABEL_376:
                    v197 = 1;
LABEL_377:
                    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v526, v119);
                    v4 = v503;
                    goto LABEL_445;
                  }
                  v217 = v505;
                  v221 = *(_QWORD *)(v505 + 768);
                  v487 = HIDWORD(v63);
                  if (v221)
                  {
                    v222 = (unsigned int *)(v221 + 8);
                    do
                      LODWORD(v120) = __ldaxr(v222);
                    while (__stlxr((_DWORD)v120 + 1, v222));
                    if (*(_BYTE *)(v221 + 144))
                      v215 = 0;
                    else
                      v215 = v221;
                    if (*(_BYTE *)(v221 + 144))
                      v216 = (_QWORD *)v221;
                    else
                      v216 = 0;
                  }
                  else
                  {
                    v215 = 0;
                    v216 = 0;
                  }
                }
                else
                {
                  v487 = HIDWORD(v63);
                  v215 = 0;
                  v216 = 0;
                  v217 = v505;
                }
                v559 = (((int)(v541.i32[0] - (v120 & 0xFFFFFFC0) + 32) >> 6)
                                    + v541.i32[0] / 64) | ((unint64_t)(((int)(v541.i32[1]
                                                                                                 - (v120 & 0xFFFFFFC0)
                                                                                                 + 32) >> 6)
                                                                                          + v541.i32[1] / 64) << 32);
                if (v216)
                {
                  v482 = v109;
                  v223 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(v217 + 8) + 8) + 288);
                  if (v223)
                  {
                    ++*((_DWORD *)v223 + 2);
                    v224 = (WebCore::ScrollView *)v216[32];
                    if (v224)
                    {
                      ++*((_DWORD *)v224 + 2);
                      v225 = v216[4];
                      v481 = v216[5];
                      v506[0] = (WTF *)WebCore::ScrollView::contentsToRootView(v223, (const WebCore::IntPoint *)&v559);
                      v480 = WebCore::ScrollView::rootViewToContents(v224, (const WebCore::IntPoint *)v506);
                      v226 = v225;
                      v484 = v225 >> 8;
                      if (*((_DWORD *)v224 + 2) == 1)
                      {
                        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v224 + 8))(v224);
                        v226 = v225;
                      }
                      else
                      {
                        --*((_DWORD *)v224 + 2);
                      }
                      LODWORD(v224) = 1;
                    }
                    else
                    {
                      v226 = 0;
                    }
                    v214 = (uint64_t *)((char *)v485 + 624);
                    if (*((_DWORD *)v223 + 2) != 1)
                    {
                      --*((_DWORD *)v223 + 2);
                      goto LABEL_351;
                    }
                    v235 = *(void (**)(WebCore::ScrollView *))(*(_QWORD *)v223 + 8);
                    v236 = v223;
                    v237 = v226;
                    v235(v236);
                    v226 = v237;
                  }
                  else
                  {
                    LODWORD(v224) = 0;
                    v226 = 0;
                  }
                  v214 = (uint64_t *)((char *)v485 + 624);
LABEL_351:
                  v227 = (unsigned int *)(v216 + 1);
                  v109 = v482;
                  do
                  {
                    v228 = __ldaxr(v227);
                    v229 = v228 - 1;
                  }
                  while (__stlxr(v229, v227));
                  if (!v229)
                  {
                    v476 = v226;
                    atomic_store(1u, v227);
                    v230 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v230 = off_1E31FE290;
                    *((_QWORD *)v230 + 1) = v227;
                    v506[0] = v230;
                    WTF::ensureOnMainThread();
                    v231 = v506[0];
                    v506[0] = 0;
                    if (v231)
                      (*(void (**)(WTF *))(*(_QWORD *)v231 + 8))(v231);
                    v214 = (uint64_t *)((char *)v485 + 624);
                    v226 = v476;
                  }
                }
                else
                {
                  v226 = 0;
                  LODWORD(v224) = 0;
                  v214 = (uint64_t *)((char *)v485 + 624);
                }
                if (!v215)
                  goto LABEL_362;
                v232 = (unsigned int *)(v215 + 8);
                do
                {
                  v233 = __ldaxr(v232);
                  v234 = v233 - 1;
                }
                while (__stlxr(v234, v232));
                if (!v234)
                {
                  v238 = v226;
                  atomic_store(1u, v232);
                  v239 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v239 = off_1E31FE290;
                  *((_QWORD *)v239 + 1) = v232;
                  v506[0] = v239;
                  WTF::ensureOnMainThread();
                  v240 = v506[0];
                  v506[0] = 0;
                  if (v240)
                    (*(void (**)(WTF *))(*(_QWORD *)v240 + 8))(v240);
                  v214 = (uint64_t *)((char *)v485 + 624);
                  v226 = v238;
                  if (!(_DWORD)v224)
                    goto LABEL_370;
LABEL_363:
                  *(_QWORD *)a3 = v226 | (v484 << 8);
                  *(_QWORD *)(a3 + 8) = v481;
                  *(_QWORD *)(a3 + 16) = v480;
                  v213 = 1;
                  *(_DWORD *)(a3 + 24) = 1;
                }
                else
                {
LABEL_362:
                  if ((_DWORD)v224)
                    goto LABEL_363;
LABEL_370:
                  v213 = 0;
                }
                LODWORD(v104) = v487;
                v11 = v495;
                if (v204)
                  goto LABEL_372;
                goto LABEL_375;
              }
              v107 = *(uint64_t **)(v505 + 752);
              while (1)
              {
                v108 = *v107;
                if (*(_DWORD *)(*v107 + 24) == v61)
                  break;
                ++v107;
                if (!--v106)
                {
                  v493 = v69;
                  v494 = *(_QWORD *)&v70;
                  v491 = v67;
                  v492 = v66;
                  v549 = 0;
                  v105 = v505;
                  v109 = *(_DWORD *)(v505 + 736);
                  goto LABEL_151;
                }
              }
              ++*(_DWORD *)v108;
              v549 = (WTF *)v108;
              if (*(double *)(v108 + 104) != v68 || *(double *)(v108 + 112) != v71 || *(double *)(v108 + 120) != v70)
              {
                *(double *)(v108 + 104) = v68;
                *(double *)(v108 + 112) = v71;
                *(double *)(v108 + 120) = v70;
                v131 = *(WebCore::Node **)(v108 + 16);
                if (!v131)
                {
                  __break(0xC471u);
                  goto LABEL_809;
                }
                v132 = WebCore::touchesForTargetInMap(v131, &v555);
                v133 = v132;
                v134 = *(unsigned int *)(v132 + 12);
                if ((_DWORD)v134 == *(_DWORD *)(v132 + 8))
                {
                  v135 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v132, v134 + 1, (unint64_t)&v549);
                  v134 = *(unsigned int *)(v133 + 12);
                  v136 = *(_QWORD *)v133;
                  v137 = *(_DWORD **)v135;
                  if (*(_QWORD *)v135)
                    ++*v137;
                  *(_QWORD *)(v136 + 8 * v134) = v137;
                }
                else
                {
                  v138 = *(char **)v132;
                  v139 = v549;
                  if (v549)
                    ++*(_DWORD *)v549;
                  *(_QWORD *)&v138[8 * v134] = v139;
                }
                *(_DWORD *)(v133 + 12) = v134 + 1;
              }
              if (v65 <= 2)
              {
                v140 = *((_QWORD *)v549 + 2);
                if (WebCore::Touch::updateLocation(v549, (double)(int)v63, (double)SHIDWORD(v63), (double)(int)v550, (double)SHIDWORD(v550), (WebCore::WindowProxy *)v8))
                {
                  if (!v140)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194EA2D04);
                  }
                  v141 = WebCore::touchesForTargetInMap((WebCore::Node *)v140, &v556);
                  v142 = v141;
                  v143 = *(unsigned int *)(v141 + 12);
                  if ((_DWORD)v143 == *(_DWORD *)(v141 + 8))
                  {
                    v144 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v141, v143 + 1, (unint64_t)&v549);
                    v143 = *(unsigned int *)(v142 + 12);
                    v145 = *(_QWORD *)v142;
                    v146 = *(_DWORD **)v144;
                    if (*(_QWORD *)v144)
                      ++*v146;
                    *(_QWORD *)(v145 + 8 * v143) = v146;
                  }
                  else
                  {
                    v147 = *(char **)v141;
                    v148 = v549;
                    if (v549)
                      ++*(_DWORD *)v549;
                    *(_QWORD *)&v147[8 * v143] = v148;
                  }
                  *(_DWORD *)(v142 + 12) = v143 + 1;
                }
                v149 = (uint64_t)v554;
                if (v554)
                {
                  v150 = *((_DWORD *)v554 - 2);
                  v151 = (~(v140 << 32) + v140) ^ ((unint64_t)(~(v140 << 32) + v140) >> 22);
                  v152 = 9 * ((v151 + ~(v151 << 13)) ^ ((v151 + ~(v151 << 13)) >> 8));
                  v153 = (v152 ^ (v152 >> 15)) + ~((v152 ^ (v152 >> 15)) << 27);
                  v154 = (v153 >> 31) ^ v153;
                  v155 = v150 & v154;
                  v156 = 1;
                  for (j = v150 & v154; ; j = (v158 + v156++) & v150)
                  {
                    v158 = j;
                    v159 = v554[2 * j];
                    if (v159 != -1)
                    {
                      if (!v159)
                        goto LABEL_251;
                      if (v159 == v140)
                        break;
                    }
                  }
                  v160 = v554[2 * v158 + 1];
                  if (v160)
                  {
                    v161 = *(unsigned int *)(v160 + 12);
                    if (!(_DWORD)v161)
                      goto LABEL_226;
                    v162 = *(WTF ***)v160;
                    v163 = v549;
                    v164 = *(_QWORD *)v160 + 8;
                    v165 = *(unsigned int *)(v160 + 12);
                    while (*v162 != v549)
                    {
                      ++v162;
                      v164 += 8;
                      if (!--v165)
                        goto LABEL_251;
                    }
                    *v162 = 0;
                    if (v163)
                    {
                      WTF::RefCounted<WebCore::Touch>::deref(v163, (WTF::StringImpl *)v8);
                      v161 = *(unsigned int *)(v160 + 12);
                    }
                    memmove(v162, v162 + 1, *(_QWORD *)v160 + 8 * v161 - v164);
                    v166 = *(_DWORD *)(v160 + 12) - 1;
                    *(_DWORD *)(v160 + 12) = v166;
                    if (!v166)
                    {
                      v150 = *(_DWORD *)(v149 - 8);
                      v155 = v150 & v154;
LABEL_226:
                      for (k = 1; ; ++k)
                      {
                        v168 = v155;
                        v169 = *(_QWORD *)(v149 + 16 * v155);
                        if (v169 != -1)
                        {
                          if (!v169)
                            goto LABEL_251;
                          if (v169 == v140)
                            break;
                        }
                        v155 = (v168 + k) & v150;
                      }
                      if ((_DWORD)v168 != *(_DWORD *)(v149 - 4))
                      {
                        v170 = (_QWORD *)(v149 + 16 * v168);
                        *v170 = 0;
                        if (v140)
                        {
                          if ((*(_BYTE *)(v140 + 22) & 2) != 0)
                          {
                            if (*(_DWORD *)(v140 + 24) == 2)
                            {
                              if ((*(_WORD *)(v140 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v140, v8);
                            }
                            else
                            {
                              *(_DWORD *)(v140 + 24) -= 2;
                            }
                          }
                          else
                          {
                            (*(void (**)(uint64_t))(*(_QWORD *)v140 + 96))(v140);
                          }
                        }
                        *v170 = -1;
                        v171 = v149 + 16 * v168;
                        v172 = *(WTF **)(v171 + 8);
                        *(_QWORD *)(v171 + 8) = 0;
                        if (v172)
                        {
                          v173 = *((unsigned int *)v172 + 3);
                          if ((_DWORD)v173)
                          {
                            v174 = *(WTF ***)v172;
                            v175 = 8 * v173;
                            do
                            {
                              v176 = *v174;
                              *v174 = 0;
                              if (v176)
                                WTF::RefCounted<WebCore::Touch>::deref(v176, (WTF::StringImpl *)v8);
                              ++v174;
                              v175 -= 8;
                            }
                            while (v175);
                          }
                          v177 = *(WTF **)v172;
                          if (*(_QWORD *)v172)
                          {
                            *(_QWORD *)v172 = 0;
                            *((_DWORD *)v172 + 2) = 0;
                            WTF::fastFree(v177, v8);
                          }
                          WTF::fastFree(v172, v8);
                        }
                        v178 = *(_DWORD *)(v149 - 12) - 1;
                        ++*(_DWORD *)(v149 - 16);
                        *(_DWORD *)(v149 - 12) = v178;
                        v179 = *(_DWORD *)(v149 - 4);
                        if (6 * v178 < v179 && v179 >= 9)
                          WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash((uint64_t *)&v554, v179 >> 1, 0);
                      }
                    }
                  }
                }
              }
LABEL_251:
              if (!*(_BYTE *)(v4 + 73))
              {
                v197 = 0;
                goto LABEL_445;
              }
              v181 = *((_QWORD *)v549 + 2);
              if (v181)
              {
                if ((*(_BYTE *)(v181 + 22) & 2) != 0)
                  *(_DWORD *)(v181 + 24) += 2;
                else
                  (*(void (**)(_QWORD))(*(_QWORD *)v181 + 88))(*((_QWORD *)v549 + 2));
              }
              v506[0] = (WTF *)v181;
              if (v483 >= 2)
              {
                v182 = *v486;
                if (*v486)
                {
                  v183 = *(_DWORD *)(v182 - 8);
                  v184 = (~(v181 << 32) + v181) ^ ((unint64_t)(~(v181 << 32) + v181) >> 22);
                  v185 = 9 * ((v184 + ~(v184 << 13)) ^ ((v184 + ~(v184 << 13)) >> 8));
                  v186 = (v185 ^ (v185 >> 15)) + ~((v185 ^ (v185 >> 15)) << 27);
                  v187 = v183 & ((v186 >> 31) ^ v186);
                  v188 = *(_QWORD *)(v182 + 8 * v187);
                  if (v188 == v181)
                  {
LABEL_261:
                    if (*(_BYTE *)(v4 + 73))
                      WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::add((WebCore::Node *)&v526, (uint64_t *)&v552, (uint64_t *)v506);
                    goto LABEL_264;
                  }
                  v189 = 1;
                  while (v188)
                  {
                    v187 = (v187 + v189) & v183;
                    v188 = *(_QWORD *)(v182 + 8 * v187);
                    ++v189;
                    if (v188 == v181)
                      goto LABEL_261;
                  }
                }
              }
              WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::add((WebCore::Node *)&v526, (uint64_t *)&v553, (uint64_t *)v506);
              WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::add((WebCore::Node *)&v526, v486, (uint64_t *)v506);
LABEL_264:
              if (v551)
              {
                v190 = *((_DWORD *)v551 - 2);
                v191 = (~(v181 << 32) + v181) ^ ((unint64_t)(~(v181 << 32) + v181) >> 22);
                v192 = 9 * ((v191 + ~(v191 << 13)) ^ ((v191 + ~(v191 << 13)) >> 8));
                v193 = (v192 ^ (v192 >> 15)) + ~((v192 ^ (v192 >> 15)) << 27);
                v194 = v190 & ((v193 >> 31) ^ v193);
                v195 = v551[v194];
                if (v195 != v181)
                {
                  v196 = 1;
                  while (v195)
                  {
                    v194 = ((_DWORD)v194 + v196) & v190;
                    v195 = v551[v194];
                    ++v196;
                    if (v195 == v181)
                      goto LABEL_272;
                  }
                  v194 = *((unsigned int *)v551 - 1);
                }
LABEL_272:
                if (v194 != *((_DWORD *)v551 - 1))
                  WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::remove((uint64_t *)&v551, (unsigned int **)&v551[v194]);
              }
              if (v181)
              {
                if ((*(_BYTE *)(v181 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v181 + 24) == 2)
                  {
                    if ((*(_WORD *)(v181 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v181, v8);
                  }
                  else
                  {
                    *(_DWORD *)(v181 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v181 + 96))(v181);
                }
              }
              v197 = 0;
LABEL_445:
              v299 = v549;
              v549 = 0;
              if (v299)
                WTF::RefCounted<WebCore::Touch>::deref(v299, (WTF::StringImpl *)v8);
              if (v197 != 7 && v197)
                goto LABEL_743;
              if (++v59 >= *(unsigned int *)(v4 + 60))
                goto LABEL_531;
            }
          }
          v498 = 0;
LABEL_531:
          v500 = (_QWORD *)(v505 + 712);
          v348 = v485;
          while (1)
          {
            v349 = v348;
            if (!*((_BYTE *)v348 + 3362) && !*((_BYTE *)v348 + 3405))
              break;
            v354 = *((_QWORD *)v348 + 66);
            if (!v354)
              goto LABEL_552;
            v355 = *(_QWORD *)(v354 + 8);
            if (!v355)
              goto LABEL_552;
            v356 = *(_QWORD *)(v355 + 120);
            if (!v356)
              goto LABEL_552;
            v357 = *(_QWORD *)(v356 + 8);
            if (!v357)
              goto LABEL_552;
            do
            {
              v348 = *(WebCore::Document **)(*(_QWORD *)(v357 + 40) + 8);
              v358 = *((_QWORD *)v348 + 66);
              if (!v358)
                break;
              v359 = *(_QWORD *)(v358 + 8);
              if (!v359)
                break;
              v360 = *(_QWORD *)(v359 + 120);
              if (!v360)
                break;
              v357 = *(_QWORD *)(v360 + 8);
            }
            while (v357);
LABEL_551:
            if (v348 == v349)
              goto LABEL_552;
          }
          v350 = *((_QWORD *)v348 + 66);
          if (v350)
          {
            v351 = *(_QWORD *)(v350 + 8);
            if (v351)
            {
              v352 = *(_QWORD *)(*(_QWORD *)(v351 + 128) + 8);
              if (v352 && *(_BYTE *)(v352 + 144) == 0)
              {
                v348 = *(WebCore::Document **)(v352 + 296);
                if (v348)
                  goto LABEL_551;
              }
            }
          }
LABEL_552:
          if (*((_BYTE *)v349 + 673) != (v498 & 1))
            *((_BYTE *)v349 + 673) = v498 & 1;
          if (v554)
          {
            v361 = *((unsigned int *)v554 - 1);
            v362 = &v554[2 * v361];
            if (*((_DWORD *)v554 - 3))
            {
              v363 = v554;
              if ((_DWORD)v361)
              {
                v364 = 16 * v361;
                v363 = v554;
                while ((unint64_t)(*v363 + 1) <= 1)
                {
                  v363 += 2;
                  v364 -= 16;
                  if (!v364)
                  {
                    v363 = v362;
                    break;
                  }
                }
              }
LABEL_561:
              v365 = &v554[2 * *((unsigned int *)v554 - 1)];
              goto LABEL_566;
            }
            v363 = &v554[2 * v361];
          }
          else
          {
            v363 = 0;
            v361 = 0;
          }
          v362 = &v554[2 * v361];
          if (v554)
            goto LABEL_561;
          v365 = 0;
LABEL_566:
          if (v365 != v363)
          {
            v366 = (float32x2_t)vdup_n_s32(0x3C800000u);
            v502 = v365;
            do
            {
              v367 = v363[1];
              if (*(_DWORD *)(v367 + 12))
              {
                v368 = 0;
                do
                {
                  v369 = *(_QWORD *)(*(_QWORD *)v367 + 8 * v368);
                  if (v369)
                    ++*(_DWORD *)v369;
                  v370 = v505;
                  if (*(_DWORD *)(v369 + 24) == *(_DWORD *)(v505 + 736))
                  {
                    LODWORD(v506[0]) = 8;
                    BYTE4(v506[0]) = 1;
                    v371 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v369 + 48)));
                    v372 = (int8x8_t)vcgt_s32(v371, (int32x2_t)0xFE000000FE000000);
                    v528 = 0x4000000040;
                    v526 = (WTF *)vorr_s8((int8x8_t)(*(_QWORD *)&v372 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v371), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v371, 6uLL)), v372));
                    v527 = v526 & 0xFFFFFFC0 | ((unint64_t)((HIDWORD(v526) & 0xFFFFFFC0) >> 6) << 38);
                    v529 = vmul_f32(vcvt_f32_s32((int32x2_t)v526), v366);
                    v530 = (float)(int)(v526 & 0xFFFFFFC0) * 0.015625;
                    v531 = (float)(int)(HIDWORD(v526) & 0xFFFFFFC0) * 0.015625;
                    v532 = v530 + 1.0;
                    v533 = v531;
                    v534 = v530 + 1.0;
                    v535 = v531 + 1.0;
                    v536 = v530;
                    v537 = v531 + 1.0;
                    v538 = 256;
                    v539 = 0;
                    v540 = 0;
                    v541 = (int32x2_t)v526;
                    v546 = 0;
                    v543 = 0;
                    v544 = 0;
                    v542 = 0;
                    v545 = 0;
                    v373 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v505 + 8) + 8) + 296);
                    if (v373)
                      *(_DWORD *)(v373 + 24) += 2;
                    WebCore::Document::hitTest(v373, v506, (WebCore::HitTestingTransformState *)&v526, (uint64_t)&v526);
                    v374 = v539;
                    if (v539)
                    {
                      do
                      {
                        v375 = *(_WORD *)(v374 + 28);
                        if ((v375 & 8) != 0)
                          break;
                        v377 = (uint64_t *)(v374 + 32);
                        v376 = *(_QWORD *)(v374 + 32);
                        if (v376)
                        {
                          if ((*(_WORD *)(v376 + 28) & 8) != 0)
                          {
                            v378 = *(_QWORD *)(v376 + 72) & 0xFFFFFFFFFFFFLL;
                            if (v378)
                            {
                              v380 = *(_QWORD *)(v378 + 88);
                              if (v380)
                              {
                                v381 = *(_QWORD *)(v380 + 224);
                                if (v381)
                                {
                                  v379 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v381 + 16))(v381, v374);
                                  if (v379)
                                    goto LABEL_582;
                                  v375 = *(_WORD *)(v374 + 28);
                                }
                              }
                            }
                          }
                        }
                        if ((v375 & 0x80) != 0)
                        {
                          v382 = *(_QWORD *)(v374 + 200);
                          if (!v382)
                          {
                            v374 = 0;
                            break;
                          }
                          v377 = (uint64_t *)(v382 + 8);
                        }
                        v379 = *v377;
LABEL_582:
                        v374 = v379;
                      }
                      while (v379);
                    }
                    WebCore::Document::updateHoverActiveState((unsigned __int8 *)v373, (unsigned __int8 *)v506, v374, 0);
                    if (v373)
                    {
                      if (*(_DWORD *)(v373 + 24) == 2)
                      {
                        if ((*(_WORD *)(v373 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v373, v383);
                      }
                      else
                      {
                        *(_DWORD *)(v373 + 24) -= 2;
                      }
                    }
                    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v526, v383);
                    v370 = v505;
                  }
                  v384 = *(unsigned int *)(v370 + 764);
                  if ((_DWORD)v384)
                  {
                    v385 = *v504;
                    v386 = (uint64_t)(*v504 + 8);
                    while (*(_QWORD *)v385 != v369)
                    {
                      v385 += 8;
                      v386 += 8;
                      if (!--v384)
                      {
                        if (v369)
                          goto LABEL_605;
                        goto LABEL_607;
                      }
                    }
                    *(_QWORD *)v385 = 0;
                    if (v369)
                    {
                      if (*(_DWORD *)v369 == 1)
                      {
                        v389 = *(_QWORD *)(v369 + 16);
                        *(_QWORD *)(v369 + 16) = 0;
                        if (v389)
                        {
                          if ((*(_BYTE *)(v389 + 22) & 2) != 0)
                          {
                            if (*(_DWORD *)(v389 + 24) == 2)
                            {
                              if ((*(_WORD *)(v389 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v389, v8);
                            }
                            else
                            {
                              *(_DWORD *)(v389 + 24) -= 2;
                            }
                          }
                          else
                          {
                            (*(void (**)(uint64_t))(*(_QWORD *)v389 + 96))(v389);
                          }
                        }
                        v390 = *(WTF **)(v369 + 8);
                        *(_QWORD *)(v369 + 8) = 0;
                        if (v390)
                        {
                          if (*(_DWORD *)v390 == 1)
                          {
                            v395 = (uint64_t *)*((_QWORD *)v390 + 2);
                            *((_QWORD *)v390 + 2) = 0;
                            if (v395)
                            {
                              if (*v395)
                              {
                                v499 = v395;
                                WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v395, (WTF::StringImpl *)v8);
                                v395 = v499;
                              }
                              WTF::fastFree((WTF *)v395, v8);
                            }
                            v396 = (unsigned int *)*((_QWORD *)v390 + 1);
                            *((_QWORD *)v390 + 1) = 0;
                            if (v396)
                            {
                              do
                              {
                                v397 = __ldaxr(v396);
                                v398 = v397 - 1;
                              }
                              while (__stlxr(v398, v396));
                              if (!v398)
                              {
                                atomic_store(1u, v396);
                                WTF::fastFree((WTF *)v396, v8);
                              }
                            }
                            WTF::fastFree(v390, v8);
                          }
                          else
                          {
                            --*(_DWORD *)v390;
                          }
                        }
                        WTF::fastFree((WTF *)v369, v8);
                      }
                      else
                      {
                        --*(_DWORD *)v369;
                      }
                    }
                    memmove(v385, v385 + 8, *(_QWORD *)(v505 + 752) + 8 * *(unsigned int *)(v505 + 764) - v386);
                    --*(_DWORD *)(v505 + 764);
                    if (!v369)
                      goto LABEL_607;
                  }
LABEL_605:
                  if (*(_DWORD *)v369 == 1)
                  {
                    v387 = *(_QWORD *)(v369 + 16);
                    *(_QWORD *)(v369 + 16) = 0;
                    if (v387)
                    {
                      if ((*(_BYTE *)(v387 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v387 + 24) == 2)
                        {
                          if ((*(_WORD *)(v387 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v387, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v387 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v387 + 96))(v387);
                      }
                    }
                    v388 = *(WTF **)(v369 + 8);
                    *(_QWORD *)(v369 + 8) = 0;
                    if (v388)
                    {
                      if (*(_DWORD *)v388 == 1)
                      {
                        v391 = (uint64_t *)*((_QWORD *)v388 + 2);
                        *((_QWORD *)v388 + 2) = 0;
                        if (v391)
                        {
                          if (*v391)
                            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v391, (WTF::StringImpl *)v8);
                          WTF::fastFree((WTF *)v391, v8);
                        }
                        v392 = (unsigned int *)*((_QWORD *)v388 + 1);
                        *((_QWORD *)v388 + 1) = 0;
                        if (v392)
                        {
                          do
                          {
                            v393 = __ldaxr(v392);
                            v394 = v393 - 1;
                          }
                          while (__stlxr(v394, v392));
                          if (!v394)
                          {
                            atomic_store(1u, v392);
                            WTF::fastFree((WTF *)v392, v8);
                          }
                        }
                        WTF::fastFree(v388, v8);
                      }
                      else
                      {
                        --*(_DWORD *)v388;
                      }
                    }
                    WTF::fastFree((WTF *)v369, v8);
                  }
                  else
                  {
                    --*(_DWORD *)v369;
                  }
LABEL_607:
                  ++v368;
                }
                while (v368 < *(unsigned int *)(v367 + 12));
              }
              v399 = v363 + 2;
              v363 = v362;
              if (v399 != v362)
              {
                v363 = v399;
                while ((unint64_t)(*v363 + 1) <= 1)
                {
                  v363 += 2;
                  if (v363 == v362)
                  {
                    v363 = v362;
                    break;
                  }
                }
              }
            }
            while (v363 != v502);
          }
          if (v551)
          {
            v400 = *((unsigned int *)v551 - 1);
            v401 = &v551[v400];
            v402 = v503;
            v403 = v505;
            v404 = (uint64_t *)(v505 + 728);
            if (*((_DWORD *)v551 - 3))
            {
              v405 = v551;
              if ((_DWORD)v400)
              {
                v406 = 8 * v400;
                v405 = v551;
                while ((unint64_t)(*v405 + 1) <= 1)
                {
                  ++v405;
                  v406 -= 8;
                  if (!v406)
                  {
                    v405 = v401;
                    goto LABEL_664;
                  }
                }
              }
              goto LABEL_664;
            }
            v405 = &v551[v400];
          }
          else
          {
            v405 = 0;
            v400 = 0;
            v402 = v503;
            v403 = v505;
            v404 = (uint64_t *)(v505 + 728);
          }
          v401 = &v551[v400];
          if (!v551)
          {
            v407 = 0;
LABEL_669:
            while (v405 != v407)
            {
              v408 = *v404;
              if (*v404)
              {
                v409 = *(_DWORD *)(v408 - 8);
                v410 = ~(*v405 << 32) + *v405;
                v411 = (v410 ^ (v410 >> 22)) + ~((v410 ^ (v410 >> 22)) << 13);
                v412 = (9 * (v411 ^ (v411 >> 8))) ^ ((9 * (v411 ^ (v411 >> 8))) >> 15);
                v413 = v409 & (((v412 + ~(v412 << 27)) >> 31) ^ ((_DWORD)v412 + ~((_DWORD)v412 << 27)));
                v414 = *(_QWORD *)(v408 + 8 * v413);
                if (v414 != *v405)
                {
                  v415 = 1;
                  while (v414)
                  {
                    v413 = ((_DWORD)v413 + v415) & v409;
                    v414 = *(_QWORD *)(v408 + 8 * v413);
                    ++v415;
                    if (v414 == *v405)
                      goto LABEL_677;
                  }
                  v413 = *(unsigned int *)(v408 - 4);
                }
LABEL_677:
                if (v413 != *(_DWORD *)(v408 - 4))
                  WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::remove(v404, (unsigned int **)(v408 + 8 * v413));
              }
              v416 = v405 + 1;
              v405 = v401;
              if (v416 != v401)
              {
                v405 = v416;
                while ((unint64_t)(*v405 + 1) <= 1)
                {
                  if (++v405 == v401)
                  {
                    v405 = v401;
                    break;
                  }
                }
              }
            }
            v417 = *(unsigned __int8 *)(v402 + 73);
            if (*(_BYTE *)(v402 + 73) && v477 == 0.0)
              *v500 = *(_QWORD *)(v402 + 64);
            v57 = v417 == 0;
            v418 = v478;
            if (v57)
              v418 = 1;
            if ((v418 & 1) == 0)
              *(_QWORD *)(v403 + 720) = *(_QWORD *)(v402 + 64);
            if (v477 == 0.0)
            {
              v419 = 0.0;
              v420 = 1.0;
            }
            else
            {
              v419 = *(float *)(v403 + 724) - *(float *)(v403 + 716);
              v420 = *(float *)(v403 + 720) / *(float *)(v403 + 712);
            }
            v421 = (void *)*(unsigned __int8 *)(v402 + 8);
            v422 = WebCore::Document::contentChangeObserver(v485);
            v423 = WebCore::ContentChangeObserver::touchEventDidStart((uint64_t *)v422, v421);
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            v425 = *(_QWORD *)(StatusReg + 736);
            if (!v425 || (v426 = *(_QWORD *)(v425 + 96)) == 0)
              v426 = WebCore::threadGlobalDataSlow((WebCore *)v423);
            v427 = *(_QWORD *)(v426 + 40);
            if (!v427)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v426);
              v427 = *(_QWORD *)(v426 + 40);
            }
            v428 = (WebCore *)WebCore::EventHandler::dispatchGestureEvent(v403, (uint64_t *)v402, (_QWORD *)(v427 + 896), &v551, v420, v419);
            v429 = (char)v428;
            v430 = *(_QWORD *)(StatusReg + 736);
            if (!v430 || (v431 = *(_QWORD *)(v430 + 96)) == 0)
              v431 = WebCore::threadGlobalDataSlow(v428);
            v432 = *(_QWORD *)(v431 + 40);
            if (!v432)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v431);
              v432 = *(_QWORD *)(v431 + 40);
            }
            v433 = (WebCore *)WebCore::EventHandler::dispatchGestureEvent(v505, (uint64_t *)v503, (_QWORD *)(v432 + 928), &v553, v420, v419);
            v434 = (char)v433;
            v435 = *(_QWORD *)(StatusReg + 736);
            if (!v435 || (v436 = *(_QWORD *)(v435 + 96)) == 0)
              v436 = WebCore::threadGlobalDataSlow(v433);
            v437 = *(_QWORD *)(v436 + 40);
            if (!v437)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v436);
              v437 = *(_QWORD *)(v436 + 40);
            }
            v438 = (WebCore *)WebCore::EventHandler::dispatchGestureEvent(v505, (uint64_t *)v503, (_QWORD *)(v437 + 888), &v552, v420, v419);
            v439 = (char)v438;
            v440 = *(_QWORD *)(StatusReg + 736);
            if (*(_BYTE *)(v503 + 8) == 16)
            {
              v441 = v505;
              if (!v440 || (v442 = *(_QWORD *)(v440 + 96)) == 0)
                v442 = WebCore::threadGlobalDataSlow(v438);
              v443 = *(_QWORD *)(v442 + 40);
              if (!v443)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v442);
                v443 = *(_QWORD *)(v442 + 40);
              }
              v444 = (_QWORD *)(v443 + 2072);
            }
            else
            {
              v441 = v505;
              if (!v440 || (v445 = *(_QWORD *)(v440 + 96)) == 0)
                v445 = WebCore::threadGlobalDataSlow(v438);
              v446 = *(_QWORD *)(v445 + 40);
              if (!v446)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v445);
                v446 = *(_QWORD *)(v445 + 40);
              }
              v444 = (_QWORD *)(v446 + 2080);
            }
            v447 = (WebCore *)WebCore::EventHandler::dispatchTouchEvent(v441, v503, v444, &v554, v420, v419);
            v448 = (char)v447;
            v449 = *(_QWORD *)(StatusReg + 736);
            if (!v449 || (v450 = *(_QWORD *)(v449 + 96)) == 0)
              v450 = WebCore::threadGlobalDataSlow(v447);
            v451 = *(_QWORD *)(v450 + 40);
            if (!v451)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v450);
              v451 = *(_QWORD *)(v450 + 40);
            }
            v452 = (WebCore *)WebCore::EventHandler::dispatchTouchEvent(v505, v503, (_QWORD *)(v451 + 2104), &v557, v420, v419);
            v453 = (char)v452;
            v454 = *(_QWORD *)(StatusReg + 736);
            if (!v454 || (v455 = *(_QWORD *)(v454 + 96)) == 0)
              v455 = WebCore::threadGlobalDataSlow(v452);
            v456 = *(_QWORD *)(v455 + 40);
            if (!v456)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v455);
              v456 = *(_QWORD *)(v455 + 40);
            }
            v457 = (WebCore *)WebCore::EventHandler::dispatchTouchEvent(v505, v503, (_QWORD *)(v456 + 2096), &v556, v420, v419);
            v458 = (char)v457;
            v459 = *(_QWORD *)(StatusReg + 736);
            if (!v459 || (v460 = *(_QWORD *)(v459 + 96)) == 0)
              v460 = WebCore::threadGlobalDataSlow(v457);
            v461 = *(_QWORD *)(v460 + 40);
            if (!v461)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v460);
              v461 = *(_QWORD *)(v460 + 40);
            }
            v462 = v429 | v434 | v439 | v448 | v453 | v458 | WebCore::EventHandler::dispatchTouchEvent(v505, v503, (_QWORD *)(v461 + 2088), &v555, v420, v419);
            if (v478)
            {
              *v500 = 0;
              *(_QWORD *)(v505 + 720) = 0;
            }
            *(_BYTE *)a3 = v462;
            *(_DWORD *)(a3 + 24) = 0;
            v11 = v495;
            if (*(_BYTE *)(v422 + 152))
            {
              *(_BYTE *)(v422 + 152) = 0;
              *(_BYTE *)(v422 + 155) = 0;
              *(_WORD *)(v422 + 158) = 1;
            }
LABEL_743:
            v463 = (uint64_t)v551;
            v3 = (uint64_t)v485;
            if (v551)
            {
              v467 = *((unsigned int *)v551 - 1);
              if ((_DWORD)v467)
              {
                v468 = v551;
                do
                {
                  v469 = *v468;
                  if (*v468 != -1)
                  {
                    *v468 = 0;
                    if (v469)
                    {
                      if ((*(_BYTE *)(v469 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v469 + 24) == 2)
                        {
                          if ((*(_WORD *)(v469 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v469, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v469 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v469 + 96))(v469);
                      }
                    }
                  }
                  ++v468;
                  --v467;
                }
                while (v467);
              }
              WTF::fastFree((WTF *)(v463 - 16), v8);
            }
            v464 = (uint64_t)v552;
            if (v552)
            {
              v470 = *((unsigned int *)v552 - 1);
              if ((_DWORD)v470)
              {
                v471 = v552;
                do
                {
                  v472 = *v471;
                  if (*v471 != -1)
                  {
                    *v471 = 0;
                    if (v472)
                    {
                      if ((*(_BYTE *)(v472 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v472 + 24) == 2)
                        {
                          if ((*(_WORD *)(v472 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v472, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v472 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v472 + 96))(v472);
                      }
                    }
                  }
                  ++v471;
                  --v470;
                }
                while (v470);
              }
              WTF::fastFree((WTF *)(v464 - 16), v8);
            }
            v465 = (uint64_t)v553;
            if (v553)
            {
              v473 = *((unsigned int *)v553 - 1);
              if ((_DWORD)v473)
              {
                v474 = v553;
                do
                {
                  v475 = *v474;
                  if (*v474 != -1)
                  {
                    *v474 = 0;
                    if (v475)
                    {
                      if ((*(_BYTE *)(v475 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v475 + 24) == 2)
                        {
                          if ((*(_WORD *)(v475 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v475, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v475 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v475 + 96))(v475);
                      }
                    }
                  }
                  ++v474;
                  --v473;
                }
                while (v473);
              }
              WTF::fastFree((WTF *)(v465 - 16), v8);
            }
            if (v554)
              WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::deallocateTable((uint64_t)v554, v8);
            if (v555)
              WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::deallocateTable(v555, v8);
            if (v556)
              WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::deallocateTable(v556, v8);
            if (v557)
              WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::deallocateTable(v557, v8);
            goto LABEL_754;
          }
LABEL_664:
          v407 = &v551[*((unsigned int *)v551 - 1)];
          goto LABEL_669;
        }
        v30 = (v29 - 1) | ((v29 - 1) >> 1) | ((((_DWORD)v29 - 1) | ((v29 - 1) >> 1)) >> 2);
        v31 = v30 | (v30 >> 4) | ((v30 | (v30 >> 4)) >> 8);
        v32 = (v31 | HIWORD(v31)) + 1;
        if (v32 > 0x400)
        {
          if (v32 > 2 * v29)
            goto LABEL_49;
        }
        else if (3 * v32 > 4 * v29)
        {
LABEL_46:
          v33 = (double)v29;
          v34 = (double)v32;
          v35 = 0.604166667;
          goto LABEL_50;
        }
        LODWORD(v32) = 2 * v32;
        if (v32 <= 0x400)
          goto LABEL_46;
LABEL_49:
        v33 = (double)v29;
        v34 = (double)v32;
        v35 = 0.416666667;
LABEL_50:
        if (v34 * v35 <= v33)
          LODWORD(v32) = 2 * v32;
        if (v32 <= 8)
          v36 = 8;
        else
          v36 = v32;
        v37 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v36 + 16));
        v38 = v37 + 4;
        v551 = v37 + 4;
        v37[2] = v36 - 1;
        v37[3] = v36;
        *v37 = 0;
        v37[1] = v29;
        v39 = *v486;
        if (*v486)
        {
          v40 = *(unsigned int *)(v39 - 4);
          v41 = (_QWORD *)(v39 + 8 * v40);
          if (*(_DWORD *)(v39 - 12))
          {
            v42 = (_QWORD *)*v486;
            if ((_DWORD)v40)
            {
              v43 = 8 * v40;
              v42 = (_QWORD *)*v486;
              while ((unint64_t)(*v42 + 1) <= 1)
              {
                ++v42;
                v43 -= 8;
                if (!v43)
                {
                  v42 = v41;
                  break;
                }
              }
            }
LABEL_65:
            if (v39)
              v44 = (_QWORD *)(v39 + 8 * *(unsigned int *)(v39 - 4));
            else
              v44 = 0;
            if (v44 != v42)
            {
              while (1)
              {
                v45 = v37[2];
                v46 = *v42;
                v47 = ~(*v42 << 32) + *v42;
                v48 = (v47 ^ (v47 >> 22)) + ~((v47 ^ (v47 >> 22)) << 13);
                v49 = (9 * (v48 ^ (v48 >> 8))) ^ ((9 * (v48 ^ (v48 >> 8))) >> 15);
                v50 = v45 & (((v49 + ~(v49 << 27)) >> 31) ^ (v49 + ~((_DWORD)v49 << 27)));
                v51 = 1;
                do
                {
                  v52 = v50;
                  v53 = *(_QWORD *)&v38[2 * v50];
                  v50 = (v50 + v51++) & v45;
                }
                while (v53);
                v54 = v52;
                if (v46)
                {
                  if ((*(_BYTE *)(v46 + 22) & 2) == 0)
                  {
                    (*(void (**)(_QWORD))(*(_QWORD *)v46 + 88))(*v42);
                    v56 = *(_QWORD *)&v38[2 * v54];
                    *(_QWORD *)&v38[2 * v54] = v46;
                    v4 = v503;
                    if (v56)
                    {
                      if ((*(_BYTE *)(v56 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v56 + 24) == 2)
                        {
                          if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v56, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v56 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 96))(v56);
                      }
                    }
                    goto LABEL_75;
                  }
                  *(_DWORD *)(v46 + 24) += 2;
                }
                *(_QWORD *)&v38[2 * v52] = v46;
                v4 = v503;
LABEL_75:
                v55 = v42 + 1;
                v42 = v41;
                if (v55 != v41)
                {
                  v42 = v55;
                  while ((unint64_t)(*v42 + 1) <= 1)
                  {
                    if (++v42 == v41)
                    {
                      v42 = v41;
                      break;
                    }
                  }
                }
                if (v42 == v44)
                  goto LABEL_89;
              }
            }
            goto LABEL_89;
          }
          v42 = (_QWORD *)(v39 + 8 * v40);
        }
        else
        {
          v42 = 0;
          v40 = 0;
        }
        v41 = (_QWORD *)(v39 + 8 * v40);
        goto LABEL_65;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
LABEL_754:
  if (v11)
  {
    if (*((_DWORD *)v11 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 2);
  }
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v558);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v466);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void sub_194EA2DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WebCore::Node *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43)
    (*(void (**)(uint64_t))(*(_QWORD *)a43 + 8))(a43);
  _Unwind_Resume(a1);
}

uint64_t WebCore::touchesForTargetInMap(WebCore::Node *this, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int i;
  uint64_t v12;
  WebCore::Node **v13;
  WebCore::Node *v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  WTF **v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  if ((*((_BYTE *)this + 22) & 2) != 0)
    *((_DWORD *)this + 6) += 2;
  else
    (*(void (**)(WebCore::Node *))(*(_QWORD *)this + 88))(this);
  v4 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash(a2, 8u, 0), (v4 = *a2) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
  v7 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v9 >> 31) ^ v9;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v5;
    v13 = (WebCore::Node **)(v4 + 16 * v12);
    v14 = *v13;
    if (*v13 != (WebCore::Node *)-1)
      break;
    v6 = (uint64_t *)(v4 + 16 * v12);
LABEL_12:
    v10 = i + v12;
  }
  if (!v14)
  {
    if (v6)
    {
      *v6 = 0;
      v6[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      *v6 = (uint64_t)this;
    }
    else
    {
      *v13 = this;
      v6 = (uint64_t *)(v4 + 16 * v12);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = 0;
    v16[1] = 0;
    v18 = (WTF *)v6[1];
    v6[1] = (uint64_t)v16;
    if (v18)
    {
      v19 = *((unsigned int *)v18 + 3);
      if ((_DWORD)v19)
      {
        v20 = *(WTF ***)v18;
        v21 = 8 * v19;
        do
        {
          v22 = *v20;
          *v20 = 0;
          if (v22)
            WTF::RefCounted<WebCore::Touch>::deref(v22, v17);
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = *(WTF **)v18;
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)v18 = 0;
        *((_DWORD *)v18 + 2) = 0;
        WTF::fastFree(v23, v17);
      }
      WTF::fastFree(v18, v17);
    }
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        return v6[1];
    }
    else
    {
      if (3 * v29 > 4 * v28)
        return v6[1];
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_40;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_40:
    v6 = WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash(a2, v30, v6);
    return v6[1];
  }
  if (v14 != this)
    goto LABEL_12;
  v15 = *(_QWORD *)(v4 + 16 * v12 + 8);
  if ((*((_BYTE *)this + 22) & 2) != 0)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, a2);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  else
  {
    (*(void (**)(WebCore::Node *))(*(_QWORD *)this + 96))(this);
  }
  return v15;
}

void sub_194EA3640(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if ((*(_BYTE *)(v2 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
  }
  _Unwind_Resume(exception_object);
}

WebCore::EventNames **WebCore::EventHandler::defaultTouchEventHandler(WebCore::EventNames **this, WebCore::Node *a2, WebCore::TouchEvent *a3)
{
  WebCore::EventNames **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = this;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v7 = (uint64_t)this;
  }
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  if (*((_QWORD *)a3 + 3) != *(_QWORD *)(v8 + 2088))
  {
    v9 = *((_QWORD *)a3 + 20);
    if (v9)
    {
      v10 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
      if (v10)
      {
        while ((*(_BYTE *)(v10 + 45) & 0x10) == 0)
        {
          v11 = *(_QWORD *)(v10 + 32);
          if (v11)
          {
            v10 = *(_QWORD *)(v11 + 8);
            if (v10)
              continue;
          }
          return this;
        }
LABEL_13:
        if ((*(_BYTE *)(v10 + 21) & 0x80) != 0)
        {
          v13 = *(_QWORD *)(v10 + 144);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 264);
            if (v14)
            {
              v15 = *(_QWORD *)(*((_QWORD *)v5[1] + 1) + 288);
              if (v15)
              {
                v16 = *(uint64_t **)(v15 + 1288);
                if (v16)
                {
                  ++*((_DWORD *)v16 + 2);
                  v17 = *(_QWORD *)(v14 + 8);
                  if (v17)
                  {
                    if (*(_QWORD *)(v17 + 8))
                    {
                      v18 = *v16;
                      if (v18)
                      {
                        v19 = *(_DWORD *)(v18 - 8);
                        v20 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
                        v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
                        v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
                        v23 = v19 & ((v22 >> 31) ^ v22);
                        for (i = 1; ; ++i)
                        {
                          v25 = *(_QWORD *)(v18 + 8 * v23);
                          if (v25 != -1)
                          {
                            if (!v25)
                              return this;
                            if (v25 == v17)
                              break;
                          }
                          v23 = (v23 + i) & v19;
                        }
                        if (!*(_BYTE *)(v14 + 79))
                        {
                          v26 = *(_QWORD *)(v14 + 16);
                          if (!v26)
                          {
                            v26 = WTF::fastMalloc((WTF *)0xB0);
                            *(_QWORD *)v26 = off_1E3405EF0;
                            *(_QWORD *)(v26 + 8) = v14;
                            *(_QWORD *)(v26 + 16) = 0;
                            *(_QWORD *)(v26 + 24) = &off_1E3406D78;
                            *(_OWORD *)(v26 + 32) = 0u;
                            *(_OWORD *)(v26 + 48) = 0u;
                            *(_OWORD *)(v26 + 64) = 0u;
                            *(_QWORD *)(v26 + 80) = 0;
                            *(_QWORD *)(v26 + 88) = v26;
                            *(_QWORD *)(v26 + 96) = 0;
                            *(_QWORD *)(v26 + 104) = 0;
                            *(_QWORD *)(v26 + 110) = 0;
                            *(_QWORD *)(v26 + 120) = 0;
                            v27 = WTF::fastMalloc((WTF *)0x20);
                            *(_QWORD *)v27 = 0;
                            *(_DWORD *)(v27 + 8) = 0;
                            *(_QWORD *)(v27 + 16) = v14;
                            *(_BYTE *)(v27 + 24) = 0;
                            *(_QWORD *)(v26 + 128) = v27;
                            *(_BYTE *)(v26 + 136) = 0;
                            *(_QWORD *)v26 = off_1E3354B08;
                            *(_QWORD *)(v26 + 168) = 0;
                            *(_DWORD *)(v26 + 140) = 0;
                            *(_DWORD *)(v26 + 143) = 0;
                            *(_QWORD *)(v26 + 156) = 0;
                            *(_QWORD *)(v26 + 148) = 0;
                            v28 = *(_QWORD *)(v14 + 16);
                            *(_QWORD *)(v14 + 16) = v26;
                            if (v28)
                            {
                              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
                              v26 = *(_QWORD *)(v14 + 16);
                            }
                          }
                          this = (WebCore::EventNames **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 208))(v26, v9);
                          if ((_DWORD)this)
                            *((_DWORD *)a3 + 5) |= 0x80u;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          while (1)
          {
            v12 = *(_QWORD *)(v10 + 32);
            if (!v12)
              break;
            v10 = *(_QWORD *)(v12 + 8);
            if (!v10)
              break;
            if ((*(_BYTE *)(v10 + 45) & 0x10) != 0)
              goto LABEL_13;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::EventHandler::wheelEvent(WebCore::EventHandler *this, void *cf)
{
  uint64_t v2;
  _DWORD *v3;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  const void *v23;
  WTF *v25;
  void *v26;
  _BYTE v27[24];
  int v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  char v32;
  __int16 v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  char v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (!v2)
    return 0;
  v3 = *(_DWORD **)(v2 + 8);
  if (!v3)
    return 0;
  ++*v3;
  {
    v6 = (const void *)WebCore::currentEventSlot(void)::event;
    if (!WebCore::currentEventSlot(void)::event
      || (CFRetain((CFTypeRef)WebCore::currentEventSlot(void)::event),
    {
      if (!cf)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = 0;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (cf)
LABEL_7:
    CFRetain(cf);
LABEL_8:
  v7 = (void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)cf;
  if (v7)
    CFRelease(v7);
  WTF::WallTime::now((WTF::WallTime *)v7);
  v9 = v8;
  objc_msgSend(cf, "locationInWindow");
  v11 = v10;
  v13 = v12;
  objc_msgSend(cf, "locationInWindow");
  v15 = v14;
  v17 = v16;
  objc_msgSend(cf, "deltaX");
  v19 = v18;
  objc_msgSend(cf, "deltaY");
  v29 = v9;
  v30 = 12;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  v34 = 0;
  v35 = (int)v11 | ((unint64_t)(int)v13 << 32);
  v36 = (int)v15 | ((unint64_t)(int)v17 << 32);
  v37 = v19;
  v38 = v20;
  v40 = 0;
  v39 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v46 = 0;
  v45 = 0;
  WebCore::EventHandler::handleWheelEvent((uint64_t)this, (unsigned __int8 *)&v29, 0xAu, (uint64_t)v27);
  if (v28)
    v21 = 1;
  else
    v21 = v27[0] == 0;
  v22 = !v21;
  objc_msgSend(cf, "setWasHandled:", v22);
  {
    WebCore::currentEventSlot(void)::event = 0;
    if (!v6)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (v6)
LABEL_18:
    CFRetain(v6);
LABEL_19:
  v23 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)v6;
  if (v23)
    CFRelease(v23);
  if (v6)
    CFRelease(v6);
  if (*v3 == 1)
  {
    WebCore::Page::~Page((uint64_t)v3);
    WTF::fastFree(v25, v26);
  }
  else
  {
    --*v3;
  }
  return v22;
}

void sub_194EA3B20(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::EventHandler::dispatchSimulatedTouchEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  int v6;
  WTF *v7;
  void *v8;
  int v9;
  int v10;
  WTF *v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  _BYTE v16[24];
  int v17;
  _BYTE v18[48];
  WTF *v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WebCore::PlatformEventFactory::createPlatformSimulatedTouchEvent((WTF::WallTime *)0xD, a2, (uint64_t)v18);
  WebCore::EventHandler::handleTouchEvent(a1, (uint64_t)v18, (uint64_t)v16);
  v5 = v17;
  v6 = v16[0];
  v7 = v19;
  if (v19)
  {
    v19 = 0;
    v20 = 0;
    WTF::fastFree(v7, v4);
  }
  WebCore::PlatformEventFactory::createPlatformSimulatedTouchEvent((WTF::WallTime *)0xF, a2, (uint64_t)v18);
  WebCore::EventHandler::handleTouchEvent(a1, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  v10 = v16[0];
  v11 = v19;
  if (v19)
  {
    v19 = 0;
    v20 = 0;
    WTF::fastFree(v11, v8);
  }
  if (v5)
    v12 = 1;
  else
    v12 = v6 == 0;
  v13 = !v12;
  if (v9)
    v14 = 1;
  else
    v14 = v10 == 0;
  if (v14)
    return v13;
  else
    return 1;
}

void sub_194EA3CA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20)
{
  if (a19)
    WTF::fastFree(a19, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::EventHandler::touchEvent(WebCore::EventHandler *this, WebEvent *a2)
{
  const void *v4;
  const void *v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  const void *v10;
  _BYTE v11[24];
  int v12;
  _BYTE v13[48];
  WTF *v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  {
    v4 = (const void *)WebCore::currentEventSlot(void)::event;
    if (!WebCore::currentEventSlot(void)::event
      || (CFRetain((CFTypeRef)WebCore::currentEventSlot(void)::event),
    {
      if (!a2)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else
  {
    v4 = 0;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (a2)
LABEL_5:
    CFRetain(a2);
LABEL_6:
  v5 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)a2;
  if (v5)
    CFRelease(v5);
  WebCore::PlatformEventFactory::createPlatformTouchEvent((WebCore::PlatformEventFactory *)a2, (uint64_t)v13);
  WebCore::EventHandler::handleTouchEvent((uint64_t)this, (uint64_t)v13, (uint64_t)v11);
  if (v12)
    v6 = 1;
  else
    v6 = v11[0] == 0;
  v7 = !v6;
  -[WebEvent setWasHandled:](a2, "setWasHandled:", v7);
  v9 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v9, v8);
  }
  {
    if (!v4)
      goto LABEL_19;
    goto LABEL_18;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (v4)
LABEL_18:
    CFRetain(v4);
LABEL_19:
  v10 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)v4;
  if (v10)
    CFRelease(v10);
  if (v4)
    CFRelease(v4);
}

void sub_194EA3E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20)
{
  const void *v20;

  CFRelease(v20);
  _Unwind_Resume(a1);
}

uint64_t WebCore::EventHandler::tabsToAllFormControls(WebCore::EventHandler *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  WTF *v15;
  void *v16;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    ++*(_DWORD *)v3;
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 272))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16));
    v6 = (int)v5;
    if (!a2)
      goto LABEL_12;
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
      v8 = WebCore::threadGlobalDataSlow(v5);
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    if (((v10 = *((_QWORD *)a2 + 3), v10 == *(_QWORD *)(v9 + 1048)) || v10 == *(_QWORD *)(v9 + 1056))
      && (*((_BYTE *)a2 + 84) & 1) != 0)
    {
      v11 = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0009", 6);
    }
    else
    {
LABEL_12:
      v11 = 0;
    }
    if ((v6 & 0x10000000) != 0)
      v12 = 0;
    else
      v12 = v11;
    v13 = v12 | v6 | ((v6 & 0x10000000) == 0) ^ v11 ^ 1;
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Page::~Page(v3);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

void sub_194EA3FC0(_Unwind_Exception *exception_object)
{
  _DWORD *v1;
  WTF *v3;
  void *v4;

  if (*v1 == 1)
  {
    WebCore::Page::~Page((uint64_t)v1);
    WTF::fastFree(v3, v4);
  }
  else
  {
    --*v1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::EventHandler::keyEvent(WebCore::EventHandler *this, WebEvent *a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  const void *v8;
  _QWORD v10[16];

  v10[15] = *MEMORY[0x1E0C80C00];
  {
    v4 = (const void *)WebCore::currentEventSlot(void)::event;
    if (!WebCore::currentEventSlot(void)::event
      || (CFRetain((CFTypeRef)WebCore::currentEventSlot(void)::event),
    {
      if (!a2)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else
  {
    v4 = 0;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (a2)
LABEL_5:
    CFRetain(a2);
LABEL_6:
  v5 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)a2;
  if (v5)
    CFRelease(v5);
  WebCore::PlatformEventFactory::createPlatformKeyboardEvent(a2, (uint64_t)v10);
  v6 = WebCore::EventHandler::keyEvent(this, (const WebCore::PlatformKeyboardEvent *)v10);
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v10, v7);
  -[WebEvent setWasHandled:](a2, "setWasHandled:", v6);
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_10;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (v4)
LABEL_10:
    CFRetain(v4);
LABEL_11:
  v8 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)v4;
  if (v8)
    CFRelease(v8);
  if (v4)
    CFRelease(v4);
  return v6;
}

void sub_194EA4128(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_194EA413C(void *exc_buf, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x194EA40C4);
  }
  JUMPOUT(0x194EA4134);
}

void sub_194EA41DC()
{
  objc_end_catch();
  JUMPOUT(0x194EA4134);
}

uint64_t WebCore::EventHandler::focusDocumentView(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  WAKView *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      ++*(_DWORD *)v3;
      v5 = *(id **)(v1 + 288);
      if (v5)
      {
        ++*((_DWORD *)v5 + 2);
        v6 = (WAKView *)objc_msgSend(v5[5], "documentView");
        if (v6)
        {
          this = WebCore::Chrome::focusNSView(*(WebCore::Chrome **)(v3 + 48), v6);
          v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 24);
          if (!v7 || !*(_QWORD *)(v7 + 8))
          {
            if (*((_DWORD *)v5 + 2) == 1)
              this = (*((uint64_t (**)(id *))*v5 + 1))(v5);
            else
              --*((_DWORD *)v5 + 2);
LABEL_20:
            if (*(_DWORD *)v3 == 1)
            {
              WebCore::Page::~Page(v3);
              return WTF::fastFree(v15, v16);
            }
            else
            {
              --*(_DWORD *)v3;
            }
            return this;
          }
        }
        if (*((_DWORD *)v5 + 2) == 1)
          (*((void (**)(id *))*v5 + 1))(v5);
        else
          --*((_DWORD *)v5 + 2);
      }
      v8 = *(unsigned int **)(*(_QWORD *)(v4 + 8) + 8);
      v9 = *((_QWORD *)v8 + 3);
      if (!v9 || v3 != *(_QWORD *)(v9 + 8))
        goto LABEL_28;
      v10 = *(_DWORD **)(v3 + 72);
      ++*v10;
      v11 = v8 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      this = WebCore::FocusController::setFocusedFrame((uint64_t)v10, (WebCore::Frame *)v8, 1);
      do
      {
        v13 = __ldaxr(v11);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v11));
      if (!v14)
      {
        atomic_store(1u, v11);
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v17 = off_1E31FE290;
        v17[1] = v11;
        v18 = (uint64_t)v17;
        WTF::ensureOnMainThread();
        this = v18;
        if (v18)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      if (!*v10)
      {
LABEL_28:
        __break(0xC471u);
        JUMPOUT(0x194EA43B8);
      }
      --*v10;
      goto LABEL_20;
    }
  }
  return this;
}

void sub_194EA43DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Chrome::focusNSView(WebCore::Chrome *this, WAKView *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  v3 = **((_QWORD **)this + 2);
  if (!a2)
    return (*(uint64_t (**)(void))(v3 + 1232))();
  result = (*(uint64_t (**)(void))(v3 + 1216))();
  v6 = result;
  if ((WAKView *)result != a2)
  {
    result = -[WAKView window](a2, "window");
    if (result)
    {
      result = -[WAKView superview](a2, "superview");
      if (result)
      {
        result = -[WAKResponder acceptsFirstResponder](a2, "acceptsFirstResponder");
        if ((_DWORD)result)
        {
          (*(void (**)(_QWORD, WAKView *))(**((_QWORD **)this + 2) + 1224))(*((_QWORD *)this + 2), a2);
          result = -[WAKView superview](a2, "superview");
          if (!result)
            return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 1224))(*((_QWORD *)this + 2), v6);
        }
      }
    }
  }
  return result;
}

void sub_194EA45B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSException *v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v14 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v14);
  objc_end_catch();
}

BOOL WebCore::EventHandler::passMouseDownEventToWidget(WebCore::EventHandler *this, WebCore::Widget *a2)
{
  void *v3;
  _BOOL8 v4;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  int v14;
  id v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  WTF *v23;
  void *v24;
  char v25;

  if (!a2)
    return 1;
  ++*((_DWORD *)a2 + 2);
  v3 = (void *)*((_QWORD *)a2 + 5);
  v4 = v3 != 0;
  if (v3)
  {
    v6 = (void *)objc_msgSend(*((id *)a2 + 5), "superview");
    {
      v7 = (void *)WebCore::currentEventSlot(void)::event;
    }
    else
    {
      v7 = 0;
      WebCore::currentEventSlot(void)::event = 0;
    }
    objc_msgSend(v7, "locationInWindow");
    objc_msgSend(v6, "convertPoint:fromView:", 0);
    v8 = (void *)objc_msgSend(v3, "hitTest:");
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          ++*(_DWORD *)v10;
          if ((void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 48) + 16) + 1216))(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16)) != v8
            && objc_msgSend(v8, "acceptsFirstResponder")
            && objc_msgSend(v8, "needsPanelToBecomeKey"))
          {
            (*(void (**)(_QWORD, void *))(**(_QWORD **)(*(_QWORD *)(v10 + 48) + 16) + 1224))(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16), v8);
          }
          v11 = *(unsigned __int8 *)(v10 + 339);
          if (!*(_BYTE *)(v10 + 339))
            WebCore::Page::setDefersLoading((WebCore::Page *)v10, 1);
          *((_BYTE *)this + 792) = 1;
          ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          {
            v12 = WebCore::currentEventSlot(void)::event;
          }
          else
          {
            v12 = 0;
            WebCore::currentEventSlot(void)::event = 0;
          }
          objc_msgSend(v8, "mouseDown:", v12);
          v14 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
            && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
          {
            WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v25, v13);
            v14 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          }
          WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v14 - 1;
          *((_BYTE *)this + 792) = 0;
          if (!v11)
            WebCore::Page::setDefersLoading((WebCore::Page *)v10, 0);
          *((_QWORD *)this + 98) = v8;
          *((_BYTE *)this + 185) = 0;
          v15 = +[WAKWindow currentEvent](WAKWindow, "currentEvent");
          v16 = v15;
          if (v15)
          {
            {
              v17 = WebCore::currentEventSlot(void)::event;
            }
            else
            {
              v17 = 0;
              WebCore::currentEventSlot(void)::event = 0;
            }
            if ((id)v17 != v15 && objc_msgSend(v15, "type") == 1)
            {
              objc_msgSend(v16, "timestamp");
              v19 = v18;
              {
                v20 = (void *)WebCore::currentEventSlot(void)::event;
              }
              else
              {
                v20 = 0;
                WebCore::currentEventSlot(void)::event = 0;
              }
              objc_msgSend(v20, "timestamp");
              if (v19 >= v21)
                *((_BYTE *)this + 168) = 0;
            }
          }
          if (*(_DWORD *)v10 == 1)
          {
            WebCore::Page::~Page(v10);
            WTF::fastFree(v23, v24);
          }
          else
          {
            --*(_DWORD *)v10;
          }
        }
      }
    }
  }
  if (*((_DWORD *)a2 + 2) == 1)
    (*(void (**)(WebCore::Widget *))(*(_QWORD *)a2 + 8))(a2);
  else
    --*((_DWORD *)a2 + 2);
  return v4;
}

void sub_194EA48B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _DWORD *v13;
  _DWORD *v14;
  int *v15;
  int v16;
  int v18;
  WTF *v19;
  void *v20;
  NSException *v21;

  v16 = (int)a2;
  v18 = *v15;
  if (*v15 == 1 && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&a13, a2);
    v18 = *v15;
  }
  *v15 = v18 - 1;
  if (*v14 == 1)
  {
    WebCore::Page::~Page((uint64_t)v14);
    WTF::fastFree(v19, v20);
  }
  else
  {
    --*v14;
  }
  if (v16 == 1)
  {
    v21 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v21);
    objc_end_catch();
    JUMPOUT(0x194EA47F4);
  }
  if (v13[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  else
    --v13[2];
  _Unwind_Resume(exception_object);
}

BOOL WebCore::findViewInSubviews(WebCore *this, WAKView *a2, WAKView *a3)
{
  void *v4;
  WAKView *v5;
  WAKView *v6;

  v4 = (void *)objc_msgSend((id)-[WebCore subviews](this, "subviews", a3), "objectEnumerator");
  while (1)
  {
    v5 = (WAKView *)objc_msgSend(v4, "nextObject");
    if (v5 == a2 || !v5)
      break;
    if ((WebCore::findViewInSubviews((WebCore *)v5, a2, v6) & 1) != 0)
      return 1;
  }
  return v5 != 0;
}

void sub_194EA4A28()
{
  objc_end_catch();
  JUMPOUT(0x194EA4A30);
}

uint64_t WebCore::EventHandler::eventLoopHandleMouseUp(uint64_t a1, uint64_t a2, WAKView *a3)
{
  WAKView *v3;
  uint64_t v5;
  WebCore *v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(WAKView **)(a1 + 784);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 288);
  if (v5 && (v6 = *(WebCore **)(v5 + 40)) != 0 && WebCore::findViewInSubviews(v6, v3, a3))
  {
    result = 1;
    if (!*(_BYTE *)(a1 + 185))
    {
      *(_BYTE *)(a1 + 792) = 1;
      {
        v8 = WebCore::currentEventSlot(void)::event;
      }
      else
      {
        v8 = 0;
        WebCore::currentEventSlot(void)::event = 0;
      }
      -[WAKResponder mouseUp:](v3, "mouseUp:", v8);
      *(_BYTE *)(a1 + 792) = 0;
      return 1;
    }
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 784) = 0;
  }
  return result;
}

uint64_t WebCore::EventHandler::passSubframeEventToSubframe(WebCore::EventHandler *a1, uint64_t a2, uint64_t a3, const WebCore::IntPoint *a4)
{
  void *v8;
  int v9;
  WebEvent *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WebEvent *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  _BYTE v21[32];
  _BYTE v22[104];
  WTF::StringImpl *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  {
    v8 = (void *)WebCore::currentEventSlot(void)::event;
  }
  else
  {
    v8 = 0;
    WebCore::currentEventSlot(void)::event = 0;
  }
  v9 = objc_msgSend(v8, "type");
  if (v9)
  {
    if (v9 == 1)
    {
      if (*((_BYTE *)a1 + 185))
      {
        *((_BYTE *)a1 + 792) = 1;
        {
          v13 = (WebEvent *)WebCore::currentEventSlot(void)::event;
        }
        else
        {
          v13 = 0;
          WebCore::currentEventSlot(void)::event = 0;
        }
        v14 = *(_QWORD *)(a3 + 640);
        WebCore::PlatformEventFactory::createPlatformMouseEvent(v13, (uint64_t)v22);
        WebCore::EventHandler::handleMouseReleaseEvent(v14, (uint64_t)v22, (uint64_t)v21);
LABEL_13:
        v15 = v23;
        v23 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v12);
          else
            *(_DWORD *)v15 -= 2;
        }
        *((_BYTE *)a1 + 792) = 0;
        return 1;
      }
    }
    else if (v9 == 2)
    {
      *((_BYTE *)a1 + 792) = 1;
      {
        v10 = (WebEvent *)WebCore::currentEventSlot(void)::event;
      }
      else
      {
        v10 = 0;
        WebCore::currentEventSlot(void)::event = 0;
      }
      v11 = *(_QWORD *)(a3 + 640);
      WebCore::PlatformEventFactory::createPlatformMouseEvent(v10, (uint64_t)v22);
      WebCore::EventHandler::handleMouseMoveEvent(v11, (uint64_t)v22, a4, 0, (uint64_t)v21);
      goto LABEL_13;
    }
    return 0;
  }
  v17 = *(_QWORD *)(a2 + 200);
  if (!v17)
    return 0;
  v18 = *(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v18)
    return 0;
  v19 = (*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3;
  v20 = (*(unsigned __int8 *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
  if (!v19)
    v20 = 0;
  if (v20 != 1)
    return 0;
  result = *(_QWORD *)(v18 + 232);
  if (!result)
    return result;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result) & 1) == 0)
    return 0;
  result = WebCore::EventHandler::passMouseDownEventToWidget(a1, *(WebCore::Widget **)(v18 + 232));
  if ((_DWORD)result)
  {
    result = 1;
    *((_BYTE *)a1 + 185) = 1;
  }
  return result;
}

void sub_194EA4D5C()
{
  objc_end_catch();
  JUMPOUT(0x194EA4D64);
}

uint64_t WebCore::EventHandler::passWheelEventToWidget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  uint64_t result;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = *(void **)(a3 + 40);
  if (!v3)
    return 0;
  {
    v5 = (void *)WebCore::currentEventSlot(void)::event;
  }
  else
  {
    v5 = 0;
    WebCore::currentEventSlot(void)::event = 0;
  }
  if (objc_msgSend(v5, "type") != 3 || *(_BYTE *)(a1 + 792))
    return 0;
  v7 = (void *)objc_msgSend(v3, "superview");
  {
    v8 = (void *)WebCore::currentEventSlot(void)::event;
  }
  else
  {
    v8 = 0;
    WebCore::currentEventSlot(void)::event = 0;
  }
  objc_msgSend(v8, "locationInWindow");
  objc_msgSend(v7, "convertPoint:fromView:", 0);
  result = objc_msgSend(v3, "hitTest:");
  if (result)
  {
    *(_BYTE *)(a1 + 792) = 1;
    {
      v9 = WebCore::currentEventSlot(void)::event;
    }
    else
    {
      v9 = 0;
      WebCore::currentEventSlot(void)::event = 0;
    }
    objc_msgSend((id)result, "scrollWheel:", v9);
    *(_BYTE *)(a1 + 792) = 0;
    return 1;
  }
  return result;
}

void sub_194EA4E74(_Unwind_Exception *exception_object, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x194EA4DB4);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::EventHandler::mouseDown(WebCore::EventHandler *this, WebEvent *a2)
{
  uint64_t v2;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FrameLoader *v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;
  const void *v11;
  WebEvent *v12;
  BOOL v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const void *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v20[24];
  int v21;
  _QWORD v22[13];
  WTF::StringImpl *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!*(_QWORD *)(v2 + 288) || *((_BYTE *)this + 792))
    return;
  v5 = (unsigned int *)(v2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(WebCore::FrameLoader **)(v2 + 280);
  ++*(_DWORD *)v7;
  WebCore::FrameLoader::resetMultipleFormSubmissionProtection(v7);
  if (!*(_DWORD *)v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194EA5070);
  }
  --*(_DWORD *)v7;
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E31FE290;
    v18[1] = v5;
    v22[0] = v18;
    WTF::ensureOnMainThread();
    v19 = v22[0];
    v22[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  *((_QWORD *)this + 98) = 0;
  {
    v10 = (const void *)WebCore::currentEventSlot(void)::event;
    if (!WebCore::currentEventSlot(void)::event
      || (CFRetain((CFTypeRef)WebCore::currentEventSlot(void)::event),
    {
      if (!a2)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v10 = 0;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (a2)
LABEL_13:
    CFRetain(a2);
LABEL_14:
  v11 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)a2;
  if (v11)
    CFRelease(v11);
  {
    v12 = (WebEvent *)WebCore::currentEventSlot(void)::event;
  }
  else
  {
    v12 = 0;
    WebCore::currentEventSlot(void)::event = 0;
  }
  WebCore::PlatformEventFactory::createPlatformMouseEvent(v12, (uint64_t)v22);
  WebCore::EventHandler::handleMousePressEvent((uint64_t)this, (uint64_t)v22, (uint64_t)v20);
  if (v21)
    v13 = 1;
  else
    v13 = v20[0] == 0;
  v14 = !v13;
  -[WebEvent setWasHandled:](a2, "setWasHandled:", v14);
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  {
    WebCore::currentEventSlot(void)::event = 0;
    if (!v10)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (v10)
LABEL_29:
    CFRetain(v10);
LABEL_30:
  v17 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)v10;
  if (v17)
    CFRelease(v17);
  if (v10)
    CFRelease(v10);
}

void sub_194EA50FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

void sub_194EA5130(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  NSException *v26;

  if (a2 == 1)
  {
    v26 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v26);
    objc_end_catch();
    JUMPOUT(0x194EA501CLL);
  }
  JUMPOUT(0x194EA5128);
}

void sub_194EA51E4()
{
  objc_end_catch();
  JUMPOUT(0x194EA5128);
}

void WebCore::EventHandler::mouseUp(WebCore::EventHandler *this, void *cf)
{
  const void *v4;
  const void *v5;
  WebEvent *v6;
  BOOL v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  _BYTE v12[24];
  int v13;
  _BYTE v14[104];
  WTF::StringImpl *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 288) || *((_BYTE *)this + 792))
    return;
  {
    v4 = (const void *)WebCore::currentEventSlot(void)::event;
    if (!WebCore::currentEventSlot(void)::event
      || (CFRetain((CFTypeRef)WebCore::currentEventSlot(void)::event),
    {
      if (!cf)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    v4 = 0;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (cf)
LABEL_7:
    CFRetain(cf);
LABEL_8:
  v5 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)cf;
  if (v5)
    CFRelease(v5);
  {
    v6 = (WebEvent *)WebCore::currentEventSlot(void)::event;
  }
  else
  {
    v6 = 0;
    WebCore::currentEventSlot(void)::event = 0;
  }
  WebCore::PlatformEventFactory::createPlatformMouseEvent(v6, (uint64_t)v14);
  WebCore::EventHandler::handleMouseReleaseEvent((uint64_t)this, (uint64_t)v14, (uint64_t)v12);
  if (v13)
    v7 = 1;
  else
    v7 = v12[0] == 0;
  v8 = !v7;
  objc_msgSend(cf, "setWasHandled:", v8);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  *((_QWORD *)this + 98) = 0;
  {
    WebCore::currentEventSlot(void)::event = 0;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v4)
LABEL_23:
    CFRetain(v4);
LABEL_24:
  v11 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)v4;
  if (v11)
    CFRelease(v11);
  if (v4)
    CFRelease(v4);
}

void sub_194EA5390(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_194EA53A4(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  NSException *v26;

  if (a2 == 1)
  {
    v26 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v26);
    objc_end_catch();
    JUMPOUT(0x194EA5314);
  }
  JUMPOUT(0x194EA539CLL);
}

void sub_194EA5458()
{
  objc_end_catch();
  JUMPOUT(0x194EA539CLL);
}

void WebCore::EventHandler::mouseMoved(WebCore::EventHandler *this, WebEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  WebEvent *v10;
  BOOL v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  const void *v24;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  int v28;
  _BYTE v29[104];
  WTF::StringImpl *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = *(_QWORD *)(v2 + 296);
  if (!v3 || !*(_QWORD *)(v2 + 288) || *((_BYTE *)this + 168) || *((_BYTE *)this + 792))
    return;
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v3);
  {
    v6 = (const void *)WebCore::currentEventSlot(void)::event;
    if (!WebCore::currentEventSlot(void)::event
      || (CFRetain((CFTypeRef)WebCore::currentEventSlot(void)::event),
    {
      if (!a2)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else
  {
    v6 = 0;
  }
  WebCore::currentEventSlot(void)::event = 0;
  if (a2)
LABEL_9:
    CFRetain(a2);
LABEL_10:
  v7 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)a2;
  if (v7)
    CFRelease(v7);
  v8 = WebCore::Document::contentChangeObserver((WebCore::Document *)v3);
  v9 = v8;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 680) + 704) & 0x200000000000) != 0)
  {
    *(_BYTE *)(v8 + 157) = 1;
    WebCore::ContentChangeObserver::adjustObservedState(v8, (void *)3);
  }
  {
    v10 = (WebEvent *)WebCore::currentEventSlot(void)::event;
  }
  else
  {
    v10 = 0;
    WebCore::currentEventSlot(void)::event = 0;
  }
  WebCore::PlatformEventFactory::createPlatformMouseEvent(v10, (uint64_t)v29);
  WebCore::EventHandler::mouseMoved((uint64_t)this, (uint64_t)v29, (uint64_t)&v27);
  if (v28)
    v11 = 1;
  else
    v11 = v27 == 0;
  v12 = !v11;
  -[WebEvent setWasHandled:](a2, "setWasHandled:", v12);
  v14 = v30;
  v30 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v3);
  v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v18 = &off_1E32DD608;
  v18[1] = v15;
  v27 = v18;
  WTF::callOnMainThread();
  v20 = v27;
  v27 = 0;
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  if (*(_BYTE *)(v9 + 157))
  {
    *(_BYTE *)(v9 + 155) = 0;
    *(_BYTE *)(v9 + 159) = 0;
    *(_BYTE *)(v9 + 157) = 0;
  }
  v21 = *(_QWORD *)(v9 + 128);
  *(_QWORD *)(v9 + 128) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v25 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v25));
      v26 = *(WTF **)(v21 + 16);
      if (v26)
      {
        *(_QWORD *)(v21 + 16) = 0;
        *(_DWORD *)(v21 + 24) = 0;
        WTF::fastFree(v26, v19);
      }
      WTF::fastFree((WTF *)v21, v19);
    }
  }
  {
    WebCore::currentEventSlot(void)::event = 0;
    if (!v6)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v6)
LABEL_36:
    CFRetain(v6);
LABEL_37:
  v24 = (const void *)WebCore::currentEventSlot(void)::event;
  WebCore::currentEventSlot(void)::event = (uint64_t)v6;
  if (v24)
    CFRelease(v24);
  if (v6)
    CFRelease(v6);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v19);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void sub_194EA575C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_194EA5770(void *exc_buf, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  uint64_t v26;
  int v27;
  NSException *v29;

  v27 = (int)a2;
  if (*(_DWORD *)(v26 + 24) == 2)
  {
    if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v26, a2);
  }
  else
  {
    *(_DWORD *)(v26 + 24) -= 2;
  }
  if (v27 == 1)
  {
    v29 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v29);
    objc_end_catch();
    JUMPOUT(0x194EA5680);
  }
  JUMPOUT(0x194EA5768);
}

void sub_194EA5970()
{
  objc_end_catch();
  JUMPOUT(0x194EA5768);
}

uint64_t WebCore::EventHandler::dispatchSyntheticMouseOut(WebCore *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(a1);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  return WebCore::EventHandler::updateMouseEventTargetNode((uint64_t)a1, (void *)(v6 + 1240), 0, a2, 1);
}

uint64_t WebCore::EventHandler::dispatchSyntheticMouseMove(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  return WebCore::EventHandler::mouseMoved(a1, a2, (uint64_t)&v3);
}

uint64_t WebCore::EventHandler::accessKeyModifiers(WebCore::EventHandler *this)
{
  if (WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled)
    return 2;
  else
    return 3;
}

void WebCore::EventHandler::startSelectionAutoscroll(WebCore::EventHandler *this, WebCore::RenderObject *a2, const WebCore::FloatPoint *a3)
{
  unint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::ScrollView *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v5 = (unint64_t *)((char *)this + 796);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(WebCore::ScrollView **)(v6 + 288);
  v10 = roundf(*(float *)a3);
  v11 = 0x7FFFFFFFLL;
  v12 = (int)v10;
  if (v10 <= -2147500000.0)
    v12 = 0x80000000;
  if (v10 < 2147500000.0)
    v11 = v12;
  v13 = roundf(*((float *)a3 + 1));
  v14 = 0x7FFFFFFF00000000;
  v15 = 0x8000000000000000;
  if (v13 > -2147500000.0)
    v15 = (unint64_t)(int)v13 << 32;
  if (v13 < 2147500000.0)
    v14 = v15;
  v23 = (_QWORD *)(v14 | v11);
  v16 = WebCore::ScrollView::contentsToRootView(v9, (const WebCore::IntPoint *)&v23);
  v17 = WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(*(WebCore::ScrollView **)(v6 + 288));
  v18 = (v16 - (v17 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v16 - v17);
  *v5 = v18;
  if (!*((_BYTE *)this + 794))
  {
    if (!*((_BYTE *)this + 812))
      *((_BYTE *)this + 812) = 1;
    v5[1] = v18;
  }
  *((_BYTE *)this + 794) = 1;
  WebCore::AutoscrollController::startAutoscrollForSelection(*((WebCore::AutoscrollController **)this + 18), a2);
  do
  {
    v19 = __ldaxr(v7);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v7));
  if (!v20)
  {
    atomic_store(1u, v7);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E31FE290;
    v21[1] = v7;
    v23 = v21;
    WTF::ensureOnMainThread();
    v22 = v23;
    v23 = 0;
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  }
}

void sub_194EA5B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF *WebCore::EventHandler::cancelSelectionAutoscroll(WebCore::EventHandler *this)
{
  *((_BYTE *)this + 794) = 0;
  if (*((_BYTE *)this + 812))
    *((_BYTE *)this + 812) = 0;
  return WebCore::AutoscrollController::stopAutoscrollTimer(*((WebCore::AutoscrollController **)this + 18), 0);
}

unint64_t WebCore::EventHandler::targetPositionInWindowForSelectionAutoscroll(WebCore::EventHandler *this)
{
  char *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::ScrollView *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  int v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v23;
  int v24;
  float v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[2];

  v2 = (char *)this + 796;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::ScrollView **)(v3 + 288);
  if (v6)
  {
    ++*((_DWORD *)v6 + 2);
    v7 = WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(v6);
    v8 = HIDWORD(v7);
    v41[0] = WebCore::ScrollView::unobscuredContentRect((uint64_t)v6, 0);
    v41[1] = v9;
    v10 = WebCore::ScrollView::contentsToRootView(v6, (const WebCore::IntRect *)v41);
    v12 = (float)v11;
    v14 = (float)v13;
    v15 = (float)-(int)v7 + (float)(int)v10;
    v16 = (float)-HIDWORD(v7) + (float)SHIDWORD(v10);
    v17 = *(_QWORD *)v2;
    v18 = HIDWORD(*(_QWORD *)v2);
    v19 = v15;
    v20 = v16;
    v21 = (float)v11;
    v22 = (float)v13;
    if (*((_BYTE *)this + 812))
    {
      v23 = v17 - *((_DWORD *)v2 + 2);
      v24 = v18 - *((_DWORD *)v2 + 3);
      v25 = (float)((float)(v15 + v12) - fminf((float)v23 + -37.5, 75.0)) - (float)(v15 + v12);
      v26 = v15 + fminf((float)(*((_DWORD *)v2 + 2) - v17) + -37.5, 75.0);
      if (v23 > 37)
      {
        v19 = (float)-(int)v7 + (float)(int)v10;
      }
      else
      {
        v25 = v15 - v26;
        v19 = v26;
      }
      v21 = fmaxf(v25 + v12, 0.0);
      if (v24 > 37)
      {
        v22 = fmaxf((float)((float)((float)(v16 + v14) - fminf((float)v24 + -37.5, 75.0)) - (float)(v16 + v14)) + v14, 0.0);
        v20 = (float)-HIDWORD(v7) + (float)SHIDWORD(v10);
      }
      else
      {
        v20 = v16 + fminf((float)(*((_DWORD *)v2 + 3) - v18) + -37.5, 75.0);
        v22 = fmaxf((float)(v16 - v20) + v14, 0.0);
      }
    }
    v29 = (float)(int)v17;
    if (v19 <= (float)(int)v17)
    {
      v31 = v19 + v21;
      if (v31 > v29 || (v32 = v29 - v31, v32 <= 0.0))
      {
LABEL_19:
        v33 = (float)(int)v18;
        if (v20 <= (float)(int)v18)
        {
          if ((float)(v20 + v22) > v33)
            goto LABEL_26;
          v35 = v33 - (float)(v20 + v22);
          if (v35 <= 0.0)
            goto LABEL_26;
          v16 = v16 + v14;
          v34 = v35 / 75.0;
        }
        else
        {
          if ((float)(v33 - v20) >= 0.0)
            goto LABEL_26;
          v34 = (float)(v33 - v20) / 75.0;
        }
        LODWORD(v18) = (int)(float)(v16 + (float)(v34 * 20.0));
LABEL_26:
        v27 = v17 + v7;
        v28 = (v18 + v8);
        if (*((_DWORD *)v6 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v6 + 8))(v6);
        else
          --*((_DWORD *)v6 + 2);
        goto LABEL_28;
      }
      v15 = v15 + v12;
      v30 = v32 / 75.0;
    }
    else
    {
      if ((float)(v29 - v19) >= 0.0)
        goto LABEL_19;
      v30 = (float)(v29 - v19) / 75.0;
    }
    LODWORD(v17) = (int)(float)(v15 + (float)(v30 * 20.0));
    goto LABEL_19;
  }
  v27 = 0;
  v28 = 0;
  do
  {
LABEL_28:
    v36 = __ldaxr(v4);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v4));
  if (!v37)
  {
    atomic_store(1u, v4);
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v39 = off_1E31FE290;
    v39[1] = v4;
    v41[0] = v39;
    WTF::ensureOnMainThread();
    v40 = v41[0];
    v41[0] = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  return v27 | (unint64_t)(v28 << 32);
}

void sub_194EA5EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::EventHandler::tryToBeginDragAtPoint(WebCore::EventHandler *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  _QWORD *v11;
  const WebCore::IntPoint *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  WTF::WallTime *v19;
  WTF::WallTime *v20;
  _QWORD *v21;
  int *v22;
  int v23;
  const WebCore::IntPoint *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WebCore::ScrollView *v28;
  unint64_t v29;
  int8x8_t v30;
  void *v31;
  const WebCore::IntPoint *v32;
  uint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned __int8 v55[32];
  uint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61[26];
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  char v67;
  __int16 v68;
  _DWORD v69[13];
  WTF::StringImpl *v70;
  uint64_t v71;
  __int16 v72;
  _QWORD *v73;
  __int16 v74;
  char v75;
  char v76;
  __int16 v77;
  uint64_t v78;
  WTF::WallTime *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int *v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v5 + 296);
  if (!v8)
  {
    v36 = 0;
    goto LABEL_49;
  }
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *((_BYTE *)this + 793);
  *((_BYTE *)this + 793) = 1;
  WebCore::Document::updateLayout(v8, 2u, 0);
  *(float *)&v10 = (float)*((int *)a2 + 1);
  v59 = (float)*(int *)a2;
  v60 = *(float *)&v10;
  *(_QWORD *)v61 = __PAIR64__(v10, LODWORD(v59));
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E32DD5E0;
  v11[1] = 0;
  v73 = v11;
  WebCore::LocalFrame::qualifyingNodeAtViewportLocation(v5, v61, &v59, (WebCore::IntPoint *)&v73, 1, 1);
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v13 = roundf(v59);
  v14 = 0x7FFFFFFFLL;
  v15 = 0x80000000;
  if (v13 > -2147500000.0)
    v15 = (int)v13;
  if (v13 < 2147500000.0)
    v14 = v15;
  v16 = roundf(v60);
  v17 = 0x7FFFFFFF00000000;
  v18 = 0x8000000000000000;
  if (v16 > -2147500000.0)
    v18 = (unint64_t)(int)v16 << 32;
  if (v16 < 2147500000.0)
    v17 = v18;
  v58 = v17 | v14;
  v19 = (WTF::WallTime *)WebCore::ScrollView::windowToContents(*(WebCore::ScrollView **)(v5 + 288), (const WebCore::IntPoint *)&v58, v12);
  v20 = (WTF::WallTime *)WTF::WallTime::now(v19);
  v73 = v21;
  v74 = 6;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = v58;
  v79 = v19;
  v81 = 0;
  v80 = 0;
  v82 = 0;
  v83 = 1;
  {
    v22 = (int *)WebCore::mousePointerEventType(void)::mouseType;
    if (!WebCore::mousePointerEventType(void)::mouseType)
      goto LABEL_16;
    v23 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
  }
  else
  {
    v22 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v23 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  *v22 = v23 + 2;
LABEL_16:
  v84 = v22;
  v85 = 1;
  v86 = 0;
  WTF::WallTime::now(v20);
  v64 = v25;
  v65 = 5;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  *(_QWORD *)v69 = v58;
  *(_QWORD *)&v69[2] = v19;
  *(_QWORD *)&v69[6] = 0;
  *(_QWORD *)&v69[4] = 0;
  *(_QWORD *)&v69[9] = 0;
  v69[11] = 1;
  {
    v26 = (WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
    if (!WebCore::mousePointerEventType(void)::mouseType)
      goto LABEL_20;
    v27 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
  }
  else
  {
    v26 = (WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v27 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  *(_DWORD *)v26 = v27 + 2;
LABEL_20:
  v70 = v26;
  v71 = 0;
  v72 = 0;
  v28 = *(WebCore::ScrollView **)(v5 + 288);
  if (v28)
    v29 = WebCore::ScrollView::windowToContents(v28, (const WebCore::IntPoint *)v69, v24);
  else
    v29 = *(_QWORD *)v69;
  *(_DWORD *)v55 = 258;
  v55[4] = 1;
  v30 = (int8x8_t)vcgt_s32((int32x2_t)v29, (int32x2_t)0xFE000000FE000000);
  v57 = vorr_s8((int8x8_t)(*(_QWORD *)&v30 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v29), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v29, 6uLL)), v30));
  WebCore::Document::prepareMouseEvent(v8, v55, (unint64_t *)&v57, (uint64_t)&v64, (uint64_t)v61);
  WebCore::EventHandler::subframeForHitTestResult((uint64_t)v61, v31, &v56);
  v33 = v56;
  if (v56)
  {
    v34 = *(unsigned __int8 *)(v56 + 144);
    v56 = 0;
    if (v34)
    {
      v51 = (unsigned int *)(v33 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (v52 == 1)
      {
        atomic_store(1u, v51);
        v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v53 = off_1E31FE290;
        v53[1] = v51;
        *(_QWORD *)v55 = v53;
        WTF::ensureOnMainThread();
        v54 = *(_QWORD *)v55;
        *(_QWORD *)v55 = 0;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      }
      v33 = 0;
    }
    else if ((WebCore::EventHandler::tryToBeginDragAtPoint(*(WebCore::EventHandler **)(v33 + 640), (const WebCore::IntPoint *)&v58, v32) & 1) != 0)
    {
      v36 = 1;
      goto LABEL_35;
    }
  }
  else
  {
    v56 = 0;
  }
  if (WebCore::EventHandler::eventMayStartDrag(this, (uint64_t)&v73))
  {
    WebCore::EventHandler::handleMousePressEvent((uint64_t)this, (uint64_t)&v73, (uint64_t)v55);
    if (*((_BYTE *)this + 704))
      v36 = WebCore::EventHandler::handleMouseDraggedEvent((uint64_t)this, v61, (const WebCore::IntPoint *)1);
    else
      v36 = 0;
    *((_BYTE *)this + 180) = 0;
    *((_BYTE *)this + 168) = 0;
  }
  else
  {
    v36 = 0;
  }
  if (v33)
  {
LABEL_35:
    v37 = (unsigned int *)(v33 + 8);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v49 = off_1E31FE290;
      v49[1] = v37;
      *(_QWORD *)v55 = v49;
      WTF::ensureOnMainThread();
      v50 = *(_QWORD *)v55;
      *(_QWORD *)v55 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v63, v35);
  v41 = v62;
  v62 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v70;
  v70 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (WTF::StringImpl *)v84;
  v84 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v40);
    else
      *(_DWORD *)v43 -= 2;
  }
  *((_BYTE *)this + 793) = v9;
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v40);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  do
  {
LABEL_49:
    v44 = __ldaxr(v6);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, v6));
  if (!v45)
  {
    atomic_store(1u, v6);
    v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v47 = off_1E31FE290;
    v47[1] = v6;
    *(_QWORD *)v61 = v47;
    WTF::ensureOnMainThread();
    v48 = *(_QWORD *)v61;
    *(_QWORD *)v61 = 0;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  return v36;
}

void sub_194EA64F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::nodeRespondingToClickEvents(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3, WebCore::SecurityOrigin *a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E32DD5E0;
  v8[1] = a4;
  v11 = v8;
  v9 = WebCore::LocalFrame::qualifyingNodeAtViewportLocation((uint64_t)this, (float *)a2, (float *)a3, (WebCore::IntPoint *)&v11, 1, 1);
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return v9;
}

void sub_194EA6748(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::LocalFrame::initWithSimpleHTMLDocument(WebCore::FrameLoader **this, WTF::StringImpl **a2, const WTF::URL *a3)
{
  uint64_t v6;
  WebCore::LocalDOMWindow *v7;
  const WTF::StringImpl *v8;
  _DWORD *v9;
  void *v10;
  WebCore::Document *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  char v32;
  WebCore::Document *v33;
  uint64_t v34;

  WebCore::FrameLoader::initForSynthesizedDocument(this[35], a3);
  WebCore::HTMLDocument::createSynthesizedDocument((WebCore::HTMLDocument *)this, a3, (unint64_t *)&v34);
  v6 = v34;
  WebCore::Document::setCompatibilityMode(v34, (void *)4);
  v7 = (WebCore::LocalDOMWindow *)bmalloc::api::isoAllocate();
  WebCore::LocalDOMWindow::LocalDOMWindow(v7, (WebCore::Document *)v6);
  v9 = *(_DWORD **)(v6 + 696);
  *(_QWORD *)(v6 + 696) = v7;
  if (v9)
  {
    if (v9[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 72))(v9);
    else
      --v9[6];
  }
  *(_DWORD *)(v6 + 24) += 2;
  v33 = (WebCore::Document *)v6;
  WebCore::LocalFrame::setDocument((uint64_t)this, &v33, v8);
  v11 = v33;
  v33 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v12 = bmalloc::api::isoAllocate();
  v13 = v12;
  *(_OWORD *)(v12 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v12 + 24) = 0x101C00000002;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v6 + 96;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  v14 = WebCore::HTMLNames::htmlTag;
  if (WebCore::HTMLNames::htmlTag)
    ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
  *(_QWORD *)(v12 + 96) = v14;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)v12 = off_1E33BF070;
  v15 = bmalloc::api::isoAllocate();
  v16 = v15;
  *(_OWORD *)(v15 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v15 + 24) = 0x101C00000002;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = v6 + 96;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  v17 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v15 + 96) = v17;
  *(_QWORD *)(v15 + 104) = 0;
  *(_QWORD *)v15 = off_1E33B5118;
  if (*a2)
  {
    if (*((_DWORD *)*a2 + 1))
    {
      WebCore::Element::setAttribute((WebCore::Element *)v15, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, a2, 0, &v30, (__n128)0);
      if (v32)
      {
        v23 = v31;
        v31 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v22);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
    }
  }
  WebCore::ContainerNode::appendChild(v13, (WebCore::Node *)v16, (uint64_t)v27);
  if (v29)
  {
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  result = (unsigned int *)WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v13, (uint64_t)v24);
  if (v26)
  {
    result = (unsigned int *)v25;
    v25 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v16, v21);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v13, v21);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v21);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

void sub_194EA6A74(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v3 - 64);
  *(_QWORD *)(v3 - 64) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

__n128 WebCore::LocalFrame::setViewportArguments(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 366) = *(_QWORD *)(a2 + 46);
  *(_OWORD *)(a1 + 336) = v3;
  *(_OWORD *)(a1 + 352) = v4;
  *(__n128 *)(a1 + 320) = result;
  return result;
}

void *WebCore::LocalFrame::wordsInCurrentParagraph(WebCore::LocalFrame *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  WebCore::Page *v5;
  uint64_t v6;
  WebCore::Page *v7;
  void *v8;
  WebCore::VisiblePosition *v10;
  uint64_t v11;
  WebCore::Page *v12;
  int v13;
  const WebCore::VisiblePosition *v14;
  char v15;
  WebCore::Node *v16;
  char *v17;
  uint64_t (*v18)();
  void *v19;
  BOOL v20;
  WebCore::Node *v21;
  unint64_t v22;
  uint64_t i;
  unsigned __int16 v24;
  void *v25;
  char v26;
  uint64_t v27;
  char v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  void *v32;
  WebCore::Node *v33;
  WTF::StringImpl *v34;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v52;
  CFTypeRef v53;
  unint64_t v54;
  void *v55;
  uint64_t (*v56)();
  _BOOL4 v57;
  uint64_t v58;
  uint64_t (*v59)();
  BOOL v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unsigned __int16 v64;
  int v65;
  char v66;
  WebCore::Node *v67;
  WTF *v68;
  WTF::StringImpl *v69;
  WebCore::Node *v70;
  uint64_t v71;
  WebCore::Node *v72;
  WebCore::Node *v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  void *v76;
  WebCore::Node *v77;
  CFTypeRef cf;
  uint64_t v79;
  uint64_t v80;
  WebCore::Node *v81;
  int v82;
  char v83;
  char v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  char v91;
  WebCore::Node *v92;
  uint64_t v93;
  WebCore::Node *v94;
  int v95;
  char v96;
  uint64_t v97[3];
  WebCore::Node *v98;
  int v99;
  char v100;
  char v101;
  WebCore::Node *v102;
  int v103;
  char v104;
  char v105;
  const void *v106;
  uint64_t v107;
  _QWORD v108[3];

  v2 = *((_QWORD *)this + 37);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 0, 0);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 3);
  if (!v4)
    return 0;
  v5 = *(WebCore::Page **)(v4 + 8);
  if (!v5 || *(_BYTE *)(WebCore::Page::selection(v5) + 97) != 1)
    return 0;
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = *(WebCore::Page **)(v6 + 8);
  else
    v7 = 0;
  v10 = (WebCore::VisiblePosition *)(WebCore::Page::selection(v7) + 64);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    v12 = *(WebCore::Page **)(v11 + 8);
  else
    v12 = 0;
  v13 = *(unsigned __int8 *)(WebCore::Page::selection(v12) + 96);
  WebCore::VisiblePosition::canonicalPosition(v10, (uint64_t)&v102);
  v15 = 1;
  v105 = 1;
  if (!v13)
  {
    v75 = v102;
    if (!v102)
    {
      v15 = 1;
      goto LABEL_220;
    }
    *((_DWORD *)v102 + 6) += 2;
    v81 = v75;
    v82 = v103;
    v83 = v104;
    v84 = 0;
    if (!WebCore::inSameLine((WebCore *)&v102, (const WebCore::VisiblePosition *)&v81, v14))
      v105 = 0;
    v77 = v81;
    v81 = 0;
    if (v77)
    {
      if (*((_DWORD *)v77 + 6) == 2)
      {
        if ((*((_WORD *)v77 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v77, v76);
      }
      else
      {
        *((_DWORD *)v77 + 6) -= 2;
      }
    }
    v15 = v105;
  }
  v16 = v102;
  if (v102)
  {
    *((_DWORD *)v102 + 6) += 2;
    v98 = v16;
    v17 = (char *)&v99;
    v99 = v103;
    v100 = v104;
    v101 = v15;
    v18 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    goto LABEL_20;
  }
LABEL_220:
  v18 = 0;
  v98 = 0;
  v17 = (char *)&v99;
  v99 = v103;
  v100 = v104;
  v101 = v15;
LABEL_20:
  if (v18)
  {
    WebCore::startOfParagraph((uint64_t)&v98, 1, &v81);
    v20 = WebCore::operator==((uint64_t *)&v98, (uint64_t *)&v81);
    v21 = v81;
    v81 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v19);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    if (v20)
      goto LABEL_47;
  }
  WebCore::previousVisuallyDistinctCandidate(&v98, (uint64_t)&v106);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)&v106))
  {
    v92 = 0;
    v93 = 0;
    v94 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v106, (uint64_t)&v81);
    v92 = v81;
    LODWORD(v93) = v82;
    BYTE4(v93) = v83;
  }
  LOBYTE(v94) = 1;
  i = (uint64_t)v106;
  v106 = 0;
  if (i)
  {
    if (*(_DWORD *)(i + 24) == 2)
      goto LABEL_145;
    *(_DWORD *)(i + 24) -= 2;
  }
  while (1)
  {
    v24 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v92);
    v26 = v24;
    v27 = v24;
    if (v24 <= 0x7Fu)
    {
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x2000) != 0)
        goto LABEL_44;
    }
    else if (__maskrune(v24, 0x2000uLL))
    {
      goto LABEL_44;
    }
    if (v27 > 0xFF)
    {
      v28 = MEMORY[0x19AEA858C](v27) == 9;
    }
    else
    {
      v28 = (v27 < 0x21) & (0x100003600uLL >> v26);
      if ((_DWORD)v27 == 11)
        v28 = 1;
    }
    if ((_DWORD)v27 == 160 || (v28 & 1) != 0)
      goto LABEL_44;
    WebCore::startOfWord((uint64_t)&v98, 0, (uint64_t)&v81);
    v29 = v81;
    v81 = 0;
    v30 = v98;
    v98 = v29;
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v30, v25);
          v74 = v81;
          *(_DWORD *)v17 = v82;
          v17[4] = v83;
          v101 = v84;
          v81 = 0;
          if (v74)
          {
            if (*((_DWORD *)v74 + 6) == 2)
            {
              if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v74, v25);
            }
            else
            {
              *((_DWORD *)v74 + 6) -= 2;
            }
          }
          goto LABEL_44;
        }
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    *(_DWORD *)v17 = v82;
    v17[4] = v83;
    v101 = v84;
LABEL_44:
    v31 = v92;
    v92 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v25);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
LABEL_47:
    WebCore::startOfParagraph((uint64_t)&v98, 1, v97);
    WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>(v97, (uint64_t)&v98, (uint64_t)&v92);
    if (!v96)
    {
      v8 = 0;
      goto LABEL_177;
    }
    v33 = v92;
    if (v92 == v94 && (_DWORD)v93 == v95)
    {
      v8 = 0;
      goto LABEL_171;
    }
    i = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (v96)
      break;
LABEL_144:
    __break(1u);
LABEL_145:
    if ((*(_WORD *)(i + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)i, (void *)v22);
  }
  v8 = (void *)i;
  WebCore::TextIterator::TextIterator((uint64_t)&v81, &v92, 0);
  LOWORD(v88) = 0;
  v89 = 0u;
  v90 = 0u;
  v91 = 1;
  for (i = WebCore::WordAwareIterator::advance((WebCore::WordAwareIterator *)&v81, v34);
        v91 || v85 != 0;
        i = WebCore::WordAwareIterator::advance((WebCore::WordAwareIterator *)&v81, (WTF::StringImpl *)v22))
  {
    v22 = HIDWORD(v90);
    if (HIDWORD(v90))
    {
      v36 = 0;
      v37 = 0;
      v17 = (char *)v90;
    }
    else
    {
      i = (uint64_t)WebCore::TextIteratorCopyableText::text(&v88);
      if (v38)
      {
        i = (uint64_t)WebCore::TextIteratorCopyableText::text(&v88);
        v17 = (char *)i;
        v36 = v22 & 0xFFFFFFFF00000000;
        v37 = v22 & 0xFFFFFF0000000000;
      }
      else
      {
        v17 = v86;
        v22 = v87;
        v36 = v87 & 0xFFFFFFFF00000000;
        v37 = v87 & 0xFFFFFF0000000000;
      }
    }
    v39 = v36 & 0xFF00000000;
    v40 = v22;
    v41 = v37 | v36 & 0xFF00000000 | v22;
    if ((int)v22 >= 2)
    {
      v42 = 0;
      v43 = 1;
      while (1)
      {
        if (v39)
        {
          i = v17[v43];
        }
        else
        {
          i = *(unsigned __int16 *)&v17[2 * v43];
          if (i > 0xFF)
          {
            i = MEMORY[0x19AEA858C]();
            if ((_DWORD)i == 9)
              goto LABEL_78;
LABEL_68:
            v44 = *(unsigned __int16 *)&v17[2 * v43];
            goto LABEL_94;
          }
        }
        if (i <= 0x20u && ((1 << i) & 0x100003600) != 0 || (_DWORD)i == 11)
          goto LABEL_78;
        if (!v39)
          goto LABEL_68;
        v44 = v17[v43];
LABEL_94:
        if (v44 != 160)
        {
          ++v43;
          goto LABEL_90;
        }
LABEL_78:
        LODWORD(v47) = v43 - v42;
        if ((int)(v43 - v42) >= 1)
        {
          if (v42 >= v40)
          {
            v47 = 0x100000000;
            v49 = "";
          }
          else if (v40 - v42 <= v47)
          {
            v49 = v17;
            v47 = v41;
            if (v42)
            {
              LODWORD(v47) = v40 - v42;
              goto LABEL_81;
            }
          }
          else
          {
LABEL_81:
            v47 = v47;
            v48 = v40 - v42;
            if (v39)
            {
              if (v48 < v47)
                goto LABEL_144;
              v49 = &v17[v42];
              v47 = v47 | 0x100000000;
            }
            else
            {
              if (v48 < v47)
                goto LABEL_144;
              v49 = &v17[2 * v42];
            }
          }
          v106 = v49;
          v107 = v47;
          WTF::StringView::createNSString((WTF::StringView *)&v106);
          objc_msgSend(v8, "addObject:", cf);
          i = (uint64_t)cf;
          cf = 0;
          if (i)
            CFRelease((CFTypeRef)i);
        }
        v42 = ++v43;
LABEL_90:
        if (v43 == v40)
          goto LABEL_113;
      }
    }
    if (v39)
    {
      if (!(_DWORD)v22)
        goto LABEL_144;
      i = *v17;
LABEL_105:
      if (i <= 0x20u && ((1 << i) & 0x100003600) != 0 || (_DWORD)i == 11)
        continue;
      goto LABEL_112;
    }
    if (!(_DWORD)v22)
      goto LABEL_144;
    i = *(unsigned __int16 *)v17;
    if (i <= 0xFF)
      goto LABEL_105;
    i = MEMORY[0x19AEA858C]();
    if ((_DWORD)i == 9)
      continue;
LABEL_112:
    v42 = 0;
LABEL_113:
    if ((int)v40 > (int)v42)
    {
      v52 = v40 - v42;
      if (v40 <= v42)
      {
        v41 = 0x100000000;
        v17 = "";
      }
      else if (v42)
      {
        v54 = v40 - v42;
        if (v39)
        {
          if (v54 < v52)
            goto LABEL_144;
          v17 += v42;
          v41 = v52 | 0x100000000;
        }
        else
        {
          if (v54 < v52)
            goto LABEL_144;
          v17 += 2 * v42;
          v41 = v40 - v42;
        }
      }
      v106 = v17;
      v107 = v41;
      WTF::StringView::createNSString((WTF::StringView *)&v106);
      objc_msgSend(v8, "addObject:", cf);
      v53 = cf;
      cf = 0;
      if (v53)
        CFRelease(v53);
    }
  }
  if (objc_msgSend(v8, "count"))
  {
    v56 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (!v102)
      v56 = 0;
    if (v56)
    {
      WebCore::endOfParagraph((WebCore::Node *)&v102, 1, &v106);
      v57 = WebCore::operator==((uint64_t *)&v102, (uint64_t *)&v106);
      v58 = (uint64_t)v106;
      v106 = 0;
      if (v58)
      {
        if (*(_DWORD *)(v58 + 24) == 2)
        {
          if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v58, v55);
        }
        else
        {
          *(_DWORD *)(v58 + 24) -= 2;
        }
      }
      if (v57)
      {
        v59 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        if (!v102)
          v59 = 0;
        if (!v59)
          goto LABEL_140;
        WebCore::startOfParagraph((uint64_t)&v102, 1, &v106);
        v60 = WebCore::operator==((uint64_t *)&v102, (uint64_t *)&v106);
        v61 = (uint64_t)v106;
        v106 = 0;
        if (v61)
        {
          if (*(_DWORD *)(v61 + 24) == 2)
          {
            if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v61, v55);
          }
          else
          {
            *(_DWORD *)(v61 + 24) -= 2;
          }
        }
        if (!v60)
        {
LABEL_140:
          WebCore::previousVisuallyDistinctCandidate(&v102, (uint64_t)v108);
          if (WebCore::Position::atStartOfTree((WebCore::Position *)v108))
          {
            cf = 0;
            v79 = 0;
            v80 = 0;
          }
          else
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v108, (uint64_t)&v106);
            cf = v106;
            LODWORD(v79) = v107;
            BYTE4(v79) = BYTE4(v107);
          }
          LOBYTE(v80) = 1;
          v63 = v108[0];
          v108[0] = 0;
          if (v63)
          {
            if (*(_DWORD *)(v63 + 24) == 2)
            {
              if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v63, v62);
            }
            else
            {
              *(_DWORD *)(v63 + 24) -= 2;
            }
          }
          v64 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&cf);
          v65 = v64;
          if (v64 > 0xFFu)
          {
            if (MEMORY[0x19AEA858C](v64) != 9)
              goto LABEL_159;
          }
          else
          {
            v66 = (v64 < 0x21u) & (0x100003600uLL >> v64);
            if (v64 == 11)
              v66 = 1;
            if ((v66 & 1) == 0)
            {
LABEL_159:
              if (v65 != 160)
                objc_msgSend(v8, "removeLastObject");
            }
          }
          v67 = (WebCore::Node *)cf;
          cf = 0;
          if (v67)
          {
            if (*((_DWORD *)v67 + 6) == 2)
            {
              if ((*((_WORD *)v67 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v67, v55);
            }
            else
            {
              *((_DWORD *)v67 + 6) -= 2;
            }
          }
        }
      }
    }
  }
  v68 = (WTF *)v90;
  if ((_QWORD)v90)
  {
    *(_QWORD *)&v90 = 0;
    DWORD2(v90) = 0;
    WTF::fastFree(v68, v55);
  }
  v69 = (WTF::StringImpl *)v89;
  *(_QWORD *)&v89 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v55);
    else
      *(_DWORD *)v69 -= 2;
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v81, v55);
  if (v96)
  {
    v33 = v94;
LABEL_171:
    v94 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v33, v32);
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
    }
    v70 = v92;
    v92 = 0;
    if (v70)
    {
      if (*((_DWORD *)v70 + 6) == 2)
      {
        if ((*((_WORD *)v70 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v70, v32);
      }
      else
      {
        *((_DWORD *)v70 + 6) -= 2;
      }
    }
  }
LABEL_177:
  v71 = v97[0];
  v97[0] = 0;
  if (v71)
  {
    if (*(_DWORD *)(v71 + 24) == 2)
    {
      if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v71, v32);
    }
    else
    {
      *(_DWORD *)(v71 + 24) -= 2;
    }
  }
  v72 = v98;
  v98 = 0;
  if (v72)
  {
    if (*((_DWORD *)v72 + 6) == 2)
    {
      if ((*((_WORD *)v72 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v72, v32);
    }
    else
    {
      *((_DWORD *)v72 + 6) -= 2;
    }
  }
  v73 = v102;
  v102 = 0;
  if (v73)
  {
    if (*((_DWORD *)v73 + 6) == 2)
    {
      if ((*((_WORD *)v73 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v73, v32);
    }
    else
    {
      *((_DWORD *)v73 + 6) -= 2;
    }
  }
  return v8;
}

void sub_194EA7584(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *cf, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF::StringImpl *a46,uint64_t a47,WTF *a48,int a49)
{
  uint64_t v49;
  WTF *v51;
  WTF::StringImpl *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if (cf)
  {
    if (*((_DWORD *)cf + 6) == 2)
    {
      if ((*((_WORD *)cf + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(cf, a2);
    }
    else
    {
      *((_DWORD *)cf + 6) -= 2;
    }
  }
  v51 = a48;
  if (a48)
  {
    a48 = 0;
    a49 = 0;
    WTF::fastFree(v51, a2);
  }
  v52 = a46;
  a46 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v52 -= 2;
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&a13, a2);
  if (*(_BYTE *)(v49 - 208))
  {
    v54 = *(_QWORD *)(v49 - 224);
    *(_QWORD *)(v49 - 224) = 0;
    if (v54)
    {
      if (*(_DWORD *)(v54 + 24) == 2)
      {
        if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v54, v53);
      }
      else
      {
        *(_DWORD *)(v54 + 24) -= 2;
      }
    }
    v55 = *(_QWORD *)(v49 - 240);
    *(_QWORD *)(v49 - 240) = 0;
    if (v55)
    {
      if (*(_DWORD *)(v55 + 24) == 2)
      {
        if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v55, v53);
      }
      else
      {
        *(_DWORD *)(v55 + 24) -= 2;
      }
    }
  }
  v56 = *(_QWORD *)(v49 - 200);
  *(_QWORD *)(v49 - 200) = 0;
  if (v56)
  {
    if (*(_DWORD *)(v56 + 24) == 2)
    {
      if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v56, v53);
    }
    else
    {
      *(_DWORD *)(v56 + 24) -= 2;
    }
  }
  v57 = *(_QWORD *)(v49 - 176);
  *(_QWORD *)(v49 - 176) = 0;
  if (v57)
  {
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, v53);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
  v58 = *(_QWORD *)(v49 - 152);
  *(_QWORD *)(v49 - 152) = 0;
  if (v58)
  {
    if (*(_DWORD *)(v58 + 24) == 2)
    {
      if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v58, v53);
    }
    else
    {
      *(_DWORD *)(v58 + 24) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

double WebCore::LocalFrame::renderRectForPoint(WebCore::LocalFrame *this, CGPoint a2, BOOL *a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  CGFloat y;
  int32x2_t v10;
  int8x8_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v18;
  _QWORD *i;
  uint64_t v20;
  int8x8_t v21;
  void *v22;
  _BYTE v23[72];
  uint64_t v24;

  *a3 = 0;
  *a4 = 0.0;
  v4 = *((_QWORD *)this + 37);
  if (!v4)
    return *MEMORY[0x1E0C9D648];
  v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v5 || (*(_BYTE *)(v5 + 45) & 4) == 0 || !*(_QWORD *)(v5 + 144))
    return *MEMORY[0x1E0C9D648];
  v8 = *((_QWORD *)this + 80);
  y = a2.y;
  v10 = vcvt_s32_f32(vrnda_f32(vcvt_f32_f64((float64x2_t)a2)));
  v11 = (int8x8_t)vcgt_s32(v10, (int32x2_t)0xFE000000FE000000);
  v21 = vorr_s8((int8x8_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v10), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v10, 6uLL)), v11));
  WebCore::EventHandler::hitTestResultAtPoint(v8, (int *)&v21, 0x903u, (uint64_t)v23);
  if (v24)
  {
    v13 = *(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
        if ((*(_BYTE *)(v13 + 45) & 1) == 0
          && (*(_WORD *)(v14 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          break;
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 1272) == v14)
          break;
        if ((*(_BYTE *)(v13 + 45) & 0x40) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 160))(v13) & 1) != 0
          || (*(_BYTE *)(v13 + 20) & 2) != 0)
        {
          *a3 = (*(_BYTE *)(v13 + 20) & 2) != 0;
          v18 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v13, 1, 0);
          v21 = (int8x8_t)v18;
          v22 = v12;
          for (i = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248); i; i = *(_QWORD **)(v20 + 8))
          {
            if (i == *((_QWORD **)this + 36))
              break;
            v18 = (*(uint64_t (**)(_QWORD *, int8x8_t *))(*i + 184))(i, &v21);
            v21 = (int8x8_t)v18;
            v22 = v12;
            v20 = i[4];
            if (!v20)
              break;
          }
          v16 = (double)(int)v18;
          goto LABEL_17;
        }
        v15 = *(_QWORD *)(v13 + 32);
        if (v15)
        {
          v13 = *(_QWORD *)(v15 + 8);
          if (v13)
            continue;
        }
        break;
      }
    }
  }
  v16 = *MEMORY[0x1E0C9D648];
LABEL_17:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v23, v12);
  return v16;
}

void sub_194EA7988(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::hitTestResultAtViewportLocation(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::HitTestResult *a3, WebCore::IntPoint *a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t result;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int32x2_t v18;
  uint64_t v19;
  int8x8_t v20;
  void *v21;
  int8x8_t v22;
  _QWORD v23[17];

  v6 = *((_QWORD *)this + 37);
  if (!v6 || !*(_QWORD *)(v6 + 1944))
    return 0;
  result = *((_QWORD *)this + 36);
  if (result)
  {
    v11 = roundf(a5);
    v12 = 0x7FFFFFFFLL;
    v13 = 0x80000000;
    if (v11 > -2147500000.0)
      v13 = (int)v11;
    if (v11 < 2147500000.0)
      v12 = v13;
    v14 = roundf(a6);
    v15 = 0x7FFFFFFF00000000;
    v16 = 0x8000000000000000;
    if (v14 > -2147500000.0)
      v16 = (unint64_t)(int)v14 << 32;
    if (v14 < 2147500000.0)
      v15 = v16;
    v23[0] = v15 | v12;
    v17 = WebCore::ScrollView::windowToContents((WebCore::ScrollView *)result, (const WebCore::IntPoint *)v23, a3);
    *(_QWORD *)a3 = v17;
    v18 = (int32x2_t)v17;
    v19 = *((_QWORD *)this + 80);
    v20 = (int8x8_t)vcgt_s32(v18, (int32x2_t)0xFE000000FE000000);
    v22 = vorr_s8((int8x8_t)(*(_QWORD *)&v20 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v18), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v18, 6uLL)), v20));
    WebCore::EventHandler::hitTestResultAtPoint(v19, (int *)&v22, 0x1103u, (uint64_t)v23);
    WebCore::HitTestResult::operator=((uint64_t)a2, (uint64_t)v23);
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v23, v21);
    return 1;
  }
  return result;
}

void sub_194EA7ABC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::qualifyingNodeAtViewportLocation(uint64_t a1, float *a2, float *a3, WebCore::IntPoint *a4, char a5, int a6)
{
  float *v8;
  unint64_t v9;
  int32x2_t v10;
  uint64_t hasEditableStyle;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  const WebCore::IntPoint *v20;
  int v21;
  char v22;
  char v23;
  float v24;
  float v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  float32x2_t *v77;
  int32x2_t v78;
  int v79;
  unsigned int v80;
  int32x2_t v81;
  uint64_t v82;
  int8x8_t v83;
  uint64_t v84;
  void *v85;
  BOOL v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t j;
  float *v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  float v104;
  int32x2_t v105;
  unint64_t v108;
  _OWORD v109[4];
  __int16 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  int8x8_t v117;
  _BYTE v118[136];
  unint64_t v119;
  uint64_t v120;

  v8 = a3;
  *(_QWORD *)a3 = *(_QWORD *)a2;
  v116 = 0;
  memset(v109, 0, sizeof(v109));
  v110 = 256;
  v115 = 0;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0;
  if ((WebCore::LocalFrame::hitTestResultAtViewportLocation((WebCore::LocalFrame *)a1, (const WebCore::FloatPoint *)v109, (WebCore::HitTestResult *)&v116, a4, *a2, a2[1]) & 1) == 0)goto LABEL_181;
  v10 = (int32x2_t)v116;
  v108 = v116;
  hasEditableStyle = (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD, _QWORD))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, v109, 0, 0);
  v12 = hasEditableStyle;
  if (a6)
  {
    if (hasEditableStyle)
    {
      hasEditableStyle = WebCore::Node::computeEditability(hasEditableStyle, 1, 0);
      if ((_DWORD)hasEditableStyle)
      {
        v13 = 0;
        v14 = v12;
        do
        {
          hasEditableStyle = WebCore::Node::hasEditableStyle(v14, 0);
          if (!(_DWORD)hasEditableStyle)
            break;
          if ((*(_WORD *)(v14 + 28) & 8) != 0)
            v13 = v14;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 1272);
          if (i)
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
              {
                if ((*(_WORD *)(i + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              i = 0;
            }
          }
          if (i == v14)
            break;
          v14 = *(_QWORD *)(v14 + 32);
        }
        while (v14);
        if (v13)
          a5 = 0;
        v12 = v13;
      }
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = 1.0;
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
      v17 = *(float *)(v18 + 356);
  }
  v19 = HIDWORD(*(_QWORD *)&v10);
  v21 = (int)(float)((float)(WebCore::screenPPIFactor((WebCore *)hasEditableStyle) * 15.0) / v17);
  v22 = a5 ^ 1;
  if (v12)
    v23 = a5 ^ 1;
  else
    v23 = 1;
  if ((v23 & 1) != 0)
  {
    v99 = v8;
    v100 = a6;
    if (v12)
      v22 = 1;
    if ((v22 & 1) == 0)
    {
      v61 = v111;
      if (!(_QWORD)v111)
      {
        v62 = 0;
        goto LABEL_132;
      }
      v62 = v111;
      while (1)
      {
        v63 = *(_WORD *)(v62 + 28);
        if ((v63 & 8) != 0)
          goto LABEL_132;
        v65 = (uint64_t *)(v62 + 32);
        v64 = *(_QWORD *)(v62 + 32);
        if (v64)
        {
          if ((*(_WORD *)(v64 + 28) & 8) != 0)
          {
            v66 = *(_QWORD *)(v64 + 72) & 0xFFFFFFFFFFFFLL;
            if (v66)
            {
              v68 = *(_QWORD *)(v66 + 88);
              if (v68)
              {
                v69 = *(_QWORD *)(v68 + 224);
                if (v69)
                {
                  v67 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v62);
                  if (v67)
                    goto LABEL_122;
                  v63 = *(_WORD *)(v62 + 28);
                }
              }
            }
          }
        }
        if ((v63 & 0x80) != 0)
        {
          v70 = *(_QWORD *)(v62 + 200);
          if (!v70)
          {
LABEL_131:
            v62 = v61;
LABEL_132:
            v103 = 0;
            v71 = 0;
            v72 = 0;
            v12 = 0;
            v73 = 0;
            v74 = v10.i32[0] - v21;
            v75 = v19 - v21;
            v104 = (float)v21;
            v76 = -2;
            v101 = v19 - v21 + 2 * v21;
            v102 = (v74 + 2 * v21);
            v77 = (float32x2_t *)&qword_1968C0E60;
LABEL_133:
            v78 = vcvt_s32_f32(vmul_n_f32(*v77, v104));
            v79 = v78.i32[0];
            v80 = v78.u32[1];
            if (v78.i32[0] < 0)
              v79 = -v78.i32[0];
            if (v78.i32[1] < 0)
              v80 = -v78.i32[1];
            if (v79 <= v80)
              v79 = v80;
            if (v79 > v73)
            {
              v73 = v79;
              if (v12)
              {
                a6 = v100;
                v8 = v99;
                goto LABEL_199;
              }
            }
            v81 = vadd_s32((int32x2_t)v116, v78);
            v82 = *(_QWORD *)(a1 + 640);
            v119 = 0;
            v120 = 0;
            v83 = (int8x8_t)vcgt_s32(v81, (int32x2_t)0xFE000000FE000000);
            v105 = v81;
            v117 = vorr_s8((int8x8_t)(*(_QWORD *)&v83 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v81), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v81, 6uLL)), v83));
            WebCore::EventHandler::hitTestResultAtPoint(v82, (int *)&v117, 0x1103u, (uint64_t)v118);
            v84 = (*(uint64_t (**)(_QWORD, _BYTE *, uint64_t, unint64_t *))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, v118, v62, &v119);
            WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v118, v85);
            if (v84)
              v86 = v84 == v12;
            else
              v86 = 1;
            if (!v86 && (*(_WORD *)(v84 + 28) & 0xF000) != 0x9000)
            {
              if (v12)
              {
                if (v74 <= v72)
                  v87 = v72;
                else
                  v87 = v74;
                if (v75 <= v71)
                  v88 = v71;
                else
                  v88 = v75;
                v89 = v72 + v103;
                if (v72 + v103 >= (int)v102)
                  v89 = v102;
                v90 = v71 + HIDWORD(v102);
                if (v71 + HIDWORD(v102) >= v101)
                  v90 = v101;
                if (v87 >= v89 || v88 >= v90)
                {
                  v87 = 0;
                  v88 = 0;
                  v89 = 0;
                  v90 = 0;
                }
                if (v74 <= (int)v119)
                  v91 = v119;
                else
                  v91 = v74;
                if (v75 <= SHIDWORD(v119))
                  v92 = HIDWORD(v119);
                else
                  v92 = v75;
                v93 = v120 + v119;
                v20 = (const WebCore::IntPoint *)v101;
                if ((int)v120 + (int)v119 >= (int)v102)
                  v93 = v102;
                LODWORD(v9) = HIDWORD(v120) + HIDWORD(v119);
                if (HIDWORD(v120) + HIDWORD(v119) >= v101)
                  v9 = v101;
                else
                  v9 = v9;
                if (v91 >= v93 || v92 >= (int)v9)
                {
                  v91 = 0;
                  v92 = 0;
                  v93 = 0;
                  v9 = 0;
                }
                if (((int)v9 - v92) * (v93 - v91) > (v90 - v88) * (v89 - v87))
                {
                  HIDWORD(v102) = HIDWORD(v120);
                  v103 = v120;
                  v71 = HIDWORD(v119);
                  v72 = v119;
                  goto LABEL_175;
                }
              }
              else
              {
                v72 = v119;
                v71 = HIDWORD(v119);
                HIDWORD(v102) = HIDWORD(v120);
                v103 = v120;
LABEL_175:
                v108 = ((unint64_t)v105.u32[1] << 32) | v105.u32[0];
                v12 = v84;
              }
            }
            v76 += 2;
            ++v77;
            if (v76 >= 0x16)
              break;
            goto LABEL_133;
          }
          v65 = (uint64_t *)(v70 + 8);
        }
        v67 = *v65;
LABEL_122:
        v62 = v67;
        if (!v67)
          goto LABEL_131;
      }
    }
    a6 = v100;
    v8 = v99;
    if (v12)
      goto LABEL_199;
LABEL_181:
    v94 = 0;
    goto LABEL_219;
  }
  v24 = (float)v21;
  v25 = (float)v21 * -0.3;
  v26 = (int)v25 + v10.i32[0];
  v27 = ((int)v25 + v10.i32[1]);
  v28 = *(_QWORD *)(a1 + 640);
  v29 = v26 << 6;
  if (v26 < -33554432)
    v29 = 0x80000000;
  if (v26 > 0x1FFFFFF)
    v29 = 0x7FFFFFFF;
  v30 = (_DWORD)v27 << 6;
  if ((int)v27 < -33554432)
    v30 = 0x80000000;
  if ((int)v27 > 0x1FFFFFF)
    v30 = 0x7FFFFFFF;
  v119 = __PAIR64__(v30, v29);
  WebCore::EventHandler::hitTestResultAtPoint(v28, (int *)&v119, 0x903u, (uint64_t)v118);
  v31 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, v118, 0, 0);
  v33 = v31;
  if (v31)
  {
    v34 = *(_WORD *)(v12 + 28);
    if ((v34 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v31 + 40) == v12
        && (*(_WORD *)(v31 + 28) & 0xF000) != 0x9000
        && (*(_BYTE *)(v31 + 22) & 8) != 0)
      {
        goto LABEL_110;
      }
    }
    else if ((v34 & 4) != 0
           && *(_QWORD *)(v12 + 80)
           && ((*(unsigned __int8 *)(v31 + 22) ^ *(unsigned __int8 *)(v12 + 22)) & 8) == 0)
    {
      v35 = v31;
      do
        v35 = *(_QWORD *)(v35 + 32);
      while (v35 != v12 && v35 != 0);
      if (v35)
        goto LABEL_110;
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v118, v32);
  v37 = (int)(float)(v24 * -0.6);
  v26 = v37 + v10.i32[0];
  v27 = (v37 + v10.i32[1]);
  v38 = *(_QWORD *)(a1 + 640);
  v39 = (v37 + v10.i32[0]) << 6;
  if (v26 < -33554432)
    v39 = 0x80000000;
  if (v26 > 0x1FFFFFF)
    v39 = 0x7FFFFFFF;
  v40 = (_DWORD)v27 << 6;
  if ((int)v27 < -33554432)
    v40 = 0x80000000;
  if ((int)v27 > 0x1FFFFFF)
    v40 = 0x7FFFFFFF;
  v119 = __PAIR64__(v40, v39);
  WebCore::EventHandler::hitTestResultAtPoint(v38, (int *)&v119, 0x903u, (uint64_t)v118);
  v41 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, v118, 0, 0);
  v33 = v41;
  if (v41)
  {
    v42 = *(_WORD *)(v12 + 28);
    if ((v42 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v41 + 40) == v12
        && (*(_WORD *)(v41 + 28) & 0xF000) != 0x9000
        && (*(_BYTE *)(v41 + 22) & 8) != 0)
      {
        goto LABEL_110;
      }
    }
    else if ((v42 & 4) != 0
           && *(_QWORD *)(v12 + 80)
           && ((*(unsigned __int8 *)(v41 + 22) ^ *(unsigned __int8 *)(v12 + 22)) & 8) == 0)
    {
      v43 = v41;
      do
        v43 = *(_QWORD *)(v43 + 32);
      while (v43 != v12 && v43 != 0);
      if (v43)
        goto LABEL_110;
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v118, v32);
  v45 = (int)(float)(v24 * 0.3);
  v26 = v45 + v10.i32[0];
  v27 = (v45 + v10.i32[1]);
  v46 = *(_QWORD *)(a1 + 640);
  v47 = (v45 + v10.i32[0]) << 6;
  if (v26 < -33554432)
    v47 = 0x80000000;
  if (v26 > 0x1FFFFFF)
    v47 = 0x7FFFFFFF;
  v48 = (_DWORD)v27 << 6;
  if ((int)v27 < -33554432)
    v48 = 0x80000000;
  if ((int)v27 > 0x1FFFFFF)
    v48 = 0x7FFFFFFF;
  v119 = __PAIR64__(v48, v47);
  WebCore::EventHandler::hitTestResultAtPoint(v46, (int *)&v119, 0x903u, (uint64_t)v118);
  v49 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, v118, 0, 0);
  v33 = v49;
  if (v49)
  {
    v50 = *(_WORD *)(v12 + 28);
    if ((v50 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v49 + 40) == v12
        && (*(_WORD *)(v49 + 28) & 0xF000) != 0x9000
        && (*(_BYTE *)(v49 + 22) & 8) != 0)
      {
        goto LABEL_110;
      }
    }
    else if ((v50 & 4) != 0
           && *(_QWORD *)(v12 + 80)
           && ((*(unsigned __int8 *)(v49 + 22) ^ *(unsigned __int8 *)(v12 + 22)) & 8) == 0)
    {
      v51 = v49;
      do
        v51 = *(_QWORD *)(v51 + 32);
      while (v51 != v12 && v51 != 0);
      if (v51)
        goto LABEL_110;
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v118, v32);
  v53 = (int)(float)(v24 * -0.9);
  v26 = v53 + v10.i32[0];
  v27 = (v53 + v10.i32[1]);
  v54 = *(_QWORD *)(a1 + 640);
  v55 = (v53 + v10.i32[0]) << 6;
  if (v26 < -33554432)
    v55 = 0x80000000;
  if (v26 > 0x1FFFFFF)
    v55 = 0x7FFFFFFF;
  v56 = (_DWORD)v27 << 6;
  if ((int)v27 < -33554432)
    v56 = 0x80000000;
  if ((int)v27 > 0x1FFFFFF)
    v56 = 0x7FFFFFFF;
  v119 = __PAIR64__(v56, v55);
  WebCore::EventHandler::hitTestResultAtPoint(v54, (int *)&v119, 0x903u, (uint64_t)v118);
  v57 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, v118, 0, 0);
  v33 = v57;
  if (!v57)
    goto LABEL_198;
  v58 = *(_WORD *)(v12 + 28);
  if ((v58 & 0xF000) != 0x9000)
  {
    if ((v58 & 4) != 0
      && *(_QWORD *)(v12 + 80)
      && ((*(unsigned __int8 *)(v57 + 22) ^ *(unsigned __int8 *)(v12 + 22)) & 8) == 0)
    {
      v59 = v57;
      do
        v59 = *(_QWORD *)(v59 + 32);
      while (v59 != v12 && v59 != 0);
      if (v59)
        goto LABEL_110;
    }
LABEL_198:
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v118, v32);
    goto LABEL_199;
  }
  if (**(_QWORD **)(v57 + 40) != v12 || (*(_WORD *)(v57 + 28) & 0xF000) == 0x9000 || (*(_BYTE *)(v57 + 22) & 8) == 0)
    goto LABEL_198;
LABEL_110:
  v108 = v26 | (unint64_t)(v27 << 32);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v118, v32);
  v12 = v33;
LABEL_199:
  v95 = WebCore::ScrollView::contentsToWindow(*(WebCore::ScrollView **)(a1 + 288), (const WebCore::IntPoint *)&v108, v20);
  *v8 = (float)(int)v95;
  v8[1] = (float)SHIDWORD(v95);
  if (!a6 || !WebCore::Node::computeEditability(v12, 1, 0))
  {
    v94 = v12;
    goto LABEL_219;
  }
  if (!v12)
    goto LABEL_181;
  v94 = 0;
  v96 = v12;
  do
  {
    if (!WebCore::Node::hasEditableStyle(v96, 0))
      break;
    if ((*(_WORD *)(v96 + 28) & 8) != 0)
      v94 = v96;
    j = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 1272);
    if (j)
    {
      if ((*(_WORD *)(j + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
        {
          if ((*(_WORD *)(j + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        j = 0;
      }
    }
    if (j == v96)
      break;
    v96 = *(_QWORD *)(v96 + 32);
  }
  while (v96);
LABEL_219:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v109, (void *)v9);
  return v94;
}

void sub_194EA8504(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::deepestNodeAtLocation(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, uint64_t a3, WebCore::IntPoint *a4)
{
  void *v4;
  uint64_t v5;
  _OWORD v7[4];
  __int16 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  _BYTE v14[8];

  memset(v7, 0, sizeof(v7));
  v8 = 256;
  v13 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  if (WebCore::LocalFrame::hitTestResultAtViewportLocation(this, (const WebCore::FloatPoint *)v7, (WebCore::HitTestResult *)v14, a4, *(float *)a2, *((float *)a2 + 1)))v5 = v9;
  else
    v5 = 0;
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v7, v4);
  return v5;
}

void sub_194EA85AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::approximateNodeAtViewportLocationLegacy(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E32DD630;
  v9 = v6;
  v7 = WebCore::LocalFrame::qualifyingNodeAtViewportLocation((uint64_t)this, (float *)a2, (float *)a3, (WebCore::IntPoint *)&v9, 1, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v7;
}

void sub_194EA8644(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E32DD658;
  v9 = v6;
  v7 = WebCore::LocalFrame::qualifyingNodeAtViewportLocation((uint64_t)this, (float *)a2, (float *)a3, (WebCore::IntPoint *)&v9, 1, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v7;
}

void sub_194EA86E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::nodeRespondingToInteraction(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E32DD5E0;
  v6[1] = 0;
  v9 = v6;
  v7 = WebCore::LocalFrame::qualifyingNodeAtViewportLocation((uint64_t)this, (float *)a2, (float *)a3, (WebCore::IntPoint *)&v9, 1, 0);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return v7;
}

void sub_194EA8784(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::nodeRespondingToScrollWheelEvents(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  float v8;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E32DD680;
  v7 = v4;
  v5 = WebCore::LocalFrame::qualifyingNodeAtViewportLocation((uint64_t)this, (float *)a2, &v8, (WebCore::IntPoint *)&v7, 0, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v5;
}

void sub_194EA8820(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::preferredHeight(WebCore::LocalFrame *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t result;

  v1 = *((_QWORD *)this + 37);
  if (!v1)
    return 0;
  *(_DWORD *)(v1 + 24) += 2;
  WebCore::Document::updateLayout(v1, 0, 0);
  v3 = *(_QWORD *)(v1 + 1272);
  if (!v3)
    goto LABEL_17;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0)
    goto LABEL_17;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_17;
  v4 = *(_QWORD *)(v3 + 80);
  if (!v4)
    goto LABEL_17;
  while ((*(_WORD *)(v4 + 28) & 0x10) == 0)
  {
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      goto LABEL_17;
  }
  v5 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
  if (v6 != v5)
  {
LABEL_10:
    if (v6 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    {
      while (1)
      {
        v4 = *(_QWORD *)(v4 + 56);
        if (!v4)
          break;
        if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
          if (v6 != v5)
            goto LABEL_10;
          goto LABEL_14;
        }
      }
LABEL_17:
      v7 = 0;
LABEL_25:
      if (*(_DWORD *)(v1 + 24) == 2)
      {
        if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
      }
      else
      {
        *(_DWORD *)(v1 + 24) -= 2;
      }
      return v7;
    }
  }
LABEL_14:
  v7 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_25;
  v8 = *(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D);
  if ((v8 & 2) == 0)
  {
    if ((v8 & 0x40) != 0)
    {
      v9 = *(_DWORD *)(v7 + 164);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1080))(v7);
      if (__OFADD__(v9, v10))
        v11 = (v9 >> 31) + 0x7FFFFFFF;
      else
        v11 = v9 + v10;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1088))(v7);
      v13 = v11 + v12;
      if (__OFADD__(v11, v12))
        v13 = (v11 >> 31) + 0x7FFFFFFF;
      v7 = (v13 / 64);
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void sub_194EA89E4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::LocalFrame::updateLayout(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  void *v3;

  v1 = *((_QWORD *)this + 37);
  if (v1)
  {
    v2 = this;
    *(_DWORD *)(v1 + 24) += 2;
    WebCore::Document::updateLayout(v1, 0, 0);
    this = (unsigned int *)*((_QWORD *)v2 + 36);
    if (this)
      this = (unsigned int *)WebCore::LocalFrameView::adjustViewSize((WebCore::LocalFrameView *)this);
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return this;
}

void sub_194EA8A90(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

double WebCore::LocalFrame::caretRect(WebCore::LocalFrame *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  WebCore::RenderBlock **v12;
  uint64_t v13;
  BOOL *v14;
  void *v15;
  int v16;
  WebCore::Node *v17;
  WebCore::Node *v19[2];
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;
  _QWORD v41[2];
  VisiblePosition v42;

  v4 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v21 = v5;
  v22 = *(_DWORD *)(v4 + 64);
  v23 = *(_BYTE *)(v4 + 68);
  v6 = *(_QWORD *)(v4 + 72);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v24 = v6;
  v25 = *(_DWORD *)(v4 + 80);
  v26 = *(_BYTE *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 88);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v27 = v7;
  v28 = *(_DWORD *)(v4 + 96);
  v29 = *(_BYTE *)(v4 + 100);
  v8 = *(_QWORD *)(v4 + 104);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v30 = v8;
  v31 = *(_DWORD *)(v4 + 112);
  v32 = *(_BYTE *)(v4 + 116);
  v9 = *(_QWORD *)(v4 + 120);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v33 = v9;
  v34 = *(_DWORD *)(v4 + 128);
  v35 = *(_BYTE *)(v4 + 132);
  v10 = *(_QWORD *)(v4 + 136);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v36 = v10;
  v37 = *(_DWORD *)(v4 + 144);
  v38 = *(_BYTE *)(v4 + 148);
  v39 = *(_WORD *)(v4 + 152);
  v40 = *(_BYTE *)(v4 + 154);
  if (HIBYTE(v39) == 1)
  {
    v11 = (double)(int)WebCore::FrameSelection::absoluteCaretBounds((WebCore::FrameSelection *)v4, 0, a3, a4);
  }
  else if (HIBYTE(v39))
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v36, (uint64_t)v19);
    v20 = 1;
    v42.var0.var0.var0 = 0;
    v41[0] = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)v19, &v42, v12);
    v41[1] = v13;
    v16 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v42.var0.var0.var0, (WebCore::RenderBlock *)v41, 0, v14);
    v17 = v19[0];
    v19[0] = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v15);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    v11 = (double)v16;
  }
  else
  {
    v11 = *MEMORY[0x1E0C9D648];
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v21);
  return v11;
}

double WebCore::LocalFrame::rectForScrollToVisible(WebCore::LocalFrame *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  int v13;
  const WebCore::VisiblePosition *v14;
  uint64_t v15;
  BOOL *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const WebCore::VisiblePosition *v20;
  uint64_t v21;
  BOOL *v22;
  int v23;
  void *v24;
  int v25;
  int v26;
  Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v30;
  void *v31;
  WebCore::Node *v32;
  Node *var0;
  void *v34;
  WebCore::Node *v35;
  VisiblePosition v36;
  WebCore::Node *v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  __int16 v59;
  char v60;
  WebCore::Node *v61;
  uint64_t v62;
  char v63;
  VisiblePosition v64;

  v4 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v41 = v5;
  v42 = *(_DWORD *)(v4 + 64);
  v43 = *(_BYTE *)(v4 + 68);
  v6 = *(_QWORD *)(v4 + 72);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v44 = v6;
  v45 = *(_DWORD *)(v4 + 80);
  v46 = *(_BYTE *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 88);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v47 = v7;
  v48 = *(_DWORD *)(v4 + 96);
  v49 = *(_BYTE *)(v4 + 100);
  v8 = *(_QWORD *)(v4 + 104);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v50 = v8;
  v51 = *(_DWORD *)(v4 + 112);
  v52 = *(_BYTE *)(v4 + 116);
  v9 = *(_QWORD *)(v4 + 120);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v53 = v9;
  v54 = *(_DWORD *)(v4 + 128);
  v55 = *(_BYTE *)(v4 + 132);
  v10 = *(_QWORD *)(v4 + 136);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v56 = v10;
  v57 = *(_DWORD *)(v4 + 144);
  v58 = *(_BYTE *)(v4 + 148);
  v59 = *(_WORD *)(v4 + 152);
  v60 = *(_BYTE *)(v4 + 154);
  v11 = HIBYTE(v59);
  if (HIBYTE(v59) == 1)
  {
    v12 = WebCore::LocalFrame::caretRect(this, a2, a3, a4);
  }
  else if (HIBYTE(v59))
  {
    v13 = v59;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v53, (uint64_t)&v37);
    v40 = 1;
    if (v11 != 2 && !v13)
    {
      v30 = v37;
      if (v37)
      {
        *((_DWORD *)v37 + 6) += 2;
        v61 = v30;
        LODWORD(v62) = v38;
        BYTE4(v62) = v39;
        v63 = 0;
        if (!WebCore::inSameLine((WebCore *)&v37, (const WebCore::VisiblePosition *)&v61, v14))
          v40 = 0;
        v32 = v61;
        v61 = 0;
        if (v32)
        {
          if (*((_DWORD *)v32 + 6) == 2)
          {
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v32, v31);
          }
          else
          {
            *((_DWORD *)v32 + 6) -= 2;
          }
        }
      }
    }
    v36.var0.var0.var0 = 0;
    v61 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v37, &v36, (WebCore::RenderBlock **)v14);
    v62 = v15;
    v17 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v36.var0.var0.var0, (WebCore::RenderBlock *)&v61, 0, v16);
    v19 = v18;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v56, (uint64_t)&v36);
    v36.var1 = 1;
    if (v11 == 2 || !v13)
    {
      var0 = v36.var0.var0.var0;
      if (v36.var0.var0.var0)
      {
        *((_DWORD *)v36.var0.var0.var0 + 6) += 2;
        v61 = (WebCore::Node *)var0;
        LODWORD(v62) = v36.var0.var1;
        BYTE4(v62) = *((_BYTE *)&v36.var0 + 12);
        v63 = 0;
        if (!WebCore::inSameLine((WebCore *)&v36, (const WebCore::VisiblePosition *)&v61, v20))
          v36.var1 = 0;
        v35 = v61;
        v61 = 0;
        if (v35)
        {
          if (*((_DWORD *)v35 + 6) == 2)
          {
            if ((*((_WORD *)v35 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v35, v34);
          }
          else
          {
            *((_DWORD *)v35 + 6) -= 2;
          }
        }
      }
    }
    v64.var0.var0.var0 = 0;
    v61 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v36, &v64, (WebCore::RenderBlock **)v20);
    v62 = v21;
    v23 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v64.var0.var0.var0, (WebCore::RenderBlock *)&v61, 0, v22);
    if ((int)v24 < 1 || SHIDWORD(v24) < 1)
    {
      v25 = v17;
    }
    else
    {
      v25 = v23;
      if ((int)v19 >= 1 && SHIDWORD(v19) >= 1)
      {
        if (v23 >= v17)
          v26 = v17;
        else
          v26 = v23;
        v25 = v26;
      }
    }
    v27 = v36.var0.var0.var0;
    v36.var0.var0.var0 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v27, v24);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28, v24);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    v12 = (double)v25;
  }
  else
  {
    v12 = *MEMORY[0x1E0C9D648];
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v41);
  return v12;
}

WTF::RunLoop *WebCore::LocalFrame::setTimersPaused(WTF::RunLoop *this, int a2)
{
  uint64_t v2;
  WebCore::Page *v3;
  WTF::ThreadGroup ***v5;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return this;
  v3 = *(WebCore::Page **)(v2 + 8);
  if (!v3)
    return this;
  v5 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v5 = (WTF::ThreadGroup ***)v9;
    WebCore::g_commonVMOrNull = v9;
    if (__ldaxr((unsigned int *)(v9 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v9 + 1096)))
    {
LABEL_8:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v9 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(*v5[73]);
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
      goto LABEL_11;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v9 + 192));
    goto LABEL_8;
  }
LABEL_11:
  MEMORY[0x19AEA3294](&v9, v5);
  if (a2)
    WebCore::Page::suspendActiveDOMObjectsAndAnimations((uint64_t)v3, v7, v8);
  else
    WebCore::Page::resumeActiveDOMObjectsAndAnimations(v3);
  return (WTF::RunLoop *)MEMORY[0x19AEA32A0](&v9);
}

uint64_t WebCore::LocalFrame::dispatchPageHideEventBeforePause(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(this + 128) + 8) == this)
  {
    v1 = this;
    v2 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E32DD6A8;
    v3 = v2;
    WebCore::Page::forEachDocumentFromMainFrame(v1, &v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

uint64_t WebCore::LocalFrame::dispatchPageShowEventBeforeResume(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(this + 128) + 8) == this)
  {
    v1 = this;
    v2 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E32DD6D0;
    v3 = v2;
    WebCore::Page::forEachDocumentFromMainFrame(v1, &v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

uint64_t *WebCore::LocalFrame::setRangedSelectionBaseToCurrentSelection(WebCore::LocalFrame *this)
{
  return WebCore::VisibleSelection::operator=((uint64_t *)this + 48, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 56));
}

void WebCore::LocalFrame::setRangedSelectionBaseToCurrentSelectionStart(WebCore::LocalFrame *this)
{
  uint64_t v2[13];

  WebCore::VisibleSelection::VisibleSelection((uint64_t)v2, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 120), (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 120), *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 152), 0);
  WebCore::VisibleSelection::operator=((uint64_t *)this + 48, v2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v2);
}

void sub_194EA932C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  _Unwind_Resume(a1);
}

void WebCore::LocalFrame::setRangedSelectionBaseToCurrentSelectionEnd(WebCore::LocalFrame *this)
{
  uint64_t v2[13];

  WebCore::VisibleSelection::VisibleSelection((uint64_t)v2, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 136), (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 136), *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 152), 0);
  WebCore::VisibleSelection::operator=((uint64_t *)this + 48, v2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v2);
}

void sub_194EA9398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::rangedSelectionBase@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(this + 384);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(this + 392);
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(this + 396);
  v3 = *(_QWORD *)(this + 400);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(this + 408);
  *(_BYTE *)(a2 + 28) = *(_BYTE *)(this + 412);
  v4 = *(_QWORD *)(this + 416);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  *(_QWORD *)(a2 + 32) = v4;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(this + 424);
  *(_BYTE *)(a2 + 44) = *(_BYTE *)(this + 428);
  v5 = *(_QWORD *)(this + 432);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)(a2 + 48) = v5;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(this + 440);
  *(_BYTE *)(a2 + 60) = *(_BYTE *)(this + 444);
  v6 = *(_QWORD *)(this + 448);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  *(_QWORD *)(a2 + 64) = v6;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(this + 456);
  *(_BYTE *)(a2 + 76) = *(_BYTE *)(this + 460);
  v7 = *(_QWORD *)(this + 464);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  *(_QWORD *)(a2 + 80) = v7;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(this + 472);
  *(_BYTE *)(a2 + 92) = *(_BYTE *)(this + 476);
  *(_WORD *)(a2 + 96) = *(_WORD *)(this + 480);
  *(_BYTE *)(a2 + 98) = *(_BYTE *)(this + 482);
  return this;
}

void WebCore::LocalFrame::clearRangedSelectionInitialExtent(WebCore::LocalFrame *this)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  __int16 v19;
  char v20;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v20 = 1;
  WebCore::VisibleSelection::operator=((uint64_t *)this + 61, &v1);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1);
}

void sub_194EA9538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  _Unwind_Resume(a1);
}

void WebCore::LocalFrame::setRangedSelectionInitialExtentToCurrentSelectionStart(WebCore::LocalFrame *this)
{
  uint64_t v2[13];

  WebCore::VisibleSelection::VisibleSelection((uint64_t)v2, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 120), (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 120), *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 152), 0);
  WebCore::VisibleSelection::operator=((uint64_t *)this + 61, v2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v2);
}

void sub_194EA95A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  _Unwind_Resume(a1);
}

void WebCore::LocalFrame::setRangedSelectionInitialExtentToCurrentSelectionEnd(WebCore::LocalFrame *this)
{
  uint64_t v2[13];

  WebCore::VisibleSelection::VisibleSelection((uint64_t)v2, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 136), (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 136), *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 152), 0);
  WebCore::VisibleSelection::operator=((uint64_t *)this + 61, v2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v2);
}

void sub_194EA9610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalFrame::rangedSelectionInitialExtent@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(this + 488);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(this + 496);
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(this + 500);
  v3 = *(_QWORD *)(this + 504);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(this + 512);
  *(_BYTE *)(a2 + 28) = *(_BYTE *)(this + 516);
  v4 = *(_QWORD *)(this + 520);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  *(_QWORD *)(a2 + 32) = v4;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(this + 528);
  *(_BYTE *)(a2 + 44) = *(_BYTE *)(this + 532);
  v5 = *(_QWORD *)(this + 536);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)(a2 + 48) = v5;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(this + 544);
  *(_BYTE *)(a2 + 60) = *(_BYTE *)(this + 548);
  v6 = *(_QWORD *)(this + 552);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  *(_QWORD *)(a2 + 64) = v6;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(this + 560);
  *(_BYTE *)(a2 + 76) = *(_BYTE *)(this + 564);
  v7 = *(_QWORD *)(this + 568);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  *(_QWORD *)(a2 + 80) = v7;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(this + 576);
  *(_BYTE *)(a2 + 92) = *(_BYTE *)(this + 580);
  *(_WORD *)(a2 + 96) = *(_WORD *)(this + 584);
  *(_BYTE *)(a2 + 98) = *(_BYTE *)(this + 586);
  return this;
}

uint64_t WebCore::LocalFrame::recursiveSetUpdateAppearanceEnabled(uint64_t this, _BOOL4 a2)
{
  __int16 v2;
  uint64_t v3;
  BOOL v4;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 296) + 3064) + 256) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 296)
                                                                                           + 3064)
                                                                               + 256) & 0xFEFF | v2;
  v3 = *(_QWORD *)(this + 88);
  if (v3)
  {
    v4 = a2;
    do
    {
      if (!*(_BYTE *)(v3 + 144))
        this = WebCore::LocalFrame::recursiveSetUpdateAppearanceEnabled((WebCore::LocalFrame *)v3, v4);
      v3 = *(_QWORD *)(v3 + 72);
    }
    while (v3);
  }
  return this;
}

CFTypeRef WebCore::LocalFrame::interpretationsForCurrentRoot(WebCore::LocalFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Document *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  const __CFString *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  WebCore::Node *v41;
  unsigned int v42;
  WebCore::Node *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::Node *v47;
  void *v48;
  WTF::StringImpl *v49;
  char *v50;
  int8x16_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  _WORD *v62;
  _WORD *v63;
  __int16 v64;
  uint64_t v65;
  __int128 v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  char *v70;
  char *v71;
  char *v72;
  WebCore::Node *v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  _WORD *v91;
  _WORD *v92;
  __int16 v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  _WORD *v105;
  __int16 v106;
  uint64_t v107;
  int8x16_t v108;
  int8x16_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int8x16_t v114;
  int8x16_t v115;
  char *v116;
  char *v117;
  char *v118;
  WebCore::Node *v119;
  int v120;
  WTF *v121;
  WebCore::Node *v122;
  WTF::StringImpl *v123;
  WebCore::Node *v124;
  WebCore::Node *v125;
  WTF *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  WTF *v130;
  uint64_t v131;
  int v132;
  void *v133;
  WTF::StringImpl *v134;
  int v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  _OWORD *v141;
  unint64_t v142;
  WebCore::Node *v143;
  void *v144;
  char *v145;
  const void *v146;
  uint64_t v147;
  char *v148;
  WTF *v149;
  unsigned int **v150;
  unsigned int **v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  WTF *v155;
  int *v156;
  uint64_t v157;
  __int128 v159;
  __int128 v160;
  WTF *v162;
  WebCore::Node *v163;
  unsigned int v164;
  WTF *v165;
  unsigned int v166;
  char *v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  int v174;
  WebCore::Node *v175;
  int v176;
  char v177;
  WebCore::Node *v178;
  int v179;
  WebCore::Node *v180;
  int v181;
  WTF *v182;
  int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  WebCore::Node *v187;
  int v188;
  WebCore::Node *v189;
  int v190;
  WebCore::Node **v191;
  int v192;
  char v193;
  uint64_t *v194;
  uint64_t v195;
  WebCore::Node *v196;
  int v197;
  int *v198;
  int v199;
  _QWORD v200[3];
  int8x16x2_t v201;
  int8x16x2_t v202;
  int8x16x2_t v203;
  int8x16x2_t v204;
  int8x16x2_t v205;
  int8x16x2_t v206;
  int8x16x2_t v207;
  int8x16x2_t v208;
  int8x16x2_t v209;
  int8x16x2_t v210;
  int8x16x2_t v211;

  v200[1] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 37);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 3064);
  if (*(_BYTE *)(v2 + 153))
  {
    v3 = WebCore::editableRootForPosition(v2 + 120, 0);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 1272);
    if (v8
      && (*(_WORD *)(v8 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v3 = *(_QWORD *)(v8 + 80);
      if (v3)
      {
        while ((*(_WORD *)(v3 + 28) & 0x10) == 0)
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            goto LABEL_4;
        }
        v9 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
        if (v10 != v9)
        {
LABEL_20:
          if (v10 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
          {
            while (1)
            {
              v3 = *(_QWORD *)(v3 + 56);
              if (!v3)
                break;
              if ((*(_WORD *)(v3 + 28) & 0x10) != 0)
              {
                v10 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
                if (v10 != v9)
                  goto LABEL_20;
                break;
              }
            }
          }
        }
      }
    }
    else
    {
      v3 = 0;
    }
  }
LABEL_4:
  *(_DWORD *)(v3 + 24) += 4;
  v4 = *(_WORD *)(v3 + 28);
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v3 + 80);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 4);
  }
  else if ((v4 & 4) != 0 && (v5 = *(_QWORD *)(v3 + 80)) != 0)
  {
    LODWORD(v6) = 0;
    do
    {
      LODWORD(v6) = v6 + 1;
      v5 = *(_QWORD *)(v5 + 56);
    }
    while (v5);
  }
  else
  {
    LODWORD(v6) = 0;
  }
  v196 = (WebCore::Node *)v3;
  v197 = 0;
  v198 = (int *)v3;
  v199 = v6;
  v11 = (WebCore::Document *)*((_QWORD *)this + 37);
  v12 = *((_QWORD *)v11 + 187);
  if (!v12)
    v12 = WebCore::Document::ensureMarkers(v11);
  v194 = 0;
  v195 = 0;
  v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = off_1E33A3BE8;
  *((_QWORD *)v13 + 1) = &v194;
  v173 = v13;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(v12, (uint64_t *)&v196, 2048, &v173);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  if (!HIDWORD(v195))
  {
    WebCore::plainText(&v196, 0, 0, (const WTF::String *)&v173);
    if (v173)
      v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
LABEL_319:
      v20 = &stru_1E3487BC0;
    v200[0] = v20;
    v7 = (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v200, 1, v159, v160);
    v22 = v173;
    v173 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    goto LABEL_273;
  }
  v14 = v194;
  v15 = 8 * HIDWORD(v195);
  v16 = 1;
  do
  {
    v17 = *v14;
    if (*v14)
      v17 = *(_QWORD *)(v17 + 8);
    if (*(_DWORD *)(v17 + 96) != 2)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_318:
      __break(1u);
      goto LABEL_319;
    }
    v16 += v16 * *(unsigned int *)(v17 + 44);
    ++v14;
    v15 -= 8;
  }
  while (v15);
  if (v16)
  {
    v18 = 16;
    if (v16 > 0x10)
      v18 = v16;
    if (v18 >> 28)
    {
      __break(0xC471u);
LABEL_326:
      JUMPOUT(0x194EAA778);
    }
    v19 = (char *)WTF::fastMalloc((WTF *)(16 * v18));
    bzero(v19, 16 * v16);
  }
  else
  {
    v19 = 0;
  }
  *(_DWORD *)(v3 + 24) += 2;
  v191 = (WebCore::Node **)v3;
  v192 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 208))(v3) & 1) != 0)
    v23 = 8;
  else
    v23 = 9;
  v193 = v193 & 0xF0 | v23;
  v24 = v196;
  *((_DWORD *)v196 + 6) += 2;
  v187 = v24;
  v188 = v197;
  v25 = (WebCore::Node *)v198;
  v198[6] += 2;
  v189 = v25;
  v190 = v199;
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v185, (const WebCore::SimpleRange *)&v187);
  v170 = v16;
  v171 = v16;
  v167 = &v19[16 * v16];
  v28 = v185;
  v169 = v19;
  if (v185)
  {
    v159 = v27;
    v160 = 0u;
    v166 = 1;
    while (1)
    {
      v29 = *(_QWORD *)(*((_QWORD *)this + 37) + 1496);
      if (!v29)
        v29 = WebCore::Document::ensureMarkers(*((WebCore::Document **)this + 37));
      WebCore::DocumentMarkerController::markersFor(v29, v28, 2048, (uint64_t)&v182);
      v31 = v182;
      if (v184)
        break;
LABEL_224:
      if (v31)
      {
        v182 = 0;
        v183 = 0;
        WTF::fastFree(v31, v30);
      }
      WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v185);
      v28 = v185;
      if (!v185)
        goto LABEL_227;
    }
    v162 = (WTF *)((char *)v182 + 8 * v184);
    v163 = (WebCore::Node *)v28;
    v32 = v192;
    LOBYTE(v33) = v193;
    while (2)
    {
      v34 = *(unsigned int **)v31;
      if (*(_QWORD *)v31)
        v35 = *((_QWORD *)v34 + 1);
      else
        v35 = 0;
      v168 = v35;
      if (*(_DWORD *)(v35 + 96) == 2)
      {
        v165 = v31;
        v36 = *((_QWORD *)v34 + 1);
        v37 = *(_DWORD *)(v36 + 12);
        v38 = *(_DWORD *)(v36 + 16);
        v39 = *((_DWORD *)v163 + 6);
        v40 = v39 + 4;
        *((_DWORD *)v163 + 6) = v39 + 4;
        v178 = v163;
        v179 = v37;
        v180 = v163;
        v181 = v38;
        v41 = (WebCore::Node *)v191;
        if (!v191
          || (v42 = v33 & 7, v42 > 4)
          || (v43 = (WebCore::Node *)v191, ((1 << v42) & 0x19) == 0) && (v43 = v191[4]) == 0)
        {
          v74 = v163;
          *((_DWORD *)v163 + 6) = v39 + 6;
          LOBYTE(v173) = 0;
          v177 = 0;
          if (v39 != -4)
            goto LABEL_115;
          if ((*((_WORD *)v163 + 15) & 0x400) != 0)
            goto LABEL_116;
          WebCore::Node::removedLastRef(v163, v30);
          if (!v177)
            goto LABEL_116;
LABEL_73:
          WebCore::plainText(&v173, 0, 0, (const WTF::String *)&v172);
          v49 = v172;
          if (v172)
          {
            if (!v171 || (v50 = v19, !*((_DWORD *)v172 + 1)))
            {
              v172 = 0;
              goto LABEL_107;
            }
            do
            {
              if (v172)
              {
                v51 = (int8x16_t *)*((_QWORD *)v172 + 1);
                v52 = *((unsigned int *)v172 + 1);
                v53 = ((unint64_t)*((unsigned int *)v172 + 4) >> 2) & 1;
              }
              else
              {
                v51 = 0;
                v52 = 0;
                v53 = 1;
              }
              v54 = *((unsigned int *)v50 + 2);
              v55 = *((unsigned int *)v50 + 3);
              v56 = v55 + v52;
              if (v55 + v52 > v54)
              {
                v57 = v54 + (v54 >> 2);
                if (v57 >= 0x10)
                  v58 = v57 + 1;
                else
                  v58 = 16;
                if (v58 <= v56)
                  v59 = v55 + v52;
                else
                  v59 = v58;
                if (v59 >> 31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194EAA798);
                }
                v60 = *(void **)v50;
                v61 = (void *)WTF::fastMalloc((WTF *)(2 * v59));
                *((_DWORD *)v50 + 2) = v59;
                *(_QWORD *)v50 = v61;
                memcpy(v61, v60, 2 * v55);
                if (v60)
                {
                  if (*(void **)v50 == v60)
                  {
                    *(_QWORD *)v50 = 0;
                    *((_DWORD *)v50 + 2) = 0;
                  }
                  WTF::fastFree((WTF *)v60, v48);
                }
              }
              *((_DWORD *)v50 + 3) = v56;
              v62 = (_WORD *)(*(_QWORD *)v50 + 2 * v55);
              if (v53)
              {
                if (v52 >= 0x40)
                {
                  v63 = &v62[v52 & 0xFFFFFFC0];
                  v65 = *(_QWORD *)v50 + 2 * v55;
                  v66 = 0u;
                  do
                  {
                    v201.val[0] = *v51;
                    v67 = v51[1];
                    v204.val[0] = v51[2];
                    v68 = v51[3];
                    v51 += 4;
                    v69 = v68;
                    v204.val[1] = 0u;
                    v207.val[0] = v67;
                    v201.val[1] = 0u;
                    v70 = (char *)v65;
                    vst2q_s8(v70, v201);
                    v70 += 32;
                    v207.val[1] = 0u;
                    vst2q_s8(v70, v207);
                    v71 = (char *)(v65 + 64);
                    vst2q_s8(v71, v204);
                    v72 = (char *)(v65 + 96);
                    vst2q_s8(v72, *(int8x16x2_t *)(&v66 - 1));
                    v65 += 128;
                  }
                  while ((_WORD *)v65 != v63);
                  v159 = (__int128)v69;
                }
                else
                {
                  v63 = (_WORD *)(*(_QWORD *)v50 + 2 * v55);
                }
                while (v63 != &v62[v52])
                {
                  v64 = v51->u8[0];
                  v51 = (int8x16_t *)((char *)v51 + 1);
                  *v63++ = v64;
                }
              }
              else if (v52 == 1)
              {
                *v62 = v51->i16[0];
              }
              else if (v52)
              {
                memcpy(v62, v51, 2 * v52);
              }
              v50 += 16;
            }
            while (v50 != v167);
            v49 = v172;
            v172 = 0;
            if (v49)
            {
LABEL_107:
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v48);
              else
                *(_DWORD *)v49 -= 2;
            }
          }
          if (v177)
          {
            v73 = v175;
            v175 = 0;
            if (v73)
            {
              if (*((_DWORD *)v73 + 6) == 2)
              {
                if ((*((_WORD *)v73 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v73, v48);
              }
              else
              {
                *((_DWORD *)v73 + 6) -= 2;
              }
            }
            v74 = v173;
            v173 = 0;
            if (v74)
            {
              v40 = *((_DWORD *)v74 + 6) - 2;
              if (*((_DWORD *)v74 + 6) != 2)
              {
LABEL_115:
                *((_DWORD *)v74 + 6) = v40;
                goto LABEL_116;
              }
              if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v74, v48);
            }
          }
LABEL_116:
          WebCore::plainText(&v178, 0, 0, (const WTF::String *)&v173);
          v75 = *(unsigned int *)(v168 + 44) + 1;
          if (!v16)
          {
LABEL_175:
            v119 = v180;
            *((_DWORD *)v180 + 6) += 2;
            v32 = v181;
            if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v119 + 208))(v119) & 1) != 0)
            {
              v120 = 8;
            }
            else if (v32)
            {
              v120 = 10;
            }
            else
            {
              v120 = 9;
            }
            v121 = v165;
            v122 = (WebCore::Node *)v191;
            v191 = (WebCore::Node **)v119;
            if (v122)
            {
              if (*((_DWORD *)v122 + 6) == 2)
              {
                if ((*((_WORD *)v122 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v122, v30);
                  v121 = v165;
                }
              }
              else
              {
                *((_DWORD *)v122 + 6) -= 2;
              }
            }
            v33 = v120 | v164 & 0xFFFFFFF0;
            v192 = v32;
            v193 = v120 | v164 & 0xF0;
            v123 = v173;
            v173 = 0;
            if (v123)
            {
              if (*(_DWORD *)v123 == 2)
              {
                WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v30);
                v121 = v165;
              }
              else
              {
                *(_DWORD *)v123 -= 2;
              }
            }
            v124 = v180;
            v180 = 0;
            if (v124)
            {
              if (*((_DWORD *)v124 + 6) == 2)
              {
                if ((*((_WORD *)v124 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v124, v30);
                  v121 = v165;
                }
              }
              else
              {
                *((_DWORD *)v124 + 6) -= 2;
              }
            }
            v125 = v178;
            v178 = 0;
            if (v125)
            {
              if (*((_DWORD *)v125 + 6) == 2)
              {
                if ((*((_WORD *)v125 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v125, v30);
                  v121 = v165;
                }
              }
              else
              {
                *((_DWORD *)v125 + 6) -= 2;
              }
            }
            v166 *= (_DWORD)v75;
            v31 = (WTF *)((char *)v121 + 8);
            v164 = v120 | v164 & 0xFFFFFFF0;
            if (v31 == v162)
            {
              v31 = v182;
              if (v184)
              {
                v126 = (WTF *)((char *)v182 + 8 * v184);
                do
                {
                  v127 = *(unsigned int **)v31;
                  *(_QWORD *)v31 = 0;
                  if (v127)
                  {
                    do
                    {
                      v128 = __ldaxr(v127);
                      v129 = v128 - 1;
                    }
                    while (__stlxr(v129, v127));
                    if (!v129)
                    {
                      atomic_store(1u, v127);
                      v130 = v31;
                      WTF::fastFree((WTF *)v127, v30);
                      v31 = v130;
                    }
                  }
                  v31 = (WTF *)((char *)v31 + 8);
                }
                while (v31 != v126);
                v31 = v182;
              }
              v164 = v33;
              goto LABEL_224;
            }
            continue;
          }
          v76 = 0;
          while (2)
          {
            if (v76 / v166 % v75)
            {
              if (v171 <= v76)
              {
                __break(0xC471u);
                goto LABEL_326;
              }
              v77 = *(_QWORD *)(*(_QWORD *)(v168 + 32) + 8 * (v76 % *(unsigned int *)(v168 + 44)));
              if (v77)
              {
                v78 = *(_OWORD **)(v77 + 8);
                v79 = *(unsigned int *)(v77 + 4);
                v80 = ((unint64_t)*(unsigned int *)(v77 + 16) >> 2) & 1;
              }
              else
              {
                v78 = 0;
                v79 = 0;
                v80 = 1;
              }
              v81 = &v19[16 * v76];
              v82 = *((unsigned int *)v81 + 2);
              v83 = *((unsigned int *)v81 + 3);
              v84 = v83 + v79;
              if (v83 + v79 > v82)
              {
                v85 = v82 + (v82 >> 2);
                if (v85 >= 0x10)
                  v86 = v85 + 1;
                else
                  v86 = 16;
                if (v86 <= v84)
                  v87 = v83 + v79;
                else
                  v87 = v86;
                if (v87 >> 31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194EAA788);
                }
                v88 = *(void **)v81;
                v89 = (void *)WTF::fastMalloc((WTF *)(2 * v87));
                *((_DWORD *)v81 + 2) = v87;
                *(_QWORD *)v81 = v89;
                memcpy(v89, v88, 2 * v83);
                if (v88)
                {
                  if (*(void **)v81 == v88)
                  {
                    *(_QWORD *)v81 = 0;
                    *((_DWORD *)v81 + 2) = 0;
                  }
                  WTF::fastFree((WTF *)v88, v90);
                }
              }
              *((_DWORD *)v81 + 3) = v84;
              v91 = (_WORD *)(*(_QWORD *)v81 + 2 * v83);
              if (v80)
              {
                v16 = v170;
                if (v79 >= 0x40)
                {
                  v92 = &v91[v79 & 0xFFFFFFC0];
                  v107 = *(_QWORD *)v81 + 2 * v83;
                  do
                  {
                    v202.val[0] = (int8x16_t)*v78;
                    v108 = *((int8x16_t *)v78 + 1);
                    v205.val[0] = (int8x16_t)v78[2];
                    v109 = *((int8x16_t *)v78 + 3);
                    v78 += 4;
                    v208.val[0] = v109;
                    v205.val[1] = 0u;
                    v210.val[0] = v108;
                    v202.val[1] = 0u;
                    v110 = (char *)v107;
                    vst2q_s8(v110, v202);
                    v110 += 32;
                    v208.val[1] = 0u;
                    v210.val[1] = 0u;
                    vst2q_s8(v110, v210);
                    v111 = (char *)(v107 + 64);
                    vst2q_s8(v111, v205);
                    v112 = (char *)(v107 + 96);
                    v107 += 128;
                    vst2q_s8(v112, v208);
                  }
                  while ((_WORD *)v107 != v92);
                }
                else
                {
                  v92 = (_WORD *)(*(_QWORD *)v81 + 2 * v83);
                }
                v19 = v169;
                while (v92 != &v91[v79])
                {
                  v93 = *(unsigned __int8 *)v78;
                  v78 = (_OWORD *)((char *)v78 + 1);
                  *v92++ = v93;
                }
                goto LABEL_158;
              }
LABEL_156:
              v16 = v170;
              if (v79 == 1)
              {
                *v91 = *(_WORD *)v78;
                v19 = v169;
              }
              else
              {
                v19 = v169;
                if (v79)
                  memcpy(v91, v78, 2 * v79);
              }
            }
            else
            {
              if (v171 <= v76)
              {
                __break(0xC471u);
                JUMPOUT(0x194EAA780);
              }
              if (v173)
              {
                v78 = (_OWORD *)*((_QWORD *)v173 + 1);
                v79 = *((unsigned int *)v173 + 1);
                v94 = ((unint64_t)*((unsigned int *)v173 + 4) >> 2) & 1;
              }
              else
              {
                v78 = 0;
                v79 = 0;
                v94 = 1;
              }
              v95 = &v19[16 * v76];
              v96 = *((unsigned int *)v95 + 2);
              v97 = *((unsigned int *)v95 + 3);
              v98 = v97 + v79;
              if (v97 + v79 > v96)
              {
                v99 = v96 + (v96 >> 2);
                if (v99 >= 0x10)
                  v100 = v99 + 1;
                else
                  v100 = 16;
                if (v100 <= v98)
                  v101 = v97 + v79;
                else
                  v101 = v100;
                if (v101 >> 31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194EAA790);
                }
                v102 = *(void **)v95;
                v103 = (void *)WTF::fastMalloc((WTF *)(2 * v101));
                *((_DWORD *)v95 + 2) = v101;
                *(_QWORD *)v95 = v103;
                memcpy(v103, v102, 2 * v97);
                if (v102)
                {
                  if (*(void **)v95 == v102)
                  {
                    *(_QWORD *)v95 = 0;
                    *((_DWORD *)v95 + 2) = 0;
                  }
                  WTF::fastFree((WTF *)v102, v104);
                }
              }
              *((_DWORD *)v95 + 3) = v98;
              v91 = (_WORD *)(*(_QWORD *)v95 + 2 * v97);
              if (!v94)
                goto LABEL_156;
              v16 = v170;
              if (v79 >= 0x40)
              {
                v105 = &v91[v79 & 0xFFFFFFC0];
                v113 = *(_QWORD *)v95 + 2 * v97;
                do
                {
                  v203.val[0] = (int8x16_t)*v78;
                  v114 = *((int8x16_t *)v78 + 1);
                  v206.val[0] = (int8x16_t)v78[2];
                  v115 = *((int8x16_t *)v78 + 3);
                  v78 += 4;
                  v209.val[0] = v115;
                  v206.val[1] = 0u;
                  v211.val[0] = v114;
                  v203.val[1] = 0u;
                  v116 = (char *)v113;
                  vst2q_s8(v116, v203);
                  v116 += 32;
                  v209.val[1] = 0u;
                  v211.val[1] = 0u;
                  vst2q_s8(v116, v211);
                  v117 = (char *)(v113 + 64);
                  vst2q_s8(v117, v206);
                  v118 = (char *)(v113 + 96);
                  v113 += 128;
                  vst2q_s8(v118, v209);
                }
                while ((_WORD *)v113 != v105);
              }
              else
              {
                v105 = (_WORD *)(*(_QWORD *)v95 + 2 * v97);
              }
              v19 = v169;
              while (v105 != &v91[v79])
              {
                v106 = *(unsigned __int8 *)v78;
                v78 = (_OWORD *)((char *)v78 + 1);
                *v105++ = v106;
              }
            }
LABEL_158:
            if (++v76 == v16)
              goto LABEL_175;
            continue;
          }
        }
        *((_DWORD *)v43 + 6) += 2;
        if ((v33 & 7) != 0)
        {
          switch(v42)
          {
            case 4u:
              v44 = *((_WORD *)v41 + 14);
              if ((v44 & 1) != 0)
              {
                v46 = *((_QWORD *)v41 + 10);
                if (!v46)
                  goto LABEL_66;
                v32 = *(_DWORD *)(v46 + 4);
              }
              else if ((v44 & 4) != 0 && (v45 = *((_QWORD *)v41 + 10)) != 0)
              {
                v32 = 0;
                do
                {
                  ++v32;
                  v45 = *(_QWORD *)(v45 + 56);
                }
                while (v45);
              }
              else
              {
LABEL_66:
                v32 = 0;
              }
              break;
            case 1u:
              v32 = WebCore::Node::computeNodeIndex(v41);
              break;
            case 2u:
              v32 = WebCore::Node::computeNodeIndex(v41) + 1;
              break;
            default:
              goto LABEL_66;
          }
        }
        v47 = v178;
        *((_DWORD *)v178 + 6) += 2;
        v173 = v43;
        v174 = v32;
        v175 = v47;
        v176 = v179;
        v177 = 1;
        goto LABEL_73;
      }
      break;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_318;
  }
LABEL_227:
  v131 = v186;
  v186 = 0;
  if (v131)
  {
    v132 = *(_DWORD *)(v131 + 24) - 2;
    if (*(_DWORD *)(v131 + 24) != 2)
    {
LABEL_229:
      *(_DWORD *)(v131 + 24) = v132;
      goto LABEL_230;
    }
    if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v131, v26);
      v131 = v185;
      v185 = 0;
      if (v131)
      {
        v132 = *(_DWORD *)(v131 + 24) - 2;
        if (*(_DWORD *)(v131 + 24) != 2)
          goto LABEL_229;
        if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v131, v26);
      }
    }
  }
LABEL_230:
  if (v189)
  {
    if (*((_DWORD *)v189 + 6) == 2)
    {
      if ((*((_WORD *)v189 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v189, v26);
    }
    else
    {
      *((_DWORD *)v189 + 6) -= 2;
    }
  }
  if (v187)
  {
    if (*((_DWORD *)v187 + 6) == 2)
    {
      if ((*((_WORD *)v187 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v187, v26);
    }
    else
    {
      *((_DWORD *)v187 + 6) -= 2;
    }
  }
  WebCore::makeBoundaryPoint((uint64_t *)&v191, (uint64_t)&v187);
  v134 = (WTF::StringImpl *)v198;
  v135 = v198[6];
  v198[6] = v135 + 2;
  if ((_BYTE)v189)
  {
    v173 = v187;
    v174 = v188;
    v175 = v134;
    v176 = v199;
    v177 = 1;
    goto LABEL_238;
  }
  LOBYTE(v173) = 0;
  v177 = 0;
  if (!v135)
  {
    if ((*((_WORD *)v134 + 15) & 0x400) != 0)
      goto LABEL_258;
    WebCore::Node::removedLastRef(v134, v133);
    if (!v177)
      goto LABEL_258;
LABEL_238:
    WebCore::plainText(&v173, 0, 0, (const WTF::String *)&v187);
    v137 = v187;
    if (v187)
    {
      if (v171 && *((_DWORD *)v187 + 1))
      {
        v138 = 16 * v171;
        v139 = v19;
        do
        {
          v140 = (unint64_t)v187;
          if (v187)
          {
            v141 = (_OWORD *)*((_QWORD *)v187 + 1);
            v140 = *((unsigned int *)v187 + 1);
            v142 = ((unint64_t)*((unsigned int *)v187 + 4) >> 2) & 1;
          }
          else
          {
            v141 = 0;
            v142 = 1;
          }
          WTF::append<char16_t,0ul>(v139, v141, v140 | (v142 << 32));
          v139 += 16;
          v138 -= 16;
        }
        while (v138);
        v137 = v187;
        v187 = 0;
        if (!v137)
          goto LABEL_251;
      }
      else
      {
        v187 = 0;
      }
      if (*(_DWORD *)v137 == 2)
        WTF::StringImpl::destroy(v137, v136);
      else
        *(_DWORD *)v137 -= 2;
    }
LABEL_251:
    if (!v177)
      goto LABEL_258;
    v143 = v175;
    v175 = 0;
    if (v143)
    {
      if (*((_DWORD *)v143 + 6) == 2)
      {
        if ((*((_WORD *)v143 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v143, v136);
      }
      else
      {
        *((_DWORD *)v143 + 6) -= 2;
      }
    }
    v134 = v173;
    v173 = 0;
    if (!v134)
      goto LABEL_258;
    v135 = *((_DWORD *)v134 + 6) - 2;
    if (*((_DWORD *)v134 + 6) == 2)
    {
      if ((*((_WORD *)v134 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v134, v136);
      goto LABEL_258;
    }
  }
  *((_DWORD *)v134 + 6) = v135;
LABEL_258:
  v144 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v171);
  if ((_DWORD)v16)
  {
    v145 = v19;
    do
    {
      v146 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", *(_QWORD *)v145, *((unsigned int *)v145 + 3));
      if (v146)
      {
        objc_msgSend(v144, "addObject:", v146);
        CFRelease(v146);
      }
      v145 += 16;
    }
    while (v145 != v167);
  }
  v7 = (id)CFMakeCollectable(v144);
  if (v191)
  {
    if (*((_DWORD *)v191 + 6) == 2)
    {
      if ((*((_WORD *)v191 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v191, v21);
    }
    else
    {
      *((_DWORD *)v191 + 6) -= 2;
    }
  }
  if ((_DWORD)v16)
  {
    v147 = 16 * v171;
    v148 = v19;
    do
    {
      v149 = *(WTF **)v148;
      if (*(_QWORD *)v148)
      {
        *(_QWORD *)v148 = 0;
        *((_DWORD *)v148 + 2) = 0;
        WTF::fastFree(v149, v21);
      }
      v148 += 16;
      v147 -= 16;
    }
    while (v147);
  }
  if (v16)
    WTF::fastFree((WTF *)v19, v21);
LABEL_273:
  if (HIDWORD(v195))
  {
    v150 = (unsigned int **)v194;
    v151 = (unsigned int **)&v194[HIDWORD(v195)];
    do
    {
      v152 = *v150;
      *v150 = 0;
      if (v152)
      {
        do
        {
          v153 = __ldaxr(v152);
          v154 = v153 - 1;
        }
        while (__stlxr(v154, v152));
        if (!v154)
        {
          atomic_store(1u, v152);
          WTF::fastFree((WTF *)v152, v21);
        }
      }
      ++v150;
    }
    while (v150 != v151);
  }
  v155 = (WTF *)v194;
  if (v194)
  {
    v194 = 0;
    LODWORD(v195) = 0;
    WTF::fastFree(v155, v21);
  }
  v156 = v198;
  v198 = 0;
  if (v156)
  {
    if (v156[6] == 2)
    {
      if ((*((_WORD *)v156 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v156, v21);
    }
    else
    {
      v156[6] -= 2;
    }
  }
  v157 = (uint64_t)v196;
  v196 = 0;
  if (v157)
  {
    if (*(_DWORD *)(v157 + 24) == 2)
    {
      if ((*(_WORD *)(v157 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v157, v21);
    }
    else
    {
      *(_DWORD *)(v157 + 24) -= 2;
    }
  }
  return v7;
}

void sub_194EAA7A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,WebCore::Node *a29,uint64_t a30,char a31,WebCore::Node *a32,uint64_t a33,WebCore::Node *a34,uint64_t a35,WTF *a36,int a37,int a38)
{
  uint64_t v38;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int **v44;
  unsigned int **v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;

  v40 = *(unsigned int *)(v38 - 140);
  if ((_DWORD)v40)
  {
    v44 = *(unsigned int ***)(v38 - 152);
    v45 = &v44[v40];
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
      {
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          atomic_store(1u, v46);
          WTF::fastFree((WTF *)v46, a2);
        }
      }
      ++v44;
    }
    while (v44 != v45);
  }
  v41 = *(WTF **)(v38 - 152);
  if (v41)
  {
    *(_QWORD *)(v38 - 152) = 0;
    *(_DWORD *)(v38 - 144) = 0;
    WTF::fastFree(v41, a2);
  }
  v42 = *(_QWORD *)(v38 - 120);
  *(_QWORD *)(v38 - 120) = 0;
  if (v42)
  {
    if (*(_DWORD *)(v42 + 24) == 2)
    {
      if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v42, a2);
    }
    else
    {
      *(_DWORD *)(v42 + 24) -= 2;
    }
  }
  v43 = *(_QWORD *)(v38 - 136);
  *(_QWORD *)(v38 - 136) = 0;
  if (v43)
  {
    if (*(_DWORD *)(v43 + 24) == 2)
    {
      if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v43, a2);
    }
    else
    {
      *(_DWORD *)(v43 + 24) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *WTF::append<char16_t,0ul>(char *result, _OWORD *__src, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  int8x16x2_t v25;
  int8x16x2_t v26;
  int8x16x2_t v27;

  v5 = result;
  v6 = *((unsigned int *)result + 2);
  v7 = *((unsigned int *)result + 3);
  v8 = v7 + a3;
  if (v8 > v6)
  {
    v9 = v6 + (v6 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8)
      v11 = v7 + a3;
    else
      v11 = v10;
    if (v11 >> 31)
    {
      __break(0xC471u);
      return result;
    }
    v12 = *(void **)result;
    v13 = (void *)WTF::fastMalloc((WTF *)(2 * v11));
    *((_DWORD *)v5 + 2) = v11;
    *(_QWORD *)v5 = v13;
    memcpy(v13, v12, 2 * v7);
    if (v12)
    {
      if (*(void **)v5 == v12)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
  }
  *((_DWORD *)v5 + 3) = v8;
  result = (char *)(*(_QWORD *)v5 + 2 * v7);
  if ((a3 & 0xFF00000000) != 0)
  {
    v15 = &result[2 * a3];
    if (a3 >= 0x40)
    {
      v16 = &result[2 * (a3 & 0xFFFFFFC0)];
      v17 = 0uLL;
      do
      {
        v25.val[0] = (int8x16_t)*__src;
        v18 = *((int8x16_t *)__src + 1);
        v26.val[0] = (int8x16_t)__src[2];
        v19 = __src[3];
        __src += 4;
        v20 = v19;
        v26.val[1] = 0uLL;
        v27.val[0] = v18;
        v25.val[1] = 0uLL;
        v21 = result;
        vst2q_s8(v21, v25);
        v21 += 32;
        v27.val[1] = 0uLL;
        vst2q_s8(v21, v27);
        v22 = result + 64;
        vst2q_s8(v22, v26);
        v23 = result + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
        result += 128;
      }
      while (result != v16);
      result = v16;
    }
    while (result != v15)
    {
      v24 = *(unsigned __int8 *)__src;
      __src = (_OWORD *)((char *)__src + 1);
      *(_WORD *)result = v24;
      result += 2;
    }
  }
  else if ((_DWORD)a3 == 1)
  {
    *(_WORD *)result = *(_WORD *)__src;
  }
  else if ((_DWORD)a3)
  {
    return (char *)memcpy(result, __src, 2 * a3);
  }
  return result;
}

WebCore::RenderLayerCompositor *WebCore::LocalFrame::viewportOffsetChanged(WebCore::RenderLayerCompositor *result, int a2)
{
  uint64_t v2;
  WebCore::RenderView *v3;
  WebCore::RenderLayerCompositor *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  WebCore::RenderView *v10;
  WebCore::RenderLayerCompositor *v11;
  WTF *v12;
  void *v13;
  WebCore::RenderLayerCompositor *v14;
  WebCore::RenderLayerCompositor *v15;
  WTF *v16;
  void *v17;
  _DWORD v18[4];

  if (a2 == 1)
  {
    v9 = *((_QWORD *)result + 37);
    if (v9)
    {
      v10 = *(WebCore::RenderView **)(v9 + 1944);
      if (v10)
      {
        v11 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v10 + 50);
        if (!v11)
        {
          v14 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v11 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v14, v10);
          v15 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v10 + 50);
          *((_QWORD *)v10 + 50) = v11;
          if (v15)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v15);
            WTF::fastFree(v16, v17);
            v11 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v10 + 50);
          }
        }
        return (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::updateCompositingLayers((unint64_t)v11, 2u, 0);
      }
    }
  }
  else if (!a2)
  {
    v2 = *((_QWORD *)result + 37);
    if (v2)
    {
      v3 = *(WebCore::RenderView **)(v2 + 1944);
      if (v3)
      {
        v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
        if (!v4)
        {
          v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v3);
          result = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
          *((_QWORD *)v3 + 50) = v4;
          if (result)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(result);
            result = (WebCore::RenderLayerCompositor *)WTF::fastFree(v12, v13);
            v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
          }
        }
        v5 = *((_QWORD *)v4 + 32);
        if (v5 || (v5 = *((_QWORD *)v4 + 28)) != 0)
        {
          v18[0] = WebCore::ScrollView::exposedContentRect(*(WebCore::ScrollView **)(*((_QWORD *)v4 + 1) + 248));
          v18[1] = v6;
          v18[2] = v7;
          v18[3] = v8;
          result = (WebCore::RenderLayerCompositor *)(*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v5 + 760))(v5, v18);
          if ((_DWORD)result)
            return (WebCore::RenderLayerCompositor *)WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 24) + 8) + 40) + 8) + 528)+ 8)+ 24)+ 8), 0x4000);
        }
      }
    }
  }
  return result;
}

void WebCore::LocalFrame::overflowScrollPositionChangedForNode(WebCore::LocalFrame *this, int32x2_t *a2, WebCore::Node *a3, char a4)
{
  WebCore::RenderLayer *v4;
  int32x2_t *v7;
  __int8 v8;
  uint64_t v9;
  float32x2_t v10;

  if ((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0)
    {
      v4 = *(WebCore::RenderLayer **)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x90);
      if (v4)
      {
        v7 = (int32x2_t *)WebCore::RenderLayer::ensureLayerScrollableArea(v4);
        v8 = v7[5].i8[4];
        v7[5].i8[4] = a4 ^ 1;
        v10 = vcvt_f32_s32(*a2);
        WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(v7, &v10, 1);
        v7[5].i8[4] = v8;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v7[12] + 32) + 24) + 8) + 40)
                                                                                               + 8)
                                                                                   + 528)
                                                                       + 8)
                                                           + 24)
                                               + 8)
                                   + 48)
                       + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 680))(v9);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
}

uint64_t WebCore::LocalFrame::resetAllGeolocationPermission(uint64_t this, WebCore::Navigator *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::NavigatorGeolocation *v4;
  uint64_t i;

  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 296) + 696);
  if (v3)
  {
    v4 = *(WebCore::NavigatorGeolocation **)(v3 + 152);
    if (v4)
    {
      ++*((_DWORD *)v4 + 4);
      this = *(_QWORD *)(WebCore::NavigatorGeolocation::from(v4, a2) + 8);
      if (this)
        this = WebCore::Geolocation::resetAllGeolocationPermission(this);
      if (*((_DWORD *)v4 + 4) == 1)
        this = (*(uint64_t (**)(WebCore::NavigatorGeolocation *))(*(_QWORD *)v4 + 16))(v4);
      else
        --*((_DWORD *)v4 + 4);
    }
  }
  for (i = *(_QWORD *)(v2 + 88); i; i = *(_QWORD *)(i + 72))
  {
    if (!*(_BYTE *)(i + 144))
      this = WebCore::LocalFrame::resetAllGeolocationPermission((WebCore::LocalFrame *)i);
  }
  return this;
}

uint64_t WebCore::DragController::dragOperation(WebCore::DragController *this, const WebCore::DragData *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v11;

  if ((*((_BYTE *)a2 + 25) & 1) != 0)
  {
LABEL_11:
    v8 = 0;
    return v8 | (v8 << 8);
  }
  if (*((_BYTE *)this + 104))
  {
    *(_QWORD *)&v11 = *((_QWORD *)a2 + 7);
    BYTE8(v11) = *((_BYTE *)a2 + 64);
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = off_1E327FAB0;
    *(_OWORD *)(v4 + 8) = v11;
    v5 = WebCore::s_platformStrategies;
    v6 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v6)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v5 + 16) = v6;
    }
    v7 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v6 + 160))(v6, (char *)a2 + 72, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if ((v7 & 1) != 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  if ((WebCore::DragData::containsURLTypeIdentifier((WTF::StringImpl **)a2) & 1) == 0)
  {
LABEL_9:
    if (!*((_BYTE *)a2 + 80))
    {
      *(_QWORD *)&v11 = *((_QWORD *)a2 + 7);
      BYTE8(v11) = *((_BYTE *)a2 + 64);
      v9 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v9 = off_1E327FAB0;
      *(_OWORD *)(v9 + 8) = v11;
      WebCore::PagePasteboardContext::~PagePasteboardContext((WebCore::PagePasteboardContext *)v9);
    }
    goto LABEL_11;
  }
LABEL_6:
  if (*((_QWORD *)this + 2))
    v8 = (~*((unsigned __int8 *)a2 + 25) & 6) != 0;
  else
    v8 = 1;
  return v8 | (v8 << 8);
}

void sub_194EAB4A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *WebCore::DragController::updateSupportedTypeIdentifiersForDragHandlingMethod(WebCore::Pasteboard *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  char *v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  void *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF *v29;
  WTF *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF *result;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  WTF *v64;
  void *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  WTF *v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[128];
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v76 = 0;
  v77 = 0;
  switch(a2)
  {
    case 1:
      v4 = objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier");
      v5 = HIDWORD(v77) + ((unint64_t)HIDWORD(v77) >> 2);
      if (v5 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 16;
      if (v6 <= (unint64_t)HIDWORD(v77) + 1)
        v7 = HIDWORD(v77) + 1;
      else
        v7 = v6;
      if (v7 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194EABCC4);
      }
      v8 = v76;
      LODWORD(v77) = v7;
      v76 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
      memcpy(v76, v8, 8 * HIDWORD(v77));
      MEMORY[0x19AEA5508]((char *)v76 + 8 * HIDWORD(v77), v4);
      ++HIDWORD(v77);
      v9 = objc_msgSend((id)*MEMORY[0x1E0CEC590], "identifier");
      if (HIDWORD(v77) == (_DWORD)v77)
      {
        v34 = HIDWORD(v77) + ((unint64_t)HIDWORD(v77) >> 2);
        if (v34 >= 0x10)
          v35 = v34 + 1;
        else
          v35 = 16;
        if (v35 <= (unint64_t)HIDWORD(v77) + 1)
          v36 = HIDWORD(v77) + 1;
        else
          v36 = v35;
        if (v36 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194EABCD4);
        }
        v37 = v76;
        v38 = (WTF *)WTF::fastMalloc((WTF *)(8 * v36));
        LODWORD(v77) = v36;
        v76 = v38;
        memcpy(v38, v37, 8 * HIDWORD(v77));
        if (v37)
        {
          if (v38 == v37)
          {
            v76 = 0;
            LODWORD(v77) = 0;
          }
          WTF::fastFree(v37, v39);
          v38 = v76;
        }
        v14 = (char *)v38 + 8 * HIDWORD(v77);
      }
      else
      {
        v14 = (char *)v76 + 8 * HIDWORD(v77);
      }
      goto LABEL_70;
    case 2:
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
LABEL_95:
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v54 = (void *)WebCore::Pasteboard::supportedWebContentPasteboardTypes(a1);
        v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v72, v80, 16);
        if (v55)
        {
          v56 = *(_QWORD *)v73;
          do
          {
            v57 = 0;
            do
            {
              if (*(_QWORD *)v73 != v56)
                objc_enumerationMutation(v54);
              v58 = *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * v57);
              v59 = HIDWORD(v77);
              if (HIDWORD(v77) == (_DWORD)v77)
              {
                v60 = HIDWORD(v77) + ((unint64_t)HIDWORD(v77) >> 2);
                if (v60 >= 0x10)
                  v61 = v60 + 1;
                else
                  v61 = 16;
                if (v61 <= (unint64_t)HIDWORD(v77) + 1)
                  v62 = HIDWORD(v77) + 1;
                else
                  v62 = v61;
                if (v62 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194EABCBCLL);
                }
                v63 = v76;
                v64 = (WTF *)WTF::fastMalloc((WTF *)(8 * v62));
                LODWORD(v77) = v62;
                v76 = v64;
                memcpy(v64, v63, 8 * v59);
                if (v63)
                {
                  if (v76 == v63)
                  {
                    v76 = 0;
                    LODWORD(v77) = 0;
                  }
                  WTF::fastFree(v63, v65);
                }
                v66 = (char *)v76 + 8 * HIDWORD(v77);
              }
              else
              {
                v66 = (char *)v76 + 8 * HIDWORD(v77);
              }
              MEMORY[0x19AEA5508](v66, v58);
              ++HIDWORD(v77);
              ++v57;
            }
            while (v55 != v57);
            v67 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v72, v80, 16);
            v55 = v67;
          }
          while (v67);
        }
        goto LABEL_72;
      }
      if (!byte_1ECE90A59)
        goto LABEL_95;
      LODWORD(v77) = 16;
      v76 = (WTF *)WTF::fastMalloc((WTF *)0x80);
      MEMORY[0x19AEA5508]((char *)v76 + 8 * HIDWORD(v77), WebCore::WebArchivePboardType);
      ++HIDWORD(v77);
      v15 = objc_msgSend((id)*MEMORY[0x1E0CEC498], "identifier");
      if (HIDWORD(v77) == 16)
      {
        v16 = v76;
        v17 = (WTF *)WTF::fastMalloc((WTF *)0xA8);
        LODWORD(v77) = 21;
        v76 = v17;
        memcpy(v17, v16, 0x80uLL);
        if (v16)
        {
          if (v17 == v16)
          {
            v76 = 0;
            LODWORD(v77) = 0;
          }
          WTF::fastFree(v16, v18);
          v17 = v76;
        }
        v19 = (char *)v17 + 8 * HIDWORD(v77);
      }
      else
      {
        v19 = (char *)v76 + 8 * HIDWORD(v77);
      }
      MEMORY[0x19AEA5508](v19, v15);
      ++HIDWORD(v77);
      v9 = objc_msgSend((id)*MEMORY[0x1E0CEC528], "identifier");
      if (HIDWORD(v77) == (_DWORD)v77)
      {
        v40 = HIDWORD(v77) + ((unint64_t)HIDWORD(v77) >> 2);
        if (v40 >= 0x10)
          v41 = v40 + 1;
        else
          v41 = 16;
        if (v41 <= (unint64_t)HIDWORD(v77) + 1)
          v42 = HIDWORD(v77) + 1;
        else
          v42 = v41;
        if (v42 >> 29)
        {
          __break(0xC471u);
LABEL_124:
          JUMPOUT(0x194EABCB4);
        }
        v43 = v76;
        v44 = (WTF *)WTF::fastMalloc((WTF *)(8 * v42));
        LODWORD(v77) = v42;
        v76 = v44;
        memcpy(v44, v43, 8 * HIDWORD(v77));
        if (v43)
        {
          if (v44 == v43)
          {
            v76 = 0;
            LODWORD(v77) = 0;
          }
          WTF::fastFree(v43, v45);
          v44 = v76;
        }
        v14 = (char *)v44 + 8 * HIDWORD(v77);
      }
      else
      {
        v14 = (char *)v76 + 8 * HIDWORD(v77);
      }
LABEL_70:
      MEMORY[0x19AEA5508](v14, v9);
LABEL_71:
      ++HIDWORD(v77);
LABEL_72:
      *(_QWORD *)&v78 = *(_QWORD *)(a3 + 56);
      BYTE8(v78) = *(_BYTE *)(a3 + 64);
      v46 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v46 = off_1E327FAB0;
      *(_OWORD *)(v46 + 8) = v78;
      v47 = WebCore::s_platformStrategies;
      v48 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
      if (!v48)
      {
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
        *(_QWORD *)(v47 + 16) = v48;
      }
      (*(void (**)(uint64_t, WTF **, uint64_t, uint64_t))(*(_QWORD *)v48 + 32))(v48, &v76, a3 + 72, v46);
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      if (HIDWORD(v77))
      {
        v51 = v76;
        v52 = 8 * HIDWORD(v77);
        do
        {
          v53 = *(WTF::StringImpl **)v51;
          *(_QWORD *)v51 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v49);
            else
              *(_DWORD *)v53 -= 2;
          }
          v51 = (WTF *)((char *)v51 + 8);
          v52 -= 8;
        }
        while (v52);
      }
      result = v76;
      if (v76)
      {
        v76 = 0;
        LODWORD(v77) = 0;
        return (WTF *)WTF::fastFree(result, v49);
      }
      return result;
    case 4:
      v9 = objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier");
      v10 = HIDWORD(v77) + ((unint64_t)HIDWORD(v77) >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= (unint64_t)HIDWORD(v77) + 1)
        v12 = HIDWORD(v77) + 1;
      else
        v12 = v11;
      if (v12 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194EABCCCLL);
      }
      v13 = v76;
      LODWORD(v77) = v12;
      v76 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
      memcpy(v76, v13, 8 * HIDWORD(v77));
      v14 = (char *)v76 + 8 * HIDWORD(v77);
      goto LABEL_70;
    case 5:
      LODWORD(v77) = 16;
      v76 = (WTF *)WTF::fastMalloc((WTF *)0x80);
      MEMORY[0x19AEA5508]((char *)v76 + 8 * HIDWORD(v77), WebCore::UIColorPboardType);
      goto LABEL_71;
    default:
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v20 = (void *)WebCore::Pasteboard::supportedFileUploadPasteboardTypes(a1);
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v68, v79, 16);
      if (!v21)
        goto LABEL_72;
      v22 = *(_QWORD *)v69;
      do
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v69 != v22)
            objc_enumerationMutation(v20);
          v24 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * v23);
          v25 = HIDWORD(v77);
          if (HIDWORD(v77) == (_DWORD)v77)
          {
            v26 = HIDWORD(v77) + ((unint64_t)HIDWORD(v77) >> 2);
            if (v26 >= 0x10)
              v27 = v26 + 1;
            else
              v27 = 16;
            if (v27 <= (unint64_t)HIDWORD(v77) + 1)
              v28 = HIDWORD(v77) + 1;
            else
              v28 = v27;
            if (v28 >> 29)
            {
              __break(0xC471u);
              goto LABEL_124;
            }
            v29 = v76;
            v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v28));
            LODWORD(v77) = v28;
            v76 = v30;
            memcpy(v30, v29, 8 * v25);
            if (v29)
            {
              if (v76 == v29)
              {
                v76 = 0;
                LODWORD(v77) = 0;
              }
              WTF::fastFree(v29, v31);
            }
            v32 = (char *)v76 + 8 * HIDWORD(v77);
          }
          else
          {
            v32 = (char *)v76 + 8 * HIDWORD(v77);
          }
          MEMORY[0x19AEA5508](v32, v24);
          ++HIDWORD(v77);
          ++v23;
        }
        while (v21 != v23);
        v33 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v68, v79, 16);
        v21 = v33;
      }
      while (v33);
      goto LABEL_72;
  }
}

void sub_194EABCE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,unsigned int a27)
{
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v28 = a25;
  if (a27)
  {
    v29 = 8 * a27;
    do
    {
      v30 = *(WTF::StringImpl **)v28;
      *(_QWORD *)v28 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      v28 = (WTF *)((char *)v28 + 8);
      v29 -= 8;
    }
    while (v29);
    v28 = a25;
    if (!a25)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!a25)
  {
    goto LABEL_3;
  }
  WTF::fastFree(v28, a2);
  goto LABEL_3;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  _QWORD *v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  WTF *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  WTF *v38;
  uint64_t v39;
  WTF **v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WTF **v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  WTF *v65;
  uint64_t v66;
  _QWORD *result;
  uint64_t *v68;
  uint64_t v70;
  _QWORD *v72;
  _QWORD *v73;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v70 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v30 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v28 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v27 + 16 * v33);
            v33 = (v33 + v34++) & v28;
          }
          while (v36);
          v37 = (_QWORD *)(v27 + 16 * v35);
          v38 = (WTF *)v37[1];
          v37[1] = 0;
          if (v38)
          {
            v72 = v10;
            v39 = *((unsigned int *)v38 + 3);
            if ((_DWORD)v39)
            {
              v40 = *(WTF ***)v38;
              v41 = *(_QWORD *)v38 + 8 * v39;
              do
              {
                v42 = *v40;
                *v40 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 1)
                  {
                    v43 = *((_QWORD *)v42 + 2);
                    *((_QWORD *)v42 + 2) = 0;
                    if (v43)
                    {
                      if ((*(_BYTE *)(v43 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v43 + 24) == 2)
                        {
                          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v43, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v43 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 96))(v43);
                      }
                    }
                    v44 = (WTF *)*((_QWORD *)v42 + 1);
                    *((_QWORD *)v42 + 1) = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 1)
                      {
                        v45 = (uint64_t *)*((_QWORD *)v44 + 2);
                        *((_QWORD *)v44 + 2) = 0;
                        if (v45)
                        {
                          if (*v45)
                          {
                            v68 = v45;
                            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v45, (WTF::StringImpl *)v8);
                            v45 = v68;
                          }
                          WTF::fastFree((WTF *)v45, v8);
                        }
                        v46 = (unsigned int *)*((_QWORD *)v44 + 1);
                        *((_QWORD *)v44 + 1) = 0;
                        if (v46)
                        {
                          do
                          {
                            v47 = __ldaxr(v46);
                            v48 = v47 - 1;
                          }
                          while (__stlxr(v48, v46));
                          if (!v48)
                          {
                            atomic_store(1u, v46);
                            WTF::fastFree((WTF *)v46, v8);
                          }
                        }
                        WTF::fastFree(v44, v8);
                      }
                      else
                      {
                        --*(_DWORD *)v44;
                      }
                    }
                    WTF::fastFree(v42, v8);
                  }
                  else
                  {
                    --*(_DWORD *)v42;
                  }
                }
                ++v40;
              }
              while (v40 != (WTF **)v41);
            }
            v49 = *(WTF **)v38;
            if (*(_QWORD *)v38)
            {
              *(_QWORD *)v38 = 0;
              *((_DWORD *)v38 + 2) = 0;
              WTF::fastFree(v49, v8);
            }
            WTF::fastFree(v38, v8);
            v50 = *v37;
            *v37 = 0;
            v10 = v72;
            if (v50)
            {
              if ((*(_BYTE *)(v50 + 22) & 2) != 0)
              {
                if (*(_DWORD *)(v50 + 24) == 2)
                {
                  if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v50, v8);
                }
                else
                {
                  *(_DWORD *)(v50 + 24) -= 2;
                }
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 96))(v50);
              }
            }
          }
          else
          {
            *v37 = 0;
          }
          v51 = *v12;
          *v12 = 0;
          *v37 = v51;
          v52 = v4 + 16 * v9;
          v53 = *(_QWORD *)(v52 + 8);
          *(_QWORD *)(v52 + 8) = 0;
          v37[1] = v53;
          v54 = *(WTF **)(v52 + 8);
          *(_QWORD *)(v52 + 8) = 0;
          if (v54)
          {
            v55 = *((unsigned int *)v54 + 3);
            if ((_DWORD)v55)
            {
              v56 = *(WTF ***)v54;
              v57 = *(_QWORD *)v54 + 8 * v55;
              do
              {
                v58 = *v56;
                *v56 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 1)
                  {
                    v59 = *((_QWORD *)v58 + 2);
                    *((_QWORD *)v58 + 2) = 0;
                    if (v59)
                    {
                      if ((*(_BYTE *)(v59 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v59 + 24) == 2)
                        {
                          if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v59, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v59 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 96))(v59);
                      }
                    }
                    v60 = (WTF *)*((_QWORD *)v58 + 1);
                    *((_QWORD *)v58 + 1) = 0;
                    if (v60)
                    {
                      if (*(_DWORD *)v60 == 1)
                      {
                        v73 = v10;
                        v61 = (uint64_t *)*((_QWORD *)v60 + 2);
                        *((_QWORD *)v60 + 2) = 0;
                        if (v61)
                        {
                          if (*v61)
                            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v61, (WTF::StringImpl *)v8);
                          WTF::fastFree((WTF *)v61, v8);
                        }
                        v62 = (unsigned int *)*((_QWORD *)v60 + 1);
                        *((_QWORD *)v60 + 1) = 0;
                        v10 = v73;
                        if (v62)
                        {
                          do
                          {
                            v63 = __ldaxr(v62);
                            v64 = v63 - 1;
                          }
                          while (__stlxr(v64, v62));
                          if (!v64)
                          {
                            atomic_store(1u, v62);
                            WTF::fastFree((WTF *)v62, v8);
                          }
                        }
                        WTF::fastFree(v60, v8);
                      }
                      else
                      {
                        --*(_DWORD *)v60;
                      }
                    }
                    WTF::fastFree(v58, v8);
                  }
                  else
                  {
                    --*(_DWORD *)v58;
                  }
                }
                ++v56;
              }
              while (v56 != (WTF **)v57);
            }
            v65 = *(WTF **)v54;
            if (*(_QWORD *)v54)
            {
              *(_QWORD *)v54 = 0;
              *((_DWORD *)v54 + 2) = 0;
              WTF::fastFree(v65, v8);
            }
            WTF::fastFree(v54, v8);
          }
          v66 = *v12;
          *v12 = 0;
          if (v66)
          {
            if ((*(_BYTE *)(v66 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v66 + 24) == 2)
              {
                if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v66, v8);
              }
              else
              {
                *(_DWORD *)(v66 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v66 + 96))(v66);
            }
          }
          if (v12 == a3)
            v10 = v37;
          v11 = v70;
        }
        else
        {
          v14 = v4 + 16 * v9;
          v15 = *(WTF **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            v16 = *((unsigned int *)v15 + 3);
            if ((_DWORD)v16)
            {
              v17 = *(WTF ***)v15;
              v18 = *(_QWORD *)v15 + 8 * v16;
              do
              {
                v19 = *v17;
                *v17 = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 1)
                  {
                    v20 = *((_QWORD *)v19 + 2);
                    *((_QWORD *)v19 + 2) = 0;
                    if (v20)
                    {
                      if ((*(_BYTE *)(v20 + 22) & 2) != 0)
                      {
                        if (*(_DWORD *)(v20 + 24) == 2)
                        {
                          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v20, v8);
                        }
                        else
                        {
                          *(_DWORD *)(v20 + 24) -= 2;
                        }
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 96))(v20);
                      }
                    }
                    v21 = (WTF *)*((_QWORD *)v19 + 1);
                    *((_QWORD *)v19 + 1) = 0;
                    if (v21)
                    {
                      if (*(_DWORD *)v21 == 1)
                      {
                        v22 = v10;
                        v23 = (uint64_t *)*((_QWORD *)v21 + 2);
                        *((_QWORD *)v21 + 2) = 0;
                        if (v23)
                        {
                          if (*v23)
                            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v23, (WTF::StringImpl *)v8);
                          WTF::fastFree((WTF *)v23, v8);
                        }
                        v24 = (unsigned int *)*((_QWORD *)v21 + 1);
                        *((_QWORD *)v21 + 1) = 0;
                        v10 = v22;
                        v11 = v70;
                        if (v24)
                        {
                          do
                          {
                            v25 = __ldaxr(v24);
                            v26 = v25 - 1;
                          }
                          while (__stlxr(v26, v24));
                          if (!v26)
                          {
                            atomic_store(1u, v24);
                            WTF::fastFree((WTF *)v24, v8);
                          }
                        }
                        WTF::fastFree(v21, v8);
                      }
                      else
                      {
                        --*(_DWORD *)v21;
                      }
                    }
                    WTF::fastFree(v19, v8);
                  }
                  else
                  {
                    --*(_DWORD *)v19;
                  }
                }
                ++v17;
              }
              while (v17 != (WTF **)v18);
            }
            v29 = *(WTF **)v15;
            if (*(_QWORD *)v15)
            {
              *(_QWORD *)v15 = 0;
              *((_DWORD *)v15 + 2) = 0;
              WTF::fastFree(v29, v8);
            }
            WTF::fastFree(v15, v8);
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
          {
            if ((*(_BYTE *)(v13 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v13 + 24) == 2)
              {
                if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v13, v8);
              }
              else
              {
                *(_DWORD *)(v13 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashMap<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::RefPtr<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != -1)
      {
        v7 = (WTF *)v5[1];
        v5[1] = 0;
        if (v7)
        {
          v8 = *((unsigned int *)v7 + 3);
          if ((_DWORD)v8)
          {
            v9 = *(WTF ***)v7;
            v10 = *(_QWORD *)v7 + 8 * v8;
            do
            {
              v11 = *v9;
              *v9 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 1)
                {
                  v12 = *((_QWORD *)v11 + 2);
                  *((_QWORD *)v11 + 2) = 0;
                  if (v12)
                  {
                    if ((*(_BYTE *)(v12 + 22) & 2) != 0)
                    {
                      if (*(_DWORD *)(v12 + 24) == 2)
                      {
                        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
                      }
                      else
                      {
                        *(_DWORD *)(v12 + 24) -= 2;
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
                    }
                  }
                  v13 = (WTF *)*((_QWORD *)v11 + 1);
                  *((_QWORD *)v11 + 1) = 0;
                  if (v13)
                  {
                    if (*(_DWORD *)v13 == 1)
                    {
                      v14 = (uint64_t *)*((_QWORD *)v13 + 2);
                      *((_QWORD *)v13 + 2) = 0;
                      if (v14)
                      {
                        if (*v14)
                          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v14, (WTF::StringImpl *)a2);
                        WTF::fastFree((WTF *)v14, a2);
                      }
                      v15 = (unsigned int *)*((_QWORD *)v13 + 1);
                      *((_QWORD *)v13 + 1) = 0;
                      if (v15)
                      {
                        do
                        {
                          v16 = __ldaxr(v15);
                          v17 = v16 - 1;
                        }
                        while (__stlxr(v17, v15));
                        if (!v17)
                        {
                          atomic_store(1u, v15);
                          WTF::fastFree((WTF *)v15, a2);
                        }
                      }
                      WTF::fastFree(v13, a2);
                    }
                    else
                    {
                      --*(_DWORD *)v13;
                    }
                  }
                  WTF::fastFree(v11, a2);
                }
                else
                {
                  --*(_DWORD *)v11;
                }
              }
              ++v9;
            }
            while (v9 != (WTF **)v10);
          }
          v18 = *(WTF **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v18, a2);
          }
          WTF::fastFree(v7, a2);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          if ((*(_BYTE *)(v6 + 22) & 2) != 0)
          {
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ancestorRespondingToClickEventsNodeQualifier(WebCore::SecurityOrigin *)::{lambda(WebCore::HitTestResult const&,WebCore::Node *,WebCore::IntRect *)#1},WebCore::Node *,WebCore::HitTestResult const&,WebCore::Node *,WebCore::IntRect *>::call(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  WebCore::SecurityOrigin *v8;
  const WebCore::SecurityOrigin *v9;
  BOOL isSameOriginAs;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::RenderObject *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const WebCore::FloatRect *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _DWORD v40[4];
  char v41;
  char v42[8];
  uint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  v7 = *((_QWORD *)a2 + 9);
  if (!v7)
    return 0;
  v8 = *(WebCore::SecurityOrigin **)(a1 + 8);
  if (!v8)
  {
    if (v7 != a3)
      goto LABEL_9;
    return 0;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 192), a2);
  isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v8, v9);
  result = 0;
  if (v7 != a3 && isSameOriginAs)
  {
LABEL_9:
    while (!WebCore::nodeWillRespondToMouseEvents((WebCore *)v7, a2))
    {
      v13 = (uint64_t *)(v7 + 32);
      v12 = *(_QWORD *)(v7 + 32);
      if (!v12
        || (*(_WORD *)(v12 + 28) & 8) == 0
        || (v14 = *(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) == 0
        || (v16 = *(_QWORD *)(v14 + 88)) == 0
        || (v17 = *(_QWORD *)(v16 + 224)) == 0
        || (v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v7)) == 0)
      {
        if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
        {
          v18 = *(_QWORD *)(v7 + 200);
          if (!v18)
            return 0;
          v13 = (uint64_t *)(v18 + 8);
        }
        v15 = *v13;
      }
      result = 0;
      if (v15)
      {
        v7 = v15;
        if (v15 != a3)
          continue;
      }
      return result;
    }
    if (!a4)
      return v7;
    if (v7 == *((_QWORD *)a2 + 9)
      && (v22 = *((_QWORD *)a2 + 10), v7 != v22)
      && (*(_WORD *)(v7 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
    {
      WebCore::HTMLAreaElement::computePath((WebCore::HTMLAreaElement *)v7, (WebCore::RenderObject *)(*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL), (uint64_t)v42);
      WebCore::Path::fastBoundingRect((WebCore::Path *)v42);
      v40[0] = v23;
      v40[1] = v24;
      v40[2] = v25;
      v40[3] = v26;
      v30 = WebCore::enclosingLayoutRect((WebCore *)v40, v27);
      v32 = v31;
      if (v44 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v44])(&v41, &v43);
      v33 = (int)v30 / 64;
      v34 = v30 - (v28 & 0xFFFFFFC0);
      v35 = HIDWORD(v30) - (v29 & 0xFFFFFFC0);
      v36 = v34 + v32;
      if (__OFADD__(v34, (_DWORD)v32))
        v36 = (v34 >> 31) + 0x7FFFFFFF;
      v37 = v35 + HIDWORD(v32);
      if (__OFADD__(v35, HIDWORD(v32)))
        v37 = (v35 >> 31) + 0x7FFFFFFF;
      v38 = v35 + 32;
      v39 = v34 + 32;
      v20 = (v33 + (v39 >> 6)) | ((unint64_t)(SHIDWORD(v30) / 64 + (v38 >> 6)) << 32);
      v21 = (v36 / 64 - (v39 >> 6) + ((int)(v36 - (v33 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v37 / 64 - (v38 >> 6) + ((int)(v37 - (v33 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    }
    else
    {
      v19 = (WebCore::RenderObject *)(*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL);
      if (!v19)
        return v7;
      v20 = WebCore::RenderObject::absoluteBoundingBoxRect(v19, 1, 0);
    }
    *a4 = v20;
    a4[1] = v21;
    return v7;
  }
  return result;
}

uint64_t WebCore::nodeWillRespondToMouseEvents(WebCore *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  int v8;
  _WORD **v9;
  WTF *v10;
  _WORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  WTF *v16;
  WTF *v18;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  WTF *v25;
  WTF *v27;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  WTF *v33;
  WTF *v35;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  WTF *v42;
  WTF *v44;
  __int16 v46;
  WTF *v47;
  uint64_t v48;
  _QWORD v49[3];
  _DWORD v50[66];
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _DWORD v54[66];
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unsigned int v59;
  _BYTE v60[4672];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v3 = 1;
  v4 = WebCore::Node::computeEditabilityWithStyle(v2, 0, 1, 0);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 320))(v2, v4) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 312))(v2) & 1) != 0)
  {
    return v3;
  }
  if ((*(_WORD *)(v2 + 28) & 8) == 0)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 568))(v2) & 1) != 0)
    return v3;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v7 = *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  if ((*(_BYTE *)(v7 + 192) & 2) == 0)
  {
LABEL_51:
    if (v8)
    {
      v3 = 0;
      *(_DWORD *)(v7 + 24) = v8;
      return v3;
    }
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v5);
    return 0;
  }
  WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v56, v2);
  v46 = 0;
  v47 = (WTF *)v49;
  v49[0] = 0;
  v49[1] = v50;
  v49[2] = 16;
  v50[64] = 0;
  v51 = 0;
  v52 = v54;
  v53 = 16;
  v54[64] = 0;
  v55 = -1;
  v48 = 0x100000008;
  while (1)
  {
    if (!v59 || !HIDWORD(v48))
    {
      __break(0xC471u);
      JUMPOUT(0x194EACD08);
    }
    v9 = (_WORD **)((char *)v57 + 584 * v59 - 584);
    v10 = v47;
    v11 = *v9;
    if (*v9 == *((_WORD **)v47 + 73 * HIDWORD(v48) - 73)
      || !*((_DWORD *)v57 + 146 * v59 - 76) && !*((_DWORD *)v47 + 146 * HIDWORD(v48) - 76))
    {
      v13 = 0;
      v14 = 584 * HIDWORD(v48);
      do
      {
        v15 = (char *)v10 + v13;
        v16 = *(WTF **)((char *)v10 + v13 + 296);
        if ((WTF *)((char *)v10 + v13 + 312) != v16 && v16 != 0)
        {
          *((_QWORD *)v15 + 37) = 0;
          *((_DWORD *)v15 + 76) = 0;
          WTF::fastFree(v16, v5);
        }
        v18 = (WTF *)*((_QWORD *)v15 + 1);
        if (v15 + 24 != (char *)v18 && v18 != 0)
        {
          *((_QWORD *)v15 + 1) = 0;
          *(_DWORD *)((char *)v10 + v13 + 16) = 0;
          WTF::fastFree(v18, v5);
        }
        v13 += 584;
      }
      while (v14 != v13);
      v20 = v47;
      if (v49 != (_QWORD *)v47 && v47)
      {
        v47 = 0;
        LODWORD(v48) = 0;
        WTF::fastFree(v20, v5);
      }
      v21 = v57;
      if (v59)
      {
        v22 = 0;
        v23 = 584 * v59;
        do
        {
          v24 = (char *)v21 + v22;
          v25 = *(WTF **)((char *)v21 + v22 + 296);
          if ((WTF *)((char *)v21 + v22 + 312) != v25 && v25 != 0)
          {
            *((_QWORD *)v24 + 37) = 0;
            *((_DWORD *)v24 + 76) = 0;
            WTF::fastFree(v25, v5);
          }
          v27 = (WTF *)*((_QWORD *)v24 + 1);
          if (v24 + 24 != (char *)v27 && v27 != 0)
          {
            *((_QWORD *)v24 + 1) = 0;
            *(_DWORD *)((char *)v21 + v22 + 16) = 0;
            WTF::fastFree(v27, v5);
          }
          v22 += 584;
        }
        while (v23 != v22);
        v21 = v57;
      }
      if (v60 != (_BYTE *)v21 && v21)
      {
        v57 = 0;
        v58 = 0;
        WTF::fastFree(v21, v5);
      }
      v8 = *(_DWORD *)(v7 + 24) - 2;
      goto LABEL_51;
    }
    v12 = !v11 || (v11[14] & 8) == 0;
    if (!v12 && ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v11 + 568))(v11) & 1) != 0)
      break;
    WebCore::ComposedTreeIterator::operator++((uint64_t)&v56, (WebCore::ShadowRoot *)v5);
  }
  v29 = v47;
  if (HIDWORD(v48))
  {
    v30 = 0;
    v31 = 584 * HIDWORD(v48);
    do
    {
      v32 = (char *)v29 + v30;
      v33 = *(WTF **)((char *)v29 + v30 + 296);
      if ((WTF *)((char *)v29 + v30 + 312) != v33 && v33 != 0)
      {
        *((_QWORD *)v32 + 37) = 0;
        *((_DWORD *)v32 + 76) = 0;
        WTF::fastFree(v33, v5);
      }
      v35 = (WTF *)*((_QWORD *)v32 + 1);
      if (v32 + 24 != (char *)v35 && v35 != 0)
      {
        *((_QWORD *)v32 + 1) = 0;
        *(_DWORD *)((char *)v29 + v30 + 16) = 0;
        WTF::fastFree(v35, v5);
      }
      v30 += 584;
    }
    while (v31 != v30);
    v29 = v47;
  }
  if (v49 != (_QWORD *)v29 && v29 != 0)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree(v29, v5);
  }
  v38 = v57;
  if (v59)
  {
    v39 = 0;
    v40 = 584 * v59;
    do
    {
      v41 = (char *)v38 + v39;
      v42 = *(WTF **)((char *)v38 + v39 + 296);
      if ((WTF *)((char *)v38 + v39 + 312) != v42 && v42 != 0)
      {
        *((_QWORD *)v41 + 37) = 0;
        *((_DWORD *)v41 + 76) = 0;
        WTF::fastFree(v42, v5);
      }
      v44 = (WTF *)*((_QWORD *)v41 + 1);
      if (v41 + 24 != (char *)v44 && v44 != 0)
      {
        *((_QWORD *)v41 + 1) = 0;
        *(_DWORD *)((char *)v38 + v39 + 16) = 0;
        WTF::fastFree(v44, v5);
      }
      v39 += 584;
    }
    while (v40 != v39);
    v38 = v57;
  }
  if (v60 != (_BYTE *)v38 && v38)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree(v38, v5);
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v5);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return 1;
}

void sub_194EACD14(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF *a10, int a11, unsigned int a12)
{
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v16;
  uint64_t v17;
  char *v18;
  WTF *v19;
  WTF *v21;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  WTF *v28;
  WTF *v30;

  v14 = v13;
  v16 = a10;
  if (a12)
  {
    v17 = 0;
    do
    {
      v18 = (char *)a10 + v17;
      v19 = *(WTF **)((char *)a10 + v17 + 296);
      if ((WTF *)((char *)a10 + v17 + 312) != v19 && v19 != 0)
      {
        *((_QWORD *)v18 + 37) = 0;
        *((_DWORD *)v18 + 76) = 0;
        WTF::fastFree(v19, a2);
      }
      v21 = (WTF *)*((_QWORD *)v18 + 1);
      if (v18 + 24 != (char *)v21 && v21 != 0)
      {
        *((_QWORD *)v18 + 1) = 0;
        *(_DWORD *)((char *)a10 + v17 + 16) = 0;
        WTF::fastFree(v21, a2);
      }
      v17 += 584;
    }
    while (584 * a12 != v17);
    v16 = a10;
  }
  if (v14 != v16 && v16 != 0)
    WTF::fastFree(v16, a2);
  v24 = (WTF *)STACK[0x1260];
  if (LODWORD(STACK[0x126C]))
  {
    v25 = 0;
    v26 = 584 * LODWORD(STACK[0x126C]);
    do
    {
      v27 = (char *)v24 + v25;
      v28 = *(WTF **)((char *)v24 + v25 + 296);
      if ((WTF *)((char *)v24 + v25 + 312) != v28 && v28 != 0)
      {
        *((_QWORD *)v27 + 37) = 0;
        *((_DWORD *)v27 + 76) = 0;
        WTF::fastFree(v28, a2);
      }
      v30 = (WTF *)*((_QWORD *)v27 + 1);
      if (v27 + 24 != (char *)v30 && v30 != 0)
      {
        *((_QWORD *)v27 + 1) = 0;
        *(_DWORD *)((char *)v24 + v25 + 16) = 0;
        WTF::fastFree(v30, a2);
      }
      v25 += 584;
    }
    while (v26 != v25);
    v24 = (WTF *)STACK[0x1260];
  }
  if (&STACK[0x1270] != (unint64_t *)v24 && v24)
  {
    STACK[0x1260] = 0;
    LODWORD(STACK[0x1268]) = 0;
    WTF::fastFree(v24, a2);
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::ComposedTreeIterator::operator++(uint64_t result, WebCore::ShadowRoot *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_DWORD *)(result + 20);
  if (!v2)
    goto LABEL_32;
  v3 = result;
  v4 = *(_QWORD *)(result + 8) + 584 * v2 - 584;
  v5 = *(_QWORD *)v4;
  v6 = *(_WORD *)(*(_QWORD *)v4 + 28);
  if (*(_QWORD *)v4)
    v7 = (v6 & 8) == 0;
  else
    v7 = 1;
  if (!v7 && (*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2 = *(WebCore::ShadowRoot **)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (a2)
    {
      WebCore::ComposedTreeIterator::traverseShadowRoot((WebCore::ComposedTreeIterator *)result, a2);
      return v3;
    }
  }
  if (v2 > 1 || *(_BYTE *)result)
  {
    WebCore::ComposedTreeIterator::traverseNextInShadowTree((WebCore::ComposedTreeIterator *)result, a2);
    return v3;
  }
  if ((v6 & 4) != 0 && (v8 = *(_QWORD *)(v5 + 80)) != 0)
  {
    do
    {
      if ((*(_WORD *)(v8 + 28) & 0xA) != 0)
      {
        v9 = v8;
        goto LABEL_13;
      }
      v9 = 0;
      v8 = *(_QWORD *)(v8 + 56);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }
  do
  {
LABEL_13:
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
    {
      if (v9)
        goto LABEL_19;
      v14 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)(v4 + 8) + 16 * v14;
        *(_QWORD *)v4 = *(_QWORD *)(v15 - 16);
        *(_DWORD *)(v4 + 280) = *(_DWORD *)(v15 - 8);
        *(_DWORD *)(v4 + 20) = v14 - 1;
        return v3;
      }
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x194EAD02CLL);
    }
  }
  while ((*(_WORD *)(v5 + 28) & 0xA) == 0);
  if (v9)
  {
    v10 = (uint64_t *)(v4 + 8);
    *(_QWORD *)&v19 = v5;
    DWORD2(v19) = *(_DWORD *)(v4 + 280);
    v11 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v11 == *(_DWORD *)(v4 + 16))
    {
      v17 = v4;
      v18 = v9;
      v16 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v19);
      v4 = v17;
      v9 = v18;
      v11 = *(unsigned int *)(v17 + 20);
      v12 = *(_QWORD *)(v17 + 8);
      v13 = *v16;
    }
    else
    {
      v12 = *v10;
      v13 = v19;
    }
    *(_OWORD *)(v12 + 16 * v11) = v13;
    ++*(_DWORD *)(v4 + 20);
LABEL_19:
    ++*(_DWORD *)(v4 + 280);
    *(_QWORD *)v4 = v9;
    return v3;
  }
  else
  {
    *(_QWORD *)v4 = v5;
  }
  return result;
}

void WebCore::ComposedTreeIterator::Context::~Context(WebCore::ComposedTreeIterator::Context *this, void *a2)
{
  WTF *v2;
  WTF *v4;
  WebCore::ComposedTreeIterator::Context *v6;

  v2 = (WTF *)*((_QWORD *)this + 37);
  if ((WebCore::ComposedTreeIterator::Context *)((char *)this + 312) != v2 && v2 != 0)
  {
    *((_QWORD *)this + 37) = 0;
    *((_DWORD *)this + 76) = 0;
    v6 = this;
    WTF::fastFree(v2, a2);
    this = v6;
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if ((WebCore::ComposedTreeIterator::Context *)((char *)this + 24) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
}

uint64_t WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v9 >> 28))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 16 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x11)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 16;
    goto LABEL_11;
  }
  if (!(v5 >> 28))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 16 * v8);
    if ((void *)(v6 + 16) != v7 && v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<WebCore::IntPoint,WebCore::IntPoint>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::pair<WebCore::IntPoint,WebCore::IntPoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  __int128 v25;
  _DWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(20 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (int64x2_t *)(v9 + 20);
    v13 = vdupq_n_s64(0x8000000000000000);
    do
    {
      v12[-1].i32[3] = -1;
      *v12 = v13;
      v12 = (int64x2_t *)((char *)v12 + 20);
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (_DWORD *)(v6 + 20 * v14);
      if (*v16 <= 0xFFFFFFFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9 * ((*v16 + ~(*v16 << 15)) ^ ((*v16 + ~(*v16 << 15)) >> 10));
        v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
        v22 = v21 ^ HIWORD(v21);
        do
        {
          v23 = v22 & v18;
          v24 = (_DWORD *)(v17 + 20 * v23);
          v22 = ++v19 + v23;
        }
        while (*v24 != -1);
        v25 = *(_OWORD *)v16;
        v24[4] = v16[4];
        *(_OWORD *)v24 = v25;
        if (v16 == a3)
          v15 = v24;
      }
      ++v14;
    }
    while (v14 != v7);
  }
  else
  {
    v15 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v15;
}

WebCore::Node *WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::add(WebCore::Node *result, uint64_t *a2, uint64_t *a3)
{
  WebCore::Node *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  void *v28;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (WebCore::Node *)WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_37;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  if (!v9)
    goto LABEL_15;
  if ((*(_BYTE *)(v9 + 22) & 2) != 0)
  {
    *(_DWORD *)(v9 + 24) += 2;
LABEL_15:
    *v14 = v9;
    goto LABEL_16;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  result = (WebCore::Node *)*v14;
  *v14 = v9;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v28);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    else
    {
      result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 96))(result);
    }
  }
LABEL_16:
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_27;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_32:
      result = (WebCore::Node *)WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash(a2, v25, v14);
      v14 = (uint64_t *)result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_36;
    }
LABEL_27:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_32;
  }
LABEL_36:
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_37:
  *(_QWORD *)v5 = v14;
  *((_QWORD *)v5 + 1) = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v26 + 24) == 2)
              {
                if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v26, v10);
              }
              else
              {
                *(_DWORD *)(v26 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int *WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::remove(uint64_t *a1, unsigned int **a2)
{
  unsigned int *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = *a2;
  *a2 = (unsigned int *)-1;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    else
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int *)WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EventHandler::mouseMoved(WebEvent *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E32DD608;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

void sub_194EAD94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EventHandler::mouseMoved(WebEvent *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E32DD608;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_194EADA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EventHandler::mouseMoved(WebEvent *)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 296);
  if (v1)
  {
    *(_DWORD *)(v1 + 24) += 2;
    result = WebCore::Document::contentChangeObserver((WebCore::Document *)v1);
    if (*(_BYTE *)(result + 152))
      v3 = 0;
    else
      v3 = *(_BYTE *)(result + 158) == 0;
    if (v3 && *(_BYTE *)(result + 157) == 0)
    {
      v5 = result;
      if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        result = WebCore::ContentChangeObserver::hasPendingActivity((WebCore::ContentChangeObserver *)result);
        if ((result & 1) == 0)
        {
          if (*(_DWORD *)(v5 + 120) == 1)
            *(_DWORD *)(v5 + 120) = 0;
          v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 528) + 8)
                                                             + 24)
                                                 + 8)
                                     + 48)
                         + 16);
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 648))(v6);
          result = WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v5, v7);
        }
      }
    }
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalFrame::approximateNodeAtViewportLocationLegacy(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0,WebCore::Node *,WebCore::HitTestResult const&,WebCore::Node *,WebCore::IntRect *>::call(uint64_t a1, WebCore::Node *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::RenderObject *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const WebCore::FloatRect *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _DWORD v48[4];
  char v49;
  char v50[8];
  uint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  v7 = *((_QWORD *)a2 + 9);
  if (v7)
    v8 = v7 == a3;
  else
    v8 = 1;
  if (v8)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  while (1)
  {
    if ((*(_WORD *)(v7 + 28) & 0x10) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
      if (v14 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        if (v12)
        {
          v13 = 0;
          v11 = 1;
        }
        else
        {
          v11 = 1;
          if (!WebCore::Node::computeEditability(v7, 1, 0))
          {
            v16 = 0;
            v12 = 0;
            v15 = 1;
            goto LABEL_34;
          }
          if ((*(_WORD *)(v7 + 28) & 0x10) == 0)
          {
            v16 = 0;
            v15 = 0;
            v12 = v7;
            goto LABEL_34;
          }
          v13 = 0;
          v14 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
          v12 = v7;
        }
      }
      else if (!v12)
      {
LABEL_13:
        v15 = 1;
        goto LABEL_18;
      }
      if (v14 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        v16 = 0;
        v15 = 0;
        goto LABEL_34;
      }
      v15 = 0;
      v16 = 0;
      if (v14 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
        goto LABEL_34;
LABEL_18:
      if ((v13 & 1) != 0)
        goto LABEL_19;
      v16 = 0;
LABEL_34:
      v13 = v16 & v15;
      v19 = v12;
      goto LABEL_35;
    }
    if (!v12)
      goto LABEL_13;
    v15 = 0;
    v16 = 0;
    if ((v13 & 1) == 0)
      goto LABEL_34;
LABEL_19:
    v17 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v17)
    {
      v16 = 1;
      goto LABEL_34;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v17 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v18 = *(_DWORD *)(v17 + 120) & 0x1F80000;
    v16 = 1;
    v19 = v7;
    v13 = 1;
    if (v18 != 0x200000)
      goto LABEL_34;
LABEL_35:
    if (WebCore::nodeWillRespondToMouseEvents((WebCore *)v7, a2))
      break;
    v21 = (uint64_t *)(v7 + 32);
    v20 = *(_QWORD *)(v7 + 32);
    if (!v20
      || (*(_WORD *)(v20 + 28) & 8) == 0
      || (v22 = *(_QWORD *)(v20 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v24 = *(_QWORD *)(v22 + 88)) == 0
      || (v25 = *(_QWORD *)(v24 + 224)) == 0
      || (v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v7)) == 0)
    {
      if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
      {
        v26 = *(_QWORD *)(v7 + 200);
        if (!v26)
          return 0;
        v21 = (uint64_t *)(v26 + 8);
      }
      v23 = *v21;
    }
    v9 = 0;
    if (v23)
    {
      v7 = v23;
      v12 = v19;
      if (v23 != a3)
        continue;
    }
    return v9;
  }
  if ((v11 & 1) != 0)
    v9 = v19;
  else
    v9 = v7;
  if (a4)
  {
    if (v9 != *((_QWORD *)a2 + 9) || (v27 = *((_QWORD *)a2 + 10), v9 == v27))
    {
      if (v9)
        goto LABEL_61;
    }
    else if ((*(_WORD *)(v9 + 28) & 0x10) != 0
           && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
    {
      WebCore::HTMLAreaElement::computePath((WebCore::HTMLAreaElement *)v9, (WebCore::RenderObject *)(*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL), (uint64_t)v50);
      WebCore::Path::fastBoundingRect((WebCore::Path *)v50);
      v48[0] = v31;
      v48[1] = v32;
      v48[2] = v33;
      v48[3] = v34;
      v38 = WebCore::enclosingLayoutRect((WebCore *)v48, v35);
      v40 = v39;
      if (v52 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v52])(&v49, &v51);
      v41 = (int)v38 / 64;
      v42 = v38 - (v36 & 0xFFFFFFC0);
      v43 = HIDWORD(v38) - (v37 & 0xFFFFFFC0);
      v44 = v42 + v40;
      if (__OFADD__(v42, (_DWORD)v40))
        v44 = (v42 >> 31) + 0x7FFFFFFF;
      v45 = v43 + HIDWORD(v40);
      if (__OFADD__(v43, HIDWORD(v40)))
        v45 = (v43 >> 31) + 0x7FFFFFFF;
      v46 = v43 + 32;
      v47 = v42 + 32;
      v29 = (v41 + (v47 >> 6)) | ((unint64_t)(SHIDWORD(v38) / 64 + (v46 >> 6)) << 32);
      v30 = (v44 / 64 - (v47 >> 6) + ((int)(v44 - (v41 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v45 / 64 - (v46 >> 6) + ((int)(v45 - (v41 & 0xFFFFFFC0) + 32) >> 6)) << 32);
LABEL_63:
      *a4 = v29;
      a4[1] = v30;
    }
    else
    {
LABEL_61:
      v28 = (WebCore::RenderObject *)(*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL);
      if (v28)
      {
        v29 = WebCore::RenderObject::absoluteBoundingBoxRect(v28, 1, 0);
        goto LABEL_63;
      }
    }
  }
  return v9;
}

WebCore *WTF::Detail::CallableWrapper<WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(WebCore::FloatPoint const&,WebCore::FloatPoint&)::$_0,WebCore::Node *,WebCore::HitTestResult const&,WebCore::Node *,WebCore::IntRect *>::call(WebCore *result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::RenderObject *v25;
  unint64_t v26;

  if (a4)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  v6 = *(_QWORD *)(a2 + 72);
  if (v6)
    v7 = v6 == a3;
  else
    v7 = 1;
  if (v7)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v9 = *(_QWORD *)(StatusReg + 736);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
      v10 = WebCore::threadGlobalDataSlow(result);
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v11 = *(_QWORD *)(v10 + 40);
    }
    v12 = *(_QWORD *)(v6 + 16);
    if ((v12 & 0x1000000000000) != 0)
    {
      v19 = v12 & 0xFFFFFFFFFFFFLL;
      v20 = *(unsigned int *)(v19 + 28);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD **)(v19 + 16);
        v22 = *(_QWORD *)(v11 + 584);
        v23 = 32 * v20;
        while (*v21 != v22)
        {
          v21 += 4;
          v23 -= 32;
          if (!v23)
            goto LABEL_16;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6))
          break;
      }
    }
LABEL_16:
    v14 = (uint64_t *)(v6 + 32);
    v13 = *(_QWORD *)(v6 + 32);
    if (!v13
      || (*(_WORD *)(v13 + 28) & 8) == 0
      || (v15 = *(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v17 = *(_QWORD *)(v15 + 88)) == 0
      || (v18 = *(_QWORD *)(v17 + 224)) == 0
      || (v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v6)) == 0)
    {
      if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
      {
        v24 = *(_QWORD *)(v6 + 200);
        if (!v24)
          return 0;
        v14 = (uint64_t *)(v24 + 8);
      }
      v16 = *v14;
    }
    result = 0;
    if (v16)
    {
      v6 = v16;
      if (v16 != a3)
        continue;
    }
    return result;
  }
  if (a4)
  {
    v25 = (WebCore::RenderObject *)(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL);
    if (v25)
    {
      *a4 = WebCore::RenderObject::absoluteBoundingBoxRect(v25, 1, 0);
      a4[1] = v26;
    }
  }
  return (WebCore *)v6;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalFrame::nodeRespondingToScrollWheelEvents(WebCore::FloatPoint const&)::$_0,WebCore::Node *,WebCore::HitTestResult const&,WebCore::Node *,WebCore::IntRect *>::call(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char canScroll;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (a4)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  v5 = *(_QWORD *)(a2 + 72);
  if (v5)
    v6 = v5 == a3;
  else
    v6 = 1;
  if (v6)
    return 0;
  v8 = 0;
  while (1)
  {
    if ((*(_WORD *)(v5 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      return v8;
    }
    v9 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v9)
      goto LABEL_25;
    v10 = *(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7;
    if (v10 == 1
      && (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 4) != 0
      && *(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 44)
    {
      v11 = 1;
    }
    else
    {
      if (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 44)
        goto LABEL_23;
      v11 = *(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 4;
    }
    if (v10 != 1 || v11 == 0)
      break;
    canScroll = WebCore::RenderTextControl::canScroll((WebCore::RenderTextControl *)(*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL));
    result = v5;
    if ((canScroll & 1) == 0)
    {
LABEL_23:
      v14 = v9;
      if ((*(_BYTE *)(v9 + 45) & 2) != 0)
      {
        v14 = *(_QWORD *)(v9 + 32);
        if (v14)
          v14 = *(_QWORD *)(v14 + 8);
      }
      if ((*(_BYTE *)(v9 + 22) & 1) != 0)
      {
        v15 = *(_QWORD *)(v14 + 96);
        if (((unsigned __int16)v15 >> 13) - 3 < 2
          || (result = v8, ((v15 >> 10) & 7) - 3 <= 1))
        {
          result = v5;
        }
        goto LABEL_29;
      }
LABEL_25:
      result = v8;
    }
LABEL_29:
    v5 = *(_QWORD *)(v5 + 32);
    if (v5)
      v16 = v5 == a3;
    else
      v16 = 1;
    v8 = result;
    if (v16)
      return result;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

WebCore::EventTarget *WTF::Detail::CallableWrapper<WebCore::LocalFrame::dispatchPageHideEventBeforePause(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, WebCore::EventTarget *a2)
{
  return WebCore::Document::dispatchPagehideEvent(a2, 1);
}

WebCore::EventTarget *WTF::Detail::CallableWrapper<WebCore::LocalFrame::dispatchPageShowEventBeforeResume(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, WebCore::EventTarget *a2)
{
  return WebCore::Document::dispatchPageshowEvent(a2, 1);
}

uint64_t WebCore::JSSQLError::destroy(WebCore::JSSQLError *this, JSC::JSCell *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(WTF::StringImpl **)(result + 8);
      *(_QWORD *)(result + 8) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
        {
          v7 = result;
          WTF::StringImpl::destroy(v6, a2);
          result = v7;
        }
        else
        {
          *(_DWORD *)v6 -= 2;
        }
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::JSSQLError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSQLErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSQLErrorPrototype::create(WebCore::JSSQLErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSSQLError::s_info, (uint64_t)&WebCore::JSSQLErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLError>,(WebCore::DOMConstructorID)281>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2248);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSQLError::s_info + ~((_QWORD)&WebCore::JSSQLError::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLError::s_info + ~((_QWORD)&WebCore::JSSQLError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSQLError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSQLError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSQLErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSQLErrorPrototype::create((WebCore::JSSQLErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSQLError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSQLError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<8u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSQLError::s_info, (uint64_t)&WebCore::JSSQLErrorConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2248) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSQLErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSQLErrorPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLError>,(WebCore::DOMConstructorID)281>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSQLError_code(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsSQLError_message(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::String::isolatedCopy();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

uint64_t WebCore::JSSQLErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSSQLErrorOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  do
    v4 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v4 + 1, (unsigned int *)v3));
  v7 = *(_QWORD *)(a3 + 32);
  v5 = (uint64_t *)(a3 + 32);
  v6 = v7;
  if (!v7)
    goto LABEL_18;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v6 + 16 * v12);
  if (v13 != v3)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v6 + 16 * v12);
      ++v14;
      if (v13 == v3)
        goto LABEL_8;
    }
    v12 = *(unsigned int *)(v6 - 4);
  }
  if (v12 == *(_DWORD *)(v6 - 4))
    goto LABEL_18;
LABEL_8:
  v15 = (_QWORD *)(v6 + 16 * v12);
  *v15 = -1;
  v18 = v15[1];
  v17 = v15 + 1;
  v16 = v18;
  if (v18)
  {
    *(_QWORD *)(v16 + 8) = 3;
    *v17 = 0;
  }
  ++*(_DWORD *)(*v5 - 16);
  v19 = *v5;
  v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v5;
  if (*v5
    && ((v22 = 6 * *(_DWORD *)(v21 - 12), v23 = *(_DWORD *)(v21 - 4), v22 < v23) ? (v24 = v23 >= 9) : (v24 = 0), v24))
  {
    WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v23 >> 1, 0);
    if (!v3)
      return;
  }
  else
  {
LABEL_18:
    if (!v3)
      return;
  }
  do
  {
    v25 = __ldaxr((unsigned int *)v3);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)v3));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)v3);
    v27 = *(WTF::StringImpl **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, a2);
      else
        *(_DWORD *)v27 -= 2;
    }
    WTF::fastFree((WTF *)v3, a2);
  }
}

unint64_t WebCore::wrap<WebCore::SQLError>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(unsigned int **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(unsigned int **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  do
    v14 = __ldaxr(a2);
  while (__stlxr(v14 + 1, a2));
  v15 = *(_QWORD *)(a1 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSQLError::s_info + ~((_QWORD)&WebCore::JSSQLError::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLError::s_info + ~((_QWORD)&WebCore::JSSQLError::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSQLError::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSQLError::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSQLErrorPrototype::createStructure(v24, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSQLErrorPrototype::create((WebCore::JSSQLErrorPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSQLError::createStructure(v24, a1, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a1, v29, (uint64_t)&WebCore::JSSQLError::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a1 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 2272);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 2272))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 2272);
    *(_QWORD *)(v36 + 2272) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 2272);
  *(_QWORD *)(v32 + 2272) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE81500 & 1) == 0)
  {
    _MergedGlobals_116 = (uint64_t)&off_1E32E8120;
    byte_1ECE81500 = 1;
  }
  v54 = (WTF *)a2;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &_MergedGlobals_116;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSQLResultSet::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v5 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v5)
        WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(v5, a2);
      return WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

uint64_t WebCore::JSSQLResultSet::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSQLResultSetPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSQLResultSetPrototype::create(WebCore::JSSQLResultSetPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSSQLResultSet::s_info, &WebCore::JSSQLResultSetPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLResultSet>,(WebCore::DOMConstructorID)282>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2256);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLResultSet>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSQLResultSet::s_info + ~((_QWORD)&WebCore::JSSQLResultSet::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLResultSet::s_info + ~((_QWORD)&WebCore::JSSQLResultSet::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSQLResultSet::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSQLResultSet::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSQLResultSetPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSQLResultSetPrototype::create((WebCore::JSSQLResultSetPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSQLResultSet::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSQLResultSet::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2256) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSQLResultSetConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSQLResultSetPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLResultSet>,(WebCore::DOMConstructorID)282>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSQLResultSet_rows(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 8);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)v2;
  v14 = *(_QWORD *)(v3 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSSQLResultSetRowList::s_info
         + ~((_QWORD)&WebCore::JSSQLResultSetRowList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLResultSetRowList::s_info
                                                                       + ~((_QWORD)&WebCore::JSSQLResultSetRowList::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSSQLResultSetRowList::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSSQLResultSetRowList::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSSQLResultSetRowListPrototype::createStructure(v23, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSQLResultSetRowListPrototype::create((WebCore::JSSQLResultSetRowListPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSSQLResultSetRowList::createStructure(v23, v3, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v3, v28, (uint64_t)&WebCore::JSSQLResultSetRowList::s_info);
LABEL_16:
  v29 = *(_QWORD *)(v3 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 2288);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 2288))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 2288);
    *(_QWORD *)(v35 + 2288) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 2288);
  *(_QWORD *)(v31 + 2288) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v3 + 3320);
  if ((byte_1ECE81520 & 1) == 0)
  {
    qword_1ECE81518 = (uint64_t)&off_1E32E8180;
    byte_1ECE81520 = 1;
  }
  v53 = v2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81518;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

unint64_t WebCore::jsSQLResultSet_insertId(JSC *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  JSC::VM *v6;
  JSValue v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD v11[2];
  int v12;
  char v13[8];
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 24))
  {
    v11[0] = *(_QWORD *)(v2 + 16);
    v12 = 0;
    if (v11[0] == SLODWORD(v11[0]))
      v3 = LODWORD(v11[0]) | 0xFFFE000000000000;
    else
      v3 = COERCE__INT64((double)v11[0]) + 0x2000000000000;
    v4 = 0;
  }
  else
  {
    v6 = (JSC::VM *)*((_QWORD *)this + 7);
    LOBYTE(v11[0]) = 12;
    v12 = 1;
    v13[0] = 12;
    v11[1] = 0;
    v14 = 0;
    if (!*((_QWORD *)v6 + 2))
    {
      v7.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v14);
      JSC::VM::throwException(v6, this, v7);
      v9 = v14;
      v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v3 = 0;
    v4 = 1;
  }
  ((void (*)(char *, _QWORD *))off_1E32EDCE0[v4])(v13, v11);
  return v3;
}

unint64_t WebCore::jsSQLResultSet_rowsAffected(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
}

uint64_t WebCore::JSSQLResultSetOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSSQLResultSetOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  do
    v4 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v4 + 1, (unsigned int *)v3));
  v7 = *(_QWORD *)(a3 + 32);
  v5 = (uint64_t *)(a3 + 32);
  v6 = v7;
  if (!v7)
    goto LABEL_18;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v6 + 16 * v12);
  if (v13 != v3)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v6 + 16 * v12);
      ++v14;
      if (v13 == v3)
        goto LABEL_8;
    }
    v12 = *(unsigned int *)(v6 - 4);
  }
  if (v12 == *(_DWORD *)(v6 - 4))
    goto LABEL_18;
LABEL_8:
  v15 = (_QWORD *)(v6 + 16 * v12);
  *v15 = -1;
  v18 = v15[1];
  v17 = v15 + 1;
  v16 = v18;
  if (v18)
  {
    *(_QWORD *)(v16 + 8) = 3;
    *v17 = 0;
  }
  ++*(_DWORD *)(*v5 - 16);
  v19 = *v5;
  v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v5;
  if (*v5
    && ((v22 = 6 * *(_DWORD *)(v21 - 12), v23 = *(_DWORD *)(v21 - 4), v22 < v23) ? (v24 = v23 >= 9) : (v24 = 0), v24))
  {
    WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v23 >> 1, 0);
    if (!v3)
      return;
  }
  else
  {
LABEL_18:
    if (!v3)
      return;
  }
  do
  {
    v25 = __ldaxr((unsigned int *)v3);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)v3));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)v3);
    v27 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v27)
      WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(v27, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
}

uint64_t WebCore::JSSQLResultSetRowList::destroy(WebCore::JSSQLResultSetRowList *this, JSC::JSCell *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSSQLResultSetRowList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSQLResultSetRowListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSQLResultSetRowListPrototype::create(WebCore::JSSQLResultSetRowListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSQLResultSetRowList::s_info, &WebCore::JSSQLResultSetRowListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLResultSetRowList>,(WebCore::DOMConstructorID)283>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2264);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLResultSetRowList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSQLResultSetRowList::s_info
         + ~((_QWORD)&WebCore::JSSQLResultSetRowList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLResultSetRowList::s_info
                                                                       + ~((_QWORD)&WebCore::JSSQLResultSetRowList::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSQLResultSetRowList::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSQLResultSetRowList::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSQLResultSetRowListPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSQLResultSetRowListPrototype::create((WebCore::JSSQLResultSetRowListPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSQLResultSetRowList::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSQLResultSetRowList::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2264) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSQLResultSetRowListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSQLResultSetRowListPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLResultSetRowList>,(WebCore::DOMConstructorID)283>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSQLResultSetRowList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_DWORD *)(v2 + 36);
  if (v3)
  {
    v4 = v3 / *(_DWORD *)(v2 + 20);
    if ((v4 & 0x80000000) != 0)
      return COERCE__INT64((double)v4) + 0x2000000000000;
  }
  else
  {
    v4 = 0;
  }
  return v4 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSQLResultSetRowListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSSQLResultSetRowListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(v3, a2);
}

void WebCore::JSSQLStatementCallback::~JSSQLStatementCallback(WebCore::JSSQLStatementCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSSQLStatementCallback::handleEvent(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  WebCore::SQLTransaction *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  unint64_t SlowCase;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  int v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v35;
  JSC::Structure *v36;
  JSC::JSCell *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *Allocator;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  JSC::Structure *v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  JSValue v69;
  unint64_t v70;
  _QWORD *v71;
  char v72[8];
  uint64_t v73;
  WTF *v74;
  _OWORD v75[4];
  uint64_t v76;
  _BYTE v77[8];
  _QWORD *v78;
  uint64_t v79[2];

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  v6 = (unsigned int *)(a1 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = **(_QWORD **)(a1 + 24);
  if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8;
  MEMORY[0x19AEA3294](v77, *(_QWORD *)(v9 + 56));
  v72[0] = 0;
  v74 = (WTF *)((char *)v75 + 8);
  memset(v75, 0, sizeof(v75));
  v76 = 0;
  v12 = (void *)WebCore::toJS((WebCore *)v9, (JSC::JSGlobalObject *)a2, v10, v11);
  *((_QWORD *)&v75[0] + 1) = v12;
  v73 = 0x800000001;
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 3320) + 32);
  if (!v13)
  {
    do
LABEL_15:
      v23 = __ldaxr(a3);
    while (__stlxr(v23 + 1, a3));
    v24 = *(_QWORD *)(v9 + 3296);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = ((unint64_t)&WebCore::JSSQLResultSet::s_info + ~((_QWORD)&WebCore::JSSQLResultSet::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLResultSet::s_info + ~((_QWORD)&WebCore::JSSQLResultSet::s_info << 32)) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      v30 = *(char ***)(v24 + 16 * v29);
      if (v30 == &WebCore::JSSQLResultSet::s_info)
      {
LABEL_21:
        v32 = *(_QWORD *)(v24 + 16 * v29 + 8);
        if (v32)
          goto LABEL_23;
      }
      else
      {
        v31 = 1;
        while (v30)
        {
          v29 = ((_DWORD)v29 + v31) & v25;
          v30 = *(char ***)(v24 + 16 * v29);
          ++v31;
          if (v30 == &WebCore::JSSQLResultSet::s_info)
            goto LABEL_21;
        }
      }
    }
    v33 = *(uint64_t **)(v9 + 56);
    Structure = WebCore::JSSQLResultSetPrototype::createStructure(v33, v9, *(JSC::JSCell **)(v9 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v37 = (JSC::JSCell *)WebCore::JSSQLResultSetPrototype::create((WebCore::JSSQLResultSetPrototype *)v33, Structure, v35, v36);
    v38 = WebCore::JSSQLResultSet::createStructure(v33, v9, v37);
    v32 = WebCore::cacheDOMStructure((JSCell *)v9, v38, (uint64_t)&WebCore::JSSQLResultSet::s_info);
LABEL_23:
    v39 = *(_QWORD *)(v9 + 56);
    v40 = *(_QWORD *)(v39 + 41456);
    v41 = *(_QWORD *)(v40 + 23536);
    v42 = *(_QWORD **)(v41 + 2280);
    if (v42)
      goto LABEL_44;
    v43 = *(_QWORD *)(v40 + 22648);
    if (__ldaxr((unsigned __int8 *)v43))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v43))
    {
      goto LABEL_29;
    }
    MEMORY[0x19AEA534C](v43);
LABEL_29:
    v46 = *(_QWORD *)(v43 + 2824);
    if (!*(_QWORD *)(v46 + 2280))
    {
      v47 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)v79, "IsoSpace T");
      v78 = 0;
      MEMORY[0x19AEA3204](v47, v79, v39 + 192, v39 + 1872, 32, 8, &v78);
      v49 = (uint64_t)v78;
      v78 = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      v50 = (WTF *)v79[0];
      v79[0] = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 1)
          WTF::fastFree(v50, v48);
        else
          --*(_DWORD *)v50;
      }
      v51 = *(_QWORD *)(v46 + 2280);
      *(_QWORD *)(v46 + 2280) = v47;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v52 = *(_QWORD *)(v41 + 2280);
    *(_QWORD *)(v41 + 2280) = v42;
    if (v52)
    {
      v53 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v53, v54);
    }
    v55 = __ldxr((unsigned __int8 *)v43);
    if (v55 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v43))
      {
LABEL_44:
        SlowCase = v42[3];
        if (SlowCase >= v42[4])
        {
          SlowCase = v42[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_46;
          }
          v70 = *(_QWORD *)(SlowCase + 8) ^ v42[6];
          v42[4] = SlowCase + HIDWORD(v70);
          v42[5] = SlowCase + (int)v70;
        }
        v42[3] = SlowCase + 32;
LABEL_46:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v32);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (*(_BYTE *)(v39 + 755))
          __dmb(0xAu);
        v56 = *(_QWORD *)(v9 + 3320);
        if ((byte_1ECE81510 & 1) == 0)
        {
          qword_1ECE81508 = (uint64_t)&off_1E32E8150;
          byte_1ECE81510 = 1;
        }
        v79[0] = (uint64_t)a3;
        if ((SlowCase & 8) != 0)
          v57 = (SlowCase - 112) | 1;
        else
          v57 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v57 & 1) != 0)
          v58 = v57 + 47;
        else
          v58 = *(_QWORD *)v57 + 32;
        Allocator = *(_QWORD **)(v58 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v58 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1ECE81508;
        Allocator[2] = v56;
        v78 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), v79, (uint64_t *)&v78);
        if (v78)
          v78[1] = 3;
        goto LABEL_59;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v43);
    goto LABEL_44;
  }
  v14 = *(_DWORD *)(v13 - 8);
  v15 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = *(unsigned int **)(v13 + 16 * v18);
  if (v19 != a3)
  {
    v20 = 1;
    while (v19)
    {
      v18 = ((_DWORD)v18 + v20) & v14;
      v19 = *(unsigned int **)(v13 + 16 * v18);
      ++v20;
      if (v19 == a3)
        goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_12:
  v21 = *(_QWORD *)(v13 + 16 * v18 + 8);
  if (!v21)
    goto LABEL_15;
  if ((*(_BYTE *)(v21 + 8) & 3) != 0)
    goto LABEL_15;
  SlowCase = *(_QWORD *)v21;
  if (!*(_QWORD *)v21)
    goto LABEL_15;
LABEL_59:
  v60 = v73;
  if ((_DWORD)v73 == HIDWORD(v73) || v74 != (WTF *)((char *)v75 + 8) && v74)
  {
    v69.super.isa = (Class)SlowCase;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v73, v69) == 1)
      v72[0] = 1;
  }
  else
  {
    *((_QWORD *)v74 + v73) = SlowCase;
    LODWORD(v73) = v60 + 1;
  }
  v79[0] = 0;
  v61 = *(uint64_t **)(a1 + 24);
  v62 = *v61;
  if (*v61
    && (*(_BYTE *)(v62 + 8) & 3) == 0
    && *(_QWORD *)v62
    && ((v63 = v61[2]) == 0 || (*(_BYTE *)(v63 + 8) & 3) != 0 ? (v64 = 0) : (v64 = *(JSC::Structure **)v63),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v62, v64, 10, (uint64_t)v72, 0, 0, v79),
        (v12 = (void *)v79[0]) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), v79[0], 0, 0, 0);
    v45 = 1;
  }
  else
  {
    v45 = 0;
  }
  v65 = *(uint64_t **)&v75[0];
  if (*(_QWORD *)&v75[0])
  {
    v79[0] = (uint64_t)&v73;
    v71 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v75[0], v79);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v65, v71);
  }
  if (v74 != (WTF *)((char *)v75 + 8) && v74)
    WTF::fastFree(v74, v12);
  MEMORY[0x19AEA32A0](v77);
  do
  {
    v66 = __ldaxr(v6);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v6));
  if (!v67)
  {
    atomic_store(1u, (unsigned int *)(a1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  }
  return v45;
}

void WebCore::JSSQLStatementErrorCallback::~JSSQLStatementErrorCallback(WebCore::JSSQLStatementErrorCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebCore::JSSQLStatementErrorCallback::handleEvent@<X0>(unsigned int *result@<X0>, void *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v9;
  int v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WebCore *v15;
  WebCore::JSDOMGlobalObject *v16;
  WebCore::SQLTransaction *v17;
  objc_class *v18;
  JSValue v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  JSC::Structure *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  JSC::VM *v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  BOOL v33;
  BOOL v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  double v40;
  char v41[8];
  uint64_t v42;
  WTF *v43;
  _OWORD v44[4];
  uint64_t v45;
  _BYTE v46[8];
  objc_class *v47;

  v5 = *((_QWORD *)result + 1);
  if (!v5)
    goto LABEL_27;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_27;
  v9 = result;
  v10 = *(unsigned __int8 *)(v6 + 178);
  if (*(_BYTE *)(v6 + 178))
  {
    if (v10 == 1 || v10 == 2)
      ++*(_DWORD *)(v6 + 216);
  }
  else
  {
    *(_DWORD *)(v6 - 264) += 2;
  }
  if (*(_BYTE *)(v6 + 179))
  {
    v11 = 0;
    if (!v10)
    {
LABEL_7:
      if (*(_DWORD *)(v6 - 264) == 2)
      {
        if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), a2);
      }
      else
      {
        *(_DWORD *)(v6 - 264) -= 2;
      }
      goto LABEL_9;
    }
  }
  else
  {
    v11 = *(_BYTE *)(v6 + 180) == 0;
    if (!v10)
      goto LABEL_7;
  }
  if (v10 == 1)
  {
    if (*(_DWORD *)(v6 + 216) == 1)
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 40))(v6 - 96);
    else
      --*(_DWORD *)(v6 + 216);
  }
  else if (v10 == 2)
  {
    result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
  }
LABEL_9:
  if (!v11)
  {
LABEL_27:
    *(_QWORD *)a4 = 0x100000002;
    return result;
  }
  v12 = v9 + 4;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = **((_QWORD **)v9 + 3);
  if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
    v15 = 0;
  else
    v15 = *(WebCore **)v14;
  MEMORY[0x19AEA3294](v46, *((_QWORD *)v15 + 7));
  v41[0] = 0;
  v43 = (WTF *)((char *)v44 + 8);
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  *((_QWORD *)&v44[0] + 1) = WebCore::toJS(v15, (JSC::JSGlobalObject *)a2, v16, v17);
  v42 = 0x800000001;
  v18 = (objc_class *)WebCore::wrap<WebCore::SQLError>((uint64_t)v15, a3);
  v19.super.isa = v18;
  v20 = v42;
  if ((_DWORD)v42 == HIDWORD(v42) || v43 != (WTF *)((char *)v44 + 8) && v43)
  {
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v42, v19) == 1)
      v41[0] = 1;
  }
  else
  {
    *((_QWORD *)v43 + v42) = v18;
    LODWORD(v42) = v20 + 1;
  }
  v47 = 0;
  v21 = (uint64_t *)*((_QWORD *)v9 + 3);
  v22 = *v21;
  if (*v21 && (*(_BYTE *)(v22 + 8) & 3) == 0 && *(_QWORD *)v22)
  {
    v23 = v21[2];
    if (!v23 || (*(_BYTE *)(v23 + 8) & 3) != 0)
      v24 = 0;
    else
      v24 = *(JSC::Structure **)v23;
    v25 = WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v22, v24, 10, (uint64_t)v41, 0, 0, (uint64_t *)&v47);
    v19.super.isa = v47;
    if (v47)
    {
      WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*((_QWORD *)v9 + 3) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v47, 0, 0, 0);
      goto LABEL_26;
    }
    v27 = v25;
    v28 = (JSC::VM *)*((_QWORD *)v15 + 7);
    if (v27 >= 0xFFFE000000000000)
    {
      v33 = (_DWORD)v27 == 0;
      goto LABEL_38;
    }
    *(_QWORD *)&v40 = v27 - 0x2000000000000;
    if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v40 <= 0.0)
      {
        v34 = v40 < 0.0;
        goto LABEL_41;
      }
      goto LABEL_52;
    }
    if ((v27 & 0xFFFE000000000002) != 0)
    {
      v34 = v27 == 7;
      goto LABEL_41;
    }
  }
  else
  {
    v27 = 0;
    v28 = (JSC::VM *)*((_QWORD *)v15 + 7);
  }
  v29 = *(unsigned __int8 *)(v27 + 5);
  if (v29 == 3)
  {
    v32 = *(_DWORD *)(v27 + 8);
LABEL_37:
    v33 = v32 == 0;
    goto LABEL_38;
  }
  if (v29 == 2)
  {
    v30 = *(_QWORD *)(v27 + 8);
    v31 = (int *)(v27 + 16);
    if ((v30 & 1) == 0)
      v31 = (int *)(v30 + 4);
    v32 = *v31;
    goto LABEL_37;
  }
  v38 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v38 + 10) & 1) == 0)
  {
LABEL_52:
    v34 = 1;
    goto LABEL_41;
  }
  v33 = *(_QWORD *)(v38 + 40) == (_QWORD)v15;
LABEL_38:
  v34 = !v33;
LABEL_41:
  if (!*((_DWORD *)v28 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v28))
  {
    v26 = 0;
    *(_BYTE *)a4 = v34;
    goto LABEL_43;
  }
LABEL_26:
  v26 = 1;
  *(_DWORD *)a4 = 1;
LABEL_43:
  *(_DWORD *)(a4 + 4) = v26;
  v35 = *(uint64_t **)&v44[0];
  if (*(_QWORD *)&v44[0])
  {
    v47 = (objc_class *)&v42;
    v39 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v44[0], (uint64_t *)&v47);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v35, v39);
  }
  if (v43 != (WTF *)((char *)v44 + 8) && v43)
    WTF::fastFree(v43, v19.super.isa);
  result = (unsigned int *)MEMORY[0x19AEA32A0](v46);
  do
  {
    v36 = __ldaxr(v12);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v12));
  if (!v37)
  {
    atomic_store(1u, v9 + 4);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
  }
  return result;
}

unsigned int *WebCore::JSSQLTransaction::destroy(WebCore::JSSQLTransaction *this, JSCell *a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    v4 = result + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::JSSQLTransaction::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSQLTransactionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSQLTransactionPrototype::create(WebCore::JSSQLTransactionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSQLTransaction::s_info, (uint64_t)&WebCore::JSSQLTransactionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLTransaction>,(WebCore::DOMConstructorID)284>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2272);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLTransaction>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSQLTransaction::s_info + ~((_QWORD)&WebCore::JSSQLTransaction::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLTransaction::s_info + ~((_QWORD)&WebCore::JSSQLTransaction::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSQLTransaction::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSQLTransaction::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSQLTransactionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSQLTransactionPrototype::create((WebCore::JSSQLTransactionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSQLTransaction::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSQLTransaction::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2272) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSQLTransactionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSQLTransactionPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSQLTransaction>,(WebCore::DOMConstructorID)284>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSQLTransactionOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSQLTransactionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *result;

  v3 = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = v3 + 4;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v8 = *(_QWORD *)(a3 + 32);
  v6 = (uint64_t *)(a3 + 32);
  v7 = v8;
  if (!v8)
    goto LABEL_18;
  v9 = *(_DWORD *)(v7 - 8);
  v10 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(unsigned int **)(v7 + 16 * v13);
  if (v14 != v3)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(unsigned int **)(v7 + 16 * v13);
      ++v15;
      if (v14 == v3)
        goto LABEL_8;
    }
    v13 = *(unsigned int *)(v7 - 4);
  }
  if (v13 == *(_DWORD *)(v7 - 4))
    goto LABEL_18;
LABEL_8:
  v16 = (_QWORD *)(v7 + 16 * v13);
  *v16 = -1;
  v19 = v16[1];
  v18 = v16 + 1;
  v17 = v19;
  if (v19)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *v18 = 0;
  }
  ++*(_DWORD *)(*v6 - 16);
  v20 = *v6;
  v21 = *v6 ? *(_DWORD *)(v20 - 12) - 1 : -1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6
    && ((v23 = 6 * *(_DWORD *)(v22 - 12), v24 = *(_DWORD *)(v22 - 4), v23 < v24) ? (v25 = v24 >= 9) : (v25 = 0), v25))
  {
    result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
    if (!v3)
      return result;
  }
  else
  {
LABEL_18:
    if (!v3)
      return result;
  }
  do
  {
    v26 = __ldaxr(v4);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v4));
  if (!v27)
  {
    atomic_store(1u, v3 + 4);
    return (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

unint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::SQLTransaction *a4)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  int v13;
  uint64_t v14;
  unint64_t SlowCase;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *Allocator;
  unint64_t v55;
  _QWORD *v56;
  WTF *v57;

  v6 = *(_QWORD *)(*((_QWORD *)this + 415) + 32);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(JSC::JSGlobalObject **)(v6 + 16 * v11);
    if (v12 == a2)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
            return SlowCase;
        }
      }
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(JSC::JSGlobalObject **)(v6 + 16 * v11);
        ++v13;
        if (v12 == a2)
          goto LABEL_6;
      }
    }
  }
  v16 = (unsigned int *)((char *)a2 + 16);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = *((_QWORD *)this + 412);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSQLTransaction::s_info + ~((_QWORD)&WebCore::JSSQLTransaction::s_info << 32)) ^ (((unint64_t)&WebCore::JSSQLTransaction::s_info + ~((_QWORD)&WebCore::JSSQLTransaction::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSQLTransaction::s_info)
    {
LABEL_16:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_18;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSQLTransaction::s_info)
          goto LABEL_16;
      }
    }
  }
  v27 = (uint64_t *)*((_QWORD *)this + 7);
  Structure = WebCore::JSSQLTransactionPrototype::createStructure(v27, (uint64_t)this, *((JSC::JSCell **)this + 82));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSQLTransactionPrototype::create((WebCore::JSSQLTransactionPrototype *)v27, Structure, v29, v30);
  v32 = WebCore::JSSQLTransaction::createStructure(v27, (uint64_t)this, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)this, v32, (uint64_t)&WebCore::JSSQLTransaction::s_info);
LABEL_18:
  v33 = *((_QWORD *)this + 7);
  v34 = *(_QWORD *)(v33 + 41456);
  v35 = *(_QWORD *)(v34 + 23536);
  v36 = *(_QWORD **)(v35 + 2296);
  if (v36)
    goto LABEL_38;
  v37 = *(_QWORD *)(v34 + 22648);
  if (__ldaxr((unsigned __int8 *)v37))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v37))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v37);
LABEL_23:
  v39 = *(_QWORD *)(v37 + 2824);
  if (!*(_QWORD *)(v39 + 2296))
  {
    v40 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v57, "IsoSpace T");
    v56 = 0;
    MEMORY[0x19AEA3204](v40, &v57, v33 + 192, v33 + 1872, 32, 8, &v56);
    v42 = (uint64_t)v56;
    v56 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = v57;
    v57 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1)
        WTF::fastFree(v43, v41);
      else
        --*(_DWORD *)v43;
    }
    v44 = *(_QWORD *)(v39 + 2296);
    *(_QWORD *)(v39 + 2296) = v40;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v46 = *(_QWORD *)(v35 + 2296);
  *(_QWORD *)(v35 + 2296) = v36;
  if (v46)
  {
    v47 = (WTF *)MEMORY[0x19AEA3528](v46, v45);
    WTF::fastFree(v47, v48);
  }
  v49 = __ldxr((unsigned __int8 *)v37);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, (unsigned __int8 *)v37))
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_38:
  SlowCase = v36[3];
  if (SlowCase >= v36[4])
  {
    SlowCase = v36[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v55 = *(_QWORD *)(SlowCase + 8) ^ v36[6];
    v36[4] = SlowCase + HIDWORD(v55);
    v36[5] = SlowCase + (int)v55;
  }
  v36[3] = SlowCase + 32;
LABEL_40:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v26);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v33 + 755))
    __dmb(0xAu);
  v50 = *((_QWORD *)this + 415);
  if ((byte_1ECE81530 & 1) == 0)
  {
    qword_1ECE81528 = (uint64_t)&off_1E32E81B0;
    byte_1ECE81530 = 1;
  }
  v57 = a2;
  if ((SlowCase & 8) != 0)
    v51 = (SlowCase - 112) | 1;
  else
    v51 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v51 & 1) != 0)
    v52 = v51 + 47;
  else
    v52 = *(_QWORD *)v51 + 32;
  Allocator = *(_QWORD **)(v52 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v52 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81528;
  Allocator[2] = v50;
  v56 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v50 + 32), (uint64_t *)&v57, (uint64_t *)&v56);
  if (v56)
    v56[1] = 3;
  return SlowCase;
}

WebCore::JSSQLTransactionCallback *WebCore::JSSQLTransactionCallback::JSSQLTransactionCallback(WebCore::JSSQLTransactionCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E32DE390;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSSQLTransactionCallback::~JSSQLTransactionCallback(WebCore::JSSQLTransactionCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSSQLTransactionCallback::handleEvent(uint64_t **this, WebCore::SQLTransaction *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WebCore *v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::SQLTransaction *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::Structure *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v20;
  _BYTE v21[8];
  uint64_t v22;
  WTF *v23;
  _OWORD v24[4];
  uint64_t v25;
  _BYTE v26[8];
  uint64_t *v27;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  v4 = (unsigned int *)(this + 2);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *this[3];
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(WebCore **)v6;
  MEMORY[0x19AEA3294](v26, *((_QWORD *)v7 + 7));
  v21[0] = 0;
  v23 = (WTF *)((char *)v24 + 8);
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v10 = (void *)WebCore::toJS(v7, a2, v8, v9);
  *((_QWORD *)&v24[0] + 1) = v10;
  v22 = 0x800000001;
  v27 = 0;
  v11 = this[3];
  v12 = *v11;
  if (*v11
    && (*(_BYTE *)(v12 + 8) & 3) == 0
    && *(_QWORD *)v12
    && ((v13 = v11[2]) == 0 || (*(_BYTE *)(v13 + 8) & 3) != 0 ? (v14 = 0) : (v14 = *(JSC::Structure **)v13),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v12, v14, 10, (uint64_t)v21, 0, 0, (uint64_t *)&v27), (v10 = v27) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v27, 0, 0, 0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  v16 = *(uint64_t **)&v24[0];
  if (*(_QWORD *)&v24[0])
  {
    v27 = &v22;
    v20 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v24[0], (uint64_t *)&v27);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v16, v20);
  }
  if (v23 != (WTF *)((char *)v24 + 8) && v23)
    WTF::fastFree(v23, v10);
  MEMORY[0x19AEA32A0](v26);
  do
  {
    v17 = __ldaxr(v4);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v4));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)this + 4);
    ((void (*)(uint64_t **))(*this)[2])(this);
  }
  return v15;
}

WebCore::JSSQLTransactionErrorCallback *WebCore::JSSQLTransactionErrorCallback::JSSQLTransactionErrorCallback(WebCore::JSSQLTransactionErrorCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E32DE3D8;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSSQLTransactionErrorCallback::~JSSQLTransactionErrorCallback(WebCore::JSSQLTransactionErrorCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSSQLTransactionErrorCallback::handleEvent(uint64_t a1, void *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v18;
  _BYTE v19[8];
  uint64_t v20;
  WTF *v21;
  _OWORD v22[4];
  uint64_t v23;
  _BYTE v24[8];
  uint64_t *v25;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  v4 = (unsigned int *)(a1 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = **(_QWORD **)(a1 + 24);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(_QWORD *)v6;
  MEMORY[0x19AEA3294](v24, *(_QWORD *)(v7 + 56));
  v19[0] = 0;
  v21 = (WTF *)((char *)v22 + 8);
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  v8 = (void *)WebCore::wrap<WebCore::SQLError>(v7, (unsigned int *)a2);
  *((_QWORD *)&v22[0] + 1) = v8;
  v20 = 0x800000001;
  v25 = 0;
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *v9;
  if (*v9
    && (*(_BYTE *)(v10 + 8) & 3) == 0
    && *(_QWORD *)v10
    && ((v11 = v9[2]) == 0 || (*(_BYTE *)(v11 + 8) & 3) != 0 ? (v12 = 0) : (v12 = *(JSC::Structure **)v11),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v10, v12, 10, (uint64_t)v19, 0, 0, (uint64_t *)&v25), (v8 = v25) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v25, 0, 0, 0);
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  v14 = *(uint64_t **)&v22[0];
  if (*(_QWORD *)&v22[0])
  {
    v25 = &v20;
    v18 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v22[0], (uint64_t *)&v25);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v14, v18);
  }
  if (v21 != (WTF *)((char *)v22 + 8) && v21)
    WTF::fastFree(v21, v8);
  MEMORY[0x19AEA32A0](v24);
  do
  {
    v15 = __ldaxr(v4);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v4));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)(a1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  }
  return v13;
}

uint64_t WebCore::JSSVGAElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGElement::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  result = WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSSVGElement::visitChildren(WebCore::JSSVGElement *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = WebCore::JSNode::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSSVGAElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAElementPrototype::create(WebCore::JSSVGAElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGAElement::s_info, &WebCore::JSSVGAElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAElement>,(WebCore::DOMConstructorID)760>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6080);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGAElement::s_info + ~((_QWORD)&WebCore::JSSVGAElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAElement::s_info + ~((_QWORD)&WebCore::JSSVGAElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGAElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGAElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGAElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGAElementPrototype::create((WebCore::JSSVGAElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGAElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGAElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6080) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAElementPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAElement>,(WebCore::DOMConstructorID)760>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAElement_target(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

uint64_t WebCore::jsSVGAElement_rel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::SVGNames::relAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::SVGNames::relAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::SVGNames::relAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSSVGAElement_rel(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSVGAElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSVGAElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::SVGNames::relAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::SVGNames::relAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::SVGNames::relAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::SVGNames::relAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32EDCF0[v9])(&v23, &v21);
  return v10;
}

unint64_t WebCore::jsSVGAElement_relList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::SVGAElement::relList(*(WebCore::SVGAElement **)(a2 + 24));
  return WebCore::wrap<WebCore::DOMTokenList>(a1, v3, v4);
}

BOOL WebCore::setJSSVGAElement_relList(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v18[2];
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGAElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGAElement::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v22 = *((_QWORD *)a1 + 7);
  WTF::AtomStringImpl::addLiteral();
  v12 = (WTF::StringImpl *)v18[0];
  v13 = JSC::JSObject::get(a2, a1, v18[0]);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_20;
  if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
LABEL_20:
    v16 = 0;
    goto LABEL_21;
  }
  WTF::AtomStringImpl::addLiteral();
  v14 = (WTF::StringImpl *)v18[0];
  v18[0] = 0;
  v18[1] = v13;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) + 0x48))(v13, a1, v14, a3, v18);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_21;
  }
  else
  {
    v16 = 1;
    if (!v14)
      goto LABEL_21;
  }
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v15);
  else
    *(_DWORD *)v14 -= 2;
LABEL_21:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v15);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v16;
}

unint64_t WebCore::jsSVGAElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

_DWORD *WebCore::JSSVGAngle::destroy(WebCore::JSSVGAngle *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAngle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnglePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnglePrototype::create(WebCore::JSSVGAnglePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSSVGAngle::s_info, (uint64_t)&WebCore::JSSVGAnglePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAngle>,(WebCore::DOMConstructorID)761>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6088);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAngle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAngle::s_info + ~((_QWORD)&WebCore::JSSVGAngle::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAngle::s_info + ~((_QWORD)&WebCore::JSSVGAngle::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAngle::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAngle::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnglePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnglePrototype::create((WebCore::JSSVGAnglePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAngle::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAngle::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<5u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGAngle::s_info, &WebCore::JSSVGAngleConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6088) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAngleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnglePrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAngle>,(WebCore::DOMConstructorID)761>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAngle_unitType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(int *)(*(_QWORD *)(a2 + 24) + 28) <= 4)
    v2 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 28);
  else
    v2 = 0;
  return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSVGAngle_value(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  double v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  switch(*(_DWORD *)(v2 + 28))
  {
    case 0:
    case 1:
    case 2:
      v3 = *(float *)(v2 + 32);
      break;
    case 3:
      v4 = *(float *)(v2 + 32);
      v5 = 57.296;
      goto LABEL_7;
    case 4:
      v4 = *(float *)(v2 + 32);
      v5 = 0.9;
      goto LABEL_7;
    case 5:
      v4 = *(float *)(v2 + 32);
      v5 = 360.0;
LABEL_7:
      v3 = v4 * v5;
      break;
    default:
      v3 = 0.0;
      break;
  }
  v6 = v3;
  if (COERCE__INT64(fabs(v3)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v7 = (int)v3, (double)(int)v7 == v6)
    && ((_DWORD)v7 || (LODWORD(v3) & 0x80000000) == 0))
  {
    return v7 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v6 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGAngle_value(JSC *this, uint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  double v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  float v16;
  uint64_t v17;
  unint64_t v19;
  WTF::StringImpl *v20;

  v5 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGAngle::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGAngle::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v12 = a4.n128_f64[0];
  }
  else
  {
    *(_QWORD *)&v12 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v12 < -3.40282347e38
    || (a4.n128_u32[1] = 1206910975, v12 > 3.40282347e38))
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    LOBYTE(v19) = 4;
    v20 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v5, this, v13);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    a4.n128_f32[0] = v12;
    switch(*(_DWORD *)(v11 + 28))
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_29;
      case 3:
        v16 = 0.017453;
        goto LABEL_28;
      case 4:
        v16 = 1.1111;
        goto LABEL_28;
      case 5:
        v16 = 0.0027778;
LABEL_28:
        a4.n128_f32[0] = a4.n128_f32[0] * v16;
LABEL_29:
        *(_DWORD *)(v11 + 32) = a4.n128_u32[0];
        break;
      default:
        break;
    }
    v17 = *(_QWORD *)(v11 + 16);
    if (v17)
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)v17 + 32))(v17, v11, "The provided value is outside the range of a float", 51, a4);
  }
  return 1;
}

unint64_t WebCore::jsSVGAngle_valueInSpecifiedUnits(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGAngle_valueInSpecifiedUnits(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  float v15;
  uint64_t v16;
  double v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGAngle::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGAngle::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 < -3.40282347e38 || v11 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v19) = 4;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v12.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, this, v12);
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    v15 = v11;
    *(float *)(v10 + 32) = v15;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10, "The provided value is outside the range of a float", 51);
  }
  return 1;
}

uint64_t WebCore::jsSVGAngle_valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 32))(&v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSSVGAngle_valueAsString(JSC *this, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27[2];
  WTF::StringImpl *v28;
  char v29;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGAngle::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGAngle::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)v27 = a3;
  if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(a3 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v25 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v27, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v25;
    if (hasExceptionsAfterHandlingTraps)
    {
      v24 = 1;
      v25 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v16 = 0;
      v15 = 1;
      goto LABEL_30;
    }
  }
  else
  {
    v12 = v25;
  }
  v24 = 0;
  v23 = 0;
  v25 = v12;
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v27[0]) = 4;
    v28 = 0;
    v29 = 1;
  }
  else
  {
    WebCore::SVGAngleValue::setValueAsString(v10 + 28, (const WTF::String *)&v25, v27);
    if (!v29)
    {
      v13 = *(_QWORD *)(v10 + 16);
      if (v13)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
    }
  }
  v14 = v25;
  v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v29)
  {
    v19 = (WTF::StringImpl *)LOBYTE(v27[0]);
    LOBYTE(v25) = v27[0];
    v20 = v28;
    v28 = 0;
    v26 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException((JSC::VM *)v4, this, v21);
      v20 = v26;
    }
    v26 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v29)
    {
      v22 = v28;
      v28 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v19);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
  }
  v15 = 0;
  v16 = 1;
LABEL_30:
  ((void (*)(int *, uint64_t *))off_1E32E8950[v15])(v27, &v23);
  return v16;
}

uint64_t WebCore::JSSVGAngleOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAngleOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGAngle,WebCore::SVGAngle>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGAngle::s_info + ~((_QWORD)&WebCore::JSSVGAngle::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAngle::s_info + ~((_QWORD)&WebCore::JSSVGAngle::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGAngle::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGAngle::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSVGAnglePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGAnglePrototype::create((WebCore::JSSVGAnglePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSSVGAngle::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGAngle::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 6168);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 6168))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 6168);
    *(_QWORD *)(v26 + 6168) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 6168);
  *(_QWORD *)(v22 + 6168) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE81540 & 1) == 0)
  {
    qword_1ECE81538 = (uint64_t)&off_1E32E81E0;
    byte_1ECE81540 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81538;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::SVGAngle>(uint64_t a1, WTF *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  WTF *v13;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WTF **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WTF **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  v13 = a2;
  if (*(void (***)(WebCore::SVGAngle *__hidden))a2 == off_1E32EE0A0)
  {
    v11 = WebCore::createWrapper<WebCore::SVGAngle,WebCore::SVGAngle>(a1, &v13);
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v13 + 8))();
      else
        --*((_DWORD *)v13 + 2);
    }
    return v11;
  }
  result = 421;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimateElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimateElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimationElement::prototype(WebCore::JSSVGAnimationElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGAnimationElement::s_info
      + ~((_QWORD)&WebCore::JSSVGAnimationElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimationElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGAnimationElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGAnimationElement::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGAnimationElement::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(this, a2, a3);
    Structure = WebCore::JSSVGAnimationElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSSVGAnimationElementPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSSVGAnimationElement::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSSVGAnimationElement::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

unint64_t WebCore::JSSVGAnimateElementPrototype::create(WebCore::JSSVGAnimateElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGAnimateElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGAnimateElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateElement>,(WebCore::DOMConstructorID)762>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6096);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimationElement>,(WebCore::DOMConstructorID)777>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGAnimateElement::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimateElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimateElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGAnimateElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGAnimateElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGAnimateElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype((WebCore::JSSVGAnimationElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGAnimateElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGAnimateElementPrototype::create((WebCore::JSSVGAnimateElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGAnimateElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGAnimateElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6096) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimateElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimateElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateElement>,(WebCore::DOMConstructorID)762>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGAnimationElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimateMotionElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimateMotionElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimateMotionElementPrototype::create(WebCore::JSSVGAnimateMotionElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGAnimateMotionElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGAnimateMotionElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateMotionElement>,(WebCore::DOMConstructorID)763>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6104);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimationElement>,(WebCore::DOMConstructorID)777>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateMotionElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGAnimateMotionElement::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimateMotionElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimateMotionElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGAnimateMotionElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGAnimateMotionElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGAnimateMotionElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype((WebCore::JSSVGAnimationElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGAnimateMotionElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGAnimateMotionElementPrototype::create((WebCore::JSSVGAnimateMotionElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGAnimateMotionElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGAnimateMotionElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6104) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimateMotionElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimateMotionElementPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateMotionElement>,(WebCore::DOMConstructorID)763>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGAnimateTransformElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimateTransformElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimateTransformElementPrototype::create(WebCore::JSSVGAnimateTransformElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGAnimateTransformElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGAnimateTransformElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateTransformElement>,(WebCore::DOMConstructorID)764>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6112);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimationElement>,(WebCore::DOMConstructorID)777>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateTransformElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGAnimateTransformElement::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimateTransformElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimateTransformElement::s_info
                                                                              + ~((_QWORD)&WebCore::JSSVGAnimateTransformElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGAnimateTransformElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGAnimateTransformElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype((WebCore::JSSVGAnimationElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGAnimateTransformElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGAnimateTransformElementPrototype::create((WebCore::JSSVGAnimateTransformElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGAnimateTransformElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGAnimateTransformElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6112) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimateTransformElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimateTransformElementPrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimateTransformElement>,(WebCore::DOMConstructorID)764>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

_DWORD *WebCore::JSSVGAnimatedAngle::destroy(WebCore::JSSVGAnimatedAngle *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedAngle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedAnglePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedAnglePrototype::create(WebCore::JSSVGAnimatedAnglePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedAngle::s_info, &WebCore::JSSVGAnimatedAnglePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedAngle>,(WebCore::DOMConstructorID)765>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6120);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedAngle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedAngle::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedAngle::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedAngle::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedAngle::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedAngle::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedAngle::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedAnglePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedAnglePrototype::create((WebCore::JSSVGAnimatedAnglePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedAngle::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedAngle::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6120) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedAngleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedAnglePrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedAngle>,(WebCore::DOMConstructorID)765>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGAnimatedAngle_baseVal(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAngle>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

uint64_t WebCore::jsSVGAnimatedAngle_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v2 + 48);
  if (v4)
    return WebCore::wrap<WebCore::SVGAngle>(v3, (WTF *)v4);
  v5 = *(_QWORD *)(v2 + 40);
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = v2;
  *(_WORD *)(v4 + 24) = 1;
  *(_QWORD *)v4 = off_1E32EE0D8;
  *(_QWORD *)(v4 + 28) = *(_QWORD *)(v5 + 28);
  *(_QWORD *)v4 = off_1E32EE0A0;
  v6 = *(_DWORD **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = v4;
  if (!v6)
    return WebCore::wrap<WebCore::SVGAngle>(v3, (WTF *)v4);
  if (v6[2] != 1)
  {
    --v6[2];
    return WebCore::wrap<WebCore::SVGAngle>(v3, (WTF *)v4);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  v4 = *(_QWORD *)(v2 + 48);
  if (v4)
    return WebCore::wrap<WebCore::SVGAngle>(v3, (WTF *)v4);
  return 2;
}

uint64_t WebCore::JSSVGAnimatedAngleOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedAngleOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGAngle>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedAngle::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedAngle::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedAngle::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedAngle::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedAngle::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedAngle::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedAnglePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedAnglePrototype::create((WebCore::JSSVGAnimatedAnglePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedAngle::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedAngle::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6200);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6200))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6200);
    *(_QWORD *)(v36 + 6200) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6200);
  *(_QWORD *)(v32 + 6200) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE81550 & 1) == 0)
  {
    qword_1ECE81548 = (uint64_t)&off_1E32E8210;
    byte_1ECE81550 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81548;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedBoolean::destroy(WebCore::JSSVGAnimatedBoolean *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedBoolean::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedBooleanPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedBooleanPrototype::create(WebCore::JSSVGAnimatedBooleanPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedBoolean::s_info, &WebCore::JSSVGAnimatedBooleanPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedBoolean>,(WebCore::DOMConstructorID)766>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6128);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedBoolean>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedBoolean::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedBoolean::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedBoolean::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGAnimatedBoolean::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedBoolean::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedBoolean::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedBooleanPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedBooleanPrototype::create((WebCore::JSSVGAnimatedBooleanPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedBoolean::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedBoolean::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6128) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedBooleanConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedBooleanPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedBoolean>,(WebCore::DOMConstructorID)766>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGAnimatedBoolean_baseVal(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 26))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSSVGAnimatedBoolean_baseVal(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  _QWORD *v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGAnimatedBoolean::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGAnimatedBoolean::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v14 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v15 = *(unsigned __int8 *)(a3 + 5);
    if (v15 == 3)
    {
      v18 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v15 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 1) != 0)
        v17 = (int *)(a3 + 16);
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
    }
    v14 = v18 == 0;
LABEL_37:
    v11 = !v14;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD **)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  *(_BYTE *)(v12[5] + 26) = v11;
  (*(void (**)(_QWORD *, _QWORD))(*v12 + 32))(v12, 0);
  return 1;
}

uint64_t WebCore::jsSVGAnimatedBoolean_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v6 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = *(uint64_t **)(v2 + 24);
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_2;
    }
  }
  else
  {
    v8 = *(uint64_t **)(v2 + 24);
  }
  v9 = (uint64_t *)(v3 + 8 * v6);
  if (v8 == v9)
    goto LABEL_2;
  v10 = *v8;
LABEL_15:
  if (!*(_QWORD *)(v10 + 8))
  {
    while (++v8 != v9)
    {
      v10 = *v8;
      if ((unint64_t)(*v8 + 1) > 1)
      {
        if (v8 != v9)
          goto LABEL_15;
        break;
      }
    }
LABEL_2:
    v4 = v2 + 40;
    goto LABEL_3;
  }
  v4 = v2 + 48;
LABEL_3:
  if (*(_BYTE *)(*(_QWORD *)v4 + 26))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSSVGAnimatedBooleanOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedBooleanOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

_DWORD *WebCore::JSSVGAnimatedEnumeration::destroy(WebCore::JSSVGAnimatedEnumeration *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedEnumeration::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedEnumerationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedEnumerationPrototype::create(WebCore::JSSVGAnimatedEnumerationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedEnumeration::s_info, &WebCore::JSSVGAnimatedEnumerationPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedEnumeration>,(WebCore::DOMConstructorID)767>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6136);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedEnumeration>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedEnumeration::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedEnumeration::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedEnumeration::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGAnimatedEnumeration::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedEnumeration::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedEnumeration::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedEnumerationPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedEnumerationPrototype::create((WebCore::JSSVGAnimatedEnumerationPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedEnumeration::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedEnumeration::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6136) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedEnumerationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedEnumerationPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedEnumeration>,(WebCore::DOMConstructorID)767>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimatedEnumeration_baseVal(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int16 (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 40) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40)) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGAnimatedEnumeration_baseVal(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _QWORD **v10;
  double v11;
  double v12;
  double v13;
  double v14;
  JSValue v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  double v19;
  unint64_t v20;
  WTF::StringImpl *v21;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGAnimatedEnumeration::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGAnimatedEnumeration::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD ***)(a2 + 24);
  v20 = a3;
  if (a3 < 0xFFFE000000000000 || (a3 & 0x80000000) != 0)
  {
    if (a3 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)a3;
    }
    else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, a1);
      v11 = v19;
    }
    else
    {
      *(_QWORD *)&v11 = a3 - 0x2000000000000;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    LOWORD(a3) = 0;
    if (fabs(v11) != INFINITY && v11 != 0.0)
    {
      v12 = -floor(-v11);
      v13 = floor(v11);
      if (v11 >= 0.0)
        v12 = v13;
      v14 = fmod(v12, 65536.0);
      if (v14 < 0.0)
        v14 = v14 + 65536.0;
      LODWORD(a3) = (int)v14;
    }
  }
  LODWORD(v20) = (unsigned __int16)a3;
  if ((*(unsigned int (**)(_QWORD *, unint64_t *))(*v10[5] + 24))(v10[5], &v20))
  {
    ((void (*)(_QWORD **, _QWORD))(*v10)[4])(v10, 0);
  }
  else
  {
    LOBYTE(v20) = 33;
    v21 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v15.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v21);
      JSC::VM::throwException((JSC::VM *)v4, a1, v15);
      v17 = v21;
      v21 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  return 1;
}

unint64_t WebCore::jsSVGAnimatedEnumeration_animVal(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = *(_QWORD **)(a2 + 24);
  v3 = v2[3];
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v6 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = (uint64_t *)v2[3];
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
          goto LABEL_2;
      }
    }
    else
    {
      v8 = (uint64_t *)v2[3];
    }
    v9 = (uint64_t *)(v3 + 8 * v6);
    if (v8 != v9)
    {
      v10 = *v8;
LABEL_13:
      if (*(_QWORD *)(v10 + 8))
      {
        v4 = v2 + 6;
        return (*(unsigned __int16 (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4) | 0xFFFE000000000000;
      }
      while (++v8 != v9)
      {
        v10 = *v8;
        if ((unint64_t)(*v8 + 1) > 1)
        {
          if (v8 != v9)
            goto LABEL_13;
          break;
        }
      }
    }
  }
LABEL_2:
  v4 = v2 + 5;
  return (*(unsigned __int16 (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4) | 0xFFFE000000000000;
}

uint64_t WebCore::JSSVGAnimatedEnumerationOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedEnumerationOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedEnumeration::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedEnumeration::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedEnumeration::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGAnimatedEnumeration::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedEnumeration::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedEnumeration::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedEnumerationPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedEnumerationPrototype::create((WebCore::JSSVGAnimatedEnumerationPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedEnumeration::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedEnumeration::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6216);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6216))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6216);
    *(_QWORD *)(v36 + 6216) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6216);
  *(_QWORD *)(v32 + 6216) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE81570 & 1) == 0)
  {
    qword_1ECE81568 = (uint64_t)&off_1E32E8270;
    byte_1ECE81570 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81568;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedInteger::destroy(WebCore::JSSVGAnimatedInteger *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedInteger::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedIntegerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedIntegerPrototype::create(WebCore::JSSVGAnimatedIntegerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedInteger::s_info, &WebCore::JSSVGAnimatedIntegerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedInteger>,(WebCore::DOMConstructorID)768>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6144);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedInteger>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedInteger::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedInteger::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedInteger::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGAnimatedInteger::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedInteger::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedInteger::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedIntegerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedIntegerPrototype::create((WebCore::JSSVGAnimatedIntegerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedInteger::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedInteger::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6144) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedIntegerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedIntegerPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedInteger>,(WebCore::DOMConstructorID)768>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimatedInteger_baseVal(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 28) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGAnimatedInteger_baseVal(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = a3;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGAnimatedInteger::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGAnimatedInteger::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD **)(a2 + 24);
  v20 = a3;
  if (a3 < 0xFFFE000000000000)
  {
    v13 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v18 = v4;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, a1);
      v4 = v18;
      v13 = v19;
    }
    v14 = (v13 >> 52) & 0x7FF;
    v15 = v14 - 1023;
    v16 = v13 >> (51 - (v13 >> 52));
    if (v14 > 0x433)
      LODWORD(v16) = v13 << ((v13 >> 52) - 51);
    if (v14 >= 0x41F)
      v17 = v16;
    else
      v17 = (((1 << ((v13 >> 52) + 1)) - 1) & v16) + (1 << ((v13 >> 52) + 1));
    if ((v13 & 0x8000000000000000) != 0)
      v17 = -v17;
    if (v15 <= 0x53)
      v5 = v17;
    else
      v5 = 0;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    return 0;
  *(_DWORD *)(v11[5] + 28) = v5;
  (*(void (**)(_QWORD *, _QWORD))(*v11 + 32))(v11, 0);
  return 1;
}

unint64_t WebCore::jsSVGAnimatedInteger_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v6 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = *(uint64_t **)(v2 + 24);
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
          goto LABEL_2;
      }
    }
    else
    {
      v8 = *(uint64_t **)(v2 + 24);
    }
    v9 = (uint64_t *)(v3 + 8 * v6);
    if (v8 != v9)
    {
      v10 = *v8;
LABEL_13:
      if (*(_QWORD *)(v10 + 8))
      {
        v4 = v2 + 48;
        return *(unsigned int *)(*(_QWORD *)v4 + 28) | 0xFFFE000000000000;
      }
      while (++v8 != v9)
      {
        v10 = *v8;
        if ((unint64_t)(*v8 + 1) > 1)
        {
          if (v8 != v9)
            goto LABEL_13;
          break;
        }
      }
    }
  }
LABEL_2:
  v4 = v2 + 40;
  return *(unsigned int *)(*(_QWORD *)v4 + 28) | 0xFFFE000000000000;
}

uint64_t WebCore::JSSVGAnimatedIntegerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedIntegerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<int>>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSSVGAnimatedInteger::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedInteger::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedInteger::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGAnimatedInteger::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSSVGAnimatedInteger::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSSVGAnimatedInteger::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSVGAnimatedIntegerPrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSVGAnimatedIntegerPrototype::create((WebCore::JSSVGAnimatedIntegerPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSSVGAnimatedInteger::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSSVGAnimatedInteger::s_info);
LABEL_16:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 6224);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 6224))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 6224);
    *(_QWORD *)(v35 + 6224) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 6224);
  *(_QWORD *)(v31 + 6224) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE81580 & 1) == 0)
  {
    qword_1ECE81578 = (uint64_t)&off_1E32E82A0;
    byte_1ECE81580 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81578;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedLength::destroy(WebCore::JSSVGAnimatedLength *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedLength::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedLengthPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedLengthPrototype::create(WebCore::JSSVGAnimatedLengthPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedLength::s_info, &WebCore::JSSVGAnimatedLengthPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedLength>,(WebCore::DOMConstructorID)769>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6152);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedLength>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedLength::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedLength::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedLength::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGAnimatedLength::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedLength::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedLength::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedLengthPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedLengthPrototype::create((WebCore::JSSVGAnimatedLengthPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedLength::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedLength::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6152) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedLengthConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedLengthPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedLength>,(WebCore::DOMConstructorID)769>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGAnimatedLength_baseVal(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGLength>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

uint64_t WebCore::jsSVGAnimatedLength_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGLength>(a1, v4, (WTF *)v5);
  v6 = *(_QWORD *)(v3 + 40);
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = v3;
  *(_WORD *)(v5 + 24) = 1;
  *(_QWORD *)v5 = off_1E32EE180;
  *(_QWORD *)(v5 + 28) = *(_QWORD *)(v6 + 28);
  *(_QWORD *)v5 = off_1E32EE148;
  v7 = *(_DWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v5;
  if (!v7)
    return WebCore::wrap<WebCore::SVGLength>(a1, v4, (WTF *)v5);
  if (v7[2] != 1)
  {
    --v7[2];
    return WebCore::wrap<WebCore::SVGLength>(a1, v4, (WTF *)v5);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v5 = *(_QWORD *)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGLength>(a1, v4, (WTF *)v5);
  return 2;
}

uint64_t WebCore::JSSVGAnimatedLengthOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedLengthOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedLength::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedLength::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedLength::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGAnimatedLength::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedLength::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedLength::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedLengthPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedLengthPrototype::create((WebCore::JSSVGAnimatedLengthPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedLength::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedLength::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6232);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6232))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6232);
    *(_QWORD *)(v36 + 6232) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6232);
  *(_QWORD *)(v32 + 6232) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE81590 & 1) == 0)
  {
    qword_1ECE81588 = (uint64_t)&off_1E32E82D0;
    byte_1ECE81590 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81588;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedLengthList::destroy(WebCore::JSSVGAnimatedLengthList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedLengthList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedLengthListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedLengthListPrototype::create(WebCore::JSSVGAnimatedLengthListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedLengthList::s_info, &WebCore::JSSVGAnimatedLengthListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedLengthList>,(WebCore::DOMConstructorID)770>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6160);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedLengthList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedLengthList::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedLengthList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedLengthList::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGAnimatedLengthList::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedLengthList::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedLengthList::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedLengthListPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedLengthListPrototype::create((WebCore::JSSVGAnimatedLengthListPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedLengthList::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedLengthList::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6160) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedLengthListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedLengthListPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedLengthList>,(WebCore::DOMConstructorID)770>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimatedLengthList_baseVal(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGLengthList>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

uint64_t WebCore::jsSVGAnimatedLengthList_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WTF **)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGLengthList>(a1, v4, v5);
  v6 = *(_QWORD *)(v3 + 40);
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x40);
  v7 = WebCore::SVGValuePropertyList<WebCore::SVGLength>::SVGValuePropertyList((uint64_t)v5, v6, 1);
  *(_QWORD *)v7 = off_1E346CDF0;
  *(_QWORD *)(v7 + 48) = &unk_1E346CE68;
  *(_BYTE *)(v7 + 56) = *(_BYTE *)(v6 + 56);
  v8 = *(_DWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v5;
  if (!v8)
    return WebCore::wrap<WebCore::SVGLengthList>(a1, v4, v5);
  if (v8[2] != 1)
  {
    --v8[2];
    return WebCore::wrap<WebCore::SVGLengthList>(a1, v4, v5);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  v5 = *(WTF **)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGLengthList>(a1, v4, v5);
  return 2;
}

uint64_t WebCore::JSSVGAnimatedLengthListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedLengthListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGLengthList>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedLengthList::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedLengthList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedLengthList::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGAnimatedLengthList::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedLengthList::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedLengthList::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedLengthListPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedLengthListPrototype::create((WebCore::JSSVGAnimatedLengthListPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedLengthList::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedLengthList::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6240);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6240))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6240);
    *(_QWORD *)(v36 + 6240) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6240);
  *(_QWORD *)(v32 + 6240) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE815A0 & 1) == 0)
  {
    qword_1ECE81598 = (uint64_t)&off_1E32E8300;
    byte_1ECE815A0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81598;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedNumber::destroy(WebCore::JSSVGAnimatedNumber *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedNumber::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedNumberPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedNumberPrototype::create(WebCore::JSSVGAnimatedNumberPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedNumber::s_info, &WebCore::JSSVGAnimatedNumberPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedNumber>,(WebCore::DOMConstructorID)771>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6168);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedNumber>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedNumber::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedNumber::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedNumber::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGAnimatedNumber::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedNumber::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedNumber::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedNumberPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedNumberPrototype::create((WebCore::JSSVGAnimatedNumberPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedNumber::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedNumber::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6168) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedNumberConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedNumberPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedNumber>,(WebCore::DOMConstructorID)771>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimatedNumber_baseVal(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGAnimatedNumber_baseVal(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  _QWORD *v10;
  double v11;
  float v12;
  double v14;
  JSC::VM *v15;
  unint64_t v16;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGAnimatedNumber::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGAnimatedNumber::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD **)(a2 + 24);
  v16 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v15 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v16, a1);
    v4 = v15;
    v11 = v14;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && v11 >= -3.40282347e38
      && v11 <= 3.40282347e38)
    {
      v12 = v11;
      *(float *)(v10[5] + 28) = v12;
      (*(void (**)(_QWORD *, _QWORD, const char *, uint64_t))(*v10 + 32))(v10, 0, "The provided value is outside the range of a float", 51);
      return 1;
    }
    JSC::throwTypeError();
  }
  return 0;
}

unint64_t WebCore::jsSVGAnimatedNumber_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  double v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v9 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      v11 = *(uint64_t **)(v2 + 24);
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        ++v11;
        v10 -= 8;
        if (!v10)
          goto LABEL_2;
      }
    }
    else
    {
      v11 = *(uint64_t **)(v2 + 24);
    }
    v12 = (uint64_t *)(v3 + 8 * v9);
    if (v11 != v12)
    {
      v13 = *v11;
LABEL_18:
      if (*(_QWORD *)(v13 + 8))
      {
        v4 = v2 + 48;
        goto LABEL_3;
      }
      while (++v11 != v12)
      {
        v13 = *v11;
        if ((unint64_t)(*v11 + 1) > 1)
        {
          if (v11 != v12)
            goto LABEL_18;
          break;
        }
      }
    }
  }
LABEL_2:
  v4 = v2 + 40;
LABEL_3:
  v5 = *(float *)(*(_QWORD *)v4 + 28);
  v6 = v5;
  if (COERCE__INT64(fabs(v5)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v7 = (int)v5, (double)(int)v7 == v6)
    && ((_DWORD)v7 || (LODWORD(v5) & 0x80000000) == 0))
  {
    return v7 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v6 + 0x2000000000000;
  }
}

uint64_t WebCore::JSSVGAnimatedNumberOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedNumberOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedNumber::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedNumber::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedNumber::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGAnimatedNumber::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedNumber::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedNumber::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedNumberPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedNumberPrototype::create((WebCore::JSSVGAnimatedNumberPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedNumber::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedNumber::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6248);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6248))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6248);
    *(_QWORD *)(v36 + 6248) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6248);
  *(_QWORD *)(v32 + 6248) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE815B0 & 1) == 0)
  {
    qword_1ECE815A8 = (uint64_t)&off_1E32E8330;
    byte_1ECE815B0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE815A8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedNumberList::destroy(WebCore::JSSVGAnimatedNumberList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedNumberList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedNumberListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedNumberListPrototype::create(WebCore::JSSVGAnimatedNumberListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedNumberList::s_info, &WebCore::JSSVGAnimatedNumberListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedNumberList>,(WebCore::DOMConstructorID)772>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6176);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedNumberList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedNumberList::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedNumberList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedNumberList::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGAnimatedNumberList::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedNumberList::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedNumberList::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedNumberListPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedNumberListPrototype::create((WebCore::JSSVGAnimatedNumberListPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedNumberList::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedNumberList::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6176) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedNumberListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedNumberListPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedNumberList>,(WebCore::DOMConstructorID)772>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimatedNumberList_baseVal(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGNumberList>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

uint64_t WebCore::jsSVGAnimatedNumberList_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WTF **)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGNumberList>(a1, v4, v5);
  v6 = *(_QWORD *)(v3 + 40);
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x38);
  v7 = (_QWORD *)WebCore::SVGValuePropertyList<WebCore::SVGNumber>::SVGValuePropertyList((uint64_t)v5, v6, 1);
  *v7 = off_1E346F430;
  v7[6] = &unk_1E346F4A8;
  v8 = *(_DWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v5;
  if (!v8)
    return WebCore::wrap<WebCore::SVGNumberList>(a1, v4, v5);
  if (v8[2] != 1)
  {
    --v8[2];
    return WebCore::wrap<WebCore::SVGNumberList>(a1, v4, v5);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  v5 = *(WTF **)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGNumberList>(a1, v4, v5);
  return 2;
}

uint64_t WebCore::JSSVGAnimatedNumberListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedNumberListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedNumberList::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedNumberList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedNumberList::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGAnimatedNumberList::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedNumberList::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedNumberList::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedNumberListPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedNumberListPrototype::create((WebCore::JSSVGAnimatedNumberListPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedNumberList::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedNumberList::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6256);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6256))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6256);
    *(_QWORD *)(v36 + 6256) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6256);
  *(_QWORD *)(v32 + 6256) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE815C0 & 1) == 0)
  {
    qword_1ECE815B8 = (uint64_t)&off_1E32E8360;
    byte_1ECE815C0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE815B8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedPreserveAspectRatio::destroy(WebCore::JSSVGAnimatedPreserveAspectRatio *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedPreserveAspectRatio::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedPreserveAspectRatioPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedPreserveAspectRatioPrototype::create(WebCore::JSSVGAnimatedPreserveAspectRatioPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info, &WebCore::JSSVGAnimatedPreserveAspectRatioPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedPreserveAspectRatio>,(WebCore::DOMConstructorID)773>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6184);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedPreserveAspectRatio>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info
                                                                                  + ~((_QWORD)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedPreserveAspectRatio::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedPreserveAspectRatio::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedPreserveAspectRatioPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedPreserveAspectRatioPrototype::create((WebCore::JSSVGAnimatedPreserveAspectRatioPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedPreserveAspectRatio::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6184) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedPreserveAspectRatioConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedPreserveAspectRatioPrototype::s_info != (char **)(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedPreserveAspectRatio>,(WebCore::DOMConstructorID)773>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimatedPreserveAspectRatio_baseVal(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGPreserveAspectRatio>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

uint64_t WebCore::jsSVGAnimatedPreserveAspectRatio_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGPreserveAspectRatio>(a1, v4, (WTF *)v5);
  v6 = *(_QWORD *)(v3 + 40);
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = v3;
  *(_WORD *)(v5 + 24) = 1;
  *(_QWORD *)v5 = off_1E32EE068;
  *(_WORD *)(v5 + 26) = *(_WORD *)(v6 + 26);
  *(_QWORD *)v5 = off_1E32EE030;
  v7 = *(_DWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v5;
  if (!v7)
    return WebCore::wrap<WebCore::SVGPreserveAspectRatio>(a1, v4, (WTF *)v5);
  if (v7[2] != 1)
  {
    --v7[2];
    return WebCore::wrap<WebCore::SVGPreserveAspectRatio>(a1, v4, (WTF *)v5);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v5 = *(_QWORD *)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGPreserveAspectRatio>(a1, v4, (WTF *)v5);
  return 2;
}

uint64_t WebCore::JSSVGAnimatedPreserveAspectRatioOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedPreserveAspectRatioOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info
                                                                                  + ~((_QWORD)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedPreserveAspectRatio::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedPreserveAspectRatio::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedPreserveAspectRatioPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedPreserveAspectRatioPrototype::create((WebCore::JSSVGAnimatedPreserveAspectRatioPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedPreserveAspectRatio::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedPreserveAspectRatio::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6264);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6264))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6264);
    *(_QWORD *)(v36 + 6264) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6264);
  *(_QWORD *)(v32 + 6264) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE815D0 & 1) == 0)
  {
    qword_1ECE815C8 = (uint64_t)&off_1E32E8390;
    byte_1ECE815D0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE815C8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedRect::destroy(WebCore::JSSVGAnimatedRect *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedRect::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedRectPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedRectPrototype::create(WebCore::JSSVGAnimatedRectPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedRect::s_info, &WebCore::JSSVGAnimatedRectPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedRect>,(WebCore::DOMConstructorID)774>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6192);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedRect>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedRect::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedRect::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedRect::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedRect::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedRect::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedRect::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedRectPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedRectPrototype::create((WebCore::JSSVGAnimatedRectPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedRect::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedRect::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6192) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedRectConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedRectPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedRect>,(WebCore::DOMConstructorID)774>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGAnimatedRect_baseVal(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGRect>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

uint64_t WebCore::jsSVGAnimatedRect_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGRect>(a1, v4, (WTF *)v5);
  v6 = *(_QWORD *)(v3 + 40);
  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = v3;
  *(_WORD *)(v5 + 24) = 1;
  *(_QWORD *)v5 = off_1E32EDD10;
  *(_OWORD *)(v5 + 28) = *(_OWORD *)(v6 + 28);
  *(_QWORD *)v5 = off_1E32EE110;
  v7 = *(_DWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v5;
  if (!v7)
    return WebCore::wrap<WebCore::SVGRect>(a1, v4, (WTF *)v5);
  if (v7[2] != 1)
  {
    --v7[2];
    return WebCore::wrap<WebCore::SVGRect>(a1, v4, (WTF *)v5);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v5 = *(_QWORD *)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGRect>(a1, v4, (WTF *)v5);
  return 2;
}

uint64_t WebCore::JSSVGAnimatedRectOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedRectOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedRect::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedRect::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedRect::s_info + ~((_QWORD)&WebCore::JSSVGAnimatedRect::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedRect::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedRect::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedRectPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedRectPrototype::create((WebCore::JSSVGAnimatedRectPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedRect::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedRect::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6272);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6272))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6272);
    *(_QWORD *)(v36 + 6272) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6272);
  *(_QWORD *)(v32 + 6272) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE815E0 & 1) == 0)
  {
    qword_1ECE815D8 = (uint64_t)&off_1E32E83C0;
    byte_1ECE815E0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE815D8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSSVGAnimatedString::destroy(WebCore::JSSVGAnimatedString *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedString::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGAnimatedStringPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimatedStringPrototype::create(WebCore::JSSVGAnimatedStringPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGAnimatedString::s_info, &WebCore::JSSVGAnimatedStringPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedString>,(WebCore::DOMConstructorID)775>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6200);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedString>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGAnimatedString::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedString::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedString::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGAnimatedString::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGAnimatedString::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGAnimatedString::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGAnimatedStringPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedStringPrototype::create((WebCore::JSSVGAnimatedStringPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedString::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedString::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6200) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedStringConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedStringPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedString>,(WebCore::DOMConstructorID)775>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGAnimatedString_baseVal(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 40) + 32);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSSVGAnimatedString_baseVal(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32[2];
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  char v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGAnimatedString::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGAnimatedString::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  if ((this & 0xFFFE000000000002) != 0)
  {
    v38 = this;
  }
  else
  {
    v11 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
    v12 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    v13 = (char **)(16 * v11);
    if ((_DWORD)v11)
      v14 = v13 == &WebCore::JSTrustedScriptURL::s_info;
    else
      v14 = 1;
    if (!v14)
    {
      do
      {
        v13 = (char **)v13[2];
        v12 = v13 != 0;
      }
      while (v13 != &WebCore::JSTrustedScriptURL::s_info && v13 != 0);
    }
    if (v12)
    {
      v31 = *(WTF::StringImpl **)(this + 24);
      if (v31)
      {
        ++*((_DWORD *)v31 + 2);
        v39 = v31;
        v21 = 1;
        v40 = 1;
        v41 = 0;
        goto LABEL_32;
      }
    }
    v38 = this;
    if (*(_BYTE *)(this + 5) == 2)
    {
      v16 = *(WTF::StringImpl **)(this + 8);
      if ((v16 & 1) != 0)
      {
        v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v16)
          goto LABEL_27;
      }
      else if (!v16)
      {
LABEL_27:
        v35 = v16;
        goto LABEL_28;
      }
      *(_DWORD *)v16 += 2;
      goto LABEL_27;
    }
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v38, a1);
LABEL_28:
  if (!*(_DWORD *)(v4 + 80))
  {
    v17 = v35;
LABEL_30:
    v18 = 0;
    v19 = 0;
    LODWORD(v33) = 0;
    *(_QWORD *)v32 = 0;
    v39 = v17;
    v20 = 1;
    v40 = 0;
    goto LABEL_31;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
  v17 = v35;
  if (!hasExceptionsAfterHandlingTraps)
    goto LABEL_30;
  LODWORD(v33) = 1;
  v35 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v25);
    else
      *(_DWORD *)v17 -= 2;
  }
  v20 = 0;
  v18 = 1;
  v19 = 1;
LABEL_31:
  v41 = v18;
  ((void (*)(WTF::StringImpl **, int *))off_1E32E8950[v19])(&v35, v32);
  v21 = 0;
  if (!v20)
  {
    v23 = 0;
    v22 = 1;
LABEL_36:
    ((void (*)(int *, WTF::StringImpl **))off_1E32EDD58[v22])(v32, &v39);
    return v23;
  }
LABEL_32:
  LOBYTE(v35) = 0;
  LODWORD(v36) = -1;
  ((void (*)(int *, WTF::StringImpl **, WTF::StringImpl **))off_1E32EDD48[v21])(v32, &v35, &v39);
  LODWORD(v36) = v21;
  (*(void (**)(int *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 112))(v32, v10, &v35);
  if ((_DWORD)v36 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E32EDD38[v36])(&v37, &v35);
  if (v34)
  {
    v27 = (WTF::StringImpl *)LOBYTE(v32[0]);
    LOBYTE(v35) = v32[0];
    v28 = v33;
    v33 = 0;
    v36 = v28;
    if (!*(_QWORD *)(v4 + 16))
    {
      v29.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v32[0]), (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException((JSC::VM *)v4, a1, v29);
      v28 = v36;
    }
    v36 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v34)
    {
      v30 = v33;
      v33 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v27);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
  }
  v22 = v41;
  v23 = 1;
  if (v41 != -1)
    goto LABEL_36;
  return v23;
}

uint64_t WebCore::jsSVGAnimatedString_animVal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v10 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        ++v12;
        v11 -= 8;
        if (!v11)
          goto LABEL_2;
      }
    }
    else
    {
      v12 = *(uint64_t **)(v3 + 24);
    }
    v16 = (uint64_t *)(v4 + 8 * v10);
    if (v12 != v16)
    {
      v17 = *v12;
LABEL_25:
      if (*(_QWORD *)(v17 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v12 != v16)
      {
        v17 = *v12;
        if ((unint64_t)(*v12 + 1) > 1)
        {
          if (v12 != v16)
            goto LABEL_25;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(_QWORD *)(*(_QWORD *)v5 + 32);
  if (!v6)
    return *(_QWORD *)(v2 + 41968);
  v7 = *(_DWORD *)(v6 + 4);
  if (!v7)
    return *(_QWORD *)(v2 + 41968);
  if (v7 == 1)
  {
    v13 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_6;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_6:
  v8 = *(_QWORD *)(v2 + 64760);
  if (!v8 || v6 != *(_QWORD *)(v8 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v8;
}

uint64_t WebCore::JSSVGAnimatedStringOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedStringOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedString>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGAnimatedString::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedString::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedString::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGAnimatedString::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGAnimatedString::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGAnimatedString::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGAnimatedStringPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGAnimatedStringPrototype::create((WebCore::JSSVGAnimatedStringPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGAnimatedString::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGAnimatedString::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6280);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6280))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6280);
    *(_QWORD *)(v36 + 6280) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6280);
  *(_QWORD *)(v32 + 6280) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE815F0 & 1) == 0)
  {
    qword_1ECE815E8 = (uint64_t)&off_1E32E83F0;
    byte_1ECE815F0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE815E8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

WTF::StringImpl *WebCore::JSSVGAnimatedTransformListPrototype::finishCreation(WebCore::JSSVGAnimatedTransformListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSSVGAnimatedTransformList::s_info, &WebCore::JSSVGAnimatedTransformListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGAnimatedTransformList::destroy(WebCore::JSSVGAnimatedTransformList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedTransformList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGAnimatedTransformList::createPrototype(WebCore::JSSVGAnimatedTransformList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGAnimatedTransformListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGAnimatedTransformListPrototype::create(WebCore::JSSVGAnimatedTransformListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGAnimatedTransformListPrototype::finishCreation((WebCore::JSSVGAnimatedTransformListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedTransformList>,(WebCore::DOMConstructorID)776>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6208);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedTransformList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGAnimatedTransformList>((WebCore::JSSVGAnimatedTransformList *)a1, (JSC::VM *)a2, v16)+ 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6208) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimatedTransformListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimatedTransformListPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimatedTransformList>,(WebCore::DOMConstructorID)776>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimatedTransformList_baseVal(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGTransformList>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 40));
}

uint64_t WebCore::jsSVGAnimatedTransformList_animVal(int a1, uint64_t a2)
{
  uint64_t v3;
  JSC::VM *v4;
  WebCore::JSDOMGlobalObject *v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WebCore::JSDOMGlobalObject **)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGTransformList>(a1, v4, v5);
  v6 = *(_QWORD *)(v3 + 40);
  v5 = (WebCore::JSDOMGlobalObject *)WTF::fastMalloc((WTF *)0x38);
  v7 = (_QWORD *)WebCore::SVGValuePropertyList<WebCore::SVGTransform>::SVGValuePropertyList((uint64_t)v5, v6, 1);
  *v7 = off_1E34794A0;
  v7[6] = &unk_1E3479518;
  v8 = *(_DWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v5;
  if (!v8)
    return WebCore::wrap<WebCore::SVGTransformList>(a1, v4, v5);
  if (v8[2] != 1)
  {
    --v8[2];
    return WebCore::wrap<WebCore::SVGTransformList>(a1, v4, v5);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  v5 = *(WebCore::JSDOMGlobalObject **)(v3 + 48);
  if (v5)
    return WebCore::wrap<WebCore::SVGTransformList>(a1, v4, v5);
  return 2;
}

uint64_t WebCore::JSSVGAnimatedTransformListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGAnimatedTransformListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>>(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *Allocator;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = WebCore::getDOMStructure<WebCore::JSSVGAnimatedTransformList>(*((WebCore::JSSVGAnimatedTransformList **)a2 + 7), a2, a3);
  v16 = *((_QWORD *)a2 + 7);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 6288);
  if (!v19)
  {
    v25 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_29:
      v27 = *(_QWORD *)(v25 + 2824);
      if (!*(_QWORD *)(v27 + 6288))
      {
        v33 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
        v39 = 0;
        MEMORY[0x19AEA3204](v33, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
        v35 = (uint64_t)v39;
        v39 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = v40;
        v40 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1)
            WTF::fastFree(v36, v34);
          else
            --*(_DWORD *)v36;
        }
        v37 = *(_QWORD *)(v27 + 6288);
        *(_QWORD *)(v27 + 6288) = v33;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v29 = *(_QWORD *)(v18 + 6288);
      *(_QWORD *)(v18 + 6288) = v19;
      if (v29)
      {
        v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
        WTF::fastFree(v30, v31);
      }
      v32 = __ldxr((unsigned __int8 *)v25);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v25);
    goto LABEL_29;
  }
LABEL_10:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v20 = *((_QWORD *)a2 + 415);
  if ((byte_1ECE81600 & 1) == 0)
  {
    qword_1ECE815F8 = (uint64_t)&off_1E32E8420;
    byte_1ECE81600 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v21 = (SlowCase - 112) | 1;
  else
    v21 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v21 & 1) != 0)
    v22 = v21 + 47;
  else
    v22 = *(_QWORD *)v21 + 32;
  Allocator = *(_QWORD **)(v22 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v22 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE815F8;
  Allocator[2] = v20;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v20 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSVGAnimationElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGAnimationElementPrototype::create(WebCore::JSSVGAnimationElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(this, (uint64_t)&WebCore::JSSVGAnimationElement::s_info, (uint64_t)&WebCore::JSSVGAnimationElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimationElement>,(WebCore::DOMConstructorID)777>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6216);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimationElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSVGAnimationElement::prototype((WebCore::JSSVGAnimationElement *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6216) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGAnimationElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGAnimationElementPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimationElement>,(WebCore::DOMConstructorID)777>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGAnimationElement_targetElement(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 184);
  if (v4 && (v5 = *(WebCore::JSDOMGlobalObject **)(v4 + 8)) != 0)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v5, a4);
  else
    return 2;
}

unint64_t WebCore::jsSVGAnimationElement_requiredExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 368) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 1));
}

unint64_t WebCore::jsSVGAnimationElement_systemLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 368) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 2));
}

unint64_t WebCore::jsSVGAnimationElement_requiredFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WTF **v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 368) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = (WTF **)WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *v7);
}

uint64_t WebCore::JSSVGElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::JSSVGCircleElementPrototype::finishCreation(WebCore::JSSVGCircleElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSSVGCircleElement::s_info, &WebCore::JSSVGCircleElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGCircleElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGCircleElement::createPrototype(WebCore::JSSVGCircleElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGCircleElementPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSSVGCircleElementPrototype::create(WebCore::JSSVGCircleElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGCircleElementPrototype::finishCreation((WebCore::JSSVGCircleElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGCircleElement>,(WebCore::DOMConstructorID)778>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6224);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGCircleElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGCircleElement>((WebCore::JSSVGCircleElement *)a1, (JSC::VM *)a2, v17)+ 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6224) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGCircleElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGCircleElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGCircleElement>,(WebCore::DOMConstructorID)778>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGCircleElement_cx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGCircleElement_cy(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGCircleElement_r(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

WTF::StringImpl *WebCore::JSSVGClipPathElementPrototype::finishCreation(WebCore::JSSVGClipPathElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSSVGClipPathElement::s_info, &WebCore::JSSVGClipPathElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGClipPathElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGClipPathElement::createPrototype(WebCore::JSSVGClipPathElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGClipPathElementPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSSVGClipPathElementPrototype::create(WebCore::JSSVGClipPathElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGClipPathElementPrototype::finishCreation((WebCore::JSSVGClipPathElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGClipPathElement>,(WebCore::DOMConstructorID)779>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6232);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGClipPathElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGClipPathElement>((WebCore::JSSVGClipPathElement *)a1, (JSC::VM *)a2, v17)+ 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6232) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGClipPathElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGClipPathElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGClipPathElement>,(WebCore::DOMConstructorID)779>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGClipPathElement_clipPathUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGClipPathElement_transform(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 208));
}

uint64_t WebCore::JSSVGComponentTransferFunctionElement::prototype(WebCore::JSSVGComponentTransferFunctionElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSC::Structure *v26;
  int v27;
  JSC::JSObject *v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35[6];
  int v36;
  int v37;
  JSC::Structure *v38;
  int v39;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGComponentTransferFunctionElement::s_info
        + ~((_QWORD)&WebCore::JSSVGComponentTransferFunctionElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGComponentTransferFunctionElement::s_info
                                                                                      + ~((_QWORD)&WebCore::JSSVGComponentTransferFunctionElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGComponentTransferFunctionElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        return *(_QWORD *)(v13 + 48);
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGComponentTransferFunctionElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (unint64_t *)((char *)this + 40136);
  v15 = WebCore::JSSVGElement::prototype(this, a2, a3);
  v16 = v15;
  LODWORD(v35[0]) = 23;
  if ((v15 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v15);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  v18 = (uint64_t *)((char *)this + 38904);
  SlowCase = *v14;
  if (*v14 < *((_QWORD *)this + 5018))
    goto LABEL_11;
  SlowCase = *((_QWORD *)this + 5019);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v31);
    *((_QWORD *)this + 5019) = SlowCase + (int)v31;
LABEL_11:
    *v14 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, v35, &WebCore::JSSVGComponentTransferFunctionElementPrototype::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*((_QWORD *)this + 4863) < *((_QWORD *)this + 4864))
    goto LABEL_15;
  v20 = *((_QWORD *)this + 4865);
  if ((v20 & 1) == 0)
  {
    v32 = *(_QWORD *)(v20 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v20 + HIDWORD(v32);
    *((_QWORD *)this + 4865) = v20 + (int)v32;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  v34 = SlowCase;
  *(_QWORD *)(v20 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSSVGComponentTransferFunctionElement::s_info, (uint64_t)&WebCore::JSSVGComponentTransferFunctionElementPrototypeTableValues, (JSC::JSObject *)v20);
  v22 = *(_QWORD *)(*((_QWORD *)this + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24 = JSC::JSString::create((uint64_t)this, v35);
  v25 = v35[0];
  v35[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v39 = *(_DWORD *)v20;
  v38 = v26;
  v27 = JSC::Structure::outOfLineCapacity(v26);
  v36 = 0;
  v37 = v27;
  v35[0] = (WTF::StringImpl *)&v37;
  v35[1] = (WTF::StringImpl *)v20;
  v35[2] = this;
  v35[3] = (WTF::StringImpl *)&v39;
  v35[4] = (WTF::StringImpl *)&v38;
  v35[5] = (WTF::StringImpl *)&v36;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v26, this, v22, 6, (uint64_t)v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, (uint64_t)this, v36, v24);
  *((_DWORD *)v26 + 4) |= 0x10u;
  LODWORD(v35[0]) = 241;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v28 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v28)
      JSC::JSObject::didBecomePrototype(v28, this);
  }
  v29 = *v14;
  if (*v14 >= *((_QWORD *)this + 5018))
  {
    v29 = *((_QWORD *)this + 5019);
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v29 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_26;
    }
    v33 = *(_QWORD *)(v29 + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = v29 + HIDWORD(v33);
    *((_QWORD *)this + 5019) = v29 + (int)v33;
  }
  *v14 = v29 + 128;
LABEL_26:
  *(_DWORD *)v29 = 0;
  MEMORY[0x19AEA4278](v29, this, a2, v20, v35, &WebCore::JSSVGComponentTransferFunctionElement::s_info, 0, 0, v34);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v13 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGComponentTransferFunctionElement::s_info);
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGComponentTransferFunctionElement>,(WebCore::DOMConstructorID)780>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6240);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGComponentTransferFunctionElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSVGComponentTransferFunctionElement::prototype((WebCore::JSSVGComponentTransferFunctionElement *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  JSC::reifyStaticProperties<6u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGComponentTransferFunctionElement::s_info, &WebCore::JSSVGComponentTransferFunctionElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6240) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGComponentTransferFunctionElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGComponentTransferFunctionElementPrototype::s_info != (char **)(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGComponentTransferFunctionElement>,(WebCore::DOMConstructorID)780>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGComponentTransferFunctionElement_type(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

unint64_t WebCore::jsSVGComponentTransferFunctionElement_tableValues(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGComponentTransferFunctionElement_slope(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGComponentTransferFunctionElement_intercept(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGComponentTransferFunctionElement_amplitude(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGComponentTransferFunctionElement_exponent(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGComponentTransferFunctionElement_offset(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

uint64_t WebCore::JSSVGDefsElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGDefsElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGDefsElementPrototype::create(WebCore::JSSVGDefsElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGDefsElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGDefsElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGDefsElement>,(WebCore::DOMConstructorID)781>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6248);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGDefsElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGDefsElement::s_info + ~((_QWORD)&WebCore::JSSVGDefsElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGDefsElement::s_info + ~((_QWORD)&WebCore::JSSVGDefsElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGDefsElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGDefsElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGDefsElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGDefsElementPrototype::create((WebCore::JSSVGDefsElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGDefsElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGDefsElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6248) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGDefsElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGDefsElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGDefsElement>,(WebCore::DOMConstructorID)781>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGDescElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGDescElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGDescElementPrototype::create(WebCore::JSSVGDescElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGDescElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGDescElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGDescElement>,(WebCore::DOMConstructorID)782>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6256);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGDescElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGDescElement::s_info + ~((_QWORD)&WebCore::JSSVGDescElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGDescElement::s_info + ~((_QWORD)&WebCore::JSSVGDescElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGDescElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGDescElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGDescElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGDescElementPrototype::create((WebCore::JSSVGDescElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGDescElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGDescElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6256) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGDescElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGDescElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGDescElement>,(WebCore::DOMConstructorID)782>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6264);
  if (v2)
    return v2;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSElement>,(WebCore::DOMConstructorID)445>(a1, a2);
  v8 = v7;
  LODWORD(v22) = 67099;
  if ((v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_7;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v20);
    v6[2] = SlowCase + (int)v20;
LABEL_7:
    *v6 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v8, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v11 = (_QWORD *)v6[165];
  v2 = v11[2846];
  if (v2 >= v11[2847])
  {
    v2 = v11[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v11[2849];
    v11[2847] = v2 + HIDWORD(v21);
    v11[2848] = v2 + (int)v21;
  }
  v11[2846] = v2 + 48;
LABEL_12:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v6[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v12, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create(a1, &v22);
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v14;
  if (v14 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v16 = *(_QWORD *)(v6[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v14, 6, (uint64_t)&v22);
  v17 = *(_QWORD *)(v6[227] + 2160);
  v19 = WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v18);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v19, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6264) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGElementPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGElement_className(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 168));
}

unint64_t WebCore::jsSVGElement_ownerSVGElement(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (!v4)
    return 2;
  while (1)
  {
    v5 = *(_WORD *)(v4 + 28);
    if ((v5 & 0x20) != 0 && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
      break;
    if ((v5 & 0x80) != 0)
    {
      v7 = *(_QWORD *)(v4 + 200);
      if (!v7)
        return 2;
      v6 = (uint64_t *)(v7 + 8);
    }
    else
    {
      v6 = (uint64_t *)(v4 + 32);
    }
    v4 = *v6;
    if (!*v6)
      return 2;
  }
  return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
}

unint64_t WebCore::jsSVGElement_viewportElement(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (!v4)
    return 2;
  while (1)
  {
    v5 = *(_WORD *)(v4 + 28);
    if ((v5 & 0x20) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
      if (v6 == *(_QWORD *)(WebCore::SVGNames::svgTag + 24)
        || v6 == *(_QWORD *)(WebCore::SVGNames::imageTag + 24)
        || v6 == *(_QWORD *)(WebCore::SVGNames::symbolTag + 24))
      {
        break;
      }
    }
    if ((v5 & 0x80) != 0)
    {
      v8 = *(_QWORD *)(v4 + 200);
      if (!v8)
        return 2;
      v7 = (uint64_t *)(v8 + 8);
    }
    else
    {
      v7 = (uint64_t *)(v4 + 32);
    }
    v4 = *v7;
    if (!*v7)
      return 2;
  }
  return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v4, a4);
}

unint64_t WebCore::jsSVGElement_style(WebCore *a1, WebCore::StyledElement **a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::CSSStyleDeclaration *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)WebCore::StyledElement::cssomStyle(a2[3], (WTF::StringImpl *)a2);
  return WebCore::toJS(a1, v3, v4, v5);
}

BOOL WebCore::setJSSVGElement_style(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  JSC::Structure *v6;
  JSC::VM *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v14[2];
  int v15;
  int v16;
  uint64_t v17;
  JSC::VM *v18;

  v5 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = (JSC::Structure *)v5;
  v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v7 = v18;
  WTF::AtomStringImpl::addLiteral();
  v8 = (WTF::StringImpl *)v14[0];
  v9 = JSC::JSObject::get(v6, a1, v14[0]);
  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
    goto LABEL_10;
  if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  WTF::AtomStringImpl::addLiteral();
  v10 = (WTF::StringImpl *)v14[0];
  v14[0] = 0;
  v14[1] = v9;
  v15 = -1;
  v16 = 0x1000000;
  v17 = 0;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) + 0x48))(v9, a1, v10, a3, v14);
  if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
  {
    v12 = 0;
    if (!v10)
      goto LABEL_11;
  }
  else
  {
    v12 = 1;
    if (!v10)
      goto LABEL_11;
  }
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, v11);
  else
    *(_DWORD *)v10 -= 2;
LABEL_11:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v11);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v12;
}

unint64_t WebCore::jsSVGElement_attributeStyleMap(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v5;
  JSC::VM *v6;
  WebCore::JSDOMGlobalObject *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
  {
    v5 = *(JSC::VM **)(a1 + 56);
    v6 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v7 = (WebCore::JSDOMGlobalObject *)WebCore::StyledElement::ensureAttributeStyleMap(*(WebCore::StyledElement **)(a2 + 24));
    v2 = WebCore::wrap<WebCore::StylePropertyMap>(a1, v6, v7);
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 32) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v8 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::jsSVGElement_onbeforecopy(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 224), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onbeforecopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 224), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onbeforecut(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 232), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onbeforecut(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 232), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onbeforeinput(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 240), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onbeforeinput(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 240), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onbeforepaste(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 256), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onbeforepaste(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 256), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onabort(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onabort(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 64), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onbeforetoggle(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 272), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onbeforetoggle(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 272), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onblur(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 304), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onblur(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 304), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 344), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncancel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 344), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncanplay(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 352), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncanplay(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 352), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncanplaythrough(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 360), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncanplaythrough(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 360), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 368), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onchange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 368), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onclick(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 400), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::IDLAttribute<WebCore::JSSVGElement>::set<&WebCore::setJSSVGElement_onclickSetter,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  WebCore::setJSSVGElement_onclickSetter(*(_DWORD **)(a1 + 56), v5, a3);
  return 1;
}

uint64_t WebCore::jsSVGElement_onclose(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 408), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onclose(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 408), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncontentvisibilityautostatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 488), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncontentvisibilityautostatechange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 488), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncontextmenu(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 496), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncontextmenu(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 496), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncopy(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 528), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 528), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncuechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 544), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncuechange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 544), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oncut(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 560), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oncut(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 560), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondblclick(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 584), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondblclick(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 584), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondrag(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 656), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondrag(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 656), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondragend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 664), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondragend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 664), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondragenter(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 672), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondragenter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 672), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondragleave(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 680), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondragleave(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 680), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondragover(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 688), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondragover(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 688), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondragstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 696), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondragstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 696), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondrop(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 704), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondrop(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 704), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ondurationchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 712), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ondurationchange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 712), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onemptied(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 720), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onemptied(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 720), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onended(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 752), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onended(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 752), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onerror(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 784), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onfocus(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 816), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onfocus(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 816), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onformdata(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 840), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onformdata(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 840), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oninput(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1008), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oninput(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1008), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_oninvalid(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1032), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_oninvalid(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1032), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onkeydown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1048), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onkeydown(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1048), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onkeypress(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1056), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onkeypress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1056), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onkeyup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1072), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onkeyup(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1072), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onload(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onload(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1104), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onloadeddata(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1112), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onloadeddata(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1112), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onloadedmetadata(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1120), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onloadedmetadata(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1120), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onloadstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1160), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onloadstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1160), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onmousedown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1208), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmousedown(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1208), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onmouseenter(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  WebCore::DOMWrapperWorld *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = (_QWORD *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v2)
    return 10;
  v4 = v2;
  v5 = v2[3];
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow((WebCore *)v2);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1216), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmouseenter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  v6 = v5;
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *((_QWORD *)v5 + 3);
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
      v10 = WebCore::threadGlobalDataSlow(v5);
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v11 = *(_QWORD *)(v10 + 40);
    }
    WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1216), a3, v6);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  }
  return v6 != 0;
}

uint64_t WebCore::jsSVGElement_onmouseleave(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  WebCore::DOMWrapperWorld *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = (_QWORD *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v2)
    return 10;
  v4 = v2;
  v5 = v2[3];
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow((WebCore *)v2);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1224), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x28) + 3320), v3);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmouseleave(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  v6 = v5;
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *((_QWORD *)v5 + 3);
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
      v10 = WebCore::threadGlobalDataSlow(v5);
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v11 = *(_QWORD *)(v10 + 40);
    }
    WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1224), a3, v6);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  }
  return v6 != 0;
}

uint64_t WebCore::jsSVGElement_onmousemove(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1232), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmousemove(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1232), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onmouseout(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1240), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmouseout(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1240), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onmouseover(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1248), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmouseover(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1248), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onmouseup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1256), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmouseup(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1256), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpaste(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1416), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpaste(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1416), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpause(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1424), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpause(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1424), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onplay(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1464), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onplay(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1464), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onplaying(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1472), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onplaying(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1472), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onprogress(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1584), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onprogress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1584), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onratechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1624), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onratechange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1624), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onreset(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1688), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onreset(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1688), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onresize(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1696), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onresize(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1696), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onscroll(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1736), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onscroll(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1736), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onsecuritypolicyviolation(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1752), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onsecuritypolicyviolation(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1752), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onseeked(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1760), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onseeked(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1760), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onseeking(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1768), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onseeking(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1768), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onselect(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1776), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onselect(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1776), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onslotchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1864), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onslotchange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1864), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onstalled(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1952), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onstalled(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1952), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onsubmit(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2008), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onsubmit(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2008), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onsuspend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2024), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onsuspend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2024), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontimeupdate(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2048), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontimeupdate(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2048), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontoggle(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2056), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontoggle(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2056), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onvolumechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2264), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onvolumechange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2264), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwaiting(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2272), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwaiting(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2272), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkitanimationend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2312), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkitanimationend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2312), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkitanimationiteration(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2320), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkitanimationiteration(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2320), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkitanimationstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2328), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkitanimationstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2328), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkittransitionend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2344), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkittransitionend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2344), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwheel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2512), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwheel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2512), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onmousewheel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1264), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onmousewheel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1264), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onsearch(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1744), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onsearch(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1744), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontouchcancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2072), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontouchcancel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2072), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontouchend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2080), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontouchend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2080), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontouchmove(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2096), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontouchmove(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2096), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontouchstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontouchstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2104), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontouchforcechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2088), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontouchforcechange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2088), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkitmouseforcechanged(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2416), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkitmouseforcechanged(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2416), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkitmouseforcedown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2424), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkitmouseforcedown(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2424), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkitmouseforcewillbegin(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2440), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkitmouseforcewillbegin(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2440), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onwebkitmouseforceup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2432), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onwebkitmouseforceup(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2432), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onanimationstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 144), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onanimationstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 144), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onanimationiteration(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 136), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onanimationiteration(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 136), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onanimationend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 128), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onanimationend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 128), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onanimationcancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 120), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onanimationcancel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 120), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontransitionrun(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2136), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontransitionrun(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2136), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontransitionstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2144), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontransitionstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2144), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontransitionend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2128), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontransitionend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2128), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ontransitioncancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2120), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ontransitioncancel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 2120), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_ongotpointercapture(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 952), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_ongotpointercapture(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 952), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onlostpointercapture(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1168), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onlostpointercapture(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1168), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointerdown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1488), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointerdown(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1488), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointermove(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1528), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointermove(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1528), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointerup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1552), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointerup(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1552), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointercancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1480), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointercancel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1480), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointerover(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1544), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointerover(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1544), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointerout(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1536), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointerout(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1536), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointerenter(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1496), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointerenter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1496), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onpointerleave(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1504), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onpointerleave(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1504), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onselectstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1808), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onselectstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1808), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsSVGElement_onselectionchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1800), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::setJSSVGElement_onselectionchange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *((_QWORD *)v5 + 3);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v5);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v8, (WTF::StringImpl **)(v11 + 1800), a3, v6);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v7 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)v6);
  return 1;
}

unint64_t WebCore::jsSVGElement_dataset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::Element::dataset(*(WebCore::Element **)(a2 + 24));
  return WebCore::wrap<WebCore::DatasetDOMStringMap>(a1, v3, v4);
}

uint64_t WebCore::jsSVGElement_nonce(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Element *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(WebCore::Element **)(a2 + 24);
  if ((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v15 = *(_QWORD *)(a2 + 24);
    v16 = a1;
    if (WebCore::Element::isNonceable(v5, (unsigned __int8 *)a2, a3, a4, a5))
      v6 = (uint64_t *)((*(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL) + 216);
    else
      v6 = (uint64_t *)MEMORY[0x1E0CBF3B8];
    a1 = v16;
  }
  else
  {
    v6 = (uint64_t *)MEMORY[0x1E0CBF3B8];
  }
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *v6;
  if (!*v6)
    return *(_QWORD *)(v7 + 41968);
  v9 = *(_DWORD *)(v8 + 4);
  if (!v9)
    return *(_QWORD *)(v7 + 41968);
  if (v9 == 1)
  {
    v12 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v13 = *v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)v12;
      if (v14 > 0xFF)
        goto LABEL_6;
      v13 = v14;
    }
    return *(_QWORD *)(v7 + 8 * v13 + 42216);
  }
LABEL_6:
  v10 = *(_QWORD *)(v7 + 64760);
  if (!v10 || v8 != *(_QWORD *)(v10 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v10;
}

BOOL WebCore::setJSSVGElement_nonce(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;

  v5 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v12);
  v7 = v13;
  v8 = v13 == 0;
  if (!v13)
  {
    v9 = v12;
    v12 = 0;
    v14 = v9;
    WebCore::Element::setNonce(v6, (const WTF::AtomString *)&v14);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
    v7 = v13;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32EDCF0[v7])(&v14, &v12);
  return v8;
}

uint64_t WebCore::jsSVGElement_autofocus(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::SVGNames::autofocusAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::SVGNames::autofocusAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::SVGNames::autofocusAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

BOOL WebCore::setJSSVGElement_autofocus(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  JSC::VM *v8;
  double v9;
  _BOOL4 v10;
  WTF::StringImpl **v11;
  BOOL v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;

  v5 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = v5;
  v8 = *(JSC::VM **)(a1 + 56);
  if (a3 >= 0xFFFE000000000000)
  {
    v13 = (_DWORD)a3 == 0;
    goto LABEL_27;
  }
  *(_QWORD *)&v9 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v10 = a3 == 7;
      goto LABEL_6;
    }
    v14 = *(unsigned __int8 *)(a3 + 5);
    if (v14 == 3)
    {
      v17 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v14 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v10 = 1;
          goto LABEL_6;
        }
        v13 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_27;
      }
      v15 = *(_QWORD *)(a3 + 8);
      if ((v15 & 1) != 0)
        v16 = (int *)(a3 + 16);
      else
        v16 = (int *)(v15 + 4);
      v17 = *v16;
    }
    v13 = v17 == 0;
LABEL_27:
    v10 = !v13;
    goto LABEL_6;
  }
  v6.n128_u64[0] = a3 - 0x2000000000000;
  v10 = v9 > 0.0 || v9 < 0.0;
LABEL_6:
  v11 = *(WTF::StringImpl ***)(v7 + 24);
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v11, (const WebCore::QualifiedName *)&WebCore::SVGNames::autofocusAttr, v10, v6);
  return 1;
}

unint64_t WebCore::jsSVGElement_tabIndex(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 584))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGElement_tabIndex(JSC::JSGlobalObject *a1, unint64_t a2, WTF::AtomString *a3)
{
  unint64_t v5;
  WebCore::Element *v6;
  JSC::VM *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  JSC::VM *v22;
  unint64_t v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  WTF::AtomString *v29;

  v5 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(v5 + 24);
  v24 = (WTF *)v26;
  v25 = 4;
  v26[32] = 0;
  v27 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v28 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v24;
  v29 = a3;
  v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)a3 < 0xFFFE000000000000)
  {
    v13 = (unint64_t)a3 - 0x2000000000000;
    if ((unint64_t)a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v29, a1);
      v7 = v22;
      v13 = v23;
    }
    v14 = (v13 >> 52) & 0x7FF;
    v15 = v14 - 1023;
    v16 = v13 >> (51 - (v13 >> 52));
    if (v14 > 0x433)
      LODWORD(v16) = v13 << ((v13 >> 52) - 51);
    if (v14 >= 0x41F)
      v17 = v16;
    else
      v17 = (((1 << ((v13 >> 52) + 1)) - 1) & v16) + (1 << ((v13 >> 52) + 1));
    if ((v13 & 0x8000000000000000) == 0)
      v18 = v17;
    else
      v18 = -v17;
    if (v15 <= 0x53)
      a3 = (WTF::AtomString *)v18;
    else
      a3 = 0;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
  {
    v9 = 0;
  }
  else
  {
    WebCore::Element::setIntegralAttribute(v6, (const WebCore::QualifiedName *)&WebCore::HTMLNames::tabindexAttr, a3);
    v9 = 1;
  }
  if (HIDWORD(v25))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v24, v28);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
    if (HIDWORD(v25))
    {
      v19 = v24;
      v20 = 8 * HIDWORD(v25);
      do
      {
        v21 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v21, v8);
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
  }
  v10 = v24;
  if (v26 != (_BYTE *)v24 && v24 != 0)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v10, v8);
  }
  return v9;
}

unint64_t JSC::jsDynamicCast<WebCore::JSSVGElement *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSSVGElement::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSSVGElement::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::createJSSVGWrapper(WebCore::JSSVGCircleElement **a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  WebCore::JSSVGCircleElement *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  WebCore::JSSVGTitleElement *v13;
  JSC::JSCell *v14;
  uint64_t v15;
  WebCore::JSSVGTitleElement *v16;
  _QWORD *v17;
  unint64_t SlowCase;
  WebCore::JSSVGCircleElement *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  unint64_t v26;
  WebCore::JSSVGRectElement *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  WebCore::JSSVGRectElement *v30;
  _QWORD *v31;
  WebCore::JSSVGCircleElement *v32;
  WTF **v33;
  unint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  int v39;
  WebCore::JSSVGCircleElement *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  unint64_t v47;
  WebCore::JSSVGPathElement *v48;
  JSC::JSCell *v49;
  uint64_t v50;
  WebCore::JSSVGPathElement *v51;
  _QWORD *v52;
  int v53;
  unint64_t v54;
  WebCore::JSSVGStopElement *v55;
  JSC::VM *v56;
  _QWORD *v57;
  unint64_t v58;
  WebCore::JSSVGCircleElement *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  WebCore::JSSVGTextElement *v64;
  JSC::VM *v65;
  _QWORD *v66;
  WebCore::JSSVGCircleElement *v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  unint64_t v74;
  WebCore::JSSVGLineElement *v75;
  JSC::JSCell *Prototype;
  uint64_t v77;
  WebCore::JSSVGLineElement *v78;
  _QWORD *v79;
  unint64_t v80;
  WebCore::JSSVGLinearGradientElement *v81;
  JSC::VM *v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *Allocator;
  int v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  void *v93;
  int v94;
  WebCore::JSSVGCircleElement *v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char **v101;
  unint64_t v102;
  WebCore::JSSVGSVGElement *v103;
  JSC::JSCell *v104;
  uint64_t v105;
  WebCore::JSSVGSVGElement *v106;
  _QWORD *v107;
  WebCore::JSSVGCircleElement *v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char **v114;
  unint64_t v115;
  WebCore::JSSVGGraphicsElement *v116;
  JSC::JSCell *v117;
  unint64_t v118;
  WebCore::JSDOMGlobalObject *v119;
  JSC::Structure *v120;
  JSC::JSCell *v121;
  uint64_t v122;
  WebCore::JSSVGCircleElement *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  WTF *v130;
  uint64_t *v131;
  uint64_t v132;
  void *v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  void *v146;
  int v147;
  unint64_t v148;
  WebCore::JSSVGTSpanElement *v149;
  JSC::VM *v150;
  _QWORD *v151;
  uint64_t v152;
  void *v153;
  WTF *v154;
  WTF *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  WebCore::JSSVGPolygonElement *v159;
  JSC::VM *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  WebCore::JSSVGCircleElement *v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char **v171;
  unint64_t v172;
  WebCore::JSSVGElement *v173;
  JSC::JSCell *v174;
  unint64_t v175;
  JSC::Structure *v176;
  JSC::JSCell *v177;
  uint64_t v178;
  WebCore::JSSVGStyleElement *v179;
  _QWORD *v180;
  WebCore::JSSVGCircleElement *v181;
  unsigned int v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char **v187;
  unint64_t v188;
  WebCore::JSSVGGraphicsElement *v189;
  JSC::JSCell *v190;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v192;
  JSC::Structure *v193;
  JSC::JSCell *v194;
  uint64_t v195;
  WebCore::JSSVGCircleElement *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  WebCore::JSSVGCircleElement *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v209;
  uint64_t v210;
  WTF *v211;
  void *v212;
  int v213;
  uint64_t v214;
  uint64_t v216;
  uint64_t v217;
  WTF *v218;
  void *v219;
  int v220;
  unint64_t v221;
  unint64_t v222;
  WTF *v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  WTF *v243;
  WTF *v244;

  v4 = *a2;
  switch(*(_WORD *)(*((_QWORD *)*a2 + 12) + 10))
  {
    case 0xB4:
      return WebCore::createSVGAnimateElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xB6:
      return WebCore::createSVGAnimateMotionElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xB7:
      return WebCore::createSVGAnimateTransformElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xB8:
      *a2 = 0;
      v58 = WebCore::getDOMStructure<WebCore::JSSVGCircleElement>(a1[7], (JSC::VM *)a1, a3);
      v59 = a1[7];
      v60 = *((_QWORD *)v59 + 5182);
      v61 = *(_QWORD *)(v60 + 23536);
      v62 = *(_QWORD **)(v61 + 6304);
      if (v62)
        goto LABEL_54;
      v88 = *(_QWORD *)(v60 + 22648);
      if (__ldaxr((unsigned __int8 *)v88))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v88))
      {
LABEL_94:
        v90 = *(_QWORD *)(v88 + 2824);
        v242 = *(_QWORD *)(v90 + 6304);
        if (!v242)
        {
          v132 = WTF::fastMalloc((WTF *)0xF8);
          WTF::CString::CString((WTF::CString *)&v244, "IsoSpace T");
          v243 = 0;
          MEMORY[0x19AEA3204](v132, &v244, (char *)v59 + 192, (char *)v59 + 1872, 40, 8, &v243);
          v134 = v243;
          v243 = 0;
          if (v134)
            (*(void (**)(WTF *))(*(_QWORD *)v134 + 8))(v134);
          v135 = v244;
          v244 = 0;
          if (v135)
          {
            if (*(_DWORD *)v135 == 1)
              WTF::fastFree(v135, v133);
            else
              --*(_DWORD *)v135;
          }
          v242 = v132;
          v136 = *(_QWORD *)(v90 + 6304);
          *(_QWORD *)(v90 + 6304) = v132;
          if (v136)
            (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
          v137 = *(unsigned int *)(v88 + 2844);
          if ((_DWORD)v137 == *(_DWORD *)(v88 + 2840))
          {
            v138 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88 + 2832, v137 + 1, (unint64_t)&v242);
            v137 = *(unsigned int *)(v88 + 2844);
            *(_QWORD *)(*(_QWORD *)(v88 + 2832) + 8 * v137) = *v138;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v88 + 2832) + 8 * v137) = v132;
          }
          *(_DWORD *)(v88 + 2844) = v137 + 1;
        }
        v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
        JSC::GCClient::IsoSubspace::IsoSubspace();
        v91 = *(_QWORD *)(v61 + 6304);
        *(_QWORD *)(v61 + 6304) = v62;
        if (v91)
        {
          v92 = (WTF *)MEMORY[0x19AEA3528]();
          WTF::fastFree(v92, v93);
        }
        v94 = __ldxr((unsigned __int8 *)v88);
        if (v94 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v88))
          {
LABEL_54:
            SlowCase = v62[3];
            if (SlowCase >= v62[4])
            {
              SlowCase = v62[5];
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_56:
                *(_DWORD *)SlowCase = 0;
                WebCore::JSDOMObject::JSDOMObject(SlowCase, v58);
                *(_QWORD *)(SlowCase + 24) = v4;
                *(_QWORD *)(SlowCase + 32) = 0;
                if (*((_BYTE *)v59 + 755))
                  __dmb(0xAu);
                goto LABEL_74;
              }
              v231 = *(_QWORD *)(SlowCase + 8) ^ v62[6];
              v62[4] = SlowCase + HIDWORD(v231);
              v62[5] = SlowCase + (int)v231;
            }
            v62[3] = SlowCase + 48;
            goto LABEL_56;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v88);
        goto LABEL_54;
      }
      MEMORY[0x19AEA534C](v88);
      goto LABEL_94;
    case 0xB9:
      *a2 = 0;
      v200 = WebCore::getDOMStructure<WebCore::JSSVGClipPathElement>(a1[7], (JSC::VM *)a1, a3);
      v201 = a1[7];
      v202 = *((_QWORD *)v201 + 5182);
      v203 = *(_QWORD *)(v202 + 23536);
      v204 = *(_QWORD **)(v203 + 6312);
      if (v204)
        goto LABEL_216;
      v214 = *(_QWORD *)(v202 + 22648);
      if (__ldaxr((unsigned __int8 *)v214))
      {
        __clrex();
LABEL_240:
        MEMORY[0x19AEA534C](v214);
        goto LABEL_241;
      }
      if (__stxr(1u, (unsigned __int8 *)v214))
        goto LABEL_240;
LABEL_241:
      v216 = *(_QWORD *)(v214 + 2824);
      v244 = *(WTF **)(v216 + 6312);
      if (!v244)
      {
        v242 = 40;
        std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)v201 + 192, (uint64_t)v201 + 1872, &v242, JSC::JSCell::numberOfLowerTierCells, (uint64_t *)&v243);
        v226 = v243;
        v244 = v243;
        v227 = *(_QWORD *)(v216 + 6312);
        *(_QWORD *)(v216 + 6312) = v243;
        if (v227)
          (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
        v228 = *(unsigned int *)(v214 + 2844);
        if ((_DWORD)v228 == *(_DWORD *)(v214 + 2840))
        {
          WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v214 + 2832, (unint64_t)&v244);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v214 + 2832) + 8 * v228) = v226;
          *(_DWORD *)(v214 + 2844) = v228 + 1;
        }
      }
      v204 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v217 = *(_QWORD *)(v203 + 6312);
      *(_QWORD *)(v203 + 6312) = v204;
      if (v217)
      {
        v218 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v218, v219);
      }
      v220 = __ldxr((unsigned __int8 *)v214);
      if (v220 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v214))
          goto LABEL_216;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v214);
LABEL_216:
      SlowCase = v204[3];
      if (SlowCase < v204[4])
        goto LABEL_217;
      SlowCase = v204[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v241 = *(_QWORD *)(SlowCase + 8) ^ v204[6];
        v204[4] = SlowCase + HIDWORD(v241);
        v204[5] = SlowCase + (int)v241;
LABEL_217:
        v204[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v200);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v201 + 755))
        __dmb(0xAu);
LABEL_184:
      v162 = (uint64_t)a1[415];
      {
        WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
      }
      if (*(_DWORD *)(v162 + 48))
      {
        v244 = v4;
        JSC::Weak<JSC::JSObject>::Weak(&v243, SlowCase, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner, v162);
        v131 = (uint64_t *)(v162 + 32);
        goto LABEL_129;
      }
      if ((SlowCase & 8) != 0)
        v163 = (SlowCase - 112) | 1;
      else
        v163 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v163 & 1) != 0)
        v164 = v163 + 47;
      else
        v164 = *(_QWORD *)v163 + 32;
      Allocator = *(_QWORD **)(v164 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v164 + 16) = *Allocator;
      *Allocator = SlowCase;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      Allocator[2] = v162;
LABEL_85:
      v37 = (WTF *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = Allocator;
      if (v37)
        goto LABEL_86;
      return SlowCase;
    case 0xBB:
      *a2 = 0;
      v181 = a1[412];
      if (!v181)
        goto LABEL_209;
      v182 = *((_DWORD *)v181 - 2);
      v183 = ((unint64_t)&WebCore::JSSVGDefsElement::s_info + ~((_QWORD)&WebCore::JSSVGDefsElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGDefsElement::s_info + ~((_QWORD)&WebCore::JSSVGDefsElement::s_info << 32)) >> 22);
      v184 = 9 * ((v183 + ~(v183 << 13)) ^ ((v183 + ~(v183 << 13)) >> 8));
      v185 = (v184 ^ (v184 >> 15)) + ~((v184 ^ (v184 >> 15)) << 27);
      v186 = v182 & ((v185 >> 31) ^ v185);
      v187 = (char **)*((_QWORD *)v181 + 2 * v186);
      if (v187 == &WebCore::JSSVGDefsElement::s_info)
        goto LABEL_208;
      v206 = 1;
      while (v187)
      {
        v186 = ((_DWORD)v186 + v206) & v182;
        v187 = (char **)*((_QWORD *)v181 + 2 * v186);
        ++v206;
        if (v187 == &WebCore::JSSVGDefsElement::s_info)
        {
LABEL_208:
          v188 = *((_QWORD *)v181 + 2 * v186 + 1);
          if (v188)
            goto LABEL_210;
          break;
        }
      }
LABEL_209:
      v189 = a1[7];
      v190 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(v189, (JSC::VM *)a1, a3);
      Structure = WebCore::JSSVGDefsElementPrototype::createStructure((uint64_t *)v189, (uint64_t)a1, v190);
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v194 = (JSC::JSCell *)WebCore::JSSVGDefsElementPrototype::create(v189, Structure, v192, v193);
      v195 = WebCore::JSSVGDefsElement::createStructure((uint64_t *)v189, (uint64_t)a1, v194);
      v188 = WebCore::cacheDOMStructure((JSCell *)a1, v195, (uint64_t)&WebCore::JSSVGDefsElement::s_info);
LABEL_210:
      v196 = a1[7];
      v197 = *((_QWORD *)v196 + 5182);
      v198 = *(_QWORD *)(v197 + 23536);
      v199 = *(_QWORD **)(v198 + 6328);
      if (v199)
        goto LABEL_211;
      v207 = *(_QWORD *)(v197 + 22648);
      if (__ldaxr((unsigned __int8 *)v207))
      {
        __clrex();
LABEL_231:
        MEMORY[0x19AEA534C](v207);
        goto LABEL_232;
      }
      if (__stxr(1u, (unsigned __int8 *)v207))
        goto LABEL_231;
LABEL_232:
      v209 = *(_QWORD *)(v207 + 2824);
      v244 = *(WTF **)(v209 + 6328);
      if (!v244)
      {
        v242 = 40;
        std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)v196 + 192, (uint64_t)v196 + 1872, &v242, JSC::JSCell::numberOfLowerTierCells, (uint64_t *)&v243);
        v223 = v243;
        v244 = v243;
        v224 = *(_QWORD *)(v209 + 6328);
        *(_QWORD *)(v209 + 6328) = v243;
        if (v224)
          (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
        v225 = *(unsigned int *)(v207 + 2844);
        if ((_DWORD)v225 == *(_DWORD *)(v207 + 2840))
        {
          WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v207 + 2832, (unint64_t)&v244);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v207 + 2832) + 8 * v225) = v223;
          *(_DWORD *)(v207 + 2844) = v225 + 1;
        }
      }
      v199 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v210 = *(_QWORD *)(v198 + 6328);
      *(_QWORD *)(v198 + 6328) = v199;
      if (v210)
      {
        v211 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v211, v212);
      }
      v213 = __ldxr((unsigned __int8 *)v207);
      if (v213 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v207))
          goto LABEL_211;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v207);
LABEL_211:
      SlowCase = v199[3];
      if (SlowCase < v199[4])
        goto LABEL_212;
      SlowCase = v199[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v240 = *(_QWORD *)(SlowCase + 8) ^ v199[6];
        v199[4] = SlowCase + HIDWORD(v240);
        v199[5] = SlowCase + (int)v240;
LABEL_212:
        v199[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v188);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v196 + 755))
        goto LABEL_116;
      goto LABEL_18;
    case 0xBC:
      return WebCore::createSVGDescElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xBD:
      return WebCore::createSVGEllipseElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xBE:
      return WebCore::createSVGFEBlendElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xBF:
      return WebCore::createSVGFEColorMatrixElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC0:
      return WebCore::createSVGFEComponentTransferElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC1:
      return WebCore::createSVGFECompositeElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC2:
      return WebCore::createSVGFEConvolveMatrixElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC3:
      return WebCore::createSVGFEDiffuseLightingElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC4:
      return WebCore::createSVGFEDisplacementMapElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC5:
      return WebCore::createSVGFEDistantLightElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC6:
      return WebCore::createSVGFEDropShadowElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC7:
      return WebCore::createSVGFEFloodElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC8:
      return WebCore::createSVGFEFuncAElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xC9:
      return WebCore::createSVGFEFuncBElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xCA:
      return WebCore::createSVGFEFuncGElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xCB:
      return WebCore::createSVGFEFuncRElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xCC:
      return WebCore::createSVGFEGaussianBlurElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xCD:
      return WebCore::createSVGFEImageElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xCE:
      return WebCore::createSVGFEMergeElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xCF:
      return WebCore::createSVGFEMergeNodeElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD0:
      return WebCore::createSVGFEMorphologyElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD1:
      return WebCore::createSVGFEOffsetElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD2:
      return WebCore::createSVGFEPointLightElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD3:
      return WebCore::createSVGFESpecularLightingElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD4:
      return WebCore::createSVGFESpotLightElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD5:
      return WebCore::createSVGFETileElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD6:
      return WebCore::createSVGFETurbulenceElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD7:
      return WebCore::createSVGFilterElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD8:
      return WebCore::createSVGForeignObjectElementWrapper((JSC::VM *)a1, a2, a3);
    case 0xD9:
      *a2 = 0;
      v108 = a1[412];
      if (!v108)
        goto LABEL_111;
      v109 = *((_DWORD *)v108 - 2);
      v110 = ((unint64_t)&WebCore::JSSVGGElement::s_info + ~((_QWORD)&WebCore::JSSVGGElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGGElement::s_info + ~((_QWORD)&WebCore::JSSVGGElement::s_info << 32)) >> 22);
      v111 = 9 * ((v110 + ~(v110 << 13)) ^ ((v110 + ~(v110 << 13)) >> 8));
      v112 = (v111 ^ (v111 >> 15)) + ~((v111 ^ (v111 >> 15)) << 27);
      v113 = v109 & ((v112 >> 31) ^ v112);
      v114 = (char **)*((_QWORD *)v108 + 2 * v113);
      if (v114 == &WebCore::JSSVGGElement::s_info)
        goto LABEL_110;
      v140 = 1;
      while (v114)
      {
        v113 = ((_DWORD)v113 + v140) & v109;
        v114 = (char **)*((_QWORD *)v108 + 2 * v113);
        ++v140;
        if (v114 == &WebCore::JSSVGGElement::s_info)
        {
LABEL_110:
          v115 = *((_QWORD *)v108 + 2 * v113 + 1);
          if (v115)
            goto LABEL_112;
          break;
        }
      }
LABEL_111:
      v116 = a1[7];
      v117 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(v116, (JSC::VM *)a1, a3);
      v118 = WebCore::JSSVGGElementPrototype::createStructure((uint64_t *)v116, (uint64_t)a1, v117);
      *(_DWORD *)(v118 + 16) |= 0x80000u;
      v121 = (JSC::JSCell *)WebCore::JSSVGGElementPrototype::create(v116, v118, v119, v120);
      v122 = WebCore::JSSVGGElement::createStructure((uint64_t *)v116, (uint64_t)a1, v121);
      v115 = WebCore::cacheDOMStructure((JSCell *)a1, v122, (uint64_t)&WebCore::JSSVGGElement::s_info);
LABEL_112:
      v123 = a1[7];
      v124 = *((_QWORD *)v123 + 5182);
      v125 = *(_QWORD *)(v124 + 23536);
      v126 = *(_QWORD **)(v125 + 6576);
      if (v126)
        goto LABEL_113;
      v141 = *(_QWORD *)(v124 + 22648);
      if (__ldaxr((unsigned __int8 *)v141))
      {
        __clrex();
LABEL_155:
        MEMORY[0x19AEA534C](v141);
        goto LABEL_156;
      }
      if (__stxr(1u, (unsigned __int8 *)v141))
        goto LABEL_155;
LABEL_156:
      v143 = *(_QWORD *)(v141 + 2824);
      v242 = *(_QWORD *)(v143 + 6576);
      if (!v242)
      {
        v152 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v244, "IsoSpace T");
        v243 = 0;
        MEMORY[0x19AEA3204](v152, &v244, (char *)v123 + 192, (char *)v123 + 1872, 40, 8, &v243);
        v154 = v243;
        v243 = 0;
        if (v154)
          (*(void (**)(WTF *))(*(_QWORD *)v154 + 8))(v154);
        v155 = v244;
        v244 = 0;
        if (v155)
        {
          if (*(_DWORD *)v155 == 1)
            WTF::fastFree(v155, v153);
          else
            --*(_DWORD *)v155;
        }
        v242 = v152;
        v156 = *(_QWORD *)(v143 + 6576);
        *(_QWORD *)(v143 + 6576) = v152;
        if (v156)
          (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
        v157 = *(unsigned int *)(v141 + 2844);
        if ((_DWORD)v157 == *(_DWORD *)(v141 + 2840))
        {
          WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v141 + 2832, (unint64_t)&v242);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v141 + 2832) + 8 * v157) = v152;
          *(_DWORD *)(v141 + 2844) = v157 + 1;
        }
      }
      v126 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v144 = *(_QWORD *)(v125 + 6576);
      *(_QWORD *)(v125 + 6576) = v126;
      if (v144)
      {
        v145 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v145, v146);
      }
      v147 = __ldxr((unsigned __int8 *)v141);
      if (v147 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v141))
          goto LABEL_113;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v141);
LABEL_113:
      SlowCase = v126[3];
      if (SlowCase < v126[4])
        goto LABEL_114;
      SlowCase = v126[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v236 = *(_QWORD *)(SlowCase + 8) ^ v126[6];
        v126[4] = SlowCase + HIDWORD(v236);
        v126[5] = SlowCase + (int)v236;
LABEL_114:
        v126[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v115);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v123 + 755))
LABEL_116:
        __dmb(0xAu);
LABEL_18:
      v32 = a1[415];
      {
        WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
      }
      if (v4)
        v33 = (WTF **)((char *)v4 + 8);
      else
        v33 = 0;
      if (!*((_DWORD *)v32 + 12))
      {
        if ((SlowCase & 8) != 0)
          v34 = (SlowCase - 112) | 1;
        else
          v34 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v34 & 1) != 0)
          v35 = v34 + 47;
        else
          v35 = *(_QWORD *)v34 + 32;
        v36 = *(WTF **)(v35 + 16);
        if (!v36)
          v36 = (WTF *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v35 + 16) = *(_QWORD *)v36;
        *(_QWORD *)v36 = SlowCase;
        *((_QWORD *)v36 + 1) = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
        *((_QWORD *)v36 + 2) = v32;
        v37 = *v33;
        *v33 = v36;
        if (!v37)
          return SlowCase;
LABEL_86:
        *((_QWORD *)v37 + 1) = 3;
        return SlowCase;
      }
LABEL_121:
      v244 = v4;
      if ((SlowCase & 8) != 0)
        v128 = (SlowCase - 112) | 1;
      else
        v128 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v128 & 1) != 0)
        v129 = v128 + 47;
      else
        v129 = *(_QWORD *)v128 + 32;
      v130 = *(WTF **)(v129 + 16);
      if (!v130)
        v130 = (WTF *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v129 + 16) = *(_QWORD *)v130;
      *(_QWORD *)v130 = SlowCase;
      *((_QWORD *)v130 + 1) = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      *((_QWORD *)v130 + 2) = v32;
      v243 = v130;
      v131 = (uint64_t *)((char *)v32 + 32);
LABEL_129:
      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v131, (uint64_t *)&v244, (uint64_t *)&v243);
      v37 = v243;
      if (v243)
        goto LABEL_86;
      return SlowCase;
    case 0xDD:
      *a2 = 0;
      v67 = a1[412];
      if (!v67)
        goto LABEL_65;
      v68 = *((_DWORD *)v67 - 2);
      v69 = ((unint64_t)&WebCore::JSSVGLineElement::s_info + ~((_QWORD)&WebCore::JSSVGLineElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGLineElement::s_info + ~((_QWORD)&WebCore::JSSVGLineElement::s_info << 32)) >> 22);
      v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
      v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
      v72 = v68 & ((v71 >> 31) ^ v71);
      v73 = (char **)*((_QWORD *)v67 + 2 * v72);
      if (v73 == &WebCore::JSSVGLineElement::s_info)
        goto LABEL_64;
      v127 = 1;
      while (v73)
      {
        v72 = ((_DWORD)v72 + v127) & v68;
        v73 = (char **)*((_QWORD *)v67 + 2 * v72);
        ++v127;
        if (v73 == &WebCore::JSSVGLineElement::s_info)
        {
LABEL_64:
          v74 = *((_QWORD *)v67 + 2 * v72 + 1);
          if (v74)
            goto LABEL_66;
          break;
        }
      }
LABEL_65:
      v75 = a1[7];
      Prototype = (JSC::JSCell *)WebCore::JSSVGLineElement::createPrototype(v75, (JSC::VM *)a1, a3);
      v77 = WebCore::JSSVGLineElement::createStructure((uint64_t *)v75, (uint64_t)a1, Prototype);
      v74 = WebCore::cacheDOMStructure((JSCell *)a1, v77, (uint64_t)&WebCore::JSSVGLineElement::s_info);
LABEL_66:
      v78 = a1[7];
      v79 = (_QWORD *)WebCore::JSSVGLineElement::subspaceForImpl(v78, (JSC::VM *)a2);
      SlowCase = v79[3];
      if (SlowCase < v79[4])
        goto LABEL_67;
      SlowCase = v79[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v233 = *(_QWORD *)(SlowCase + 8) ^ v79[6];
        v79[4] = SlowCase + HIDWORD(v233);
        v79[5] = SlowCase + (int)v233;
LABEL_67:
        v79[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v74);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v78 + 755))
        goto LABEL_17;
      goto LABEL_18;
    case 0xDE:
      *a2 = 0;
      v80 = WebCore::getDOMStructure<WebCore::JSSVGLinearGradientElement>((uint64_t)a1[7], (JSC::VM *)a1, a3);
      v81 = a1[7];
      v83 = (_QWORD *)WebCore::JSSVGLinearGradientElement::subspaceForImpl(v81, v82);
      SlowCase = v83[3];
      if (SlowCase < v83[4])
        goto LABEL_71;
      SlowCase = v83[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v234 = *(_QWORD *)(SlowCase + 8) ^ v83[6];
        v83[4] = SlowCase + HIDWORD(v234);
        v83[5] = SlowCase + (int)v234;
LABEL_71:
        v83[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v80);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v81 + 755))
        goto LABEL_73;
      goto LABEL_74;
    case 0xDF:
      return WebCore::createWrapper<WebCore::SVGMarkerElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xE0:
      return WebCore::createSVGMaskElementWrapper((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xE1:
      return WebCore::createWrapper<WebCore::SVGMetadataElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xE2:
      return WebCore::createWrapper<WebCore::SVGMPathElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xE3:
      *a2 = 0;
      v40 = a1[412];
      if (!v40)
        goto LABEL_40;
      v41 = *((_DWORD *)v40 - 2);
      v42 = ((unint64_t)&WebCore::JSSVGPathElement::s_info + ~((_QWORD)&WebCore::JSSVGPathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathElement::s_info + ~((_QWORD)&WebCore::JSSVGPathElement::s_info << 32)) >> 22);
      v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
      v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
      v45 = v41 & ((v44 >> 31) ^ v44);
      v46 = (char **)*((_QWORD *)v40 + 2 * v45);
      if (v46 == &WebCore::JSSVGPathElement::s_info)
        goto LABEL_39;
      v87 = 1;
      while (v46)
      {
        v45 = ((_DWORD)v45 + v87) & v41;
        v46 = (char **)*((_QWORD *)v40 + 2 * v45);
        ++v87;
        if (v46 == &WebCore::JSSVGPathElement::s_info)
        {
LABEL_39:
          v47 = *((_QWORD *)v40 + 2 * v45 + 1);
          if (v47)
            goto LABEL_41;
          break;
        }
      }
LABEL_40:
      v48 = a1[7];
      v49 = (JSC::JSCell *)WebCore::JSSVGPathElement::createPrototype(v48, (JSC::VM *)a1, a3);
      v50 = WebCore::JSSVGPathElement::createStructure((uint64_t *)v48, (uint64_t)a1, v49);
      v47 = WebCore::cacheDOMStructure((JSCell *)a1, v50, (uint64_t)&WebCore::JSSVGPathElement::s_info);
LABEL_41:
      v51 = a1[7];
      v52 = (_QWORD *)WebCore::JSSVGPathElement::subspaceForImpl(v51, (JSC::VM *)a2);
      SlowCase = v52[3];
      if (SlowCase < v52[4])
        goto LABEL_42;
      SlowCase = v52[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v229 = *(_QWORD *)(SlowCase + 8) ^ v52[6];
        v52[4] = SlowCase + HIDWORD(v229);
        v52[5] = SlowCase + (int)v229;
LABEL_42:
        v52[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v47);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v51 + 755))
        goto LABEL_17;
      goto LABEL_18;
    case 0xE4:
      return WebCore::createWrapper<WebCore::SVGPatternElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xE5:
      *a2 = 0;
      v158 = WebCore::getDOMStructure<WebCore::JSSVGPolygonElement>((uint64_t)a1[7], (JSC::VM *)a1, a3);
      v159 = a1[7];
      v161 = (_QWORD *)WebCore::JSSVGPolygonElement::subspaceForImpl(v159, v160);
      SlowCase = v161[3];
      if (SlowCase < v161[4])
        goto LABEL_181;
      SlowCase = v161[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v238 = *(_QWORD *)(SlowCase + 8) ^ v161[6];
        v161[4] = SlowCase + HIDWORD(v238);
        v161[5] = SlowCase + (int)v238;
LABEL_181:
        v161[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v158);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v159 + 755))
        goto LABEL_183;
      goto LABEL_184;
    case 0xE6:
      return WebCore::createWrapper<WebCore::SVGPolylineElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xE7:
      return WebCore::createSVGRadialGradientElementWrapper((JSC::VM *)a1, (JSC::VM *)a2);
    case 0xE8:
      *a2 = 0;
      v19 = a1[412];
      if (!v19)
        goto LABEL_13;
      v20 = *((_DWORD *)v19 - 2);
      v21 = ((unint64_t)&WebCore::JSSVGRectElement::s_info + ~((_QWORD)&WebCore::JSSVGRectElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGRectElement::s_info + ~((_QWORD)&WebCore::JSSVGRectElement::s_info << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = (char **)*((_QWORD *)v19 + 2 * v24);
      if (v25 == &WebCore::JSSVGRectElement::s_info)
        goto LABEL_12;
      v53 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v53) & v20;
        v25 = (char **)*((_QWORD *)v19 + 2 * v24);
        ++v53;
        if (v25 == &WebCore::JSSVGRectElement::s_info)
        {
LABEL_12:
          v26 = *((_QWORD *)v19 + 2 * v24 + 1);
          if (v26)
            goto LABEL_14;
          break;
        }
      }
LABEL_13:
      v27 = a1[7];
      v28 = (JSC::JSCell *)WebCore::JSSVGRectElement::createPrototype(v27, (JSC::VM *)a1, a3);
      v29 = WebCore::JSSVGRectElement::createStructure((uint64_t *)v27, (uint64_t)a1, v28);
      v26 = WebCore::cacheDOMStructure((JSCell *)a1, v29, (uint64_t)&WebCore::JSSVGRectElement::s_info);
LABEL_14:
      v30 = a1[7];
      v31 = (_QWORD *)WebCore::JSSVGRectElement::subspaceForImpl(v30, (JSC::VM *)a2);
      SlowCase = v31[3];
      if (SlowCase < v31[4])
        goto LABEL_15;
      SlowCase = v31[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v222 = *(_QWORD *)(SlowCase + 8) ^ v31[6];
        v31[4] = SlowCase + HIDWORD(v222);
        v31[5] = SlowCase + (int)v222;
LABEL_15:
        v31[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v26);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v30 + 755))
        goto LABEL_17;
      goto LABEL_18;
    case 0xE9:
      return WebCore::createWrapper<WebCore::SVGSetElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xEA:
      *a2 = 0;
      v54 = WebCore::getDOMStructure<WebCore::JSSVGStopElement>((uint64_t)a1[7], (JSC::VM *)a1, a3);
      v55 = a1[7];
      v57 = (_QWORD *)WebCore::JSSVGStopElement::subspaceForImpl(v55, v56);
      SlowCase = v57[3];
      if (SlowCase < v57[4])
        goto LABEL_50;
      SlowCase = v57[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v230 = *(_QWORD *)(SlowCase + 8) ^ v57[6];
        v57[4] = SlowCase + HIDWORD(v230);
        v57[5] = SlowCase + (int)v230;
LABEL_50:
        v57[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v54);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v55 + 755))
        goto LABEL_73;
      goto LABEL_74;
    case 0xEB:
      *a2 = 0;
      v95 = a1[412];
      if (!v95)
        goto LABEL_103;
      v96 = *((_DWORD *)v95 - 2);
      v97 = ((unint64_t)&WebCore::JSSVGSVGElement::s_info + ~((_QWORD)&WebCore::JSSVGSVGElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSVGElement::s_info + ~((_QWORD)&WebCore::JSSVGSVGElement::s_info << 32)) >> 22);
      v98 = 9 * ((v97 + ~(v97 << 13)) ^ ((v97 + ~(v97 << 13)) >> 8));
      v99 = (v98 ^ (v98 >> 15)) + ~((v98 ^ (v98 >> 15)) << 27);
      v100 = v96 & ((v99 >> 31) ^ v99);
      v101 = (char **)*((_QWORD *)v95 + 2 * v100);
      if (v101 == &WebCore::JSSVGSVGElement::s_info)
        goto LABEL_102;
      v139 = 1;
      while (v101)
      {
        v100 = ((_DWORD)v100 + v139) & v96;
        v101 = (char **)*((_QWORD *)v95 + 2 * v100);
        ++v139;
        if (v101 == &WebCore::JSSVGSVGElement::s_info)
        {
LABEL_102:
          v102 = *((_QWORD *)v95 + 2 * v100 + 1);
          if (v102)
            goto LABEL_104;
          break;
        }
      }
LABEL_103:
      v103 = a1[7];
      v104 = (JSC::JSCell *)WebCore::JSSVGSVGElement::createPrototype(v103, (JSC::VM *)a1, a3);
      v105 = WebCore::JSSVGSVGElement::createStructure((uint64_t *)v103, (uint64_t)a1, v104);
      v102 = WebCore::cacheDOMStructure((JSCell *)a1, v105, (uint64_t)&WebCore::JSSVGSVGElement::s_info);
LABEL_104:
      v106 = a1[7];
      v107 = (_QWORD *)WebCore::JSSVGSVGElement::subspaceForImpl(v106, (JSC::VM *)a2);
      SlowCase = v107[3];
      if (SlowCase < v107[4])
        goto LABEL_105;
      SlowCase = v107[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v235 = *(_QWORD *)(SlowCase + 8) ^ v107[6];
        v107[4] = SlowCase + HIDWORD(v235);
        v107[5] = SlowCase + (int)v235;
LABEL_105:
        v107[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v102);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v106 + 755))
        goto LABEL_17;
      goto LABEL_18;
    case 0xEC:
      return WebCore::createWrapper<WebCore::SVGSwitchElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xED:
      return WebCore::createSVGSymbolElementWrapper((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0xEE:
      *a2 = 0;
      v63 = WebCore::getDOMStructure<WebCore::JSSVGTextElement>((uint64_t)a1[7], (JSC::VM *)a1, a3);
      v64 = a1[7];
      v66 = (_QWORD *)WebCore::JSSVGTextElement::subspaceForImpl(v64, v65);
      SlowCase = v66[3];
      if (SlowCase < v66[4])
        goto LABEL_59;
      SlowCase = v66[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v232 = *(_QWORD *)(SlowCase + 8) ^ v66[6];
        v66[4] = SlowCase + HIDWORD(v232);
        v66[5] = SlowCase + (int)v232;
LABEL_59:
        v66[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v63);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v64 + 755))
LABEL_73:
        __dmb(0xAu);
LABEL_74:
      v32 = a1[415];
      {
        WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
      }
      if (*((_DWORD *)v32 + 12))
        goto LABEL_121;
      if ((SlowCase & 8) != 0)
        v84 = (SlowCase - 112) | 1;
      else
        v84 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v84 & 1) != 0)
        v85 = v84 + 47;
      else
        v85 = *(_QWORD *)v84 + 32;
      Allocator = *(_QWORD **)(v85 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v85 + 16) = *Allocator;
      *Allocator = SlowCase;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      Allocator[2] = v32;
      goto LABEL_85;
    case 0xEF:
      return WebCore::createWrapper<WebCore::SVGTextPathElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2);
    case 0xF1:
      *a2 = 0;
      v148 = WebCore::getDOMStructure<WebCore::JSSVGTSpanElement>((uint64_t)a1[7], (JSC::VM *)a1, a3);
      v149 = a1[7];
      v151 = (_QWORD *)WebCore::JSSVGTSpanElement::subspaceForImpl(v149, v150);
      SlowCase = v151[3];
      if (SlowCase < v151[4])
        goto LABEL_164;
      SlowCase = v151[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v237 = *(_QWORD *)(SlowCase + 8) ^ v151[6];
        v151[4] = SlowCase + HIDWORD(v237);
        v151[5] = SlowCase + (int)v237;
LABEL_164:
        v151[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v148);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v149 + 755))
LABEL_183:
        __dmb(0xAu);
      goto LABEL_184;
    case 0xF2:
      return WebCore::createWrapper<WebCore::SVGUseElement,WebCore::SVGElement>((uint64_t)a1, (uint64_t *)a2);
    case 0xF3:
      return WebCore::createWrapper<WebCore::SVGViewElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0x103:
      return WebCore::createSVGAElementWrapper((JSC::VM *)a1, a2, a3);
    case 0x10A:
      return WebCore::createWrapper<WebCore::SVGImageElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0x10C:
      return WebCore::createWrapper<WebCore::SVGScriptElement,WebCore::SVGElement>((JSC::VM *)a1, (JSC::VM *)a2, a3);
    case 0x10D:
      *a2 = 0;
      v165 = a1[412];
      if (!v165)
        goto LABEL_200;
      v166 = *((_DWORD *)v165 - 2);
      v167 = ((unint64_t)&WebCore::JSSVGStyleElement::s_info
            + ~((_QWORD)&WebCore::JSSVGStyleElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGStyleElement::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGStyleElement::s_info << 32)) >> 22);
      v168 = 9 * ((v167 + ~(v167 << 13)) ^ ((v167 + ~(v167 << 13)) >> 8));
      v169 = (v168 ^ (v168 >> 15)) + ~((v168 ^ (v168 >> 15)) << 27);
      v170 = v166 & ((v169 >> 31) ^ v169);
      v171 = (char **)*((_QWORD *)v165 + 2 * v170);
      if (v171 == &WebCore::JSSVGStyleElement::s_info)
        goto LABEL_199;
      v205 = 1;
      while (v171)
      {
        v170 = ((_DWORD)v170 + v205) & v166;
        v171 = (char **)*((_QWORD *)v165 + 2 * v170);
        ++v205;
        if (v171 == &WebCore::JSSVGStyleElement::s_info)
        {
LABEL_199:
          v172 = *((_QWORD *)v165 + 2 * v170 + 1);
          if (v172)
            goto LABEL_201;
          break;
        }
      }
LABEL_200:
      v173 = a1[7];
      v174 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v173, (JSC::VM *)a1, a3);
      v175 = WebCore::JSSVGStyleElementPrototype::createStructure((uint64_t *)v173, (uint64_t)a1, v174);
      *(_DWORD *)(v175 + 16) |= 0x80000u;
      v177 = (JSC::JSCell *)WebCore::JSSVGStyleElementPrototype::create(v173, (JSC::VM *)a1, v175, v176);
      v178 = WebCore::JSSVGStyleElement::createStructure((uint64_t *)v173, (uint64_t)a1, v177);
      v172 = WebCore::cacheDOMStructure((JSCell *)a1, v178, (uint64_t)&WebCore::JSSVGStyleElement::s_info);
LABEL_201:
      v179 = a1[7];
      v180 = (_QWORD *)WebCore::JSSVGStyleElement::subspaceForImpl(v179, (JSC::VM *)a2);
      SlowCase = v180[3];
      if (SlowCase < v180[4])
        goto LABEL_202;
      SlowCase = v180[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v239 = *(_QWORD *)(SlowCase + 8) ^ v180[6];
        v180[4] = SlowCase + HIDWORD(v239);
        v180[5] = SlowCase + (int)v239;
LABEL_202:
        v180[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v172);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v179 + 755))
        goto LABEL_17;
      goto LABEL_18;
    case 0x10E:
      *a2 = 0;
      v5 = a1[412];
      if (!v5)
        goto LABEL_5;
      v6 = *((_DWORD *)v5 - 2);
      v7 = ((unint64_t)&WebCore::JSSVGTitleElement::s_info + ~((_QWORD)&WebCore::JSSVGTitleElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTitleElement::s_info + ~((_QWORD)&WebCore::JSSVGTitleElement::s_info << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = (char **)*((_QWORD *)v5 + 2 * v10);
      if (v11 == &WebCore::JSSVGTitleElement::s_info)
        goto LABEL_4;
      v39 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v39) & v6;
        v11 = (char **)*((_QWORD *)v5 + 2 * v10);
        ++v39;
        if (v11 == &WebCore::JSSVGTitleElement::s_info)
        {
LABEL_4:
          v12 = *((_QWORD *)v5 + 2 * v10 + 1);
          if (v12)
            goto LABEL_6;
          break;
        }
      }
LABEL_5:
      v13 = a1[7];
      v14 = (JSC::JSCell *)WebCore::JSSVGTitleElement::createPrototype(v13, (JSC::VM *)a1, a3);
      v15 = WebCore::JSSVGTitleElement::createStructure((uint64_t *)v13, (uint64_t)a1, v14);
      v12 = WebCore::cacheDOMStructure((JSCell *)a1, v15, (uint64_t)&WebCore::JSSVGTitleElement::s_info);
LABEL_6:
      v16 = a1[7];
      v17 = (_QWORD *)WebCore::JSSVGTitleElement::subspaceForImpl(v16, (JSC::VM *)a2);
      SlowCase = v17[3];
      if (SlowCase < v17[4])
        goto LABEL_7;
      SlowCase = v17[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v221 = *(_QWORD *)(SlowCase + 8) ^ v17[6];
        v17[4] = SlowCase + HIDWORD(v221);
        v17[5] = SlowCase + (int)v221;
LABEL_7:
        v17[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v12);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v16 + 755))
LABEL_17:
        __dmb(0xAu);
      goto LABEL_18;
    default:
      return WebCore::createWrapper<WebCore::SVGElement,WebCore::SVGElement>((uint64_t)a1, a2);
  }
}

unint64_t WebCore::createSVGAElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGGraphicsElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  unint64_t SlowCase;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGAElement::s_info + ~((_QWORD)&WebCore::JSSVGAElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAElement::s_info + ~((_QWORD)&WebCore::JSSVGAElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGAElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGAElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGGraphicsElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGAElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGAElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGAElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGAElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6160);
  if (v24)
    goto LABEL_31;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v51 = *(_QWORD *)(v27 + 6160);
  if (!v51)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v28, &v53, v21 + 192, v21 + 1872, 40, 8, &v52);
    v30 = (uint64_t)v52;
    v52 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v53;
    v53 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v51 = v28;
    v32 = *(_QWORD *)(v27 + 6160);
    *(_QWORD *)(v27 + 6160) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      v34 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 2832, v33 + 1, (unint64_t)&v51);
      v33 = *(unsigned int *)(v25 + 2844);
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = *v34;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
    }
    *(_DWORD *)(v25 + 2844) = v33 + 1;
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v35 = *(_QWORD *)(v23 + 6160);
  *(_QWORD *)(v23 + 6160) = v24;
  if (v35)
  {
    v36 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v36, v37);
  }
  v38 = __ldxr((unsigned __int8 *)v25);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_31:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_32:
    v24[3] = SlowCase + 48;
    goto LABEL_33;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v53 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v52 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  v45 = (uint64_t)v52;
  if (v52)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::createSVGAnimateElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGAnimationElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  unint64_t SlowCase;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGAnimateElement::s_info
        + ~((_QWORD)&WebCore::JSSVGAnimateElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimateElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGAnimateElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGAnimateElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGAnimateElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGAnimationElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGAnimateElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGAnimateElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGAnimateElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGAnimateElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6176);
  if (v24)
    goto LABEL_31;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v51 = *(_QWORD *)(v27 + 6176);
  if (!v51)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v28, &v53, v21 + 192, v21 + 1872, 40, 8, &v52);
    v30 = (uint64_t)v52;
    v52 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v53;
    v53 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v51 = v28;
    v32 = *(_QWORD *)(v27 + 6176);
    *(_QWORD *)(v27 + 6176) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      v34 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 2832, v33 + 1, (unint64_t)&v51);
      v33 = *(unsigned int *)(v25 + 2844);
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = *v34;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
    }
    *(_DWORD *)(v25 + 2844) = v33 + 1;
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v35 = *(_QWORD *)(v23 + 6176);
  *(_QWORD *)(v23 + 6176) = v24;
  if (v35)
  {
    v36 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v36, v37);
  }
  v38 = __ldxr((unsigned __int8 *)v25);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_31:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_32:
    v24[3] = SlowCase + 48;
    goto LABEL_33;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v53 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v52 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  v45 = (uint64_t)v52;
  if (v52)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::createSVGAnimateMotionElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGAnimationElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  unint64_t SlowCase;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGAnimateMotionElement::s_info
        + ~((_QWORD)&WebCore::JSSVGAnimateMotionElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimateMotionElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGAnimateMotionElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGAnimateMotionElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGAnimateMotionElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGAnimationElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGAnimateMotionElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGAnimateMotionElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGAnimateMotionElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGAnimateMotionElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6184);
  if (v24)
    goto LABEL_31;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v51 = *(_QWORD *)(v27 + 6184);
  if (!v51)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v28, &v53, v21 + 192, v21 + 1872, 40, 8, &v52);
    v30 = (uint64_t)v52;
    v52 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v53;
    v53 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v51 = v28;
    v32 = *(_QWORD *)(v27 + 6184);
    *(_QWORD *)(v27 + 6184) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      v34 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 2832, v33 + 1, (unint64_t)&v51);
      v33 = *(unsigned int *)(v25 + 2844);
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = *v34;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
    }
    *(_DWORD *)(v25 + 2844) = v33 + 1;
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v35 = *(_QWORD *)(v23 + 6184);
  *(_QWORD *)(v23 + 6184) = v24;
  if (v35)
  {
    v36 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v36, v37);
  }
  v38 = __ldxr((unsigned __int8 *)v25);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_31:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_32:
    v24[3] = SlowCase + 48;
    goto LABEL_33;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v53 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v52 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  v45 = (uint64_t)v52;
  if (v52)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::createSVGAnimateTransformElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGAnimationElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  unint64_t SlowCase;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGAnimateTransformElement::s_info
        + ~((_QWORD)&WebCore::JSSVGAnimateTransformElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimateTransformElement::s_info
                                                                             + ~((_QWORD)&WebCore::JSSVGAnimateTransformElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGAnimateTransformElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGAnimateTransformElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGAnimationElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGAnimateTransformElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGAnimateTransformElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGAnimateTransformElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGAnimateTransformElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6192);
  if (v24)
    goto LABEL_31;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v51 = *(_QWORD *)(v27 + 6192);
  if (!v51)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v28, &v53, v21 + 192, v21 + 1872, 40, 8, &v52);
    v30 = (uint64_t)v52;
    v52 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v53;
    v53 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v51 = v28;
    v32 = *(_QWORD *)(v27 + 6192);
    *(_QWORD *)(v27 + 6192) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      v34 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 2832, v33 + 1, (unint64_t)&v51);
      v33 = *(unsigned int *)(v25 + 2844);
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = *v34;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
    }
    *(_DWORD *)(v25 + 2844) = v33 + 1;
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v35 = *(_QWORD *)(v23 + 6192);
  *(_QWORD *)(v23 + 6192) = v24;
  if (v35)
  {
    v36 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v36, v37);
  }
  v38 = __ldxr((unsigned __int8 *)v25);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_31:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_32:
    v24[3] = SlowCase + 48;
    goto LABEL_33;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v53 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v52 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  v45 = (uint64_t)v52;
  if (v52)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::createSVGDescElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGDescElement::s_info + ~((_QWORD)&WebCore::JSSVGDescElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGDescElement::s_info + ~((_QWORD)&WebCore::JSSVGDescElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGDescElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGDescElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGDescElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGDescElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGDescElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGDescElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6336);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6336);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6336);
    *(_QWORD *)(v27 + 6336) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6336);
  *(_QWORD *)(v23 + 6336) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGEllipseElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGGeometryElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v4 = *a2;
  *a2 = 0;
  v51 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGEllipseElement::s_info
        + ~((_QWORD)&WebCore::JSSVGEllipseElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGEllipseElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGEllipseElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGEllipseElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGEllipseElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGGeometryElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGEllipseElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGEllipseElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGEllipseElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGEllipseElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6352);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v52 = *(_QWORD *)(v27 + 6352);
  if (!v52)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v28, &v54, v21 + 192, v21 + 1872, 40, 8, &v53);
    v30 = (uint64_t)v53;
    v53 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v54;
    v54 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v52 = v28;
    v32 = *(_QWORD *)(v27 + 6352);
    *(_QWORD *)(v27 + 6352) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v52);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6352);
  *(_QWORD *)(v23 + 6352) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  v39 = (uint64_t)v51;
  v51 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v39;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      goto LABEL_48;
LABEL_57:
    *(_QWORD *)(v45 + 8) = 3;
    goto LABEL_48;
  }
  v54 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v53 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  v45 = (uint64_t)v53;
  if (v53)
    goto LABEL_57;
LABEL_48:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v51);
  return SlowCase;
}

unint64_t WebCore::createSVGFEBlendElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEBlendElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEBlendElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEBlendElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEBlendElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEBlendElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEBlendElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEBlendElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEBlendElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEBlendElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEBlendElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6360);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6360);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6360);
    *(_QWORD *)(v27 + 6360) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6360);
  *(_QWORD *)(v23 + 6360) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEColorMatrixElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v4 = *a2;
  *a2 = 0;
  v51 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEColorMatrixElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGFEColorMatrixElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEColorMatrixElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEColorMatrixElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEColorMatrixElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEColorMatrixElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEColorMatrixElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6368);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v52 = *(_QWORD *)(v27 + 6368);
  if (!v52)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v28, &v54, v21 + 192, v21 + 1872, 40, 8, &v53);
    v30 = (uint64_t)v53;
    v53 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v54;
    v54 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v52 = v28;
    v32 = *(_QWORD *)(v27 + 6368);
    *(_QWORD *)(v27 + 6368) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v52);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6368);
  *(_QWORD *)(v23 + 6368) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  v39 = (uint64_t)v51;
  v51 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v39;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      goto LABEL_48;
LABEL_57:
    *(_QWORD *)(v45 + 8) = 3;
    goto LABEL_48;
  }
  v54 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v53 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  v45 = (uint64_t)v53;
  if (v53)
    goto LABEL_57;
LABEL_48:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v51);
  return SlowCase;
}

unint64_t WebCore::createSVGFEComponentTransferElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEComponentTransferElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEComponentTransferElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEComponentTransferElement::s_info
                                                                                + ~((_QWORD)&WebCore::JSSVGFEComponentTransferElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEComponentTransferElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEComponentTransferElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEComponentTransferElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEComponentTransferElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEComponentTransferElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEComponentTransferElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6376);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6376);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6376);
    *(_QWORD *)(v27 + 6376) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6376);
  *(_QWORD *)(v23 + 6376) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFECompositeElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFECompositeElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFECompositeElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFECompositeElement::s_info
                                                                        + ~((_QWORD)&WebCore::JSSVGFECompositeElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFECompositeElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFECompositeElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFECompositeElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFECompositeElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFECompositeElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFECompositeElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6384);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6384);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6384);
    *(_QWORD *)(v27 + 6384) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6384);
  *(_QWORD *)(v23 + 6384) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEConvolveMatrixElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEConvolveMatrixElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info
                                                                             + ~((_QWORD)&WebCore::JSSVGFEConvolveMatrixElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEConvolveMatrixElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEConvolveMatrixElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEConvolveMatrixElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEConvolveMatrixElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEConvolveMatrixElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6392);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6392);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6392);
    *(_QWORD *)(v27 + 6392) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6392);
  *(_QWORD *)(v23 + 6392) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEDiffuseLightingElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEDiffuseLightingElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEDiffuseLightingElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDiffuseLightingElement::s_info
                                                                              + ~((_QWORD)&WebCore::JSSVGFEDiffuseLightingElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEDiffuseLightingElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEDiffuseLightingElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEDiffuseLightingElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEDiffuseLightingElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEDiffuseLightingElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEDiffuseLightingElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6400);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6400);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6400);
    *(_QWORD *)(v27 + 6400) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6400);
  *(_QWORD *)(v23 + 6400) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEDisplacementMapElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEDisplacementMapElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info
                                                                              + ~((_QWORD)&WebCore::JSSVGFEDisplacementMapElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEDisplacementMapElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEDisplacementMapElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEDisplacementMapElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEDisplacementMapElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEDisplacementMapElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6408);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6408);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6408);
    *(_QWORD *)(v27 + 6408) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6408);
  *(_QWORD *)(v23 + 6408) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEDistantLightElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEDistantLightElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEDistantLightElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDistantLightElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGFEDistantLightElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEDistantLightElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEDistantLightElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEDistantLightElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEDistantLightElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEDistantLightElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEDistantLightElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6416);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6416);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6416);
    *(_QWORD *)(v27 + 6416) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6416);
  *(_QWORD *)(v23 + 6416) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEDropShadowElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEDropShadowElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEDropShadowElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDropShadowElement::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGFEDropShadowElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEDropShadowElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEDropShadowElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEDropShadowElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEDropShadowElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEDropShadowElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEDropShadowElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6424);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6424);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6424);
    *(_QWORD *)(v27 + 6424) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6424);
  *(_QWORD *)(v23 + 6424) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEFloodElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEFloodElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEFloodElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFloodElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEFloodElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEFloodElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEFloodElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEFloodElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEFloodElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEFloodElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEFloodElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6432);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6432);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6432);
    *(_QWORD *)(v27 + 6432) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6432);
  *(_QWORD *)(v23 + 6432) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEFuncAElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGComponentTransferFunctionElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEFuncAElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEFuncAElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncAElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEFuncAElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEFuncAElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEFuncAElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGComponentTransferFunctionElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEFuncAElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEFuncAElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEFuncAElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEFuncAElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6440);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6440);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6440);
    *(_QWORD *)(v27 + 6440) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6440);
  *(_QWORD *)(v23 + 6440) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEFuncBElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGComponentTransferFunctionElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEFuncBElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEFuncBElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncBElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEFuncBElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEFuncBElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEFuncBElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGComponentTransferFunctionElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEFuncBElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEFuncBElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEFuncBElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEFuncBElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6448);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6448);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6448);
    *(_QWORD *)(v27 + 6448) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6448);
  *(_QWORD *)(v23 + 6448) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEFuncGElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGComponentTransferFunctionElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEFuncGElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEFuncGElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncGElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEFuncGElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEFuncGElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEFuncGElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGComponentTransferFunctionElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEFuncGElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEFuncGElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEFuncGElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEFuncGElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6456);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6456);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6456);
    *(_QWORD *)(v27 + 6456) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6456);
  *(_QWORD *)(v23 + 6456) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEFuncRElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGComponentTransferFunctionElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEFuncRElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEFuncRElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncRElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEFuncRElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEFuncRElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEFuncRElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGComponentTransferFunctionElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEFuncRElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEFuncRElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEFuncRElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEFuncRElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6464);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6464);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6464);
    *(_QWORD *)(v27 + 6464) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6464);
  *(_QWORD *)(v23 + 6464) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEGaussianBlurElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v4 = *a2;
  *a2 = 0;
  v51 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEGaussianBlurElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGFEGaussianBlurElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEGaussianBlurElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEGaussianBlurElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEGaussianBlurElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEGaussianBlurElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEGaussianBlurElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6472);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v52 = *(_QWORD *)(v27 + 6472);
  if (!v52)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v28, &v54, v21 + 192, v21 + 1872, 40, 8, &v53);
    v30 = (uint64_t)v53;
    v53 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v54;
    v54 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v52 = v28;
    v32 = *(_QWORD *)(v27 + 6472);
    *(_QWORD *)(v27 + 6472) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v52);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6472);
  *(_QWORD *)(v23 + 6472) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  v39 = (uint64_t)v51;
  v51 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v39;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      goto LABEL_48;
LABEL_57:
    *(_QWORD *)(v45 + 8) = 3;
    goto LABEL_48;
  }
  v54 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v53 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  v45 = (uint64_t)v53;
  if (v53)
    goto LABEL_57;
LABEL_48:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v51);
  return SlowCase;
}

unint64_t WebCore::createSVGFEImageElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEImageElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEImageElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEImageElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEImageElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEImageElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEImageElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEImageElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEImageElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEImageElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEImageElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6480);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6480);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6480);
    *(_QWORD *)(v27 + 6480) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6480);
  *(_QWORD *)(v23 + 6480) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEMergeElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEMergeElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEMergeElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEMergeElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGFEMergeElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEMergeElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEMergeElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEMergeElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEMergeElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEMergeElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEMergeElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6488);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6488);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6488);
    *(_QWORD *)(v27 + 6488) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6488);
  *(_QWORD *)(v23 + 6488) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEMergeNodeElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEMergeNodeElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEMergeNodeElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEMergeNodeElement::s_info
                                                                        + ~((_QWORD)&WebCore::JSSVGFEMergeNodeElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEMergeNodeElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEMergeNodeElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEMergeNodeElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEMergeNodeElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEMergeNodeElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEMergeNodeElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6496);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6496);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6496);
    *(_QWORD *)(v27 + 6496) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6496);
  *(_QWORD *)(v23 + 6496) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEMorphologyElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEMorphologyElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEMorphologyElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEMorphologyElement::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGFEMorphologyElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEMorphologyElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEMorphologyElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEMorphologyElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEMorphologyElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEMorphologyElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEMorphologyElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6504);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6504);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6504);
    *(_QWORD *)(v27 + 6504) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6504);
  *(_QWORD *)(v23 + 6504) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFEOffsetElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v4 = *a2;
  *a2 = 0;
  v51 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEOffsetElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEOffsetElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEOffsetElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEOffsetElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEOffsetElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEOffsetElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEOffsetElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEOffsetElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEOffsetElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEOffsetElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6512);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v52 = *(_QWORD *)(v27 + 6512);
  if (!v52)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v28, &v54, v21 + 192, v21 + 1872, 40, 8, &v53);
    v30 = (uint64_t)v53;
    v53 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v54;
    v54 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v52 = v28;
    v32 = *(_QWORD *)(v27 + 6512);
    *(_QWORD *)(v27 + 6512) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v52);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6512);
  *(_QWORD *)(v23 + 6512) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v50 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v50);
    v24[5] = SlowCase + (int)v50;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  v39 = (uint64_t)v51;
  v51 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v39;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v41 = (uint64_t *)((char *)v4 + 8);
  else
    v41 = 0;
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v40;
    v45 = *v41;
    *v41 = (uint64_t)Allocator;
    if (!v45)
      goto LABEL_48;
LABEL_57:
    *(_QWORD *)(v45 + 8) = 3;
    goto LABEL_48;
  }
  v54 = v4;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v49[2] = v40;
  v53 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  v45 = (uint64_t)v53;
  if (v53)
    goto LABEL_57;
LABEL_48:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v51);
  return SlowCase;
}

unint64_t WebCore::createSVGFEPointLightElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFEPointLightElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFEPointLightElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEPointLightElement::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGFEPointLightElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFEPointLightElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFEPointLightElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFEPointLightElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFEPointLightElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFEPointLightElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFEPointLightElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6520);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6520);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6520);
    *(_QWORD *)(v27 + 6520) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6520);
  *(_QWORD *)(v23 + 6520) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFESpecularLightingElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFESpecularLightingElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFESpecularLightingElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFESpecularLightingElement::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGFESpecularLightingElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFESpecularLightingElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFESpecularLightingElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFESpecularLightingElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFESpecularLightingElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFESpecularLightingElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFESpecularLightingElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6528);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6528);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6528);
    *(_QWORD *)(v27 + 6528) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6528);
  *(_QWORD *)(v23 + 6528) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFESpotLightElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFESpotLightElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFESpotLightElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFESpotLightElement::s_info
                                                                        + ~((_QWORD)&WebCore::JSSVGFESpotLightElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFESpotLightElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFESpotLightElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFESpotLightElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFESpotLightElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFESpotLightElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFESpotLightElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6536);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6536);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6536);
    *(_QWORD *)(v27 + 6536) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6536);
  *(_QWORD *)(v23 + 6536) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFETileElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFETileElement::s_info + ~((_QWORD)&WebCore::JSSVGFETileElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFETileElement::s_info + ~((_QWORD)&WebCore::JSSVGFETileElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFETileElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFETileElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFETileElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFETileElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFETileElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFETileElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6544);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6544);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6544);
    *(_QWORD *)(v27 + 6544) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6544);
  *(_QWORD *)(v23 + 6544) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFETurbulenceElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFETurbulenceElement::s_info
        + ~((_QWORD)&WebCore::JSSVGFETurbulenceElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFETurbulenceElement::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGFETurbulenceElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFETurbulenceElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFETurbulenceElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFETurbulenceElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFETurbulenceElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFETurbulenceElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFETurbulenceElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6552);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6552);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6552);
    *(_QWORD *)(v27 + 6552) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6552);
  *(_QWORD *)(v23 + 6552) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGFilterElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGFilterElement::s_info + ~((_QWORD)&WebCore::JSSVGFilterElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFilterElement::s_info + ~((_QWORD)&WebCore::JSSVGFilterElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGFilterElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGFilterElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGFilterElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGFilterElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGFilterElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGFilterElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6560);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6560);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6560);
    *(_QWORD *)(v27 + 6560) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6560);
  *(_QWORD *)(v23 + 6560) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGForeignObjectElementWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGGraphicsElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF *v52;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGForeignObjectElement::s_info
        + ~((_QWORD)&WebCore::JSSVGForeignObjectElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGForeignObjectElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGForeignObjectElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGForeignObjectElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGForeignObjectElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGGraphicsElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGForeignObjectElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSSVGForeignObjectElementPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSSVGForeignObjectElement::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSVGForeignObjectElement::s_info);
LABEL_8:
  v21 = *((_QWORD *)a1 + 7);
  v22 = *(_QWORD *)(v21 + 41456);
  v23 = *(_QWORD *)(v22 + 23536);
  v24 = *(_QWORD **)(v23 + 6568);
  if (v24)
    goto LABEL_30;
  v25 = *(_QWORD *)(v22 + 22648);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_13:
  v27 = *(_QWORD *)(v25 + 2824);
  v50 = *(_QWORD *)(v27 + 6568);
  if (!v50)
  {
    v28 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v52, "IsoSpace T");
    v51 = 0;
    MEMORY[0x19AEA3204](v28, &v52, v21 + 192, v21 + 1872, 40, 8, &v51);
    v30 = (uint64_t)v51;
    v51 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v29);
      else
        --*(_DWORD *)v31;
    }
    v50 = v28;
    v32 = *(_QWORD *)(v27 + 6568);
    *(_QWORD *)(v27 + 6568) = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(unsigned int *)(v25 + 2844);
    if ((_DWORD)v33 == *(_DWORD *)(v25 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v25 + 2832, (unint64_t)&v50);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v25 + 2832) + 8 * v33) = v28;
      *(_DWORD *)(v25 + 2844) = v33 + 1;
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v23 + 6568);
  *(_QWORD *)(v23 + 6568) = v24;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v25);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_30:
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_31:
    v24[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v49);
    v24[5] = SlowCase + (int)v49;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v39 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v40 = (uint64_t *)((char *)v4 + 8);
  else
    v40 = 0;
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v39;
    v44 = *v40;
    *v40 = (uint64_t)Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v52 = v4;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v48[2] = v39;
  v51 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
  v44 = (uint64_t)v51;
  if (v51)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::createSVGMaskElementWrapper(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGMaskElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v34 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGMaskElement::s_info + ~((_QWORD)&WebCore::JSSVGMaskElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMaskElement::s_info + ~((_QWORD)&WebCore::JSSVGMaskElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGMaskElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGMaskElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGMaskElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGMaskElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGMaskElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGMaskElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGMaskElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGMaskElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v34 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      goto LABEL_26;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    goto LABEL_26;
  }
  v36 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v35 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v36, (uint64_t *)&v35);
  v28 = (uint64_t)v35;
  if (v35)
    goto LABEL_35;
LABEL_26:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v34);
  return SlowCase;
}

unint64_t WebCore::createSVGRadialGradientElementWrapper(JSC::VM *a1, JSC::VM *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  int v11;
  unint64_t v12;
  WebCore::JSSVGGradientElement *v13;
  uint64_t v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  WebCore::JSSVGRadialGradientElement *v19;
  _QWORD *v20;
  unint64_t SlowCase;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *Allocator;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v33 = v3;
  v4 = *((_QWORD *)a1 + 412);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)&WebCore::JSSVGRadialGradientElement::s_info
        + ~((_QWORD)&WebCore::JSSVGRadialGradientElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGRadialGradientElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGRadialGradientElement::s_info << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(char ***)(v4 + 16 * v9);
    if (v10 == &WebCore::JSSVGRadialGradientElement::s_info)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
        goto LABEL_8;
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(char ***)(v4 + 16 * v9);
        ++v11;
        if (v10 == &WebCore::JSSVGRadialGradientElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v13 = (WebCore::JSSVGGradientElement *)*((_QWORD *)a1 + 7);
  v14 = WebCore::getDOMStructure<WebCore::JSSVGGradientElement>(v13, a1);
  Structure = WebCore::JSSVGRadialGradientElementPrototype::createStructure((uint64_t *)v13, (uint64_t)a1, *(JSC::JSCell **)(v14 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v17 = (JSC::JSCell *)WebCore::JSSVGRadialGradientElementPrototype::create(v13, a1, Structure, v16);
  v18 = WebCore::JSSVGRadialGradientElement::createStructure((uint64_t *)v13, (uint64_t)a1, v17);
  v12 = WebCore::cacheDOMStructure((JSCell *)a1, v18, (uint64_t)&WebCore::JSSVGRadialGradientElement::s_info);
LABEL_8:
  v19 = (WebCore::JSSVGRadialGradientElement *)*((_QWORD *)a1 + 7);
  v20 = (_QWORD *)WebCore::JSSVGRadialGradientElement::subspaceForImpl(v19, a2);
  SlowCase = v20[3];
  if (SlowCase < v20[4])
  {
LABEL_9:
    v20[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v20[5];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v20[6];
    v20[4] = SlowCase + HIDWORD(v32);
    v20[5] = SlowCase + (int)v32;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v33 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v12);
  *(_QWORD *)(SlowCase + 24) = v3;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v19 + 755))
    __dmb(0xAu);
  v22 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v3)
    v23 = (uint64_t *)(v3 + 8);
  else
    v23 = 0;
  if (!*(_DWORD *)(v22 + 48))
  {
    if ((SlowCase & 8) != 0)
      v24 = (SlowCase - 112) | 1;
    else
      v24 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v24 & 1) != 0)
      v25 = v24 + 47;
    else
      v25 = *(_QWORD *)v24 + 32;
    Allocator = *(_QWORD **)(v25 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v25 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v22;
    v27 = *v23;
    *v23 = (uint64_t)Allocator;
    if (!v27)
      goto LABEL_26;
LABEL_35:
    *(_QWORD *)(v27 + 8) = 3;
    goto LABEL_26;
  }
  v35 = v3;
  if ((SlowCase & 8) != 0)
    v29 = (SlowCase - 112) | 1;
  else
    v29 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v29 & 1) != 0)
    v30 = v29 + 47;
  else
    v30 = *(_QWORD *)v29 + 32;
  v31 = *(_QWORD **)(v30 + 16);
  if (!v31)
    v31 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v30 + 16) = *v31;
  *v31 = SlowCase;
  v31[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v31[2] = v22;
  v34 = v31;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v22 + 32), &v35, (uint64_t *)&v34);
  v27 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
LABEL_26:
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v33);
  return SlowCase;
}

unint64_t WebCore::createSVGSymbolElementWrapper(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGGraphicsElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGSymbolElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v34 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGSymbolElement::s_info + ~((_QWORD)&WebCore::JSSVGSymbolElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSymbolElement::s_info + ~((_QWORD)&WebCore::JSSVGSymbolElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGSymbolElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGSymbolElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGGraphicsElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGSymbolElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGSymbolElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGSymbolElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGSymbolElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGSymbolElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGSymbolElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v34 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      goto LABEL_26;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    goto LABEL_26;
  }
  v36 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v35 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v36, (uint64_t *)&v35);
  v28 = (uint64_t)v35;
  if (v35)
    goto LABEL_35;
LABEL_26:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v34);
  return SlowCase;
}

unint64_t WebCore::createWrapper<WebCore::SVGElement,WebCore::SVGElement>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  int v22;
  unint64_t SlowCase;
  WTF *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  WTF *v38;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSSVGElement>(*(WebCore::JSElement **)(a1 + 56), (JSC::VM *)a1);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 41456);
  v8 = *(_QWORD *)(v7 + 23536);
  v9 = *(_QWORD **)(v8 + 6344);
  if (!v9)
  {
    v10 = *(_QWORD *)(v7 + 22648);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_6:
    v12 = *(_QWORD *)(v10 + 2824);
    v36 = *(_QWORD *)(v12 + 6344);
    if (!v36)
    {
      v13 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v38, "IsoSpace T");
      v37 = 0;
      MEMORY[0x19AEA3204](v13, &v38, v6 + 192, v6 + 1872, 40, 8, &v37);
      v15 = (uint64_t)v37;
      v37 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = v38;
      v38 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v14);
        else
          --*(_DWORD *)v16;
      }
      v36 = v13;
      v17 = *(_QWORD *)(v12 + 6344);
      *(_QWORD *)(v12 + 6344) = v13;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = *(unsigned int *)(v10 + 2844);
      if ((_DWORD)v18 == *(_DWORD *)(v10 + 2840))
      {
        WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v10 + 2832, (unint64_t)&v36);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v10 + 2832) + 8 * v18) = v13;
        *(_DWORD *)(v10 + 2844) = v18 + 1;
      }
    }
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v19 = *(_QWORD *)(v8 + 6344);
    *(_QWORD *)(v8 + 6344) = v9;
    if (v19)
    {
      v20 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v20, v21);
    }
    v22 = __ldxr((unsigned __int8 *)v10);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
LABEL_23:
  SlowCase = v9[3];
  if (SlowCase < v9[4])
  {
LABEL_24:
    v9[3] = SlowCase + 48;
    goto LABEL_25;
  }
  SlowCase = v9[5];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v9[6];
    v9[4] = SlowCase + HIDWORD(v35);
    v9[5] = SlowCase + (int)v35;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)SlowCase = 0;
  v24 = *a2;
  *a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v5);
  *(_QWORD *)(SlowCase + 24) = v24;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v25 = *(_QWORD *)(a1 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v26 = (uint64_t *)((char *)v4 + 8);
  else
    v26 = 0;
  if (!*(_DWORD *)(v25 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v25;
    v30 = *v26;
    *v26 = (uint64_t)Allocator;
    if (!v30)
      return SlowCase;
LABEL_50:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v38 = v4;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v34[2] = v25;
  v37 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v25 + 32), (uint64_t *)&v38, (uint64_t *)&v37);
  v30 = (uint64_t)v37;
  if (v37)
    goto LABEL_50;
  return SlowCase;
}

uint64_t WebCore::JSSVGEllipseElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGEllipseElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGEllipseElementPrototype::create(WebCore::JSSVGEllipseElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGEllipseElement::s_info, &WebCore::JSSVGEllipseElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGEllipseElement>,(WebCore::DOMConstructorID)784>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6272);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGEllipseElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGEllipseElement::s_info
         + ~((_QWORD)&WebCore::JSSVGEllipseElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGEllipseElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGEllipseElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGEllipseElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGEllipseElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype((WebCore::JSSVGGeometryElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGEllipseElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGEllipseElementPrototype::create((WebCore::JSSVGEllipseElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGEllipseElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGEllipseElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6272) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGEllipseElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGEllipseElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGEllipseElement>,(WebCore::DOMConstructorID)784>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGEllipseElement_cx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGEllipseElement_cy(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGEllipseElement_rx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGEllipseElement_ry(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

uint64_t WebCore::JSSVGFEBlendElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEBlendElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEBlendElementPrototype::create(WebCore::JSSVGFEBlendElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<26u>(this, (uint64_t)&WebCore::JSSVGFEBlendElement::s_info, (uint64_t)&WebCore::JSSVGFEBlendElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEBlendElement>,(WebCore::DOMConstructorID)785>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6280);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEBlendElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEBlendElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEBlendElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEBlendElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEBlendElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEBlendElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEBlendElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEBlendElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEBlendElementPrototype::create((WebCore::JSSVGFEBlendElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEBlendElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEBlendElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<17u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFEBlendElement::s_info, (uint64_t)&WebCore::JSSVGFEBlendElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6280) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEBlendElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEBlendElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEBlendElement>,(WebCore::DOMConstructorID)785>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEBlendElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEBlendElement_in2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEBlendElement_mode(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEBlendElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEBlendElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEBlendElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEBlendElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEBlendElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEColorMatrixElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEColorMatrixElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEColorMatrixElementPrototype::create(WebCore::JSSVGFEColorMatrixElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info, (uint64_t)&WebCore::JSSVGFEColorMatrixElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEColorMatrixElement>,(WebCore::DOMConstructorID)786>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6288);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEColorMatrixElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEColorMatrixElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGFEColorMatrixElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEColorMatrixElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEColorMatrixElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEColorMatrixElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEColorMatrixElementPrototype::create((WebCore::JSSVGFEColorMatrixElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEColorMatrixElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<5u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFEColorMatrixElement::s_info, &WebCore::JSSVGFEColorMatrixElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6288) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEColorMatrixElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEColorMatrixElementPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEColorMatrixElement>,(WebCore::DOMConstructorID)786>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEColorMatrixElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEColorMatrixElement_type(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEColorMatrixElement_values(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEColorMatrixElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEColorMatrixElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEColorMatrixElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEColorMatrixElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEColorMatrixElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEComponentTransferElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEComponentTransferElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEComponentTransferElementPrototype::create(WebCore::JSSVGFEComponentTransferElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSSVGFEComponentTransferElement::s_info, &WebCore::JSSVGFEComponentTransferElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEComponentTransferElement>,(WebCore::DOMConstructorID)787>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6296);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEComponentTransferElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEComponentTransferElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEComponentTransferElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEComponentTransferElement::s_info
                                                                                 + ~((_QWORD)&WebCore::JSSVGFEComponentTransferElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEComponentTransferElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEComponentTransferElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEComponentTransferElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEComponentTransferElementPrototype::create((WebCore::JSSVGFEComponentTransferElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEComponentTransferElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEComponentTransferElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6296) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEComponentTransferElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEComponentTransferElementPrototype::s_info != (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEComponentTransferElement>,(WebCore::DOMConstructorID)787>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEComponentTransferElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEComponentTransferElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEComponentTransferElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEComponentTransferElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEComponentTransferElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEComponentTransferElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFECompositeElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFECompositeElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFECompositeElementPrototype::create(WebCore::JSSVGFECompositeElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<20u>(this, (uint64_t)&WebCore::JSSVGFECompositeElement::s_info, (uint64_t)&WebCore::JSSVGFECompositeElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFECompositeElement>,(WebCore::DOMConstructorID)788>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6304);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFECompositeElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFECompositeElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFECompositeElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFECompositeElement::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGFECompositeElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFECompositeElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFECompositeElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFECompositeElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFECompositeElementPrototype::create((WebCore::JSSVGFECompositeElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFECompositeElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFECompositeElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<7u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFECompositeElement::s_info, &WebCore::JSSVGFECompositeElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6304) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFECompositeElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFECompositeElementPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFECompositeElement>,(WebCore::DOMConstructorID)788>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFECompositeElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFECompositeElement_in2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFECompositeElement_operator(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFECompositeElement_k1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFECompositeElement_k2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFECompositeElement_k3(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGFECompositeElement_k4(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 272));
}

unint64_t WebCore::jsSVGFECompositeElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFECompositeElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFECompositeElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFECompositeElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFECompositeElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEConvolveMatrixElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEConvolveMatrixElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEConvolveMatrixElementPrototype::create(WebCore::JSSVGFEConvolveMatrixElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<22u>(this, (uint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info, (uint64_t)&WebCore::JSSVGFEConvolveMatrixElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEConvolveMatrixElement>,(WebCore::DOMConstructorID)789>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6312);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEConvolveMatrixElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEConvolveMatrixElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info
                                                                              + ~((_QWORD)&WebCore::JSSVGFEConvolveMatrixElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEConvolveMatrixElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEConvolveMatrixElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEConvolveMatrixElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEConvolveMatrixElementPrototype::create((WebCore::JSSVGFEConvolveMatrixElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEConvolveMatrixElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFEConvolveMatrixElement::s_info, &WebCore::JSSVGFEConvolveMatrixElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6312) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEConvolveMatrixElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEConvolveMatrixElementPrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEConvolveMatrixElement>,(WebCore::DOMConstructorID)789>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_orderX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<int>>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_orderY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<int>>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_kernelMatrix(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_divisor(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_bias(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_targetX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<int>>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 272));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_targetY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<int>>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 280));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_edgeMode(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 288));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_kernelUnitLengthX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 296));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_kernelUnitLengthY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 304));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_preserveAlpha(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 312);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)v2 + 2);
  v14 = *(_QWORD *)(v3 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSSVGAnimatedBoolean::s_info
         + ~((_QWORD)&WebCore::JSSVGAnimatedBoolean::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedBoolean::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGAnimatedBoolean::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSSVGAnimatedBoolean::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSSVGAnimatedBoolean::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSSVGAnimatedBooleanPrototype::createStructure(v23, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSVGAnimatedBooleanPrototype::create((WebCore::JSSVGAnimatedBooleanPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSSVGAnimatedBoolean::createStructure(v23, v3, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v3, v28, (uint64_t)&WebCore::JSSVGAnimatedBoolean::s_info);
LABEL_16:
  v29 = *(_QWORD *)(v3 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 6208);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 6208))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 6208);
    *(_QWORD *)(v35 + 6208) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 6208);
  *(_QWORD *)(v31 + 6208) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v3 + 3320);
  if ((byte_1ECE81560 & 1) == 0)
  {
    qword_1ECE81558 = (uint64_t)&off_1E32E8240;
    byte_1ECE81560 = 1;
  }
  v53 = v2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81558;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEConvolveMatrixElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEDiffuseLightingElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEDiffuseLightingElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEDiffuseLightingElementPrototype::create(WebCore::JSSVGFEDiffuseLightingElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSSVGFEDiffuseLightingElement::s_info, (uint64_t)&WebCore::JSSVGFEDiffuseLightingElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDiffuseLightingElement>,(WebCore::DOMConstructorID)790>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6320);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDiffuseLightingElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEDiffuseLightingElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEDiffuseLightingElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDiffuseLightingElement::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGFEDiffuseLightingElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEDiffuseLightingElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEDiffuseLightingElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEDiffuseLightingElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEDiffuseLightingElementPrototype::create((WebCore::JSSVGFEDiffuseLightingElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEDiffuseLightingElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEDiffuseLightingElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6320) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEDiffuseLightingElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEDiffuseLightingElementPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDiffuseLightingElement>,(WebCore::DOMConstructorID)790>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_surfaceScale(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_diffuseConstant(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_kernelUnitLengthX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_kernelUnitLengthY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEDiffuseLightingElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEDisplacementMapElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEDisplacementMapElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEDisplacementMapElementPrototype::create(WebCore::JSSVGFEDisplacementMapElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<16u>(this, (uint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info, (uint64_t)&WebCore::JSSVGFEDisplacementMapElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDisplacementMapElement>,(WebCore::DOMConstructorID)791>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6328);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDisplacementMapElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEDisplacementMapElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGFEDisplacementMapElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEDisplacementMapElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEDisplacementMapElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEDisplacementMapElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEDisplacementMapElementPrototype::create((WebCore::JSSVGFEDisplacementMapElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEDisplacementMapElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<5u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFEDisplacementMapElement::s_info, &WebCore::JSSVGFEDisplacementMapElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6328) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEDisplacementMapElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEDisplacementMapElementPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDisplacementMapElement>,(WebCore::DOMConstructorID)791>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_in2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_scale(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_xChannelSelector(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_yChannelSelector(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEDisplacementMapElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEDistantLightElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEDistantLightElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEDistantLightElementPrototype::create(WebCore::JSSVGFEDistantLightElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGFEDistantLightElement::s_info, &WebCore::JSSVGFEDistantLightElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDistantLightElement>,(WebCore::DOMConstructorID)792>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6336);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDistantLightElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEDistantLightElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEDistantLightElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDistantLightElement::s_info
                                                                            + ~((_QWORD)&WebCore::JSSVGFEDistantLightElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEDistantLightElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEDistantLightElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEDistantLightElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEDistantLightElementPrototype::create((WebCore::JSSVGFEDistantLightElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEDistantLightElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEDistantLightElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6336) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEDistantLightElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEDistantLightElementPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDistantLightElement>,(WebCore::DOMConstructorID)792>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEDistantLightElement_azimuth(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

unint64_t WebCore::jsSVGFEDistantLightElement_elevation(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

uint64_t WebCore::JSSVGFEDropShadowElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEDropShadowElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEDropShadowElementPrototype::create(WebCore::JSSVGFEDropShadowElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSSVGFEDropShadowElement::s_info, (uint64_t)&WebCore::JSSVGFEDropShadowElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDropShadowElement>,(WebCore::DOMConstructorID)793>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6344);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDropShadowElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEDropShadowElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEDropShadowElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEDropShadowElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGFEDropShadowElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEDropShadowElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEDropShadowElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEDropShadowElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEDropShadowElementPrototype::create((WebCore::JSSVGFEDropShadowElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEDropShadowElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEDropShadowElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6344) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEDropShadowElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEDropShadowElementPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEDropShadowElement>,(WebCore::DOMConstructorID)793>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEDropShadowElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEDropShadowElement_dx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEDropShadowElement_dy(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEDropShadowElement_stdDeviationX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFEDropShadowElement_stdDeviationY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFEDropShadowElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEDropShadowElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEDropShadowElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEDropShadowElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEDropShadowElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEFloodElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEFloodElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEFloodElementPrototype::create(WebCore::JSSVGFEFloodElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSSVGFEFloodElement::s_info, &WebCore::JSSVGFEFloodElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFloodElement>,(WebCore::DOMConstructorID)794>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6352);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFloodElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEFloodElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEFloodElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFloodElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEFloodElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEFloodElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEFloodElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEFloodElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEFloodElementPrototype::create((WebCore::JSSVGFEFloodElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEFloodElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEFloodElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6352) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEFloodElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEFloodElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFloodElement>,(WebCore::DOMConstructorID)794>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEFloodElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEFloodElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEFloodElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEFloodElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEFloodElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEFuncAElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEFuncAElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEFuncAElementPrototype::create(WebCore::JSSVGFEFuncAElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGFEFuncAElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGFEFuncAElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncAElement>,(WebCore::DOMConstructorID)795>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6360);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGComponentTransferFunctionElement>,(WebCore::DOMConstructorID)780>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncAElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEFuncAElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEFuncAElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncAElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEFuncAElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEFuncAElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEFuncAElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype((WebCore::JSSVGComponentTransferFunctionElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEFuncAElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEFuncAElementPrototype::create((WebCore::JSSVGFEFuncAElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEFuncAElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEFuncAElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6360) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEFuncAElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEFuncAElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncAElement>,(WebCore::DOMConstructorID)795>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGFEFuncBElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEFuncBElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEFuncBElementPrototype::create(WebCore::JSSVGFEFuncBElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGFEFuncBElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGFEFuncBElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncBElement>,(WebCore::DOMConstructorID)796>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6368);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGComponentTransferFunctionElement>,(WebCore::DOMConstructorID)780>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncBElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEFuncBElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEFuncBElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncBElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEFuncBElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEFuncBElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEFuncBElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype((WebCore::JSSVGComponentTransferFunctionElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEFuncBElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEFuncBElementPrototype::create((WebCore::JSSVGFEFuncBElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEFuncBElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEFuncBElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6368) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEFuncBElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEFuncBElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncBElement>,(WebCore::DOMConstructorID)796>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGFEFuncGElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEFuncGElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEFuncGElementPrototype::create(WebCore::JSSVGFEFuncGElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGFEFuncGElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGFEFuncGElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncGElement>,(WebCore::DOMConstructorID)797>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6376);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGComponentTransferFunctionElement>,(WebCore::DOMConstructorID)780>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncGElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEFuncGElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEFuncGElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncGElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEFuncGElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEFuncGElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEFuncGElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype((WebCore::JSSVGComponentTransferFunctionElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEFuncGElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEFuncGElementPrototype::create((WebCore::JSSVGFEFuncGElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEFuncGElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEFuncGElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6376) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEFuncGElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEFuncGElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncGElement>,(WebCore::DOMConstructorID)797>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGFEFuncRElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGComponentTransferFunctionElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEFuncRElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEFuncRElementPrototype::create(WebCore::JSSVGFEFuncRElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGFEFuncRElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGFEFuncRElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncRElement>,(WebCore::DOMConstructorID)798>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6384);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGComponentTransferFunctionElement>,(WebCore::DOMConstructorID)780>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncRElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEFuncRElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEFuncRElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEFuncRElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEFuncRElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEFuncRElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEFuncRElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGComponentTransferFunctionElement::prototype((WebCore::JSSVGComponentTransferFunctionElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEFuncRElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEFuncRElementPrototype::create((WebCore::JSSVGFEFuncRElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEFuncRElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEFuncRElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6384) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEFuncRElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEFuncRElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEFuncRElement>,(WebCore::DOMConstructorID)798>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGFEGaussianBlurElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEGaussianBlurElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEGaussianBlurElementPrototype::create(WebCore::JSSVGFEGaussianBlurElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>(this, (uint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info, (uint64_t)&WebCore::JSSVGFEGaussianBlurElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEGaussianBlurElement>,(WebCore::DOMConstructorID)799>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6392);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEGaussianBlurElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEGaussianBlurElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info
                                                                            + ~((_QWORD)&WebCore::JSSVGFEGaussianBlurElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEGaussianBlurElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEGaussianBlurElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEGaussianBlurElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEGaussianBlurElementPrototype::create((WebCore::JSSVGFEGaussianBlurElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEGaussianBlurElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFEGaussianBlurElement::s_info, &WebCore::JSSVGFEGaussianBlurElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6392) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEGaussianBlurElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEGaussianBlurElementPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEGaussianBlurElement>,(WebCore::DOMConstructorID)799>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_stdDeviationX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_stdDeviationY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_edgeMode(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEGaussianBlurElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEImageElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEImageElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEImageElementPrototype::create(WebCore::JSSVGFEImageElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSSVGFEImageElement::s_info, (uint64_t)&WebCore::JSSVGFEImageElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEImageElement>,(WebCore::DOMConstructorID)800>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6400);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEImageElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEImageElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEImageElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEImageElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEImageElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEImageElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEImageElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEImageElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEImageElementPrototype::create((WebCore::JSSVGFEImageElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEImageElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEImageElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6400) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEImageElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEImageElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEImageElement>,(WebCore::DOMConstructorID)800>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEImageElement_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFEImageElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEImageElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEImageElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEImageElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEImageElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGFEImageElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

uint64_t WebCore::JSSVGFEMergeElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEMergeElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEMergeElementPrototype::create(WebCore::JSSVGFEMergeElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSSVGFEMergeElement::s_info, &WebCore::JSSVGFEMergeElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMergeElement>,(WebCore::DOMConstructorID)801>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6408);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMergeElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEMergeElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEMergeElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEMergeElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGFEMergeElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEMergeElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEMergeElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEMergeElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEMergeElementPrototype::create((WebCore::JSSVGFEMergeElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEMergeElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEMergeElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6408) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEMergeElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEMergeElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMergeElement>,(WebCore::DOMConstructorID)801>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEMergeElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEMergeElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEMergeElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEMergeElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEMergeElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEMergeNodeElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEMergeNodeElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEMergeNodeElementPrototype::create(WebCore::JSSVGFEMergeNodeElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSVGFEMergeNodeElement::s_info, (uint64_t)&WebCore::JSSVGFEMergeNodeElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMergeNodeElement>,(WebCore::DOMConstructorID)802>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6416);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMergeNodeElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEMergeNodeElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEMergeNodeElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEMergeNodeElement::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGFEMergeNodeElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEMergeNodeElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEMergeNodeElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEMergeNodeElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEMergeNodeElementPrototype::create((WebCore::JSSVGFEMergeNodeElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEMergeNodeElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEMergeNodeElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6416) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEMergeNodeElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEMergeNodeElementPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMergeNodeElement>,(WebCore::DOMConstructorID)802>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEMergeNodeElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

uint64_t WebCore::JSSVGFEMorphologyElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEMorphologyElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEMorphologyElementPrototype::create(WebCore::JSSVGFEMorphologyElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(this, (uint64_t)&WebCore::JSSVGFEMorphologyElement::s_info, (uint64_t)&WebCore::JSSVGFEMorphologyElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMorphologyElement>,(WebCore::DOMConstructorID)803>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6424);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMorphologyElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEMorphologyElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEMorphologyElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEMorphologyElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGFEMorphologyElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEMorphologyElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEMorphologyElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEMorphologyElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEMorphologyElementPrototype::create((WebCore::JSSVGFEMorphologyElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEMorphologyElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEMorphologyElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFEMorphologyElement::s_info, &WebCore::JSSVGFEMorphologyElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6424) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEMorphologyElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEMorphologyElementPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEMorphologyElement>,(WebCore::DOMConstructorID)803>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEMorphologyElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEMorphologyElement_operator(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEMorphologyElement_radiusX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEMorphologyElement_radiusY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFEMorphologyElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEMorphologyElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEMorphologyElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEMorphologyElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEMorphologyElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEOffsetElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEOffsetElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEOffsetElementPrototype::create(WebCore::JSSVGFEOffsetElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSSVGFEOffsetElement::s_info, (uint64_t)&WebCore::JSSVGFEOffsetElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEOffsetElement>,(WebCore::DOMConstructorID)804>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6432);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEOffsetElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEOffsetElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEOffsetElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEOffsetElement::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGFEOffsetElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEOffsetElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEOffsetElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEOffsetElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEOffsetElementPrototype::create((WebCore::JSSVGFEOffsetElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEOffsetElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEOffsetElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6432) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEOffsetElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEOffsetElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEOffsetElement>,(WebCore::DOMConstructorID)804>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEOffsetElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFEOffsetElement_dx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFEOffsetElement_dy(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFEOffsetElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFEOffsetElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEOffsetElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEOffsetElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFEOffsetElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFEPointLightElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFEPointLightElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFEPointLightElementPrototype::create(WebCore::JSSVGFEPointLightElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSSVGFEPointLightElement::s_info, &WebCore::JSSVGFEPointLightElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEPointLightElement>,(WebCore::DOMConstructorID)805>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6440);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEPointLightElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFEPointLightElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFEPointLightElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFEPointLightElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGFEPointLightElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFEPointLightElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFEPointLightElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFEPointLightElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFEPointLightElementPrototype::create((WebCore::JSSVGFEPointLightElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFEPointLightElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFEPointLightElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6440) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFEPointLightElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFEPointLightElementPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFEPointLightElement>,(WebCore::DOMConstructorID)805>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFEPointLightElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFEPointLightElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFEPointLightElement_z(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

uint64_t WebCore::JSSVGFESpecularLightingElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFESpecularLightingElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFESpecularLightingElementPrototype::create(WebCore::JSSVGFESpecularLightingElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSSVGFESpecularLightingElement::s_info, (uint64_t)&WebCore::JSSVGFESpecularLightingElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFESpecularLightingElement>,(WebCore::DOMConstructorID)806>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6448);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFESpecularLightingElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFESpecularLightingElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFESpecularLightingElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFESpecularLightingElement::s_info
                                                                                + ~((_QWORD)&WebCore::JSSVGFESpecularLightingElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFESpecularLightingElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFESpecularLightingElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFESpecularLightingElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFESpecularLightingElementPrototype::create((WebCore::JSSVGFESpecularLightingElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFESpecularLightingElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFESpecularLightingElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6448) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFESpecularLightingElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFESpecularLightingElementPrototype::s_info != (char **)(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFESpecularLightingElement>,(WebCore::DOMConstructorID)806>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFESpecularLightingElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_surfaceScale(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_specularConstant(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_specularExponent(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_kernelUnitLengthX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_kernelUnitLengthY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFESpecularLightingElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFESpotLightElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFESpotLightElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFESpotLightElementPrototype::create(WebCore::JSSVGFESpotLightElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSSVGFESpotLightElement::s_info, (uint64_t)&WebCore::JSSVGFESpotLightElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFESpotLightElement>,(WebCore::DOMConstructorID)807>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6456);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFESpotLightElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFESpotLightElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFESpotLightElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFESpotLightElement::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGFESpotLightElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFESpotLightElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFESpotLightElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFESpotLightElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFESpotLightElementPrototype::create((WebCore::JSSVGFESpotLightElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFESpotLightElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFESpotLightElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6456) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFESpotLightElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFESpotLightElementPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFESpotLightElement>,(WebCore::DOMConstructorID)807>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFESpotLightElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFESpotLightElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFESpotLightElement_z(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFESpotLightElement_pointsAtX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGFESpotLightElement_pointsAtY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFESpotLightElement_pointsAtZ(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFESpotLightElement_specularExponent(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFESpotLightElement_limitingConeAngle(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

uint64_t WebCore::JSSVGFETileElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFETileElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFETileElementPrototype::create(WebCore::JSSVGFETileElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSSVGFETileElement::s_info, &WebCore::JSSVGFETileElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFETileElement>,(WebCore::DOMConstructorID)808>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6464);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFETileElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFETileElement::s_info + ~((_QWORD)&WebCore::JSSVGFETileElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFETileElement::s_info + ~((_QWORD)&WebCore::JSSVGFETileElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFETileElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFETileElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFETileElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFETileElementPrototype::create((WebCore::JSSVGFETileElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFETileElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFETileElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6464) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFETileElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFETileElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFETileElement>,(WebCore::DOMConstructorID)808>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFETileElement_in1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFETileElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFETileElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFETileElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFETileElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFETileElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFETurbulenceElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFETurbulenceElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFETurbulenceElementPrototype::create(WebCore::JSSVGFETurbulenceElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<18u>(this, (uint64_t)&WebCore::JSSVGFETurbulenceElement::s_info, (uint64_t)&WebCore::JSSVGFETurbulenceElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFETurbulenceElement>,(WebCore::DOMConstructorID)809>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6472);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFETurbulenceElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFETurbulenceElement::s_info
         + ~((_QWORD)&WebCore::JSSVGFETurbulenceElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFETurbulenceElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGFETurbulenceElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFETurbulenceElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFETurbulenceElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFETurbulenceElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFETurbulenceElementPrototype::create((WebCore::JSSVGFETurbulenceElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFETurbulenceElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFETurbulenceElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<6u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGFETurbulenceElement::s_info, &WebCore::JSSVGFETurbulenceElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6472) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFETurbulenceElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFETurbulenceElementPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFETurbulenceElement>,(WebCore::DOMConstructorID)809>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFETurbulenceElement_baseFrequencyX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFETurbulenceElement_baseFrequencyY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFETurbulenceElement_numOctaves(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<int>>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGFETurbulenceElement_seed(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGFETurbulenceElement_stitchTiles(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGFETurbulenceElement_type(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGFETurbulenceElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGFETurbulenceElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFETurbulenceElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFETurbulenceElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFETurbulenceElement_result(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGFilterElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGFilterElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGFilterElementPrototype::create(WebCore::JSSVGFilterElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSSVGFilterElement::s_info, (uint64_t)&WebCore::JSSVGFilterElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFilterElement>,(WebCore::DOMConstructorID)810>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6480);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFilterElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGFilterElement::s_info + ~((_QWORD)&WebCore::JSSVGFilterElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGFilterElement::s_info + ~((_QWORD)&WebCore::JSSVGFilterElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGFilterElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGFilterElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGFilterElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGFilterElementPrototype::create((WebCore::JSSVGFilterElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGFilterElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGFilterElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6480) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGFilterElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGFilterElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGFilterElement>,(WebCore::DOMConstructorID)810>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGFilterElement_filterUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGFilterElement_primitiveUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGFilterElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGFilterElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGFilterElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGFilterElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGFilterElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

uint64_t WebCore::JSSVGForeignObjectElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGForeignObjectElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGForeignObjectElementPrototype::create(WebCore::JSSVGForeignObjectElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGForeignObjectElement::s_info, &WebCore::JSSVGForeignObjectElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGForeignObjectElement>,(WebCore::DOMConstructorID)811>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6488);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGForeignObjectElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGForeignObjectElement::s_info
         + ~((_QWORD)&WebCore::JSSVGForeignObjectElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGForeignObjectElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGForeignObjectElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGForeignObjectElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGForeignObjectElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGForeignObjectElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGForeignObjectElementPrototype::create((WebCore::JSSVGForeignObjectElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGForeignObjectElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGForeignObjectElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6488) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGForeignObjectElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGForeignObjectElementPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGForeignObjectElement>,(WebCore::DOMConstructorID)811>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGForeignObjectElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGForeignObjectElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGForeignObjectElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGForeignObjectElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

uint64_t WebCore::JSSVGGElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGGElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGGElementPrototype::create(WebCore::JSSVGGElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGGElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGGElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGElement>,(WebCore::DOMConstructorID)812>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6496);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGGElement::s_info + ~((_QWORD)&WebCore::JSSVGGElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGGElement::s_info + ~((_QWORD)&WebCore::JSSVGGElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGGElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGGElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGGElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSSVGGElementPrototype::create((WebCore::JSSVGGElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSSVGGElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSSVGGElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6496) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGGElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGGElementPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGElement>,(WebCore::DOMConstructorID)812>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

void WebCore::JSSQLErrorOwner::~JSSQLErrorOwner(WebCore::JSSQLErrorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSQLResultSetOwner::~JSSQLResultSetOwner(WebCore::JSSQLResultSetOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSQLResultSetRowListOwner::~JSSQLResultSetRowListOwner(WebCore::JSSQLResultSetRowListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSSQLStatementCallback::hasCallback(WebCore::JSSQLStatementCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

BOOL WebCore::JSSQLStatementErrorCallback::hasCallback(WebCore::JSSQLStatementErrorCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSSQLTransactionOwner::~JSSQLTransactionOwner(WebCore::JSSQLTransactionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSSQLTransactionCallback::hasCallback(WebCore::JSSQLTransactionCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

BOOL WebCore::JSSQLTransactionErrorCallback::hasCallback(WebCore::JSSQLTransactionErrorCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSSVGAngleOwner::~JSSVGAngleOwner(WebCore::JSSVGAngleOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedAngleOwner::~JSSVGAnimatedAngleOwner(WebCore::JSSVGAnimatedAngleOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedBooleanOwner::~JSSVGAnimatedBooleanOwner(WebCore::JSSVGAnimatedBooleanOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedEnumerationOwner::~JSSVGAnimatedEnumerationOwner(WebCore::JSSVGAnimatedEnumerationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedIntegerOwner::~JSSVGAnimatedIntegerOwner(WebCore::JSSVGAnimatedIntegerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedLengthOwner::~JSSVGAnimatedLengthOwner(WebCore::JSSVGAnimatedLengthOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedLengthListOwner::~JSSVGAnimatedLengthListOwner(WebCore::JSSVGAnimatedLengthListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedNumberOwner::~JSSVGAnimatedNumberOwner(WebCore::JSSVGAnimatedNumberOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedNumberListOwner::~JSSVGAnimatedNumberListOwner(WebCore::JSSVGAnimatedNumberListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedPreserveAspectRatioOwner::~JSSVGAnimatedPreserveAspectRatioOwner(WebCore::JSSVGAnimatedPreserveAspectRatioOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedRectOwner::~JSSVGAnimatedRectOwner(WebCore::JSSVGAnimatedRectOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedStringOwner::~JSSVGAnimatedStringOwner(WebCore::JSSVGAnimatedStringOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGAnimatedTransformListOwner::~JSSVGAnimatedTransformListOwner(WebCore::JSSVGAnimatedTransformListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

_BYTE *WebCore::jsSQLResultSetRowListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  WTF *v12;
  uint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29;
  int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSValue v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  JSValue v42;
  uint64_t v44;
  JSC::VM *v45;
  int v46[2];
  WTF::StringImpl *v47;
  int v48;
  unsigned int v49[2];
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  int v53;
  uint64_t v54;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v45 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "SQLResultSetRowList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSQLResultSetRowList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSQLResultSetRowList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "SQLResultSetRowList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v39);
  }
  v11 = *(unsigned int **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v49);
  if (v49[1])
    return 0;
  WebCore::SQLResultSetRowList::item(v11, v49[0], (uint64_t)v46);
  if (v48)
  {
    if (v48 == 1)
    {
      v40 = (WTF::StringImpl *)LOBYTE(v46[0]);
      LOBYTE(v50) = v46[0];
      v41 = v47;
      v47 = 0;
      v51 = v41;
      if (!*((_QWORD *)v4 + 2))
      {
        v42.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v46[0]), (JSC::JSGlobalObject *)&v51);
        JSC::VM::throwException(v4, this, v42);
        v41 = v51;
      }
      v51 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v40);
        else
          *(_DWORD *)v41 -= 2;
      }
      v17 = 0;
      goto LABEL_80;
    }
LABEL_84:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
    v44 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF6StringEdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJDnS9_dEEEEEEDcSD_DpT0_(v44);
  }
  v12 = *(WTF **)v46;
  v13 = HIDWORD(v47);
  *(_QWORD *)v46 = 0;
  v47 = 0;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v16 = 8 * *(unsigned __int8 *)(v15 + 14);
  v17 = JSC::allocateCell<JSC::JSFinalObject>((uint64_t)v14, v16 + 16);
  v18 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)v17 = v15 >> 4;
  *(_DWORD *)(v17 + 4) = v18;
  *(_QWORD *)(v17 + 8) = 0;
  bzero((void *)(v17 + 16), v16);
  if (*((_BYTE *)v14 + 755))
  {
    __dmb(0xAu);
    if (!(_DWORD)v13)
      goto LABEL_78;
  }
  else if (!(_DWORD)v13)
  {
    goto LABEL_78;
  }
  v20 = 24 * v13;
  v21 = (char *)v12 + 8;
  do
  {
    v22 = *((_DWORD *)v21 + 2);
    if (v22 == -1)
      v23 = -1;
    else
      v23 = *((unsigned int *)v21 + 2);
    if (v23 == 2)
    {
      if (v22 != 2)
        goto LABEL_84;
      v25 = *(double *)v21;
      if ((*(_QWORD *)v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v26 = (int)v25, v25 == (double)(int)v26)
        && ((_DWORD)v26 || (*(_QWORD *)&v25 & 0x8000000000000000) == 0))
      {
        v24 = v26 | 0xFFFE000000000000;
      }
      else
      {
        v24 = *(_QWORD *)&v25 + 0x2000000000000;
      }
      goto LABEL_40;
    }
    if (v23 == 1)
    {
      if (v22 != 1)
        goto LABEL_84;
      v27 = *((_QWORD *)this + 7);
      v19 = *(double *)v21;
      if (!*(_QWORD *)v21 || (v28 = *(_DWORD *)(*(_QWORD *)&v19 + 4)) == 0)
      {
        v24 = *(_QWORD *)(v27 + 41968);
        goto LABEL_40;
      }
      if (v28 != 1)
        goto LABEL_36;
      v31 = *(unsigned __int8 **)(*(_QWORD *)&v19 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v19 + 16) & 4) != 0)
      {
        v32 = *v31;
      }
      else
      {
        v33 = *(unsigned __int16 *)v31;
        if (v33 > 0xFF)
        {
LABEL_36:
          v24 = *(_QWORD *)(v27 + 64760);
          if (!v24 || *(_QWORD *)&v19 != *(_QWORD *)(v24 + 8))
            v24 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_40;
        }
        v32 = v33;
      }
      v24 = *(_QWORD *)(v27 + 8 * v32 + 42216);
      goto LABEL_40;
    }
    if (v23)
      goto LABEL_85;
    if (v22)
      goto LABEL_84;
    v24 = 2;
LABEL_40:
    v29 = (WTF::StringImpl *)*((_QWORD *)v21 - 1);
    if (v29)
    {
      if ((*((_BYTE *)v29 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v29 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v29 = v50;
      }
    }
    v30 = *(_DWORD *)v29;
    *(_DWORD *)v29 += 2;
    if (v30)
      *(_DWORD *)v29 = v30;
    else
      WTF::StringImpl::destroy(v29, *(WTF::StringImpl **)&v19);
    v50 = 0;
    v51 = (WTF::StringImpl *)v17;
    v52 = -1;
    v53 = 0x1000000;
    v54 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v17, v14, (unint64_t)v29, v24, 0, (uint64_t)&v50);
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, *(WTF::StringImpl **)&v19);
    else
      *(_DWORD *)v29 -= 2;
    v21 += 24;
    v20 -= 24;
  }
  while (v20);
  v34 = 24 * v13;
  v35 = (char *)v12 + 8;
  do
  {
    v36 = *((unsigned int *)v35 + 2);
    if ((_DWORD)v36 != -1)
      ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32E8850)[v36](&v50, v35);
    *((_DWORD *)v35 + 2) = -1;
    v37 = (WTF::StringImpl *)*((_QWORD *)v35 - 1);
    *((_QWORD *)v35 - 1) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, *(WTF::StringImpl **)&v19);
      else
        *(_DWORD *)v37 -= 2;
    }
    v35 += 24;
    v34 -= 24;
  }
  while (v34);
LABEL_78:
  if (v12)
    WTF::fastFree(v12, *(void **)&v19);
LABEL_80:
  if (v48 != -1)
    ((void (*)(WTF::StringImpl **, int *))off_1E32E8868[v48])(&v50, v46);
  return (_BYTE *)v17;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF6StringEdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJDnS9_dEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringENS_7variantIJDnSB_dEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *result;
  char v9;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = *(_QWORD *)a2 + 8;
    do
    {
      v6 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v6 != -1)
        off_1E32E8850[v6](&v9, v5);
      *(_DWORD *)(v5 + 8) = -1;
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringENS_7variantIJDnSB_dEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsSQLTransactionPrototypeFunction_executeSql(WTF **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char **v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF *v27;
  JSValue v28;
  int i;
  unsigned int v30;
  unint64_t IndexQuickly;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  JSValue v40;
  uint64_t v41;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  WebCore::ScriptExecutionContext *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  unsigned int v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  _QWORD *Allocator;
  unint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  void *v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  int v77;
  int v78;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  JSValue v82;
  WTF::StringImpl *v83;
  int v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  JSC::VM *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  JSC::JSGlobalObject *v97;
  JSC::VM *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF *v105;
  WTF::StringImpl *v106;
  char v107;
  unsigned int *v108;
  unsigned int *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  unsigned int *v115;
  WTF::StringImpl *v116;
  char v117;
  int v118;
  uint64_t v119;

  v11 = this;
  v119 = *MEMORY[0x1E0C80C00];
  v12 = this[7];
  v98 = v12;
  v13 = *((_QWORD *)a2 + 5);
  if ((v13 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v98, "SQLTransaction", "executeSql");
  v14 = (uint64_t)a2;
  v15 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
  v16 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
  v17 = (char **)(16 * v15);
  if ((_DWORD)v15)
    v18 = v17 == &WebCore::JSSQLTransaction::s_info;
  else
    v18 = 1;
  if (!v18)
  {
    do
    {
      v17 = (char **)v17[2];
      v16 = v17 != 0;
    }
    while (v17 != &WebCore::JSSQLTransaction::s_info && v17 != 0);
  }
  if (!v16)
    return WebCore::throwThisTypeError((int)this, (int)&v98, "SQLTransaction", "executeSql");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v12, (JSC::JSGlobalObject *)v11, v40);
  }
  v20 = *(_QWORD *)(v13 + 24);
  v21 = *((_QWORD *)a2 + 6);
  v114 = v21;
  if ((v21 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v21 + 5) == 2)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if ((v22 & 1) != 0)
    {
      v8 = v20;
      v22 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v21, (JSC::JSGlobalObject *)v11);
      v20 = v8;
      if (!v22)
        goto LABEL_18;
    }
    else if (!v22)
    {
LABEL_18:
      v111 = (WTF::StringImpl *)v22;
      goto LABEL_19;
    }
    *(_DWORD *)v22 += 2;
    goto LABEL_18;
  }
  v8 = v20;
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v114, (JSC::JSGlobalObject *)v11);
  v20 = v8;
LABEL_19:
  if (*((_DWORD *)v12 + 20))
  {
    v8 = v20;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    v23 = v111;
    if (hasExceptionsAfterHandlingTraps)
    {
      v104 = 1;
      v111 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v43);
        else
          *(_DWORD *)v23 -= 2;
      }
      v41 = 0;
      v44 = 1;
      goto LABEL_148;
    }
    v20 = v8;
  }
  else
  {
    v23 = v111;
  }
  v94 = v12;
  v103 = v23;
  v104 = 0;
  v24 = *(int *)(v14 + 32);
  v97 = (JSC::JSGlobalObject *)v11;
  if ((unint64_t)(v24 - 3) >= 0xFFFFFFFFFFFFFFFELL || (v25 = *(_QWORD *)(v14 + 56), v25 == 10))
  {
    v26 = 0;
    LOBYTE(v115) = 0;
    v117 = 0;
    v25 = 10;
    v118 = 0;
    goto LABEL_78;
  }
  if ((v25 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v96 = v23;
    v10 = v20;
    v27 = v11[7];
    v101 = (uint64_t)v27;
    if ((v25 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v25 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v33 = v111;
      v111 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      v113 = 1;
    }
    else
    {
      v105 = 0;
      v106 = 0;
      if (JSC::getIterationMode() == 2)
      {
        for (i = 1; ; ++i)
        {
          v30 = (*(_BYTE *)(v25 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v25 + 8) - 8) : 0;
          v9 = (i - 1);
          if (v9 >= v30)
            break;
          IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v25, i - 1, 0);
          if (!IndexQuickly)
            IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v25, (JSC::JSGlobalObject *)v11, (i - 1));
          if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
            break;
          v9 = (uint64_t)v11;
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLUnion<WebCore::IDLNull,WebCore::IDLDOMString,WebCore::IDLUnrestrictedDouble>>::convert((JSC::JSGlobalObject *)v11, IndexQuickly, (uint64_t)&v105);
          if (*((_QWORD *)v27 + 2))
          {
            v45 = JSC::JSArrayIterator::create();
            v46 = i | 0xFFFE000000000000;
            if (i < 0)
              v46 = COERCE__INT64((double)i) + 0x2000000000000;
            *(_QWORD *)(v45 + 16) = v46;
            goto LABEL_71;
          }
        }
      }
      else
      {
        JSC::iteratorForIterable((JSC *)v11, (JSC::JSGlobalObject *)v25, v28);
        v9 = v35;
        if (!*((_DWORD *)v27 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) == 0)
        {
          while (1)
          {
            v36 = JSC::iteratorStep();
            if (*((_QWORD *)v27 + 2) || v36 == 6)
              break;
            v38 = JSC::iteratorValue();
            if (*((_DWORD *)v27 + 20))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
                break;
            }
            WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLUnion<WebCore::IDLNull,WebCore::IDLDOMString,WebCore::IDLUnrestrictedDouble>>::convert(v97, v38, (uint64_t)&v105);
            if (*((_QWORD *)v27 + 2))
            {
              v9 = (uint64_t)v97;
LABEL_71:
              JSC::iteratorClose();
              break;
            }
          }
        }
      }
      if (!*((_DWORD *)v27 + 20))
      {
        v47 = (unsigned int *)v105;
LABEL_74:
        v11 = (WTF **)v97;
        v34 = 0;
        v113 = 0;
        v111 = 0;
        v112 = 0;
        v115 = v47;
        v92 = HIDWORD(v106);
        v93 = v106;
        v116 = v106;
        v8 = 1;
        v117 = 1;
        goto LABEL_75;
      }
      v84 = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
      v47 = (unsigned int *)v105;
      if (!v84)
        goto LABEL_74;
      v113 = 1;
      if (HIDWORD(v106))
      {
        v86 = 16 * HIDWORD(v106);
        v9 = 0xFFFFFFFFLL;
        do
        {
          v87 = v47[2];
          if ((_DWORD)v87 != -1)
            ((uint64_t (**)(uint64_t *, unsigned int *))off_1E32E8850)[v87](&v99, v47);
          v47[2] = -1;
          v47 += 4;
          v86 -= 16;
        }
        while (v86);
        v47 = (unsigned int *)v105;
      }
      if (v47)
      {
        v105 = 0;
        LODWORD(v106) = 0;
        WTF::fastFree((WTF *)v47, v85);
      }
      v11 = (WTF **)v97;
    }
    v8 = 0;
    v34 = 1;
LABEL_75:
    v118 = v34;
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32E88F0[v34])(&v105, &v111);
    v26 = 1;
    if (!(_DWORD)v8)
    {
      v41 = 0;
      goto LABEL_146;
    }
    v20 = v10;
    v23 = v96;
    goto LABEL_77;
  }
  v26 = 0;
  LOBYTE(v115) = 0;
  v117 = 0;
  v118 = 0;
LABEL_77:
  v24 = *(int *)(v14 + 32);
LABEL_78:
  if ((unint64_t)(v24 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v48 = 10;
    goto LABEL_95;
  }
  v48 = *(_QWORD *)(v14 + 64);
  if ((v48 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_95:
    v25 = 0;
    v101 = 0;
    v102 = 0;
    goto LABEL_96;
  }
  v95 = v20;
  v96 = v23;
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28);
  v105 = v11[7];
  if ((v48 & 0xFFFE000000000002) == 0)
  {
    v49 = *(unsigned __int8 *)(v48 + 5);
    if (v49 >= 0x17)
    {
      if ((v49 & 0xFE) == 0x1A
        || (*(_BYTE *)(v48 + 6) & 4) != 0
        && ((*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v48 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x38))(&v111, v48), (_BYTE)v111))
      {
        v25 = WTF::fastMalloc((WTF *)0x20);
        v50 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v10);
        *(_DWORD *)(v25 + 16) = 1;
        *(_QWORD *)v25 = &off_1E33A18C0;
        *(_QWORD *)(v25 + 8) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v25, v50);
        *(_QWORD *)v25 = &off_1E32DE000;
        v9 = WTF::fastMalloc((WTF *)0x18);
        v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v10);
        v51 = 0;
        if (v10)
        {
          if ((v10 & 8) != 0)
            v88 = (v10 - 112) | 1;
          else
            v88 = v10 & 0xFFFFFFFFFFFFC000;
          if ((v88 & 1) == 0)
          {
            v89 = *(_QWORD *)v88 + 32;
            goto LABEL_187;
          }
          goto LABEL_205;
        }
        goto LABEL_84;
      }
    }
  }
  WebCore::throwArgumentMustBeFunctionError((uint64_t)v11, (uint64_t)&v105, 2, "callback", 9, "SQLTransaction", 15, a8, "executeSql", 11);
  v8 = 0;
  v55 = 1;
  LODWORD(v112) = 1;
  while (1)
  {
    v102 = v55;
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32E8900[v55])(&v105, &v111);
    v11 = (WTF **)v97;
    if (!(_DWORD)v8)
    {
      v41 = 0;
      v78 = 1;
      goto LABEL_144;
    }
    v24 = *(int *)(v14 + 32);
    v20 = v95;
    v23 = v96;
LABEL_96:
    if ((unint64_t)(v24 - 5) >= 0xFFFFFFFFFFFFFFFCLL)
    {
      v14 = 10;
LABEL_113:
      v10 = 0;
      v99 = 0;
      v100 = 0;
      goto LABEL_114;
    }
    v14 = *(_QWORD *)(v14 + 72);
    if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_113;
    v95 = v20;
    v96 = v23;
    v9 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28);
    v105 = v11[7];
    if ((v14 & 0xFFFE000000000002) == 0
      && (v56 = *(unsigned __int8 *)(v14 + 5), v56 >= 0x17)
      && ((v56 & 0xFE) == 0x1A
       || (*(_BYTE *)(v14 + 6) & 4) != 0
       && ((*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x38))(&v111, v14), (_BYTE)v111)))
    {
      v10 = WTF::fastMalloc((WTF *)0x20);
      v57 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v9);
      *(_DWORD *)(v10 + 16) = 1;
      *(_QWORD *)v10 = &off_1E33A18C0;
      *(_QWORD *)(v10 + 8) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v10, v57);
      *(_QWORD *)v10 = &off_1E32DE048;
      v8 = WTF::fastMalloc((WTF *)0x18);
      v58 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v9);
      Allocator = 0;
      if (v9)
      {
        if ((v9 & 8) != 0)
          v90 = (v9 - 112) | 1;
        else
          v90 = v9 & 0xFFFFFFFFFFFFC000;
        if ((v90 & 1) != 0)
          v91 = v90 + 47;
        else
          v91 = *(_QWORD *)v90 + 32;
        Allocator = *(_QWORD **)(v91 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v91 + 16) = *Allocator;
        *Allocator = v9;
        Allocator[1] = 0;
        Allocator[2] = 0;
      }
      *(_QWORD *)(v8 + 8) = &off_1E32268A0;
      *(_QWORD *)v8 = Allocator;
      if ((v14 & 8) != 0)
        v60 = (v14 - 112) | 1;
      else
        v60 = v14 & 0xFFFFFFFFFFFFC000;
      if ((v60 & 1) != 0)
        v9 = v60 + 47;
      else
        v9 = *(_QWORD *)v60 + 32;
      v61 = *(_QWORD **)(v9 + 16);
      if (!v61)
        v61 = (_QWORD *)JSC::WeakSet::findAllocator();
      v62 = 0;
      *(_QWORD *)(v9 + 16) = *v61;
      *v61 = v14;
      v61[1] = v8 + 8;
      v61[2] = v58;
      *(_QWORD *)(v8 + 16) = v61;
      *(_QWORD *)(v10 + 24) = v8;
      LODWORD(v112) = 0;
      v111 = 0;
      v99 = v10;
      v13 = 1;
    }
    else
    {
      WebCore::throwArgumentMustBeFunctionError((uint64_t)v97, (uint64_t)&v105, 3, "errorCallback", 14, "SQLTransaction", 15, a8, "executeSql", 11);
      v13 = 0;
      v62 = 1;
      LODWORD(v112) = 1;
    }
    v100 = v62;
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32E8910[v62])(&v105, &v111);
    v11 = (WTF **)v97;
    if (!(_DWORD)v13)
    {
      v41 = 0;
      v77 = 1;
      goto LABEL_142;
    }
    v20 = v95;
    v23 = v96;
LABEL_114:
    v103 = 0;
    v110 = v23;
    if (!v118)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_205:
    v89 = v88 + 47;
LABEL_187:
    v51 = *(_QWORD **)(v89 + 16);
    if (!v51)
      v51 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v89 + 16) = *v51;
    *v51 = v10;
    v51[1] = 0;
    v51[2] = 0;
LABEL_84:
    *(_QWORD *)(v9 + 8) = &off_1E32268A0;
    v10 = v9 + 8;
    *(_QWORD *)v9 = v51;
    if ((v48 & 8) != 0)
      v52 = (v48 - 112) | 1;
    else
      v52 = v48 & 0xFFFFFFFFFFFFC000;
    if ((v52 & 1) != 0)
      v53 = v52 + 47;
    else
      v53 = *(_QWORD *)v52 + 32;
    v54 = *(_QWORD **)(v53 + 16);
    if (!v54)
      v54 = (_QWORD *)JSC::WeakSet::findAllocator();
    v55 = 0;
    *(_QWORD *)(v53 + 16) = *v54;
    *v54 = v48;
    v54[1] = v10;
    v54[2] = v8;
    *(_QWORD *)(v9 + 16) = v54;
    *(_QWORD *)(v25 + 24) = v9;
    LODWORD(v112) = 0;
    v111 = 0;
    v101 = v25;
    v8 = 1;
  }
  LOBYTE(v111) = 0;
  LOBYTE(v113) = 0;
  if (v26)
  {
    v63 = (uint64_t)v115;
    v115 = 0;
    v116 = 0;
    v111 = (WTF::StringImpl *)v63;
    v112 = __PAIR64__(v92, v93);
    LOBYTE(v113) = 1;
  }
  v101 = 0;
  v109 = (unsigned int *)v25;
  v99 = 0;
  v108 = (unsigned int *)v10;
  WebCore::SQLTransaction::executeSql(v20, (WTF::StringImpl *)&v110, (uint64_t *)&v111, &v109, (uint64_t *)&v108, (uint64_t)&v105);
  v65 = v108;
  v108 = 0;
  if (v65)
  {
    v66 = v65 + 4;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 16))(v65);
    }
  }
  v69 = v109;
  v109 = 0;
  if (v69)
  {
    v70 = v69 + 4;
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v69 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 16))(v69);
    }
  }
  if ((_BYTE)v113)
  {
    v73 = (unsigned int *)v111;
    if (HIDWORD(v112))
    {
      v74 = 16 * HIDWORD(v112);
      do
      {
        v75 = v73[2];
        if ((_DWORD)v75 != -1)
          ((uint64_t (**)(unsigned int **, unsigned int *))off_1E32E8850)[v75](&v109, v73);
        v73[2] = -1;
        v73 += 4;
        v74 -= 16;
      }
      while (v74);
      v73 = (unsigned int *)v111;
    }
    if (v73)
    {
      v111 = 0;
      LODWORD(v112) = 0;
      WTF::fastFree((WTF *)v73, v64);
    }
  }
  v76 = v110;
  v110 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v64);
    else
      *(_DWORD *)v76 -= 2;
  }
  if (!v107)
  {
    v41 = 10;
    goto LABEL_141;
  }
  v80 = (WTF::StringImpl *)v105;
  LOBYTE(v111) = (_BYTE)v105;
  v81 = v106;
  v106 = 0;
  v112 = (unint64_t)v81;
  if (!*((_QWORD *)v94 + 2))
  {
    v82.super.isa = (Class)WebCore::createDOMException((JSC *)v11, (JSC::JSGlobalObject *)v105, (JSC::JSGlobalObject *)&v112);
    JSC::VM::throwException(v94, (JSC::JSGlobalObject *)v11, v82);
    v81 = (WTF::StringImpl *)v112;
  }
  v112 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v80);
    else
      *(_DWORD *)v81 -= 2;
  }
  if (v107)
  {
    v83 = v106;
    v106 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 != 2)
      {
        v41 = 0;
        *(_DWORD *)v83 -= 2;
        goto LABEL_141;
      }
      WTF::StringImpl::destroy(v83, v80);
    }
  }
  v41 = 0;
LABEL_141:
  v77 = v100;
  if (v100 == -1)
    goto LABEL_143;
LABEL_142:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32E8920[v77])(&v111, &v99);
LABEL_143:
  v78 = v102;
  if (v102 == -1)
    goto LABEL_145;
LABEL_144:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32E8930[v78])(&v111, &v101);
LABEL_145:
  v26 = v118;
  if (v118 != -1)
LABEL_146:
    ((void (*)(WTF::StringImpl **, unsigned int **))off_1E32E8940[v26])(&v111, &v115);
  v44 = v104;
  if (v104 != -1)
LABEL_148:
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32E8950[v44])(&v114, &v103);
  return (_BYTE *)v41;
}

unint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLUnion<WebCore::IDLNull,WebCore::IDLDOMString,WebCore::IDLUnrestrictedDouble>>::convert(JSC::JSGlobalObject *a1, unint64_t this, uint64_t a3)
{
  int v4;
  JSC::VM *v5;
  double v6;
  int v7;
  JSC::VM *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  WTF::StringImpl *v19;
  int hasExceptionsAfterHandlingTraps;
  double v21;
  uint64_t v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  double v26;
  int v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v4 = 0;
    v26 = 0.0;
    v27 = 0;
    v28 = 0;
    goto LABEL_20;
  }
  if (!(this >> 49))
  {
    v25 = this;
    v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, a1);
LABEL_15:
      if (*((_DWORD *)v8 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v8);
        v10 = v24;
        if (hasExceptionsAfterHandlingTraps)
        {
          v23 = 1;
          v24 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v19);
            else
              *(_DWORD *)v10 -= 2;
          }
          v7 = 1;
          v11 = 1;
          goto LABEL_18;
        }
      }
      else
      {
        v10 = v24;
      }
      v7 = 0;
      v11 = 0;
      v23 = 0;
      v22 = 0;
      v26 = *(double *)&v10;
      v27 = 1;
LABEL_18:
      v28 = v7;
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32E8950[v11])(&v24, &v22);
      v4 = 1;
      goto LABEL_19;
    }
    v9 = *(WTF::StringImpl **)(this + 8);
    if ((v9 & 1) != 0)
    {
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v9)
        goto LABEL_14;
    }
    else if (!v9)
    {
LABEL_14:
      v24 = v9;
      goto LABEL_15;
    }
    *(_DWORD *)v9 += 2;
    goto LABEL_14;
  }
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v6 = (double)(int)this;
  if (this <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v6 = this - 0x2000000000000;
  if (*((_DWORD *)v5 + 20) && (v21 = v6, v18 = JSC::VM::hasExceptionsAfterHandlingTraps(v5), v6 = v21, (v18 & 1) != 0))
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v26 = v6;
    v27 = 2;
  }
  v28 = v7;
  v4 = 2;
LABEL_19:
  if (!v7)
  {
LABEL_20:
    LOBYTE(v22) = 0;
    v23 = -1;
    result = ((uint64_t (*)(WTF::StringImpl **, uint64_t *, double *))off_1E32E88C8[v4])(&v24, &v22, &v26);
    v23 = v4;
    v13 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
    {
      result = WTF::Vector<std::variant<decltype(nullptr),WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v13 + 1, (unint64_t)&v22);
      v14 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12);
      *(_BYTE *)v14 = 0;
      *(_DWORD *)(v14 + 8) = -1;
      v15 = *(unsigned int *)(result + 8);
      if ((_DWORD)v15 == -1)
        goto LABEL_26;
      result = ((uint64_t (*)(WTF::StringImpl **, uint64_t, unint64_t))off_1E32E88C8[v15])(&v24, v14, result);
    }
    else
    {
      v14 = *(_QWORD *)a3 + 16 * v13;
      *(_BYTE *)v14 = 0;
      *(_DWORD *)(v14 + 8) = -1;
      LODWORD(v15) = v23;
      if (v23 == -1)
      {
        ++*(_DWORD *)(a3 + 12);
        goto LABEL_29;
      }
      result = ((uint64_t (*)(WTF::StringImpl **, uint64_t, uint64_t *))off_1E32E88C8[v23])(&v24, v14, &v22);
    }
    *(_DWORD *)(v14 + 8) = v15;
LABEL_26:
    v16 = v23;
    ++*(_DWORD *)(a3 + 12);
    if ((_DWORD)v16 != -1)
      result = ((uint64_t (**)(WTF::StringImpl **, uint64_t *))off_1E32E8850)[v16](&v24, &v22);
LABEL_29:
    v17 = v28;
    if (v28 == -1)
      return result;
    return ((uint64_t (*)(uint64_t *, double *))off_1E32E88E0[v17])(&v22, &v26);
  }
  v17 = 1;
  return ((uint64_t (*)(uint64_t *, double *))off_1E32E88E0[v17])(&v22, &v26);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6StringEdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJDnS9_dEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6StringEdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJDnS9_dEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6StringEdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJDnS9_dEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

unint64_t WTF::Vector<std::variant<decltype(nullptr),WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::variant<decltype(nullptr),WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::variant<decltype(nullptr),WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<decltype(nullptr),WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = 16 * v5;
      v10 = v4;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 8) = -1;
        v11 = *((unsigned int *)v10 + 2);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, uint64_t, WTF *))off_1E32E88C8[v11])(&v13, v8, v10);
          *(_DWORD *)(v8 + 8) = v11;
          v12 = *((unsigned int *)v10 + 2);
          if ((_DWORD)v12 != -1)
            ((uint64_t (**)(char *, WTF *))off_1E32E8850)[v12](&v14, v10);
        }
        *((_DWORD *)v10 + 2) = -1;
        v8 += 16;
        v10 = (WTF *)((char *)v10 + 16);
        v9 -= 16;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJDnN3WTF6StringEdEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = off_1E32E8850[v3](&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_7variantIJDnNS8_6StringEdEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *a2;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = v4[2];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (**)(char *, unsigned int *))off_1E32E8850)[v6](&v8, v4);
      v4[2] = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    v4 = *a2;
  }
  if (v4)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22JSSQLStatementCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore27JSSQLStatementErrorCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore27JSSQLStatementErrorCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22JSSQLStatementCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF6VectorINS_7variantIJDnNS9_6StringEdEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  if (a2[16])
  {
    v3 = *((unsigned int *)a2 + 3);
    v4 = *(unsigned int **)a2;
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      do
      {
        v6 = v4[2];
        if ((_DWORD)v6 != -1)
          result = ((uint64_t (**)(char *, unsigned int *))off_1E32E8850)[v6](&v8, v4);
        v4[2] = -1;
        v4 += 4;
        v5 -= 16;
      }
      while (v5);
      v4 = *(unsigned int **)a2;
    }
    if (v4)
    {
      *(_QWORD *)a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
      return WTF::fastFree((WTF *)v4, a2);
    }
  }
  return result;
}

uint64_t WebCore::jsSVGAnglePrototypeFunction_newValueSpecifiedUnits(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  uint64_t v23;
  JSValue v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  float v28;
  uint64_t v29;
  JSValue v30;
  double v31;
  double v32;
  _QWORD v33[2];
  unint64_t v34;
  WTF::StringImpl *v35;

  v4 = *((_QWORD *)this + 7);
  v33[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v33, "SVGAngle", "newValueSpecifiedUnits");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGAngle::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGAngle::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v33, "SVGAngle", "newValueSpecifiedUnits");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v30);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v34 = v13;
  if (v13 >= 0xFFFE000000000000 && (v13 & 0x80000000) == 0)
  {
    LOWORD(v16) = v13;
  }
  else
  {
    if (v13 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v13;
    }
    else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v34, this);
      v15 = v32;
    }
    else
    {
      *(_QWORD *)&v15 = v13 - 0x2000000000000;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    LOWORD(v16) = 0;
    if (fabs(v15) != INFINITY && v15 != 0.0)
    {
      v17 = -floor(-v15);
      v18 = floor(v15);
      if (v15 >= 0.0)
        v17 = v18;
      v19 = fmod(v17, 65536.0);
      if (v19 < 0.0)
        v19 = v19 + 65536.0;
      v16 = (int)v19;
    }
  }
  v20 = *((_QWORD *)a2 + 7);
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  v33[1] = v21;
  v34 = v20;
  if (v20 >= 0xFFFE000000000000)
  {
    v22 = (double)(int)v20;
  }
  else if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v34, this);
    v22 = v31;
  }
  else
  {
    *(_QWORD *)&v22 = v20 - 0x2000000000000;
  }
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22 < -3.40282347e38 || v22 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v12 + 24) == 1)
  {
    v23 = 4;
LABEL_40:
    LOBYTE(v34) = v23;
    v35 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v35);
      JSC::VM::throwException((JSC::VM *)v4, this, v24);
      v26 = v35;
      v35 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    return 0;
  }
  if ((unsigned __int16)(v16 - 5) < 0xFFFCu)
  {
    v23 = 6;
    goto LABEL_40;
  }
  v28 = v22;
  *(_DWORD *)(v12 + 28) = (unsigned __int16)v16;
  *(float *)(v12 + 32) = v28;
  v29 = *(_QWORD *)(v12 + 16);
  if (v29)
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v29 + 32))(v29, v12, "The provided value is outside the range of a float", 51);
  return 10;
}

uint64_t WebCore::jsSVGAnglePrototypeFunction_convertToSpecifiedUnits(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSValue v21;
  uint64_t v23;
  JSValue v24;
  double v25;
  uint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  int v29[2];
  WTF::StringImpl *v30;
  char v31;

  v4 = *((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGAngle", "convertToSpecifiedUnits");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGAngle::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGAngle::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGAngle", "convertToSpecifiedUnits");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v24);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    v12 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v29 = v12;
    if (v12 >= 0xFFFE000000000000 && (v12 & 0x80000000) == 0)
    {
      LOWORD(v15) = v12;
    }
    else
    {
      if (v12 >= 0xFFFE000000000000)
      {
        v14 = (double)(int)v12;
      }
      else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v29, this);
        v14 = v25;
      }
      else
      {
        *(_QWORD *)&v14 = v12 - 0x2000000000000;
      }
      if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
        return 0;
      LOWORD(v15) = 0;
      if (fabs(v14) != INFINITY && v14 != 0.0)
      {
        v16 = -floor(-v14);
        v17 = floor(v14);
        if (v14 >= 0.0)
          v16 = v17;
        v18 = fmod(v16, 65536.0);
        if (v18 < 0.0)
          v18 = v18 + 65536.0;
        v15 = (int)v18;
      }
    }
    if (*(_BYTE *)(v11 + 24) == 1)
    {
      v19 = 0;
      v20 = 4;
      LOBYTE(v29[0]) = 4;
      v31 = 1;
LABEL_33:
      v27 = v20;
      v30 = 0;
      v28 = v19;
      if (!*(_QWORD *)(v4 + 16))
      {
        v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v28);
        JSC::VM::throwException((JSC::VM *)v4, this, v21);
        v19 = v28;
      }
      v28 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v19 -= 2;
      }
      return 0;
    }
    WebCore::SVGAngleValue::convertToSpecifiedUnits((float *)(v11 + 28), (unsigned __int16)v15, (uint64_t)v29);
    if (v31)
    {
      v20 = LOBYTE(v29[0]);
      v19 = v30;
      goto LABEL_33;
    }
    v23 = *(_QWORD *)(v11 + 16);
    if (v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 32))(v23, v11);
    return 10;
  }
}

_BYTE *WebCore::jsSVGAnimationElementPrototypeFunction_getStartTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  unint64_t v15;
  _BYTE *result;
  int v17;
  float v18;
  double v19;
  uint64_t v20;
  JSC::VM *v21;
  float v22;
  WTF::StringImpl *v23;
  int v24;
  char v25[8];
  WTF::StringImpl *v26;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "SVGAnimationElement", "getStartTime");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGAnimationElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "SVGAnimationElement", "getStartTime");
  v11 = *(double *)(*(_QWORD *)(v4 + 24) + 264);
  if (v11 < 3.40282347e38)
  {
    v18 = v11;
    v22 = v18;
    v24 = 0;
    v19 = v18;
    if (COERCE__INT64(fabs(v18)) <= 0x7FEFFFFFFFFFFFFFLL
      && (v20 = (int)v18, (double)(int)v20 == v19)
      && ((_DWORD)v20 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
    {
      v17 = 0;
      v15 = v20 | 0xFFFE000000000000;
    }
    else
    {
      v17 = 0;
      v15 = *(_QWORD *)&v19 + 0x2000000000000;
    }
LABEL_26:
    ((void (*)(char *, float *, JSC::CallFrame *))off_1E32E94F0[v17])(v25, &v22, a3);
    return (_BYTE *)v15;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v22) = 8;
  v24 = 1;
  v25[0] = 8;
  v13 = v23;
  v23 = 0;
  v26 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v26);
    JSC::VM::throwException(v5, this, v14);
    v13 = v26;
  }
  v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v15 = 0;
  result = 0;
  v17 = v24;
  if (v24 != -1)
    goto LABEL_26;
  return result;
}

_BYTE *WebCore::jsSVGAnimationElementPrototypeFunction_getCurrentTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  double *v9;
  double v10;
  double v11;
  float v12;
  double v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "SVGAnimationElement", "getCurrentTime");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGAnimationElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "SVGAnimationElement", "getCurrentTime");
  v9 = *(double **)(*(_QWORD *)(v3 + 24) + 312);
  v10 = 0.0;
  if (v9 && v9[1] != 0.0)
  {
    if (v9[2] == 0.0)
    {
      WTF::MonotonicTime::now(this);
      v10 = v9[3] + v11 - v9[4];
    }
    else
    {
      v10 = v9[3];
    }
  }
  v12 = v10;
  v13 = v12;
  if (COERCE__INT64(fabs(v12)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v14 = (int)v12, (double)(int)v14 == v13)
    && ((*(_QWORD *)&v10 & 0x8000000000000000) == 0 || (_DWORD)v14))
  {
    return (_BYTE *)(v14 | 0xFFFE000000000000);
  }
  else
  {
    return (_BYTE *)(*(_QWORD *)&v13 + 0x2000000000000);
  }
}

_BYTE *WebCore::jsSVGAnimationElementPrototypeFunction_getSimpleDuration(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  unint64_t v15;
  _BYTE *result;
  int v17;
  float v18;
  double v19;
  uint64_t v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  int v24;
  char v25[8];
  WTF::StringImpl *v26;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "SVGAnimationElement", "getSimpleDuration");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGAnimationElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "SVGAnimationElement", "getSimpleDuration");
  WebCore::SVGSMILElement::dur(*(_QWORD *)(v4 + 24), &v22);
  v11 = v22;
  if (v22 > 3.40282347e38)
    v11 = 3.40282347e38;
  if (v11 < 3.40282347e38)
  {
    v18 = v11;
    *(float *)&v22 = v18;
    v24 = 0;
    v19 = v18;
    if (COERCE__INT64(fabs(v18)) <= 0x7FEFFFFFFFFFFFFFLL
      && (v20 = (int)v18, (double)(int)v20 == v19)
      && ((_DWORD)v20 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
    {
      v17 = 0;
      v15 = v20 | 0xFFFE000000000000;
    }
    else
    {
      v17 = 0;
      v15 = *(_QWORD *)&v19 + 0x2000000000000;
    }
LABEL_28:
    ((void (*)(char *, double *))off_1E32E94F0[v17])(v25, &v22);
    return (_BYTE *)v15;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v22) = 6;
  v24 = 1;
  v25[0] = 6;
  v13 = v23;
  v23 = 0;
  v26 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&v26);
    JSC::VM::throwException(v5, this, v14);
    v13 = v26;
  }
  v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v15 = 0;
  result = 0;
  v17 = v24;
  if (v24 != -1)
    goto LABEL_28;
  return result;
}

uint64_t WebCore::jsSVGAnimationElementPrototypeFunction_beginElement(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WTF::MonotonicTime *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v15;
  double v16;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SVGAnimationElement", "beginElement");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGAnimationElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SVGAnimationElement", "beginElement");
  v9 = *(WTF::MonotonicTime **)(v3 + 24);
  v10 = (double *)*((_QWORD *)v9 + 39);
  v11 = 0.0;
  if (!v10
    || (v11 = 0.0, v10[1] == 0.0)
    || (v10[2] != 0.0 ? (v11 = v10[3]) : (WTF::MonotonicTime::now(this), v11 = v10[3] + v12 - v10[4]),
        v13 = 1.79769313e308,
        v11 != 1.79769313e308))
  {
    v13 = v11 + 0.0;
    if (v11 == 3.40282347e38)
      v13 = 3.40282347e38;
  }
  v16 = v13;
  WebCore::SVGSMILElement::addInstanceTime(v9, 0, (uint64_t *)&v16, 1);
  return 10;
}

uint64_t WebCore::jsSVGAnimationElementPrototypeFunction_beginElementAt(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF::MonotonicTime *v11;
  unint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  float v18;
  BOOL v19;
  double v20;
  JSValue v22;
  double v23;
  _QWORD v24[2];
  double v25;

  v3 = (JSC::JSGlobalObject *)this;
  v4 = this[7];
  v24[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v24, "SVGAnimationElement", "beginElementAt");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGAnimationElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v24, "SVGAnimationElement", "beginElementAt");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return JSC::VM::throwException(v4, v3, v22);
  }
  v11 = *(WTF::MonotonicTime **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v24[1] = v4;
  v25 = *(double *)&v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    this = (JSC::VM **)JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v25, (JSC::JSGlobalObject *)this);
    v13 = v23;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20))
  {
    this = (JSC::VM **)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((this & 1) != 0)
      return 0;
  }
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < -3.40282347e38 || v13 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v14 = (double *)*((_QWORD *)v11 + 39);
  v15 = 0.0;
  if (!v14
    || v14[1] == 0.0
    || (v14[2] != 0.0
      ? (v15 = v14[3])
      : (WTF::MonotonicTime::now((WTF::MonotonicTime *)this), v15 = v14[3] + v16 - v14[4]),
        v17 = 1.79769313e308,
        v15 != 1.79769313e308))
  {
    v18 = v13;
    v19 = v15 == 3.40282347e38 || v18 == 3.4028e38;
    v20 = v15 + v18;
    if (v19)
      v17 = 3.40282347e38;
    else
      v17 = v20;
  }
  v25 = v17;
  WebCore::SVGSMILElement::addInstanceTime(v11, 0, (uint64_t *)&v25, 1);
  return 10;
}

uint64_t WebCore::jsSVGAnimationElementPrototypeFunction_endElement(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v15;
  double v16;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SVGAnimationElement", "endElement");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGAnimationElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SVGAnimationElement", "endElement");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v9 + 288))
  {
    v10 = *(double **)(v9 + 312);
    v11 = 0.0;
    if (!v10
      || (v11 = 0.0, v10[1] == 0.0)
      || (v10[2] != 0.0 ? (v11 = v10[3]) : (WTF::MonotonicTime::now(this), v11 = v10[3] + v12 - v10[4]),
          v13 = 1.79769313e308,
          v11 != 1.79769313e308))
    {
      v13 = v11 + 0.0;
      if (v11 == 3.40282347e38)
        v13 = 3.40282347e38;
    }
    v16 = v13;
    WebCore::SVGSMILElement::addInstanceTime((WTF::MonotonicTime *)v9, 1, (uint64_t *)&v16, 1);
  }
  return 10;
}

uint64_t WebCore::jsSVGAnimationElementPrototypeFunction_endElementAt(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  float v18;
  BOOL v19;
  double v20;
  JSValue v22;
  double v23;
  _QWORD v24[2];
  double v25;

  v3 = (JSC::JSGlobalObject *)this;
  v4 = this[7];
  v24[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v24, "SVGAnimationElement", "endElementAt");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGAnimationElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v24, "SVGAnimationElement", "endElementAt");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return JSC::VM::throwException(v4, v3, v22);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v24[1] = v4;
  v25 = *(double *)&v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    this = (JSC::VM **)JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v25, (JSC::JSGlobalObject *)this);
    v13 = v23;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20))
  {
    this = (JSC::VM **)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((this & 1) != 0)
      return 0;
  }
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < -3.40282347e38 || v13 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_DWORD *)(v11 + 288))
  {
    v14 = *(double **)(v11 + 312);
    v15 = 0.0;
    if (!v14
      || v14[1] == 0.0
      || (v14[2] != 0.0
        ? (v15 = v14[3])
        : (WTF::MonotonicTime::now((WTF::MonotonicTime *)this), v15 = v14[3] + v16 - v14[4]),
          v17 = 1.79769313e308,
          v15 != 1.79769313e308))
    {
      v18 = v13;
      v19 = v15 == 3.40282347e38 || v18 == 3.4028e38;
      v20 = v15 + v18;
      if (v19)
        v17 = 3.40282347e38;
      else
        v17 = v20;
    }
    v25 = v17;
    WebCore::SVGSMILElement::addInstanceTime((WTF::MonotonicTime *)v11, 1, (uint64_t *)&v25, 1);
  }
  return 10;
}

_BYTE *WebCore::jsSVGAnimationElementPrototypeFunction_hasExtension(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGAnimationElement", "hasExtension");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGAnimationElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGAnimationElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGAnimationElement", "hasExtension");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v12 = *((_QWORD *)a2 + 6);
  v28 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  if ((WTF::equal(v14, (const WTF::StringImpl *)WebCore::MathMLNames::mathmlNamespaceURI, a3) & 1) != 0
    || WTF::equal(v14, (const WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI, v16))
  {
    v17 = 7;
    if (!v14)
      goto LABEL_33;
  }
  else
  {
    v17 = 6;
    if (!v14)
    {
LABEL_33:
      v18 = 0;
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v15);
    goto LABEL_33;
  }
  v18 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_28:
  ((void (*)(uint64_t *, uint64_t *))off_1E32E8950[v18])(&v28, &v25);
  return (_BYTE *)v17;
}

uint64_t WebCore::jsSVGElementPrototypeFunction_focus(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  __int16 v11;
  int v12;
  int v13;
  __int16 v14;

  v9 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v9, "SVGElement", "focus");
  if (*((_DWORD *)a2 + 8) == 1)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 6);
  v7 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::FocusOptions>((JSC::JSCell *)v6, (uint64_t)this, (uint64_t)&v10);
  if (v12)
    return 0;
  v14 = v11;
  v13 = v10;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v7 + 664))(v7, &v13);
  return 10;
}

uint64_t WebCore::jsSVGElementPrototypeFunction_blur(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(v4);
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v7, "SVGElement", "blur");
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 688))(*(_QWORD *)(v5 + 24));
  return 10;
}

uint64_t WebCore::JSSVGAElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimateElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimateMotionElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimateTransformElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGCircleElement>(WebCore::JSSVGCircleElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGCircleElement::s_info + ~((_QWORD)&WebCore::JSSVGCircleElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGCircleElement::s_info + ~((_QWORD)&WebCore::JSSVGCircleElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGCircleElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGCircleElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSSVGCircleElement::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSSVGCircleElement::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGCircleElement::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGClipPathElement>(WebCore::JSSVGClipPathElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGClipPathElement::s_info
        + ~((_QWORD)&WebCore::JSSVGClipPathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGClipPathElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGClipPathElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGClipPathElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGClipPathElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSSVGClipPathElement::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSSVGClipPathElement::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGClipPathElement::s_info);
}

uint64_t WebCore::JSSVGDefsElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGDescElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGEllipseElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEBlendElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEColorMatrixElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEComponentTransferElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFECompositeElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEConvolveMatrixElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEDiffuseLightingElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEDisplacementMapElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEDistantLightElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEDropShadowElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEFloodElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEFuncAElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEFuncBElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEFuncGElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEFuncRElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEGaussianBlurElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEImageElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEMergeElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEMergeNodeElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEMorphologyElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEOffsetElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFEPointLightElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFESpecularLightingElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFESpotLightElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFETileElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFETurbulenceElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGFilterElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGForeignObjectElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGGElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGImageElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGGraphicsElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGImageElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGImageElement::s_info + ~((_QWORD)&WebCore::JSSVGImageElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGImageElement::s_info + ~((_QWORD)&WebCore::JSSVGImageElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGImageElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGImageElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGGraphicsElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGImageElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGImageElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGImageElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGImageElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGImageElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGImageElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGImageElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGLineElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGLinearGradientElement>(uint64_t a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGLinearGradientElement::s_info
        + ~((_QWORD)&WebCore::JSSVGLinearGradientElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGLinearGradientElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGLinearGradientElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGLinearGradientElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGLinearGradientElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)(a1 + 40136);
  Prototype = WebCore::JSSVGLinearGradientElement::createPrototype((WebCore::JSSVGLinearGradientElement *)a1, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *(_QWORD *)(a1 + 40144))
  {
    SlowCase = *(_QWORD *)(a1 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 + 40160);
    *(_QWORD *)(a1 + 40144) = SlowCase + HIDWORD(v19);
    *(_QWORD *)(a1 + 40152) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v16, &v20, &WebCore::JSSVGLinearGradientElement::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGLinearGradientElement::s_info);
}

unint64_t WebCore::createWrapper<WebCore::SVGMarkerElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGMarkerElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGMarkerElement::s_info + ~((_QWORD)&WebCore::JSSVGMarkerElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMarkerElement::s_info + ~((_QWORD)&WebCore::JSSVGMarkerElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGMarkerElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGMarkerElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGMarkerElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGMarkerElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGMarkerElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGMarkerElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGMarkerElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGMarkerElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGMarkerElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGMaskElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGMetadataElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGMetadataElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGMetadataElement::s_info
        + ~((_QWORD)&WebCore::JSSVGMetadataElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMetadataElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGMetadataElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGMetadataElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGMetadataElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGMetadataElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGMetadataElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGMetadataElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGMetadataElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGMetadataElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGMetadataElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGMetadataElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGMPathElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGMPathElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGMPathElement::s_info + ~((_QWORD)&WebCore::JSSVGMPathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMPathElement::s_info + ~((_QWORD)&WebCore::JSSVGMPathElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGMPathElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGMPathElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGMPathElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGMPathElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGMPathElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGMPathElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGMPathElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGMPathElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGMPathElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGPathElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGPatternElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGPatternElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGPatternElement::s_info
        + ~((_QWORD)&WebCore::JSSVGPatternElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPatternElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGPatternElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGPatternElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGPatternElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGPatternElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGPatternElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGPatternElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGPatternElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGPatternElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGPatternElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGPatternElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGPolygonElement>(uint64_t a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGPolygonElement::s_info
        + ~((_QWORD)&WebCore::JSSVGPolygonElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPolygonElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSSVGPolygonElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGPolygonElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGPolygonElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)(a1 + 40136);
  Prototype = WebCore::JSSVGPolygonElement::createPrototype((WebCore::JSSVGPolygonElement *)a1, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *(_QWORD *)(a1 + 40144))
  {
    SlowCase = *(_QWORD *)(a1 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 + 40160);
    *(_QWORD *)(a1 + 40144) = SlowCase + HIDWORD(v19);
    *(_QWORD *)(a1 + 40152) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v16, &v20, &WebCore::JSSVGPolygonElement::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGPolygonElement::s_info);
}

unint64_t WebCore::createWrapper<WebCore::SVGPolylineElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGGeometryElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGPolylineElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGPolylineElement::s_info
        + ~((_QWORD)&WebCore::JSSVGPolylineElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPolylineElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGPolylineElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGPolylineElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGPolylineElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGGeometryElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGPolylineElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGPolylineElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGPolylineElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGPolylineElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGPolylineElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGPolylineElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGPolylineElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGRadialGradientElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGRectElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGScriptElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGScriptElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGScriptElement::s_info + ~((_QWORD)&WebCore::JSSVGScriptElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGScriptElement::s_info + ~((_QWORD)&WebCore::JSSVGScriptElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGScriptElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGScriptElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGScriptElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGScriptElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGScriptElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGScriptElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGScriptElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGScriptElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGScriptElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGSetElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGAnimationElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGSetElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGSetElement::s_info + ~((_QWORD)&WebCore::JSSVGSetElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSetElement::s_info + ~((_QWORD)&WebCore::JSSVGSetElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGSetElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGSetElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGAnimationElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGSetElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGSetElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGSetElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGSetElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGSetElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGSetElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGSetElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGStopElement>(uint64_t a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGStopElement::s_info + ~((_QWORD)&WebCore::JSSVGStopElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGStopElement::s_info + ~((_QWORD)&WebCore::JSSVGStopElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGStopElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGStopElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)(a1 + 40136);
  Prototype = WebCore::JSSVGStopElement::createPrototype((WebCore::JSSVGStopElement *)a1, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *(_QWORD *)(a1 + 40144))
  {
    SlowCase = *(_QWORD *)(a1 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 + 40160);
    *(_QWORD *)(a1 + 40144) = SlowCase + HIDWORD(v19);
    *(_QWORD *)(a1 + 40152) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v16, &v20, &WebCore::JSSVGStopElement::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGStopElement::s_info);
}

uint64_t WebCore::JSSVGStyleElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGSwitchElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGGraphicsElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGSwitchElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGSwitchElement::s_info + ~((_QWORD)&WebCore::JSSVGSwitchElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSwitchElement::s_info + ~((_QWORD)&WebCore::JSSVGSwitchElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGSwitchElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGSwitchElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGGraphicsElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGSwitchElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGSwitchElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGSwitchElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGSwitchElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGSwitchElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGSwitchElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGSwitchElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGSymbolElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGTextElement>(uint64_t a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGTextElement::s_info + ~((_QWORD)&WebCore::JSSVGTextElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTextElement::s_info + ~((_QWORD)&WebCore::JSSVGTextElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGTextElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGTextElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)(a1 + 40136);
  Prototype = WebCore::JSSVGTextElement::createPrototype((WebCore::JSSVGTextElement *)a1, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *(_QWORD *)(a1 + 40144))
  {
    SlowCase = *(_QWORD *)(a1 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 + 40160);
    *(_QWORD *)(a1 + 40144) = SlowCase + HIDWORD(v19);
    *(_QWORD *)(a1 + 40152) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v16, &v20, &WebCore::JSSVGTextElement::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGTextElement::s_info);
}

unint64_t WebCore::createWrapper<WebCore::SVGTextPathElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  int v11;
  unint64_t v12;
  WebCore::JSSVGTextContentElement *v13;
  uint64_t v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  WebCore::JSSVGTextPathElement *v19;
  _QWORD *v20;
  unint64_t SlowCase;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *Allocator;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *((_QWORD *)a1 + 412);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)&WebCore::JSSVGTextPathElement::s_info
        + ~((_QWORD)&WebCore::JSSVGTextPathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTextPathElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGTextPathElement::s_info << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(char ***)(v4 + 16 * v9);
    if (v10 == &WebCore::JSSVGTextPathElement::s_info)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
        goto LABEL_8;
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(char ***)(v4 + 16 * v9);
        ++v11;
        if (v10 == &WebCore::JSSVGTextPathElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v13 = (WebCore::JSSVGTextContentElement *)*((_QWORD *)a1 + 7);
  v14 = WebCore::getDOMStructure<WebCore::JSSVGTextContentElement>(v13, a1);
  Structure = WebCore::JSSVGTextPathElementPrototype::createStructure((uint64_t *)v13, (uint64_t)a1, *(JSC::JSCell **)(v14 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v17 = (JSC::JSCell *)WebCore::JSSVGTextPathElementPrototype::create(v13, a1, Structure, v16);
  v18 = WebCore::JSSVGTextPathElement::createStructure((uint64_t *)v13, (uint64_t)a1, v17);
  v12 = WebCore::cacheDOMStructure((JSCell *)a1, v18, (uint64_t)&WebCore::JSSVGTextPathElement::s_info);
LABEL_8:
  v19 = (WebCore::JSSVGTextPathElement *)*((_QWORD *)a1 + 7);
  v20 = (_QWORD *)WebCore::JSSVGTextPathElement::subspaceForImpl(v19, a2);
  SlowCase = v20[3];
  if (SlowCase < v20[4])
  {
LABEL_9:
    v20[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v20[5];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v20[6];
    v20[4] = SlowCase + HIDWORD(v32);
    v20[5] = SlowCase + (int)v32;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v12);
  *(_QWORD *)(SlowCase + 24) = v3;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v19 + 755))
    __dmb(0xAu);
  v22 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v3)
    v23 = (uint64_t *)(v3 + 8);
  else
    v23 = 0;
  if (!*(_DWORD *)(v22 + 48))
  {
    if ((SlowCase & 8) != 0)
      v24 = (SlowCase - 112) | 1;
    else
      v24 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v24 & 1) != 0)
      v25 = v24 + 47;
    else
      v25 = *(_QWORD *)v24 + 32;
    Allocator = *(_QWORD **)(v25 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v25 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v22;
    v27 = *v23;
    *v23 = (uint64_t)Allocator;
    if (!v27)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v27 + 8) = 3;
    return SlowCase;
  }
  v34 = v3;
  if ((SlowCase & 8) != 0)
    v29 = (SlowCase - 112) | 1;
  else
    v29 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v29 & 1) != 0)
    v30 = v29 + 47;
  else
    v30 = *(_QWORD *)v29 + 32;
  v31 = *(_QWORD **)(v30 + 16);
  if (!v31)
    v31 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v30 + 16) = *v31;
  *v31 = SlowCase;
  v31[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v31[2] = v22;
  v33 = v31;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v22 + 32), &v34, (uint64_t *)&v33);
  v27 = (uint64_t)v33;
  if (v33)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGTextPathElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGTitleElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGTSpanElement>(uint64_t a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGTSpanElement::s_info + ~((_QWORD)&WebCore::JSSVGTSpanElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTSpanElement::s_info + ~((_QWORD)&WebCore::JSSVGTSpanElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGTSpanElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGTSpanElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)(a1 + 40136);
  Prototype = WebCore::JSSVGTSpanElement::createPrototype((WebCore::JSSVGTSpanElement *)a1, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *(_QWORD *)(a1 + 40144))
  {
    SlowCase = *(_QWORD *)(a1 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 + 40160);
    *(_QWORD *)(a1 + 40144) = SlowCase + HIDWORD(v19);
    *(_QWORD *)(a1 + 40152) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v16, &v20, &WebCore::JSSVGTSpanElement::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGTSpanElement::s_info);
}

uint64_t WebCore::createWrapper<WebCore::SVGUseElement,WebCore::SVGElement>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v5 = v2;
  v3 = WebCore::createWrapper<WebCore::SVGUseElement,WebCore::SVGUseElement>(a1, &v5);
  WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v5);
  return v3;
}

uint64_t WebCore::createWrapper<WebCore::SVGUseElement,WebCore::SVGUseElement>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSSVGUseElement>(*(WebCore::JSSVGUseElement **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSSVGUseElement::create(v5, (JSC::VM *)a1, (uint64_t)a2);
  WebCore::cacheWrapper<WebCore::SVGUseElement,WebCore::JSSVGUseElement>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::JSSVGUseElement::create(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  WebCore::JSSVGUseElement *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSSVGUseElement *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSSVGUseElement>(v6, a2);
  result = WebCore::JSSVGUseElement::JSSVGUseElement(v7, a1, a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGUseElement>(WebCore::JSSVGUseElement *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGUseElement::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGUseElement::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGUseElement::s_info);
  }
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::SVGUseElement,WebCore::JSSVGUseElement>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSSVGUseElement>(WebCore::JSSVGUseElement *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSSVGUseElement::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 48;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGViewElement,WebCore::SVGElement>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSVGElement *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSSVGViewElement *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGViewElement::s_info + ~((_QWORD)&WebCore::JSSVGViewElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGViewElement::s_info + ~((_QWORD)&WebCore::JSSVGViewElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGViewElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGViewElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSVGElement *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(v14, a1, a3);
  Structure = WebCore::JSSVGViewElementPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGViewElementPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSSVGViewElement::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGViewElement::s_info);
LABEL_8:
  v20 = (WebCore::JSSVGViewElement *)*((_QWORD *)a1 + 7);
  v21 = (_QWORD *)WebCore::JSSVGViewElement::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v33);
    v21[5] = SlowCase + (int)v33;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v24 = (uint64_t *)(v4 + 8);
  else
    v24 = 0;
  if (!*(_DWORD *)(v23 + 48))
  {
    if ((SlowCase & 8) != 0)
      v25 = (SlowCase - 112) | 1;
    else
      v25 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    Allocator = *(_QWORD **)(v26 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v23;
    v28 = *v24;
    *v24 = (uint64_t)Allocator;
    if (!v28)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v28 + 8) = 3;
    return SlowCase;
  }
  v35 = v4;
  if ((SlowCase & 8) != 0)
    v30 = (SlowCase - 112) | 1;
  else
    v30 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v30 & 1) != 0)
    v31 = v30 + 47;
  else
    v31 = *(_QWORD *)v30 + 32;
  v32 = *(_QWORD **)(v31 + 16);
  if (!v32)
    v32 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v31 + 16) = *v32;
  *v32 = SlowCase;
  v32[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v32[2] = v23;
  v34 = v32;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v35, (uint64_t *)&v34);
  v28 = (uint64_t)v34;
  if (v34)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSSVGViewElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::jsSVGFEDropShadowElementPrototypeFunction_setStdDeviation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::SVGElement *v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  JSValue v25;
  double v26;
  double v27;
  JSC::VM *v28;
  JSC::VM *v29;
  unint64_t v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "SVGFEDropShadowElement", "setStdDeviation");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGFEDropShadowElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGFEDropShadowElement::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "SVGFEDropShadowElement", "setStdDeviation");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v25);
  }
  v12 = *(WebCore::SVGElement **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v29 = v4;
  v30 = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v14 = v26;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v16;
  v30 = v15;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v17 = v27;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < -3.40282347e38 || v17 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = v14;
  v20 = *((_QWORD *)v12 + 31);
  v21 = *(_DWORD *)(v20 + 8);
  *(_DWORD *)(v20 + 8) = v21 + 1;
  *(float *)(*(_QWORD *)(v20 + 40) + 28) = v18;
  if (v21)
    *(_DWORD *)(v20 + 8) = v21;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v22 = *((_QWORD *)v12 + 32);
  v23 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v22 + 8) = v23 + 1;
  v19 = v17;
  *(float *)(*(_QWORD *)(v22 + 40) + 28) = v19;
  if (v23)
    *(_DWORD *)(v22 + 8) = v23;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  WebCore::SVGElement::updateSVGRendererForElementChange(v12);
  return 10;
}

uint64_t WebCore::jsSVGFEGaussianBlurElementPrototypeFunction_setStdDeviation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::SVGElement *v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  JSValue v25;
  double v26;
  double v27;
  JSC::VM *v28;
  JSC::VM *v29;
  unint64_t v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "SVGFEGaussianBlurElement", "setStdDeviation");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGFEGaussianBlurElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGFEGaussianBlurElement::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "SVGFEGaussianBlurElement", "setStdDeviation");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v25);
  }
  v12 = *(WebCore::SVGElement **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v29 = v4;
  v30 = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v14 = v26;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v16;
  v30 = v15;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v17 = v27;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < -3.40282347e38 || v17 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = v14;
  v20 = *((_QWORD *)v12 + 29);
  v21 = *(_DWORD *)(v20 + 8);
  *(_DWORD *)(v20 + 8) = v21 + 1;
  *(float *)(*(_QWORD *)(v20 + 40) + 28) = v18;
  if (v21)
    *(_DWORD *)(v20 + 8) = v21;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v22 = *((_QWORD *)v12 + 30);
  v23 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v22 + 8) = v23 + 1;
  v19 = v17;
  *(float *)(*(_QWORD *)(v22 + 40) + 28) = v19;
  if (v23)
    *(_DWORD *)(v22 + 8) = v23;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  WebCore::SVGElement::updateSVGRendererForElementChange(v12);
  return 10;
}

uint64_t WebCore::JSSQLError::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 36);
    v4 = *(unsigned int **)(this + 24);
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      do
      {
        v6 = v4[2];
        if ((_DWORD)v6 != -1)
          ((uint64_t (**)(char *, unsigned int *))off_1E32E8850)[v6](&v13, v4);
        v4[2] = -1;
        v4 += 4;
        v5 -= 16;
      }
      while (v5);
      v4 = *(unsigned int **)(v2 + 24);
    }
    if (v4)
    {
      *(_QWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      WTF::fastFree((WTF *)v4, a2);
    }
    v7 = *(unsigned int *)(v2 + 20);
    if ((_DWORD)v7)
    {
      v9 = *(WTF::StringImpl ***)(v2 + 8);
      v10 = 8 * v7;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            v12 = v10;
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
            v10 = v12;
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v8 = *(WTF **)(v2 + 8);
    if (v8)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v8, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::JSSQLResultSet::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJxN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJxS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSQLResultSetRowList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSQLTransaction::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAngle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimatedAngle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::SVGProperty::attach(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 24) = a3;
  return result;
}

float *WebCore::SVGAngle::valueAsString@<X0>(WebCore::SVGAngle *this@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::SVGAngleValue::valueAsString((float *)this + 7, a2);
}

void WebCore::SVGProperty::valueAsString(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::JSSVGAnimatedBoolean::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimatedEnumeration::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimatedInteger::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimatedLength::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

size_t WebCore::SVGLength::valueAsString@<X0>(WebCore::SVGLength *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  size_t result;
  _QWORD v6[2];

  switch(*((_BYTE *)this + 32))
  {
    case 2:
      v3 = "%";
      v4 = 2;
      break;
    case 3:
      v3 = "em";
      goto LABEL_11;
    case 4:
      v3 = "ex";
      goto LABEL_11;
    case 5:
      v3 = "px";
      goto LABEL_11;
    case 6:
      v3 = "cm";
      goto LABEL_11;
    case 7:
      v3 = "mm";
      goto LABEL_11;
    case 8:
      v3 = "in";
      goto LABEL_11;
    case 9:
      v3 = "pt";
      goto LABEL_11;
    case 0xA:
      v3 = "pc";
LABEL_11:
      v4 = 3;
      break;
    default:
      v3 = &str_3_82;
      v4 = 1;
      break;
  }
  v6[0] = v3;
  v6[1] = v4;
  result = WTF::tryMakeString<float,WTF::ASCIILiteral>((uint64_t)v6, a2);
  if (!*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x194EFC680);
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedLengthList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGLength>::SVGValuePropertyList(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v15;
  _DWORD *v16;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 25) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E32EE3F8;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE470;
  v7 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a2 + 32);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      v11 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)(v11 + 16) = 0;
      *(_WORD *)(v11 + 24) = 0;
      *(_QWORD *)v11 = off_1E32EE180;
      *(_QWORD *)(v11 + 28) = *(_QWORD *)(v10 + 28);
      *(_QWORD *)v11 = off_1E32EE148;
      v15 = (_DWORD *)v11;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)a1 + 80))(&v16, a1, &v15);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[2];
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGLength>::~SVGValuePropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = &off_1E32EE4A8;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE520;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE558;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE558;
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGLength>::~SVGValuePropertyList(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)this = &off_1E32EE4A8;
  *((_QWORD *)this + 6) = &unk_1E32EE520;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E32EE558;
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E32EE558;
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::detachItems(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 44);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::at@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 44) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a2);
    ++*(_DWORD *)(v3 + 8);
    *a3 = v3;
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = a3;
  v6 = *a3;
  if (*(_QWORD *)(*a3 + 16))
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_WORD *)(v7 + 24) = 0;
    *(_QWORD *)v7 = off_1E32EE180;
    *(_QWORD *)(v7 + 28) = *(_QWORD *)(v6 + 28);
    *(_QWORD *)v7 = off_1E32EE148;
    v8 = (_DWORD *)*v3;
    *v3 = v7;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v7 = *v3;
      }
      else
      {
        --v8[2];
      }
    }
  }
  else
  {
    v7 = *a3;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v9 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 40))
  {
    v3 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v9 + 1, (unint64_t)v3);
    LODWORD(v9) = *(_DWORD *)(a1 + 44);
  }
  v10 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  memmove(v10 + 1, v10, 8 * v9 - 8 * a2);
  v11 = *v3;
  *v3 = 0;
  *v10 = v11;
  ++*(_DWORD *)(a1 + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::replace(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if (*(_DWORD *)(result + 44) > a2)
  {
    v5 = (unsigned __int8 *)result;
    v6 = a2;
    v7 = *(_QWORD *)(result + 32);
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 8 * a2) + 24))(*(_QWORD *)(v7 + 8 * a2));
    v8 = *a3;
    if (*(_QWORD *)(*a3 + 16))
    {
      v9 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v9 + 8) = 1;
      *(_QWORD *)(v9 + 16) = 0;
      *(_WORD *)(v9 + 24) = 0;
      *(_QWORD *)v9 = off_1E32EE180;
      *(_QWORD *)(v9 + 28) = *(_QWORD *)(v8 + 28);
      *(_QWORD *)v9 = off_1E32EE148;
      v10 = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v9;
      if (!v10)
        goto LABEL_8;
    }
    else
    {
      *a3 = 0;
      v10 = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v8;
      if (!v10)
      {
LABEL_8:
        (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(v7 + 8 * v6) + 16))(*(_QWORD *)(v7 + 8 * v6), v5 + 48, v5[24]);
        return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
      }
    }
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

void *WebCore::SVGPropertyList<WebCore::SVGLength>::remove@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _DWORD *v7;
  void *result;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 48))(a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  v7 = (_DWORD *)*v6;
  *v6 = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  result = memmove(v6, v6 + 1, *(_QWORD *)(a1 + 32) + 8 * *(unsigned int *)(a1 + 44) - (_QWORD)(v6 + 1));
  --*(_DWORD *)(a1 + 44);
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::append(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  _DWORD *v11;

  v2 = a2;
  v4 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    v10 = *a2;
    v4 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 24) = 0;
    *(_QWORD *)v4 = off_1E32EE180;
    *(_QWORD *)(v4 + 28) = *(_QWORD *)(v10 + 28);
    *(_QWORD *)v4 = off_1E32EE148;
    v11 = (_DWORD *)*v2;
    *v2 = v4;
    if (v11)
    {
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        v4 = *v2;
      }
      else
      {
        --v11[2];
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v5 = (_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 40))
  {
    v2 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)v2);
    v6 = *(unsigned int *)(a1 + 44);
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v6);
  }
  else
  {
    v7 = (uint64_t *)(*v5 + 8 * v6);
  }
  v8 = *v2;
  *v2 = 0;
  *v7 = v8;
  *(_DWORD *)(a1 + 44) = v6 + 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::commitPropertyChange(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1);
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGLength>::~SVGValuePropertyList(_DWORD *result, void *a2)
{
  _DWORD *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  *((_QWORD *)result - 6) = &off_1E32EE4A8;
  *(_QWORD *)result = &unk_1E32EE520;
  v3 = (WTF *)*((_QWORD *)result - 2);
  v4 = *(result - 1);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(v2 - 1);
    *((_QWORD *)v2 - 6) = off_1E32EE558;
    v3 = (WTF *)*((_QWORD *)v2 - 2);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        result = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)v2 - 2);
    }
  }
  else
  {
    *((_QWORD *)result - 6) = off_1E32EE558;
  }
  if (v3)
  {
    *((_QWORD *)v2 - 2) = 0;
    *(v2 - 2) = 0;
    return (_DWORD *)WTF::fastFree(v3, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGLength>::~SVGValuePropertyList(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *(a1 - 6) = &off_1E32EE4A8;
  v3 = (WTF *)(a1 - 6);
  *a1 = &unk_1E32EE520;
  v4 = (WTF *)*(a1 - 2);
  v5 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(_DWORD **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)a1 - 1);
    *(a1 - 6) = off_1E32EE558;
    v4 = (WTF *)*(a1 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v4 = (WTF *)((char *)v4 + 8);
        v9 -= 8;
      }
      while (v9);
      v4 = (WTF *)*(a1 - 2);
    }
  }
  else
  {
    *(_QWORD *)v3 = off_1E32EE558;
  }
  if (v4)
  {
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(v3, a2);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGLength>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t WebCore::SVGPropertyOwner::attributeContextElement(WebCore::SVGPropertyOwner *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(WebCore::SVGPropertyOwner *))(*(_QWORD *)this + 16))(this);
  if (result)
  {
    v3 = (*(uint64_t (**)(WebCore::SVGPropertyOwner *))(*(_QWORD *)this + 16))(this);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGLength>::commitPropertyChange(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = a1 - 48;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 88))(a1 - 48);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v1);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::~SVGPropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = &off_1E32EE4A8;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE520;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE558;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE558;
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGLength>::~SVGPropertyList(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)this = &off_1E32EE4A8;
  *((_QWORD *)this + 6) = &unk_1E32EE520;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E32EE558;
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E32EE558;
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

_DWORD *`non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGLength>::~SVGPropertyList(_DWORD *result, void *a2)
{
  _DWORD *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  *((_QWORD *)result - 6) = &off_1E32EE4A8;
  *(_QWORD *)result = &unk_1E32EE520;
  v3 = (WTF *)*((_QWORD *)result - 2);
  v4 = *(result - 1);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(v2 - 1);
    *((_QWORD *)v2 - 6) = off_1E32EE558;
    v3 = (WTF *)*((_QWORD *)v2 - 2);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        result = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)v2 - 2);
    }
  }
  else
  {
    *((_QWORD *)result - 6) = off_1E32EE558;
  }
  if (v3)
  {
    *((_QWORD *)v2 - 2) = 0;
    *(v2 - 2) = 0;
    return (_DWORD *)WTF::fastFree(v3, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGLength>::~SVGPropertyList(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *(a1 - 6) = &off_1E32EE4A8;
  v3 = (WTF *)(a1 - 6);
  *a1 = &unk_1E32EE520;
  v4 = (WTF *)*(a1 - 2);
  v5 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(_DWORD **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)a1 - 1);
    *(a1 - 6) = off_1E32EE558;
    v4 = (WTF *)*(a1 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v4 = (WTF *)((char *)v4 + 8);
        v9 -= 8;
      }
      while (v9);
      v4 = (WTF *)*(a1 - 2);
    }
  }
  else
  {
    *(_QWORD *)v3 = off_1E32EE558;
  }
  if (v4)
  {
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(v3, a2);
}

uint64_t WebCore::JSSVGAnimatedNumber::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGAnimatedNumberList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGNumber>::SVGValuePropertyList(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v15;
  _DWORD *v16;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 25) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E32EE5C0;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE638;
  v7 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a2 + 32);
    v9 = 8 * v7;
    do
    {
      v10 = *(_DWORD *)(*(_QWORD *)v8 + 28);
      v11 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)(v11 + 16) = 0;
      *(_WORD *)(v11 + 24) = 0;
      *(_DWORD *)(v11 + 28) = v10;
      *(_QWORD *)v11 = off_1E32EE788;
      v15 = (_DWORD *)v11;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)a1 + 80))(&v16, a1, &v15);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[2];
      }
      v8 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGNumber>::~SVGValuePropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E32EE670;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE6E8;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE720;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v10)
        {
          if (v10[2] == 1)
          {
            v11 = v9;
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            v9 = v11;
          }
          else
          {
            --v10[2];
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v9 -= 8;
      }
      while (v9);
      v3 = *(WTF **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE720;
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGNumber>::~SVGValuePropertyList(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E32EE670;
  *((_QWORD *)this + 6) = &unk_1E32EE6E8;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E32EE720;
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v10)
        {
          if (v10[2] == 1)
          {
            v11 = v9;
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            v9 = v11;
          }
          else
          {
            --v10[2];
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v9 -= 8;
      }
      while (v9);
      v3 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E32EE720;
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::detachItems(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 44);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::at@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 44) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a2);
    ++*(_DWORD *)(v3 + 8);
    *a3 = v3;
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = a3;
  v6 = *a3;
  if (*(_QWORD *)(*a3 + 16))
  {
    v7 = *(_DWORD *)(v6 + 28);
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_WORD *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 28) = v7;
    *(_QWORD *)v6 = off_1E32EE788;
    v8 = (_DWORD *)*v3;
    *v3 = v6;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v6 = *v3;
      }
      else
      {
        --v8[2];
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v9 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 40))
  {
    v3 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v9 + 1, (unint64_t)v3);
    LODWORD(v9) = *(_DWORD *)(a1 + 44);
  }
  v10 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  memmove(v10 + 1, v10, 8 * v9 - 8 * a2);
  v11 = *v3;
  *v3 = 0;
  *v10 = v11;
  ++*(_DWORD *)(a1 + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::replace(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;

  if (*(_DWORD *)(result + 44) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = (unsigned __int8 *)result;
    v6 = a2;
    v7 = *(_QWORD *)(result + 32);
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 8 * a2) + 24))(*(_QWORD *)(v7 + 8 * a2));
    v8 = *a3;
    if (*(_QWORD *)(*a3 + 16))
    {
      v9 = *(_DWORD *)(v8 + 28);
      v8 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v8 + 8) = 1;
      *(_QWORD *)(v8 + 16) = 0;
      *(_WORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 28) = v9;
      *(_QWORD *)v8 = off_1E32EE788;
    }
    else
    {
      *a3 = 0;
    }
    v10 = *(_DWORD **)(v7 + 8 * v6);
    *(_QWORD *)(v7 + 8 * v6) = v8;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
    (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(v7 + 8 * v6) + 16))(*(_QWORD *)(v7 + 8 * v6), v5 + 48, v5[24]);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
  }
  return result;
}

void *WebCore::SVGPropertyList<WebCore::SVGNumber>::remove@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _DWORD *v7;
  void *result;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 48))(a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  v7 = (_DWORD *)*v6;
  *v6 = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  result = memmove(v6, v6 + 1, *(_QWORD *)(a1 + 32) + 8 * *(unsigned int *)(a1 + 44) - (_QWORD)(v6 + 1));
  --*(_DWORD *)(a1 + 44);
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _DWORD *v10;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 16))
  {
    v9 = *(_DWORD *)(v4 + 28);
    v4 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 28) = v9;
    *(_QWORD *)v4 = off_1E32EE788;
    v10 = *(_DWORD **)a2;
    *(_QWORD *)a2 = v4;
    if (v10)
    {
      if (v10[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        v4 = *(_QWORD *)a2;
      }
      else
      {
        --v10[2];
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v5 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 40))
  {
    WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>(a1 + 32, a2);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v6 + 8 * v5) = v7;
    *(_DWORD *)(a1 + 44) = v5 + 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::commitPropertyChange(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1);
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGNumber>::~SVGValuePropertyList(_QWORD *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  *(result - 6) = &off_1E32EE670;
  *result = &unk_1E32EE6E8;
  v2 = (WTF *)*(result - 2);
  v3 = *((unsigned int *)result - 1);
  if ((_DWORD)v3)
  {
    v10 = result;
    v4 = 8 * v3;
    do
    {
      v5 = *(_DWORD **)v2;
      v2 = (WTF *)((char *)v2 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 24))(v5);
      v4 -= 8;
    }
    while (v4);
    v6 = *((unsigned int *)v10 - 1);
    *(v10 - 6) = off_1E32EE720;
    v2 = (WTF *)*(v10 - 2);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      do
      {
        v8 = *(_DWORD **)v2;
        *(_QWORD *)v2 = 0;
        if (v8)
        {
          if (v8[2] == 1)
          {
            v9 = v7;
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            v7 = v9;
          }
          else
          {
            --v8[2];
          }
        }
        v2 = (WTF *)((char *)v2 + 8);
        v7 -= 8;
      }
      while (v7);
      result = v10;
      v2 = (WTF *)*(v10 - 2);
    }
    else
    {
      result = v10;
    }
  }
  else
  {
    *(result - 6) = off_1E32EE720;
  }
  if (v2)
  {
    *(result - 2) = 0;
    *((_DWORD *)result - 2) = 0;
    return (_QWORD *)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGNumber>::~SVGValuePropertyList(_QWORD *a1, void *a2)
{
  WTF *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  *(a1 - 6) = &off_1E32EE670;
  v2 = (WTF *)(a1 - 6);
  *a1 = &unk_1E32EE6E8;
  v3 = (WTF *)*(a1 - 2);
  v4 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v4)
  {
    v12 = a1;
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)v12 - 1);
    *(v12 - 6) = off_1E32EE720;
    v3 = (WTF *)*(v12 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v10)
        {
          if (v10[2] == 1)
          {
            v11 = v9;
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            v9 = v11;
          }
          else
          {
            --v10[2];
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v9 -= 8;
      }
      while (v9);
      a1 = v12;
      v3 = (WTF *)*(v12 - 2);
    }
    else
    {
      a1 = v12;
    }
  }
  else
  {
    *(_QWORD *)v2 = off_1E32EE720;
  }
  if (v3)
  {
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(v2, a2);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGNumber>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGNumber>::commitPropertyChange(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = a1 - 48;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 88))(a1 - 48);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v1);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::~SVGPropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E32EE670;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE6E8;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE720;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v10)
        {
          if (v10[2] == 1)
          {
            v11 = v9;
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            v9 = v11;
          }
          else
          {
            --v10[2];
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v9 -= 8;
      }
      while (v9);
      v3 = *(WTF **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE720;
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGNumber>::~SVGPropertyList(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E32EE670;
  *((_QWORD *)this + 6) = &unk_1E32EE6E8;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E32EE720;
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v10)
        {
          if (v10[2] == 1)
          {
            v11 = v9;
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            v9 = v11;
          }
          else
          {
            --v10[2];
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v9 -= 8;
      }
      while (v9);
      v3 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E32EE720;
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

_QWORD *`non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGNumber>::~SVGPropertyList(_QWORD *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  *(result - 6) = &off_1E32EE670;
  *result = &unk_1E32EE6E8;
  v2 = (WTF *)*(result - 2);
  v3 = *((unsigned int *)result - 1);
  if ((_DWORD)v3)
  {
    v10 = result;
    v4 = 8 * v3;
    do
    {
      v5 = *(_DWORD **)v2;
      v2 = (WTF *)((char *)v2 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 24))(v5);
      v4 -= 8;
    }
    while (v4);
    v6 = *((unsigned int *)v10 - 1);
    *(v10 - 6) = off_1E32EE720;
    v2 = (WTF *)*(v10 - 2);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      do
      {
        v8 = *(_DWORD **)v2;
        *(_QWORD *)v2 = 0;
        if (v8)
        {
          if (v8[2] == 1)
          {
            v9 = v7;
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            v7 = v9;
          }
          else
          {
            --v8[2];
          }
        }
        v2 = (WTF *)((char *)v2 + 8);
        v7 -= 8;
      }
      while (v7);
      result = v10;
      v2 = (WTF *)*(v10 - 2);
    }
    else
    {
      result = v10;
    }
  }
  else
  {
    *(result - 6) = off_1E32EE720;
  }
  if (v2)
  {
    *(result - 2) = 0;
    *((_DWORD *)result - 2) = 0;
    return (_QWORD *)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGNumber>::~SVGPropertyList(_QWORD *a1, void *a2)
{
  WTF *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  *(a1 - 6) = &off_1E32EE670;
  v2 = (WTF *)(a1 - 6);
  *a1 = &unk_1E32EE6E8;
  v3 = (WTF *)*(a1 - 2);
  v4 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v4)
  {
    v12 = a1;
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)v12 - 1);
    *(v12 - 6) = off_1E32EE720;
    v3 = (WTF *)*(v12 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v10)
        {
          if (v10[2] == 1)
          {
            v11 = v9;
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            v9 = v11;
          }
          else
          {
            --v10[2];
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v9 -= 8;
      }
      while (v9);
      a1 = v12;
      v3 = (WTF *)*(v12 - 2);
    }
    else
    {
      a1 = v12;
    }
  }
  else
  {
    *(_QWORD *)v2 = off_1E32EE720;
  }
  if (v3)
  {
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(v2, a2);
}

uint64_t WebCore::SVGNumber::valueAsString(WebCore::SVGNumber *this)
{
  return WTF::String::number(this, *((float *)this + 7));
}

uint64_t WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WebCore::JSSVGAnimatedPreserveAspectRatio::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::SVGPreserveAspectRatio::valueAsString@<X0>(WebCore::SVGPreserveAspectRatio *this@<X0>, const char **a2@<X8>)
{
  return WebCore::SVGPreserveAspectRatioValue::valueAsString((WebCore::SVGPreserveAspectRatio *)((char *)this + 26), a2);
}

uint64_t WebCore::JSSVGAnimatedRect::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

size_t WebCore::SVGRect::valueAsString@<X0>(WebCore::SVGRect *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;
  size_t result;
  char v6;
  int v7;
  char v8;
  int v9;
  char v10;
  int v11;

  v3 = *((_DWORD *)this + 8);
  v4 = *((_DWORD *)this + 9);
  v11 = *((_DWORD *)this + 7);
  v10 = 32;
  v9 = v3;
  v8 = 32;
  v7 = v4;
  v6 = 32;
  result = WTF::tryMakeString<float,char,float,char,float,char,float>(&v10, &v8, &v6, a2);
  if (!*a2)
    __break(0xC471u);
  return result;
}

size_t WTF::tryMakeString<float,char,float,char,float,char,float>@<X0>(char *a1@<X1>, char *a2@<X3>, char *a3@<X5>, _QWORD *a4@<X8>)
{
  char v8;
  char v9;
  char v10;
  size_t result;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  char v19;
  char v20[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char __s[16];
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  __int128 v52[8];
  __int128 v53[8];
  __int128 v54[8];
  int8x16_t v55[8];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  v51.i32[3] = strlen(__s);
  v8 = *a1;
  WTF::numberToString();
  HIDWORD(v43) = strlen(v36);
  v9 = *a2;
  WTF::numberToString();
  HIDWORD(v35) = strlen(v28);
  v10 = *a3;
  WTF::numberToString();
  result = strlen(v20);
  HIDWORD(v27) = result;
  if ((result & 0x80000000) != 0)
    goto LABEL_19;
  v12 = result + 1;
  if (__OFADD__((_DWORD)result, 1))
    goto LABEL_19;
  if ((HIDWORD(v35) & 0x80000000) != 0)
    goto LABEL_19;
  v13 = HIDWORD(v35) + v12;
  if (__OFADD__(HIDWORD(v35), v12))
    goto LABEL_19;
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  v16 = v14;
  if ((HIDWORD(v43) & 0x80000000) != 0
    || v16
    || (v14 = __OFADD__(HIDWORD(v43), v15), v17 = HIDWORD(v43) + v15, v14)
    || ((v14 = __OFADD__(v17, 1), v18 = v17 + 1, !v14) ? (v19 = 0) : (v19 = 1),
        v51.i32[3] < 0 || (v19 & 1) != 0 || (result = (v51.i32[3] + v18), __OFADD__(v51.i32[3], v18))))
  {
LABEL_19:
    *a4 = 0;
  }
  else
  {
    v55[4] = v48;
    v55[5] = v49;
    v55[6] = v50;
    v55[7] = v51;
    v55[0] = *(int8x16_t *)__s;
    v55[1] = v45;
    v55[2] = v46;
    v55[3] = v47;
    v54[2] = v38;
    v54[3] = v39;
    v54[0] = *(_OWORD *)v36;
    v54[1] = v37;
    v54[6] = v42;
    v54[7] = v43;
    v54[4] = v40;
    v54[5] = v41;
    v53[2] = v30;
    v53[3] = v31;
    v53[0] = *(_OWORD *)v28;
    v53[1] = v29;
    v53[6] = v34;
    v53[7] = v35;
    v53[4] = v32;
    v53[5] = v33;
    v52[2] = v22;
    v52[3] = v23;
    v52[0] = *(_OWORD *)v20;
    v52[1] = v21;
    v52[6] = v26;
    v52[7] = v27;
    v52[4] = v24;
    v52[5] = v25;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>>(result, 1, v55, v8, v54, v9, v53, v10, a4, v52);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, char a4@<W3>, __int128 *a5@<X4>, char a6@<W5>, __int128 *a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, __int128 *a10)
{
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  _BYTE *v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v72[8];
  __int128 v73[8];
  _OWORD v74[8];
  int8x16_t v75[8];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _OWORD __src[7];
  size_t __n[2];
  _OWORD v102[7];
  size_t v103[2];
  _OWORD v104[7];
  size_t v105[2];
  _OWORD v106[7];
  __int128 v107;
  uint64_t v108;

  v16 = result;
  v17 = a9;
  v108 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = *(_QWORD *)&v106[0];
        if (*(_QWORD *)&v106[0])
        {
          v19 = (_BYTE *)(*(_QWORD *)&v106[0] + 20);
          **(_DWORD **)&v106[0] = 2;
          *(_DWORD *)(v18 + 4) = v16;
          *(_QWORD *)(v18 + 8) = v18 + 20;
          *(_DWORD *)(v18 + 16) = 4;
          v20 = a3[5];
          __src[4] = a3[4];
          __src[5] = v20;
          v21 = a3[7];
          __src[6] = a3[6];
          *(int8x16_t *)__n = v21;
          v22 = a3[1];
          __src[0] = *a3;
          __src[1] = v22;
          v23 = a3[3];
          __src[2] = a3[2];
          __src[3] = v23;
          v24 = *a5;
          v25 = a5[1];
          v26 = a5[3];
          v94 = a5[2];
          v95 = v26;
          v92 = v24;
          v93 = v25;
          v27 = a5[4];
          v28 = a5[5];
          v29 = a5[7];
          v98 = a5[6];
          v99 = v29;
          v96 = v27;
          v97 = v28;
          v30 = *a7;
          v31 = a7[1];
          v32 = a7[3];
          v86 = a7[2];
          v87 = v32;
          v84 = v30;
          v85 = v31;
          v33 = a7[4];
          v34 = a7[5];
          v35 = a7[7];
          v90 = a7[6];
          v91 = v35;
          v88 = v33;
          v89 = v34;
          v36 = *a10;
          v37 = a10[1];
          v38 = a10[3];
          v78 = a10[2];
          v79 = v38;
          v76 = v36;
          v77 = v37;
          v39 = a10[4];
          v40 = a10[5];
          v41 = a10[7];
          v82 = a10[6];
          v83 = v41;
          v80 = v39;
          v81 = v40;
          v42 = HIDWORD(__n[1]);
          if (HIDWORD(__n[1]))
          {
            if (HIDWORD(__n[1]) == 1)
              *v19 = __src[0];
            else
              memcpy((void *)(v18 + 20), __src, HIDWORD(__n[1]));
          }
          v43 = &v19[v42];
          v102[4] = v96;
          v102[5] = v97;
          *(_OWORD *)v103 = v99;
          v102[6] = v98;
          v102[0] = v92;
          v102[1] = v93;
          v102[2] = v94;
          v102[3] = v95;
          *v43 = a4;
          v44 = v43 + 1;
          v45 = HIDWORD(v103[1]);
          v17 = a9;
          if (HIDWORD(v103[1]))
          {
            if (HIDWORD(v103[1]) == 1)
              *v44 = v102[0];
            else
              memcpy(v44, v102, HIDWORD(v103[1]));
          }
          v46 = &v44[v45];
          v104[4] = v88;
          v104[5] = v89;
          *(_OWORD *)v105 = v91;
          v104[6] = v90;
          v104[0] = v84;
          v104[1] = v85;
          v104[2] = v86;
          v104[3] = v87;
          *v46 = a6;
          v47 = v46 + 1;
          v48 = HIDWORD(v105[1]);
          if (HIDWORD(v105[1]))
          {
            if (HIDWORD(v105[1]) == 1)
              *v47 = v104[0];
            else
              memcpy(v47, v104, HIDWORD(v105[1]));
          }
          v106[4] = v80;
          v106[5] = v81;
          v106[6] = v82;
          v107 = v83;
          v106[0] = v76;
          v106[1] = v77;
          v106[2] = v78;
          v106[3] = v79;
          v47[v48] = a8;
          result = (uint64_t)&v47[v48 + 1];
          if (HIDWORD(v107))
          {
            if (HIDWORD(v107) == 1)
              *(_BYTE *)result = v106[0];
            else
              result = (uint64_t)memcpy((void *)result, v106, HIDWORD(v107));
          }
        }
        goto LABEL_21;
      }
LABEL_27:
      v18 = 0;
      goto LABEL_21;
    }
LABEL_26:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_21;
  }
  if (!(_DWORD)result)
    goto LABEL_26;
  if (result > 0x7FFFFFEF)
    goto LABEL_27;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = *(_QWORD *)&v106[0];
  if (*(_QWORD *)&v106[0])
  {
    **(_DWORD **)&v106[0] = 2;
    *(_DWORD *)(v18 + 4) = v16;
    *(_QWORD *)(v18 + 8) = v18 + 20;
    *(_DWORD *)(v18 + 16) = 0;
    v49 = a3[3];
    v75[2] = a3[2];
    v75[3] = v49;
    v50 = a3[5];
    v75[4] = a3[4];
    v75[5] = v50;
    v51 = a3[7];
    v75[6] = a3[6];
    v75[7] = v51;
    v52 = a3[1];
    v75[0] = *a3;
    v75[1] = v52;
    v53 = *a5;
    v54 = a5[1];
    v55 = a5[3];
    v74[2] = a5[2];
    v74[3] = v55;
    v74[0] = v53;
    v74[1] = v54;
    v56 = a5[4];
    v57 = a5[5];
    v58 = a5[7];
    v74[6] = a5[6];
    v74[7] = v58;
    v74[4] = v56;
    v74[5] = v57;
    v59 = *a7;
    v60 = a7[1];
    v61 = a7[3];
    v73[2] = a7[2];
    v73[3] = v61;
    v73[0] = v59;
    v73[1] = v60;
    v62 = a7[4];
    v63 = a7[5];
    v64 = a7[7];
    v73[6] = a7[6];
    v73[7] = v64;
    v73[4] = v62;
    v73[5] = v63;
    v65 = *a10;
    v66 = a10[1];
    v67 = a10[3];
    v72[2] = a10[2];
    v72[3] = v67;
    v72[0] = v65;
    v72[1] = v66;
    v68 = a10[4];
    v69 = a10[5];
    v70 = a10[7];
    v72[6] = a10[6];
    v72[7] = v70;
    v72[4] = v68;
    v72[5] = v69;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>>((char *)(v18 + 20), v75, a4, v74, a6, v73, a8, v72);
  }
LABEL_21:
  *v17 = v18;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>>(char *result, int8x16_t *a2, char a3, _OWORD *a4, char a5, __int128 *a6, char a7, __int128 *a8)
{
  uint64_t v8;
  char *v9;
  int8x16_t *v10;
  char *v11;
  __int128 v12;
  char *v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  int8x16_t *v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  char *v42;
  char *v43;
  int8x16_t *v44;
  char *v45;
  __int128 v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  char *v54;
  char *v55;
  int8x16_t *v56;
  char *v57;
  __int128 v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int16 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[7];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[7];
  __int128 v93;
  _OWORD v94[7];
  __int128 v95;
  uint64_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;

  v96 = *MEMORY[0x1E0C80C00];
  v8 = a2[7].u32[3];
  v9 = &result[2 * v8];
  v10 = a2;
  v11 = result;
  if (v8 >= 0x40)
  {
    v11 = &result[2 * (v8 & 0xFFFFFFC0)];
    v12 = 0uLL;
    v10 = a2;
    v13 = result;
    do
    {
      v97.val[0] = *v10;
      v14 = v10[1];
      v101.val[0] = v10[2];
      v15 = v10[3];
      v10 += 4;
      v16 = v15;
      v101.val[1] = 0uLL;
      v105.val[0] = v14;
      v97.val[1] = 0uLL;
      v17 = v13;
      vst2q_s8(v17, v97);
      v17 += 32;
      v105.val[1] = 0uLL;
      vst2q_s8(v17, v105);
      v18 = v13 + 64;
      vst2q_s8(v18, v101);
      v19 = v13 + 96;
      vst2q_s8(v19, *(int8x16x2_t *)(&v12 - 1));
      v13 += 128;
    }
    while (v13 != v11);
  }
  while (v11 != v9)
  {
    v20 = v10->u8[0];
    v10 = (int8x16_t *)((char *)v10 + 1);
    *(_WORD *)v11 = v20;
    v11 += 2;
  }
  v21 = &result[2 * a2[7].u32[3]];
  v22 = a4[5];
  v82[4] = a4[4];
  v82[5] = v22;
  v23 = a4[7];
  v82[6] = a4[6];
  v83 = v23;
  v24 = a4[1];
  v82[0] = *a4;
  v82[1] = v24;
  v25 = a4[3];
  v82[2] = a4[2];
  v82[3] = v25;
  v78 = a6[4];
  v79 = a6[5];
  v80 = a6[6];
  v81 = a6[7];
  v74 = *a6;
  v75 = a6[1];
  v76 = a6[2];
  v77 = a6[3];
  v70 = a8[4];
  v71 = a8[5];
  v72 = a8[6];
  v73 = a8[7];
  v26 = *a8;
  v27 = a8[1];
  v28 = a8[2];
  v29 = a8[3];
  *(_WORD *)v21 = a3;
  v30 = v21 + 2;
  v66 = v26;
  v67 = v27;
  v31 = &v30[2 * HIDWORD(v83)];
  v68 = v28;
  v69 = v29;
  if (HIDWORD(v83) >= 0x40)
  {
    v33 = &v30[2 * (HIDWORD(v83) & 0xFFFFFFC0)];
    v32 = (int8x16_t *)v82;
    v34 = 0uLL;
    do
    {
      v98.val[0] = *v32;
      v35 = v32[1];
      v102.val[0] = v32[2];
      v36 = v32[3];
      v32 += 4;
      v37 = v36;
      v102.val[1] = 0uLL;
      v106.val[0] = v35;
      v98.val[1] = 0uLL;
      v38 = v30;
      vst2q_s8(v38, v98);
      v38 += 32;
      v106.val[1] = 0uLL;
      vst2q_s8(v38, v106);
      v39 = v30 + 64;
      vst2q_s8(v39, v102);
      v40 = v30 + 96;
      vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
      v30 += 128;
    }
    while (v30 != v33);
    v30 = v33;
  }
  else
  {
    v32 = (int8x16_t *)v82;
  }
  while (v30 != v31)
  {
    v41 = v32->u8[0];
    v32 = (int8x16_t *)((char *)v32 + 1);
    *(_WORD *)v30 = v41;
    v30 += 2;
  }
  v92[4] = v78;
  v92[5] = v79;
  v92[6] = v80;
  v93 = v81;
  v92[0] = v74;
  v92[1] = v75;
  v92[2] = v76;
  v92[3] = v77;
  v88 = v70;
  v89 = v71;
  v90 = v72;
  v91 = v73;
  v84 = v66;
  v85 = v67;
  *(_WORD *)v31 = a5;
  v42 = v31 + 2;
  v43 = &v42[2 * HIDWORD(v93)];
  v86 = v68;
  v87 = v69;
  if (HIDWORD(v93) >= 0x40)
  {
    v45 = &v42[2 * (HIDWORD(v93) & 0xFFFFFFC0)];
    v44 = (int8x16_t *)v92;
    v46 = 0uLL;
    do
    {
      v99.val[0] = *v44;
      v47 = v44[1];
      v103.val[0] = v44[2];
      v48 = v44[3];
      v44 += 4;
      v49 = v48;
      v103.val[1] = 0uLL;
      v107.val[0] = v47;
      v99.val[1] = 0uLL;
      v50 = v42;
      vst2q_s8(v50, v99);
      v50 += 32;
      v107.val[1] = 0uLL;
      vst2q_s8(v50, v107);
      v51 = v42 + 64;
      vst2q_s8(v51, v103);
      v52 = v42 + 96;
      vst2q_s8(v52, *(int8x16x2_t *)(&v46 - 1));
      v42 += 128;
    }
    while (v42 != v45);
    v42 = v45;
  }
  else
  {
    v44 = (int8x16_t *)v92;
  }
  while (v42 != v43)
  {
    v53 = v44->u8[0];
    v44 = (int8x16_t *)((char *)v44 + 1);
    *(_WORD *)v42 = v53;
    v42 += 2;
  }
  v94[4] = v88;
  v94[5] = v89;
  v94[6] = v90;
  v95 = v91;
  v94[0] = v84;
  v94[1] = v85;
  v94[2] = v86;
  v94[3] = v87;
  *(_WORD *)v43 = a7;
  v54 = v43 + 2;
  v55 = &v54[2 * HIDWORD(v95)];
  if (HIDWORD(v95) >= 0x40)
  {
    v57 = &v54[2 * (HIDWORD(v95) & 0xFFFFFFC0)];
    v56 = (int8x16_t *)v94;
    v58 = 0uLL;
    do
    {
      v100.val[0] = *v56;
      v59 = v56[1];
      v104.val[0] = v56[2];
      v60 = v56[3];
      v56 += 4;
      v61 = v60;
      v104.val[1] = 0uLL;
      v108.val[0] = v59;
      v100.val[1] = 0uLL;
      v62 = v54;
      vst2q_s8(v62, v100);
      v62 += 32;
      v108.val[1] = 0uLL;
      vst2q_s8(v62, v108);
      v63 = v54 + 64;
      vst2q_s8(v63, v104);
      v64 = v54 + 96;
      vst2q_s8(v64, *(int8x16x2_t *)(&v58 - 1));
      v54 += 128;
    }
    while (v54 != v57);
    v54 = v57;
  }
  else
  {
    v56 = (int8x16_t *)v94;
  }
  while (v54 != v55)
  {
    v65 = v56->u8[0];
    v56 = (int8x16_t *)((char *)v56 + 1);
    *(_WORD *)v54 = v65;
    v54 += 2;
  }
  return result;
}

uint64_t WebCore::JSSVGAnimatedString::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringENS9_6RefPtrIN7WebCore16TrustedScriptURLENS9_12RawPtrTraitsISD_EENS9_21DefaultRefDerefTraitsISD_EEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32EDD38[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGAnimatedTransformList>(WebCore::JSSVGAnimatedTransformList *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGAnimatedTransformList::s_info
        + ~((_QWORD)&WebCore::JSSVGAnimatedTransformList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGAnimatedTransformList::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGAnimatedTransformList::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGAnimatedTransformList::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGAnimatedTransformList::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSSVGAnimatedTransformList::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSSVGAnimatedTransformList::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGAnimatedTransformList::s_info);
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGTransform>::SVGValuePropertyList(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v23;
  _DWORD *v24;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 25) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E32EDD78;
  *(_QWORD *)(a1 + 48) = &unk_1E32EDDF0;
  v7 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = *(uint64_t **)(a2 + 32);
    do
    {
      v10 = *v9;
      v11 = WTF::fastMalloc((WTF *)0x48);
      v12 = *(_DWORD *)(v10 + 32);
      v13 = *(_OWORD **)(v10 + 40);
      v14 = *(_DWORD *)(v10 + 48);
      *(_QWORD *)v11 = off_1E32EE228;
      *(_QWORD *)(v11 + 64) = &unk_1E32EE270;
      v15 = *(_QWORD *)(v10 + 52);
      v16 = WTF::fastMalloc((WTF *)0x50);
      *(_DWORD *)(v16 + 8) = 1;
      *(_QWORD *)(v16 + 16) = v11 + 64;
      *(_WORD *)(v16 + 24) = 0;
      *(_QWORD *)v16 = off_1E32EE1F0;
      v17 = v13[2];
      v18 = v13[4];
      *(_OWORD *)(v16 + 48) = v13[3];
      *(_OWORD *)(v16 + 64) = v18;
      *(_OWORD *)(v16 + 32) = v17;
      *(_QWORD *)v16 = off_1E32EE1B8;
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)(v11 + 16) = 0;
      *(_WORD *)(v11 + 24) = 0;
      *(_QWORD *)v11 = &off_1E32EE2A8;
      *(_DWORD *)(v11 + 32) = v12;
      v19 = *(_DWORD *)(v16 + 8);
      *(_DWORD *)(v16 + 8) = v19 + 1;
      *(_QWORD *)(v11 + 40) = v16;
      *(_DWORD *)(v11 + 48) = v14;
      *(_QWORD *)(v11 + 52) = v15;
      if (v19)
        *(_DWORD *)(v16 + 8) = v19;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      *(_QWORD *)v11 = off_1E32EE228;
      *(_QWORD *)(v11 + 64) = &unk_1E32EE270;
      v23 = (_DWORD *)v11;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)a1 + 80))(&v24, a1, &v23);
      v20 = v24;
      v24 = 0;
      if (v20)
      {
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        else
          --v20[2];
      }
      v21 = v23;
      v23 = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      ++v9;
      v8 -= 8;
    }
    while (v8);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGTransform>::~SVGValuePropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E32EE2E0;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE358;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE390;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
      if (v3)
        goto LABEL_14;
      return a1;
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE390;
  }
  if (v3)
  {
LABEL_14:
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E32EE2E0;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE358;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE390;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
      if (v3)
        goto LABEL_14;
      return WTF::fastFree((WTF *)a1, a2);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE390;
  }
  if (v3)
  {
LABEL_14:
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree((WTF *)a1, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::detachItems(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 44);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::at@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 44) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a2);
    ++*(_DWORD *)(v3 + 8);
    *a3 = v3;
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v3 = a3;
  v6 = *a3;
  if (*(_QWORD *)(*a3 + 16))
  {
    v7 = WTF::fastMalloc((WTF *)0x48);
    v8 = *(_DWORD *)(v6 + 32);
    v9 = *(_OWORD **)(v6 + 40);
    v10 = *(_DWORD *)(v6 + 48);
    *(_QWORD *)v7 = off_1E32EE228;
    *(_QWORD *)(v7 + 64) = &unk_1E32EE270;
    v11 = *(_QWORD *)(v6 + 52);
    v12 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)(v12 + 16) = v7 + 64;
    *(_WORD *)(v12 + 24) = 0;
    *(_QWORD *)v12 = off_1E32EE1F0;
    v13 = v9[2];
    v14 = v9[4];
    *(_OWORD *)(v12 + 48) = v9[3];
    *(_OWORD *)(v12 + 64) = v14;
    *(_OWORD *)(v12 + 32) = v13;
    *(_QWORD *)v12 = off_1E32EE1B8;
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_WORD *)(v7 + 24) = 0;
    *(_QWORD *)v7 = &off_1E32EE2A8;
    *(_DWORD *)(v7 + 32) = v8;
    v15 = *(_DWORD *)(v12 + 8);
    *(_DWORD *)(v12 + 8) = v15 + 1;
    *(_QWORD *)(v7 + 40) = v12;
    *(_DWORD *)(v7 + 48) = v10;
    *(_QWORD *)(v7 + 52) = v11;
    if (v15)
      *(_DWORD *)(v12 + 8) = v15;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *(_QWORD *)v7 = off_1E32EE228;
    *(_QWORD *)(v7 + 64) = &unk_1E32EE270;
    v16 = (_DWORD *)*v3;
    *v3 = v7;
    if (v16)
    {
      if (v16[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        v7 = *v3;
      }
      else
      {
        --v16[2];
      }
    }
  }
  else
  {
    v7 = *a3;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v17 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 40))
  {
    v3 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v17 + 1, (unint64_t)v3);
    LODWORD(v17) = *(_DWORD *)(a1 + 44);
  }
  v18 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  memmove(v18 + 1, v18, 8 * v17 - 8 * a2);
  v19 = *v3;
  *v3 = 0;
  *v18 = v19;
  ++*(_DWORD *)(a1 + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::replace(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  _DWORD *v18;

  if (*(_DWORD *)(result + 44) > a2)
  {
    v5 = (unsigned __int8 *)result;
    v6 = a2;
    v7 = *(_QWORD *)(result + 32);
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 8 * a2) + 24))(*(_QWORD *)(v7 + 8 * a2));
    v8 = *a3;
    if (*(_QWORD *)(*a3 + 16))
    {
      v9 = WTF::fastMalloc((WTF *)0x48);
      v10 = *(_DWORD *)(v8 + 32);
      v11 = *(_OWORD **)(v8 + 40);
      v12 = *(_DWORD *)(v8 + 48);
      *(_QWORD *)v9 = off_1E32EE228;
      *(_QWORD *)(v9 + 64) = &unk_1E32EE270;
      v13 = *(_QWORD *)(v8 + 52);
      v14 = WTF::fastMalloc((WTF *)0x50);
      *(_DWORD *)(v14 + 8) = 1;
      *(_QWORD *)(v14 + 16) = v9 + 64;
      *(_WORD *)(v14 + 24) = 0;
      *(_QWORD *)v14 = off_1E32EE1F0;
      v15 = v11[2];
      v16 = v11[4];
      *(_OWORD *)(v14 + 48) = v11[3];
      *(_OWORD *)(v14 + 64) = v16;
      *(_OWORD *)(v14 + 32) = v15;
      *(_QWORD *)v14 = off_1E32EE1B8;
      *(_DWORD *)(v9 + 8) = 1;
      *(_QWORD *)(v9 + 16) = 0;
      *(_WORD *)(v9 + 24) = 0;
      *(_QWORD *)v9 = &off_1E32EE2A8;
      *(_DWORD *)(v9 + 32) = v10;
      v17 = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v17 + 1;
      *(_QWORD *)(v9 + 40) = v14;
      *(_DWORD *)(v9 + 48) = v12;
      *(_QWORD *)(v9 + 52) = v13;
      if (v17)
        *(_DWORD *)(v14 + 8) = v17;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      *(_QWORD *)v9 = off_1E32EE228;
      *(_QWORD *)(v9 + 64) = &unk_1E32EE270;
      v18 = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v9;
      if (!v18)
        goto LABEL_10;
    }
    else
    {
      *a3 = 0;
      v18 = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v8;
      if (!v18)
      {
LABEL_10:
        (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(v7 + 8 * v6) + 16))(*(_QWORD *)(v7 + 8 * v6), v5 + 48, v5[24]);
        return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
      }
    }
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

void *WebCore::SVGPropertyList<WebCore::SVGTransform>::remove@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _DWORD *v7;
  void *result;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 48))(a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  v7 = (_DWORD *)*v6;
  *v6 = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  result = memmove(v6, v6 + 1, *(_QWORD *)(a1 + 32) + 8 * *(unsigned int *)(a1 + 44) - (_QWORD)(v6 + 1));
  --*(_DWORD *)(a1 + 44);
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::append(uint64_t a1, WebCore::SVGTransform **a2)
{
  WebCore::SVGTransform **v2;
  WebCore::SVGTransform *v4;
  _QWORD *v5;
  uint64_t v6;
  WebCore::SVGTransform **v7;
  WebCore::SVGTransform *v8;
  uint64_t v10;
  WebCore::SVGTransform *v11;
  int v12;
  WebCore::SVGTransform *v13;

  v2 = a2;
  v4 = *a2;
  if (!*((_QWORD *)*a2 + 2))
    goto LABEL_2;
  WebCore::SVGTransform::clone(v4, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  v11 = *v2;
  *v2 = (WebCore::SVGTransform *)v10;
  if (v11)
  {
    v12 = *((_DWORD *)v11 + 2) - 1;
    if (*((_DWORD *)v11 + 2) == 1)
    {
      (*(void (**)(WebCore::SVGTransform *))(*(_QWORD *)v11 + 8))(v11);
      v11 = v13;
      v13 = 0;
      if (!v11)
        goto LABEL_9;
      v12 = *((_DWORD *)v11 + 2) - 1;
      if (*((_DWORD *)v11 + 2) == 1)
      {
        (*(void (**)(WebCore::SVGTransform *))(*(_QWORD *)v11 + 8))(v11);
        goto LABEL_9;
      }
    }
    *((_DWORD *)v11 + 2) = v12;
  }
LABEL_9:
  v4 = *v2;
LABEL_2:
  (*(void (**)(WebCore::SVGTransform *, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v5 = (_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 40))
  {
    v2 = (WebCore::SVGTransform **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)v2);
    v6 = *(unsigned int *)(a1 + 44);
    v7 = (WebCore::SVGTransform **)(*(_QWORD *)(a1 + 32) + 8 * v6);
  }
  else
  {
    v7 = (WebCore::SVGTransform **)(*v5 + 8 * v6);
  }
  v8 = *v2;
  *v2 = 0;
  *v7 = v8;
  *(_DWORD *)(a1 + 44) = v6 + 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::commitPropertyChange(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1);
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGTransform>::~SVGValuePropertyList(_DWORD *result, void *a2)
{
  _DWORD *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  *((_QWORD *)result - 6) = off_1E32EE2E0;
  *(_QWORD *)result = &unk_1E32EE358;
  v3 = (WTF *)*((_QWORD *)result - 2);
  v4 = *(result - 1);
  if (!(_DWORD)v4)
  {
    *((_QWORD *)result - 6) = off_1E32EE390;
    goto LABEL_13;
  }
  v5 = 8 * v4;
  do
  {
    v6 = *(_DWORD **)v3;
    v3 = (WTF *)((char *)v3 + 8);
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    v5 -= 8;
  }
  while (v5);
  v7 = *(v2 - 1);
  *((_QWORD *)v2 - 6) = off_1E32EE390;
  v3 = (WTF *)*((_QWORD *)v2 - 2);
  if (!(_DWORD)v7)
  {
LABEL_13:
    if (!v3)
      return result;
    goto LABEL_14;
  }
  v8 = 8 * v7;
  do
  {
    result = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    v3 = (WTF *)((char *)v3 + 8);
    v8 -= 8;
  }
  while (v8);
  v3 = (WTF *)*((_QWORD *)v2 - 2);
  if (v3)
  {
LABEL_14:
    *((_QWORD *)v2 - 2) = 0;
    *(v2 - 2) = 0;
    return (_DWORD *)WTF::fastFree(v3, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGTransform>::~SVGValuePropertyList(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *(a1 - 6) = off_1E32EE2E0;
  v3 = (WTF *)(a1 - 6);
  *a1 = &unk_1E32EE358;
  v4 = (WTF *)*(a1 - 2);
  v5 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(_DWORD **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)a1 - 1);
    *(a1 - 6) = off_1E32EE390;
    v4 = (WTF *)*(a1 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v4 = (WTF *)((char *)v4 + 8);
        v9 -= 8;
      }
      while (v9);
      v4 = (WTF *)*(a1 - 2);
      if (v4)
        goto LABEL_14;
      return WTF::fastFree(v3, a2);
    }
  }
  else
  {
    *(_QWORD *)v3 = off_1E32EE390;
  }
  if (v4)
  {
LABEL_14:
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(v3, a2);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGTransform>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGTransform>::commitPropertyChange(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = a1 - 48;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 88))(a1 - 48);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v1);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGTransform>::~SVGPropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E32EE2E0;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE358;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE390;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
      if (v3)
        goto LABEL_14;
      return a1;
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE390;
  }
  if (v3)
  {
LABEL_14:
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E32EE2E0;
  *(_QWORD *)(a1 + 48) = &unk_1E32EE358;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E32EE390;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
      if (v3)
        goto LABEL_14;
      return WTF::fastFree((WTF *)a1, a2);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32EE390;
  }
  if (v3)
  {
LABEL_14:
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree((WTF *)a1, a2);
}

_DWORD *`non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGTransform>::~SVGPropertyList(_DWORD *result, void *a2)
{
  _DWORD *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  *((_QWORD *)result - 6) = off_1E32EE2E0;
  *(_QWORD *)result = &unk_1E32EE358;
  v3 = (WTF *)*((_QWORD *)result - 2);
  v4 = *(result - 1);
  if (!(_DWORD)v4)
  {
    *((_QWORD *)result - 6) = off_1E32EE390;
    goto LABEL_13;
  }
  v5 = 8 * v4;
  do
  {
    v6 = *(_DWORD **)v3;
    v3 = (WTF *)((char *)v3 + 8);
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    v5 -= 8;
  }
  while (v5);
  v7 = *(v2 - 1);
  *((_QWORD *)v2 - 6) = off_1E32EE390;
  v3 = (WTF *)*((_QWORD *)v2 - 2);
  if (!(_DWORD)v7)
  {
LABEL_13:
    if (!v3)
      return result;
    goto LABEL_14;
  }
  v8 = 8 * v7;
  do
  {
    result = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    v3 = (WTF *)((char *)v3 + 8);
    v8 -= 8;
  }
  while (v8);
  v3 = (WTF *)*((_QWORD *)v2 - 2);
  if (v3)
  {
LABEL_14:
    *((_QWORD *)v2 - 2) = 0;
    *(v2 - 2) = 0;
    return (_DWORD *)WTF::fastFree(v3, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGTransform>::~SVGPropertyList(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *(a1 - 6) = off_1E32EE2E0;
  v3 = (WTF *)(a1 - 6);
  *a1 = &unk_1E32EE358;
  v4 = (WTF *)*(a1 - 2);
  v5 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(_DWORD **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)a1 - 1);
    *(a1 - 6) = off_1E32EE390;
    v4 = (WTF *)*(a1 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v4 = (WTF *)((char *)v4 + 8);
        v9 -= 8;
      }
      while (v9);
      v4 = (WTF *)*(a1 - 2);
      if (v4)
        goto LABEL_14;
      return WTF::fastFree(v3, a2);
    }
  }
  else
  {
    *(_QWORD *)v3 = off_1E32EE390;
  }
  if (v4)
  {
LABEL_14:
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(v3, a2);
}

void WebCore::SVGTransform::~SVGTransform(WebCore::SVGTransform *this)
{
  _DWORD *v2;
  _DWORD *v3;

  *(_QWORD *)this = off_1E32EE228;
  *((_QWORD *)this + 8) = &unk_1E32EE270;
  v2 = (_DWORD *)*((_QWORD *)this + 5);
  ++v2[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  *(_QWORD *)this = &off_1E32EE2A8;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
}

{
  _DWORD *v2;
  void *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E32EE228;
  *((_QWORD *)this + 8) = &unk_1E32EE270;
  v2 = (_DWORD *)*((_QWORD *)this + 5);
  ++v2[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  *(_QWORD *)this = &off_1E32EE2A8;
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WTF::fastFree(this, v3);
}

uint64_t WebCore::SVGTransform::attach(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  int v4;

  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a3;
  result = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = v4 + 1;
  *(_BYTE *)(result + 24) = a3;
  *(_BYTE *)(result + 25) = 0;
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 8) = v4;
  return result;
}

uint64_t WebCore::SVGTransform::detach(WebCore::SVGTransform *this)
{
  uint64_t result;
  int v2;

  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  result = *((_QWORD *)this + 5);
  v2 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = v2 + 1;
  *(_WORD *)(result + 24) = 0;
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 8) = v2;
  return result;
}

WTF::StringImpl *WebCore::SVGTransform::valueAsString@<X0>(WebCore::SVGTransform *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::SVGTransformValue::valueAsString((WebCore::SVGTransform *)((char *)this + 32), a2);
}

uint64_t WebCore::SVGTransform::owner(WebCore::SVGTransform *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::SVGTransform::commitPropertyChange(WebCore::SVGTransform *this, WebCore::SVGProperty *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(WebCore::SVGTransform *, WebCore::SVGProperty *))(*(_QWORD *)this + 40))(this, a2);
  if (result)
  {
    v4 = (*(uint64_t (**)(WebCore::SVGTransform *))(*(_QWORD *)this + 40))(this);
    result = (*(uint64_t (**)(uint64_t, WebCore::SVGTransform *))(*(_QWORD *)v4 + 32))(v4, this);
  }
  *((_DWORD *)this + 8) = 1;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 0;
  return result;
}

void `non-virtual thunk to'WebCore::SVGTransform::~SVGTransform(WebCore::SVGTransform *this)
{
  _DWORD *v2;
  _DWORD *v3;

  *((_QWORD *)this - 8) = off_1E32EE228;
  *(_QWORD *)this = &unk_1E32EE270;
  v2 = (_DWORD *)*((_QWORD *)this - 3);
  ++v2[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  *((_QWORD *)this - 8) = &off_1E32EE2A8;
  v3 = (_DWORD *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
}

{
  WTF *v2;
  _DWORD *v3;
  void *v4;
  _DWORD *v5;

  *((_QWORD *)this - 8) = off_1E32EE228;
  v2 = (WebCore::SVGTransform *)((char *)this - 64);
  *(_QWORD *)this = &unk_1E32EE270;
  v3 = (_DWORD *)*((_QWORD *)this - 3);
  ++v3[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  if (v3[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[2];
  *((_QWORD *)this - 8) = &off_1E32EE2A8;
  v5 = (_DWORD *)*((_QWORD *)this - 3);
  *((_QWORD *)this - 3) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WTF::fastFree(v2, v4);
}

uint64_t `non-virtual thunk to'WebCore::SVGTransform::owner(WebCore::SVGTransform *this)
{
  return *((_QWORD *)this - 6);
}

uint64_t `non-virtual thunk to'WebCore::SVGTransform::commitPropertyChange(WebCore::SVGTransform *this, WebCore::SVGProperty *a2)
{
  char *v3;
  uint64_t result;
  uint64_t v5;

  v3 = (char *)this - 64;
  result = (*(uint64_t (**)(char *, WebCore::SVGProperty *))(*((_QWORD *)this - 8) + 40))((char *)this - 64, a2);
  if (result)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 40))(v3);
    result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 32))(v5, v3);
  }
  *((_DWORD *)this - 8) = 1;
  *(_QWORD *)((char *)this - 12) = 0;
  *((_DWORD *)this - 4) = 0;
  return result;
}

_QWORD *WebCore::SVGValueProperty<WebCore::SVGTransformValue>::~SVGValueProperty(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E32EE2A8;
  v2 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WebCore::SVGValueProperty<WebCore::SVGTransformValue>::~SVGValueProperty(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E32EE2A8;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::SVGTransformValue::valueAsString@<X0>(WebCore::SVGTransformValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  float v5;
  double v6;
  double v7;
  long double v8;
  uint64_t v9;
  double v10;
  double v11;
  float v12;
  float v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  char v20;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  WTF::StringBuilder::append();
  if (*(_DWORD *)this == 4)
  {
    v5 = *((float *)this + 4);
    v6 = cos((float)(v5 * 0.017453));
    if (v6 == 1.0)
    {
      v12 = 0.0;
      v13 = 0.0;
    }
    else
    {
      v7 = v6;
      v8 = sin((float)(v5 * 0.017453));
      v9 = *((_QWORD *)this + 1);
      v10 = *(double *)(v9 + 64);
      v11 = *(double *)(v9 + 72);
      v12 = (v10 * (1.0 - v7) - v11 * v8) / (1.0 - v7) * 0.5;
      v13 = (v11 + v8 * v10 / (1.0 - v7)) * 0.5;
    }
    if (v12 == 0.0 && v13 == 0.0)
LABEL_6:
      WebCore::SVGTransformValue::appendFixedPrecisionNumbers<float>((WTF::StringBuilder *)&v17);
    else
      WebCore::SVGTransformValue::appendFixedPrecisionNumbers<float,float,float>((uint64_t *)&v17);
  }
  else
  {
    switch(*(_DWORD *)this)
    {
      case 1:
        WebCore::SVGTransformValue::appendMatrix(this, (WTF::StringBuilder *)&v17);
        break;
      case 2:
      case 3:
        WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double>((uint64_t *)&v17);
        break;
      case 5:
      case 6:
        goto LABEL_6;
      default:
        break;
    }
  }
  v14 = v17;
  if (v17
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v17),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v17),
        (v14 = v17) != 0))
  {
    *(_DWORD *)v14 += 2;
  }
  *a2 = v14;
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v4);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *WebCore::SVGTransformValue::appendMatrix(WebCore::SVGTransformValue *this, WTF::StringBuilder *a2)
{
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double,double,double,double>((uint64_t *)a2);
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double,double,double,double>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char __s[124];
  _DWORD __n[3];
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F00F1CLL);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_28;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v19 = *a1;
      else
        v19 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v19 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v17 = *(_DWORD *)(v4 + 16);
          v18 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v17 & 4) != 0)
            *(_BYTE *)(v18 + v1) = 32;
          else
            *(_WORD *)(v18 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_28:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  __n[0] = strlen(__s);
  v10 = *((_DWORD *)a1 + 4);
  v11 = __CFADD__(v10, __n[0]);
  v12 = v10 + __n[0];
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = a1[1];
  if ((v14 || (v14 = *a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    v20 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (v20)
    {
      v21 = &v20[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v23 = &v20[2 * (__n[0] & 0xFFFFFFC0)];
        v22 = __s;
        v24 = 0uLL;
        do
        {
          v34.val[0] = *(int8x16_t *)v22;
          v25 = *((int8x16_t *)v22 + 1);
          v35.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
          v26 = *((_OWORD *)v22 + 3);
          v22 += 64;
          v27 = v26;
          v35.val[1] = 0uLL;
          v36.val[0] = v25;
          v34.val[1] = 0uLL;
          v28 = v20;
          vst2q_s8(v28, v34);
          v28 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v28, v36);
          v29 = v20 + 64;
          vst2q_s8(v29, v35);
          v30 = v20 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
          v20 += 128;
        }
        while (v20 != v23);
        v20 = v23;
      }
      else
      {
        v22 = __s;
      }
      while (v20 != v21)
      {
        v31 = *v22++;
        *(_WORD *)v20 = v31;
        v20 += 2;
      }
    }
  }
  else
  {
    v15 = (_BYTE *)MEMORY[0x19AEA4824](a1, v13);
    if (v15 && __n[0])
    {
      if (__n[0] == 1)
        *v15 = __s[0];
      else
        memcpy(v15, __s, __n[0]);
    }
  }
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double,double,double>(a1);
}

char *WTF::StringBuilder::append<WTF::FormattedNumber>(WTF::StringBuilder *a1, int8x16_t *a2)
{
  uint64_t v3;
  char *result;
  size_t v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 || (v3 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::FormattedNumber,void>>(result, a2);
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v5 = a2[7].u32[3];
      if ((_DWORD)v5)
      {
        if ((_DWORD)v5 == 1)
          *result = a2->i8[0];
        else
          return (char *)memcpy(result, a2, v5);
      }
    }
  }
  return result;
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double,double,double>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char __s[124];
  _DWORD __n[3];
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F01224);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_28;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v19 = *a1;
      else
        v19 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v19 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v17 = *(_DWORD *)(v4 + 16);
          v18 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v17 & 4) != 0)
            *(_BYTE *)(v18 + v1) = 32;
          else
            *(_WORD *)(v18 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_28:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  __n[0] = strlen(__s);
  v10 = *((_DWORD *)a1 + 4);
  v11 = __CFADD__(v10, __n[0]);
  v12 = v10 + __n[0];
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = a1[1];
  if ((v14 || (v14 = *a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    v20 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (v20)
    {
      v21 = &v20[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v23 = &v20[2 * (__n[0] & 0xFFFFFFC0)];
        v22 = __s;
        v24 = 0uLL;
        do
        {
          v34.val[0] = *(int8x16_t *)v22;
          v25 = *((int8x16_t *)v22 + 1);
          v35.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
          v26 = *((_OWORD *)v22 + 3);
          v22 += 64;
          v27 = v26;
          v35.val[1] = 0uLL;
          v36.val[0] = v25;
          v34.val[1] = 0uLL;
          v28 = v20;
          vst2q_s8(v28, v34);
          v28 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v28, v36);
          v29 = v20 + 64;
          vst2q_s8(v29, v35);
          v30 = v20 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
          v20 += 128;
        }
        while (v20 != v23);
        v20 = v23;
      }
      else
      {
        v22 = __s;
      }
      while (v20 != v21)
      {
        v31 = *v22++;
        *(_WORD *)v20 = v31;
        v20 += 2;
      }
    }
  }
  else
  {
    v15 = (_BYTE *)MEMORY[0x19AEA4824](a1, v13);
    if (v15 && __n[0])
    {
      if (__n[0] == 1)
        *v15 = __s[0];
      else
        memcpy(v15, __s, __n[0]);
    }
  }
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double,double>(a1);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::FormattedNumber,void>>(char *result, int8x16_t *a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  __int128 v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int16 v12;
  int8x16x2_t v13;
  int8x16x2_t v14;
  int8x16x2_t v15;

  v2 = a2[7].u32[3];
  v3 = &result[2 * v2];
  if (v2 >= 0x40)
  {
    v4 = &result[2 * (v2 & 0xFFFFFFC0)];
    v5 = 0uLL;
    do
    {
      v13.val[0] = *a2;
      v6 = a2[1];
      v14.val[0] = a2[2];
      v7 = a2[3];
      a2 += 4;
      v8 = v7;
      v14.val[1] = 0uLL;
      v15.val[0] = v6;
      v13.val[1] = 0uLL;
      v9 = result;
      vst2q_s8(v9, v13);
      v9 += 32;
      v15.val[1] = 0uLL;
      vst2q_s8(v9, v15);
      v10 = result + 64;
      vst2q_s8(v10, v14);
      v11 = result + 96;
      vst2q_s8(v11, *(int8x16x2_t *)(&v5 - 1));
      result += 128;
    }
    while (result != v4);
    result = v4;
  }
  while (result != v3)
  {
    v12 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v12;
    result += 2;
  }
  return result;
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double,double>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char __s[124];
  _DWORD __n[3];
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F01504);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_28;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v19 = *a1;
      else
        v19 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v19 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v17 = *(_DWORD *)(v4 + 16);
          v18 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v17 & 4) != 0)
            *(_BYTE *)(v18 + v1) = 32;
          else
            *(_WORD *)(v18 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_28:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  __n[0] = strlen(__s);
  v10 = *((_DWORD *)a1 + 4);
  v11 = __CFADD__(v10, __n[0]);
  v12 = v10 + __n[0];
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = a1[1];
  if ((v14 || (v14 = *a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    v20 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (v20)
    {
      v21 = &v20[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v23 = &v20[2 * (__n[0] & 0xFFFFFFC0)];
        v22 = __s;
        v24 = 0uLL;
        do
        {
          v34.val[0] = *(int8x16_t *)v22;
          v25 = *((int8x16_t *)v22 + 1);
          v35.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
          v26 = *((_OWORD *)v22 + 3);
          v22 += 64;
          v27 = v26;
          v35.val[1] = 0uLL;
          v36.val[0] = v25;
          v34.val[1] = 0uLL;
          v28 = v20;
          vst2q_s8(v28, v34);
          v28 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v28, v36);
          v29 = v20 + 64;
          vst2q_s8(v29, v35);
          v30 = v20 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
          v20 += 128;
        }
        while (v20 != v23);
        v20 = v23;
      }
      else
      {
        v22 = __s;
      }
      while (v20 != v21)
      {
        v31 = *v22++;
        *(_WORD *)v20 = v31;
        v20 += 2;
      }
    }
  }
  else
  {
    v15 = (_BYTE *)MEMORY[0x19AEA4824](a1, v13);
    if (v15 && __n[0])
    {
      if (__n[0] == 1)
        *v15 = __s[0];
      else
        memcpy(v15, __s, __n[0]);
    }
  }
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double>(a1);
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double,double>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char __s[124];
  _DWORD __n[3];
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F01764);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_28;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v19 = *a1;
      else
        v19 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v19 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v17 = *(_DWORD *)(v4 + 16);
          v18 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v17 & 4) != 0)
            *(_BYTE *)(v18 + v1) = 32;
          else
            *(_WORD *)(v18 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_28:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  __n[0] = strlen(__s);
  v10 = *((_DWORD *)a1 + 4);
  v11 = __CFADD__(v10, __n[0]);
  v12 = v10 + __n[0];
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = a1[1];
  if ((v14 || (v14 = *a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    v20 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (v20)
    {
      v21 = &v20[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v23 = &v20[2 * (__n[0] & 0xFFFFFFC0)];
        v22 = __s;
        v24 = 0uLL;
        do
        {
          v34.val[0] = *(int8x16_t *)v22;
          v25 = *((int8x16_t *)v22 + 1);
          v35.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
          v26 = *((_OWORD *)v22 + 3);
          v22 += 64;
          v27 = v26;
          v35.val[1] = 0uLL;
          v36.val[0] = v25;
          v34.val[1] = 0uLL;
          v28 = v20;
          vst2q_s8(v28, v34);
          v28 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v28, v36);
          v29 = v20 + 64;
          vst2q_s8(v29, v35);
          v30 = v20 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
          v20 += 128;
        }
        while (v20 != v23);
        v20 = v23;
      }
      else
      {
        v22 = __s;
      }
      while (v20 != v21)
      {
        v31 = *v22++;
        *(_WORD *)v20 = v31;
        v20 += 2;
      }
    }
  }
  else
  {
    v15 = (_BYTE *)MEMORY[0x19AEA4824](a1, v13);
    if (v15 && __n[0])
    {
      if (__n[0] == 1)
        *v15 = __s[0];
      else
        memcpy(v15, __s, __n[0]);
    }
  }
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double>(a1);
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double,double>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char __s[124];
  _DWORD __n[3];
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F019B4);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_28;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v19 = *a1;
      else
        v19 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v19 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v17 = *(_DWORD *)(v4 + 16);
          v18 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v17 & 4) != 0)
            *(_BYTE *)(v18 + v1) = 32;
          else
            *(_WORD *)(v18 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_28:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  __n[0] = strlen(__s);
  v10 = *((_DWORD *)a1 + 4);
  v11 = __CFADD__(v10, __n[0]);
  v12 = v10 + __n[0];
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = a1[1];
  if ((v14 || (v14 = *a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    v20 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (v20)
    {
      v21 = &v20[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v23 = &v20[2 * (__n[0] & 0xFFFFFFC0)];
        v22 = __s;
        v24 = 0uLL;
        do
        {
          v34.val[0] = *(int8x16_t *)v22;
          v25 = *((int8x16_t *)v22 + 1);
          v35.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
          v26 = *((_OWORD *)v22 + 3);
          v22 += 64;
          v27 = v26;
          v35.val[1] = 0uLL;
          v36.val[0] = v25;
          v34.val[1] = 0uLL;
          v28 = v20;
          vst2q_s8(v28, v34);
          v28 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v28, v36);
          v29 = v20 + 64;
          vst2q_s8(v29, v35);
          v30 = v20 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
          v20 += 128;
        }
        while (v20 != v23);
        v20 = v23;
      }
      else
      {
        v22 = __s;
      }
      while (v20 != v21)
      {
        v31 = *v22++;
        *(_WORD *)v20 = v31;
        v20 += 2;
      }
    }
  }
  else
  {
    v15 = (_BYTE *)MEMORY[0x19AEA4824](a1, v13);
    if (v15 && __n[0])
    {
      if (__n[0] == 1)
        *v15 = __s[0];
      else
        memcpy(v15, __s, __n[0]);
    }
  }
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double>(a1);
}

