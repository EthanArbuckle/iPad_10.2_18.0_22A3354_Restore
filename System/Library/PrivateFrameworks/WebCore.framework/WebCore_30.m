uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLMediaElement>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

WebCore::MediaStream *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SS_EEEEEEDcSW_DpT0_(uint64_t a1, WebCore::MediaStream **a2)
{
  WebCore::MediaStream *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(result);
      return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 22);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SS_EEEEEEDcSW_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SS_EEEEEEDcSW_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSG_SK_SO_SS_EEEEEEDcSW_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS12_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEERKS1A_EEEDcS12_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 88);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS12_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEERKS1A_EEEDcS12_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 24);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS12_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEERKS1A_EEEDcS12_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS12_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEERKS1A_EEEDcS12_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore11MediaStreamENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11MediaSourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_17MediaSourceHandleENSD_ISM_EENSF_ISM_EEEENSA_INSB_4BlobENSD_ISQ_EENSF_ISQ_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSX_1EJSU_SV_EEEEEEDcSZ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32A0FB0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore11MediaStreamENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_11MediaSourceENSE_ISJ_EENSG_ISJ_EEEENSB_INSC_17MediaSourceHandleENSE_ISN_EENSG_ISN_EEEENSB_INSC_4BlobENSE_ISR_EENSG_ISR_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSZ_1EJSW_SX_EEEEEEDcS11_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32A0FB0[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::HTMLModelElement>>(uint64_t result, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  WebCore::HTMLElement *v8;
  objc_class *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  _BYTE v17[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(WebCore **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](v17, v7);
    v9 = (objc_class *)WebCore::toJS(v6, **(JSC::JSGlobalObject ***)(v4 + 32), a2, v8);
    v10 = *(_QWORD *)(v7 + 16);
    if (!v10)
    {
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v9);
      v10 = *(_QWORD *)(v7 + 16);
      if (!v10)
        return MEMORY[0x19AEA32A0](v17);
    }
    v11 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v11 + 64))(v11))
    {
LABEL_12:
      WebCore::reportException(v6, v10, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v17);
    }
    v12 = v11[43];
    if (*(_QWORD *)(v7 + 24) == v10)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v12)
      goto LABEL_12;
    v13 = (unsigned __int8 *)(v12 + 40);
    if (__ldaxr((unsigned __int8 *)(v12 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v12 + 40);
LABEL_20:
    v15 = *(unsigned __int8 *)(v12 + 41);
    v16 = __ldxr(v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_25:
        if (!v15)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSHTMLOptionElement>(WebCore::JSHTMLElement *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v8;
  JSC::Structure *v9;
  JSC::JSCell *v10;
  uint64_t v11;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSHTMLOptionElement::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype(a1, a2, v5);
    Structure = WebCore::JSHTMLOptionElementPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v10 = (JSC::JSCell *)WebCore::JSHTMLOptionElementPrototype::create(a1, Structure, v8, v9);
    v11 = WebCore::JSHTMLOptionElement::createStructure((uint64_t *)a1, (uint64_t)a2, v10);
    return WebCore::cacheDOMStructure((JSCell *)a2, v11, (uint64_t)&WebCore::JSHTMLOptionElement::s_info);
  }
  return result;
}

uint64_t WebCore::JSHTMLOptionElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

BOOL WebCore::setJSHTMLOptionElement_selectedSetter(uint64_t a1, WebCore::HTMLOptionElement *a2, unint64_t a3)
{
  int v4;
  _BYTE v6[4];
  int v7;

  WebCore::convert<WebCore::IDLBoolean>(a1, a3, (uint64_t)v6);
  v4 = v7;
  if (!v7)
    WebCore::HTMLOptionElement::setSelected(a2, (void *)(v6[0] != 0));
  return v4 == 0;
}

uint64_t WebCore::jsHTMLOptionElement_valueGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSHTMLOptionElement *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  WebCore::HTMLOptionElement::value(a2, a2, &v8);
  v5 = WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(*((_QWORD *)this + 7), (uint64_t)v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

uint64_t WebCore::getCachedWrapper<WebCore::HTMLOptionElement>(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 48))
  {
    v4 = a2;
    return WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(a1 + 32), &v4);
  }
  else
  {
    v2 = *(_BYTE **)(a2 + 8);
    if (!v2 || (v2[8] & 3) != 0)
      return 0;
    else
      return *(_QWORD *)v2;
  }
}

uint64_t WebCore::getDOMStructure<WebCore::JSHTMLOptionsCollection>(WebCore::JSHTMLOptionsCollection *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSHTMLOptionsCollection::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSHTMLOptionsCollection::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSHTMLOptionsCollection::s_info);
  }
  return result;
}

uint64_t WebCore::JSHTMLOptionsCollection::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 4552);
  *(_QWORD *)(a1 + 4552) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSHTMLOutputElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::castThisValue<WebCore::JSHTMLProgressElement>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSHTMLProgressElement::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSHTMLProgressElement::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

BOOL WebCore::setJSHTMLProgressElement_maxSetter(JSC::JSGlobalObject *a1, WTF::AtomString *a2, unint64_t a3)
{
  int v4;
  double v6;
  int v7;

  WebCore::Converter<WebCore::IDLDouble>::convert(a1, a3, (uint64_t)&v6);
  v4 = v7;
  if (!v7)
    WebCore::HTMLProgressElement::setMax(a2, v6);
  return v4 == 0;
}

uint64_t WebCore::JSHTMLQuoteElement::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 4608);
  *(_QWORD *)(a1 + 4608) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

double WebCore::JSConverter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>::convert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  __int128 *v6;
  _BYTE v7[40];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 == -1)
    v3 = -1;
  v14 = v3;
  LOBYTE(v12) = 0;
  v13 = 0;
  *(_QWORD *)&v8 = &v14;
  *((_QWORD *)&v8 + 1) = &v12;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  result = _ZN7WebCore7forEachIN7brigand4listIJNSt3__117integral_constantIlLl0EEENS4_IlLl1EEEEEEZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNS3_7variantIJN3WTF6RefPtrISB_NSM_12RawPtrTraitsISB_EENSM_21DefaultRefDerefTraitsISB_EEEENSM_6StringEEEEEUlTyvE_EET0_SY_((uint64_t)v7, &v8);
  if (!v13)
  {
    v5 = std::__throw_bad_optional_access[abi:sn180100]();
    return _ZN7WebCore7forEachIN7brigand4listIJNSt3__117integral_constantIlLl0EEENS4_IlLl1EEEEEEZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNS3_7variantIJN3WTF6RefPtrISB_NSM_12RawPtrTraitsISB_EENSM_21DefaultRefDerefTraitsISB_EEEENSM_6StringEEEEEUlTyvE_EET0_SY_(v5, v6);
  }
  return result;
}

double _ZN7WebCore7forEachIN7brigand4listIJNSt3__117integral_constantIlLl0EEENS4_IlLl1EEEEEEZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNS3_7variantIJN3WTF6RefPtrISB_NSM_12RawPtrTraitsISB_EENSM_21DefaultRefDerefTraitsISB_EEEENSM_6StringEEEEEUlTyvE_EET0_SY_(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = a2[1];
  v6 = *a2;
  v7 = v3;
  v8 = *((_QWORD *)a2 + 4);
  _ZZN7WebCore11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS3_NSF_12RawPtrTraitsIS3_EENSF_21DefaultRefDerefTraitsIS3_EEEENSF_6StringEEEEENKUlTyvE_clINSD_17integral_constantIlLl0EEEEEDav((unint64_t)&v6);
  _ZZN7WebCore11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS3_NSF_12RawPtrTraitsIS3_EENSF_21DefaultRefDerefTraitsIS3_EEEENSF_6StringEEEEENKUlTyvE_clINSD_17integral_constantIlLl1EEEEEDav((uint64_t)&v6);
  result = *(double *)&v6;
  v5 = v7;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v8;
  return result;
}

unint64_t _ZZN7WebCore11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS3_NSF_12RawPtrTraitsIS3_EENSF_21DefaultRefDerefTraitsIS3_EEEENSF_6StringEEEEENKUlTyvE_clINSD_17integral_constantIlLl0EEEEEDav(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!**(_QWORD **)result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 32);
    if (*(_DWORD *)(v2 + 8))
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZZN7WebCore11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS3_NSF_12RawPtrTraitsIS3_EENSF_21DefaultRefDerefTraitsIS3_EEEENSF_6StringEEEEENKUlTyvE_clINSD_17integral_constantIlLl1EEEEEDav(v4);
    }
    else
    {
      if (*(_QWORD *)v2)
        result = WebCore::wrap<WebCore::TrustedScript>(*(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(WTF **)v2);
      else
        result = 2;
      v3 = *(_QWORD *)(v1 + 8);
      if (!*(_BYTE *)(v3 + 8))
        *(_BYTE *)(v3 + 8) = 1;
      *(_QWORD *)v3 = result;
    }
  }
  return result;
}

uint64_t _ZZN7WebCore11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS3_NSF_12RawPtrTraitsIS3_EENSF_21DefaultRefDerefTraitsIS3_EEEENSF_6StringEEEEENKUlTyvE_clINSD_17integral_constantIlLl1EEEEEDav(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (**(_QWORD **)result == 1)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 32);
    if (*(_DWORD *)(v2 + 8) == 1)
    {
      result = WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(*(_QWORD *)(*(_QWORD *)(result + 16) + 56), *(_QWORD *)v2);
      v3 = *(_QWORD *)(v1 + 8);
      if (!*(_BYTE *)(v3 + 8))
        *(_BYTE *)(v3 + 8) = 1;
      *(_QWORD *)v3 = result;
    }
    else
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v4);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSRopeString *a3)
{
  uint64_t result;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  int v9;
  _BYTE v10[8];
  int v11;
  unsigned __int8 v12;
  JSC::JSRopeString *v13;
  _BYTE *v14;
  JSC::JSGlobalObject *v15;
  JSC::JSRopeString **v16;

  v10[0] = 0;
  v12 = 0;
  v13 = a3;
  v14 = v10;
  v15 = a2;
  v16 = &v13;
  result = _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectENS8_7JSValueEENKUlTyvE_clIS4_EEDav((uint64_t)&v14);
  if (v12)
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v8 = v11;
    if (v11 == -1)
    {
      *(_DWORD *)(a1 + 24) = 0;
    }
    else
    {
      result = ((uint64_t (*)(_BYTE **))off_1E32A1050[v11])(&v14);
      *(_DWORD *)(a1 + 16) = v8;
      v9 = v12;
      *(_DWORD *)(a1 + 24) = 0;
      if (v9)
      {
        if (v11 != -1)
          return ((uint64_t (*)(_BYTE **, _BYTE *))off_1E32A1030[v11])(&v14, v10);
      }
    }
  }
  else
  {
    result = (uint64_t)WebCore::Converter<WebCore::IDLDOMString>::convert(a2, (unint64_t)v13, (uint64_t)&v14);
    v6 = v15;
    if (!(_DWORD)v15)
    {
      v7 = v14;
      v14 = 0;
      *(_QWORD *)(a1 + 8) = v7;
      *(_DWORD *)(a1 + 16) = 1;
      *(_DWORD *)(a1 + 24) = 0;
      return ((uint64_t (*)(_BYTE *, _BYTE **))off_1E329F280[v6])(v10, &v14);
    }
    *(_DWORD *)(a1 + 24) = 1;
    if ((_DWORD)v6 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE **))off_1E329F280[v6])(v10, &v14);
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_13TrustedScriptEEENS_12IDLDOMStringEEEEE7convertERN3JSC14JSGlobalObjectENS8_7JSValueEENKUlTyvE_clIS4_EEDav(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;

  v1 = *(_QWORD *)result;
  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    result = WebCore::JSTrustedScript::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)(result + 8);
      v2 = result;
      v3 = 0;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>,void>(v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E32A1030[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32A1030[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 8) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32A1040[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E32A1050[v5])(&v9, a1, a2);
    *(_DWORD *)(a1 + 8) = v5;
  }
  *(_BYTE *)(a1 + 16) = 1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E32A1030[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(_DWORD **)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
  {
    if (v7[2] == 1)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
        *(_QWORD *)v7 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v7, a2);
    }
    else
    {
      --v7[2];
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32A1030[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::releaseReturnValue(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_DWORD *)(a2 + 24))
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(v4, v5);
  }
  else
  {
    v2 = result;
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E32A1050[v3])(&v6, result, a2 + 8);
      *(_DWORD *)(v2 + 8) = v3;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32A1030[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSHTMLScriptElement *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSHTMLScriptElement::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSHTMLScriptElement::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::jsHTMLScriptElement_textContentGetter(uint64_t a1, int a2, WebCore::Node *a3, __n128 a4, uint64_t a5, WTF::StringBuilder *a6)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v11;

  v7 = *(WTF::StringImpl **)(16 * (a2 & 0xFFFFFFFE) + 0x28);
  WebCore::Node::textContent(a3, 0, a6, &v11, a4);
  v9 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>>::convert<WTF::String>(a1, v7, &v11);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v9;
}

uint64_t WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>>::convert<WTF::String>(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  int v13;
  char v14;
  _BYTE v15[8];
  int v16;
  char v17;

  v6 = *a3;
  if (*a3)
  {
    v7 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    if (v7)
    {
      *(_DWORD *)v6 = v7;
    }
    else
    {
      WTF::StringImpl::destroy(v6, a2);
      v6 = *a3;
    }
  }
  *a3 = 0;
  v12 = v6;
  v13 = 1;
  v14 = 1;
  WebCore::IDLType<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::extractValueFromNullable((uint64_t)v15, (uint64_t)&v12);
  v8 = WebCore::JSConverter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>::convert(a1, (uint64_t)a2, (uint64_t)v15);
  v10 = v9;
  if (v16 != -1)
    ((void (*)(char *, _BYTE *, double))off_1E32A1030[v16])(&v17, v15, v8);
  v16 = -1;
  if (v14 && v13 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E32A1030[v13])(&v17, &v12);
  return v10;
}

void WebCore::IDLType<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::extractValueFromNullable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  char v7;

  if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32A1070[v3])(&v7, a1, a2);
      *(_DWORD *)(a1 + 8) = v3;
    }
  }
  else
  {
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEERKSZ_EEEDcSR_DpT0_(v4, v5, v6);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

BOOL WebCore::setJSHTMLScriptElement_textContentSetter(JSC::JSGlobalObject *a1, uint64_t *a2, JSC::JSRopeString *a3)
{
  int v5;
  JSC::VM *v7;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>>::convert((uint64_t)v9, a1, a3);
  v5 = v11;
  if (!v11)
    WebCore::invokeFunctorPropagatingExceptionIfNecessary<WebCore::setJSHTMLScriptElement_textContentSetter(JSC::JSGlobalObject &,WebCore::JSHTMLScriptElement &,JSC::JSValue)::{lambda(void)#1}>(a1, &v7, a2, (uint64_t)v9);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))off_1E32A1080[v11])(&v8, &v10);
  return v5 == 0;
}

uint64_t WebCore::invokeFunctorPropagatingExceptionIfNecessary<WebCore::setJSHTMLScriptElement_textContentSetter(JSC::JSGlobalObject &,WebCore::JSHTMLScriptElement &,JSC::JSValue)::{lambda(void)#1}>(JSC *a1, JSC::VM **a2, uint64_t *a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  char v13;

  WebCore::setJSHTMLScriptElement_textContentSetter(JSC::JSGlobalObject &,WebCore::JSHTMLScriptElement &,JSC::JSValue)::{lambda(void)#1}::operator()((uint64_t)v11, a3, a4);
  if (v13)
  {
    v9[0] = v11[0];
    v8 = v12;
    v12 = 0;
    v10 = v8;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v9);
      v8 = v10;
    }
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v11, v6);
}

uint64_t WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSRopeString *a3)
{
  uint64_t result;
  char v5;
  _BYTE v6[8];
  int v7;
  char v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (((unint64_t)a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6[0] = 0;
    v8 = 0;
    result = WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>>::ConversionResult(a1, (uint64_t)v6);
    if (v8 && v7 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E32A1030[v7])(&v5, v6);
  }
  else
  {
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>::convert((uint64_t)v6, a2, a3);
    result = WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>(WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>> &&)::{lambda(void)#1}::operator()(a1, (uint64_t)v6);
    if (v9 != -1)
      return ((uint64_t (*)(char *, int *))off_1E32A1060[v9])(&v5, &v7);
  }
  return result;
}

uint64_t WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>>::ConversionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 16) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *))off_1E32A1050[v3])(&v5);
      *(_DWORD *)(a1 + 16) = v3;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::optional[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 8) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32A1050[v3])(&v5, a1, a2);
      *(_DWORD *)(a1 + 8) = v3;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>(WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>> &&)::{lambda(void)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6[8];
  int v7;
  char v8;
  char v9;

  v2 = result;
  if (*(_DWORD *)(a2 + 24))
  {
    *(_DWORD *)(result + 32) = 1;
  }
  else
  {
    WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::releaseReturnValue((uint64_t)&v4, a2);
    v6[0] = 0;
    v7 = -1;
    v3 = v5;
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t *))off_1E32A1050[v5])(&v9, v6, &v4);
      v7 = v3;
    }
    v8 = 1;
    result = WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScript>,WebCore::IDLDOMString>>>::ConversionResult(v2, (uint64_t)v6);
    if (v8)
    {
      if (v7 != -1)
        result = ((uint64_t (*)(char *, char *))off_1E32A1030[v7])(&v9, v6);
      v7 = -1;
    }
    if (v5 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E32A1030[v5])(&v9, &v4);
  }
  return result;
}

WTF::StringImpl *WebCore::setJSHTMLScriptElement_textContentSetter(JSC::JSGlobalObject &,WebCore::JSHTMLScriptElement &,JSC::JSValue)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  uint64_t v6;
  int v7;
  char v8;
  char v9;

  WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>>::releaseReturnValue((uint64_t)&v6, a3);
  result = WebCore::HTMLScriptElement::setTextContent(a2, (uint64_t)&v6, a1);
  if (v8)
  {
    if (v7 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E32A1030[v7])(&v9, &v6);
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>>::releaseReturnValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_DWORD *)(a2 + 32))
    return std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>>::optional[abi:sn180100](a1, a2 + 8);
  v3 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore13TrustedScriptENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSA_6StringEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(v3, v4);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore13TrustedScriptENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSA_6StringEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32A1030[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

JSC::JSGlobalObject *WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScriptURL>,WebCore::IDLUSVString>>::convert@<X0>(JSC::JSGlobalObject *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  char v22;

  LOBYTE(v17) = 0;
  v19 = 0;
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_8;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSTrustedScriptURL::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSTrustedScriptURL::s_info && v6 != 0);
  }
  if (!v5)
    goto LABEL_8;
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    goto LABEL_8;
  v15 = a2;
  v16 = result;
  ++*(_DWORD *)(v12 + 8);
  v20 = v12;
  v21 = 0;
  std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String>,void>((uint64_t)&v17, (uint64_t)&v20);
  if (v21 != -1)
    ((void (*)(char *, uint64_t *))off_1E32A1090[v21])(&v22, &v20);
  a2 = v15;
  result = v16;
  if (!v19)
  {
LABEL_8:
    result = (JSC::JSGlobalObject *)WebCore::valueToUSVString(result, a2, (uint64_t)&v17);
    v8 = v18;
    if (v18)
    {
      *(_DWORD *)(a3 + 24) = 1;
      if ((_DWORD)v8 == -1)
        return result;
    }
    else
    {
      v9 = v17;
      v17 = 0;
      *(_QWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 16) = 1;
      *(_DWORD *)(a3 + 24) = 0;
    }
    v10 = off_1E329F280;
    return (JSC::JSGlobalObject *)((uint64_t (*)(uint64_t *, uint64_t *))v10[v8])(&v20, &v17);
  }
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = -1;
  v13 = v18;
  if (v18 == -1)
  {
    *(_DWORD *)(a3 + 24) = 0;
    return result;
  }
  result = (JSC::JSGlobalObject *)((uint64_t (*)(uint64_t *))off_1E32A10B0[v18])(&v20);
  *(_DWORD *)(a3 + 16) = v13;
  v14 = v19;
  *(_DWORD *)(a3 + 24) = 0;
  if (v14)
  {
    v8 = v18;
    if (v18 != -1)
    {
      v10 = off_1E32A1090;
      return (JSC::JSGlobalObject *)((uint64_t (*)(uint64_t *, uint64_t *))v10[v8])(&v20, &v17);
    }
  }
  return result;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::String>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32A1090[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 8) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32A10A0[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E32A10B0[v5])(&v9, a1, a2);
    *(_DWORD *)(a1 + 8) = v5;
  }
  *(_BYTE *)(a1 + 16) = 1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E32A1090[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(_DWORD **)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
  {
    if (v7[2] == 1)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
        *(_QWORD *)v7 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v7, a2);
    }
    else
    {
      --v7[2];
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32A1090[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore16TrustedScriptURLENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32A1090[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::jsHTMLScriptElement_typeGetter(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)WebCore::Element::attributeWithoutSynchronization(a2, &WebCore::HTMLNames::typeAttr);
  return WebCore::toJS<WebCore::IDLUSVString,WTF::String>(a1, (uint64_t)&v5, v3);
}

BOOL WebCore::setJSHTMLSelectElement_multipleSetter(uint64_t a1, WTF::StringImpl **a2, unint64_t a3)
{
  __n128 v4;
  int v5;
  char v7[4];
  int v8;

  WebCore::convert<WebCore::IDLBoolean>(a1, a3, (uint64_t)v7);
  v5 = v8;
  if (!v8)
    WebCore::setJSHTMLSelectElement_multipleSetter(JSC::JSGlobalObject &,WebCore::JSHTMLSelectElement &,JSC::JSValue)::{lambda(void)#1}::operator()(a2, v7[0], 0, v4);
  return v5 == 0;
}

WTF::StringImpl **WebCore::setJSHTMLSelectElement_multipleSetter(JSC::JSGlobalObject &,WebCore::JSHTMLSelectElement &,JSC::JSValue)::{lambda(void)#1}::operator()(WTF::StringImpl **a1, char a2, int a3, __n128 a4)
{
  WebCore *v5;
  JSC::JSGlobalObject *v6;
  WebCore::JSHTMLSelectElement *v7;

  if (!a3)
    return WebCore::Element::setBooleanAttribute(a1, (const WebCore::QualifiedName *)&WebCore::HTMLNames::multipleAttr, a2 != 0, a4);
  v5 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::StringImpl **)WebCore::jsHTMLSelectElement_optionsGetter(v5, v6, v7);
}

unint64_t WebCore::jsHTMLSelectElement_optionsGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSHTMLSelectElement *a3)
{
  int v3;
  JSC::VM *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v8;

  v3 = (int)this;
  v4 = *(JSC::VM **)(16 * (a2 & 0xFFFFFFFE) + 0x28);
  WebCore::HTMLSelectElement::options(a3, (uint64_t *)&v8);
  v5 = WebCore::wrap<WebCore::HTMLCollection>(v3, v4, (uint64_t)v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return v5;
}

uint64_t WebCore::JSHTMLTableCaptionElement::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 4664);
  *(_QWORD *)(a1 + 4664) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

_DWORD *WebCore::File::shouldReplaceFile(WebCore::File *this, const WTF::String *a2)
{
  _DWORD *result;
  id v3;
  uint64_t v4;

  result = *(_DWORD **)this;
  if (result)
  {
    if (result[1])
    {
      v4 = 0;
      result = (_DWORD *)objc_msgSend(MEMORY[0x1E0C99E98], "URLByResolvingAliasFileAtURL:options:error:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", WTF::StringImpl::operator NSString *(), 0), 256, &v4);
      if (result)
      {
        v3 = 0;
        result = (_DWORD *)objc_msgSend(result, "getResourceValue:forKey:error:", &v3, *MEMORY[0x1E0C998E0], &v4);
        if ((_DWORD)result)
          return (_DWORD *)objc_msgSend(v3, "conformsToType:", *MEMORY[0x1E0CEC588]);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::File::computeNameAndContentTypeForReplacedFile(WebCore::File *this, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::String *a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = *a4;
  *a4 = v20;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *a2;
  if (v11)
  {
    *(_DWORD *)v11 += 2;
    v19 = v11;
    v12 = (uint64_t)v11;
  }
  else
  {
    WTF::FileSystemImpl::pathFileName(this, v9);
    v12 = (uint64_t)v19;
    if (!v19)
    {
      v14 = 4;
LABEL_10:
      v15 = 1;
      goto LABEL_11;
    }
  }
  v13 = *(_DWORD *)(v12 + 4);
  if (v13 < 0 || (v14 = (v13 + 4), __OFADD__(v13, 4)))
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x194C8559CLL);
  }
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    goto LABEL_10;
  v15 = 0;
LABEL_11:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v14, v15, v12, (int8x16_t *)".zip", 4u, &v20);
  if (!v20)
    goto LABEL_23;
  v17 = *a3;
  *a3 = v20;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v19;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  return result;
}

void sub_194C855A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::JSHTMLTemplateElement::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSHTMLTemplateElement::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSHTMLTemplateElement::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSHTMLTemplateElement::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSHTMLTemplateElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHTMLTemplateElement::visitChildren(uint64_t a1, uint64_t a2)
{
  WebCore::JSHTMLElement::visitChildren(a1, a2);
  return WebCore::JSHTMLTemplateElement::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSHTMLTemplateElement::visitChildren(WebCore::JSHTMLTemplateElement *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSHTMLElement::visitChildren(this, a2, a3);
    result = WebCore::JSHTMLTemplateElement::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSHTMLTemplateElement::createPrototype(WebCore::JSHTMLTemplateElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype(this, a2, a3);
  Structure = WebCore::JSHTMLTemplateElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSHTMLTemplateElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSHTMLTemplateElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLTemplateElementPrototype::create(WebCore::JSHTMLTemplateElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSHTMLTemplateElement::s_info, &WebCore::JSHTMLTemplateElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C85C54);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 672) & 0x20000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v18 = v22[0];
    v19 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v19;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v20);
      else
        *(_DWORD *)v18 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v22);
  v14 = v22[0];
  v22[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v23 = 0;
  v24 = v16;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTemplateElement>,(WebCore::DOMConstructorID)580>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4640);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTemplateElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLTemplateElement::s_info
         + ~((_QWORD)&WebCore::JSHTMLTemplateElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLTemplateElement::s_info
                                                                       + ~((_QWORD)&WebCore::JSHTMLTemplateElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLTemplateElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSHTMLTemplateElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSHTMLTemplateElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLTemplateElementPrototype::create((WebCore::JSHTMLTemplateElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLTemplateElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLTemplateElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4640) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLTemplateElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLTemplateElementPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTemplateElement>,(WebCore::DOMConstructorID)580>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLTemplateElement_content(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::DocumentFragment *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)WebCore::HTMLTemplateElement::content(*(WebCore::HTMLTemplateElement **)(a2 + 24));
  return WebCore::toJS(a1, v3, v4, v5);
}

uint64_t WebCore::jsHTMLTemplateElement_shadowRootMode(uint64_t a1, WebCore::HTMLTemplateElement **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = WebCore::HTMLTemplateElement::shadowRootMode(a2[3], (WTF::StringImpl *)a2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(_QWORD *)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

BOOL WebCore::setJSHTMLTemplateElement_shadowRootMode(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::Element *v8;
  __n128 v9;
  int v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTemplateElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTemplateElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::Element **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v18 = v12;
    WebCore::Element::setAttribute(v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::shadowrootmodeAttr, &v18, 0, &v19, v9);
    if (v21 && v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v13);
      else
        *(_DWORD *)v20 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A9100[v10])(&v19, &v16);
  return v11;
}

uint64_t WebCore::jsHTMLTemplateElement_shadowRootDelegatesFocus(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::shadowrootdelegatesfocusAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::shadowrootdelegatesfocusAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::shadowrootdelegatesfocusAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLTemplateElement_shadowRootDelegatesFocus(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTemplateElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTemplateElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::shadowrootdelegatesfocusAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLTemplateElement_shadowRootClonable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::shadowrootclonableAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::shadowrootclonableAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::shadowrootclonableAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLTemplateElement_shadowRootClonable(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTemplateElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTemplateElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::shadowrootclonableAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLTemplateElement_shadowRootSerializable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::shadowrootserializableAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::shadowrootserializableAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::shadowrootserializableAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLTemplateElement_shadowRootSerializable(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTemplateElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTemplateElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::shadowrootserializableAttr, v12, a4);
  return 1;
}

uint64_t WebCore::JSHTMLTemplateElement::subspaceForImpl(WebCore::JSHTMLTemplateElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4712);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 4712);
  if (!v21)
  {
    v10 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v10, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v12 = v22;
    v22 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v23;
    v23 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v11);
      else
        --*(_DWORD *)v13;
    }
    v21 = v10;
    v14 = *(_QWORD *)(v9 + 4712);
    *(_QWORD *)(v9 + 4712) = v10;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v15 == *(_DWORD *)(v7 + 2840))
    {
      v16 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v15 + 1, (unint64_t)&v21);
      v15 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v15) = *v16;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v15) = v10;
    }
    *(_DWORD *)(v7 + 2844) = v15 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v17 = *(_QWORD *)(v3 + 4712);
  *(_QWORD *)(v3 + 4712) = v4;
  if (v17)
  {
    v18 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v18, v19);
  }
  v20 = __ldxr((unsigned __int8 *)v7);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLTextAreaElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTextAreaElement>,(WebCore::DOMConstructorID)581>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4648);
  if (v2)
    return v2;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v8 = v7;
  LODWORD(v36) = 67099;
  if ((v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_7;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v34);
    v6[2] = SlowCase + (int)v34;
LABEL_7:
    *v6 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v8, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTextAreaElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v11 = (_QWORD *)v6[165];
  v2 = v11[2846];
  if (v2 < v11[2847])
    goto LABEL_11;
  v2 = v11[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v11[2849];
    v11[2847] = v2 + HIDWORD(v35);
    v11[2848] = v2 + (int)v35;
LABEL_11:
    v11[2846] = v2 + 48;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v6[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v12, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create(a1, &v36);
  v15 = v36;
  v36 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v14;
  if (v14 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v16 = *(_QWORD *)(v6[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v14, 6, (uint64_t)&v36);
  v18 = *(_QWORD *)(v6[227] + 2160);
  v19 = *(_QWORD *)(a2 + 3296);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)&WebCore::JSHTMLTextAreaElement::s_info
         + ~((_QWORD)&WebCore::JSHTMLTextAreaElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLTextAreaElement::s_info
                                                                       + ~((_QWORD)&WebCore::JSHTMLTextAreaElement::s_info << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(char ***)(v19 + 16 * v24);
    if (v25 == &WebCore::JSHTMLTextAreaElement::s_info)
    {
LABEL_18:
      v26 = *(_QWORD *)(v19 + 16 * v24 + 8);
      if (v26)
        goto LABEL_20;
    }
    else
    {
      v33 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v33) & v20;
        v25 = *(char ***)(v19 + 16 * v24);
        ++v33;
        if (v25 == &WebCore::JSHTMLTextAreaElement::s_info)
          goto LABEL_18;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v17);
  Structure = WebCore::JSHTMLTextAreaElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLTextAreaElementPrototype::create((WebCore::JSHTMLTextAreaElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLTextAreaElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLTextAreaElement::s_info);
LABEL_20:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v18, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4648) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLTextAreaElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLTextAreaElementPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTextAreaElement>,(WebCore::DOMConstructorID)581>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLTextAreaElement_dirName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::dirnameAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLTextAreaElement_dirName(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::dirnameAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::dirnameAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTextAreaElement_disabled(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::disabledAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLTextAreaElement_disabled(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTextAreaElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::disabledAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLTextAreaElement_form(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::HTMLElement *a4)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v6;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120);
  if (v4 && (v6 = *(WebCore::JSDOMGlobalObject **)(v4 + 8)) != 0)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v6, a4);
  else
    return 2;
}

unint64_t WebCore::jsHTMLTextAreaElement_minLength(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 176) | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLTextAreaElement_minLength(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  WTF::AtomString *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::Element *v11;
  int v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = (WTF::AtomString *)a3;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTextAreaElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::Element **)(a2 + 24);
  v24 = a3;
  if (a3 < 0xFFFE000000000000)
  {
    v17 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v24, this);
      v17 = v23;
    }
    v18 = (v17 >> 52) & 0x7FF;
    v19 = v18 - 1023;
    v20 = v17 >> (51 - (v17 >> 52));
    if (v18 > 0x433)
      LODWORD(v20) = v17 << ((v17 >> 52) - 51);
    if (v18 >= 0x41F)
      v21 = v20;
    else
      v21 = (((1 << ((v17 >> 52) + 1)) - 1) & v20) + (1 << ((v17 >> 52) + 1));
    if ((v17 & 0x8000000000000000) == 0)
      v22 = v21;
    else
      v22 = -v21;
    if (v19 <= 0x53)
      v5 = (WTF::AtomString *)v22;
    else
      v5 = 0;
  }
  if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    return 0;
  if ((v5 & 0x80000000) == 0 && ((v12 = *((_DWORD *)v11 + 43), v12 < 0) || v12 >= (int)v5))
  {
    WebCore::Element::setIntegralAttribute(v11, (const WebCore::QualifiedName *)&WebCore::HTMLNames::minlengthAttr, v5);
  }
  else
  {
    LOBYTE(v24) = 0;
    v25 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v25);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v25;
      v25 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  return 1;
}

unint64_t WebCore::jsHTMLTextAreaElement_maxLength(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 172) | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLTextAreaElement_maxLength(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  WTF::AtomString *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::Element *v11;
  int v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = (WTF::AtomString *)a3;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTextAreaElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::Element **)(a2 + 24);
  v24 = a3;
  if (a3 < 0xFFFE000000000000)
  {
    v17 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v24, this);
      v17 = v23;
    }
    v18 = (v17 >> 52) & 0x7FF;
    v19 = v18 - 1023;
    v20 = v17 >> (51 - (v17 >> 52));
    if (v18 > 0x433)
      LODWORD(v20) = v17 << ((v17 >> 52) - 51);
    if (v18 >= 0x41F)
      v21 = v20;
    else
      v21 = (((1 << ((v17 >> 52) + 1)) - 1) & v20) + (1 << ((v17 >> 52) + 1));
    if ((v17 & 0x8000000000000000) == 0)
      v22 = v21;
    else
      v22 = -v21;
    if (v19 <= 0x53)
      v5 = (WTF::AtomString *)v22;
    else
      v5 = 0;
  }
  if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    return 0;
  if ((v5 & 0x80000000) == 0 && ((v12 = *((_DWORD *)v11 + 44), v12 < 0) || v12 <= (int)v5))
  {
    WebCore::Element::setIntegralAttribute(v11, (const WebCore::QualifiedName *)&WebCore::HTMLNames::maxlengthAttr, v5);
  }
  else
  {
    LOBYTE(v24) = 0;
    v25 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v25);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v25;
      v25 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::jsHTMLTextAreaElement_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v3 && (v4 = *(_DWORD *)(v3 + 4), (v4 & 2) != 0))
  {
    if ((v4 & 1) != 0)
    {
      v13 = *(uint64_t **)(v3 + 40);
      LODWORD(v14) = *(_DWORD *)(v3 + 52);
    }
    else
    {
      v13 = (uint64_t *)(v3 + 32);
      LODWORD(v14) = v4 >> 5;
    }
    if ((_DWORD)v14)
    {
      v14 = v14;
      while (1)
      {
        v15 = *v13;
        if (*v13 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v13 += 2;
        if (!--v14)
          goto LABEL_28;
      }
    }
    else
    {
LABEL_28:
      v13 = 0;
    }
    v5 = v13 + 1;
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v6 = *v5;
  if (!*v5)
    return *(_QWORD *)(v2 + 41968);
  v7 = *(_DWORD *)(v6 + 4);
  if (!v7)
    return *(_QWORD *)(v2 + 41968);
  if (v7 == 1)
  {
    v10 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_7;
      v11 = v12;
    }
    return *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
LABEL_7:
  v8 = *(_QWORD *)(v2 + 64760);
  if (!v8 || v6 != *(_QWORD *)(v8 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v8;
}

BOOL WebCore::setJSHTMLTextAreaElement_name(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::nameAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTextAreaElement_placeholder(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::placeholderAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLTextAreaElement_placeholder(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::placeholderAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::placeholderAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTextAreaElement_readOnly(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::readonlyAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLTextAreaElement_readOnly(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTextAreaElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::readonlyAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLTextAreaElement_required(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::requiredAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::requiredAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::requiredAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLTextAreaElement_required(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTextAreaElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::requiredAttr, v12, a4);
  return 1;
}

unint64_t WebCore::jsHTMLTextAreaElement_rows(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 208);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLTextAreaElement_rows(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::Element *v8;
  _BOOL8 v9;
  uint64_t v10;
  __n128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::Element **)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v15);
  v9 = v16 == 0;
  if (!v16)
  {
    if (v15 <= 0)
      v10 = 2;
    else
      v10 = v15;
    WTF::AtomString::number((WTF::AtomString *)v10);
    WebCore::Element::setAttribute(v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::rowsAttr, &v17, 0, &v18, v11);
    if (v20 && v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return v9;
}

unint64_t WebCore::jsHTMLTextAreaElement_cols(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 212);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLTextAreaElement_cols(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::Element *v8;
  _BOOL8 v9;
  uint64_t v10;
  __n128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::Element **)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v15);
  v9 = v16 == 0;
  if (!v16)
  {
    if (v15 <= 0)
      v10 = 20;
    else
      v10 = v15;
    WTF::AtomString::number((WTF::AtomString *)v10);
    WebCore::Element::setAttribute(v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::colsAttr, &v17, 0, &v18, v11);
    if (v20 && v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return v9;
}

uint64_t WebCore::jsHTMLTextAreaElement_wrap(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::wrapAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::wrapAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::wrapAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLTextAreaElement_wrap(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::wrapAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::wrapAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::wrapAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::wrapAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTextAreaElement_type(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 328))(*(_QWORD *)(a2 + 24) + 112);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(_QWORD *)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

uint64_t WebCore::jsHTMLTextAreaElement_defaultValue(uint64_t a1, uint64_t a2)
{
  return WebCore::jsHTMLTextAreaElement_defaultValueGetter(a1, *(WebCore::HTMLTextAreaElement **)(a2 + 24));
}

BOOL WebCore::setJSHTMLTextAreaElement_defaultValue(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  unsigned __int16 *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  char v24;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLTextAreaElement::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(unsigned __int16 **)(a2 + 24);
  v22 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v21 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v21;
    if (hasExceptionsAfterHandlingTraps)
    {
      v20 = 1;
      v21 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = 0;
      v14 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    v11 = v21;
  }
  v20 = 0;
  v19 = 0;
  v21 = v11;
  v12 = v9[14] >> 12;
  if (v12 != 1)
  {
    if (v12 > 0xB)
      goto LABEL_22;
    if (v12 != 11)
    {
      if (((1 << v12) & 0x19C) != 0)
      {
        (*(void (**)(unint64_t *__return_ptr, unsigned __int16 *, WTF::StringImpl **))(*(_QWORD *)v9 + 120))(&v22, v9, &v21);
        if (v24)
        {
          v17 = v23;
          v23 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
      }
      goto LABEL_22;
    }
  }
  WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v9, (uint64_t)&v21);
LABEL_22:
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = 0;
  v15 = 1;
LABEL_26:
  ((void (*)(unint64_t *, uint64_t *))off_1E32A90E0[v14])(&v22, &v19);
  return v15;
}

uint64_t WebCore::jsHTMLTextAreaElement_value(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;

  WebCore::HTMLTextAreaElement::value(*(_BYTE **)(a2 + 24), &v13);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (uint64_t *)(v4 + 41968);
  v6 = v13;
  if (!v13)
    return *v5;
  v7 = *((_DWORD *)v13 + 1);
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_4:
      v8 = *(_QWORD *)(v4 + 64760);
      if (!v8 || v13 != *(WTF::StringImpl **)(v8 + 8))
        v8 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v10 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    if ((*((_BYTE *)v13 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_4;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v4 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v5;
  }
LABEL_7:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v3);
  else
    *(_DWORD *)v6 -= 2;
  return v8;
}

BOOL WebCore::setJSHTMLTextAreaElement_value(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::HTMLTextFormControlElement *v8;
  const WTF::StringImpl *v9;
  double v10;
  double v11;
  float v12;
  int v13;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::HTMLTextFormControlElement **)(a2 + 24);
  WebCore::Converter<WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>::convert(a1, (unint64_t)this, (uint64_t)&v19);
  v13 = v20;
  v14 = v20 == 0;
  if (!v20)
  {
    v15 = v19;
    v19 = 0;
    v21 = v15;
    WebCore::HTMLTextAreaElement::setValueCommon(v8, (WTF *)&v21, v9, 0, v10, v11, v12);
    *((_BYTE *)v8 + 233) = 1;
    WebCore::ValidatedFormListedElement::updateValidity((uint64_t)v8 + 112);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v13 = v20;
  }
  if (v13 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v13])(&v21, &v19);
  return v14;
}

uint64_t WebCore::jsHTMLTextAreaElement_textLength(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  WTF::StringImpl *v5;

  WebCore::HTMLTextAreaElement::value(*(_BYTE **)(a2 + 24), &v5);
  if (!v5)
  {
    v3 = 0;
    return v3 | 0xFFFE000000000000;
  }
  v3 = *((_DWORD *)v5 + 1);
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, v2);
    if ((v3 & 0x80000000) == 0)
      return v3 | 0xFFFE000000000000;
    return COERCE__INT64((double)v3) + 0x2000000000000;
  }
  *(_DWORD *)v5 -= 2;
  if ((v3 & 0x80000000) != 0)
    return COERCE__INT64((double)v3) + 0x2000000000000;
  return v3 | 0xFFFE000000000000;
}

uint64_t WebCore::jsHTMLTextAreaElement_willValidate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  int v5;
  char v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_BYTE *)(v2 + 160);
  if ((v3 & 4) == 0 || (*(_BYTE *)(v2 + 162) & 3) == 2)
  {
    *(_BYTE *)(v2 + 160) = v3 | 4;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 112) + 336))(v2 + 112);
    v3 = *(_BYTE *)(v2 + 160);
    if (((v5 ^ ((v3 & 2) == 0)) & 1) == 0)
    {
      if (v5)
        v6 = 2;
      else
        v6 = 0;
      v3 = v3 & 0xFD | v6;
      *(_BYTE *)(v2 + 160) = v3;
    }
  }
  if ((v3 & 2) != 0)
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsHTMLTextAreaElement_validity(uint64_t a1, uint64_t a2)
{
  return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WTF *)(*(_QWORD *)(a2 + 24) + 112));
}

uint64_t WebCore::jsHTMLTextAreaElement_validationMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::HTMLTextAreaElement::validationMessage(*(WebCore::HTMLTextAreaElement **)(a2 + 24), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsHTMLTextAreaElement_labels(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t Wrapper;
  uint64_t v17;
  _DWORD *v18;

  v2 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::HTMLElement::labels(*(WebCore::HTMLElement **)(a2 + 24), &v17);
  v3 = (_DWORD *)v17;
  if (!v17)
    return 2;
  v5 = *(_QWORD *)(v2 + 3320);
  if (!*(_DWORD *)(v5 + 48))
  {
    v6 = *(_QWORD *)(v17 + 8);
    if (v6)
      goto LABEL_5;
LABEL_7:
    ++*(_DWORD *)(v17 + 16);
    v18 = v3;
    Wrapper = WebCore::createWrapper(v2, (uint64_t *)&v18);
    v7 = v18;
    v18 = 0;
    if (v7)
    {
      if (v7[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[4];
    }
    v3 = (_DWORD *)v17;
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(v5 + 32);
  if (!v8)
    goto LABEL_7;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v8 + 16 * v13);
  if (v14 != v17)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v8 + 16 * v13);
      ++v15;
      if (v14 == v17)
        goto LABEL_22;
    }
    goto LABEL_7;
  }
LABEL_22:
  v6 = *(_QWORD *)(v8 + 16 * v13 + 8);
  if (!v6)
    goto LABEL_7;
LABEL_5:
  if ((*(_BYTE *)(v6 + 8) & 3) != 0)
    goto LABEL_7;
  Wrapper = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_7;
LABEL_11:
  v17 = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return Wrapper;
}

unint64_t WebCore::jsHTMLTextAreaElement_selectionStart(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = WebCore::HTMLTextFormControlElement::selectionStart(*(WebCore::HTMLTextFormControlElement **)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLTextAreaElement_selectionStart(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::HTMLTextFormControlElement *v8;
  _BOOL8 v9;
  unsigned int v11;
  int v12;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::HTMLTextFormControlElement **)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v11);
  v9 = v12 == 0;
  if (!v12)
    WebCore::HTMLTextFormControlElement::setSelectionStart(v8, v11);
  return v9;
}

unint64_t WebCore::jsHTMLTextAreaElement_selectionEnd(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = WebCore::HTMLTextFormControlElement::selectionEnd(*(WebCore::HTMLTextFormControlElement **)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLTextAreaElement_selectionEnd(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::HTMLTextFormControlElement *v8;
  _BOOL8 v9;
  unsigned int v11;
  int v12;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::HTMLTextFormControlElement **)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v11);
  v9 = v12 == 0;
  if (!v12)
    WebCore::HTMLTextFormControlElement::setSelectionEnd(v8, v11);
  return v9;
}

uint64_t WebCore::jsHTMLTextAreaElement_selectionDirection(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = WebCore::HTMLTextFormControlElement::selectionDirection(*(WebCore::HTMLTextFormControlElement **)(a2 + 24));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(_QWORD *)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

BOOL WebCore::setJSHTMLTextAreaElement_selectionDirection(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::HTMLTextFormControlElement *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24[2];

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLTextAreaElement::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(WebCore::HTMLTextFormControlElement **)(a2 + 24);
  v24[0] = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v23 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v24, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v23;
    if (hasExceptionsAfterHandlingTraps)
    {
      v22 = 1;
      v23 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v20);
        else
          *(_DWORD *)v11 -= 2;
      }
      v17 = 0;
      v16 = 1;
      goto LABEL_31;
    }
  }
  else
  {
    v11 = v23;
  }
  v22 = 0;
  v21 = 0;
  v12 = WebCore::HTMLTextFormControlElement::selectionStart(v9);
  v13 = WebCore::HTMLTextFormControlElement::selectionEnd(v9);
  v24[0] = 0;
  v24[1] = 0;
  if ((MEMORY[0x19AEA53F4](v11, "forward", 7) & 1) != 0)
  {
    v14 = 1;
  }
  else if (MEMORY[0x19AEA53F4](v11, "backward", 8))
  {
    v14 = 2;
  }
  else
  {
    v14 = 0;
  }
  if (WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)v9, v12, v13, v14, 3, v24, 0))
    WebCore::HTMLTextFormControlElement::scheduleSelectEvent(v9);
  if (!v11)
    goto LABEL_36;
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, v15);
LABEL_36:
    v16 = 0;
    goto LABEL_30;
  }
  v16 = 0;
  *(_DWORD *)v11 -= 2;
LABEL_30:
  v17 = 1;
LABEL_31:
  ((void (*)(uint64_t *, uint64_t *))off_1E32A90E0[v16])(v24, &v21);
  return v17;
}

uint64_t WebCore::jsHTMLTextAreaElement_autocomplete(uint64_t a1, const WebCore::HTMLFormControlElement *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  WebCore::AutofillData::createFromHTMLFormControlElement(*((_QWORD **)a2 + 3), a2, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v14 = 0;
  v15 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = (uint64_t *)(v6 + 41968);
  if (!v5)
    return *v7;
  v8 = *(_DWORD *)(v5 + 4);
  if (v8)
  {
    if (v8 != 1)
    {
LABEL_7:
      v9 = *(_QWORD *)(v6 + 64760);
      if (!v9 || v5 != *(_QWORD *)(v9 + 8))
        v9 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_10;
    }
    v11 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v12 = *v11;
    }
    else
    {
      v13 = *(unsigned __int16 *)v11;
      if (v13 > 0xFF)
        goto LABEL_7;
      v12 = v13;
    }
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
  }
  else
  {
    v9 = *v7;
  }
LABEL_10:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, v3);
  else
    *(_DWORD *)v5 -= 2;
  return v9;
}

BOOL WebCore::setJSHTMLTextAreaElement_autocomplete(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTextAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::autocompleteAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::autocompleteAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::autocompleteAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::JSHTMLTextAreaElement::subspaceForImpl(WebCore::JSHTMLTextAreaElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4720);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 4720);
  if (!v16)
  {
    v14 = 40;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 4720);
    *(_QWORD *)(v9 + 4720) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSHTMLTextAreaElement::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLTimeElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHTMLTimeElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLTimeElementPrototype::create(WebCore::JSHTMLTimeElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSHTMLTimeElement::s_info, (uint64_t)&WebCore::JSHTMLTimeElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTimeElement>,(WebCore::DOMConstructorID)582>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4656);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTimeElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLTimeElement::s_info + ~((_QWORD)&WebCore::JSHTMLTimeElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLTimeElement::s_info + ~((_QWORD)&WebCore::JSHTMLTimeElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLTimeElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSHTMLTimeElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSHTMLTimeElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLTimeElementPrototype::create((WebCore::JSHTMLTimeElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLTimeElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLTimeElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4656) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLTimeElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLTimeElementPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTimeElement>,(WebCore::DOMConstructorID)582>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLTimeElement_dateTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::datetimeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::datetimeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::datetimeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLTimeElement_dateTime(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTimeElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTimeElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::datetimeAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::datetimeAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::datetimeAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::datetimeAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::JSHTMLTimeElement::subspaceForImpl(WebCore::JSHTMLTimeElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4728);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 4728);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 4728);
    *(_QWORD *)(v8 + 4728) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 4728);
  *(_QWORD *)(v3 + 4728) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSHTMLTitleElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTitleElement>,(WebCore::DOMConstructorID)583>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4664);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTitleElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLTitleElement::s_info + ~((_QWORD)&WebCore::JSHTMLTitleElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLTitleElement::s_info + ~((_QWORD)&WebCore::JSHTMLTitleElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLTitleElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSHTMLTitleElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSHTMLTitleElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLTitleElementPrototype::create((WebCore::JSHTMLTitleElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLTitleElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLTitleElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4664) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLTitleElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLTitleElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTitleElement>,(WebCore::DOMConstructorID)583>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLTitleElement_text(uint64_t a1, WebCore::TextNodeTraversal **a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::TextNodeTraversal::childTextContent(a2[3], (const WebCore::ContainerNode *)a2, &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSHTMLTitleElement_text(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  unsigned __int16 *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v20;
  int hasExceptionsAfterHandlingTraps;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[40];
  uint64_t v30;
  JSC::JSGlobalObject *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  char v35;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLTitleElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLTitleElement::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(unsigned __int16 **)(a2 + 24);
  v27 = (WTF *)v29;
  v28 = 4;
  v29[32] = 0;
  v30 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v31 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v27;
  v33 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v32 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v32;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v32 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = 0;
      v14 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    v11 = v32;
  }
  v26 = 0;
  v25 = 0;
  v32 = v11;
  v12 = v9[14] >> 12;
  if (v12 != 1)
  {
    if (v12 > 0xB)
      goto LABEL_22;
    if (v12 != 11)
    {
      if (((1 << v12) & 0x19C) != 0)
      {
        (*(void (**)(unint64_t *__return_ptr, unsigned __int16 *, WTF::StringImpl **))(*(_QWORD *)v9 + 120))(&v33, v9, &v32);
        if (v35)
        {
          v20 = v34;
          v34 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
      }
      goto LABEL_22;
    }
  }
  WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v9, (uint64_t)&v32);
LABEL_22:
  v13 = v32;
  v32 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = 0;
  v15 = 1;
LABEL_26:
  ((void (*)(unint64_t *, uint64_t *))off_1E32A90E0[v14])(&v33, &v25);
  if (HIDWORD(v28))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v27, v31);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v30;
    if (HIDWORD(v28))
    {
      v22 = v27;
      v23 = 8 * HIDWORD(v28);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v16);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v30;
  }
  v17 = v27;
  if (v29 != (_BYTE *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v17, v16);
  }
  return v15;
}

uint64_t WebCore::JSHTMLTitleElement::subspaceForImpl(WebCore::JSHTMLTitleElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4736);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v19 = *(_QWORD *)(v9 + 4736);
  if (!v19)
  {
    v17 = 40;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v17, JSC::JSCell::numberOfLowerTierCells, &v18);
    v14 = v18;
    v19 = v18;
    v15 = *(_QWORD *)(v9 + 4736);
    *(_QWORD *)(v9 + 4736) = v18;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v16 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v19);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v16) = v14;
      *(_DWORD *)(v7 + 2844) = v16 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 4736);
  *(_QWORD *)(v3 + 4736) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLTrackElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHTMLTrackElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLTrackElementPrototype::create(WebCore::JSHTMLTrackElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSHTMLTrackElement::s_info, (uint64_t)&WebCore::JSHTMLTrackElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTrackElement>,(WebCore::DOMConstructorID)584>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4672);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTrackElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLTrackElement::s_info + ~((_QWORD)&WebCore::JSHTMLTrackElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLTrackElement::s_info + ~((_QWORD)&WebCore::JSHTMLTrackElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLTrackElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSHTMLTrackElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSHTMLTrackElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLTrackElementPrototype::create((WebCore::JSHTMLTrackElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLTrackElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLTrackElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSHTMLTrackElement::s_info, &WebCore::JSHTMLTrackElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4672) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLTrackElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLTrackElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLTrackElement>,(WebCore::DOMConstructorID)584>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLTrackElement_kind(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = WebCore::TextTrack::kindKeyword(*(WebCore::TextTrack **)(*(_QWORD *)(a2 + 24) + 152));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(_QWORD *)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

BOOL WebCore::setJSHTMLTrackElement_kind(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTrackElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTrackElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::kindAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::kindAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::kindAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::kindAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTrackElement_src(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Element *v6;
  uint64_t v7;
  _QWORD *Attribute;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  char v23;
  char v24;
  char **v25;
  char *v26;

  v6 = *(WebCore::Element **)(a2 + 24);
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  Attribute = (_QWORD *)WebCore::Element::getAttribute(v6, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a3, a4, a5);
  v9 = &v22;
  WebCore::Document::completeURL((WebCore::Document *)v7, Attribute, v7 + 848, 0, (WTF::URL *)&v22);
  if ((v23 & 2) == 0)
  {
    v9 = &v22;
    if (WebCore::Document::shouldMaskURLForBindingsInternal((WebCore::Document *)v7, (const WTF::URL *)&v22))
    {
      v21 = atomic_load(&WebCore::Document::maskedURLForBindings(void)::onceFlag);
      if (v21 != -1)
      {
        v26 = &v24;
        v25 = &v26;
        std::__call_once(&WebCore::Document::maskedURLForBindings(void)::onceFlag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Document::maskedURLForBindings(void)::$_0 &&>>);
      }
      v9 = (WTF::StringImpl **)&WebCore::Document::maskedURLForBindings(void)::url;
    }
  }
  v11 = *v9;
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v13 = *(_QWORD *)(a1 + 56);
  v14 = (uint64_t *)(v13 + 41968);
  if (!v11)
    return *v14;
  v15 = *((_DWORD *)v11 + 1);
  if (v15)
  {
    if (v15 != 1)
    {
LABEL_12:
      v16 = *(_QWORD *)(v13 + 64760);
      if (!v16 || v11 != *(WTF::StringImpl **)(v16 + 8))
        v16 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_15;
    }
    v18 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v19 = *v18;
    }
    else
    {
      v20 = *(unsigned __int16 *)v18;
      if (v20 > 0xFF)
        goto LABEL_12;
      v19 = v20;
    }
    v16 = *(_QWORD *)(v13 + 8 * v19 + 42216);
  }
  else
  {
    v16 = *v14;
  }
LABEL_15:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v10);
  else
    *(_DWORD *)v11 -= 2;
  return v16;
}

BOOL WebCore::setJSHTMLTrackElement_src(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTrackElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTrackElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::valueToUSVAtomString(a1, a3, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::srcAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTrackElement_srclang(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::srclangAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLTrackElement_srclang(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTrackElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTrackElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::srclangAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::srclangAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTrackElement_label(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::labelAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLTrackElement_label(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLTrackElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLTrackElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::labelAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::labelAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLTrackElement_default(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::defaultAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::defaultAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::defaultAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLTrackElement_default(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTrackElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTrackElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::defaultAttr, v12, a4);
  return 1;
}

unint64_t WebCore::jsHTMLTrackElement_readyState(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 152) + 236) | 0xFFFE000000000000;
}

uint64_t WebCore::jsHTMLTrackElement_track(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::TextTrack>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 152));
}

uint64_t WebCore::JSHTMLTrackElement::subspaceForImpl(WebCore::JSHTMLTrackElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4744);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 4744);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 4744);
    *(_QWORD *)(v8 + 4744) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 4744);
  *(_QWORD *)(v3 + 4744) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSHTMLTrackElementOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v10 = v9[15];
  if (!v10)
    return WebCore::JSNodeOwner::isReachableFromOpaqueRoots(a1, a2, 0, a4, a5);
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11 || *(_BYTE *)(v11 + 180) || !v9[16] && !(*(unsigned int (**)(_QWORD *))(v9[14] + 64))(v9 + 14))
    return WebCore::JSNodeOwner::isReachableFromOpaqueRoots(a1, a2, 0, a4, a5);
  if (a5)
  {
    *a5 = "ActiveDOMObject with pending activity";
    a5[1] = 38;
  }
  return 1;
}

unsigned int *WebCore::JSHTMLTrackElementOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int *result;
  int v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v26;

  result = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = result[6];
  result[6] = v4 + 2;
  v5 = result + 2;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)result + ~((_QWORD)result << 32)) ^ (((unint64_t)result + ~((_QWORD)result << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(unsigned int **)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(unsigned int **)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_16;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_16:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = result[6] - 2;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    result[6] = v4;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

uint64_t WebCore::JSHTMLUListElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSHTMLUListElement::createPrototype(WebCore::JSHTMLUListElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype(this, a2, a3);
  Structure = WebCore::JSHTMLUListElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSHTMLUListElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSHTMLUListElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLUListElementPrototype::create(WebCore::JSHTMLUListElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSHTMLUListElement::s_info, &WebCore::JSHTMLUListElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLUListElement>,(WebCore::DOMConstructorID)585>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4680);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLUListElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLUListElement::s_info + ~((_QWORD)&WebCore::JSHTMLUListElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLUListElement::s_info + ~((_QWORD)&WebCore::JSHTMLUListElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLUListElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSHTMLUListElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSHTMLUListElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLUListElementPrototype::create((WebCore::JSHTMLUListElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLUListElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLUListElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4680) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLUListElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLUListElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLUListElement>,(WebCore::DOMConstructorID)585>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLUListElement_compact(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::compactAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::compactAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::compactAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLUListElement_compact(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLUListElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLUListElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::compactAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLUListElement_type(uint64_t a1, uint64_t a2)
{
  return WebCore::jsHTMLScriptElement_typeGetter(a1, *(_QWORD *)(a2 + 24));
}

BOOL WebCore::setJSHTMLUListElement_type(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLUListElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLUListElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::typeAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::JSHTMLUListElement::subspaceForImpl(WebCore::JSHTMLUListElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4752);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 4752);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 4752);
    *(_QWORD *)(v9 + 4752) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 4752);
  *(_QWORD *)(v3 + 4752) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLUnknownElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHTMLUnknownElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLUnknownElementPrototype::create(WebCore::JSHTMLUnknownElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSHTMLUnknownElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSHTMLUnknownElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLUnknownElement>,(WebCore::DOMConstructorID)586>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4688);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLUnknownElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLUnknownElement::s_info
         + ~((_QWORD)&WebCore::JSHTMLUnknownElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLUnknownElement::s_info
                                                                      + ~((_QWORD)&WebCore::JSHTMLUnknownElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLUnknownElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSHTMLUnknownElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSHTMLUnknownElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLUnknownElementPrototype::create((WebCore::JSHTMLUnknownElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLUnknownElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLUnknownElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4688) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLUnknownElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLUnknownElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLUnknownElement>,(WebCore::DOMConstructorID)586>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSHTMLUnknownElement::subspaceForImpl(WebCore::JSHTMLUnknownElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4760);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 4760);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 4760);
    *(_QWORD *)(v8 + 4760) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4760);
  *(_QWORD *)(v3 + 4760) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::parseEnumeration<WebCore::HTMLVideoElement::VideoPresentationMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  char **v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint64_t v16;
  uint64_t v17;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint64_t v23;
  unint64_t v24;

  v3 = a1;
  v24 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v24, a1);
  v4 = v23;
  if (!v23)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "fullscreen" && v7 == 10)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 102 || *(_QWORD *)(v6 + 1) != 0x65657263736C6C75 || *(_QWORD *)(v6 + 2) != 0x6E65657263736C6CLL)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 102)
        goto LABEL_16;
      v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968A31E0);
      v13.i16[0] = vminvq_u16(v13);
      if (!v13.i32[0])
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968A3210);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
    }
    goto LABEL_38;
  }
  if (v6 == "fullscreen" && v7 == 10)
  {
LABEL_38:
    v12 = &WebCore::parseEnumerationFromString<WebCore::HTMLVideoElement::VideoPresentationMode>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 != "inline" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 105 || *(_DWORD *)(v6 + 1) != 1852402798 || *(_DWORD *)(v6 + 2) != 1701734764)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 105)
        goto LABEL_16;
      v16 = *(_QWORD *)(v6 + 2);
      v17 = *(_QWORD *)(v6 + 4);
      if (v16 != 0x6E0069006C006ELL || v17 != 0x65006E0069006CLL)
        goto LABEL_16;
    }
  }
  else if (v6 != "inline" || v7 != 6)
  {
    if (v6 == "picture-in-picture" || v7 != 18)
    {
      if (v7 == 18 && v6 == "picture-in-picture")
        goto LABEL_58;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 112
        && vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v6 + 2), (int8x16_t)xmmword_1968BFF80), vceqq_s8(*(int8x16_t *)(v6 + 1), (int8x16_t)xmmword_1968BFF70))))
      {
LABEL_58:
        v12 = &off_1E32A2590;
        goto LABEL_39;
      }
    }
    else if (*(_WORD *)v6 == 112)
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFF90);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968BFFA0);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
        {
          v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 20), (int16x8_t)xmmword_1968BFFB0);
          v21.i16[0] = vminvq_u16(v21);
          if (v21.i32[0])
            goto LABEL_58;
        }
      }
    }
LABEL_16:
    v9 = 0;
    goto LABEL_40;
  }
  v12 = &off_1E32A2578;
LABEL_39:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::JSHTMLVideoElement::prototype(WebCore::JSHTMLVideoElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSHTMLVideoElement::s_info + ~((_QWORD)&WebCore::JSHTMLVideoElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLVideoElement::s_info + ~((_QWORD)&WebCore::JSHTMLVideoElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSHTMLVideoElement::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSHTMLVideoElement::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = WebCore::getDOMStructure<WebCore::JSHTMLMediaElement>(this, a2);
    Structure = WebCore::JSHTMLVideoElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v14 + 48));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSHTMLVideoElementPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSHTMLVideoElement::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSHTMLVideoElement::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSHTMLVideoElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLMediaElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLMediaElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLMediaElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHTMLVideoElement::JSHTMLVideoElement(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t WebCore::JSHTMLVideoElement::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_DWORD *)(v2 + 24) += 2;
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSHTMLVideoElement::createPrototype(WebCore::JSHTMLVideoElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = WebCore::getDOMStructure<WebCore::JSHTMLMediaElement>(this, a2);
  Structure = WebCore::JSHTMLVideoElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v5 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSHTMLVideoElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSHTMLVideoElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLVideoElementPrototype::create(WebCore::JSHTMLVideoElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  JSC::Structure *v66;
  int v67;
  unint64_t v69;
  WTF::StringImpl *v70[6];
  int v71;
  int v72;
  JSC::Structure *v73;
  int v74;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v69 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v69);
    *((_QWORD *)this + 4865) = SlowCase + (int)v69;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<27u>(this, (uint64_t)&WebCore::JSHTMLVideoElement::s_info, (uint64_t)&WebCore::JSHTMLVideoElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F8B0);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 680) + 704);
  v13 = (v12 & 0x200) == 0;
  if ((v12 & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v14 = v70[0];
    v15 = *v10;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v15;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v16);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v17 && *(_BYTE *)(v17 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F8D0);
  }
  v18 = v17 - 192;
  if (!v17)
    v18 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v18 + 680) + 704) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v19 = v70[0];
    v20 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v20;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v21);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F8F0);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 680) + 712) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v70[0];
    v25 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v27 && *(_BYTE *)(v27 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F910);
  }
  v28 = v27 - 192;
  if (!v27)
    v28 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v28 + 680) + 688) & 0x40000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v29 = v70[0];
    v30 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v30;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v31);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v32 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v32 && *(_BYTE *)(v32 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F930);
  }
  v33 = v32 - 192;
  if (!v32)
    v33 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v33 + 680) + 688) & 0x40000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v34 = v70[0];
    v35 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v35;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v36);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  v37 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v37 && *(_BYTE *)(v37 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F950);
  }
  v38 = v37 - 192;
  if (!v37)
    v38 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v38 + 680) + 704) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v39 = v70[0];
    v40 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v40;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v41);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v42 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v42 && *(_BYTE *)(v42 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F970);
  }
  v43 = v42 - 192;
  if (!v42)
    v43 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v43 + 680) + 712) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v44 = v70[0];
    v45 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v45;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v46);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v47 && *(_BYTE *)(v47 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F990);
  }
  v48 = v47 - 192;
  if (!v47)
    v48 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v48 + 680) + 712) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v49 = v70[0];
    v50 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v50;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v51);
      else
        *(_DWORD *)v49 -= 2;
    }
  }
  v52 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v52 && *(_BYTE *)(v52 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F9B0);
  }
  v53 = v52 - 192;
  if (!v52)
    v53 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v53 + 680) + 712) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v54 = v70[0];
    v55 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v55;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v56);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v57 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v57 && *(_BYTE *)(v57 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194C8F9D0);
  }
  v58 = v57 - 192;
  if (!v57)
    v58 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v58 + 680) + 712) & 0x10000000000) != 0)
  {
    if (!v13)
      goto LABEL_88;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v59 = v70[0];
    v60 = *v10;
    *v10 = 1;
    LODWORD(v70[0]) = -1;
    WORD2(v70[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v60;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v61);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_88:
  v62 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v64 = JSC::JSString::create((uint64_t)this, v70);
  v65 = v70[0];
  v70[0] = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v63);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v74 = *(_DWORD *)SlowCase;
  v73 = v66;
  v67 = JSC::Structure::outOfLineCapacity(v66);
  v71 = 0;
  v72 = v67;
  v70[0] = (WTF::StringImpl *)&v72;
  v70[1] = (WTF::StringImpl *)SlowCase;
  v70[2] = this;
  v70[3] = (WTF::StringImpl *)&v74;
  v70[4] = (WTF::StringImpl *)&v73;
  v70[5] = (WTF::StringImpl *)&v71;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v66, this, v62, 6, (uint64_t)v70);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v71, v64);
  *((_DWORD *)v66 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLVideoElement>,(WebCore::DOMConstructorID)587>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4696);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLMediaElement>,(WebCore::DOMConstructorID)550>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLVideoElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSHTMLVideoElement::prototype((WebCore::JSHTMLVideoElement *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4696) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLVideoElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLVideoElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLVideoElement>,(WebCore::DOMConstructorID)587>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsHTMLVideoElement_width(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)WebCore::Element::getAttribute(*(WebCore::Element **)(a3 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::widthAttr, a4, a5, a1);
  if (v5)
  {
    v6 = *(uint64_t **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v6, v7, &v10);
  if (HIDWORD(v10))
    v8 = 0;
  else
    v8 = v10 & ~((int)v10 >> 31);
  return v8 | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLVideoElement_width(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::Element *v8;
  _BOOL8 v9;
  __n128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLVideoElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::Element **)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v14);
  v9 = v15 == 0;
  if (!v15)
  {
    WTF::AtomString::number((WTF::AtomString *)(v14 & ~(v14 >> 31)));
    WebCore::Element::setAttribute(v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::widthAttr, &v16, 0, &v17, v10);
    if (v19 && v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return v9;
}

unint64_t WebCore::jsHTMLVideoElement_height(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)WebCore::Element::getAttribute(*(WebCore::Element **)(a3 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::heightAttr, a4, a5, a1);
  if (v5)
  {
    v6 = *(uint64_t **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v6, v7, &v10);
  if (HIDWORD(v10))
    v8 = 0;
  else
    v8 = v10 & ~((int)v10 >> 31);
  return v8 | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLVideoElement_height(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::Element *v8;
  _BOOL8 v9;
  __n128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLVideoElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::Element **)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v14);
  v9 = v15 == 0;
  if (!v15)
  {
    WTF::AtomString::number((WTF::AtomString *)(v14 & ~(v14 >> 31)));
    WebCore::Element::setAttribute(v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::heightAttr, &v16, 0, &v17, v10);
    if (v19 && v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return v9;
}

uint64_t WebCore::jsHTMLVideoElement_videoWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 1136);
  if (!v2)
    return v2 | 0xFFFE000000000000;
  v3 = (*(float (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 288))(*(_QWORD *)(v2 + 72));
  if (v3 >= 4294967300.0)
  {
    LODWORD(v2) = -1;
    return COERCE__INT64((double)v2) + 0x2000000000000;
  }
  if (v3 <= 0.0)
  {
    LODWORD(v2) = 0;
    return v2 | 0xFFFE000000000000;
  }
  LODWORD(v2) = v3;
  if ((v3 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsHTMLVideoElement_videoHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 1136);
  if (!v2)
    return v2 | 0xFFFE000000000000;
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 288))(*(_QWORD *)(v2 + 72));
  if (v3 >= 4294967300.0)
  {
    LODWORD(v2) = -1;
    return COERCE__INT64((double)v2) + 0x2000000000000;
  }
  if (v3 <= 0.0)
  {
    LODWORD(v2) = 0;
    return v2 | 0xFFFE000000000000;
  }
  LODWORD(v2) = v3;
  if ((v3 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsHTMLVideoElement_poster(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Element *v6;
  uint64_t v7;
  _QWORD *Attribute;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  char v23;
  char v24;
  char **v25;
  char *v26;

  v6 = *(WebCore::Element **)(a2 + 24);
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  Attribute = (_QWORD *)WebCore::Element::getAttribute(v6, (const WebCore::QualifiedName *)&WebCore::HTMLNames::posterAttr, a3, a4, a5);
  v9 = &v22;
  WebCore::Document::completeURL((WebCore::Document *)v7, Attribute, v7 + 848, 0, (WTF::URL *)&v22);
  if ((v23 & 2) == 0)
  {
    v9 = &v22;
    if (WebCore::Document::shouldMaskURLForBindingsInternal((WebCore::Document *)v7, (const WTF::URL *)&v22))
    {
      v21 = atomic_load(&WebCore::Document::maskedURLForBindings(void)::onceFlag);
      if (v21 != -1)
      {
        v26 = &v24;
        v25 = &v26;
        std::__call_once(&WebCore::Document::maskedURLForBindings(void)::onceFlag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Document::maskedURLForBindings(void)::$_0 &&>>);
      }
      v9 = (WTF::StringImpl **)&WebCore::Document::maskedURLForBindings(void)::url;
    }
  }
  v11 = *v9;
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v13 = *(_QWORD *)(a1 + 56);
  v14 = (uint64_t *)(v13 + 41968);
  if (!v11)
    return *v14;
  v15 = *((_DWORD *)v11 + 1);
  if (v15)
  {
    if (v15 != 1)
    {
LABEL_12:
      v16 = *(_QWORD *)(v13 + 64760);
      if (!v16 || v11 != *(WTF::StringImpl **)(v16 + 8))
        v16 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_15;
    }
    v18 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v19 = *v18;
    }
    else
    {
      v20 = *(unsigned __int16 *)v18;
      if (v20 > 0xFF)
        goto LABEL_12;
      v19 = v20;
    }
    v16 = *(_QWORD *)(v13 + 8 * v19 + 42216);
  }
  else
  {
    v16 = *v14;
  }
LABEL_15:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v10);
  else
    *(_DWORD *)v11 -= 2;
  return v16;
}

BOOL WebCore::setJSHTMLVideoElement_poster(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLVideoElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::valueToUSVAtomString(a1, a3, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::posterAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::posterAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::posterAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::posterAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLVideoElement_playsInline(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::playsinlineAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::playsinlineAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::playsinlineAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLVideoElement_playsInline(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::playsinlineAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLVideoElement_webkitSupportsFullscreen(uint64_t a1, uint64_t a2)
{
  if (WebCore::HTMLVideoElement::supportsFullscreen(*(WebCore::HTMLVideoElement **)(a2 + 24), 1))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsHTMLVideoElement_webkitDisplayingFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1992);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = v4 + 1;
    v5 = *(_QWORD *)(v3 + 56);
    if (v5)
      v6 = v5 == v2;
    else
      v6 = 0;
    v7 = v6 || *(_DWORD *)(v2 + 1080) != 0;
    if (v4 == -1)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v3 + 8) = v4;
  }
  else
  {
    v7 = *(_DWORD *)(v2 + 1080) != 0;
  }
  if (v7)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsHTMLVideoElement_webkitWirelessVideoPlaybackDisabled(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::MediaElementSession *v3;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(WebCore::MediaElementSession **)(v2 + 1600);
  if (!v3)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(*(WebCore::HTMLMediaElement **)(a2 + 24));
    v3 = *(WebCore::MediaElementSession **)(v2 + 1600);
  }
  if (WebCore::MediaElementSession::wirelessVideoPlaybackDisabled(v3))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSHTMLVideoElement_webkitWirelessVideoPlaybackDisabled(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::webkitwirelessvideoplaybackdisabledAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLVideoElement_webkitPresentationMode(uint64_t a1, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 1080) == 1)
    v2 = 1;
  else
    v2 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 1080) & 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((_MergedGlobals_1069[0] & 1) == 0)
  {
    _MergedGlobals_19 += 2;
    dword_1ECE789B0 += 2;
    qword_1EE335EA8 = (uint64_t)&_MergedGlobals_19;
    unk_1EE335EB0 = &dword_1ECE789B0;
    dword_1ECE789D0 += 2;
    qword_1EE335EB8 = (uint64_t)&dword_1ECE789D0;
    _MergedGlobals_1069[0] = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1069[8 * v2 + 408];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_9:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_12;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_9;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_12:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsHTMLVideoElement_onenterpictureinpicture(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 776), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSHTMLVideoElement_onenterpictureinpicture(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 776), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsHTMLVideoElement_onleavepictureinpicture(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1088), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSHTMLVideoElement_onleavepictureinpicture(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1088), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsHTMLVideoElement_autoPictureInPicture(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::autopictureinpictureAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::autopictureinpictureAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::autopictureinpictureAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLVideoElement_autoPictureInPicture(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::autopictureinpictureAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLVideoElement_disablePictureInPicture(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::disablepictureinpictureAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::disablepictureinpictureAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::disablepictureinpictureAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLVideoElement_disablePictureInPicture(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::disablepictureinpictureAttr, v12, a4);
  return 1;
}

uint64_t WebCore::JSHTMLVideoElement::subspaceForImpl(WebCore::JSHTMLVideoElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4768);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 4768);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 4768);
    *(_QWORD *)(v8 + 4768) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4768);
  *(_QWORD *)(v3 + 4768) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSHTMLVideoElementOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v10 = v9[15];
  if (!v10)
    return WebCore::JSNodeOwner::isReachableFromOpaqueRoots(a1, a2, 0, a4, a5);
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11 || *(_BYTE *)(v11 + 180) || !v9[16] && !(*(unsigned int (**)(_QWORD *))(v9[14] + 64))(v9 + 14))
    return WebCore::JSNodeOwner::isReachableFromOpaqueRoots(a1, a2, 0, a4, a5);
  if (a5)
  {
    *a5 = "ActiveDOMObject with pending activity";
    a5[1] = 38;
  }
  return 1;
}

uint64_t WebCore::JSHTMLVideoElement::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSHTMLVideoElement::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::HardwareAcceleration>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::$_0::operator() const(void)::impl;
    unk_1EE2F46B0 = &WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F46B8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::HardwareAcceleration)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::HardwareAcceleration>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  char **v13;
  int v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint64_t v23;
  unint64_t v24;

  v3 = a1;
  v24 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v24, a1);
  v4 = v23;
  if (!v23)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "no-preference" && v6 == 13)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 110 || *(_QWORD *)(v5 + 1) != 0x7265666572702D6FLL || *(_QWORD *)(v5 + 5) != 0x65636E6572656665)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 110)
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFFC0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968BFFD0);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0])
        goto LABEL_16;
    }
LABEL_44:
    v13 = &WebCore::parseEnumerationFromString<WebCore::HardwareAcceleration>(WTF::String const&)::mappings;
    goto LABEL_45;
  }
  if (v5 == "no-preference" && v6 == 13)
    goto LABEL_44;
  v11 = v7 << 32;
  v12 = v6 != 15;
  if (v5 == "prefer-hardware" || v6 != 15)
  {
    v14 = *(_DWORD *)(v4 + 4);
    if (v5 == "prefer-hardware" && v6 == 15)
      goto LABEL_27;
    goto LABEL_31;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 == 112)
    {
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFFE0);
      v18.i16[0] = vminvq_u16(v18);
      v12 = v18.i8[0];
      if (v18.i32[0])
      {
        v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1968BFFF0);
        v19.i16[0] = vminvq_u16(v19);
        v12 = v19.i8[0];
        if (v19.i32[0])
          goto LABEL_27;
      }
    }
    else
    {
      v12 = 0;
    }
    v14 = 15;
LABEL_31:
    if (v5 == "prefer-software" || v12)
    {
      if (v6 == 15 && v5 == "prefer-software")
        goto LABEL_38;
    }
    else
    {
      if (!v14)
      {
LABEL_38:
        v13 = &off_1E32A27E0;
        goto LABEL_45;
      }
      if (v11)
      {
        if (*v5 == 112 && *(_QWORD *)(v5 + 1) == 0x6F732D7265666572 && *(_QWORD *)(v5 + 7) == 0x6572617774666F73)
          goto LABEL_38;
      }
      else if (*(_WORD *)v5 == 112)
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C0000);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
        {
          v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1968C0010);
          v21.i16[0] = vminvq_u16(v21);
          if (v21.i32[0])
            goto LABEL_38;
        }
      }
    }
LABEL_16:
    v9 = 0;
    goto LABEL_46;
  }
  if (*v5 != 112 || *(_QWORD *)(v5 + 1) != 0x61682D7265666572 || *(_QWORD *)(v5 + 7) != 0x6572617764726168)
  {
    v12 = 0;
    v14 = 15;
    v11 = 0x100000000;
    goto LABEL_31;
  }
LABEL_27:
  v13 = &off_1E32A27C8;
LABEL_45:
  v9 = *((unsigned int *)v13 + 4) | 0x100000000;
LABEL_46:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSHashChangeEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::VM **v7;
  JSC::JSCell *v8;
  JSC::VM *v9;
  uint64_t Object;
  JSC::Structure *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  char v18;
  JSC::VM *v19;
  double v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  JSC::VM *v24;
  double v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  JSC::VM *v29;
  double v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WebCore::JSDOMGlobalObject *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  JSCell *v53;
  JSC::JSCell *v54;
  JSC::JSGlobalObject *v55;
  JSC::JSObject *v56;
  JSC::JSGlobalObject *v57;
  WebCore::JSEvent *v58;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v60;
  JSC::Structure *v61;
  unint64_t SubclassStructure;
  _DWORD *v63;
  JSValue v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  int *v69;
  int v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  int *v74;
  int v75;
  BOOL v76;
  int v77;
  uint64_t v78;
  int *v79;
  int v80;
  uint64_t v81;
  JSC::VM *v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  unint64_t v93;
  int v94;
  JSC::VM *v95;
  char v96;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v65.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v65);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v89);
  v6 = v90;
  if (!v90)
  {
    v7 = (JSC::VM **)MEMORY[0x1E0CBF738];
    v81 = v5;
    v82 = v3;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v95 = (JSC::VM *)*((_QWORD *)a1 + 7);
    }
    else
    {
      v8 = *(JSC::JSCell **)(a2 + 56);
      v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v95 = v9;
      if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
        {
          JSC::throwTypeError();
          goto LABEL_119;
        }
        v11 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v12 = (WTF::StringImpl *)v93;
        v14 = JSC::JSObject::get(v11, a1, v93);
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v13);
          else
            *(_DWORD *)v12 -= 2;
        }
        if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        {
LABEL_119:
          v53 = 0;
          LODWORD(v14) = 1;
          v88 = 1;
LABEL_101:
          ((void (*)(unint64_t *, BOOL *))off_1E32A90F0[v14])(&v93, &v83);
          v6 = v90;
          goto LABEL_102;
        }
        if (v14 == 10)
        {
          v15 = 0;
          while (1)
          {
            WTF::AtomStringImpl::addLiteral();
            v21 = (WTF::StringImpl *)v93;
            v23 = JSC::JSObject::get(v11, a1, v93);
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v22);
              else
                *(_DWORD *)v21 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_119;
            if (v23 == 10)
            {
              v16 = 0;
              goto LABEL_35;
            }
            v24 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v23 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v25 = v23 - 0x2000000000000;
            if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v23 & 0xFFFE000000000002) != 0)
              {
                v16 = v23 == 7;
                goto LABEL_34;
              }
              v72 = *(unsigned __int8 *)(v23 + 5);
              if (v72 == 3)
              {
                v75 = *(_DWORD *)(v23 + 8);
                goto LABEL_183;
              }
              if (v72 == 2)
              {
                v73 = *(_QWORD *)(v23 + 8);
                if ((v73 & 1) != 0)
                  v74 = (int *)(v23 + 16);
                else
                  v74 = (int *)(v73 + 4);
                v75 = *v74;
LABEL_183:
                v71 = v75 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_185:
                  v16 = 1;
                  goto LABEL_34;
                }
                v71 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_195:
              v16 = !v71;
              goto LABEL_34;
            }
            if (v25 > 0.0)
              goto LABEL_185;
            v16 = v25 < 0.0;
LABEL_34:
            if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
              goto LABEL_119;
LABEL_35:
            WTF::AtomStringImpl::addLiteral();
            v26 = (WTF::StringImpl *)v93;
            v28 = JSC::JSObject::get(v11, a1, v93);
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v27);
              else
                *(_DWORD *)v26 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_119;
            if (v28 == 10)
            {
              v17 = 0;
              goto LABEL_46;
            }
            v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v28 >= 0xFFFE000000000000)
            {
              v76 = (_DWORD)v28 == 0;
              goto LABEL_199;
            }
            *(_QWORD *)&v30 = v28 - 0x2000000000000;
            if (v28 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v28 & 0xFFFE000000000002) != 0)
              {
                v17 = v28 == 7;
                goto LABEL_45;
              }
              v77 = *(unsigned __int8 *)(v28 + 5);
              if (v77 == 3)
              {
                v80 = *(_DWORD *)(v28 + 8);
              }
              else
              {
                if (v77 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_189:
                    v17 = 1;
                    goto LABEL_45;
                  }
                  v76 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_199;
                }
                v78 = *(_QWORD *)(v28 + 8);
                if ((v78 & 1) != 0)
                  v79 = (int *)(v28 + 16);
                else
                  v79 = (int *)(v78 + 4);
                v80 = *v79;
              }
              v76 = v80 == 0;
LABEL_199:
              v17 = !v76;
              goto LABEL_45;
            }
            if (v30 > 0.0)
              goto LABEL_189;
            v17 = v30 < 0.0;
LABEL_45:
            if (*((_DWORD *)v29 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v29) & 1) != 0)
              goto LABEL_119;
LABEL_46:
            WTF::AtomStringImpl::addLiteral();
            v31 = (WTF::StringImpl *)v93;
            v33 = JSC::JSObject::get(v11, a1, v93);
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v32);
              else
                *(_DWORD *)v31 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_119;
            if (v33 == 10)
            {
              v18 = 0;
              v7 = (JSC::VM **)MEMORY[0x1E0CBF738];
LABEL_15:
              v9 = *v7;
              if (*v7)
                *(_DWORD *)v9 += 2;
              v94 = 0;
              v93 = 0;
              if ((v18 & 1) != 0)
              {
LABEL_60:
                v38 = *v7;
                if (*v7)
                  *(_DWORD *)v38 += 2;
                v92 = 0;
LABEL_65:
                LODWORD(v14) = 0;
                v39 = 0;
                v91 = 0;
                v83 = v15;
                v84 = v16;
                v85 = v17;
                v86 = v38;
                v87 = v9;
                v88 = 0;
                v9 = 0;
                goto LABEL_66;
              }
LABEL_54:
              WTF::AtomStringImpl::addLiteral();
              v36 = v91;
              v11 = (JSC::Structure *)JSC::JSObject::get(v11, a1, (unint64_t)v91);
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v37);
                else
                  *(_DWORD *)v36 -= 2;
              }
              if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
              {
                LODWORD(v14) = 1;
                v88 = 1;
              }
              else
              {
                if (v11 == (JSC::Structure *)10)
                {
                  v7 = (JSC::VM **)MEMORY[0x1E0CBF738];
                  goto LABEL_60;
                }
                WebCore::valueToUSVString(a1, (uint64_t)v11, (uint64_t)&v91);
                v39 = v92;
                if (!v92)
                {
                  v38 = v91;
                  goto LABEL_65;
                }
                LODWORD(v14) = 1;
                v88 = 1;
                if (v92 != -1)
LABEL_66:
                  ((void (*)(char *, WTF::StringImpl **))off_1E32A90E0[v39])(&v96, &v91);
              }
              v35 = v94;
              goto LABEL_68;
            }
            WebCore::valueToUSVString(a1, v33, (uint64_t)&v93);
            v35 = v94;
            if (!v94)
            {
              v9 = (JSC::VM *)v93;
              v93 = 0;
              goto LABEL_54;
            }
            v9 = 0;
            LODWORD(v14) = 1;
            v88 = 1;
LABEL_68:
            if (v35 != -1)
              ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32A90E0[v35])(&v91, &v93);
            if (!v9)
              goto LABEL_73;
            if (*(_DWORD *)v9 != 2)
            {
              *(_DWORD *)v9 -= 2;
LABEL_73:
              if ((_DWORD)v14)
                goto LABEL_106;
              goto LABEL_74;
            }
            WTF::StringImpl::destroy(v9, v34);
            LODWORD(v14) = v88;
            if (v88)
            {
LABEL_106:
              v53 = 0;
              goto LABEL_101;
            }
LABEL_74:
            if (!v90)
            {
              v40 = v89;
              v89 = 0;
              v41 = v83;
              v42 = v84;
              v43 = v85;
              v44 = v86;
              v45 = v87;
              v86 = 0;
              v87 = 0;
              v46 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v46);
              *(_QWORD *)(v46 + 8) = 0;
              if (v41)
                v50 = 2260994;
              else
                v50 = 2260992;
              v51 = v50 | (v40 != 0) | (4 * v42) | (8 * v43) | *(_DWORD *)(v46 + 20) & 0xFFC00000;
              *(_DWORD *)(v46 + 16) = 1;
              *(_DWORD *)(v46 + 20) = v51;
              if (v40)
              {
                *(_DWORD *)v40 += 2;
                v51 = *(_DWORD *)(v46 + 20);
              }
              *(_QWORD *)(v46 + 24) = v40;
              *(_QWORD *)(v46 + 32) = 0;
              *(_QWORD *)(v46 + 40) = 0;
              *(_QWORD *)(v46 + 48) = 0;
              *(_QWORD *)(v46 + 56) = v49;
              *(_QWORD *)(v46 + 64) = 0;
              *(_DWORD *)(v46 + 20) = v51 | 0x4000;
              *(_QWORD *)v46 = off_1E32AD800;
              if (v44)
                *(_DWORD *)v44 += 2;
              *(_QWORD *)(v46 + 72) = v44;
              if (v45)
              {
                v52 = *(_DWORD *)v45;
                *(_DWORD *)v45 += 2;
                *(_QWORD *)(v46 + 80) = v45;
                v93 = v46;
                if (v52)
                  *(_DWORD *)v45 = v52;
                else
                  WTF::StringImpl::destroy(v45, v47);
              }
              else
              {
                *(_QWORD *)(v46 + 80) = 0;
                v93 = v46;
              }
              if (v44)
              {
                if (*(_DWORD *)v44 != 2)
                {
                  *(_DWORD *)v44 -= 2;
                  goto LABEL_88;
                }
                WTF::StringImpl::destroy(v44, v47);
                if (!v40)
                {
LABEL_91:
                  if (*(void (***)(WebCore::HashChangeEvent *__hidden))v46 != off_1E32AD800)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194C922A4);
                  }
                  v53 = (JSCell *)WebCore::createWrapper<WebCore::HashChangeEvent,WebCore::HashChangeEvent>(*(JSC::VM **)(v81 + 40), (uint64_t *)&v93, v48);
                  v54 = *(JSC::JSCell **)(a2 + 40);
                  if (((unint64_t)v54 & 0xFFFE000000000002) == 0)
                  {
                    v55 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v54);
                    if (v55)
                    {
                      v57 = v55;
                      if (v55 != *(JSC::JSGlobalObject **)(a2 + 24))
                      {
                        v58 = (WebCore::JSEvent *)*((_QWORD *)a1 + 7);
                        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v55, v56);
                        if (!*((_DWORD *)v58 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) == 0)
                        {
                          v60 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSHashChangeEvent>(v58, FunctionRealm);
                          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v57, v60, v61);
                          if (!*((_DWORD *)v58 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) == 0)
                            JSC::JSObject::setStructure(v53, v58, SubclassStructure);
                        }
                      }
                    }
                  }
                  if (*((_DWORD *)v82 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
                    v53 = 0;
                  v63 = (_DWORD *)v93;
                  v93 = 0;
                  if (v63)
                  {
                    if (v63[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
                    else
                      --v63[4];
                  }
                  LODWORD(v14) = 0;
                  goto LABEL_101;
                }
              }
              else
              {
LABEL_88:
                if (!v40)
                  goto LABEL_91;
              }
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v47);
              else
                *(_DWORD *)v40 -= 2;
              goto LABEL_91;
            }
            v19 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_151:
            v66 = (_DWORD)v14 == 0;
LABEL_191:
            v15 = !v66;
LABEL_23:
            if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
              goto LABEL_119;
          }
          v71 = (_DWORD)v23 == 0;
          goto LABEL_195;
        }
        v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v14 >= 0xFFFE000000000000)
          goto LABEL_151;
        *(_QWORD *)&v20 = v14 - 0x2000000000000;
        if (v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v20 <= 0.0)
          {
            v15 = v20 < 0.0;
            goto LABEL_23;
          }
        }
        else
        {
          if ((v14 & 0xFFFE000000000002) != 0)
          {
            v15 = v14 == 7;
            goto LABEL_23;
          }
          v67 = *(unsigned __int8 *)(v14 + 5);
          if (v67 == 3)
          {
            v70 = *(_DWORD *)(v14 + 8);
LABEL_179:
            v66 = v70 == 0;
            goto LABEL_191;
          }
          if (v67 == 2)
          {
            v68 = *(_QWORD *)(v14 + 8);
            if ((v68 & 1) != 0)
              v69 = (int *)(v14 + 16);
            else
              v69 = (int *)(v68 + 4);
            v70 = *v69;
            goto LABEL_179;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v66 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_191;
          }
        }
        v15 = 1;
        goto LABEL_23;
      }
    }
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    goto LABEL_15;
  }
  v53 = 0;
LABEL_102:
  if (v6 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E32A9100[v6])(&v83, &v89);
  return v53;
}

uint64_t WebCore::JSHashChangeEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSHashChangeEvent::createPrototype(WebCore::JSHashChangeEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
  Structure = WebCore::JSHashChangeEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSHashChangeEventPrototype::create(this, Structure, v7, v8);
}

uint64_t WebCore::JSHashChangeEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHashChangeEventPrototype::create(WebCore::JSHashChangeEventPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSHashChangeEvent::s_info, &WebCore::JSHashChangeEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHashChangeEvent>,(WebCore::DOMConstructorID)453>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3624);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructor<WebCore::JSHashChangeEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSHashChangeEvent>((WebCore::JSEvent *)a1, (JSC::VM *)a2) + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3624) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHashChangeEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHashChangeEventPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHashChangeEvent>,(WebCore::DOMConstructorID)453>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHashChangeEvent_oldURL(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsHashChangeEvent_newURL(uint64_t a1, uint64_t a2)
{
  return WebCore::toJS<WebCore::IDLUSVString,WTF::String>(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) + 80));
}

uint64_t WebCore::JSHashChangeEvent::subspaceForImpl(WebCore::JSHashChangeEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3704);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3704))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 3704);
    *(_QWORD *)(v9 + 3704) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSHashChangeEvent::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::HdrMetadataType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::$_0::operator() const(void)::impl;
    unk_1EE2F46D0 = &WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F46D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::HdrMetadataType)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::HdrMetadataType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  int v9;
  int v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  int v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint64_t v24;
  unint64_t v25;

  v3 = a1;
  v25 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_40:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, a1);
  v4 = v24;
  if (!v24)
    goto LABEL_40;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "smpteSt2086" && v6 == 11)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 115 || *(_QWORD *)(v5 + 1) != 0x303274536574706DLL || *(_QWORD *)(v5 + 3) != 0x3638303274536574)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 115)
        goto LABEL_16;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C0020);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0])
        goto LABEL_16;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968C0030);
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0])
        goto LABEL_16;
    }
LABEL_44:
    v14 = &WebCore::parseEnumerationFromString<WebCore::HdrMetadataType>(WTF::String const&)::mappings;
    goto LABEL_45;
  }
  if (v5 == "smpteSt2086" && v6 == 11)
    goto LABEL_44;
  v12 = v7 << 32;
  v13 = v6 != 14;
  if (v5 == "smpteSt2094-10" || v6 != 14)
  {
    v15 = *(_DWORD *)(v4 + 4);
    if (v5 == "smpteSt2094-10" && v6 == 14)
      goto LABEL_27;
    goto LABEL_31;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 == 115)
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C0020);
      v19.i16[0] = vminvq_u16(v19);
      v13 = v19.i8[0];
      if (v19.i32[0])
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968C0040);
        v20.i16[0] = vminvq_u16(v20);
        v13 = v20.i8[0];
        if (v20.i32[0])
          goto LABEL_27;
      }
    }
    else
    {
      v13 = 0;
    }
    v15 = 14;
LABEL_31:
    if (v5 == "smpteSt2094-40" || v13)
    {
      if (v6 == 14 && v5 == "smpteSt2094-40")
        goto LABEL_38;
    }
    else
    {
      if (!v15)
      {
LABEL_38:
        v14 = &off_1E32A2A30;
        goto LABEL_45;
      }
      if (v12)
      {
        if (*v5 == 115 && *(_QWORD *)(v5 + 1) == 0x303274536574706DLL && *(_QWORD *)(v5 + 6) == 0x30342D3439303274)
          goto LABEL_38;
      }
      else if (*(_WORD *)v5 == 115)
      {
        v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C0020);
        v21.i16[0] = vminvq_u16(v21);
        if (v21.i32[0])
        {
          v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968C0050);
          v22.i16[0] = vminvq_u16(v22);
          if (v22.i32[0])
            goto LABEL_38;
        }
      }
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_46;
  }
  if (*v5 != 115 || *(_QWORD *)(v5 + 1) != 0x303274536574706DLL || *(_QWORD *)(v5 + 6) != 0x30312D3439303274)
  {
    v13 = 0;
    v15 = 14;
    v12 = 0x100000000;
    goto LABEL_31;
  }
LABEL_27:
  v14 = &off_1E32A2A18;
LABEL_45:
  v10 = *((unsigned __int8 *)v14 + 16);
  v9 = 1;
LABEL_46:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSHighlight>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  JSCell *v22;
  JSC::JSCell *v23;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v25;
  JSC::JSGlobalObject *v26;
  JSC::VM *v27;
  JSC::Structure *v28;
  uint64_t FunctionRealm;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  int v37;
  JSC::JSObject *v38;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v40;
  JSC::Structure *v41;
  JSC::JSCell *v42;
  uint64_t v43;
  unint64_t SubclassStructure;
  WTF *v45;
  uint64_t v47;
  WebCore::HighlightRange **v48;
  uint64_t v49;
  WebCore::HighlightRange *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  WTF *v56;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(int *)(a2 + 32);
  v7 = v6 - 1;
  if (v6 == 1)
  {
    v10 = 0;
    v56 = 0;
  }
  else
  {
    v8 = (v6 - 1);
    v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8 + 8));
    *(_DWORD *)v10 = v7;
    if (v7)
    {
      v11 = 0;
      v12 = v7;
      while (1)
      {
        v13 = *(_QWORD *)(a2 + ((uint64_t)((v11 << 32) + 0x600000000) >> 29));
        v56 = (WTF *)*((_QWORD *)a1 + 7);
        if ((v13 & 0xFFFE000000000002) != 0)
          break;
        v14 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
        v15 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
        v16 = (char **)(16 * v14);
        if ((_DWORD)v14)
          v17 = v16 == &WebCore::JSAbstractRange::s_info;
        else
          v17 = 1;
        if (!v17)
        {
          do
          {
            v16 = (char **)v16[2];
            v15 = v16 != 0;
          }
          while (v16 != &WebCore::JSAbstractRange::s_info && v16 != 0);
        }
        if (!v15)
          break;
        v19 = *(_QWORD *)(v13 + 24);
        if (!v19)
          break;
        if (*((_DWORD *)v4 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
            goto LABEL_23;
          v12 = *(unsigned int *)v10;
        }
        *((_QWORD *)v10 + ++v11) = v19;
        if (v11 >= v12)
          goto LABEL_26;
      }
      JSC::throwTypeError();
      if (*((_DWORD *)v4 + 20))
        JSC::VM::hasExceptionsAfterHandlingTraps(v4);
LABEL_23:
      v12 = v11;
      *(_DWORD *)v10 = v11;
    }
    else
    {
      v12 = 0;
    }
LABEL_26:
    if (v12 != v8)
    {
      WTF::fastFree(v10, v9);
      v10 = 0;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
      v56 = 0;
      if (v10)
      {
        WTF::fastFree(v10, v54);
        v10 = 0;
      }
    }
    else
    {
      v56 = v10;
    }
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v22 = 0;
    goto LABEL_48;
  }
  v20 = WTF::fastMalloc((WTF *)0x20);
  v55 = (WTF *)WebCore::Highlight::Highlight(v20, (unsigned int **)&v56);
  v22 = (JSCell *)WebCore::createWrapper<WebCore::Highlight,WebCore::Highlight>(*(_QWORD *)(v5 + 40), &v55);
  v23 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v23 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v23);
    if (Object)
    {
      v26 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v25);
        if (!*((_DWORD *)v27 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) == 0)
        {
          v30 = *(_QWORD *)(FunctionRealm + 3296);
          if (v30)
          {
            v31 = *(_DWORD *)(v30 - 8);
            v32 = ((unint64_t)&WebCore::JSHighlight::s_info + ~((_QWORD)&WebCore::JSHighlight::s_info << 32)) ^ (((unint64_t)&WebCore::JSHighlight::s_info + ~((_QWORD)&WebCore::JSHighlight::s_info << 32)) >> 22);
            v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
            v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
            v35 = v31 & ((v34 >> 31) ^ v34);
            v36 = *(char ***)(v30 + 16 * v35);
            if (v36 == &WebCore::JSHighlight::s_info)
            {
LABEL_40:
              v38 = *(JSC::JSObject **)(v30 + 16 * v35 + 8);
              if (v38)
              {
LABEL_42:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v26, v38, v28);
                if (!*((_DWORD *)v27 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) == 0)
                  JSC::JSObject::setStructure(v22, v27, SubclassStructure);
                goto LABEL_44;
              }
            }
            else
            {
              v37 = 1;
              while (v36)
              {
                v35 = ((_DWORD)v35 + v37) & v31;
                v36 = *(char ***)(v30 + 16 * v35);
                ++v37;
                if (v36 == &WebCore::JSHighlight::s_info)
                  goto LABEL_40;
              }
            }
          }
          Structure = WebCore::JSHighlightPrototype::createStructure((uint64_t *)v27, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v42 = (JSC::JSCell *)WebCore::JSHighlightPrototype::create(v27, Structure, v40, v41);
          v43 = WebCore::JSHighlight::createStructure((uint64_t *)v27, FunctionRealm, v42);
          v38 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v43, (uint64_t)&WebCore::JSHighlight::s_info);
          goto LABEL_42;
        }
      }
    }
  }
LABEL_44:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v22 = 0;
  v45 = v55;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      v47 = *((unsigned int *)v55 + 5);
      if ((_DWORD)v47)
      {
        v48 = (WebCore::HighlightRange **)*((_QWORD *)v55 + 1);
        v49 = 8 * v47;
        do
        {
          v50 = *v48;
          *v48 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 1)
            {
              WebCore::HighlightRange::~HighlightRange(v50, v21);
              WTF::fastFree(v51, v52);
            }
            else
            {
              --*(_DWORD *)v50;
            }
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
      }
      v53 = (WTF *)*((_QWORD *)v45 + 1);
      if (v53)
      {
        *((_QWORD *)v45 + 1) = 0;
        *((_DWORD *)v45 + 4) = 0;
        WTF::fastFree(v53, v21);
      }
      WTF::fastFree(v45, v21);
    }
    else
    {
      --*(_DWORD *)v55;
    }
  }
LABEL_48:
  v56 = 0;
  if (v10)
    WTF::fastFree(v10, v21);
  return v22;
}

uint64_t *WebCore::JSHighlight::destroy(WebCore::JSHighlight *this, JSC::JSCell *a2)
{
  return WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref((uint64_t *)this + 3, a2);
}

uint64_t WebCore::JSHighlight::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHighlightPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHighlightPrototype::create(WebCore::JSHighlightPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSHighlight::s_info, (uint64_t)&WebCore::JSHighlightPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3024);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHighlight>,(WebCore::DOMConstructorID)104>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 832);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSHighlight>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSHighlight::s_info + ~((_QWORD)&WebCore::JSHighlight::s_info << 32)) ^ (((unint64_t)&WebCore::JSHighlight::s_info + ~((_QWORD)&WebCore::JSHighlight::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSHighlight::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSHighlight::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSHighlightPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSHighlightPrototype::create((WebCore::JSHighlightPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSHighlight::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSHighlight::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 832) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHighlightConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHighlightPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHighlight>,(WebCore::DOMConstructorID)104>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsHighlight_priority(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 28) | 0xFFFE000000000000;
}

BOOL WebCore::setJSHighlight_priority(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  JSC::VM *v22;
  unint64_t v23;
  unint64_t v24;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = a3;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlight::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlight::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  v24 = a3;
  if (a3 < 0xFFFE000000000000)
  {
    v17 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v22 = v4;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v24, a1);
      v4 = v22;
      v17 = v23;
    }
    v18 = (v17 >> 52) & 0x7FF;
    v19 = v18 - 1023;
    v20 = v17 >> (51 - (v17 >> 52));
    if (v18 > 0x433)
      LODWORD(v20) = v17 << ((v17 >> 52) - 51);
    if (v18 >= 0x41F)
      v21 = v20;
    else
      v21 = (((1 << ((v17 >> 52) + 1)) - 1) & v20) + (1 << ((v17 >> 52) + 1));
    if ((v17 & 0x8000000000000000) != 0)
      v21 = -v21;
    if (v19 <= 0x53)
      v5 = v21;
    else
      v5 = 0;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    return 0;
  if (*(_DWORD *)(v11 + 28) != v5)
  {
    *(_DWORD *)(v11 + 28) = v5;
    v12 = *(unsigned int *)(v11 + 20);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(v11 + 8);
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        WebCore::Highlight::repaintRange(*(_QWORD *)(v15 + 16));
        v14 -= 8;
      }
      while (v14);
    }
  }
  return 1;
}

uint64_t WebCore::jsHighlight_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 24);
  if ((byte_1EE335D11 & 1) == 0)
  {
    dword_1ECE789F0 += 2;
    byte_1EE335D11 = 1;
    dword_1ECE78A10 += 2;
    qword_1EE335EC0 = (uint64_t)&dword_1ECE789F0;
    unk_1EE335EC8 = &dword_1ECE78A10;
    dword_1ECE78A30 += 2;
    qword_1EE335ED0 = (uint64_t)&dword_1ECE78A30;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1069[8 * v4 + 432];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSHighlight_type(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  char v16;
  int v17;
  char **v19;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint64_t v27;
  unint64_t v28;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSHighlight::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSHighlight::s_info && v7 != 0);
    }
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v28 = this;
      if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, a1);
        v11 = v27;
        if (v27)
        {
LABEL_18:
          v12 = *(_DWORD *)(v11 + 16);
          v13 = *(const char **)(v11 + 8);
          v14 = *(_DWORD *)(v11 + 4);
          if (v13 != "grammar-error" && v14 == 13)
          {
            if ((v12 & 4) != 0)
            {
              if (*v13 != 103
                || *(_QWORD *)(v13 + 1) != 0x652D72616D6D6172
                || *(_QWORD *)(v13 + 5) != 0x726F7272652D7261)
              {
                goto LABEL_27;
              }
            }
            else
            {
              if (*(_WORD *)v13 != 103)
                goto LABEL_27;
              v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1968C0060);
              v21.i16[0] = vminvq_u16(v21);
              if (!v21.i32[0])
                goto LABEL_27;
              v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 10), (int16x8_t)xmmword_1968C0070);
              v22.i16[0] = vminvq_u16(v22);
              if (!v22.i32[0])
                goto LABEL_27;
            }
          }
          else if (v13 != "grammar-error" || v14 != 13)
          {
            if (v13 != "highlight" && v14 == 9)
            {
              if ((v12 & 4) != 0)
              {
                if (*v13 == 104 && *(_DWORD *)(v13 + 1) == 1818781545 && *(_DWORD *)(v13 + 5) == 1952999273)
                {
LABEL_38:
                  v19 = &off_1E32A2A60;
LABEL_49:
                  v17 = 0;
                  v16 = *((_BYTE *)v19 + 16);
LABEL_50:
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v11 -= 2;
                  if (*((_DWORD *)v4 + 20))
                  {
                    if (((v17 | JSC::VM::hasExceptionsAfterHandlingTraps(v4)) & 1) == 0)
                      goto LABEL_54;
                  }
                  else if ((v17 & 1) == 0)
                  {
LABEL_54:
                    *(_BYTE *)(v10 + 24) = v16;
                    return 1;
                  }
                  return 0;
                }
              }
              else if (*(_WORD *)v13 == 104)
              {
                v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1968C0080);
                v23.i16[0] = vminvq_u16(v23);
                if (v23.i32[0])
                  goto LABEL_38;
              }
LABEL_27:
              v16 = 0;
              v17 = 1;
              goto LABEL_50;
            }
            if (v13 == "highlight" && v14 == 9)
              goto LABEL_38;
            if (v13 == "spelling-error" || v14 != 14)
            {
              if (v14 != 14 || v13 != "spelling-error")
                goto LABEL_27;
            }
            else if ((v12 & 4) != 0)
            {
              if (*v13 != 115
                || *(_QWORD *)(v13 + 1) != 0x2D676E696C6C6570
                || *(_QWORD *)(v13 + 6) != 0x726F7272652D676ELL)
              {
                goto LABEL_27;
              }
            }
            else
            {
              if (*(_WORD *)v13 != 115)
                goto LABEL_27;
              v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1968C0090);
              v24.i16[0] = vminvq_u16(v24);
              if (!v24.i32[0])
                goto LABEL_27;
              v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 12), (int16x8_t)xmmword_1968C00A0);
              v25.i16[0] = vminvq_u16(v25);
              if (!v25.i32[0])
                goto LABEL_27;
            }
            v19 = &off_1E32A2A78;
            goto LABEL_49;
          }
          v19 = &WebCore::parseEnumerationFromString<WebCore::Highlight::Type>(WTF::String const&)::mappings;
          goto LABEL_49;
        }
LABEL_42:
        if (*((_DWORD *)v4 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        return 0;
      }
      v11 = *(_QWORD *)(this + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v11)
        {
LABEL_17:
          if (v11)
            goto LABEL_18;
          goto LABEL_42;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsHighlight_size(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char BackingSet;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _BYTE v24[8];

  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSHighlight::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSHighlight::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
  BackingSet = WebCore::getBackingSet((unint64_t)this, a2, a3);
  v12 = v11;
  if (BackingSet)
  {
    v13 = *((_QWORD *)a2 + 3);
    v14 = *(unsigned int *)(v13 + 20);
    if ((_DWORD)v14)
    {
      v15 = *(uint64_t **)(v13 + 8);
      v16 = 8 * v14;
      do
      {
        v17 = *v15++;
        v18 = *(_QWORD *)(v17 + 16);
        JSC::JSLockHolder::JSLockHolder();
        v19 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v18);
        WebCore::addToBackingSet((uint64_t)this, v12, v19);
        MEMORY[0x19AEA32A0](v24);
        v16 -= 8;
      }
      while (v16);
    }
  }
  v20 = (_DWORD *)MEMORY[0x1E0CBEBC8];
  *MEMORY[0x1E0CBEBC8] += 2;
  v22 = JSC::JSObject::get(v12, this, (unint64_t)v20);
  if (*v20 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBC8], v21);
  else
    *v20 -= 2;
  return v22;
}

uint64_t WebCore::JSHighlightOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSHighlightOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  WebCore::HighlightRange **v25;
  uint64_t v26;
  WebCore::HighlightRange *v27;
  WTF *v28;
  void *v29;
  WTF *v30;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v24)
    {
      v25 = *(WebCore::HighlightRange ***)(v3 + 8);
      v26 = 8 * v24;
      do
      {
        v27 = *v25;
        *v25 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 1)
          {
            WebCore::HighlightRange::~HighlightRange(v27, a2);
            WTF::fastFree(v28, v29);
          }
          else
          {
            --*(_DWORD *)v27;
          }
        }
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
    v30 = *(WTF **)(v3 + 8);
    if (v30)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v30, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::Highlight,WebCore::Highlight>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSHighlight::s_info + ~((_QWORD)&WebCore::JSHighlight::s_info << 32)) ^ (((unint64_t)&WebCore::JSHighlight::s_info + ~((_QWORD)&WebCore::JSHighlight::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSHighlight::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSHighlight::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSHighlightPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSHighlightPrototype::create((WebCore::JSHighlightPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSHighlight::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSHighlight::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 856);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 856))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 856);
    *(_QWORD *)(v26 + 856) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 856);
  *(_QWORD *)(v22 + 856) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335D20 & 1) == 0)
  {
    qword_1EE335D18 = (uint64_t)&off_1E32A7F30;
    byte_1EE335D20 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335D18;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::Highlight>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v16;
  WebCore::HighlightRange **v17;
  uint64_t v18;
  WebCore::HighlightRange *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v23;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v23 = a3;
  v12 = WebCore::createWrapper<WebCore::Highlight,WebCore::Highlight>(a2, &v23);
  v14 = v23;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      v16 = *((unsigned int *)v23 + 5);
      if ((_DWORD)v16)
      {
        v17 = (WebCore::HighlightRange **)*((_QWORD *)v23 + 1);
        v18 = 8 * v16;
        do
        {
          v19 = *v17;
          *v17 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
            {
              WebCore::HighlightRange::~HighlightRange(v19, v13);
              WTF::fastFree(v20, v21);
            }
            else
            {
              --*(_DWORD *)v19;
            }
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
      v22 = (WTF *)*((_QWORD *)v14 + 1);
      if (v22)
      {
        *((_QWORD *)v14 + 1) = 0;
        *((_DWORD *)v14 + 4) = 0;
        WTF::fastFree(v22, v13);
      }
      WTF::fastFree(v14, v13);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  return v12;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSHighlightRegistry>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  JSCell *v8;
  JSC::JSCell *v9;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v11;
  JSC::JSGlobalObject *v12;
  JSC::VM *v13;
  JSC::Structure *v14;
  uint64_t FunctionRealm;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  JSC::JSObject *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  unint64_t SubclassStructure;
  WTF *v32;
  void *v33;
  WebCore::HighlightRegistry *v34;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  v34 = (WebCore::HighlightRegistry *)v6;
  v8 = (JSCell *)WebCore::createWrapper<WebCore::HighlightRegistry,WebCore::HighlightRegistry>(*(_QWORD *)(v5 + 40), &v34);
  v9 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0)
    goto LABEL_14;
  Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v9);
  if (!Object)
    goto LABEL_14;
  v12 = Object;
  if (Object == *(JSC::JSGlobalObject **)(a2 + 24))
    goto LABEL_14;
  v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
  FunctionRealm = JSC::getFunctionRealm(a1, Object, v11);
  if (*((_DWORD *)v13 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
      goto LABEL_14;
  }
  v16 = *(_QWORD *)(FunctionRealm + 3296);
  if (!v16)
    goto LABEL_11;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSHighlightRegistry::s_info + ~((_QWORD)&WebCore::JSHighlightRegistry::s_info << 32)) ^ (((unint64_t)&WebCore::JSHighlightRegistry::s_info + ~((_QWORD)&WebCore::JSHighlightRegistry::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSHighlightRegistry::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSHighlightRegistry::s_info)
        goto LABEL_10;
    }
    goto LABEL_11;
  }
LABEL_10:
  v24 = *(JSC::JSObject **)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_11:
    Structure = WebCore::JSHighlightRegistryPrototype::createStructure((uint64_t *)v13, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSHighlightRegistryPrototype::create(v13, Structure, v26, v27);
    v29 = WebCore::JSHighlightRegistry::createStructure((uint64_t *)v13, FunctionRealm, v28);
    v24 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v29, (uint64_t)&WebCore::JSHighlightRegistry::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v12, v24, v14);
  if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
    JSC::JSObject::setStructure(v8, v13, SubclassStructure);
LABEL_14:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v8 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
    {
      WebCore::HighlightRegistry::~HighlightRegistry(v34, v7);
      WTF::fastFree(v32, v33);
    }
    else
    {
      --*(_DWORD *)v34;
    }
  }
  return v8;
}

WebCore::HighlightRegistry *WebCore::JSHighlightRegistry::destroy(WebCore::JSHighlightRegistry *this, JSC::JSCell *a2)
{
  WebCore::HighlightRegistry *result;
  WTF *v4;
  void *v5;

  result = (WebCore::HighlightRegistry *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::HighlightRegistry::~HighlightRegistry(result, a2);
      return (WebCore::HighlightRegistry *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSHighlightRegistry::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHighlightRegistryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHighlightRegistryPrototype::create(WebCore::JSHighlightRegistryPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSHighlightRegistry::s_info, (uint64_t)&WebCore::JSHighlightRegistryPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHighlightRegistry>,(WebCore::DOMConstructorID)105>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 840);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSHighlightRegistry>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSHighlightRegistry::s_info
         + ~((_QWORD)&WebCore::JSHighlightRegistry::s_info << 32)) ^ (((unint64_t)&WebCore::JSHighlightRegistry::s_info
                                                                     + ~((_QWORD)&WebCore::JSHighlightRegistry::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSHighlightRegistry::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSHighlightRegistry::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSHighlightRegistryPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSHighlightRegistryPrototype::create((WebCore::JSHighlightRegistryPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSHighlightRegistry::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSHighlightRegistry::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 840) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHighlightRegistryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHighlightRegistryPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHighlightRegistry>,(WebCore::DOMConstructorID)105>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHighlightRegistry_size(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char BackingMap;
  JSC::Structure *v11;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD v24[2];

  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSHighlightRegistry::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSHighlightRegistry::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
  BackingMap = WebCore::getBackingMap((unint64_t)this, a2, a3);
  v12 = v11;
  if (BackingMap)
  {
    v24[0] = this;
    v24[1] = v11;
    v13 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v13)
    {
      v14 = *(unsigned int *)(v13 - 4);
      v15 = v13 + 16 * v14;
      if (*(_DWORD *)(v13 - 12))
      {
        v16 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
        if ((_DWORD)v14)
        {
          v17 = 16 * v14;
          v16 = v13;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 16;
            v17 -= 16;
            if (!v17)
            {
              v16 = v15;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v16 = v13 + 16 * v14;
    }
    else
    {
      v16 = 0;
      v14 = 0;
    }
    v15 = v13 + 16 * v14;
    if (!v13)
    {
      v18 = 0;
LABEL_25:
      while (v16 != v18)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v24, (uint64_t *)v16, *(WTF **)(v16 + 8));
        v19 = v16 + 16;
        v16 = v15;
        if (v19 != v15)
        {
          v16 = v19;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 16;
            if (v16 == v15)
            {
              v16 = v15;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v18 = v13 + 16 * *(unsigned int *)(v13 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v20 = (_DWORD *)MEMORY[0x1E0CBEBC8];
  *MEMORY[0x1E0CBEBC8] += 2;
  v22 = JSC::JSObject::get(v12, this, (unint64_t)v20);
  if (*v20 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBC8], v21);
  else
    *v20 -= 2;
  return v22;
}

uint64_t WebCore::JSHighlightRegistryOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSHighlightRegistryOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::HighlightRegistry *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::HighlightRegistry *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::HighlightRegistry **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::HighlightRegistry **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::HighlightRegistry **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::HighlightRegistry::~HighlightRegistry(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::HighlightRegistry,WebCore::HighlightRegistry>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSHighlightRegistry::s_info
        + ~((_QWORD)&WebCore::JSHighlightRegistry::s_info << 32)) ^ (((unint64_t)&WebCore::JSHighlightRegistry::s_info
                                                                    + ~((_QWORD)&WebCore::JSHighlightRegistry::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSHighlightRegistry::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSHighlightRegistry::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSHighlightRegistryPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSHighlightRegistryPrototype::create((WebCore::JSHighlightRegistryPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSHighlightRegistry::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSHighlightRegistry::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 864);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 864))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 864);
    *(_QWORD *)(v26 + 864) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 864);
  *(_QWORD *)(v22 + 864) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335D30 & 1) == 0)
  {
    qword_1EE335D28 = (uint64_t)&off_1E32A7F60;
    byte_1EE335D30 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335D28;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::HighlightRegistry>(uint64_t a1, uint64_t a2, WebCore::HighlightRegistry *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::HighlightRegistry *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF *v15;
  void *v16;
  WebCore::HighlightRegistry *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::HighlightRegistry **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::HighlightRegistry **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v17 = a3;
  v12 = WebCore::createWrapper<WebCore::HighlightRegistry,WebCore::HighlightRegistry>(a2, &v17);
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::HighlightRegistry::~HighlightRegistry(v17, v13);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  return v12;
}

uint64_t WebCore::JSHistory::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = a2[11];
  if (v2 && *(_BYTE *)(v2 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194C96448);
  }
  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 40);
  if (v3)
  {
    if ((v3[1] & 3) != 0)
      v3 = 0;
    else
      v3 = (uint64_t *)*v3;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t *))(*a2 + 24))(a2, v3);
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::History::ScrollRestoration> [2]>::tryGet<WTF::String>(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char **v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  char v9;
  char v10;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v2 = *(unsigned int *)(a1 + 4) | ((unint64_t)((*(_DWORD *)(a1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v1 = 0;
    v2 = 0x100000000;
  }
  v7 = v1;
  v8 = v2;
  v9 = BYTE4(v2);
  v10 = 1;
  v3 = &WebCore::parseEnumerationFromString<WebCore::History::ScrollRestoration>(WTF::String const&)::mappings;
  if ((WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> [3]>::tryGet<WTF::String>(WTF::String const&)const::{lambda(WTF::String&)#1}::operator()<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> const>((uint64_t)&v7, "auto", 5) & 1) == 0)
  {
    v4 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> [3]>::tryGet<WTF::String>(WTF::String const&)const::{lambda(WTF::String&)#1}::operator()<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> const>((uint64_t)&v7, "manual", 7);
    v5 = 6;
    if (v4)
      v5 = 3;
    v3 = &(&WebCore::parseEnumerationFromString<WebCore::History::ScrollRestoration>(WTF::String const&)::mappings)[v5];
  }
  if (v3 == &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHistory>::s_info)
    return 0;
  else
    return v3 + 2;
}

uint64_t WebCore::parseEnumeration<WebCore::History::ScrollRestoration>(JSC::JSGlobalObject *a1, uint64_t a2)
{
  char **v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8;

  v8 = a2;
  JSC::JSValue::toWTFString((JSC::JSValue *)&v8, a1, &v7);
  v2 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::History::ScrollRestoration> [2]>::tryGet<WTF::String>((uint64_t)v7);
  if (v2)
    v4 = *(unsigned int *)v2 | 0x100000000;
  else
    v4 = 0;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WebCore::JSHistory::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
    return WTF::RefCounted<WebCore::History>::deref(v2 + 8, a2);
  return this;
}

uint64_t WebCore::JSHistory::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHistory::visitChildren(WebCore::JSHistory *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren();
    v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 40);
    if (!v6 || (v6[1] & 3) != 0)
      v7 = 0;
    else
      v7 = *v6;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

uint64_t WebCore::JSHistoryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHistoryPrototype::create(WebCore::JSHistoryPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSHistory::s_info, (uint64_t)&WebCore::JSHistoryPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHistory>,(WebCore::DOMConstructorID)715>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5720);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHistory>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSHistory::s_info + ~((_QWORD)&WebCore::JSHistory::s_info << 32)) ^ (((unint64_t)&WebCore::JSHistory::s_info + ~((_QWORD)&WebCore::JSHistory::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSHistory::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSHistory::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSHistoryPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSHistoryPrototype::create((WebCore::JSHistoryPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSHistory::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSHistory::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5720) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHistoryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHistoryPrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHistory>,(WebCore::DOMConstructorID)715>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHistory_length(JSC *a1, uint64_t a2)
{
  WebCore::History *v3;
  JSC::VM *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  int v13;
  JSC::VM *v14;
  unsigned __int8 v15[8];
  WTF::StringImpl *v16;

  v3 = *(WebCore::History **)(a2 + 24);
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v14 = v4;
  WebCore::History::length(v3, (uint64_t)&v11);
  if (!v13)
  {
    v6 = 0;
    if ((v11 & 0x80000000) != 0)
      v7 = COERCE__INT64((double)v11) + 0x2000000000000;
    else
      v7 = v11 | 0xFFFE000000000000;
LABEL_4:
    ((void (*)(unsigned __int8 *, unsigned int *))off_1E32AC358[v6])(v15, &v11);
    return v7;
  }
  if (v13 == 1)
  {
    v15[0] = v11;
    v9 = v12;
    v12 = 0;
    v16 = v9;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, &v14, v15);
      v9 = v16;
    }
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    v7 = 0;
    v6 = 1;
    goto LABEL_4;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsHistory_scrollRestoration(v10);
}

uint64_t WebCore::jsHistory_scrollRestoration(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSValue v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  WebCore::History::scrollRestoration(*(WebCore::History **)(a2 + 24), (uint64_t)&v20);
  v5 = v22;
  if (!v22)
  {
    v6 = *((_QWORD *)a1 + 7);
    v7 = (uint64_t *)(v6 + 41968);
    if ((byte_1EE335D12 & 1) == 0)
    {
      dword_1ECE78A50 += 2;
      byte_1EE335D12 = 1;
      qword_1EE335E78 = (uint64_t)&dword_1ECE78A50;
      dword_1ECE78A70 += 2;
      qword_1EE335E80 = (uint64_t)&dword_1ECE78A70;
    }
    v8 = *(_QWORD *)&_MergedGlobals_1069[8 * v20 + 360];
    if (!v8)
    {
      v11 = *v7;
LABEL_12:
      ((void (*)(_BYTE *, int *))off_1E32AC368[v5])(v23, &v20);
      return v11;
    }
    v9 = *(_DWORD *)v8;
    v10 = *(_DWORD *)(v8 + 4);
    *(_DWORD *)v8 += 2;
    if (v10)
    {
      if (v10 != 1)
      {
LABEL_7:
        v11 = *(_QWORD *)(v6 + 64760);
        if (!v11 || v8 != *(_QWORD *)(v11 + 8))
        {
          v11 = JSC::jsStringWithCacheSlowCase();
          v9 = *(_DWORD *)v8 - 2;
        }
        goto LABEL_10;
      }
      v13 = *(unsigned __int8 **)(v8 + 8);
      if ((*(_BYTE *)(v8 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v15 = *(unsigned __int16 *)v13;
        if (v15 > 0xFF)
          goto LABEL_7;
        v14 = v15;
      }
      v11 = *(_QWORD *)(v6 + 8 * v14 + 42216);
    }
    else
    {
      v11 = *v7;
    }
LABEL_10:
    if (v9)
      *(_DWORD *)v8 = v9;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v8, v4);
    goto LABEL_12;
  }
  if (v22 == 1)
  {
    v16 = (WTF::StringImpl *)v20;
    v23[0] = v20;
    v17 = v21;
    v21 = 0;
    v24 = v17;
    if (!*((_QWORD *)v3 + 2))
    {
      v18.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v24);
      JSC::VM::throwException(v3, a1, v18);
      v17 = v24;
    }
    v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v11 = 0;
    goto LABEL_12;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSHistory_scrollRestoration(v19);
}

uint64_t WebCore::IDLAttribute<WebCore::JSHistory>::set<&WebCore::setJSHistory_scrollRestorationSetter,(WebCore::CastedThisErrorBehavior)0>(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = WebCore::IDLOperation<WebCore::JSHistory>::cast(a2);
  if (v5)
    return WebCore::setJSHistory_scrollRestorationSetter(a1, *(_QWORD *)(v5 + 24), a3);
  else
    return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsHistory_state(JSC::JSGlobalObject *a1, WebCore::JSHistory *a2)
{
  return WebCore::JSHistory::state(a2, a1);
}

uint64_t WebCore::JSHistoryOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) != v8)
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194C97334);
      }
    }
  }
  v17 = a4;
  v18 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
  a4 = v17;
  v6 = v18;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

uint64_t WebCore::JSHistoryOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  v4 = (uint64_t)(v3 + 2);
  ++v3[2];
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), (uint64_t)v3);
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  return WTF::RefCounted<WebCore::History>::deref(v4, v3);
}

unint64_t WebCore::wrap<WebCore::History>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v27;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *Allocator;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      goto LABEL_12;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_12:
  ++*(_DWORD *)(a3 + 8);
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSHistory::s_info + ~((_QWORD)&WebCore::JSHistory::s_info << 32)) ^ (((unint64_t)&WebCore::JSHistory::s_info + ~((_QWORD)&WebCore::JSHistory::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSHistory::s_info)
    {
LABEL_14:
      v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v24)
        goto LABEL_16;
    }
    else
    {
      v40 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v40) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v40;
        if (v23 == &WebCore::JSHistory::s_info)
          goto LABEL_14;
      }
    }
  }
  v25 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSHistoryPrototype::createStructure(v25, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v29 = (JSC::JSCell *)WebCore::JSHistoryPrototype::create((WebCore::JSHistoryPrototype *)v25, Structure, v27, v28);
  v30 = WebCore::JSHistory::createStructure(v25, a2, v29);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSHistory::s_info);
LABEL_16:
  v31 = *(_QWORD *)(a2 + 56);
  v32 = *(_QWORD *)(v31 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 5800);
  if (v34)
    goto LABEL_17;
  v41 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v41))
  {
    __clrex();
LABEL_39:
    MEMORY[0x19AEA534C](v41);
    goto LABEL_40;
  }
  if (__stxr(1u, (unsigned __int8 *)v41))
    goto LABEL_39;
LABEL_40:
  v43 = *(_QWORD *)(v41 + 2824);
  v54 = *(_QWORD *)(v43 + 5800);
  if (!v54)
  {
    v52 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", v31 + 192, v31 + 1872, &v52, JSC::JSCell::numberOfLowerTierCells, &v53);
    v48 = v53;
    v54 = v53;
    v49 = *(_QWORD *)(v43 + 5800);
    *(_QWORD *)(v43 + 5800) = v53;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = *(unsigned int *)(v41 + 2844);
    if ((_DWORD)v50 == *(_DWORD *)(v41 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v41 + 2832, (unint64_t)&v54);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v41 + 2832) + 8 * v50) = v48;
      *(_DWORD *)(v41 + 2844) = v50 + 1;
    }
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v44 = *(_QWORD *)(v33 + 5800);
  *(_QWORD *)(v33 + 5800) = v34;
  if (v44)
  {
    v45 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v45, v46);
  }
  v47 = __ldxr((unsigned __int8 *)v41);
  if (v47 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, (unsigned __int8 *)v41))
LABEL_47:
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
LABEL_17:
  SlowCase = v34[3];
  if (SlowCase < v34[4])
  {
LABEL_18:
    v34[3] = SlowCase + 32;
    goto LABEL_19;
  }
  SlowCase = v34[5];
  if ((SlowCase & 1) == 0)
  {
    v51 = *(_QWORD *)(SlowCase + 8) ^ v34[6];
    v34[4] = SlowCase + HIDWORD(v51);
    v34[5] = SlowCase + (int)v51;
    goto LABEL_18;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v24);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v31 + 755))
    __dmb(0xAu);
  v35 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335D40 & 1) == 0)
  {
    qword_1EE335D38 = (uint64_t)&off_1E32A7F90;
    byte_1EE335D40 = 1;
  }
  if (*(_DWORD *)(v35 + 48))
  {
    v54 = a3;
    JSC::Weak<JSC::JSObject>::Weak(&v53, SlowCase, (uint64_t)&qword_1EE335D38, v35);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v35 + 32), &v54, &v53);
    v39 = v53;
    if (!v53)
      return SlowCase;
    goto LABEL_32;
  }
  if ((SlowCase & 8) != 0)
    v36 = (SlowCase - 112) | 1;
  else
    v36 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v36 & 1) != 0)
    v37 = v36 + 47;
  else
    v37 = *(_QWORD *)v36 + 32;
  Allocator = *(_QWORD **)(v37 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v37 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335D38;
  Allocator[2] = v35;
  v39 = *(_QWORD *)a3;
  *(_QWORD *)a3 = Allocator;
  if (v39)
LABEL_32:
    *(_QWORD *)(v39 + 8) = 3;
  return SlowCase;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmHkdfParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::JSArrayBufferView *v21;
  JSC::ArrayBufferView *v22;
  int v23;
  int v24;
  uint64_t (*v25)();
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::JSArrayBufferView *v28;
  JSC::ArrayBufferView *v29;
  int v30;
  int v31;
  uint64_t (*v32)();
  WTF::StringImpl *v33;
  int v34;
  char v35;
  int v36;
  int v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v46;
  int v47;
  uint64_t v48;
  int v49;
  void (**v50)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  WTF *v60[2];
  WTF *v61[2];
  JSC::VM *v62;
  JSC::ArrayBufferView *v63;
  int v64;
  uint64_t *v65;
  JSC::ArrayBufferView *v66;
  JSC::ArrayBufferView *v67;
  int v68;
  int v69;
  WTF::StringImpl *v70;
  JSC::ArrayBufferView *v71;
  int v72;
  int v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v62 = a2[7];
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 112) = 1;
    return result;
  }
  v50 = off_1E32A96B8;
  v51 = 0;
  v53 = 0;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  *(_OWORD *)v60 = 0u;
  *(_OWORD *)v61 = 0u;
  if (v5 != 2)
  {
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v74);
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v7);
      else
        *(_DWORD *)v74 -= 2;
    }
    if (*((_DWORD *)v62 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v62))
      goto LABEL_12;
    if (v8 != 10)
    {
      v74 = (WTF::StringImpl *)v8;
      v9 = a2[7];
      if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v74, (JSC::JSGlobalObject *)a2);
LABEL_19:
        if (*((_DWORD *)v9 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
          v11 = v70;
          if (hasExceptionsAfterHandlingTraps)
          {
            v16 = 1;
            v49 = 1;
            v70 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v7);
              else
                *(_DWORD *)v11 -= 2;
            }
            *(_DWORD *)(a3 + 112) = 1;
            goto LABEL_99;
          }
        }
        else
        {
          v11 = v70;
        }
        v49 = 0;
        v48 = 0;
        v12 = v51;
        v51 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v7);
          else
            *(_DWORD *)v12 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v13 = v74;
        v15 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v74);
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v14);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v62 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v62))
          goto LABEL_30;
        if (v15 == 10)
        {
          WebCore::throwRequiredMemberTypeError((int)a2, (int)&v62, "hash", 5, "HkdfParams", 11, "(object or DOMString)", 22);
LABEL_30:
          v16 = 0;
          *(_DWORD *)(a3 + 112) = 1;
LABEL_99:
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v16])(&v74, &v48);
          goto LABEL_100;
        }
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)a2, v15, (uint64_t)&v74);
        v17 = v77;
        if (v77)
        {
          *(_DWORD *)(a3 + 112) = 1;
          goto LABEL_96;
        }
        LOBYTE(v70) = 0;
        LODWORD(v71) = -1;
        v18 = v76;
        if (v76 == -1)
        {
          if (v54 != -1)
          {
            ((void (*)(JSC::ArrayBufferView **, uint64_t *))off_1E32A96D0[v54])(&v66, &v53);
            v54 = -1;
          }
        }
        else
        {
          ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **, uint64_t *))off_1E32A96E0[v76])(&v66, &v70, &v75);
          LODWORD(v71) = v18;
          v66 = (JSC::ArrayBufferView *)&v53;
          ((void (*)(JSC::ArrayBufferView **, uint64_t *, WTF::StringImpl **))off_1E32A96F0[v18])(&v66, &v53, &v70);
        }
        if ((_DWORD)v71 != -1)
          ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **))off_1E32A96D0[v71])(&v66, &v70);
        WTF::AtomStringImpl::addLiteral();
        v19 = v70;
        v21 = (JSC::JSArrayBufferView *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v70);
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v20);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (*((_DWORD *)v62 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v62))
          goto LABEL_44;
        if (v21 == (JSC::JSArrayBufferView *)10)
        {
          WebCore::throwRequiredMemberTypeError((int)a2, (int)&v62, "info", 5, "HkdfParams", 11, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_44:
          *(_DWORD *)(a3 + 112) = 1;
LABEL_95:
          v17 = v77;
LABEL_96:
          if (v17 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A9740[v17])(&v70, &v75);
          v16 = 0;
          goto LABEL_99;
        }
        v63 = a2[7];
        v22 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v63, (uint64_t)v21);
        if (v22)
        {
          *(_DWORD *)v22 += 2;
          LODWORD(v67) = 1;
          v66 = 0;
          v71 = v22;
          v72 = 1;
          v73 = 0;
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v46);
          v23 = v73;
          if (!v73)
          {
            v24 = v72;
            LOBYTE(v63) = 0;
            v64 = -1;
            if (v72 == -1)
            {
              LOBYTE(v66) = 0;
              LODWORD(v67) = -1;
              if (v59 == -1)
                goto LABEL_58;
              ((void (*)(JSC::VM **, uint64_t *))off_1E32A9700[v59])(&v46, &v58);
              v59 = -1;
LABEL_56:
              if ((_DWORD)v67 != -1)
                ((void (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E32A9700[v67])(&v46, &v66);
LABEL_58:
              LODWORD(v67) = -1;
              if (v64 != -1)
                ((void (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E32A9700[v64])(&v46, &v63);
              WTF::AtomStringImpl::addLiteral();
              v26 = v66;
              v28 = (JSC::JSArrayBufferView *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v66);
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v27);
                else
                  *(_DWORD *)v26 -= 2;
              }
              if (*((_DWORD *)v62 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v62))
                goto LABEL_66;
              if (v28 == (JSC::JSArrayBufferView *)10)
              {
                WebCore::throwRequiredMemberTypeError((int)a2, (int)&v62, "salt", 5, "HkdfParams", 11, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_66:
                *(_DWORD *)(a3 + 112) = 1;
LABEL_92:
                v23 = v73;
                goto LABEL_93;
              }
              v46 = a2[7];
              v29 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v46, (uint64_t)v28);
              if (v29)
              {
                *(_DWORD *)v29 += 2;
                v64 = 1;
                v63 = 0;
                v67 = v29;
                v68 = 1;
                v69 = 0;
                _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v65);
                v30 = v69;
                if (!v69)
                {
                  v31 = v68;
                  LOBYTE(v46) = 0;
                  v47 = -1;
                  if (v68 == -1)
                  {
                    LOBYTE(v63) = 0;
                    v64 = -1;
                    if (v57 == -1)
                    {
LABEL_79:
                      v64 = -1;
                      if (v47 != -1)
                        ((void (*)(uint64_t **, JSC::VM **))off_1E32A9700[v47])(&v65, &v46);
                      v33 = v51;
                      if (v51)
                        *(_DWORD *)v51 += 2;
                      *(_BYTE *)(a3 + 16) = v52;
                      *(_QWORD *)a3 = off_1E32A96B8;
                      *(_QWORD *)(a3 + 8) = v33;
                      *(_BYTE *)(a3 + 24) = 0;
                      *(_DWORD *)(a3 + 32) = -1;
                      v34 = v54;
                      if (v54 != -1)
                      {
                        ((void (*)(JSC::ArrayBufferView **, uint64_t, uint64_t *))off_1E32A96E0[v54])(&v63, a3 + 24, &v53);
                        *(_DWORD *)(a3 + 32) = v34;
                      }
                      v35 = v55;
                      *(_BYTE *)(a3 + 48) = 0;
                      *(_BYTE *)(a3 + 40) = v35;
                      *(_DWORD *)(a3 + 56) = -1;
                      v36 = v57;
                      if (v57 != -1)
                      {
                        ((void (*)(JSC::ArrayBufferView **))off_1E32A9710[v57])(&v63);
                        *(_DWORD *)(a3 + 56) = v36;
                      }
                      *(_BYTE *)(a3 + 64) = 0;
                      *(_DWORD *)(a3 + 72) = -1;
                      v37 = v59;
                      if (v59 != -1)
                      {
                        ((void (*)(JSC::ArrayBufferView **))off_1E32A9710[v59])(&v63);
                        *(_DWORD *)(a3 + 72) = v37;
                      }
                      v38 = v60[0];
                      v60[0] = 0;
                      *(_QWORD *)(a3 + 80) = v38;
                      v39 = v60[1];
                      v60[1] = 0;
                      *(_QWORD *)(a3 + 88) = v39;
                      v40 = v61[0];
                      v61[0] = 0;
                      *(_QWORD *)(a3 + 96) = v40;
                      v41 = v61[1];
                      v61[1] = 0;
                      *(_QWORD *)(a3 + 104) = v41;
                      *(_DWORD *)(a3 + 112) = 0;
                      v30 = v69;
                      goto LABEL_90;
                    }
                    ((void (*)(uint64_t **, uint64_t *))off_1E32A9700[v57])(&v65, &v56);
                    v57 = -1;
LABEL_77:
                    if (v64 != -1)
                      ((void (*)(uint64_t **, JSC::ArrayBufferView **))off_1E32A9700[v64])(&v65, &v63);
                    goto LABEL_79;
                  }
LABEL_76:
                  v32 = off_1E32A9710[v31];
                  ((void (*)(uint64_t **, JSC::VM **, JSC::ArrayBufferView **))v32)(&v65, &v46, &v67);
                  v47 = v31;
                  LOBYTE(v63) = 0;
                  v64 = -1;
                  ((void (*)(uint64_t **, JSC::ArrayBufferView **, JSC::VM **))v32)(&v65, &v63, &v46);
                  v64 = v31;
                  v65 = &v56;
                  ((void (*)(uint64_t **, uint64_t *, JSC::ArrayBufferView **))off_1E32A9720[v31])(&v65, &v56, &v63);
                  goto LABEL_77;
                }
              }
              else
              {
                JSC::JSArrayBufferView::toWrapped(v28, &v63);
                if (v63)
                {
                  v31 = 0;
                  v67 = v63;
                  v68 = 0;
                  v69 = 0;
                  LOBYTE(v46) = 0;
                  v47 = -1;
                  goto LABEL_76;
                }
                JSC::throwTypeError();
                v30 = 1;
                v69 = 1;
              }
              *(_DWORD *)(a3 + 112) = 1;
LABEL_90:
              if (v30 != -1)
                ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32A9730[v30])(&v63, &v67);
              goto LABEL_92;
            }
LABEL_55:
            v25 = off_1E32A9710[v24];
            ((void (*)(JSC::VM **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v25)(&v46, &v63, &v71);
            v64 = v24;
            LOBYTE(v66) = 0;
            LODWORD(v67) = -1;
            ((void (*)(JSC::VM **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v25)(&v46, &v66, &v63);
            LODWORD(v67) = v24;
            v46 = (JSC::VM *)&v58;
            ((void (*)(JSC::VM **, uint64_t *, JSC::ArrayBufferView **))off_1E32A9720[v24])(&v46, &v58, &v66);
            goto LABEL_56;
          }
        }
        else
        {
          JSC::JSArrayBufferView::toWrapped(v21, &v66);
          if (v66)
          {
            v24 = 0;
            v71 = v66;
            v72 = 0;
            v73 = 0;
            LOBYTE(v63) = 0;
            v64 = -1;
            goto LABEL_55;
          }
          JSC::throwTypeError();
          v23 = 1;
          v73 = 1;
        }
        *(_DWORD *)(a3 + 112) = 1;
LABEL_93:
        if (v23 != -1)
          ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32A9730[v23])(&v66, &v71);
        goto LABEL_95;
      }
      v10 = *(_QWORD *)(v8 + 8);
      if ((v10 & 1) != 0)
      {
        v10 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
        if (!v10)
          goto LABEL_18;
      }
      else if (!v10)
      {
LABEL_18:
        v70 = (WTF::StringImpl *)v10;
        goto LABEL_19;
      }
      *(_DWORD *)v10 += 2;
      goto LABEL_18;
    }
  }
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v62, "name", 5, "HkdfParams", 11, "DOMString", 10);
LABEL_12:
  *(_DWORD *)(a3 + 112) = 1;
LABEL_100:
  v42 = v61[0];
  if (v61[0])
  {
    v61[0] = 0;
    LODWORD(v61[1]) = 0;
    WTF::fastFree(v42, v7);
  }
  v43 = v60[0];
  if (v60[0])
  {
    v60[0] = 0;
    LODWORD(v60[1]) = 0;
    WTF::fastFree(v43, v7);
  }
  if (v59 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A9700[v59])(&v74, &v58);
  v59 = -1;
  if (v57 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A9700[v57])(&v74, &v56);
  v57 = -1;
  if (v54 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A96D0[v54])(&v74, &v53);
  v54 = -1;
  result = v51;
  v50 = off_1E3226840;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmHkdfParams::~CryptoAlgorithmHkdfParams(WebCore::CryptoAlgorithmHkdfParams *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;
  char v11;

  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E32A9700[v5])(&v9, (char *)this + 64);
  *((_DWORD *)this + 18) = -1;
  v6 = *((unsigned int *)this + 14);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E32A9700[v6])(&v10, (char *)this + 48);
  *((_DWORD *)this + 14) = -1;
  v7 = *((unsigned int *)this + 8);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E32A96D0[v7])(&v11, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;
  char v11;

  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E32A9700[v5])(&v9, (char *)this + 64);
  *((_DWORD *)this + 18) = -1;
  v6 = *((unsigned int *)this + 14);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E32A9700[v6])(&v10, (char *)this + 48);
  *((_DWORD *)this + 14) = -1;
  v7 = *((unsigned int *)this + 8);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E32A96D0[v7])(&v11, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmHmacKeyParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  int v30;
  void (**v31)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v32;
  char v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  char v37;
  JSC::VM *v38;
  uint64_t *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v38 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v31 = off_1E32A9760;
    v32 = 0;
    v34 = 0;
    v35 = 0;
    BYTE8(v36) = 0;
    v37 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 64) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v31 = off_1E32A9760;
  v32 = 0;
  v34 = 0;
  v35 = 0;
  BYTE8(v36) = 0;
  v37 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v40);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v7);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38))
    goto LABEL_11;
  if (v8 != 10)
  {
    v40 = (WTF::StringImpl *)v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v27;
        if (hasExceptionsAfterHandlingTraps)
        {
          v16 = 1;
          v30 = 1;
          v27 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          *(_DWORD *)(a3 + 64) = 1;
          goto LABEL_55;
        }
      }
      else
      {
        v11 = v27;
      }
      v30 = 0;
      v29 = 0;
      v12 = v32;
      v32 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = v40;
      v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v40);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38))
        goto LABEL_29;
      if (v15 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v38, "hash", 5, "HmacKeyParams", 14, "(object or DOMString)", 22);
LABEL_29:
        v16 = 0;
        *(_DWORD *)(a3 + 64) = 1;
LABEL_55:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v16])(&v40, &v29);
        goto LABEL_56;
      }
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)a2, v15, (uint64_t)&v40);
      v17 = v43;
      if (v43)
      {
        *(_DWORD *)(a3 + 64) = 1;
        goto LABEL_52;
      }
      LOBYTE(v27) = 0;
      v28 = -1;
      v18 = v42;
      if (v42 == -1)
      {
        if (v35 != -1)
        {
          ((void (*)(uint64_t **, uint64_t *))off_1E32A96D0[v35])(&v39, &v34);
          v35 = -1;
        }
      }
      else
      {
        ((void (*)(uint64_t **, WTF::StringImpl **, uint64_t *))off_1E32A96E0[v42])(&v39, &v27, &v41);
        v28 = v18;
        v39 = &v34;
        ((void (*)(uint64_t **, uint64_t *, WTF::StringImpl **))off_1E32A96F0[v18])(&v39, &v34, &v27);
      }
      if (v28 != -1)
        ((void (*)(uint64_t **, WTF::StringImpl **))off_1E32A96D0[v28])(&v39, &v27);
      WTF::AtomStringImpl::addLiteral();
      v19 = v27;
      v21 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v27);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v20);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
        goto LABEL_82;
      if (v21 != 10)
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v21, &v27);
        if ((unint64_t)v27 >> 32)
        {
LABEL_82:
          v24 = 1;
LABEL_51:
          *(_DWORD *)(a3 + 64) = v24;
          v17 = v43;
LABEL_52:
          if (v17 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A9740[v17])(&v27, &v41);
          v16 = 0;
          goto LABEL_55;
        }
        if (!v37)
          v37 = 1;
        *((_QWORD *)&v36 + 1) = v27;
      }
      v22 = v32;
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_BYTE *)(a3 + 16) = v33;
      *(_QWORD *)a3 = off_1E32A9760;
      *(_QWORD *)(a3 + 8) = v22;
      *(_BYTE *)(a3 + 24) = 0;
      *(_DWORD *)(a3 + 32) = -1;
      v23 = v35;
      if (v35 != -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t, uint64_t *))off_1E32A96E0[v35])(&v27, a3 + 24, &v34);
        *(_DWORD *)(a3 + 32) = v23;
      }
      v24 = 0;
      *(_OWORD *)(a3 + 40) = v36;
      *(_BYTE *)(a3 + 56) = v37;
      goto LABEL_51;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v27 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v38, "name", 5, "HmacKeyParams", 14, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a3 + 64) = 1;
LABEL_56:
  if (v35 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A96D0[v35])(&v40, &v34);
  v35 = -1;
  result = v32;
  v31 = off_1E3226840;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmHmacKeyParams::~CryptoAlgorithmHmacKeyParams(WebCore::CryptoAlgorithmHmacKeyParams *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E32A96D0[v3])(&v5, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E32A96D0[v3])(&v5, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::JSIDBCursor::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSIDBCursor::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSIDBCursor>((WebCore::JSIDBCursor *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSIDBCursorPrototype::finishCreation(WebCore::JSIDBCursorPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(a2, (uint64_t)&WebCore::JSIDBCursor::s_info, (uint64_t)&WebCore::JSIDBCursorPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSIDBCursor::destroy(WebCore::JSIDBCursor *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSIDBCursor::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBCursor::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSIDBCursor::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSIDBCursor::visitChildren(WebCore::JSIDBCursor *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSIDBCursor::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSIDBCursor::createPrototype(WebCore::JSIDBCursor *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSIDBCursorPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSIDBCursorPrototype::create(WebCore::JSIDBCursorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSIDBCursorPrototype::finishCreation((WebCore::JSIDBCursorPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>,(WebCore::DOMConstructorID)107>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 856);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 856) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsIDBCursorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBCursorPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>,(WebCore::DOMConstructorID)107>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsIDBCursor_source(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_DWORD *)(v2 + 160);
  if (v4 == -1)
    v5 = -1;
  else
    v5 = *(unsigned int *)(v2 + 160);
  if (v5 == 1)
  {
    if (v4 == 1)
    {
      v8 = *(WTF **)(v2 + 152);
      if (v8)
        return WebCore::wrap<WebCore::IDBIndex>(v3, v8);
      return 2;
    }
    goto LABEL_13;
  }
  if (!v5)
  {
    if (!v4)
    {
      v6 = *(WTF **)(v2 + 152);
      if (v6)
        return WebCore::wrap<WebCore::IDBObjectStore>(v3, v6);
      return 2;
    }
LABEL_13:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v9 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::jsIDBCursor_direction(v9);
}

uint64_t WebCore::jsIDBCursor_direction(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 145);
  if ((byte_1EE335D13 & 1) == 0)
  {
    dword_1ECE78A90 += 2;
    byte_1EE335D13 = 1;
    dword_1ECE78AB0 += 2;
    qword_1EE335F08 = (uint64_t)&dword_1ECE78A90;
    unk_1EE335F10 = &dword_1ECE78AB0;
    dword_1ECE78AD0 += 2;
    qword_1EE335F18 = (uint64_t)&dword_1ECE78AD0;
    dword_1ECE78AF0 += 2;
    qword_1EE335F20 = (uint64_t)&dword_1ECE78AF0;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1069[8 * v4 + 504];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsIDBCursor_key(JSC::JSGlobalObject *a1, WebCore::JSIDBCursor *a2, uint64_t a3, WebCore::IDBKey *a4)
{
  return WebCore::JSIDBCursor::key(a2, a1, a3, a4);
}

uint64_t WebCore::jsIDBCursor_primaryKey(JSC::JSGlobalObject *a1, WebCore::JSIDBCursor *a2, uint64_t a3, WebCore::IDBKey *a4)
{
  return WebCore::JSIDBCursor::primaryKey(a2, a1, a3, a4);
}

uint64_t WebCore::jsIDBCursor_request(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 168);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return WebCore::wrap<WebCore::IDBRequest>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

uint64_t WebCore::JSIDBCursor::subspaceForImpl(WebCore::JSIDBCursor *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 880);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 880);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 880);
    *(_QWORD *)(v8 + 880) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 880);
  *(_QWORD *)(v3 + 880) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSIDBCursorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSIDBCursorOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 16) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 16) = v4;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  char v13;
  char **v14;
  int v16;
  int v17;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v25;
  unint64_t v26;

  v3 = a1;
  v26 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, a1);
    v4 = v25;
    if (v25)
      goto LABEL_7;
LABEL_49:
    v16 = 0;
    v17 = 0;
    return v16 | (v17 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_49;
LABEL_7:
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 4;
  if ((char *)v5 == "next" || v6 != 4)
  {
    if ((char *)v5 == "next" && v6 == 4)
      goto LABEL_61;
    v9 = v6 == 10;
    v10 = v6 != 10;
    if ((char *)v5 == "nextunique" || v6 != 10)
    {
      if ((char *)v5 != "nextunique")
      {
        v11 = *(_DWORD *)(v4 + 4);
        goto LABEL_14;
      }
      v11 = *(_DWORD *)(v4 + 4);
      if (v6 != 10)
        goto LABEL_14;
LABEL_42:
      v14 = &off_1E32A35D8;
      goto LABEL_62;
    }
    if ((_DWORD)v7)
    {
      if (*(_BYTE *)v5 == 110
        && *(_QWORD *)(v5 + 1) == 0x7571696E75747865
        && *(_QWORD *)(v5 + 2) == 0x657571696E757478)
      {
        goto LABEL_42;
      }
    }
    else if (*(_WORD *)v5 == 110)
    {
      v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C00B0);
      v23.i16[0] = vminvq_u16(v23);
      v10 = v23.i8[0];
      if (v23.i32[0])
      {
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968C00C0);
        v24.i16[0] = vminvq_u16(v24);
        v10 = v24.i8[0];
        if (v24.i32[0])
          goto LABEL_42;
      }
LABEL_80:
      v11 = 10;
      goto LABEL_14;
    }
    v10 = 0;
    goto LABEL_80;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 != 110)
      goto LABEL_13;
    if (*(_DWORD *)(v5 + 2) != 7864421 || *(_DWORD *)(v5 + 4) != 7602296)
      goto LABEL_13;
LABEL_61:
    v14 = &WebCore::parseEnumerationFromString<WebCore::IndexedDB::CursorDirection>(WTF::String const&)::mappings;
    goto LABEL_62;
  }
  if (*(_BYTE *)v5 == 110 && *(_WORD *)(v5 + 1) == 30821 && *(_WORD *)(v5 + 2) == 29816)
    goto LABEL_61;
LABEL_13:
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v11 = 4;
LABEL_14:
  if ((char *)v5 == "prev" || v8)
  {
    v12 = v7 << 32;
    if ((char *)v5 != "prev" || v6 != 4)
      goto LABEL_22;
    goto LABEL_45;
  }
  if (!v11)
    goto LABEL_45;
  if ((_DWORD)v7)
  {
    if (*(_BYTE *)v5 != 112 || *(_WORD *)(v5 + 1) != 25970 || *(_WORD *)(v5 + 2) != 30309)
    {
      v12 = 1;
      goto LABEL_22;
    }
LABEL_45:
    v14 = &off_1E32A35F0;
    goto LABEL_62;
  }
  if (*(_WORD *)v5 == 112)
  {
    v12 = 0;
    if (*(_DWORD *)(v5 + 2) != 6619250 || *(_DWORD *)(v5 + 4) != 7733349)
      goto LABEL_22;
    goto LABEL_45;
  }
  v12 = 0;
LABEL_22:
  v13 = (char *)v5 == "prevunique" || v10;
  if ((v13 & 1) != 0)
  {
    if ((char *)v5 == "prevunique" && v9)
      goto LABEL_31;
    goto LABEL_54;
  }
  if (v11)
  {
    if (v12)
    {
      if (*(_BYTE *)v5 == 112
        && *(_QWORD *)(v5 + 1) == 0x7571696E75766572
        && *(_QWORD *)(v5 + 2) == 0x657571696E757665)
      {
        goto LABEL_31;
      }
    }
    else if (*(_WORD *)v5 == 112)
    {
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C00D0);
      v21.i16[0] = vminvq_u16(v21);
      if (v21.i32[0])
      {
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968C00E0);
        v22.i16[0] = vminvq_u16(v22);
        if (v22.i32[0])
          goto LABEL_31;
      }
    }
LABEL_54:
    v17 = 0;
    v16 = 0;
    goto LABEL_63;
  }
LABEL_31:
  v14 = &off_1E32A3608;
LABEL_62:
  v16 = *((unsigned __int8 *)v14 + 16);
  v17 = 1;
LABEL_63:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v16 | (v17 << 8);
}

uint64_t WebCore::JSIDBCursorWithValue::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;

  v4 = a2[11];
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    WebCore::JSIDBCursor::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, (uint64_t)a2);
    WebCore::JSIDBCursor::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, (uint64_t)a2);
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 376);
    if (!v5 || (v5[1] & 3) != 0)
      v6 = 0;
    else
      v6 = *v5;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v6);
  }
  return result;
}

uint64_t WebCore::JSIDBCursorWithValue::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSIDBCursor::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSIDBCursorWithValue::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSIDBCursorWithValue::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSIDBCursor::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSIDBCursor::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSIDBCursor::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBCursorWithValue::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSIDBCursor::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSIDBCursorWithValue::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSIDBCursorWithValue::visitChildren(WebCore::JSIDBCursorWithValue *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;
  _QWORD v12[2];
  _QWORD *v13;
  char v14;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v12[0] = a2;
    v12[1] = this;
    v14 = 0;
    v13 = v9;
    *((_QWORD *)a2 + 11) = v12;
    JSC::JSObject::visitChildren();
    WebCore::JSIDBCursor::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v12[0] + 88) = v13;
    WebCore::JSIDBCursor::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 376);
    if (!v6 || (v6[1] & 3) != 0)
      v7 = 0;
    else
      v7 = *v6;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

uint64_t WebCore::JSIDBCursorWithValuePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSIDBCursorWithValuePrototype::create(WebCore::JSIDBCursorWithValuePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSIDBCursorWithValue::s_info, (uint64_t)&WebCore::JSIDBCursorWithValuePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursorWithValue>,(WebCore::DOMConstructorID)108>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t Structure;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 864);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>,(WebCore::DOMConstructorID)107>(a1, a2);
  v7 = v6;
  LODWORD(v35) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v35, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursorWithValue>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v35);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v35);
  v14 = v35;
  v35 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v35);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSIDBCursorWithValue::s_info
         + ~((_QWORD)&WebCore::JSIDBCursorWithValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBCursorWithValue::s_info
                                                                      + ~((_QWORD)&WebCore::JSIDBCursorWithValue::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSIDBCursorWithValue::s_info)
    {
LABEL_20:
      v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v25)
        goto LABEL_22;
    }
    else
    {
      v24 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v24) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v24;
        if (v23 == &WebCore::JSIDBCursorWithValue::s_info)
          goto LABEL_20;
      }
    }
  }
  v26 = WebCore::getDOMStructure<WebCore::JSIDBCursor>((WebCore::JSIDBCursor *)a1, (JSC::JSCell **)a2);
  Structure = WebCore::JSIDBCursorWithValuePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(v26 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v29 = (JSC::JSCell *)WebCore::JSIDBCursorWithValuePrototype::create((WebCore::JSIDBCursorWithValuePrototype *)a1, (JSC::VM *)a2, Structure, v28);
  v30 = WebCore::JSIDBCursorWithValue::createStructure((uint64_t *)a1, a2, v29);
  v25 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSIDBCursorWithValue::s_info);
LABEL_22:
  v31 = *(_QWORD *)(v25 + 48);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v31, 14, (uint64_t)&v35);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 864) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsIDBCursorWithValueConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBCursorWithValuePrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursorWithValue>,(WebCore::DOMConstructorID)108>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsIDBCursorWithValue_value(JSC::JSGlobalObject *a1, WebCore::JSIDBCursorWithValue *a2)
{
  return WebCore::JSIDBCursorWithValue::value(a2, a1);
}

uint64_t WebCore::JSIDBCursorWithValue::subspaceForImpl(WebCore::JSIDBCursorWithValue *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 888);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 888);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 888);
    *(_QWORD *)(v8 + 888) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 888);
  *(_QWORD *)(v3 + 888) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSIDBDatabase>((WebCore::JSIDBDatabase *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSIDBDatabasePrototype::finishCreation(WebCore::JSIDBDatabasePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(a2, (uint64_t)&WebCore::JSIDBDatabase::s_info, (uint64_t)&WebCore::JSIDBDatabasePrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSIDBDatabase::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSIDBDatabase::createPrototype(WebCore::JSIDBDatabase *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSIDBDatabasePrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSIDBDatabasePrototype::create(WebCore::JSIDBDatabasePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSIDBDatabasePrototype::finishCreation((WebCore::JSIDBDatabasePrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>,(WebCore::DOMConstructorID)109>(WebCore::JSEventTarget *this, uint64_t a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *Constructor;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 872);
  if (!result)
  {
    Constructor = (JSC::JSCell *)WebCore::JSEventTarget::getConstructor(this, (JSC::VM *)a2, a3);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>::createStructure((uint64_t *)this, a2, Constructor);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>::create((uint64_t)this, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 872) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(a2 + 7))
      {
        v8 = (WebCore::JSEventTarget *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsIDBDatabaseConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBDatabasePrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>,(WebCore::DOMConstructorID)109>(*(WebCore::JSEventTarget **)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

uint64_t WebCore::jsIDBDatabase_name(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;

  v2 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 24) + 80);
  if (!v2)
    return WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(*(_QWORD *)(a1 + 56), 0);
  *(_DWORD *)v2 += 2;
  v4 = WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(*(_QWORD *)(a1 + 56), (uint64_t)v2);
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, v3);
  else
    *(_DWORD *)v2 -= 2;
  return v4;
}

unint64_t WebCore::jsIDBDatabase_version(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsIDBDatabase_objectStoreNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  BOOL (*v18)(WTF *, const WTF::String *, const WTF::String *);
  int v19;
  unsigned int v20;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::IDBDatabaseInfo::objectStoreNames(*(_QWORD *)(a2 + 24) + 80, (uint64_t)&v18);
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v18;
  v5 = v20;
  *(_DWORD *)(v4 + 16) = v19;
  *(_DWORD *)(v4 + 20) = v5;
  v6 = *(_QWORD *)(v4 + 8);
  v18 = WTF::codePointCompareLessThan;
  v7 = 126 - 2 * __clz(v5);
  if ((_DWORD)v5)
    v8 = v7;
  else
    v8 = 0;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v6, (WTF::StringImpl *)(v6 + 8 * v5), (uint64_t (**)(uint64_t *, uint64_t *))&v18, v8, 1);
  v10 = WebCore::wrap<WebCore::DOMStringList>(a1, v3, (WTF *)v4);
  if (*(_DWORD *)v4 == 1)
  {
    v12 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v12)
    {
      v14 = *(WTF::StringImpl ***)(v4 + 8);
      v15 = 8 * v12;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            v17 = v15;
            WTF::StringImpl::destroy(v16, v9);
            v15 = v17;
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    v13 = *(WTF **)(v4 + 8);
    if (v13)
    {
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
      WTF::fastFree(v13, v9);
    }
    WTF::fastFree((WTF *)v4, v9);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v10;
}

uint64_t WebCore::jsIDBDatabase_onabort(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  bmalloc::api *v15;
  void *v16;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 6);
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v5);
    bmalloc::api::isoDeallocate(v15, v16);
  }
  return v11;
}

BOOL WebCore::setJSIDBDatabase_onabort(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  bmalloc::api *v20;
  void *v21;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBDatabase::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBDatabase::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 6;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 64), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 6);
        WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v11);
        bmalloc::api::isoDeallocate(v20, v21);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsIDBDatabase_onclose(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  bmalloc::api *v15;
  void *v16;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 408), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 6);
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v5);
    bmalloc::api::isoDeallocate(v15, v16);
  }
  return v11;
}

BOOL WebCore::setJSIDBDatabase_onclose(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  bmalloc::api *v20;
  void *v21;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBDatabase::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBDatabase::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 6;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 408), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 6);
        WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v11);
        bmalloc::api::isoDeallocate(v20, v21);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsIDBDatabase_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  bmalloc::api *v15;
  void *v16;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 6);
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v5);
    bmalloc::api::isoDeallocate(v15, v16);
  }
  return v11;
}

BOOL WebCore::setJSIDBDatabase_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  bmalloc::api *v20;
  void *v21;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBDatabase::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBDatabase::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 6;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 784), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 6);
        WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v11);
        bmalloc::api::isoDeallocate(v20, v21);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsIDBDatabase_onversionchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  bmalloc::api *v15;
  void *v16;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 2240), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 6);
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v5);
    bmalloc::api::isoDeallocate(v15, v16);
  }
  return v11;
}

BOOL WebCore::setJSIDBDatabase_onversionchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  bmalloc::api *v20;
  void *v21;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBDatabase::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBDatabase::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 6;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 2240), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 6);
        WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v11);
        bmalloc::api::isoDeallocate(v20, v21);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSIDBDatabaseOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSIDBDatabaseOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  bmalloc::api *v29;
  void *v30;

  v3 = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = v3 + 6;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = v3 + 2;
  if (!v3)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(unsigned int **)(v10 + 16 * v16);
      if (v17 != v3)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(unsigned int **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v3)
            goto LABEL_17;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_17:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v4 = v3 + 6;
          }
        }
      }
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (v3)
  {
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)v3);
      bmalloc::api::isoDeallocate(v29, v30);
    }
  }
}

unint64_t WebCore::wrap<WebCore::IDBDatabase>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *Allocator;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  WTF *v48;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v37 = *(_QWORD *)(v5 + 32);
    if (!v37)
      goto LABEL_5;
    v38 = *(_DWORD *)(v37 - 8);
    v39 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
    v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
    v42 = v38 & ((v41 >> 31) ^ v41);
    v43 = *(unsigned int **)(v37 + 16 * v42);
    if (v43 != a3)
    {
      v44 = 1;
      while (v43)
      {
        v42 = ((_DWORD)v42 + v44) & v38;
        v43 = *(unsigned int **)(v37 + 16 * v42);
        ++v44;
        if (v43 == a3)
          goto LABEL_59;
      }
      goto LABEL_5;
    }
LABEL_59:
    v6 = *(_QWORD *)(v37 + 16 * v42 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  v8 = a3 + 6;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = WebCore::getDOMStructure<WebCore::JSIDBDatabase>(*(WebCore::JSIDBDatabase **)(a2 + 56), (JSC::VM *)a2);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(v11 + 41456);
  v13 = *(_QWORD *)(v12 + 23536);
  v14 = *(_QWORD **)(v13 + 896);
  if (!v14)
  {
    v15 = *(_QWORD *)(v12 + 22648);
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_12:
    v17 = *(_QWORD *)(v15 + 2824);
    v46 = *(_QWORD *)(v17 + 896);
    if (!v46)
    {
      v18 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v48, "IsoSpace T");
      v47 = 0;
      MEMORY[0x19AEA3204](v18, &v48, v11 + 192, v11 + 1872, 32, 8, &v47);
      v20 = (uint64_t)v47;
      v47 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v21 = v48;
      v48 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          WTF::fastFree(v21, v19);
        else
          --*(_DWORD *)v21;
      }
      v46 = v18;
      v22 = *(_QWORD *)(v17 + 896);
      *(_QWORD *)(v17 + 896) = v18;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v23 = *(unsigned int *)(v15 + 2844);
      if ((_DWORD)v23 == *(_DWORD *)(v15 + 2840))
      {
        WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v15 + 2832, (unint64_t)&v46);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v15 + 2832) + 8 * v23) = v18;
        *(_DWORD *)(v15 + 2844) = v23 + 1;
      }
    }
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v24 = *(_QWORD *)(v13 + 896);
    *(_QWORD *)(v13 + 896) = v14;
    if (v24)
    {
      v25 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v25, v26);
    }
    v27 = __ldxr((unsigned __int8 *)v15);
    if (v27 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  }
LABEL_29:
  SlowCase = v14[3];
  if (SlowCase < v14[4])
  {
LABEL_30:
    v14[3] = SlowCase + 32;
    goto LABEL_31;
  }
  SlowCase = v14[5];
  if ((SlowCase & 1) == 0)
  {
    v45 = *(_QWORD *)(SlowCase + 8) ^ v14[6];
    v14[4] = SlowCase + HIDWORD(v45);
    v14[5] = SlowCase + (int)v45;
    goto LABEL_30;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_31:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v10);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  v28 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335D50 & 1) == 0)
  {
    qword_1EE335D48 = (uint64_t)&off_1E32A7FC0;
    byte_1EE335D50 = 1;
  }
  if (!*(_DWORD *)(v28 + 48))
  {
    if ((SlowCase & 8) != 0)
      v29 = (SlowCase - 112) | 1;
    else
      v29 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v29 & 1) != 0)
      v30 = v29 + 47;
    else
      v30 = *(_QWORD *)v29 + 32;
    Allocator = *(_QWORD **)(v30 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v30 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335D48;
    Allocator[2] = v28;
    v32 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = Allocator;
    if (!v32)
      return SlowCase;
LABEL_53:
    *(_QWORD *)(v32 + 8) = 3;
    return SlowCase;
  }
  v48 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  v36 = *(_QWORD **)(v35 + 16);
  if (!v36)
    v36 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *v36;
  *v36 = SlowCase;
  v36[1] = &qword_1EE335D48;
  v36[2] = v28;
  v47 = v36;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v28 + 32), (uint64_t *)&v48, (uint64_t *)&v47);
  v32 = (uint64_t)v47;
  if (v47)
    goto LABEL_53;
  return SlowCase;
}

uint64_t WebCore::JSIDBFactory::destroy(WebCore::JSIDBFactory *this, JSC::JSCell *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::IDBClient::IDBConnectionProxy *v10;
  bmalloc::api *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  bmalloc::api *v17;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(uint64_t **)(result + 8);
      *(_QWORD *)(result + 8) = 0;
      if (v6)
      {
        v7 = *v6;
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          v16 = result;
          v17 = (bmalloc::api *)v7;
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(WebCore::IDBClient::IDBConnectionProxy **)(v7 + 24);
          *(_QWORD *)(v7 + 24) = 0;
          if (v10)
          {
            WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v10, a2);
            bmalloc::api::isoDeallocate(v11, v12);
          }
          v13 = (unsigned int *)*((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, a2);
            }
          }
          bmalloc::api::isoDeallocate(v17, a2);
          result = v16;
        }
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::JSIDBFactory::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBFactoryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSIDBFactoryPrototype::create(WebCore::JSIDBFactoryPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSIDBFactory::s_info, &WebCore::JSIDBFactoryPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBFactory>,(WebCore::DOMConstructorID)110>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 880);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBFactory>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSIDBFactory::s_info + ~((_QWORD)&WebCore::JSIDBFactory::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBFactory::s_info + ~((_QWORD)&WebCore::JSIDBFactory::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSIDBFactory::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSIDBFactory::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSIDBFactoryPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSIDBFactoryPrototype::create((WebCore::JSIDBFactoryPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSIDBFactory::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSIDBFactory::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 880) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsIDBFactoryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBFactoryPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBFactory>,(WebCore::DOMConstructorID)110>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSIDBFactoryOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSIDBFactoryOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WebCore::IDBClient::IDBConnectionProxy *v31;
  bmalloc::api *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  bmalloc::api *v37;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  do
    v4 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v4 + 1, (unsigned int *)v3));
  v7 = *(_QWORD *)(a3 + 32);
  v5 = (uint64_t *)(a3 + 32);
  v6 = v7;
  if (!v7)
    goto LABEL_18;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v6 + 16 * v12);
  if (v13 != v3)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v6 + 16 * v12);
      ++v14;
      if (v13 == v3)
        goto LABEL_8;
    }
    v12 = *(unsigned int *)(v6 - 4);
  }
  if (v12 == *(_DWORD *)(v6 - 4))
    goto LABEL_18;
LABEL_8:
  v15 = (_QWORD *)(v6 + 16 * v12);
  *v15 = -1;
  v18 = v15[1];
  v17 = v15 + 1;
  v16 = v18;
  if (v18)
  {
    *(_QWORD *)(v16 + 8) = 3;
    *v17 = 0;
  }
  ++*(_DWORD *)(*v5 - 16);
  v19 = *v5;
  v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v5;
  if (*v5
    && ((v22 = 6 * *(_DWORD *)(v21 - 12), v23 = *(_DWORD *)(v21 - 4), v22 < v23) ? (v24 = v23 >= 9) : (v24 = 0), v24))
  {
    WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v23 >> 1, 0);
    if (!v3)
      return;
  }
  else
  {
LABEL_18:
    if (!v3)
      return;
  }
  do
  {
    v25 = __ldaxr((unsigned int *)v3);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)v3));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)v3);
    v27 = *(uint64_t **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v27)
    {
      v28 = *v27;
      do
      {
        v29 = __ldaxr((unsigned int *)v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)v28));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)v28);
        v31 = *(WebCore::IDBClient::IDBConnectionProxy **)(v28 + 24);
        v37 = (bmalloc::api *)v28;
        *(_QWORD *)(v28 + 24) = 0;
        if (v31)
        {
          WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v31, a2);
          bmalloc::api::isoDeallocate(v32, v33);
        }
        v34 = (unsigned int *)*((_QWORD *)v37 + 1);
        *((_QWORD *)v37 + 1) = 0;
        if (v34)
        {
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, a2);
          }
        }
        bmalloc::api::isoDeallocate(v37, a2);
      }
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
  }
}

unint64_t WebCore::wrap<WebCore::IDBFactory>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v27;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *Allocator;
  unint64_t v53;
  _QWORD *v54;
  WTF *v55;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(unsigned int **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(unsigned int **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  do
    v15 = __ldaxr(a3);
  while (__stlxr(v15 + 1, a3));
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSIDBFactory::s_info + ~((_QWORD)&WebCore::JSIDBFactory::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBFactory::s_info + ~((_QWORD)&WebCore::JSIDBFactory::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSIDBFactory::s_info)
    {
LABEL_15:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_17;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSIDBFactory::s_info)
          goto LABEL_15;
      }
    }
  }
  v25 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSIDBFactoryPrototype::createStructure(v25, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v29 = (JSC::JSCell *)WebCore::JSIDBFactoryPrototype::create((WebCore::JSIDBFactoryPrototype *)v25, Structure, v27, v28);
  v30 = WebCore::JSIDBFactory::createStructure(v25, a2, v29);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSIDBFactory::s_info);
LABEL_17:
  v31 = *(_QWORD *)(a2 + 56);
  v32 = *(_QWORD *)(v31 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 904);
  if (v34)
    goto LABEL_37;
  v35 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_22:
  v37 = *(_QWORD *)(v35 + 2824);
  if (!*(_QWORD *)(v37 + 904))
  {
    v38 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v55, "IsoSpace T");
    v54 = 0;
    MEMORY[0x19AEA3204](v38, &v55, v31 + 192, v31 + 1872, 32, 8, &v54);
    v40 = (uint64_t)v54;
    v54 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v41 = v55;
    v55 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v39);
      else
        --*(_DWORD *)v41;
    }
    v42 = *(_QWORD *)(v37 + 904);
    *(_QWORD *)(v37 + 904) = v38;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v44 = *(_QWORD *)(v33 + 904);
  *(_QWORD *)(v33 + 904) = v34;
  if (v44)
  {
    v45 = (WTF *)MEMORY[0x19AEA3528](v44, v43);
    WTF::fastFree(v45, v46);
  }
  v47 = __ldxr((unsigned __int8 *)v35);
  if (v47 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_37:
  SlowCase = v34[3];
  if (SlowCase >= v34[4])
  {
    SlowCase = v34[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v53 = *(_QWORD *)(SlowCase + 8) ^ v34[6];
    v34[4] = SlowCase + HIDWORD(v53);
    v34[5] = SlowCase + (int)v53;
  }
  v34[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v24);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v31 + 755))
    __dmb(0xAu);
  v48 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335D60 & 1) == 0)
  {
    qword_1EE335D58 = (uint64_t)&off_1E32A7FF0;
    byte_1EE335D60 = 1;
  }
  v55 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v49 = (SlowCase - 112) | 1;
  else
    v49 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v49 & 1) != 0)
    v50 = v49 + 47;
  else
    v50 = *(_QWORD *)v49 + 32;
  Allocator = *(_QWORD **)(v50 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v50 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335D58;
  Allocator[2] = v48;
  v54 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v48 + 32), (uint64_t *)&v55, (uint64_t *)&v54);
  if (v54)
    v54[1] = 3;
  return SlowCase;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSIDBIndex>((WebCore::JSIDBIndex *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSIDBIndexPrototype::finishCreation(WebCore::JSIDBIndexPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(a2, (uint64_t)&WebCore::JSIDBIndex::s_info, (uint64_t)&WebCore::JSIDBIndexPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::JSIDBIndex::destroy(unsigned int *this, JSC::JSCell *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    this = *(unsigned int **)(*(_QWORD *)(v2 + 144) + 152);
    v3 = this + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, this + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)this, a2);
      return (unsigned int *)bmalloc::api::isoDeallocate(v6, v7);
    }
  }
  return this;
}

uint64_t WebCore::JSIDBIndex::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBIndex::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 144);
  if (v5)
    v6 = *(_BYTE *)(a2 + 130) == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = *(_QWORD *)(a2 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v5 == v14)
        goto LABEL_15;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x194C9D3DCLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_15:
  v15 = *(_QWORD *)(a1 + 32);
  if ((v15 & 0xFFFE000000000002) == 0 && v15 != 0)
  {
    if ((v15 & 8) != 0)
    {
      if ((*(_BYTE *)(v15 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000));
      if (((*(_QWORD *)((v15 & 0xFFFFFFFFFFFFC000) + 8 * ((v15 >> 10) & 0xF) + 0x28) >> (v15 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSIDBIndex::visitChildren(WebCore::JSIDBIndex *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  char v19;

  v17[0] = a2;
  v17[1] = this;
  v19 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v18 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194C9D63CLL);
  }
  *((_QWORD *)a2 + 11) = v17;
  result = JSC::JSObject::visitChildren();
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 144);
  if (v7)
    v8 = *((_BYTE *)a2 + 130) == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = *((_QWORD *)a2 + 15);
    v9 = *(_QWORD *)(result + 48);
    v10 = *(_DWORD *)(v9 + 4);
    v11 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v15 + 16);
      if (!v16)
        break;
      if (v7 == v16)
        goto LABEL_17;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x194C9D5B8);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_17:
  if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
    result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  *(_QWORD *)(v17[0] + 88) = v18;
  return result;
}

unint64_t WebCore::JSIDBIndex::createPrototype(WebCore::JSIDBIndex *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSIDBIndexPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSIDBIndexPrototype::create(WebCore::JSIDBIndexPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSIDBIndexPrototype::finishCreation((WebCore::JSIDBIndexPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>,(WebCore::DOMConstructorID)111>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 888);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 888) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsIDBIndexConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBIndexPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>,(WebCore::DOMConstructorID)111>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsIDBIndex_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSIDBIndex_name(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::IDBIndex *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28[2];
  WTF::StringImpl *v29;
  char v30;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSIDBIndex::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSIDBIndex::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::IDBIndex **)(a2 + 24);
  *(_QWORD *)v28 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(this + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v26 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v28, a1);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v26;
    if (hasExceptionsAfterHandlingTraps)
    {
      v25 = 1;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v18);
        else
          *(_DWORD *)v12 -= 2;
      }
      v16 = 0;
      v15 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v12 = v26;
  }
  v25 = 0;
  v24 = 0;
  v26 = v12;
  WebCore::IDBIndex::setName(v10, &v26, (const WTF::StringImpl *)this, (uint64_t)v28);
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v30)
  {
    v20 = (WTF::StringImpl *)LOBYTE(v28[0]);
    LOBYTE(v26) = v28[0];
    v21 = v29;
    v29 = 0;
    v27 = v21;
    if (!*(_QWORD *)(v4 + 16))
    {
      v22.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v28[0]), (JSC::JSGlobalObject *)&v27);
      JSC::VM::throwException((JSC::VM *)v4, a1, v22);
      v21 = v27;
    }
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v30)
    {
      v23 = v29;
      v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v20);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
  }
  v15 = 0;
  v16 = 1;
LABEL_25:
  ((void (*)(int *, uint64_t *))off_1E32A90E0[v15])(v28, &v24);
  return v16;
}

unint64_t WebCore::jsIDBIndex_objectStore(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::IDBObjectStore>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 144));
}

uint64_t WebCore::jsIDBIndex_keyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[5];

  v2 = *(_QWORD *)(a2 + 32);
  if (v2)
    return v2;
  v5 = *(JSC::VM **)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v8 = v6 + 48;
  v9 = *(unsigned int *)(v6 + 64);
  if ((_DWORD)v9 == -1)
    v9 = -1;
  v17 = v9;
  LOBYTE(v15) = 0;
  v16 = 0;
  v18[0] = &v17;
  v18[1] = &v15;
  v18[2] = a1;
  v18[3] = v7;
  v18[4] = v8;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSG_6VectorISH_Lm0ENSG_15CrashOnOverflowELm16ENSG_10FastMallocEEEEEEEUlTyvE_JNSE_17integral_constantIlLl0EEENSQ_IlLl1EEEEEET_ST_((uint64_t)v18, (uint64_t)v14);
  if (v16)
  {
    v2 = v15;
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
      return 0;
    v10 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 32) = v2;
    if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v10 + 192), (const JSCell *)a2);
    return v2;
  }
  v12 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::jsIDBIndex_multiEntry(v12, v13);
}

uint64_t WebCore::jsIDBIndex_multiEntry(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 73))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsIDBIndex_unique(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 72))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSIDBIndexOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF::ConcurrentPtrHashSet *v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t result;
  void *v22;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[1];
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
LABEL_12:
    *a5 = "Reachable from IDBIndex";
    a5[1] = 24;
    if (v8)
      goto LABEL_6;
    goto LABEL_13;
  }
  if (v8[2] || ((*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD **)(v7 + 24);
  if (a5)
    goto LABEL_12;
LABEL_5:
  if (v8)
  {
LABEL_6:
    v11 = (void *)v8[18];
    goto LABEL_14;
  }
LABEL_13:
  v11 = 0;
LABEL_14:
  v12 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v13 = (_DWORD *)*((_QWORD *)v12 + 6);
  if ((_DWORD *)((char *)v12 + 56) == v13)
  {
    v22 = v11;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v12, v11);
    v11 = v22;
    if (!(_DWORD)result)
      return result;
LABEL_22:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v11);
    return 1;
  }
  v14 = v13[1];
  v15 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = v18;
  while (1)
  {
    v20 = *(void **)&v13[2 * v19 + 4];
    if (!v20)
      return 0;
    if (v20 == v11)
      goto LABEL_22;
    v19 = (v19 + 1) & v14;
    if (v19 == v18)
    {
      __break(0xC471u);
      JUMPOUT(0x194C9DD90);
    }
  }
}

void WebCore::JSIDBIndexOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  bmalloc::api *v30;
  void *v31;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 152) + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v8 = *(_QWORD *)(a3 + 32);
  v6 = (uint64_t *)(a3 + 32);
  v7 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v7 - 8);
    v10 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v7 + 16 * v13);
    if (v14 != v3)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v7 + 16 * v13);
        ++v15;
        if (v14 == v3)
          goto LABEL_8;
      }
      v13 = *(unsigned int *)(v7 - 4);
    }
    if (v13 == *(_DWORD *)(v7 - 4))
      goto LABEL_18;
LABEL_8:
    v16 = (_QWORD *)(v7 + 16 * v13);
    *v16 = -1;
    v19 = v16[1];
    v18 = v16 + 1;
    v17 = v19;
    if (v19)
    {
      *(_QWORD *)(v17 + 8) = 3;
      *v18 = 0;
    }
    ++*(_DWORD *)(*v6 - 16);
    v20 = *v6;
    v21 = *v6 ? *(_DWORD *)(v20 - 12) - 1 : -1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v6;
    if (*v6
      && ((v23 = 6 * *(_DWORD *)(v22 - 12), v24 = *(_DWORD *)(v22 - 4), v23 < v24) ? (v25 = v24 >= 9) : (v25 = 0), v25))
    {
      WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
      if (!v3)
        return;
    }
    else
    {
LABEL_18:
      if (!v3)
        return;
    }
  }
  v26 = *(unsigned int **)(*(_QWORD *)(v3 + 144) + 152);
  v27 = v26 + 6;
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
  {
    atomic_store(1u, v26 + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v26, a2);
    bmalloc::api::isoDeallocate(v30, v31);
  }
}

unint64_t WebCore::wrap<WebCore::IDBIndex>(uint64_t a1, WTF *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  bmalloc::api *v21;
  void *v22;
  WTF *v23;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WTF **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WTF **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  v12 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 18) + 152) + 24);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v23 = a2;
  v11 = WebCore::toJSNewlyCreated(a1, &v23);
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    v16 = *(unsigned int **)(*((_QWORD *)v15 + 18) + 152);
    v17 = v16 + 6;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v16, v14);
      bmalloc::api::isoDeallocate(v21, v22);
    }
  }
  return v11;
}

WebCore::IDBKeyRange *WebCore::JSIDBKeyRange::destroy(WebCore::JSIDBKeyRange *this, JSC::JSCell *a2)
{
  WebCore::IDBKeyRange *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::IDBKeyRange *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(result, a2);
      return (WebCore::IDBKeyRange *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::JSIDBKeyRange::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBKeyRangePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSIDBKeyRangePrototype::create(WebCore::JSIDBKeyRangePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSIDBKeyRange::s_info, &WebCore::JSIDBKeyRangePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBKeyRange>,(WebCore::DOMConstructorID)112>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 896);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBKeyRange>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSIDBKeyRange::s_info + ~((_QWORD)&WebCore::JSIDBKeyRange::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBKeyRange::s_info + ~((_QWORD)&WebCore::JSIDBKeyRange::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSIDBKeyRange::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSIDBKeyRange::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSIDBKeyRangePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSIDBKeyRangePrototype::create((WebCore::JSIDBKeyRangePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSIDBKeyRange::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSIDBKeyRange::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSIDBKeyRange::s_info, &WebCore::JSIDBKeyRangeConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 896) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsIDBKeyRangeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBKeyRangePrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBKeyRange>,(WebCore::DOMConstructorID)112>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsIDBKeyRange_lower(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::IDBKey *a4)
{
  return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(JSC::JSGlobalObject **)(*(_QWORD *)(a2 + 24) + 16), a4);
}

uint64_t WebCore::jsIDBKeyRange_upper(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::IDBKey *a4)
{
  return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(JSC::JSGlobalObject **)(*(_QWORD *)(a2 + 24) + 24), a4);
}

uint64_t WebCore::jsIDBKeyRange_lowerOpen(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 32))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsIDBKeyRange_upperOpen(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 33))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSIDBKeyRangeOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSIDBKeyRangeOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::IDBKeyRange *v3;
  int v4;
  bmalloc::api *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::IDBKeyRange *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *(WebCore::IDBKeyRange **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::IDBKeyRange **)(v8 + 16 * v14);
      if (v15 != v3)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::IDBKeyRange **)(v8 + 16 * v14);
          ++v16;
          if (v15 == v3)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
    bmalloc::api::isoDeallocate(v5, v6);
  }
}

uint64_t WebCore::JSIDBObjectStore::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::IDBObjectStore::visitReferencedIndexes<JSC::AbstractSlotVisitor>(*(_QWORD *)(a1 + 24), a2);
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBObjectStore::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  return WebCore::IDBObjectStore::visitReferencedIndexes<JSC::AbstractSlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

unsigned int *WebCore::JSIDBObjectStore::destroy(unsigned int *this, JSC::JSCell *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    this = *(unsigned int **)(v2 + 152);
    v3 = this + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, this + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)this, a2);
      return (unsigned int *)bmalloc::api::isoDeallocate(v6, v7);
    }
  }
  return this;
}

uint64_t WebCore::JSIDBObjectStore::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBObjectStore::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  JSC::JSObject::visitChildren();
  result = WebCore::IDBObjectStore::visitReferencedIndexes<JSC::AbstractSlotVisitor>(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSIDBObjectStore::visitChildren(WebCore::JSIDBObjectStore *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::IDBObjectStore::visitReferencedIndexes<JSC::AbstractSlotVisitor>(*((_QWORD *)this + 3), (uint64_t)a2);
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSIDBObjectStorePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSIDBObjectStorePrototype::create(WebCore::JSIDBObjectStorePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<20u>(this, (uint64_t)&WebCore::JSIDBObjectStore::s_info, (uint64_t)&WebCore::JSIDBObjectStorePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBObjectStore>,(WebCore::DOMConstructorID)113>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 904);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBObjectStore>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSIDBObjectStore::s_info + ~((_QWORD)&WebCore::JSIDBObjectStore::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBObjectStore::s_info + ~((_QWORD)&WebCore::JSIDBObjectStore::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSIDBObjectStore::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSIDBObjectStore::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSIDBObjectStorePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSIDBObjectStorePrototype::create((WebCore::JSIDBObjectStorePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSIDBObjectStore::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSIDBObjectStore::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 904) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsIDBObjectStoreConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBObjectStorePrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBObjectStore>,(WebCore::DOMConstructorID)113>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsIDBObjectStore_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSIDBObjectStore_name(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::IDBObjectStore *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28[2];
  WTF::StringImpl *v29;
  char v30;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSIDBObjectStore::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSIDBObjectStore::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::IDBObjectStore **)(a2 + 24);
  *(_QWORD *)v28 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(this + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v26 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v28, a1);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v26;
    if (hasExceptionsAfterHandlingTraps)
    {
      v25 = 1;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v18);
        else
          *(_DWORD *)v12 -= 2;
      }
      v16 = 0;
      v15 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v12 = v26;
  }
  v25 = 0;
  v24 = 0;
  v26 = v12;
  WebCore::IDBObjectStore::setName(v10, &v26, (const WTF::StringImpl *)this, (uint64_t)v28);
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v30)
  {
    v20 = (WTF::StringImpl *)LOBYTE(v28[0]);
    LOBYTE(v26) = v28[0];
    v21 = v29;
    v29 = 0;
    v27 = v21;
    if (!*(_QWORD *)(v4 + 16))
    {
      v22.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v28[0]), (JSC::JSGlobalObject *)&v27);
      JSC::VM::throwException((JSC::VM *)v4, a1, v22);
      v21 = v27;
    }
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v30)
    {
      v23 = v29;
      v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v20);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
  }
  v15 = 0;
  v16 = 1;
LABEL_25:
  ((void (*)(int *, uint64_t *))off_1E32A90E0[v15])(v28, &v24);
  return v16;
}

uint64_t WebCore::jsIDBObjectStore_keyPath(uint64_t a1, JSCell *a2)
{
  uint64_t v2;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[16];
  int v13;
  _BYTE v14[40];
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[5];

  v2 = *((_QWORD *)a2 + 4);
  if (v2)
    return v2;
  v5 = *(JSC::VM **)(a1 + 56);
  v6 = *((_QWORD *)a2 + 3);
  if (!*(_BYTE *)(v6 + 64))
  {
    v2 = 2;
LABEL_10:
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
      return 0;
    v9 = *(_QWORD *)(a1 + 56);
    *((_QWORD *)a2 + 4) = v2;
    if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)a2 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v9 + 192), a2);
    return v2;
  }
  v7 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v12[0] = 0;
  v13 = -1;
  v8 = *(unsigned int *)(v6 + 56);
  if ((_DWORD)v8 == -1)
  {
    v8 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E32AC378[v8])(v18, v12, v6 + 40);
    v13 = v8;
  }
  LOBYTE(v15) = 0;
  v16 = 0;
  v17 = v8;
  v18[0] = &v17;
  v18[1] = &v15;
  v18[2] = a1;
  v18[3] = v7;
  v18[4] = v12;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSG_6VectorISH_Lm0ENSG_15CrashOnOverflowELm16ENSG_10FastMallocEEEEEEEUlTyvE_JNSE_17integral_constantIlLl0EEENSQ_IlLl1EEEEEET_ST_((uint64_t)v18, (uint64_t)v14);
  if (v16)
  {
    v2 = v15;
    if (v13 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E32A9990[v13])(v18, v12);
    goto LABEL_10;
  }
  v11 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::jsIDBObjectStore_indexNames(v11);
}

unint64_t WebCore::jsIDBObjectStore_indexNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  BOOL (*v19)(WTF *, const WTF::String *, const WTF::String *);
  int v20;
  unsigned int v21;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v3 + 160))
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    WebCore::IDBObjectStoreInfo::indexNames(v3 + 24, (uint64_t)&v19);
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v19;
    v6 = v21;
    *(_DWORD *)(v5 + 16) = v20;
    *(_DWORD *)(v5 + 20) = v6;
    v7 = *(_QWORD *)(v5 + 8);
    v19 = WTF::codePointCompareLessThan;
    v8 = 126 - 2 * __clz(v6);
    if ((_DWORD)v6)
      v9 = v8;
    else
      v9 = 0;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v7, (WTF::StringImpl *)(v7 + 8 * v6), (uint64_t (**)(uint64_t *, uint64_t *))&v19, v9, 1);
  }
  v11 = WebCore::wrap<WebCore::DOMStringList>(a1, v4, (WTF *)v5);
  if (*(_DWORD *)v5 == 1)
  {
    v13 = *(unsigned int *)(v5 + 20);
    if ((_DWORD)v13)
    {
      v15 = *(WTF::StringImpl ***)(v5 + 8);
      v16 = 8 * v13;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            v18 = v16;
            WTF::StringImpl::destroy(v17, v10);
            v16 = v18;
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v14 = *(WTF **)(v5 + 8);
    if (v14)
    {
      *(_QWORD *)(v5 + 8) = 0;
      *(_DWORD *)(v5 + 16) = 0;
      WTF::fastFree(v14, v10);
    }
    WTF::fastFree((WTF *)v5, v10);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return v11;
}

uint64_t WebCore::jsIDBObjectStore_transaction(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::IDBTransaction>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 152));
}

uint64_t WebCore::jsIDBObjectStore_autoIncrement(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 72))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSIDBObjectStoreOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[1];
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
    goto LABEL_17;
  }
  if (v8[2] || ((*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD **)(v7 + 24);
  if (a5)
  {
LABEL_17:
    *a5 = "Reachable from IDBObjectStore";
    a5[1] = 30;
  }
LABEL_5:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    v8 = v21;
    if (!(_DWORD)result)
      return result;
LABEL_19:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v13 = v12[1];
  v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = v17;
  while (1)
  {
    v19 = *(_QWORD **)&v12[2 * v18 + 4];
    if (!v19)
      return 0;
    if (v8 == v19)
      goto LABEL_19;
    v18 = (v18 + 1) & v13;
    if (v18 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x194CA0034);
    }
  }
}

void WebCore::JSIDBObjectStoreOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  bmalloc::api *v30;
  void *v31;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (unsigned int *)(*(_QWORD *)(v3 + 152) + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v8 = *(_QWORD *)(a3 + 32);
  v6 = (uint64_t *)(a3 + 32);
  v7 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v7 - 8);
    v10 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v7 + 16 * v13);
    if (v14 != v3)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v7 + 16 * v13);
        ++v15;
        if (v14 == v3)
          goto LABEL_8;
      }
      v13 = *(unsigned int *)(v7 - 4);
    }
    if (v13 == *(_DWORD *)(v7 - 4))
      goto LABEL_18;
LABEL_8:
    v16 = (_QWORD *)(v7 + 16 * v13);
    *v16 = -1;
    v19 = v16[1];
    v18 = v16 + 1;
    v17 = v19;
    if (v19)
    {
      *(_QWORD *)(v17 + 8) = 3;
      *v18 = 0;
    }
    ++*(_DWORD *)(*v6 - 16);
    v20 = *v6;
    v21 = *v6 ? *(_DWORD *)(v20 - 12) - 1 : -1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v6;
    if (*v6
      && ((v23 = 6 * *(_DWORD *)(v22 - 12), v24 = *(_DWORD *)(v22 - 4), v23 < v24) ? (v25 = v24 >= 9) : (v25 = 0), v25))
    {
      WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
      if (!v3)
        return;
    }
    else
    {
LABEL_18:
      if (!v3)
        return;
    }
  }
  v26 = *(unsigned int **)(v3 + 152);
  v27 = v26 + 6;
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
  {
    atomic_store(1u, v26 + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v26, a2);
    bmalloc::api::isoDeallocate(v30, v31);
  }
}

unint64_t WebCore::createWrapper<WebCore::IDBObjectStore,WebCore::IDBObjectStore>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  int v36;
  unint64_t SlowCase;
  WTF *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  WTF *v47;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSIDBObjectStore::s_info + ~((_QWORD)&WebCore::JSIDBObjectStore::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBObjectStore::s_info + ~((_QWORD)&WebCore::JSIDBObjectStore::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSIDBObjectStore::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSIDBObjectStore::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSIDBObjectStorePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSIDBObjectStorePrototype::create((WebCore::JSIDBObjectStorePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSIDBObjectStore::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSIDBObjectStore::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 928);
  if (v23)
    goto LABEL_30;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  v45 = *(_QWORD *)(v26 + 928);
  if (!v45)
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v47, "IsoSpace T");
    v46 = 0;
    MEMORY[0x19AEA3204](v27, &v47, v20 + 192, v20 + 1872, 40, 8, &v46);
    v29 = (uint64_t)v46;
    v46 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v47;
    v47 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v45 = v27;
    v31 = *(_QWORD *)(v26 + 928);
    *(_QWORD *)(v26 + 928) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = *(unsigned int *)(v24 + 2844);
    if ((_DWORD)v32 == *(_DWORD *)(v24 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v24 + 2832, (unint64_t)&v45);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v24 + 2832) + 8 * v32) = v27;
      *(_DWORD *)(v24 + 2844) = v32 + 1;
    }
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v33 = *(_QWORD *)(v22 + 928);
  *(_QWORD *)(v22 + 928) = v23;
  if (v33)
  {
    v34 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v34, v35);
  }
  v36 = __ldxr((unsigned __int8 *)v24);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_30:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_31:
    v23[3] = SlowCase + 48;
    goto LABEL_32;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v44 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v44);
    v23[5] = SlowCase + (int)v44;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v38 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v38;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335D90 & 1) == 0)
  {
    qword_1EE335D88 = (uint64_t)&off_1E32A8080;
    byte_1EE335D90 = 1;
  }
  v47 = v4;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335D88;
  Allocator[2] = v39;
  v46 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v47, (uint64_t *)&v46);
  if (v46)
    v46[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::IDBObjectStore>(uint64_t a1, WTF *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  bmalloc::api *v21;
  void *v22;
  WTF *v23;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WTF **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WTF **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  v12 = (unsigned int *)(*((_QWORD *)a2 + 19) + 24);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v23 = a2;
  v11 = WebCore::createWrapper<WebCore::IDBObjectStore,WebCore::IDBObjectStore>(a1, &v23);
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    v16 = (unsigned int *)*((_QWORD *)v15 + 19);
    v17 = v16 + 6;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v16, v14);
      bmalloc::api::isoDeallocate(v21, v22);
    }
  }
  return v11;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSIDBOpenDBRequest>((WebCore::JSIDBOpenDBRequest *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSIDBOpenDBRequestPrototype::finishCreation(WebCore::JSIDBOpenDBRequestPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSIDBOpenDBRequest::s_info, &WebCore::JSIDBOpenDBRequestPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSIDBOpenDBRequest::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSIDBRequest::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSIDBRequest::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSIDBRequest::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBRequest::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSIDBRequest::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSIDBRequest::visitChildren(WebCore::JSIDBRequest *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 128);
    if (!v6 || (v6[1] & 3) != 0)
      v7 = 0;
    else
      v7 = *v6;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

uint64_t WebCore::JSIDBRequest::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSIDBRequest::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSIDBRequest::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 128);
  if (!v4 || (v4[1] & 3) != 0)
    v5 = 0;
  else
    v5 = *v4;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v5);
}

unint64_t WebCore::JSIDBOpenDBRequest::createPrototype(WebCore::JSIDBOpenDBRequest *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = WebCore::getDOMStructure<WebCore::JSIDBRequest>(this, a2);
  v6 = JSC::Structure::create((uint64_t *)this, v3, *(JSC::JSCell **)(v5 + 48));
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSIDBOpenDBRequestPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSIDBOpenDBRequestPrototype::create(WebCore::JSIDBOpenDBRequestPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSIDBOpenDBRequestPrototype::finishCreation((WebCore::JSIDBOpenDBRequestPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>,(WebCore::DOMConstructorID)114>(WebCore::JSEventTarget *this, uint64_t a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *v6;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 912);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>,(WebCore::DOMConstructorID)115>(this, a2, a3);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>::createStructure((uint64_t *)this, a2, v6);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>::create((uint64_t)this, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 912) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(a2 + 7))
      {
        v8 = (WebCore::JSEventTarget *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsIDBOpenDBRequestConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBOpenDBRequestPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>,(WebCore::DOMConstructorID)114>(*(WebCore::JSEventTarget **)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

uint64_t WebCore::jsIDBOpenDBRequest_onblocked(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 15;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 296), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 15);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 72))(v5);
  }
  return v11;
}

BOOL WebCore::setJSIDBOpenDBRequest_onblocked(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBOpenDBRequest::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBOpenDBRequest::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 15;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 296), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 15);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsIDBOpenDBRequest_onupgradeneeded(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 15;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 2224), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 15);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 72))(v5);
  }
  return v11;
}

BOOL WebCore::setJSIDBOpenDBRequest_onupgradeneeded(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBOpenDBRequest::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBOpenDBRequest::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 15;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 2224), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 15);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSIDBRequest::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBOpenDBRequestOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[4];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[5] || (result = (*(uint64_t (**)(_QWORD *))(v5[3] + 64))(v5 + 3), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

unsigned int *WebCore::JSIDBOpenDBRequestOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v29;
  unsigned int *v30;

  result = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = result + 15;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = result + 2;
  if (!result)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)result + ~((_QWORD)result << 32)) ^ (((unint64_t)result + ~((_QWORD)result << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(unsigned int **)(v10 + 16 * v16);
      if (v17 != result)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(unsigned int **)(v10 + 16 * v16);
          ++v18;
          if (v17 == result)
            goto LABEL_17;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_17:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = result + 15;
            v30 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v4 = v29;
            result = v30;
          }
        }
      }
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (result)
  {
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

uint64_t WebCore::wrap<WebCore::IDBOpenDBRequest>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v16 = *(_QWORD *)(v5 + 32);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(_QWORD *)(v16 + 16 * v21);
      if (v22 == a3)
      {
LABEL_18:
        v6 = *(_QWORD *)(v16 + 16 * v21 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v17;
          v22 = *(_QWORD *)(v16 + 16 * v21);
          ++v23;
          if (v22 == a3)
            goto LABEL_18;
        }
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        v7 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return v7;
      }
    }
  }
  v8 = (unsigned int *)(a3 + 60);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v24 = (unsigned int *)a3;
  v10 = WebCore::getDOMStructure<WebCore::JSIDBOpenDBRequest>(*(WebCore::JSIDBOpenDBRequest **)(a2 + 56), (JSC::VM *)a2);
  v7 = WebCore::JSIDBOpenDBRequest::create(v10, a2, (uint64_t *)&v24);
  WebCore::cacheWrapper<WebCore::IDBOpenDBRequest,WebCore::JSIDBOpenDBRequest>(*(_QWORD *)(a2 + 3320), a3, v7);
  v11 = v24;
  v24 = 0;
  if (v11)
  {
    v12 = v11 + 15;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 72))(v11);
    }
  }
  return v7;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSIDBRequest>((WebCore::JSIDBRequest *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSIDBRequestPrototype::finishCreation(WebCore::JSIDBRequestPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(a2, (uint64_t)&WebCore::JSIDBRequest::s_info, (uint64_t)&WebCore::JSIDBRequestPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::JSIDBRequest::createPrototype(WebCore::JSIDBRequest *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSIDBRequestPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSIDBRequestPrototype::create(WebCore::JSIDBRequestPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSIDBRequestPrototype::finishCreation((WebCore::JSIDBRequestPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>,(WebCore::DOMConstructorID)115>(WebCore::JSEventTarget *this, uint64_t a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *Constructor;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 920);
  if (!result)
  {
    Constructor = (JSC::JSCell *)WebCore::JSEventTarget::getConstructor(this, (JSC::VM *)a2, a3);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>::createStructure((uint64_t *)this, a2, Constructor);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>::create((uint64_t)this, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 920) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(a2 + 7))
      {
        v8 = (WebCore::JSEventTarget *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsIDBRequestConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBRequestPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>,(WebCore::DOMConstructorID)115>(*(WebCore::JSEventTarget **)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

void WebCore::jsIDBRequest_result(JSC::JSGlobalObject *a1, WebCore::JSIDBRequest *this)
{
  WebCore::JSIDBRequest::result(this, a1);
}

unint64_t WebCore::jsIDBRequest_error(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  JSC::VM *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSValue v11;
  _DWORD *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16[8];
  WTF::StringImpl *v17;

  v3 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(v3 + 352) == 1)
  {
    v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v5 = *(_DWORD **)(v3 + 72);
    v13 = v5;
    v15 = 0;
    if (!v5)
    {
      v6 = 0;
      v7 = 2;
LABEL_11:
      ((void (*)(char *, _DWORD **))off_1E32AC388[v6])(v16, &v13);
      return v7;
    }
    v7 = WebCore::wrap<WebCore::DOMException>((uint64_t)a1, v4, v5);
  }
  else
  {
    v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v13) = 8;
    v15 = 1;
    v16[0] = 8;
    v10 = v14;
    v14 = 0;
    v17 = v10;
    if (!*((_QWORD *)v8 + 2))
    {
      v11.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v17);
      JSC::VM::throwException(v8, a1, v11);
      v10 = v17;
    }
    v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v7 = 0;
  }
  v6 = v15;
  if (v15 != -1)
    goto LABEL_11;
  return v7;
}

uint64_t WebCore::jsIDBRequest_source(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  WTF *v11;
  int v12;
  char v13;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 328))
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  LOBYTE(v11) = 0;
  v12 = -1;
  v4 = *(unsigned int *)(v2 + 320);
  if ((_DWORD)v4 == -1)
    goto LABEL_21;
  ((void (*)(char *, WTF **, uint64_t))off_1E32AC3B0[v4])(&v13, &v11, v2 + 312);
  v12 = v4;
  switch((_DWORD)v4)
  {
    case 2:
      if (!v11)
      {
        v7 = 2;
        v8 = 2;
LABEL_19:
        ((void (*)(char *, WTF **))off_1E32AC398[v8])(&v13, &v11);
        return v7;
      }
      v6 = WebCore::wrap<WebCore::IDBCursor>(a1, v3, (uint64_t)v11);
      goto LABEL_13;
    case 1:
      if (!v11)
      {
        v8 = 1;
LABEL_18:
        v7 = 2;
        goto LABEL_19;
      }
      v6 = WebCore::wrap<WebCore::IDBIndex>(v3, v11);
LABEL_13:
      v7 = v6;
      v8 = v12;
      if (v12 == -1)
        return v7;
      goto LABEL_19;
    case 0:
      if (v11)
      {
        v6 = WebCore::wrap<WebCore::IDBObjectStore>(v3, v11);
        goto LABEL_13;
      }
      v8 = 0;
      goto LABEL_18;
  }
LABEL_21:
  v10 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::jsIDBRequest_transaction(v10);
}

uint64_t WebCore::jsIDBRequest_transaction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 359))
    return 2;
  v3 = *(unsigned int **)(v2 + 64);
  if (!v3)
    return 2;
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = v3 + 6;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = WebCore::wrap<WebCore::IDBTransaction>(a1, v4, (uint64_t)v3);
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, v3 + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, v7);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  return v8;
}

uint64_t WebCore::jsIDBRequest_readyState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 352);
  if ((byte_1EE335D14 & 1) == 0)
  {
    dword_1ECE78B10 += 2;
    byte_1EE335D14 = 1;
    qword_1EE335E88 = (uint64_t)&dword_1ECE78B10;
    dword_1ECE78B30 += 2;
    qword_1EE335E90 = (uint64_t)&dword_1ECE78B30;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1069[8 * v4 + 376];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsIDBRequest_onsuccess(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 15;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 2016), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 15);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 72))(v5);
  }
  return v11;
}

BOOL WebCore::setJSIDBRequest_onsuccess(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBRequest::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBRequest::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 15;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 2016), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 15);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsIDBRequest_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 15;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v5 + 15);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 72))(v5);
  }
  return v11;
}

BOOL WebCore::setJSIDBRequest_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBRequest::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBRequest::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 15;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 784), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (!v18)
      {
        atomic_store(1u, v11 + 15);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSIDBRequestOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[4];
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
    goto LABEL_17;
  }
  if (v8[5] || ((*(uint64_t (**)(_QWORD *))(v8[3] + 64))(v8 + 3) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD **)(v7 + 24);
  if (a5)
  {
LABEL_17:
    *a5 = "Reachable from IDBRequest";
    a5[1] = 26;
  }
LABEL_5:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    v8 = v21;
    if (!(_DWORD)result)
      return result;
LABEL_19:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v13 = v12[1];
  v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = v17;
  while (1)
  {
    v19 = *(_QWORD **)&v12[2 * v18 + 4];
    if (!v19)
      return 0;
    if (v8 == v19)
      goto LABEL_19;
    v18 = (v18 + 1) & v13;
    if (v18 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x194CA24F4);
    }
  }
}

unsigned int *WebCore::JSIDBRequestOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v29;
  unsigned int *v30;

  result = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = result + 15;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = result + 2;
  if (!result)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)result + ~((_QWORD)result << 32)) ^ (((unint64_t)result + ~((_QWORD)result << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(unsigned int **)(v10 + 16 * v16);
      if (v17 != result)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(unsigned int **)(v10 + 16 * v16);
          ++v18;
          if (v17 == result)
            goto LABEL_17;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_17:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = result + 15;
            v30 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v4 = v29;
            result = v30;
          }
        }
      }
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (result)
  {
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

uint64_t WebCore::wrap<WebCore::IDBRequest>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v16 = *(_QWORD *)(v5 + 32);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(_QWORD *)(v16 + 16 * v21);
      if (v22 == a3)
      {
LABEL_18:
        v6 = *(_QWORD *)(v16 + 16 * v21 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v17;
          v22 = *(_QWORD *)(v16 + 16 * v21);
          ++v23;
          if (v22 == a3)
            goto LABEL_18;
        }
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        v7 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return v7;
      }
    }
  }
  v8 = (unsigned int *)(a3 + 60);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v24 = (unsigned int *)a3;
  v10 = WebCore::getDOMStructure<WebCore::JSIDBRequest>(*(WebCore::JSIDBRequest **)(a2 + 56), (JSC::VM *)a2);
  v7 = WebCore::JSIDBRequest::create(v10, a2, (uint64_t *)&v24);
  WebCore::cacheWrapper<WebCore::IDBRequest,WebCore::JSIDBRequest>(*(_QWORD *)(a2 + 3320), a3, v7);
  v11 = v24;
  v24 = 0;
  if (v11)
  {
    v12 = v11 + 15;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 72))(v11);
    }
  }
  return v7;
}

uint64_t WebCore::JSIDBTransaction::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::IDBTransaction::visitReferencedObjectStores<JSC::AbstractSlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSIDBTransaction::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::IDBTransaction::visitReferencedObjectStores<JSC::AbstractSlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSIDBTransaction>((WebCore::JSIDBTransaction *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSIDBTransactionPrototype::finishCreation(WebCore::JSIDBTransactionPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(a2, (uint64_t)&WebCore::JSIDBTransaction::s_info, (uint64_t)&WebCore::JSIDBTransactionPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSIDBTransaction::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBTransaction::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::IDBTransaction::visitReferencedObjectStores<JSC::AbstractSlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSIDBTransaction::visitChildren(WebCore::JSIDBTransaction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    result = WebCore::IDBTransaction::visitReferencedObjectStores<JSC::AbstractSlotVisitor>(*((_QWORD *)this + 3), (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSIDBTransaction::createPrototype(WebCore::JSIDBTransaction *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSIDBTransactionPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSIDBTransactionPrototype::create(WebCore::JSIDBTransactionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSIDBTransactionPrototype::finishCreation((WebCore::JSIDBTransactionPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>,(WebCore::DOMConstructorID)116>(WebCore::JSEventTarget *this, uint64_t a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *Constructor;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 928);
  if (!result)
  {
    Constructor = (JSC::JSCell *)WebCore::JSEventTarget::getConstructor(this, (JSC::VM *)a2, a3);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>::createStructure((uint64_t *)this, a2, Constructor);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>::create((uint64_t)this, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 928) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(a2 + 7))
      {
        v8 = (WebCore::JSEventTarget *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsIDBTransactionConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBTransactionPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>,(WebCore::DOMConstructorID)116>(*(WebCore::JSEventTarget **)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

unint64_t WebCore::jsIDBTransaction_objectStoreNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF *v15;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::IDBTransaction::objectStoreNames(*(WebCore::IDBTransaction **)(a2 + 24), (uint64_t *)&v15);
  v5 = WebCore::wrap<WebCore::DOMStringList>(a1, v3, v15);
  v6 = v15;
  v15 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = *((unsigned int *)v6 + 5);
      if ((_DWORD)v8)
      {
        v10 = (WTF::StringImpl **)*((_QWORD *)v6 + 1);
        v11 = 8 * v8;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              v13 = v11;
              v14 = v10;
              WTF::StringImpl::destroy(v12, v4);
              v11 = v13;
              v10 = v14;
            }
            else
            {
              *(_DWORD *)v12 -= 2;
            }
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v9 = (WTF *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        *((_QWORD *)v6 + 1) = 0;
        *((_DWORD *)v6 + 4) = 0;
        WTF::fastFree(v9, v4);
      }
      WTF::fastFree(v6, v4);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return v5;
}

uint64_t WebCore::jsIDBTransaction_mode(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 96);
  if ((byte_1EE335D16 & 1) == 0)
  {
    dword_1ECE78BB0 += 2;
    byte_1EE335D16 = 1;
    dword_1ECE78BD0 += 2;
    qword_1EE335EF0 = (uint64_t)&dword_1ECE78BB0;
    unk_1EE335EF8 = &dword_1ECE78BD0;
    dword_1ECE78BF0 += 2;
    qword_1EE335F00 = (uint64_t)&dword_1ECE78BF0;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1069[8 * v4 + 480];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsIDBTransaction_durability(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 97);
  if ((byte_1EE335D15 & 1) == 0)
  {
    dword_1ECE78B50 += 2;
    byte_1EE335D15 = 1;
    dword_1ECE78B70 += 2;
    qword_1EE335ED8 = (uint64_t)&dword_1ECE78B50;
    unk_1EE335EE0 = &dword_1ECE78B70;
    dword_1ECE78B90 += 2;
    qword_1EE335EE8 = (uint64_t)&dword_1ECE78B90;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1069[8 * v4 + 456];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsIDBTransaction_db(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(*(_QWORD *)(a2 + 24) + 72);
  if (v2)
    return WebCore::wrap<WebCore::IDBDatabase>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsIDBTransaction_error(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(a2 + 24) + 160);
  if (v2)
    return WebCore::wrap<WebCore::DOMException>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::jsIDBTransaction_onabort(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  bmalloc::api *v16;
  void *v17;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v12 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v13 = __ldaxr(v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v6));
  if (!v14)
  {
    atomic_store(1u, v5 + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, v11);
    bmalloc::api::isoDeallocate(v16, v17);
  }
  return v12;
}

BOOL WebCore::setJSIDBTransaction_onabort(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  bmalloc::api *v21;
  void *v22;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBTransaction::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBTransaction::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 6;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 64), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v18 = __ldaxr(v12);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v12));
      if (!v19)
      {
        atomic_store(1u, v11 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v11, v17);
        bmalloc::api::isoDeallocate(v21, v22);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsIDBTransaction_oncomplete(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  bmalloc::api *v16;
  void *v17;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v12 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 424), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v13 = __ldaxr(v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v6));
  if (!v14)
  {
    atomic_store(1u, v5 + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, v11);
    bmalloc::api::isoDeallocate(v16, v17);
  }
  return v12;
}

BOOL WebCore::setJSIDBTransaction_oncomplete(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  bmalloc::api *v21;
  void *v22;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBTransaction::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBTransaction::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 6;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 424), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v18 = __ldaxr(v12);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v12));
      if (!v19)
      {
        atomic_store(1u, v11 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v11, v17);
        bmalloc::api::isoDeallocate(v21, v22);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsIDBTransaction_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  bmalloc::api *v16;
  void *v17;

  v5 = *(unsigned int **)(a2 + 24);
  v6 = v5 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v12 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v10 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v13 = __ldaxr(v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v6));
  if (!v14)
  {
    atomic_store(1u, v5 + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v5, v11);
    bmalloc::api::isoDeallocate(v16, v17);
  }
  return v12;
}

BOOL WebCore::setJSIDBTransaction_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  bmalloc::api *v21;
  void *v22;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSIDBTransaction::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSIDBTransaction::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(unsigned int **)(a2 + 24);
      v12 = v11 + 6;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v16 + 784), a3, (_DWORD *)a2);
      if (!v11)
        goto LABEL_22;
      do
      {
        v18 = __ldaxr(v12);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v12));
      if (!v19)
      {
        atomic_store(1u, v11 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v11, v17);
        bmalloc::api::isoDeallocate(v21, v22);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
LABEL_22:
        if (a3)
          goto LABEL_23;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSIDBTransactionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSIDBTransactionOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  bmalloc::api *v29;
  void *v30;

  v3 = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = v3 + 6;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = v3 + 2;
  if (!v3)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(unsigned int **)(v10 + 16 * v16);
      if (v17 != v3)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(unsigned int **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v3)
            goto LABEL_17;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_17:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v4 = v3 + 6;
          }
        }
      }
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (v3)
  {
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v29, v30);
    }
  }
}

uint64_t WebCore::wrap<WebCore::IDBTransaction>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  bmalloc::api *v25;
  void *v26;
  WebCore::IDBTransaction *v27;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v17 = *(_QWORD *)(v5 + 32);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = *(_QWORD *)(v17 + 16 * v22);
      if (v23 == a3)
      {
LABEL_18:
        v6 = *(_QWORD *)(v17 + 16 * v22 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v24 = 1;
        while (v23)
        {
          v22 = ((_DWORD)v22 + v24) & v18;
          v23 = *(_QWORD *)(v17 + 16 * v22);
          ++v24;
          if (v23 == a3)
            goto LABEL_18;
        }
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        v7 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return v7;
      }
    }
  }
  v8 = (unsigned int *)(a3 + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v27 = (WebCore::IDBTransaction *)a3;
  v10 = WebCore::getDOMStructure<WebCore::JSIDBTransaction>(*(WebCore::JSIDBTransaction **)(a2 + 56), (JSC::VM *)a2);
  v7 = WebCore::JSIDBTransaction::create(v10, a2, (uint64_t *)&v27);
  WebCore::cacheWrapper<WebCore::IDBTransaction,WebCore::JSIDBTransaction>(*(_QWORD *)(a2 + 3320), a3, v7);
  v12 = (unsigned int *)v27;
  v27 = 0;
  if (v12)
  {
    v13 = v12 + 6;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v12, v11);
      bmalloc::api::isoDeallocate(v25, v26);
    }
  }
  return v7;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSIDBVersionChangeEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  JSC::JSCell *v9;
  uint64_t Object;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  JSC::VM *v19;
  double v20;
  _BOOL4 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  JSC::VM *v30;
  double v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  JSC::VM *v35;
  double v36;
  double v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  WebCore::JSDOMGlobalObject *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  JSC::VM *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  int v58;
  unint64_t v59;
  WebCore::JSEvent *v60;
  JSC::JSCell *v61;
  unint64_t Structure;
  JSC::Structure *v63;
  JSC::JSCell *v64;
  uint64_t v65;
  JSCell *v66;
  JSC::JSCell *v67;
  JSC::JSGlobalObject *v68;
  JSC::JSObject *v69;
  JSC::JSGlobalObject *v70;
  JSC::VM *v71;
  WebCore::JSDOMGlobalObject *v72;
  JSC::Structure *v73;
  JSC::VM *FunctionRealm;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char **v81;
  int v82;
  JSC::JSCell *v83;
  unint64_t v84;
  JSC::Structure *v85;
  JSC::JSCell *v86;
  uint64_t v87;
  unint64_t SubclassStructure;
  _DWORD *v89;
  double v91;
  double v92;
  JSValue v93;
  char v94;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  int *v100;
  int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  int *v105;
  int v106;
  BOOL v107;
  int v108;
  uint64_t v109;
  int *v110;
  int v111;
  double v112;
  double v113;
  _BOOL4 v114;
  JSC::VM *v115;
  uint64_t v116;
  _BYTE v117[7];
  WTF::StringImpl *v118;
  int v119;
  _BYTE v120[7];
  JSC::VM *v121;
  unint64_t v122;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v93.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v93);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v118);
  v8 = v119;
  if (!v119)
  {
    v115 = v5;
    v116 = v7;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL
      || (v9 = *(JSC::JSCell **)(a2 + 56),
          v2 = (JSC::VM *)*((_QWORD *)a1 + 7),
          v121 = v2,
          ((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) == 2))
    {
      v13 = 0;
      v14 = 0;
      LOBYTE(v15) = 0;
      v114 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      goto LABEL_73;
    }
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
      JSC::throwTypeError();
      v66 = 0;
LABEL_112:
      v8 = v119;
      goto LABEL_113;
    }
    v3 = Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = (WTF::StringImpl *)v122;
    v13 = JSC::JSObject::get((JSC::Structure *)v3, a1, v122);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
    {
LABEL_158:
      v66 = 0;
      goto LABEL_112;
    }
    if (v13 != 10)
    {
      v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v13 >= 0xFFFE000000000000)
        goto LABEL_162;
      *(_QWORD *)&v20 = v13 - 0x2000000000000;
      if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v21 = v20 > 0.0 || v20 < 0.0;
        goto LABEL_18;
      }
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v21 = v13 == 7;
        goto LABEL_18;
      }
      v98 = *(unsigned __int8 *)(v13 + 5);
      if (v98 == 3)
      {
        v101 = *(_DWORD *)(v13 + 8);
      }
      else
      {
        if (v98 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v97 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_203;
          }
          v21 = 1;
          goto LABEL_18;
        }
        v99 = *(_QWORD *)(v13 + 8);
        if ((v99 & 1) != 0)
          v100 = (int *)(v13 + 16);
        else
          v100 = (int *)(v99 + 4);
        v101 = *v100;
      }
      v97 = v101 == 0;
      goto LABEL_203;
    }
    v114 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v22 = (WTF::StringImpl *)v122;
      v24 = JSC::JSObject::get((JSC::Structure *)v3, a1, v122);
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v23);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
        goto LABEL_158;
      if (v24 == 10)
      {
        v16 = 0;
        goto LABEL_30;
      }
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v24 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v26 = v24 - 0x2000000000000;
      if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v24 & 0xFFFE000000000002) != 0)
        {
          v16 = v24 == 7;
          goto LABEL_29;
        }
        v103 = *(unsigned __int8 *)(v24 + 5);
        if (v103 == 3)
        {
          v106 = *(_DWORD *)(v24 + 8);
          goto LABEL_195;
        }
        if (v103 == 2)
        {
          v104 = *(_QWORD *)(v24 + 8);
          if ((v104 & 1) != 0)
            v105 = (int *)(v24 + 16);
          else
            v105 = (int *)(v104 + 4);
          v106 = *v105;
LABEL_195:
          v102 = v106 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_197:
            v16 = 1;
            goto LABEL_29;
          }
          v102 = *(_QWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_207:
        v16 = !v102;
        goto LABEL_29;
      }
      if (v26 > 0.0)
        goto LABEL_197;
      v16 = v26 < 0.0;
LABEL_29:
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
        goto LABEL_158;
LABEL_30:
      WTF::AtomStringImpl::addLiteral();
      v27 = (WTF::StringImpl *)v122;
      v29 = JSC::JSObject::get((JSC::Structure *)v3, a1, v122);
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v28);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
        goto LABEL_158;
      if (v29 != 10)
      {
        v30 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v29 >= 0xFFFE000000000000)
        {
          v107 = (_DWORD)v29 == 0;
          goto LABEL_211;
        }
        *(_QWORD *)&v31 = v29 - 0x2000000000000;
        if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v31 <= 0.0)
          {
            v17 = v31 < 0.0;
            goto LABEL_40;
          }
        }
        else
        {
          if ((v29 & 0xFFFE000000000002) != 0)
          {
            v17 = v29 == 7;
            goto LABEL_40;
          }
          v108 = *(unsigned __int8 *)(v29 + 5);
          if (v108 == 3)
          {
            v111 = *(_DWORD *)(v29 + 8);
            goto LABEL_199;
          }
          if (v108 == 2)
          {
            v109 = *(_QWORD *)(v29 + 8);
            if ((v109 & 1) != 0)
              v110 = (int *)(v29 + 16);
            else
              v110 = (int *)(v109 + 4);
            v111 = *v110;
LABEL_199:
            v107 = v111 == 0;
LABEL_211:
            v17 = !v107;
LABEL_40:
            if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
              goto LABEL_158;
            goto LABEL_41;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v107 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_211;
          }
        }
        v17 = 1;
        goto LABEL_40;
      }
      v17 = 0;
LABEL_41:
      WTF::AtomStringImpl::addLiteral();
      v32 = (WTF::StringImpl *)v122;
      v34 = JSC::JSObject::get((JSC::Structure *)v3, a1, v122);
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v33);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
        goto LABEL_158;
      if ((v34 | 8) == 0xA)
      {
        v14 = 0;
        LOBYTE(v15) = 0;
        v18 = 0;
      }
      else
      {
        v122 = v34;
        if (v34 < 0xFFFE000000000000 || (v34 & 0x80000000) != 0)
        {
          v35 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v34 >= 0xFFFE000000000000)
          {
            v36 = (double)(int)v34;
          }
          else if (v34 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            v96 = (JSC::VM *)*((_QWORD *)a1 + 7);
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v122, a1);
            v35 = v96;
          }
          else
          {
            *(_QWORD *)&v36 = v34 - 0x2000000000000;
          }
          if (*((_DWORD *)v35 + 20))
          {
            v113 = v36;
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
            v36 = v113;
            if ((hasExceptionsAfterHandlingTraps & 1) != 0)
              goto LABEL_158;
          }
          if (fabs(v36) == INFINITY)
          {
            v15 = 0;
          }
          else
          {
            v37 = fmod(trunc(v36), 1.84467441e19);
            v15 = v37 >= 0.0 ? (unint64_t)v37 : -(uint64_t)(unint64_t)-v37;
          }
        }
        else
        {
          v15 = v34;
        }
        v14 = v15 >> 8;
        v18 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v38 = (WTF::StringImpl *)v122;
      v3 = JSC::JSObject::get((JSC::Structure *)v3, a1, v122);
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v39);
        else
          *(_DWORD *)v38 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
        goto LABEL_158;
      if (v3 == 10)
      {
LABEL_69:
        v13 = 0;
        goto LABEL_73;
      }
      v122 = v3;
      if (v3 < 0xFFFE000000000000 || (v3 & 0x80000000) != 0)
      {
        v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v3 >= 0xFFFE000000000000)
        {
          v91 = (double)(int)v3;
        }
        else if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v122, a1);
        }
        else
        {
          *(_QWORD *)&v91 = v3 - 0x2000000000000;
        }
        if (*((_DWORD *)v2 + 20))
        {
          v112 = v91;
          v94 = JSC::VM::hasExceptionsAfterHandlingTraps(v2);
          v91 = v112;
          if ((v94 & 1) != 0)
            goto LABEL_158;
        }
        if (fabs(v91) == INFINITY)
          goto LABEL_69;
        v92 = fmod(trunc(v91), 1.84467441e19);
        if (v92 >= 0.0)
          v13 = (unint64_t)v92;
        else
          v13 = -(uint64_t)(unint64_t)-v92;
      }
      else
      {
        v13 = v3;
      }
LABEL_73:
      *(_DWORD *)v117 = *(_DWORD *)v120;
      *(_DWORD *)&v117[3] = *(_DWORD *)&v120[3];
      if (!v119)
      {
        v40 = v15 | (v14 << 8);
        v41 = v118;
        v118 = 0;
        v42 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v42);
        *(_QWORD *)(v42 + 8) = 0;
        if (v16)
          v46 = 4;
        else
          v46 = 0;
        if (v17)
          v47 = 8;
        else
          v47 = 0;
        if (v114)
          v48 = 2293762;
        else
          v48 = 2293760;
        v49 = v46 | v48 | v47 | (v41 != 0) | *(_DWORD *)(v42 + 20) & 0xFFC00000;
        *(_DWORD *)(v42 + 16) = 1;
        *(_DWORD *)(v42 + 20) = v49;
        if (v41)
        {
          *(_DWORD *)v41 += 2;
          v49 = *(_DWORD *)(v42 + 20);
        }
        *(_QWORD *)(v42 + 24) = v41;
        *(_QWORD *)(v42 + 32) = 0;
        *(_QWORD *)(v42 + 40) = 0;
        *(_QWORD *)(v42 + 48) = 0;
        *(_QWORD *)(v42 + 56) = v45;
        *(_DWORD *)(v42 + 20) = v49 | 0x4000;
        *(_QWORD *)v42 = off_1E3358180;
        *(_QWORD *)(v42 + 64) = 0;
        *(_QWORD *)(v42 + 72) = 0;
        *(_QWORD *)(v42 + 80) = 0;
        *(_QWORD *)(v42 + 88) = v13;
        *(_QWORD *)(v42 + 96) = v40;
        *(_BYTE *)(v42 + 104) = v18;
        *(_DWORD *)(v42 + 105) = *(_DWORD *)v117;
        *(_DWORD *)(v42 + 108) = *(_DWORD *)&v117[3];
        v122 = v42;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::destroy(v41, v43);
            if (*(void (***)(WebCore::IDBVersionChangeEvent *__hidden))v42 != off_1E3358180)
            {
              __break(0xC471u);
              JUMPOUT(0x194CA45E4);
            }
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
        v50 = *(JSC::VM **)(v116 + 40);
        v51 = *((_QWORD *)v50 + 412);
        if (!v51)
          goto LABEL_94;
        v52 = *(_DWORD *)(v51 - 8);
        v53 = ((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
             + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) >> 22);
        v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
        v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
        v56 = v52 & ((v55 >> 31) ^ v55);
        v57 = *(char ***)(v51 + 16 * v56);
        if (v57 == &WebCore::JSIDBVersionChangeEvent::s_info)
        {
LABEL_93:
          v59 = *(_QWORD *)(v51 + 16 * v56 + 8);
          if (!v59)
            goto LABEL_94;
        }
        else
        {
          v58 = 1;
          while (v57)
          {
            v56 = ((_DWORD)v56 + v58) & v52;
            v57 = *(char ***)(v51 + 16 * v56);
            ++v58;
            if (v57 == &WebCore::JSIDBVersionChangeEvent::s_info)
              goto LABEL_93;
          }
LABEL_94:
          v60 = (WebCore::JSEvent *)*((_QWORD *)v50 + 7);
          v61 = (JSC::JSCell *)WebCore::JSEvent::prototype(v60, *(JSC::VM **)(v116 + 40), v44);
          Structure = WebCore::JSIDBVersionChangeEventPrototype::createStructure((uint64_t *)v60, (uint64_t)v50, v61);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v64 = (JSC::JSCell *)WebCore::JSIDBVersionChangeEventPrototype::create(v60, v50, Structure, v63);
          v65 = WebCore::JSIDBVersionChangeEvent::createStructure((uint64_t *)v60, (uint64_t)v50, v64);
          v59 = WebCore::cacheDOMStructure((JSCell *)v50, v65, (uint64_t)&WebCore::JSIDBVersionChangeEvent::s_info);
        }
        v66 = (JSCell *)WebCore::JSIDBVersionChangeEvent::create(v59, v50, (uint64_t *)&v122);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v50 + 415), v42, (uint64_t)v66);
        v67 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v67 & 0xFFFE000000000002) != 0
          || (v68 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v67)) == 0
          || (v70 = v68, v68 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v71 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v68, v69),
              *((_DWORD *)v71 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v71) & 1) != 0)
        {
LABEL_108:
          if (*((_DWORD *)v115 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v115) & 1) != 0)
            v66 = 0;
          v89 = (_DWORD *)v122;
          v122 = 0;
          if (v89)
          {
            if (v89[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v89 + 8))(v89);
            else
              --v89[4];
          }
          goto LABEL_112;
        }
        v75 = *((_QWORD *)FunctionRealm + 412);
        if (v75)
        {
          v76 = *(_DWORD *)(v75 - 8);
          v77 = ((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
               + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) >> 22);
          v78 = 9 * ((v77 + ~(v77 << 13)) ^ ((v77 + ~(v77 << 13)) >> 8));
          v79 = (v78 ^ (v78 >> 15)) + ~((v78 ^ (v78 >> 15)) << 27);
          v80 = v76 & ((v79 >> 31) ^ v79);
          v81 = *(char ***)(v75 + 16 * v80);
          if (v81 != &WebCore::JSIDBVersionChangeEvent::s_info)
          {
            v82 = 1;
            while (v81)
            {
              v80 = ((_DWORD)v80 + v82) & v76;
              v81 = *(char ***)(v75 + 16 * v80);
              ++v82;
              if (v81 == &WebCore::JSIDBVersionChangeEvent::s_info)
                goto LABEL_104;
            }
            goto LABEL_105;
          }
LABEL_104:
          v72 = *(WebCore::JSDOMGlobalObject **)(v75 + 16 * v80 + 8);
          if (!v72)
            goto LABEL_105;
        }
        else
        {
LABEL_105:
          v83 = (JSC::JSCell *)WebCore::JSEvent::prototype(v71, FunctionRealm, v72);
          v84 = WebCore::JSIDBVersionChangeEventPrototype::createStructure((uint64_t *)v71, (uint64_t)FunctionRealm, v83);
          *(_DWORD *)(v84 + 16) |= 0x80000u;
          v86 = (JSC::JSCell *)WebCore::JSIDBVersionChangeEventPrototype::create(v71, FunctionRealm, v84, v85);
          v87 = WebCore::JSIDBVersionChangeEvent::createStructure((uint64_t *)v71, (uint64_t)FunctionRealm, v86);
          v72 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v87, (uint64_t)&WebCore::JSIDBVersionChangeEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v70, v72, v73);
        if (!*((_DWORD *)v71 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v71) & 1) == 0)
          JSC::JSObject::setStructure(v66, v71, SubclassStructure);
        goto LABEL_108;
      }
      v19 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_162:
      v97 = (_DWORD)v13 == 0;
LABEL_203:
      v21 = !v97;
LABEL_18:
      v114 = v21;
      if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
        goto LABEL_158;
    }
    v102 = (_DWORD)v24 == 0;
    goto LABEL_207;
  }
  v66 = 0;
LABEL_113:
  if (v8 != -1)
    ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32A9100[v8])(&v122, &v118);
  return v66;
}

uint64_t WebCore::JSIDBVersionChangeEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIDBVersionChangeEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSIDBVersionChangeEventPrototype::create(WebCore::JSIDBVersionChangeEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSIDBVersionChangeEvent::s_info, &WebCore::JSIDBVersionChangeEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIDBVersionChangeEvent>,(WebCore::DOMConstructorID)117>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 936);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSIDBVersionChangeEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
         + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
                                                                         + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSIDBVersionChangeEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSIDBVersionChangeEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSIDBVersionChangeEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSIDBVersionChangeEventPrototype::create((WebCore::JSIDBVersionChangeEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSIDBVersionChangeEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSIDBVersionChangeEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 936) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsIDBVersionChangeEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIDBVersionChangeEventPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIDBVersionChangeEvent>,(WebCore::DOMConstructorID)117>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsIDBVersionChangeEvent_oldVersion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsIDBVersionChangeEvent_newVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double v5;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 104))
    return 2;
  v3 = *(_QWORD *)(v2 + 96);
  if (HIDWORD(v3))
  {
    v5 = (double)v3;
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
      return v3 | 0xFFFE000000000000;
    v5 = (double)v3;
  }
  return *(_QWORD *)&v5 + 0x2000000000000;
}

uint64_t WebCore::JSIDBVersionChangeEvent::subspaceForImpl(WebCore::JSIDBVersionChangeEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 960);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 960))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 960);
    *(_QWORD *)(v8 + 960) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 960);
  *(_QWORD *)(v3 + 960) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSIIRFilterNode>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  JSCell *v16;
  uint64_t v17;
  JSC::JSCell *v18;
  uint64_t Object;
  JSC::Structure *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  void *v38;
  int v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  void *v51;
  WebCore::JSDOMGlobalObject *v52;
  WTF *v53;
  WTF *v54;
  JSC::VM *v55;
  JSC::VM *v56;
  WTF::StringImpl *v57;
  WebCore::AudioNode *v58;
  JSC::JSCell *v59;
  JSC::JSGlobalObject *v60;
  JSC::JSObject *v61;
  JSC::JSGlobalObject *v62;
  JSC::VM *v63;
  JSC::JSObject *v64;
  JSC::Structure *v65;
  JSC::VM *FunctionRealm;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  JSC::JSCell *v75;
  unint64_t Structure;
  JSC::Structure *v77;
  JSC::JSCell *v78;
  uint64_t v79;
  unint64_t SubclassStructure;
  JSValue v81;
  uint64_t v83;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  JSValue v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95[2];
  uint64_t v96;
  WTF *v97;
  WTF::StringImpl *v98;
  WTF *v99;
  WTF::StringImpl *v100;
  JSC::VM *v101;
  int v102[2];
  WTF::StringImpl *v103;
  int v104;
  __int16 v105;
  char v106;
  __int16 v107;
  char v108;
  __int16 v109;
  char v110;
  JSC::VM *v111;
  char v112;
  WTF::StringImpl *v113;
  __int128 v114;
  uint64_t v115;
  WTF *v116;
  WTF::StringImpl *v117;
  WTF *v118;
  WTF::StringImpl *v119;
  int v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v101 = v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v81.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v81);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v101, (uint64_t)"IIRFilterNode", 14);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v113 = v9;
  if ((v8 & 0xFFFE000000000002) != 0)
    goto LABEL_14;
  v10 = v6;
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSBaseAudioContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSBaseAudioContext::s_info && v13 != 0);
  }
  if (!v12)
  {
LABEL_14:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v113, 0, "audioContext", 13, "IIRFilterNode", 14, v7, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v17 = *(_QWORD *)(v8 + 24);
  v18 = *(JSC::JSCell **)(a2 + 56);
  v111 = v9;
  if (((unint64_t)v18 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_49;
  if (((unint64_t)v18 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v18)) == 0)
  {
    JSC::throwTypeError();
    v16 = 0;
    v36 = 1;
    v120 = 1;
    goto LABEL_52;
  }
  v20 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v22 = JSC::JSObject::get(v20, this, (unint64_t)v113);
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v21);
    else
      *(_DWORD *)v113 -= 2;
  }
  if (*((_DWORD *)v111 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v111))
    goto LABEL_117;
  if (v22 == 10)
  {
    v93 = 0;
    v92 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v22, v95);
    if (HIDWORD(v95[0]))
      goto LABEL_117;
    LOBYTE(v93) = v95[0];
    v92 = (uint64_t)v95[0] & 0xFFFFFF00;
    BYTE4(v93) = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v23 = v113;
  v25 = JSC::JSObject::get(v20, this, (unint64_t)v113);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*((_DWORD *)v111 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v111))
    goto LABEL_117;
  if (v25 == 10)
  {
    v90 = 0;
    v91 = 0;
    goto LABEL_35;
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v26 = v113;
  v27 = WebCore::parseEnumeration<WebCore::ChannelCountMode>(this, v25);
  if (*((_DWORD *)v26 + 20))
  {
    v83 = v27;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
    v27 = v83;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
    {
LABEL_117:
      v120 = 1;
      goto LABEL_51;
    }
  }
  if ((v27 & 0xFF00000000) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_117;
  }
  v91 = v27;
  LODWORD(v90) = v27 & 0xFFFFFF00;
  BYTE4(v90) = 1;
LABEL_35:
  WTF::AtomStringImpl::addLiteral();
  v28 = v113;
  v30 = JSC::JSObject::get(v20, this, (unint64_t)v113);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*((_DWORD *)v111 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v111))
    goto LABEL_50;
  v94 = v17;
  if (v30 == 10)
  {
    v89 = 0;
    LOBYTE(v31) = 0;
  }
  else
  {
    v113 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    v32 = v113;
    v31 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>(this, v30);
    if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
      goto LABEL_50;
    if ((v31 & 0xFF00000000) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_50;
    }
    LODWORD(v89) = v31 & 0xFFFFFF00;
    BYTE4(v89) = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v33 = v113;
  v35 = JSC::JSObject::get(v20, this, (unint64_t)v113);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
  }
  if (*((_DWORD *)v111 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v111))
    goto LABEL_50;
  if (v35 == 10)
  {
LABEL_49:
    WebCore::throwRequiredMemberTypeError((int)this, (int)&v111, "feedback", 9, "IIRFilterOptions", 17, "sequence", 9);
LABEL_50:
    v120 = 1;
LABEL_51:
    v16 = 0;
    v36 = 1;
LABEL_52:
    ((void (*)(WTF::StringImpl **, __int128 *))off_1E32AA7F0[v36])(v95, &v114);
    return v16;
  }
  WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(v35, this, (uint64_t)v95);
  v39 = v96;
  if (!(_DWORD)v96)
  {
    v40 = v95[0];
    v41 = v95[1];
    v95[0] = 0;
    v95[1] = 0;
    WTF::AtomStringImpl::addLiteral();
    v42 = v113;
    v44 = JSC::JSObject::get(v20, this, (unint64_t)v113);
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v43);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (!*((_DWORD *)v111 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v111))
    {
      if (v44 != 10)
      {
        WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(v44, this, (uint64_t)v102);
        if (v104)
        {
          v36 = 1;
          v120 = 1;
          if (v104 == -1)
            goto LABEL_65;
        }
        else
        {
          v36 = 0;
          v45 = *(WTF::StringImpl **)v102;
          *(_QWORD *)v102 = 0;
          LODWORD(v114) = v92 | v93;
          BYTE4(v114) = BYTE4(v93);
          *(_WORD *)((char *)&v114 + 5) = v109;
          BYTE7(v114) = v110;
          DWORD2(v114) = v90 | v91;
          BYTE12(v114) = BYTE4(v90);
          *(_WORD *)((char *)&v114 + 13) = v107;
          HIBYTE(v114) = v108;
          LODWORD(v115) = v89 | v31;
          BYTE4(v115) = BYTE4(v89);
          HIBYTE(v115) = v106;
          *(_WORD *)((char *)&v115 + 5) = v105;
          v116 = v45;
          v46 = v103;
          v103 = 0;
          v117 = v46;
          v118 = v40;
          v119 = v41;
          v120 = 0;
          v40 = 0;
        }
        ((void (*)(char *, int *))off_1E32AA860[v104])(&v112, v102);
LABEL_65:
        v39 = v96;
        goto LABEL_66;
      }
      WebCore::throwRequiredMemberTypeError((int)this, (int)&v111, "feedforward", 12, "IIRFilterOptions", 17, "sequence", 9);
    }
    v36 = 1;
    v120 = 1;
    goto LABEL_65;
  }
  v40 = 0;
  v36 = 1;
  v120 = 1;
LABEL_66:
  if (v39 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E32AA860[v39])(v102, v95);
  if (v40)
  {
    WTF::fastFree(v40, v38);
    v36 = v120;
  }
  if (v36)
  {
    v16 = 0;
    if (v36 == -1)
      return v16;
    goto LABEL_52;
  }
  *(_OWORD *)v95 = v114;
  v47 = v116;
  v116 = 0;
  v96 = v115;
  v97 = v47;
  v48 = v117;
  v117 = 0;
  v98 = v48;
  v49 = v118;
  v118 = 0;
  v99 = v49;
  v50 = v119;
  v119 = 0;
  v100 = v50;
  WebCore::IIRFilterNode::create(v10, (unsigned int *)(v94 - 32), (uint64_t)v95, (uint64_t)v102);
  v53 = v99;
  if (v99)
  {
    v99 = 0;
    LODWORD(v100) = 0;
    WTF::fastFree(v53, v51);
  }
  v54 = v97;
  if (v97)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree(v54, v51);
  }
  v55 = v101;
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_137;
  if (!v104)
  {
    v56 = *(JSC::VM **)(v5 + 40);
    v57 = *(WTF::StringImpl **)v102;
    *(_QWORD *)v102 = 0;
    v95[0] = v57;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v57 != off_1E336A888)
    {
      __break(0xC471u);
      JUMPOUT(0x194CA5DDCLL);
    }
    v16 = (JSCell *)WebCore::createWrapper<WebCore::IIRFilterNode,WebCore::IIRFilterNode>(v56, (uint64_t *)v95, v52);
    v58 = v95[0];
    v95[0] = 0;
    if (v58)
      WebCore::AudioNode::deref(v58);
    goto LABEL_80;
  }
  if (v104 == 1)
  {
    v85 = (WTF::StringImpl *)LOBYTE(v102[0]);
    LOBYTE(v95[0]) = v102[0];
    v86 = v103;
    v103 = 0;
    v95[1] = v86;
    if (!*((_QWORD *)v55 + 2))
    {
      v87.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v102[0]), (JSC::JSGlobalObject *)&v95[1]);
      JSC::VM::throwException(v55, this, v87);
      v86 = v95[1];
    }
    v95[1] = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v85);
      else
        *(_DWORD *)v86 -= 2;
    }
    v16 = 0;
LABEL_80:
    if (*((_DWORD *)v55 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) != 0)
    {
LABEL_137:
      v16 = 0;
LABEL_95:
      if (v104 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E32AA7E0[v104])(v95, v102);
      goto LABEL_52;
    }
    v59 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v59 & 0xFFFE000000000002) != 0
      || (v60 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v59)) == 0
      || (v62 = v60, v60 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v63 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, v60, v61),
          *((_DWORD *)v63 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
    {
LABEL_94:
      if (!*((_DWORD *)v55 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) == 0)
        goto LABEL_95;
      goto LABEL_137;
    }
    v67 = *((_QWORD *)FunctionRealm + 412);
    if (v67)
    {
      v68 = *(_DWORD *)(v67 - 8);
      v69 = ((unint64_t)&WebCore::JSIIRFilterNode::s_info + ~((_QWORD)&WebCore::JSIIRFilterNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSIIRFilterNode::s_info + ~((_QWORD)&WebCore::JSIIRFilterNode::s_info << 32)) >> 22);
      v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
      v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
      v72 = v68 & ((v71 >> 31) ^ v71);
      v73 = *(char ***)(v67 + 16 * v72);
      if (v73 == &WebCore::JSIIRFilterNode::s_info)
      {
LABEL_90:
        v64 = *(JSC::JSObject **)(v67 + 16 * v72 + 8);
        if (v64)
        {
LABEL_92:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v62, v64, v65);
          if (!*((_DWORD *)v63 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) == 0)
            JSC::JSObject::setStructure(v16, v63, SubclassStructure);
          goto LABEL_94;
        }
      }
      else
      {
        v74 = 1;
        while (v73)
        {
          v72 = ((_DWORD)v72 + v74) & v68;
          v73 = *(char ***)(v67 + 16 * v72);
          ++v74;
          if (v73 == &WebCore::JSIIRFilterNode::s_info)
            goto LABEL_90;
        }
      }
    }
    v75 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v63, FunctionRealm, v64);
    Structure = WebCore::JSIIRFilterNodePrototype::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v75);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v78 = (JSC::JSCell *)WebCore::JSIIRFilterNodePrototype::create(v63, FunctionRealm, Structure, v77);
    v79 = WebCore::JSIIRFilterNode::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v78);
    v64 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v79, (uint64_t)&WebCore::JSIIRFilterNode::s_info);
    goto LABEL_92;
  }
  v88 = std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSIIRFilterNode::analyzeHeap(v88);
}

uint64_t WebCore::JSIIRFilterNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIIRFilterNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSIIRFilterNodePrototype::create(WebCore::JSIIRFilterNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSIIRFilterNode::s_info, (uint64_t)&WebCore::JSIIRFilterNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIIRFilterNode>,(WebCore::DOMConstructorID)255>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2040);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSIIRFilterNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSIIRFilterNode::s_info + ~((_QWORD)&WebCore::JSIIRFilterNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSIIRFilterNode::s_info + ~((_QWORD)&WebCore::JSIIRFilterNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSIIRFilterNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSIIRFilterNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSIIRFilterNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSIIRFilterNodePrototype::create((WebCore::JSIIRFilterNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSIIRFilterNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSIIRFilterNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2040) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsIIRFilterNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIIRFilterNodePrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIIRFilterNode>,(WebCore::DOMConstructorID)255>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSIIRFilterNode::subspaceForImpl(WebCore::JSIIRFilterNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2064);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 2064);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 2064);
    *(_QWORD *)(v8 + 2064) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2064);
  *(_QWORD *)(v3 + 2064) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::IIRFilterNode,WebCore::IIRFilterNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSIIRFilterNode::s_info + ~((_QWORD)&WebCore::JSIIRFilterNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSIIRFilterNode::s_info + ~((_QWORD)&WebCore::JSIIRFilterNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSIIRFilterNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSIIRFilterNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSIIRFilterNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSIIRFilterNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSIIRFilterNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSIIRFilterNode::s_info);
  }
  v21 = WebCore::JSIIRFilterNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::IIRFilterNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336A888)
  {
    v7 = WebCore::createWrapper<WebCore::IIRFilterNode,WebCore::IIRFilterNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 276;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::IdentityCredentialProtocol>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::IdentityCredentialProtocol)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::IdentityCredentialProtocol)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::IdentityCredentialProtocol)::$_0::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::IdentityCredentialProtocol)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertDictionary<WebCore::IdentityRequestProvider>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  JSC::VM *v15;
  uint64_t v16;
  const char *v17;
  int v18;
  unsigned int v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  WTF::StringImpl *v55;
  int v56;
  JSC::VM *v57[2];
  uint64_t v58;

  v57[0] = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_9:
    v9 = "protocol";
    v10 = "IdentityCredentialProtocol";
    v11 = (int)a2;
    v12 = 9;
    v13 = 27;
LABEL_10:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError(v11, (int)v57, v9, v12, "IdentityRequestProvider", 24, v10, v13);
LABEL_11:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
LABEL_37:
    result = JSC::throwTypeError();
    goto LABEL_11;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v7);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (*((_DWORD *)v57[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v57[0]);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v8 == 10)
    goto LABEL_9;
  v15 = a2[7];
  v57[1] = v15;
  v55 = (WTF::StringImpl *)v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v55, (JSC::JSGlobalObject *)a2);
    v16 = v58;
    if (v58)
      goto LABEL_19;
LABEL_36:
    v20 = 0;
    goto LABEL_46;
  }
  v16 = *(_QWORD *)(v8 + 8);
  if ((v16 & 1) == 0)
  {
    if (!v16)
      goto LABEL_18;
    goto LABEL_17;
  }
  v16 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
  if (v16)
LABEL_17:
    *(_DWORD *)v16 += 2;
LABEL_18:
  v58 = v16;
  if (!v16)
    goto LABEL_36;
LABEL_19:
  v17 = *(const char **)(v16 + 8);
  v18 = *(_DWORD *)(v16 + 4);
  if (v17 == "mdoc" || v18 != 4)
  {
    if (v18 != 4 || v17 != "mdoc")
      goto LABEL_43;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(v16 + 16) & 4) == 0)
  {
    if (*(_WORD *)v17 != 109)
      goto LABEL_43;
    if (*((_DWORD *)v17 + 1) != 6488175 || *(_DWORD *)(v17 + 2) != 7274596)
      goto LABEL_43;
LABEL_31:
    v20 = 256;
    goto LABEL_44;
  }
  if (*v17 == 109 && *(_WORD *)(v17 + 1) == 28516 && *((_WORD *)v17 + 1) == 25455)
    goto LABEL_31;
LABEL_43:
  v20 = 0;
LABEL_44:
  v58 = 0;
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v16, v7);
  else
    *(_DWORD *)v16 -= 2;
LABEL_46:
  if (*((_DWORD *)v15 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    if ((result & 1) != 0)
      goto LABEL_11;
  }
  if (v20 <= 0xFF)
    goto LABEL_37;
  WTF::AtomStringImpl::addLiteral();
  v22 = v55;
  v24 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v55);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*((_DWORD *)v57[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v57[0]);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v24 == 10)
  {
    v9 = "request";
    v10 = "object";
    v11 = (int)a2;
    v12 = 8;
    v13 = 7;
    goto LABEL_10;
  }
  result = WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a2, v24, (uint64_t)&v55);
  LODWORD(v25) = v56;
  if (v56)
  {
    v35 = 0;
    v47 = 1;
    goto LABEL_71;
  }
  v26 = v20;
  v25 = v55;
  if (v55)
  {
    v27 = *(_QWORD *)((((unint64_t)v55 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = *(_QWORD **)(v27 + 40);
    if (v28)
    {
      *(_QWORD *)(v27 + 40) = *v28;
      v28[2] = 0;
      v29 = v28 + 2;
      *v28 = 0;
      v28[1] = 0;
    }
    else
    {
      result = JSC::HandleSet::grow(*(JSC::HandleSet **)((((unint64_t)v55 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
      v54 = *(_QWORD **)(v27 + 40);
      v25 = v55;
      *(_QWORD *)(v27 + 40) = *v54;
      *v54 = 0;
      v54[1] = 0;
      v54[2] = 0;
      v29 = v54 + 2;
      if (!v25)
      {
        v30 = 0;
LABEL_60:
        *v29 = v30;
        v31 = (unint64_t)(v29 - 2);
        v32 = *(uint64_t **)((v31 & 0xFFFFFFFFFFFFF000) + 0x10);
        v33 = *v32;
        v34 = *(_QWORD *)(*v32 + 712);
        if (!v34)
        {
          result = JSC::HandleSet::grow((JSC::HandleSet *)(v33 + 672));
          v34 = *(_QWORD *)(v33 + 712);
        }
        *(_QWORD *)(v33 + 712) = *(_QWORD *)v34;
        *(_QWORD *)(v34 + 16) = 0;
        v35 = (uint64_t *)(v34 + 16);
        *(_QWORD *)v34 = 0;
        *(_QWORD *)(v34 + 8) = 0;
        v36 = v34 & 0xFFFFFFFFFFFFF000;
        if (v30)
        {
          v37 = *(unint64_t **)((v34 & 0xFFFFFFFFFFFFF000) + 0x10);
          v38 = v37[3];
          v37 += 3;
          *(_QWORD *)v34 = v38;
          *(_QWORD *)(v34 + 8) = v37;
          *v37 = v34;
          *(_QWORD *)(v38 + 8) = v34;
        }
        *v35 = v30;
        v39 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF000) + 0x10);
        v40 = *(_QWORD **)(v31 + 8);
        if (v40)
        {
          v41 = *(_QWORD *)v31;
          *v40 = *(_QWORD *)v31;
          *(_QWORD *)(v41 + 8) = v40;
          *(_QWORD *)v31 = 0;
          *(_QWORD *)(v31 + 8) = 0;
        }
        *(_QWORD *)v31 = *(_QWORD *)(v39 + 40);
        *(_QWORD *)(v39 + 40) = v31;
        *(_BYTE *)a3 = v26;
        v42 = *(_QWORD *)(v36 + 16);
        v43 = *(_QWORD *)(v42 + 40);
        if (!v43)
        {
          result = JSC::HandleSet::grow(*(JSC::HandleSet **)(v36 + 16));
          v43 = *(_QWORD *)(v42 + 40);
        }
        *(_QWORD *)(v42 + 40) = *(_QWORD *)v43;
        *(_QWORD *)(v43 + 16) = 0;
        v25 = (WTF::StringImpl *)(v43 + 16);
        *(_QWORD *)v43 = 0;
        *(_QWORD *)(v43 + 8) = 0;
        *(_QWORD *)(a3 + 8) = v43 + 16;
        v44 = *v35;
        if (*v35)
        {
          v45 = *(unint64_t **)((v43 & 0xFFFFFFFFFFFFF000) + 0x10);
          v46 = v45[3];
          v45 += 3;
          *(_QWORD *)v43 = v46;
          *(_QWORD *)(v43 + 8) = v45;
          *v45 = v43;
          *(_QWORD *)(v46 + 8) = v43;
        }
        v47 = 0;
        *(_QWORD *)v25 = v44;
        LODWORD(v25) = v56;
LABEL_71:
        *(_DWORD *)(a3 + 16) = v47;
        if ((_DWORD)v25 == -1)
          goto LABEL_73;
        goto LABEL_72;
      }
    }
    v30 = *(_QWORD *)v25;
    if (*(_QWORD *)v25)
    {
      v52 = *(_QWORD **)(((unint64_t)(v29 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v53 = v52[3];
      v52 += 3;
      *(v29 - 2) = v53;
      *(v29 - 1) = v52;
      *v52 = v29 - 2;
      *(_QWORD *)(v53 + 8) = v29 - 2;
    }
    goto LABEL_60;
  }
  v35 = 0;
  *(_BYTE *)a3 = v20;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
LABEL_72:
  result = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E32AA870[v25])(&v58, &v55);
LABEL_73:
  if (v35)
  {
    v48 = v35 - 2;
    v49 = *(_QWORD *)(((unint64_t)(v35 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v50 = (uint64_t *)*(v35 - 1);
    if (v50)
    {
      v51 = *v48;
      *v50 = *v48;
      *(_QWORD *)(v51 + 8) = v50;
      *v48 = 0;
      *(v35 - 1) = 0;
    }
    *v48 = *(_QWORD *)(v49 + 40);
    *(_QWORD *)(v49 + 40) = v48;
  }
  return result;
}

WTF *WebCore::JSIdleDeadline::destroy(WebCore::JSIdleDeadline *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSIdleDeadline::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIdleDeadlinePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSIdleDeadlinePrototype::create(WebCore::JSIdleDeadlinePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSIdleDeadline::s_info, &WebCore::JSIdleDeadlinePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIdleDeadline>,(WebCore::DOMConstructorID)454>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3632);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSIdleDeadline>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSIdleDeadline::s_info + ~((_QWORD)&WebCore::JSIdleDeadline::s_info << 32)) ^ (((unint64_t)&WebCore::JSIdleDeadline::s_info + ~((_QWORD)&WebCore::JSIdleDeadline::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSIdleDeadline::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSIdleDeadline::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSIdleDeadlinePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSIdleDeadlinePrototype::create((WebCore::JSIdleDeadlinePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSIdleDeadline::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSIdleDeadline::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3632) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsIdleDeadlineConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIdleDeadlinePrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSIdleDeadline>,(WebCore::DOMConstructorID)454>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsIdleDeadline_didTimeout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (!v3)
    return 10;
  if (*(_BYTE *)(v3 + 274))
  {
    result = 96;
    __break(0xC471u);
  }
  else if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 4))
  {
    return 7;
  }
  else
  {
    return 6;
  }
  return result;
}

uint64_t WebCore::JSIdleDeadlineOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSIdleDeadlineOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

WebCore::JSIdleRequestCallback *WebCore::JSIdleRequestCallback::JSIdleRequestCallback(WebCore::JSIdleRequestCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E32A57C0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSIdleRequestCallback::~JSIdleRequestCallback(WebCore::JSIdleRequestCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSIdleRequestCallback::handleEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t SlowCase;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v30;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *Allocator;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  JSC::Structure *v57;
  uint64_t *v58;
  JSValue v60;
  unint64_t v61;
  _QWORD *v62;
  char v63[8];
  uint64_t v64;
  WTF *v65;
  _OWORD v66[4];
  uint64_t v67;
  _BYTE v68[8];
  _QWORD *v69;
  uint64_t *v70;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, (void *)a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v68, *(_QWORD *)(v5 + 56));
  v63[0] = 0;
  v64 = 0x800000000;
  v65 = (WTF *)((char *)v66 + 8);
  memset(v66, 0, sizeof(v66));
  v67 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 3320) + 32);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13 == a2)
    {
LABEL_10:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
      {
        if ((*(_BYTE *)(v15 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v15;
          if (*(_QWORD *)v15)
          {
            v17 = 0;
            goto LABEL_58;
          }
        }
      }
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v7 + 16 * v12);
        ++v14;
        if (v13 == a2)
          goto LABEL_10;
      }
    }
  }
  ++*(_DWORD *)a2;
  v19 = *(_QWORD *)(v5 + 3296);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)&WebCore::JSIdleDeadline::s_info + ~((_QWORD)&WebCore::JSIdleDeadline::s_info << 32)) ^ (((unint64_t)&WebCore::JSIdleDeadline::s_info + ~((_QWORD)&WebCore::JSIdleDeadline::s_info << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(char ***)(v19 + 16 * v24);
    if (v25 == &WebCore::JSIdleDeadline::s_info)
    {
LABEL_20:
      v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
      if (v27)
        goto LABEL_22;
    }
    else
    {
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(char ***)(v19 + 16 * v24);
        ++v26;
        if (v25 == &WebCore::JSIdleDeadline::s_info)
          goto LABEL_20;
      }
    }
  }
  v28 = *(uint64_t **)(v5 + 56);
  Structure = WebCore::JSIdleDeadlinePrototype::createStructure(v28, v5, *(JSC::JSCell **)(v5 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v32 = (JSC::JSCell *)WebCore::JSIdleDeadlinePrototype::create((WebCore::JSIdleDeadlinePrototype *)v28, Structure, v30, v31);
  v33 = WebCore::JSIdleDeadline::createStructure(v28, v5, v32);
  v27 = WebCore::cacheDOMStructure((JSCell *)v5, v33, (uint64_t)&WebCore::JSIdleDeadline::s_info);
LABEL_22:
  v34 = *(_QWORD *)(v5 + 56);
  v35 = *(_QWORD *)(v34 + 41456);
  v36 = *(_QWORD *)(v35 + 23536);
  v37 = *(_QWORD **)(v36 + 3712);
  if (v37)
    goto LABEL_42;
  v38 = *(_QWORD *)(v35 + 22648);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v38))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](v38);
LABEL_27:
  v40 = *(_QWORD *)(v38 + 2824);
  if (!*(_QWORD *)(v40 + 3712))
  {
    v41 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v70, "IsoSpace T");
    v69 = 0;
    MEMORY[0x19AEA3204](v41, &v70, v34 + 192, v34 + 1872, 32, 8, &v69);
    v43 = (uint64_t)v69;
    v69 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = (WTF *)v70;
    v70 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1)
        WTF::fastFree(v44, v42);
      else
        --*(_DWORD *)v44;
    }
    v45 = *(_QWORD *)(v40 + 3712);
    *(_QWORD *)(v40 + 3712) = v41;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v46 = *(_QWORD *)(v36 + 3712);
  *(_QWORD *)(v36 + 3712) = v37;
  if (v46)
  {
    v47 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v47, v48);
  }
  v49 = __ldxr((unsigned __int8 *)v38);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v38))
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
LABEL_42:
  SlowCase = v37[3];
  if (SlowCase < v37[4])
  {
LABEL_43:
    v37[3] = SlowCase + 32;
    goto LABEL_44;
  }
  SlowCase = v37[5];
  if ((SlowCase & 1) == 0)
  {
    v61 = *(_QWORD *)(SlowCase + 8) ^ v37[6];
    v37[4] = SlowCase + HIDWORD(v61);
    v37[5] = SlowCase + (int)v61;
    goto LABEL_43;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_44:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v27);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v34 + 755))
    __dmb(0xAu);
  v50 = *(_QWORD *)(v5 + 3320);
  if ((byte_1EE335DD0 & 1) == 0)
  {
    qword_1EE335DC8 = (uint64_t)&off_1E32A8140;
    byte_1EE335DD0 = 1;
  }
  v70 = (uint64_t *)a2;
  if ((SlowCase & 8) != 0)
    v51 = (SlowCase - 112) | 1;
  else
    v51 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v51 & 1) != 0)
    v52 = v51 + 47;
  else
    v52 = *(_QWORD *)v51 + 32;
  Allocator = *(_QWORD **)(v52 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v52 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335DC8;
  Allocator[2] = v50;
  v69 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v50 + 32), (uint64_t *)&v70, (uint64_t *)&v69);
  if (v69)
    v69[1] = 3;
  v17 = v64;
  if ((_DWORD)v64 == HIDWORD(v64))
    goto LABEL_80;
LABEL_58:
  if (v65 != (WTF *)((char *)v66 + 8) && v65)
  {
LABEL_80:
    v60.super.isa = (Class)SlowCase;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v64, v60) == 1)
      v63[0] = 1;
    goto LABEL_60;
  }
  *((_QWORD *)v65 + v17) = SlowCase;
  LODWORD(v64) = v17 + 1;
LABEL_60:
  v70 = 0;
  v54 = *(uint64_t **)(a1 + 24);
  v55 = *v54;
  if (*v54
    && (*(_BYTE *)(v55 + 8) & 3) == 0
    && *(_QWORD *)v55
    && ((v56 = v54[2]) == 0 || (*(_BYTE *)(v56 + 8) & 3) != 0 ? (v57 = 0) : (v57 = *(JSC::Structure **)v56),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v55, v57, 10, (uint64_t)v63, 0, 0, (uint64_t *)&v70), (v6 = v70) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v70, 0, 0, 0);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  v58 = *(uint64_t **)&v66[0];
  if (*(_QWORD *)&v66[0])
  {
    v70 = &v64;
    v62 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v66[0], (uint64_t *)&v70);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v58, v62);
  }
  if (v65 != (WTF *)((char *)v66 + 8) && v65)
    WTF::fastFree(v65, v6);
  MEMORY[0x19AEA32A0](v68);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v18;
}

JSC::JSGlobalObject *WebCore::convertDictionary<WebCore::IdleRequestOptions>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *result@<X0>, _DWORD *a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  int v10;
  WTF::StringImpl *v11;

  v4 = (JSC::VM *)*((_QWORD *)result + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_9:
    v10 = 0;
LABEL_12:
    *a3 = v10;
    a3[1] = 0;
    return result;
  }
  v5 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (JSC::JSGlobalObject *)JSC::throwTypeError();
  }
  else
  {
    v7 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    result = (JSC::JSGlobalObject *)JSC::JSObject::get(v7, v5, (unint64_t)v11);
    v9 = (unint64_t)result;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        result = (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((_DWORD)result)
        goto LABEL_15;
    }
    if (v9 == 10)
      goto LABEL_9;
    result = (JSC::JSGlobalObject *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v5, v9, &v11);
    if (!HIDWORD(v11))
    {
      v10 = (int)v11;
      goto LABEL_12;
    }
  }
LABEL_15:
  a3[1] = 1;
  return result;
}

uint64_t WebCore::JSImageBitmap::destroy(uint64_t this, JSC::JSCell *a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *(bmalloc::api **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (!v2)
    return this;
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return this;
  }
  v3 = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v4, a2);
LABEL_10:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_17:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t, JSC::JSCell *))(*(_QWORD *)v8 + 8))(v8, a2);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_17;
  }
LABEL_22:
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
    *(_QWORD *)v2 = 0;
  }
  return bmalloc::api::isoDeallocate(v2, a2);
}

uint64_t WebCore::JSImageBitmap::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSImageBitmap::estimatedSize(WebCore::JSImageBitmap *this, JSC::JSCell *a2, JSC::VM *a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = JSC::JSObject::estimatedSize(this, a2, a3);
  v5 = atomic_load((unint64_t *)(*((_QWORD *)this + 3) + 24));
  return v5 + v4;
}

uint64_t WebCore::JSImageBitmap::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = JSC::JSObject::visitChildren();
  v5 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 24) + 24));
  if (*(_BYTE *)(a2 + 184))
  {
    *(_QWORD *)(a2 + 144) += v5;
    v6 = *(_QWORD *)(a2 + 160);
    v7 = __CFADD__(v6, v5);
    v8 = v6 + v5;
    if (v7)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v8;
  }
  return result;
}

uint64_t WebCore::JSImageBitmap::visitChildren(WebCore::JSImageBitmap *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;
  char v10;

  v8[0] = a2;
  v8[1] = this;
  v10 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v9 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v8;
    JSC::JSObject::visitChildren();
    v6 = atomic_load((unint64_t *)(*((_QWORD *)this + 3) + 24));
    result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 96))(a2, v6);
    *(_QWORD *)(v8[0] + 88) = v9;
  }
  return result;
}

uint64_t WebCore::JSImageBitmapPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSImageBitmapPrototype::create(WebCore::JSImageBitmapPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSImageBitmap::s_info, &WebCore::JSImageBitmapPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSImageBitmap>,(WebCore::DOMConstructorID)588>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4704);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSImageBitmap>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSImageBitmap::s_info + ~((_QWORD)&WebCore::JSImageBitmap::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageBitmap::s_info + ~((_QWORD)&WebCore::JSImageBitmap::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSImageBitmap::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSImageBitmap::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSImageBitmapPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSImageBitmapPrototype::create((WebCore::JSImageBitmapPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSImageBitmap::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSImageBitmap::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4704) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsImageBitmapConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSImageBitmapPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSImageBitmap>,(WebCore::DOMConstructorID)588>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsImageBitmap_width(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return v2 | 0xFFFE000000000000;
  v3 = *(float *)(v2 + 16);
  if (v3 >= 2147500000.0)
  {
    LODWORD(v2) = 0x7FFFFFFF;
    return v2 | 0xFFFE000000000000;
  }
  if (v3 <= -2147500000.0)
  {
    LODWORD(v2) = 0x80000000;
  }
  else
  {
    LODWORD(v2) = (int)v3;
    if (((int)v3 & 0x80000000) == 0)
      return v2 | 0xFFFE000000000000;
  }
  return COERCE__INT64((double)v2) + 0x2000000000000;
}

uint64_t WebCore::jsImageBitmap_height(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return v2 | 0xFFFE000000000000;
  v3 = *(float *)(v2 + 20);
  if (v3 >= 2147500000.0)
  {
    LODWORD(v2) = 0x7FFFFFFF;
    return v2 | 0xFFFE000000000000;
  }
  if (v3 <= -2147500000.0)
  {
    LODWORD(v2) = 0x80000000;
  }
  else
  {
    LODWORD(v2) = (int)v3;
    if (((int)v3 & 0x80000000) == 0)
      return v2 | 0xFFFE000000000000;
  }
  return COERCE__INT64((double)v2) + 0x2000000000000;
}

uint64_t WebCore::JSImageBitmapOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSImageBitmapOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  bmalloc::api *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  _QWORD *result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  bmalloc::api *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v16 = *(_QWORD *)(a3 + 32);
    v14 = (uint64_t *)(a3 + 32);
    v15 = v16;
    if (v16)
    {
      v17 = *(_DWORD *)(v15 - 8);
      v18 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(bmalloc::api **)(v15 + 16 * v21);
      if (v22 != v3)
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v17;
          v22 = *(bmalloc::api **)(v15 + 16 * v21);
          ++v23;
          if (v22 == v3)
            goto LABEL_31;
        }
        v21 = *(unsigned int *)(v15 - 4);
      }
LABEL_31:
      if (v21 != *(_DWORD *)(v15 - 4))
      {
        v24 = (_QWORD *)(v15 + 16 * v21);
        *v24 = -1;
        v27 = v24[1];
        v26 = v24 + 1;
        v25 = v27;
        if (v27)
        {
          *(_QWORD *)(v25 + 8) = 3;
          *v26 = 0;
        }
        ++*(_DWORD *)(*v14 - 16);
        v28 = *v14;
        if (*v14)
          v29 = *(_DWORD *)(v28 - 12) - 1;
        else
          v29 = -1;
        *(_DWORD *)(v28 - 12) = v29;
        v30 = *v14;
        if (*v14)
        {
          v31 = 6 * *(_DWORD *)(v30 - 12);
          v32 = *(_DWORD *)(v30 - 4);
          if (v31 < v32 && v32 >= 9)
            result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v14, v32 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
    return result;
  }
  v5 = *((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_11:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v34 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v34 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
LABEL_18:
        if (!v9)
        {
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          if (!v11)
            WTF::fastFree((WTF *)v6, a2);
        }
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_18;
  }
LABEL_23:
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  return (_QWORD *)bmalloc::api::isoDeallocate(v3, a2);
}

unint64_t WebCore::wrap<WebCore::ImageBitmap>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  WTF *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  _QWORD *v60;
  WTF *v61;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(WTF **)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(WTF **)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_64;
      }
      goto LABEL_5;
    }
LABEL_64:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*((_DWORD *)a3 + 2);
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSImageBitmap::s_info + ~((_QWORD)&WebCore::JSImageBitmap::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageBitmap::s_info + ~((_QWORD)&WebCore::JSImageBitmap::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSImageBitmap::s_info)
    {
LABEL_10:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_12;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSImageBitmap::s_info)
          goto LABEL_10;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSImageBitmapPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSImageBitmapPrototype::create((WebCore::JSImageBitmapPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSImageBitmap::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSImageBitmap::s_info);
LABEL_12:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 4776);
  if (v26)
    goto LABEL_32;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_17:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 4776))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v61, "IsoSpace T");
    v60 = 0;
    MEMORY[0x19AEA3204](v30, &v61, v23 + 192, v23 + 1872, 32, 8, &v60);
    v32 = (uint64_t)v60;
    v60 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v61;
    v61 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 4776);
    *(_QWORD *)(v29 + 4776) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 4776);
  *(_QWORD *)(v25 + 4776) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_32:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_33:
    v26[3] = SlowCase + 32;
    goto LABEL_34;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v59);
    v26[5] = SlowCase + (int)v59;
    goto LABEL_33;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  v40 = a3;
  if (*(_BYTE *)(v23 + 755))
  {
    __dmb(0xAu);
    v40 = *(WTF **)(SlowCase + 24);
  }
  v41 = atomic_load((unint64_t *)v40 + 3);
  if (v41 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  v42 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335DE0 & 1) == 0)
  {
    qword_1EE335DD8 = (uint64_t)&off_1E32A8170;
    byte_1EE335DE0 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335DD8;
    Allocator[2] = v42;
    v46 = *(_QWORD *)a3;
    *(_QWORD *)a3 = Allocator;
    if (!v46)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v61 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE335DD8;
  v50[2] = v42;
  v60 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v61, (uint64_t *)&v60);
  v46 = (uint64_t)v60;
  if (v60)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::JSImageBitmap::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSImageBitmap::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSImageBitmap::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

unint64_t WebCore::convertDictionary<WebCore::ImageBitmapOptions>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  unsigned int v3;
  JSC::VM *v5;
  unsigned __int8 v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  JSC::JSGlobalObject *v15;
  uint64_t Object;
  JSC::Structure *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  int v24;
  char **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  int v34;
  char **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  JSC::VM *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  int v43;
  char **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  JSC::VM *v52;
  uint64_t v53;
  int v54;
  const char *v55;
  int v56;
  char **v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  unsigned int v75;
  uint64_t v76;
  JSC::Structure *v77;
  __int16 v78;
  char v79;
  __int16 v80;
  char v81;
  uint64_t v82;
  unint64_t v83;

  v5 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v15 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0)
      goto LABEL_184;
    Object = JSC::JSCell::getObject(this);
    if (!Object)
      goto LABEL_184;
    v17 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v77 = v17;
    v19 = JSC::JSObject::get(v17, v15, v83);
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v83, v18);
      else
        *(_DWORD *)v83 -= 2;
    }
    if (*((_DWORD *)v5 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
      if ((result & 1) != 0)
        goto LABEL_185;
    }
    if (v19 == 10)
    {
      LODWORD(v76) = 1;
      goto LABEL_32;
    }
    v20 = (JSC::VM *)*((_QWORD *)v15 + 7);
    v83 = v19;
    if ((v19 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v19 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v83, v15);
      v21 = v82;
      if (v82)
        goto LABEL_17;
      goto LABEL_177;
    }
    v21 = *(_QWORD *)(v19 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v19, v15);
      if (!v21)
      {
LABEL_16:
        v82 = v21;
        if (v21)
        {
LABEL_17:
          v22 = *(_DWORD *)(v21 + 16);
          v23 = *(const char **)(v21 + 8);
          v24 = *(_DWORD *)(v21 + 4);
          if (v23 == "default" || v24 != 7)
          {
            if (v23 != "default" || v24 != 7)
            {
              if (v23 == "none" || v24 != 4)
              {
                if (v24 != 4 || v23 != "none")
                  goto LABEL_23;
              }
              else if ((v22 & 4) != 0)
              {
                if (*v23 != 110 || *(_WORD *)(v23 + 1) != 28271 || *((_WORD *)v23 + 1) != 25966)
                  goto LABEL_23;
              }
              else
              {
                if (*(_WORD *)v23 != 110)
                  goto LABEL_23;
                if (*((_DWORD *)v23 + 1) != 6619246 || *(_DWORD *)(v23 + 2) != 7209071)
                  goto LABEL_23;
              }
              v25 = &off_1E32A5AA8;
LABEL_27:
              v76 = *((unsigned int *)v25 + 4) | 0x100000000;
LABEL_28:
              v82 = 0;
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v21, v18);
              else
                *(_DWORD *)v21 -= 2;
LABEL_30:
              if (*((_DWORD *)v20 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
                if ((result & 1) != 0)
                  goto LABEL_185;
              }
              if ((v76 & 0x100000000) == 0)
                goto LABEL_184;
LABEL_32:
              WTF::AtomStringImpl::addLiteral();
              v26 = (WTF::StringImpl *)v83;
              v28 = JSC::JSObject::get(v17, v15, v83);
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v27);
                else
                  *(_DWORD *)v26 -= 2;
              }
              if (*((_DWORD *)v5 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
                if ((result & 1) != 0)
                  goto LABEL_185;
              }
              if (v28 == 10)
              {
                LODWORD(v29) = 0;
                goto LABEL_59;
              }
              v30 = (JSC::VM *)*((_QWORD *)v15 + 7);
              v83 = v28;
              if ((v28 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v28 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v83, v15);
                v31 = v82;
                if (v82)
                  goto LABEL_44;
                goto LABEL_179;
              }
              v31 = *(_QWORD *)(v28 + 8);
              if ((v31 & 1) != 0)
              {
                v31 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v28, v15);
                if (!v31)
                {
LABEL_43:
                  v82 = v31;
                  if (v31)
                  {
LABEL_44:
                    v32 = *(_DWORD *)(v31 + 16);
                    v33 = *(const char **)(v31 + 8);
                    v34 = *(_DWORD *)(v31 + 4);
                    if (v33 == "flipY" || v34 != 5)
                    {
                      if (v33 != "flipY" || v34 != 5)
                      {
                        if (v33 == "from-image" || v34 != 10)
                        {
                          if (v33 != "from-image" || v34 != 10)
                          {
                            if (v33 == "none" || v34 != 4)
                            {
                              if (v34 != 4 || v33 != "none")
                                goto LABEL_50;
                            }
                            else if ((v32 & 4) != 0)
                            {
                              if (*v33 != 110 || *(_WORD *)(v33 + 1) != 28271 || *((_WORD *)v33 + 1) != 25966)
                                goto LABEL_50;
                            }
                            else
                            {
                              if (*(_WORD *)v33 != 110)
                                goto LABEL_50;
                              if (*((_DWORD *)v33 + 1) != 6619246 || *(_DWORD *)(v33 + 2) != 7209071)
                                goto LABEL_50;
                            }
                            v35 = &off_1E32A5A30;
LABEL_54:
                            v29 = *((unsigned int *)v35 + 4) | 0x100000000;
LABEL_55:
                            v82 = 0;
                            if (*(_DWORD *)v31 == 2)
                              WTF::StringImpl::destroy((WTF::StringImpl *)v31, v27);
                            else
                              *(_DWORD *)v31 -= 2;
LABEL_57:
                            if (*((_DWORD *)v30 + 20))
                            {
                              result = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
                              if ((result & 1) != 0)
                                goto LABEL_185;
                            }
                            if (!HIDWORD(v29))
                              goto LABEL_184;
LABEL_59:
                            WTF::AtomStringImpl::addLiteral();
                            v36 = (WTF::StringImpl *)v83;
                            v38 = JSC::JSObject::get(v77, v15, v83);
                            if (v36)
                            {
                              if (*(_DWORD *)v36 == 2)
                                WTF::StringImpl::destroy(v36, v37);
                              else
                                *(_DWORD *)v36 -= 2;
                            }
                            if (*((_DWORD *)v5 + 20))
                            {
                              result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
                              if ((result & 1) != 0)
                                goto LABEL_185;
                            }
                            if (v38 == 10)
                            {
                              LODWORD(v12) = 2;
                              goto LABEL_86;
                            }
                            v39 = (JSC::VM *)*((_QWORD *)v15 + 7);
                            v83 = v38;
                            if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v83, v15);
                              v40 = v82;
                              if (v82)
                                goto LABEL_71;
                              goto LABEL_181;
                            }
                            v40 = *(_QWORD *)(v38 + 8);
                            if ((v40 & 1) != 0)
                            {
                              v40 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, v15);
                              if (!v40)
                              {
LABEL_70:
                                v82 = v40;
                                if (v40)
                                {
LABEL_71:
                                  v41 = *(_DWORD *)(v40 + 16);
                                  v42 = *(const char **)(v40 + 8);
                                  v43 = *(_DWORD *)(v40 + 4);
                                  if (v42 != "default" && v43 == 7)
                                  {
                                    if ((v41 & 4) != 0)
                                    {
                                      if (*v42 != 100
                                        || *(_DWORD *)(v42 + 1) != 1969317477
                                        || *(_DWORD *)(v42 + 3) != 1953264993)
                                      {
                                        goto LABEL_77;
                                      }
                                      goto LABEL_80;
                                    }
                                    if (*(_WORD *)v42 == 100)
                                    {
                                      v12 = 0;
                                      if (*(_QWORD *)(v42 + 2) != 0x75006100660065
                                        || *(_QWORD *)(v42 + 6) != 0x74006C00750061)
                                      {
                                        goto LABEL_82;
                                      }
                                      goto LABEL_80;
                                    }
LABEL_77:
                                    v12 = 0;
                                    goto LABEL_82;
                                  }
                                  if (v42 == "default" && v43 == 7)
                                  {
LABEL_80:
                                    v44 = &WebCore::parseEnumerationFromString<WebCore::ImageBitmapOptions::PremultiplyAlpha>(WTF::String const&)::mappings;
                                    goto LABEL_81;
                                  }
                                  if (v42 == "none" || v43 != 4)
                                  {
                                    if (v42 != "none" || v43 != 4)
                                    {
                                      if (v42 == "premultiply" || v43 != 11)
                                      {
                                        if (v43 != 11 || v42 != "premultiply")
                                          goto LABEL_77;
                                      }
                                      else if ((v41 & 4) != 0)
                                      {
                                        if (*v42 != 112
                                          || *(_QWORD *)(v42 + 1) != 0x7069746C756D6572
                                          || *(_QWORD *)(v42 + 3) != 0x796C7069746C756DLL)
                                        {
                                          goto LABEL_77;
                                        }
                                      }
                                      else
                                      {
                                        if (*(_WORD *)v42 != 112)
                                          goto LABEL_77;
                                        v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v42 + 2), (int16x8_t)xmmword_1968BFAA0);
                                        v71.i16[0] = vminvq_u16(v71);
                                        if (!v71.i32[0])
                                          goto LABEL_77;
                                        v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v42 + 6), (int16x8_t)xmmword_1968C0110);
                                        v72.i16[0] = vminvq_u16(v72);
                                        if (!v72.i32[0])
                                          goto LABEL_77;
                                      }
                                      v44 = &off_1E32A5A78;
LABEL_81:
                                      v12 = *((unsigned int *)v44 + 4) | 0x100000000;
LABEL_82:
                                      v82 = 0;
                                      if (*(_DWORD *)v40 == 2)
                                        WTF::StringImpl::destroy((WTF::StringImpl *)v40, v37);
                                      else
                                        *(_DWORD *)v40 -= 2;
LABEL_84:
                                      if (*((_DWORD *)v39 + 20))
                                      {
                                        result = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
                                        if ((result & 1) != 0)
                                          goto LABEL_185;
                                      }
                                      if ((v12 & 0x100000000) == 0)
                                        goto LABEL_184;
LABEL_86:
                                      WTF::AtomStringImpl::addLiteral();
                                      v45 = (WTF::StringImpl *)v83;
                                      v47 = JSC::JSObject::get(v77, v15, v83);
                                      if (v45)
                                      {
                                        if (*(_DWORD *)v45 == 2)
                                          WTF::StringImpl::destroy(v45, v46);
                                        else
                                          *(_DWORD *)v45 -= 2;
                                      }
                                      v48 = *((_DWORD *)v5 + 20);
                                      if (v48)
                                      {
                                        result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
                                        if ((result & 1) != 0)
                                          goto LABEL_185;
                                      }
                                      if (v47 == 10)
                                      {
                                        v7 = 0;
                                        v6 = 0;
                                        v75 = v48;
                                      }
                                      else
                                      {
                                        result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(v15, v47, &v83);
                                        v6 = v83;
                                        if (HIDWORD(v83))
                                          goto LABEL_185;
                                        v75 = v83 >> 8;
                                        v7 = 1;
                                      }
                                      WTF::AtomStringImpl::addLiteral();
                                      v49 = (WTF::StringImpl *)v83;
                                      v51 = JSC::JSObject::get(v77, v15, v83);
                                      if (v49)
                                      {
                                        if (*(_DWORD *)v49 == 2)
                                          WTF::StringImpl::destroy(v49, v50);
                                        else
                                          *(_DWORD *)v49 -= 2;
                                      }
                                      if (*((_DWORD *)v5 + 20))
                                      {
                                        result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
                                        if ((result & 1) != 0)
                                          goto LABEL_185;
                                      }
                                      if (v51 == 10)
                                      {
                                        LODWORD(v13) = 1;
                                        v8 = v29;
LABEL_121:
                                        WTF::AtomStringImpl::addLiteral();
                                        v58 = (WTF::StringImpl *)v83;
                                        result = JSC::JSObject::get(v77, v15, v83);
                                        v60 = result;
                                        if (v58)
                                        {
                                          if (*(_DWORD *)v58 == 2)
                                            result = WTF::StringImpl::destroy(v58, v59);
                                          else
                                            *(_DWORD *)v58 -= 2;
                                        }
                                        if (*((_DWORD *)v5 + 20))
                                        {
                                          result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
                                          if ((result & 1) != 0)
                                            goto LABEL_185;
                                        }
                                        if (v60 == 10)
                                        {
                                          v9 = 0;
                                          v10 = 0;
                                          v11 = 0;
LABEL_129:
                                          v3 = v75;
                                          v14 = v76;
                                          goto LABEL_130;
                                        }
                                        result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(v15, v60, &v83);
                                        if (!HIDWORD(v83))
                                        {
                                          v11 = v83 & 0xFFFFFF00;
                                          v10 = v83;
                                          v9 = 1;
                                          goto LABEL_129;
                                        }
LABEL_185:
                                        v61 = 1;
                                        goto LABEL_131;
                                      }
                                      v52 = (JSC::VM *)*((_QWORD *)v15 + 7);
                                      v83 = v51;
                                      if ((v51 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v51 + 5) != 2)
                                      {
                                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v83, v15);
                                        v53 = v82;
                                        v8 = v29;
                                        if (v82)
                                          goto LABEL_106;
                                      }
                                      else
                                      {
                                        v53 = *(_QWORD *)(v51 + 8);
                                        if ((v53 & 1) != 0)
                                          v53 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v51, v15);
                                        v8 = v29;
                                        if (v53)
                                        {
                                          *(_DWORD *)v53 += 2;
LABEL_106:
                                          v54 = *(_DWORD *)(v53 + 16);
                                          v55 = *(const char **)(v53 + 8);
                                          v56 = *(_DWORD *)(v53 + 4);
                                          if (v55 != "high" && v56 == 4)
                                          {
                                            if ((v54 & 4) != 0)
                                            {
                                              if (*v55 != 104
                                                || *(_WORD *)(v55 + 1) != 26473
                                                || *((_WORD *)v55 + 1) != 26727)
                                              {
                                                goto LABEL_112;
                                              }
                                              goto LABEL_115;
                                            }
                                            if (*(_WORD *)v55 == 104)
                                            {
                                              v13 = 0;
                                              if (*(_DWORD *)(v55 + 2) != 6750313 || *((_DWORD *)v55 + 1) != 6815847)
                                                goto LABEL_117;
                                              goto LABEL_115;
                                            }
LABEL_112:
                                            v13 = 0;
                                            goto LABEL_117;
                                          }
                                          if (v55 == "high" && v56 == 4)
                                          {
LABEL_115:
                                            v57 = &WebCore::parseEnumerationFromString<WebCore::ImageBitmapOptions::ResizeQuality>(WTF::String const&)::mappings;
                                            goto LABEL_116;
                                          }
                                          if (v55 == "low" || v56 != 3)
                                          {
                                            if (v55 != "low" || v56 != 3)
                                            {
                                              if (v55 == "medium" || v56 != 6)
                                              {
                                                if (v55 != "medium" || v56 != 6)
                                                {
                                                  if (v55 == "pixelated" || v56 != 9)
                                                  {
                                                    if (v56 != 9 || v55 != "pixelated")
                                                      goto LABEL_112;
                                                  }
                                                  else if ((v54 & 4) != 0)
                                                  {
                                                    if (*v55 != 112
                                                      || *(_DWORD *)(v55 + 1) != 1818589289
                                                      || *(_DWORD *)(v55 + 5) != 1684370529)
                                                    {
                                                      goto LABEL_112;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (*(_WORD *)v55 != 112)
                                                      goto LABEL_112;
                                                    v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v55 + 2), (int16x8_t)xmmword_1968C0120);
                                                    v73.i16[0] = vminvq_u16(v73);
                                                    if (!v73.i32[0])
                                                      goto LABEL_112;
                                                  }
                                                  v57 = &off_1E32A5B08;
LABEL_116:
                                                  v13 = *((unsigned int *)v57 + 4) | 0x100000000;
LABEL_117:
                                                  if (*(_DWORD *)v53 == 2)
                                                    WTF::StringImpl::destroy((WTF::StringImpl *)v53, v50);
                                                  else
                                                    *(_DWORD *)v53 -= 2;
LABEL_119:
                                                  if (*((_DWORD *)v52 + 20))
                                                  {
                                                    result = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
                                                    if ((result & 1) != 0)
                                                      goto LABEL_185;
                                                  }
                                                  if ((v13 & 0x100000000) != 0)
                                                    goto LABEL_121;
LABEL_184:
                                                  result = JSC::throwTypeError();
                                                  goto LABEL_185;
                                                }
                                              }
                                              else if ((v54 & 4) != 0)
                                              {
                                                if (*v55 != 109
                                                  || *(_DWORD *)(v55 + 1) != 1969841253
                                                  || *(_DWORD *)(v55 + 2) != 1836411236)
                                                {
                                                  goto LABEL_112;
                                                }
                                              }
                                              else
                                              {
                                                if (*(_WORD *)v55 != 109)
                                                  goto LABEL_112;
                                                v13 = 0;
                                                if (*(_QWORD *)(v55 + 2) != 0x75006900640065
                                                  || *(_QWORD *)(v55 + 4) != 0x6D007500690064)
                                                {
                                                  goto LABEL_117;
                                                }
                                              }
                                              v57 = &off_1E32A5AF0;
                                              goto LABEL_116;
                                            }
                                          }
                                          else
                                          {
                                            if ((v54 & 4) != 0)
                                            {
                                              if (*v55 != 108)
                                                goto LABEL_112;
                                              v62 = *(unsigned __int16 *)(v55 + 1);
                                              v63 = 30575;
                                            }
                                            else
                                            {
                                              if (*(_WORD *)v55 != 108)
                                                goto LABEL_112;
                                              v62 = *(_DWORD *)(v55 + 2);
                                              v63 = 7798895;
                                            }
                                            if (v62 != v63)
                                              goto LABEL_112;
                                          }
                                          v57 = &off_1E32A5AD8;
                                          goto LABEL_116;
                                        }
                                      }
                                      v13 = 0;
                                      goto LABEL_119;
                                    }
                                  }
                                  else if ((v41 & 4) != 0)
                                  {
                                    if (*v42 != 110 || *(_WORD *)(v42 + 1) != 28271 || *((_WORD *)v42 + 1) != 25966)
                                      goto LABEL_77;
                                  }
                                  else
                                  {
                                    if (*(_WORD *)v42 != 110)
                                      goto LABEL_77;
                                    v12 = 0;
                                    if (*(_DWORD *)(v42 + 2) != 7209071 || *((_DWORD *)v42 + 1) != 6619246)
                                      goto LABEL_82;
                                  }
                                  v44 = &off_1E32A5A60;
                                  goto LABEL_81;
                                }
LABEL_181:
                                v12 = 0;
                                goto LABEL_84;
                              }
                            }
                            else if (!v40)
                            {
                              goto LABEL_70;
                            }
                            *(_DWORD *)v40 += 2;
                            goto LABEL_70;
                          }
                        }
                        else if ((v32 & 4) != 0)
                        {
                          if (*v33 != 102
                            || *(_QWORD *)(v33 + 1) != 0x67616D692D6D6F72
                            || *(_QWORD *)(v33 + 2) != 0x6567616D692D6D6FLL)
                          {
                            goto LABEL_50;
                          }
                        }
                        else
                        {
                          if (*(_WORD *)v33 != 102)
                            goto LABEL_50;
                          v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 2), (int16x8_t)xmmword_1968C00F0);
                          v65.i16[0] = vminvq_u16(v65);
                          if (!v65.i32[0])
                            goto LABEL_50;
                          v66 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v33 + 4), (int16x8_t)xmmword_1968C0100);
                          v66.i16[0] = vminvq_u16(v66);
                          if (!v66.i32[0])
                            goto LABEL_50;
                        }
                        v35 = &off_1E32A5A18;
                        goto LABEL_54;
                      }
                    }
                    else if ((v32 & 4) != 0)
                    {
                      if (*v33 != 102 || *(_WORD *)(v33 + 1) != 26988 || *(_WORD *)(v33 + 3) != 22896)
                      {
LABEL_50:
                        v29 = 0;
                        goto LABEL_55;
                      }
                    }
                    else if (*(_WORD *)v33 != 102 || *(_QWORD *)(v33 + 2) != 0x5900700069006CLL)
                    {
                      goto LABEL_50;
                    }
                    v35 = &WebCore::parseEnumerationFromString<WebCore::ImageBitmapOptions::Orientation>(WTF::String const&)::mappings;
                    goto LABEL_54;
                  }
LABEL_179:
                  v29 = 0;
                  goto LABEL_57;
                }
              }
              else if (!v31)
              {
                goto LABEL_43;
              }
              *(_DWORD *)v31 += 2;
              goto LABEL_43;
            }
          }
          else if ((v22 & 4) != 0)
          {
            if (*v23 != 100 || *(_DWORD *)(v23 + 1) != 1969317477 || *(_DWORD *)(v23 + 3) != 1953264993)
              goto LABEL_23;
          }
          else
          {
            if (*(_WORD *)v23 != 100)
            {
LABEL_23:
              v76 = 0;
              goto LABEL_28;
            }
            v76 = 0;
            if (*(_QWORD *)(v23 + 2) != 0x75006100660065 || *(_QWORD *)(v23 + 6) != 0x74006C00750061)
              goto LABEL_28;
          }
          v25 = &WebCore::parseEnumerationFromString<WebCore::ImageBitmapOptions::ColorSpaceConversion>(WTF::String const&)::mappings;
          goto LABEL_27;
        }
LABEL_177:
        v76 = 0;
        goto LABEL_30;
      }
    }
    else if (!v21)
    {
      goto LABEL_16;
    }
    *(_DWORD *)v21 += 2;
    goto LABEL_16;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  LODWORD(v12) = 2;
  LODWORD(v13) = 1;
  v14 = 1;
LABEL_130:
  v61 = 0;
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v12;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 12) = v11 | v10;
  *(_BYTE *)(a3 + 16) = v9;
  *(_WORD *)(a3 + 17) = v80;
  *(_BYTE *)(a3 + 19) = v81;
  *(_DWORD *)(a3 + 20) = v6 | (v3 << 8);
  *(_BYTE *)(a3 + 24) = v7;
  *(_WORD *)(a3 + 25) = v78;
  *(_BYTE *)(a3 + 27) = v79;
  *(_DWORD *)(a3 + 28) = v13;
LABEL_131:
  *(_DWORD *)(a3 + 32) = v61;
  return result;
}

uint64_t WebCore::JSImageBitmapRenderingContext::destroy(uint64_t this, JSCell *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
  return this;
}

uint64_t WebCore::JSImageBitmapRenderingContext::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSImageBitmapRenderingContextPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSImageBitmapRenderingContextPrototype::create(WebCore::JSImageBitmapRenderingContextPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSImageBitmapRenderingContext::s_info, &WebCore::JSImageBitmapRenderingContextPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSImageBitmapRenderingContext>,(WebCore::DOMConstructorID)626>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5008);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSImageBitmapRenderingContext>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSImageBitmapRenderingContext::s_info
         + ~((_QWORD)&WebCore::JSImageBitmapRenderingContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageBitmapRenderingContext::s_info
                                                                               + ~((_QWORD)&WebCore::JSImageBitmapRenderingContext::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSImageBitmapRenderingContext::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSImageBitmapRenderingContext::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSImageBitmapRenderingContextPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSImageBitmapRenderingContextPrototype::create((WebCore::JSImageBitmapRenderingContextPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSImageBitmapRenderingContext::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSImageBitmapRenderingContext::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5008) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsImageBitmapRenderingContextConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSImageBitmapRenderingContextPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSImageBitmapRenderingContext>,(WebCore::DOMConstructorID)626>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsImageBitmapRenderingContext_canvas(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::HTMLElement *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  _BYTE v12[40];
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[5];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
  {
    v6 = v4 - 32;
    ++*(_DWORD *)(v4 - 8);
    v7 = 1;
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194CAB1E0);
    }
    v7 = 0;
    v6 = v4 - 112;
    *(_DWORD *)(v4 - 88) += 2;
  }
  v10 = v6;
  v11 = v7;
  v15 = v7;
  LOBYTE(v13) = 0;
  v14 = 0;
  v16[0] = &v15;
  v16[1] = &v13;
  v16[2] = a1;
  v16[3] = v3;
  v16[4] = &v10;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_17HTMLCanvasElementEEENS4_INS_15OffscreenCanvasEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_((uint64_t)v16, v5, (uint64_t)v12);
  if (v14)
  {
    v8 = v13;
    if (v11 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E32AC3C8[v11])(v16, &v10);
    return v8;
  }
  else
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::JSImageBitmapRenderingContextOwner::isReachableFromOpaqueRoots();
  }
}

uint64_t WebCore::JSImageBitmapRenderingContextOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSImageBitmapRenderingContextOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 16))(*(_QWORD *)(v4 + 32));
  v6 = v4 + 8;
  if (!v4)
    v6 = 0;
  if (!*(_DWORD *)(a3 + 48))
  {
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
      *(_QWORD *)v6 = 0;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  }
  v9 = *(_QWORD *)(a3 + 32);
  v8 = (uint64_t *)(a3 + 32);
  v7 = v9;
  if (!v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  v10 = *(_DWORD *)(v7 - 8);
  v11 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(_QWORD *)(v7 + 16 * v14);
  if (v15 != v4)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(_QWORD *)(v7 + 16 * v14);
      ++v16;
      if (v15 == v4)
        goto LABEL_12;
    }
    v14 = *(unsigned int *)(v7 - 4);
  }
LABEL_12:
  if (v14 == *(_DWORD *)(v7 - 4))
    goto LABEL_22;
  v17 = (_QWORD *)(v7 + 16 * v14);
  *v17 = -1;
  v20 = v17[1];
  v19 = v17 + 1;
  v18 = v20;
  if (v20)
  {
    *(_QWORD *)(v18 + 8) = 3;
    *v19 = 0;
  }
  ++*(_DWORD *)(*v8 - 16);
  v21 = *v8;
  v22 = *v8 ? *(_DWORD *)(v21 - 12) - 1 : -1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v8;
  if (!*v8
    || ((v24 = 6 * *(_DWORD *)(v23 - 12), v25 = *(_DWORD *)(v23 - 4), v24 < v25) ? (v26 = v25 >= 9) : (v26 = 0), !v26))
  {
LABEL_22:
    if (!v4)
      return result;
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  }
  result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v25 >> 1, 0);
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  return result;
}

unint64_t WebCore::wrap<WebCore::ImageBitmapRenderingContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_63;
      }
      goto LABEL_5;
    }
LABEL_63:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 32) + 16))(*(_QWORD *)(a3 + 32));
  if (*(void (***)(WebCore::ImageBitmapRenderingContext *__hidden))a3 != off_1E33DD028)
  {
    __break(0xC471u);
    JUMPOUT(0x194CAB7ECLL);
  }
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSImageBitmapRenderingContext::s_info
         + ~((_QWORD)&WebCore::JSImageBitmapRenderingContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageBitmapRenderingContext::s_info
                                                                               + ~((_QWORD)&WebCore::JSImageBitmapRenderingContext::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSImageBitmapRenderingContext::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSImageBitmapRenderingContext::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSImageBitmapRenderingContextPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSImageBitmapRenderingContextPrototype::create((WebCore::JSImageBitmapRenderingContextPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSImageBitmapRenderingContext::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSImageBitmapRenderingContext::s_info);
LABEL_13:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 5088);
  if (v26)
    goto LABEL_33;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_18:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 5088))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 5088);
    *(_QWORD *)(v29 + 5088) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 5088);
  *(_QWORD *)(v25 + 5088) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_33:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_34:
    v26[3] = SlowCase + 32;
    goto LABEL_35;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335DF0 & 1) == 0)
  {
    qword_1EE335DE8 = (uint64_t)&off_1E32A81A0;
    byte_1EE335DF0 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335DE8;
    Allocator[2] = v40;
    v44 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE335DE8;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::convertDictionary<WebCore::ImageBitmapRenderingContextSettings>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  WTF::StringImpl *v18;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v5 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_19;
    }
    v7 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    result = JSC::JSObject::get(v7, v5, (unint64_t)v18);
    v9 = result;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        result = WTF::StringImpl::destroy(v18, v8);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_19;
    }
    if (v9 == 10)
      goto LABEL_9;
    result = *((_QWORD *)v5 + 7);
    if (v9 >= 0xFFFE000000000000)
    {
      v13 = (_DWORD)v9 == 0;
    }
    else
    {
      *(_QWORD *)&v11 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v10 = v11 > 0.0 || v11 < 0.0;
LABEL_14:
        if (!*(_DWORD *)(result + 80))
          goto LABEL_15;
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
        if ((result & 1) == 0)
          goto LABEL_15;
LABEL_19:
        v12 = 1;
        goto LABEL_16;
      }
      if ((v9 & 0xFFFE000000000002) != 0)
      {
        v10 = v9 == 7;
        goto LABEL_14;
      }
      v14 = *(unsigned __int8 *)(v9 + 5);
      if (v14 == 3)
      {
        v17 = *(_DWORD *)(v9 + 8);
      }
      else
      {
        if (v14 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v10 = 1;
            goto LABEL_14;
          }
          v13 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) == (_QWORD)v5;
          goto LABEL_39;
        }
        v15 = *(_QWORD *)(v9 + 8);
        if ((v15 & 1) != 0)
          v16 = (int *)(v9 + 16);
        else
          v16 = (int *)(v15 + 4);
        v17 = *v16;
      }
      v13 = v17 == 0;
    }
LABEL_39:
    v10 = !v13;
    goto LABEL_14;
  }
LABEL_9:
  v10 = 1;
LABEL_15:
  v12 = 0;
  *(_BYTE *)a3 = v10;
LABEL_16:
  *(_DWORD *)(a3 + 4) = v12;
  return result;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSImageCapture>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  unint64_t SlowCase;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t (***v18)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v30;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *Allocator;
  JSC::JSCell *v54;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v56;
  JSC::JSGlobalObject *v57;
  JSC::VM *v58;
  JSC::Structure *v59;
  uint64_t FunctionRealm;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char **v67;
  int v68;
  JSC::JSObject *v69;
  unint64_t v70;
  WebCore::JSDOMGlobalObject *v71;
  JSC::Structure *v72;
  JSC::JSCell *v73;
  uint64_t v74;
  unint64_t SubclassStructure;
  JSValue v77;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  JSValue v81;
  unint64_t v82;
  WebCore::JSImageCapture *v83;
  JSCell *v84;
  WTF *v85;
  _DWORD *v86;
  int v87[2];
  WTF::StringImpl *v88;
  int v89;
  JSC::VM *v90;
  WTF *v91;
  WTF::StringImpl *v92;
  _QWORD *v93;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v90 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v77.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (_QWORD *)JSC::VM::throwException(v3, this, v77);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v90, (uint64_t)"ImageCapture", 13);
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CAC0B8);
  }
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)v87 = *((_QWORD *)this + 7);
  if ((v8 & 0xFFFE000000000002) != 0)
    goto LABEL_15;
  v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSMediaStreamTrack::s_info && v11 != 0);
  }
  if (!v10)
  {
LABEL_15:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v87, 0, "videoTrack", 11, "ImageCapture", 13, v7, 0, 0, "MediaStreamTrack", 17);
    return 0;
  }
  v15 = *(_QWORD *)(v8 + 24);
  ++*(_DWORD *)(v15 - 8);
  v86 = (_DWORD *)(v15 - 32);
  WebCore::ImageCapture::create(v6 - 192, (uint64_t *)&v86, (uint64_t)v87);
  v16 = v86;
  v86 = 0;
  if (v16)
  {
    if (v16[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
    else
      --v16[6];
  }
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    goto LABEL_103;
  if (!v89)
  {
    v17 = *(_QWORD *)(v5 + 40);
    v18 = *(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden))v87;
    *(_QWORD *)v87 = 0;
    if (*v18 != &off_1E335FA98)
    {
      __break(0xC471u);
      JUMPOUT(0x194CAC160);
    }
    v85 = (WTF *)v18;
    v19 = *(_QWORD *)(v17 + 3296);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = ((unint64_t)&WebCore::JSImageCapture::s_info + ~((_QWORD)&WebCore::JSImageCapture::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageCapture::s_info + ~((_QWORD)&WebCore::JSImageCapture::s_info << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(char ***)(v19 + 16 * v24);
      if (v25 == &WebCore::JSImageCapture::s_info)
      {
LABEL_27:
        v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
        if (v27)
          goto LABEL_29;
      }
      else
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(char ***)(v19 + 16 * v24);
          ++v26;
          if (v25 == &WebCore::JSImageCapture::s_info)
            goto LABEL_27;
        }
      }
    }
    v28 = *(uint64_t **)(v17 + 56);
    Structure = WebCore::JSImageCapturePrototype::createStructure(v28, v17, *(JSC::JSCell **)(v17 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v32 = (JSC::JSCell *)WebCore::JSImageCapturePrototype::create((WebCore::JSImageCapturePrototype *)v28, Structure, v30, v31);
    v33 = WebCore::JSImageCapture::createStructure(v28, v17, v32);
    v27 = WebCore::cacheDOMStructure((JSCell *)v17, v33, (uint64_t)&WebCore::JSImageCapture::s_info);
LABEL_29:
    v34 = *(_QWORD *)(v17 + 56);
    v35 = *(_QWORD *)(v34 + 41456);
    v36 = *(_QWORD *)(v35 + 23536);
    v37 = *(_QWORD **)(v36 + 1104);
    if (v37)
      goto LABEL_49;
    v38 = *(_QWORD *)(v35 + 22648);
    if (__ldaxr((unsigned __int8 *)v38))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v38))
    {
LABEL_34:
      v40 = *(_QWORD *)(v38 + 2824);
      if (!*(_QWORD *)(v40 + 1104))
      {
        v41 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v91, "IsoSpace T");
        v93 = 0;
        MEMORY[0x19AEA3204](v41, &v91, v34 + 192, v34 + 1872, 32, 8, &v93);
        v43 = (uint64_t)v93;
        v93 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        v44 = v91;
        v91 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 1)
            WTF::fastFree(v44, v42);
          else
            --*(_DWORD *)v44;
        }
        v45 = *(_QWORD *)(v40 + 1104);
        *(_QWORD *)(v40 + 1104) = v41;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      }
      v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v46 = *(_QWORD *)(v36 + 1104);
      *(_QWORD *)(v36 + 1104) = v37;
      if (v46)
      {
        v47 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v47, v48);
      }
      v49 = __ldxr((unsigned __int8 *)v38);
      if (v49 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v38))
          goto LABEL_49;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v38);
LABEL_49:
      SlowCase = v37[3];
      if (SlowCase >= v37[4])
      {
        SlowCase = v37[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v82 = *(_QWORD *)(SlowCase + 8) ^ v37[6];
          v37[4] = SlowCase + HIDWORD(v82);
          v37[5] = SlowCase + (int)v82;
          v37[3] = SlowCase + 32;
        }
      }
      else
      {
        v37[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v27);
      *(_QWORD *)(SlowCase + 24) = v85;
      if (*(_BYTE *)(v34 + 755))
        __dmb(0xAu);
      v50 = *(_QWORD *)(v17 + 3320);
      if ((byte_1EE335E00 & 1) == 0)
      {
        qword_1EE335DF8 = (uint64_t)&off_1E32A81D0;
        byte_1EE335E00 = 1;
      }
      v91 = v85;
      if ((SlowCase & 8) != 0)
        v51 = (SlowCase - 112) | 1;
      else
        v51 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v51 & 1) != 0)
        v52 = v51 + 47;
      else
        v52 = *(_QWORD *)v51 + 32;
      Allocator = *(_QWORD **)(v52 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v52 + 16) = *Allocator;
      *Allocator = SlowCase;
      Allocator[1] = &qword_1EE335DF8;
      Allocator[2] = v50;
      v93 = Allocator;
      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v50 + 32), (uint64_t *)&v91, (uint64_t *)&v93);
      if (v93)
        v93[1] = 3;
      v3 = v90;
      goto LABEL_65;
    }
    MEMORY[0x19AEA534C](v38);
    goto LABEL_34;
  }
  if (v89 == 1)
  {
    v79 = (WTF::StringImpl *)LOBYTE(v87[0]);
    LOBYTE(v91) = v87[0];
    v80 = v88;
    v88 = 0;
    v92 = v80;
    if (!*((_QWORD *)v3 + 2))
    {
      v81.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v87[0]), (JSC::JSGlobalObject *)&v92);
      JSC::VM::throwException(v3, this, v81);
      v80 = v92;
    }
    v92 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v79);
      else
        *(_DWORD *)v80 -= 2;
    }
    SlowCase = 0;
LABEL_65:
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    {
LABEL_103:
      SlowCase = 0;
LABEL_80:
      if (v89 != -1)
        ((void (*)(WTF **, int *))off_1E32AAA10[v89])(&v91, v87);
      return (_QWORD *)SlowCase;
    }
    v54 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v54 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v54)) == 0
      || (v57 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v58 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = JSC::getFunctionRealm(this, Object, v56),
          *((_DWORD *)v58 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) != 0)
    {
LABEL_79:
      if (!*((_DWORD *)v3 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) == 0)
        goto LABEL_80;
      goto LABEL_103;
    }
    v61 = *(_QWORD *)(FunctionRealm + 3296);
    if (v61)
    {
      v62 = *(_DWORD *)(v61 - 8);
      v63 = ((unint64_t)&WebCore::JSImageCapture::s_info + ~((_QWORD)&WebCore::JSImageCapture::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageCapture::s_info + ~((_QWORD)&WebCore::JSImageCapture::s_info << 32)) >> 22);
      v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
      v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
      v66 = v62 & ((v65 >> 31) ^ v65);
      v67 = *(char ***)(v61 + 16 * v66);
      if (v67 == &WebCore::JSImageCapture::s_info)
      {
LABEL_75:
        v69 = *(JSC::JSObject **)(v61 + 16 * v66 + 8);
        if (v69)
        {
LABEL_77:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v57, v69, v59);
          if (!*((_DWORD *)v58 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) == 0)
            JSC::JSObject::setStructure((JSCell *)SlowCase, v58, SubclassStructure);
          goto LABEL_79;
        }
      }
      else
      {
        v68 = 1;
        while (v67)
        {
          v66 = ((_DWORD)v66 + v68) & v62;
          v67 = *(char ***)(v61 + 16 * v66);
          ++v68;
          if (v67 == &WebCore::JSImageCapture::s_info)
            goto LABEL_75;
        }
      }
    }
    v70 = WebCore::JSImageCapturePrototype::createStructure((uint64_t *)v58, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(v70 + 16) |= 0x80000u;
    v73 = (JSC::JSCell *)WebCore::JSImageCapturePrototype::create(v58, v70, v71, v72);
    v74 = WebCore::JSImageCapture::createStructure((uint64_t *)v58, FunctionRealm, v73);
    v69 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v74, (uint64_t)&WebCore::JSImageCapture::s_info);
    goto LABEL_77;
  }
  v83 = (WebCore::JSImageCapture *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSImageCapture::destroy(v83, v84);
}

_DWORD *WebCore::JSImageCapture::destroy(WebCore::JSImageCapture *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSImageCapture::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSImageCapturePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSImageCapturePrototype::create(WebCore::JSImageCapturePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSImageCapture::s_info, &WebCore::JSImageCapturePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSImageCapture>,(WebCore::DOMConstructorID)135>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1080);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSImageCapture>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSImageCapture::s_info + ~((_QWORD)&WebCore::JSImageCapture::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageCapture::s_info + ~((_QWORD)&WebCore::JSImageCapture::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSImageCapture::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSImageCapture::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSImageCapturePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSImageCapturePrototype::create((WebCore::JSImageCapturePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSImageCapture::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSImageCapture::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1080) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsImageCaptureConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSImageCapturePrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSImageCapture>,(WebCore::DOMConstructorID)135>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsImageCapture_track(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  JSC::VM *v3;
  unint64_t v4;

  v2 = *(_DWORD **)(*(_QWORD *)(a2 + 24) + 32);
  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++v2[6];
  v4 = WebCore::wrap<WebCore::MediaStreamTrack>(a1, v3, (uint64_t)v2);
  if (v2[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  else
    --v2[6];
  return v4;
}

uint64_t WebCore::JSImageCaptureOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSImageCaptureOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSImageData>::construct(JSC::VM **this, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  JSC::VM *v12;
  JSValue v13;

  v9 = *(int *)(a2 + 32) - 1;
  if (v9 >= 4)
    v9 = 4;
  if (v9 == 4)
    return WebCore::constructJSImageData2((WebCore *)this, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
  if (v9 == 3 || v9 == 2)
  {
    v10 = *(_QWORD *)(a2 + 48);
    if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 41)
      return WebCore::constructJSImageData2((WebCore *)this, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    return WebCore::constructJSImageData1((WebCore *)this, (JSC::JSGlobalObject *)a2, a3);
  }
  else
  {
    v12 = this[7];
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v12, (JSC::JSGlobalObject *)this, v13);
  }
}

JSCell *WebCore::constructJSImageData2(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  JSCell *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  JSC::VM *v33;
  JSC::JSCell *v34;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v36;
  JSC::JSGlobalObject *v37;
  WebCore::JSImageData *v38;
  JSC::VM *FunctionRealm;
  WebCore::JSDOMGlobalObject *v40;
  JSC::JSObject *v41;
  JSC::Structure *v42;
  unint64_t SubclassStructure;
  uint64_t v44;
  void *v45;
  WTF *v46;
  WTF *v47;
  JSC::VM *v48;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52[4];
  int v53;
  JSC::VM *v54;
  int v55;
  unsigned int v56[2];
  uint64_t v57;
  int v58;
  JSC::VM *v59;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v59 = v9;
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 6);
  v54 = v9;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 41)
    goto LABEL_38;
  v13 = *(unsigned __int8 *)(v11 + 40);
  v14 = v13 - 88;
  if ((v13 - 88) <= 0x35)
  {
    if (((1 << v14) & 0x3D) != 0)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v11 + 8) - 8);
      if (!v15)
        goto LABEL_45;
      goto LABEL_13;
    }
    if (((1 << v14) & 0x3D000000000000) != 0)
    {
      v15 = *(_QWORD *)(v11 + 48);
      if (!v15)
        goto LABEL_45;
LABEL_13:
      v16 = 0;
      *(_DWORD *)v15 += 2;
      goto LABEL_14;
    }
  }
  if (v13 == 16 || v13 == 48)
  {
    v15 = JSC::JSArrayBufferView::slowDownAndWasteMemory((JSC::JSArrayBufferView *)v11);
    if (v15)
      goto LABEL_13;
  }
  else
  {
    v15 = 0;
  }
LABEL_45:
  v16 = 1;
LABEL_14:
  *(_QWORD *)v52 = v15;
  if ((*(_BYTE *)(v11 + 40) & 1) != 0)
    v17 = 0;
  else
    v17 = *(_QWORD *)(v11 + 24);
  if ((v16 & 1) != 0)
  {
    v20 = 0;
LABEL_23:
    *(_QWORD *)v52 = 0;
    if (!v15)
      goto LABEL_25;
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(v11 + 32);
  if (*(_BYTE *)(v15 + 64) && (v50 = *(_QWORD *)(v15 + 32)) != 0)
    v19 = *(_QWORD *)(v50 + 32);
  else
    v19 = *(_QWORD *)(v15 + 48);
  if (v19 >= v18 && *(_BYTE *)(v11 + 40) & 1 | (v17 <= v19 - v18))
  {
    v20 = WTF::fastMalloc((WTF *)0x28);
    JSC::ArrayBufferView::ArrayBufferView();
    v15 = *(_QWORD *)v52;
    goto LABEL_23;
  }
  v20 = 0;
  *(_QWORD *)v52 = 0;
LABEL_24:
  v21 = *(_DWORD *)v15 == 2;
  *(_DWORD *)v15 -= 2;
  if (v21)
  {
    v44 = *(_QWORD *)(v15 + 80);
    if (v44)
    {
      *(_QWORD *)(v44 + 8) = 3;
      *(_QWORD *)(v15 + 80) = 0;
    }
    if ((*(_BYTE *)(v15 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v15 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v15 + 16));
    v46 = *(WTF **)(v15 + 8);
    if ((v46 & 1) == 0 && v46)
    {
      v47 = *(WTF **)v46;
      if (*(_QWORD *)v46)
      {
        *(_QWORD *)v46 = 0;
        *((_DWORD *)v46 + 2) = 0;
        WTF::fastFree(v47, v45);
      }
      WTF::fastFree(v46, v45);
    }
    WTF::fastFree((WTF *)v15, v45);
    if (!v20)
      goto LABEL_38;
LABEL_26:
    v22 = *(_QWORD *)(v20 + 32);
    if (v22
      && (v23 = *(_QWORD *)(v22 + 16)) != 0
      && ((v24 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
       || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
       || (v23 & 0x3FFFFFFFFLL) + v24)
      && (*(_QWORD *)(v22 + 32)
        ? (v25 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
        : (v25 = 0),
          v25)
      || (*(_BYTE *)(v20 + 6) & 3) != 0)
    {
      if (*(_DWORD *)v20 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v20;
      goto LABEL_38;
    }
    v57 = v20;
    v58 = 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v56);
    if (!v56[1])
    {
      v29 = *((int *)a2 + 8);
      if ((unint64_t)(v29 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        v30 = 0;
      }
      else
      {
        if (*((_QWORD *)a2 + 8) == 10)
        {
          v30 = 0;
          goto LABEL_47;
        }
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v52);
        if (v52[1])
        {
          v26 = 0;
LABEL_65:
          v27 = 0;
          goto LABEL_39;
        }
        v30 = v52[0] | 0x100000000;
        v29 = *((int *)a2 + 8);
      }
LABEL_47:
      if ((unint64_t)(v29 - 5) > 0xFFFFFFFFFFFFFFFBLL)
        v31 = 10;
      else
        v31 = *((_QWORD *)a2 + 9);
      WebCore::convertDictionary<WebCore::ImageDataSettings>(this, (JSC::JSCell *)v31, (uint64_t)&v54);
      if (v55)
      {
        v26 = 0;
      }
      else
      {
        v57 = 0;
        v51 = (_DWORD *)v20;
        WebCore::ImageData::create((uint64_t)&v51, v56[0], v30, WORD2(v54) | 0x10000, (uint64_t)v52);
        v32 = v51;
        v51 = 0;
        if (v32)
        {
          if (*v32 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v32;
        }
        if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
          goto LABEL_89;
        v26 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::ImageData>,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>>(this, *(_QWORD *)(v10 + 40), &v59, (unsigned __int8 *)v52);
        v33 = v59;
        if (*((_DWORD *)v59 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
            goto LABEL_89;
        }
        v34 = (JSC::JSCell *)*((_QWORD *)a2 + 5);
        if (((unint64_t)v34 & 0xFFFE000000000002) == 0)
        {
          Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v34);
          if (Object)
          {
            v37 = Object;
            if (Object != *((JSC::JSGlobalObject **)a2 + 3))
            {
              v38 = (WebCore::JSImageData *)*((_QWORD *)this + 7);
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v36);
              if (!*((_DWORD *)v38 + 20)
                || (v48 = FunctionRealm,
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v38),
                    FunctionRealm = v48,
                    (hasExceptionsAfterHandlingTraps & 1) == 0))
              {
                v41 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSImageData>(v38, FunctionRealm, v40);
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v37, v41, v42);
                if (!*((_DWORD *)v38 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) == 0)
                  JSC::JSObject::setStructure(v26, v38, SubclassStructure);
              }
            }
          }
        }
        if (*((_DWORD *)v33 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0)
LABEL_89:
          v26 = 0;
        if (v53 != -1)
          ((void (*)(_DWORD **, unsigned int *))off_1E32AAAE8[v53])(&v51, v52);
      }
      goto LABEL_65;
    }
    v26 = 0;
    goto LABEL_65;
  }
LABEL_25:
  if (v20)
    goto LABEL_26;
LABEL_38:
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v54, 0, "data", 5, "ImageData", 10, a8, 0, 0, "Uint8ClampedArray", 18);
  v26 = 0;
  v27 = 1;
  v58 = 1;
LABEL_39:
  ((void (*)(unsigned int *, uint64_t *))off_1E32AAAF8[v27])(v52, &v57);
  return v26;
}

JSCell *WebCore::constructJSImageData1(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  JSCell *v8;
  JSC::JSCell *v9;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v11;
  JSC::JSGlobalObject *v12;
  WebCore::JSImageData *v13;
  WebCore::JSDOMGlobalObject *v14;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v16;
  JSC::Structure *v17;
  unint64_t SubclassStructure;
  unsigned __int8 v20[16];
  int v21;
  _BYTE v22[4];
  unsigned __int16 v23;
  int v24;
  _DWORD v25[2];
  _DWORD v26[2];
  JSC::VM *v27;
  char v28;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v5;
  v6 = *((_QWORD *)a2 + 3);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v26);
  if (v26[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v25);
  if (v25[1])
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v7 = 10;
  else
    v7 = *((_QWORD *)a2 + 8);
  WebCore::convertDictionary<WebCore::ImageDataSettings>(this, (JSC::JSCell *)v7, (uint64_t)v22);
  if (v24)
    return 0;
  WebCore::ImageData::create(v26[0], v25[0], v23 | 0x10000, (uint64_t)v20);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_27;
  v8 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::ImageData>,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>>(this, *(_QWORD *)(v6 + 40), &v27, v20);
  if (*((_DWORD *)v5 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
      goto LABEL_27;
  }
  v9 = (JSC::JSCell *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v9);
    if (Object)
    {
      v12 = Object;
      if (Object != *((JSC::JSGlobalObject **)a2 + 3))
      {
        v13 = (WebCore::JSImageData *)*((_QWORD *)this + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v11);
        if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
        {
          v16 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSImageData>(v13, FunctionRealm, v14);
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v12, v16, v17);
          if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
            JSC::JSObject::setStructure(v8, v13, SubclassStructure);
        }
      }
    }
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
LABEL_27:
    v8 = 0;
  if (v21 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32AAAE8[v21])(&v28, v20);
  return v8;
}

uint64_t WebCore::JSImageData::prototype(WebCore::JSImageData *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  return *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSImageData>(this, a2, a3) + 48);
}

WTF::StringImpl *WebCore::JSImageDataPrototype::finishCreation(WebCore::JSImageDataPrototype *this, JSC::VM *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(a2, (uint64_t)&WebCore::JSImageData::s_info, &WebCore::JSImageDataPrototypeTableValues, this);
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5) + 432) & 0x200000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v13;
    v11 = *((_DWORD *)a2 + 23281);
    *((_DWORD *)a2 + 23281) = 1;
    LODWORD(v13) = -1;
    WORD2(v13) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)a2 + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2, this);
  }
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v6, v7, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSImageData::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*v3 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v3;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSImageData::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSImageData::JSImageData(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSImageData::createPrototype(WebCore::JSImageData *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v5;
  JSC::Structure *v6;

  v5 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v5 + 16) |= 0x80000u;
  return WebCore::JSImageDataPrototype::create(this, (JSC::VM *)a2, v5, v6);
}

unint64_t WebCore::JSImageDataPrototype::create(WebCore::JSImageDataPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSImageDataPrototype::finishCreation((WebCore::JSImageDataPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSImageData>,(WebCore::DOMConstructorID)589>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4712);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructor<WebCore::JSImageData>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000002, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSImageData>((WebCore::JSImageData *)a1, (JSC::VM *)a2, v16) + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4712) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsImageDataConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSImageDataPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSImageData>,(WebCore::DOMConstructorID)589>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsImageData_width(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsImageData_height(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 8);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsImageData_data(JSC::JSGlobalObject *a1, uint64_t a2)
{
  return JSC::ArrayBufferView::wrap(*(JSC::ArrayBufferView **)(*(_QWORD *)(a2 + 24) + 16), a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
}

uint64_t WebCore::jsImageData_colorSpace(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::PredefinedColorSpace>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 24));
}

uint64_t WebCore::JSImageData::subspaceForImpl(WebCore::JSImageData *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4784);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 4784))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 4784);
    *(_QWORD *)(v9 + 4784) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 4784);
  *(_QWORD *)(v3 + 4784) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSImageDataOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSImageDataOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v24)
    {
      if (*v24 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v24;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSImageData::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSImageData::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSImageData::s_info && v4 != 0);
  }
  if (!v3)
    return 0;
  else
    return *(_QWORD *)(a2 + 24);
}

unint64_t WebCore::convertDictionary<WebCore::ImageDataSettings>@<X0>(WebCore::JSDOMGlobalObject *this@<X0>, JSC::JSCell *a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  uint64_t v8;
  unint64_t result;
  __int16 v10;
  __int16 v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v6 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)a2 & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(a2)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_18;
  }
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
  v10 = 0;
  if (v6 == 2)
  {
    v11 = 0;
    goto LABEL_13;
  }
  v11 = 0;
  if ((*(_QWORD *)(result + 432) & 0x200000000000) != 0)
  {
    WTF::AtomStringImpl::addLiteral();
    result = JSC::JSObject::get(Object, this, (unint64_t)v14);
    v13 = result;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        result = WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (*((_DWORD *)v5 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
      if ((_DWORD)result)
        goto LABEL_18;
    }
    if (v13 == 10)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_13;
    }
    result = WebCore::convert<WebCore::IDLEnumeration<WebCore::PredefinedColorSpace>>(this, v13, (uint64_t)&v14);
    if (!HIDWORD(v14))
    {
      v10 = v14;
      v11 = 1;
      goto LABEL_13;
    }
LABEL_18:
    *(_DWORD *)(a3 + 8) = 1;
    return result;
  }
LABEL_13:
  *(_WORD *)(a3 + 4) = v10 | (v11 << 8);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t WebCore::convert<WebCore::IDLEnumeration<WebCore::PredefinedColorSpace>>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  unsigned __int16 v6;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  result = WebCore::parseEnumeration<WebCore::PredefinedColorSpace>(a1, a2);
  v6 = result;
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_8;
  }
  if (v6 <= 0xFFu)
  {
    result = JSC::throwTypeError();
LABEL_8:
    *(_DWORD *)(a3 + 4) = 1;
    return result;
  }
  *(_BYTE *)a3 = v6;
  *(_DWORD *)(a3 + 4) = 0;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::ImageResource>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  int v36;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;

  v47 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_44;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_84:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v8 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v9);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
      goto LABEL_84;
  }
  if (v10 == 10)
  {
    v5 = 0;
    goto LABEL_22;
  }
  v43 = (WTF::StringImpl *)v10;
  v11 = a2[7];
  if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 2)
  {
    v12 = *(WTF::StringImpl **)(v10 + 8);
    if ((v12 & 1) != 0)
    {
      v12 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v10, (JSC::JSGlobalObject *)a2);
      if (!v12)
        goto LABEL_16;
    }
    else if (!v12)
    {
LABEL_16:
      v49 = v12;
      goto LABEL_17;
    }
    *(_DWORD *)v12 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v43, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (!*((_DWORD *)v11 + 20))
  {
    v5 = v49;
LABEL_19:
    v46 = 0;
LABEL_20:
    v13 = 0;
    v45 = 0;
    v14 = 1;
    goto LABEL_21;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
  v5 = v49;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_19;
  v13 = 1;
  v46 = 1;
  v49 = 0;
  if (!v5)
    goto LABEL_95;
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
LABEL_95:
    v5 = 0;
    v14 = 0;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_21;
  }
  result = WTF::StringImpl::destroy(v5, v38);
  v13 = v46;
  if (!v46)
  {
    v5 = v45;
    goto LABEL_20;
  }
  *(_DWORD *)(a3 + 32) = 1;
  if (v13 == -1)
    return result;
  v5 = 0;
  v14 = 0;
LABEL_21:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v13])(&v43, &v45);
  if (!v14)
    goto LABEL_115;
LABEL_22:
  WTF::AtomStringImpl::addLiteral();
  v17 = v45;
  v19 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
    {
      v27 = 0;
      v6 = 0;
      goto LABEL_46;
    }
  }
  if (v19 == 10)
  {
    v6 = 0;
    goto LABEL_39;
  }
  v43 = (WTF::StringImpl *)v19;
  v20 = a2[7];
  if ((v19 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v19 + 5) == 2)
  {
    v21 = *(WTF::StringImpl **)(v19 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v19, (JSC::JSGlobalObject *)a2);
      if (!v21)
        goto LABEL_33;
    }
    else if (!v21)
    {
LABEL_33:
      v49 = v21;
      goto LABEL_34;
    }
    *(_DWORD *)v21 += 2;
    goto LABEL_33;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v43, (JSC::JSGlobalObject *)a2);
LABEL_34:
  if (!*((_DWORD *)v20 + 20))
  {
    v6 = v49;
LABEL_36:
    v46 = 0;
LABEL_37:
    v22 = 0;
    v45 = 0;
    v23 = 1;
    goto LABEL_38;
  }
  v39 = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
  v6 = v49;
  if ((v39 & 1) == 0)
    goto LABEL_36;
  v22 = 1;
  v46 = 1;
  v49 = 0;
  if (!v6)
    goto LABEL_100;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_100:
    v6 = 0;
    v23 = 0;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_38;
  }
  result = WTF::StringImpl::destroy(v6, v40);
  v22 = v46;
  if (!v46)
  {
    v6 = v45;
    goto LABEL_37;
  }
  *(_DWORD *)(a3 + 32) = 1;
  if (v22 == -1)
  {
LABEL_115:
    v27 = 0;
    v6 = 0;
    goto LABEL_116;
  }
  v6 = 0;
  v23 = 0;
LABEL_38:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v22])(&v43, &v45);
  if (!v23)
  {
    v27 = 0;
LABEL_116:
    v28 = 0;
    goto LABEL_117;
  }
LABEL_39:
  WTF::AtomStringImpl::addLiteral();
  v24 = v45;
  v26 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
      goto LABEL_45;
  }
  if (v26 == 10)
  {
LABEL_44:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v47, "src", 4, "ImageResource", 14, "USVString", 10);
LABEL_45:
    v27 = 0;
LABEL_46:
    v28 = 0;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_117;
  }
  result = WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v26, (uint64_t)&v45);
  v29 = v46;
  if (!v46)
  {
    v28 = v45;
    v45 = 0;
    WTF::AtomStringImpl::addLiteral();
    v30 = v43;
    v31 = JSC::JSObject::get(v8, (JSC::JSGlobalObject *)a2, (unint64_t)v43);
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v16);
      else
        *(_DWORD *)v30 -= 2;
    }
    result = (uint64_t)v47;
    if (*((_DWORD *)v47 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
      if ((result & 1) != 0)
      {
        v36 = 1;
        goto LABEL_66;
      }
    }
    if (v31 == 10)
    {
      v27 = 0;
LABEL_65:
      v36 = 0;
      *(_QWORD *)a3 = v28;
      *(_QWORD *)(a3 + 8) = v6;
      *(_QWORD *)(a3 + 16) = v27;
      *(_QWORD *)(a3 + 24) = v5;
      v5 = 0;
      v6 = 0;
      v28 = 0;
LABEL_66:
      v27 = 0;
      *(_DWORD *)(a3 + 32) = v36;
      goto LABEL_67;
    }
    v49 = (WTF::StringImpl *)v31;
    v32 = a2[7];
    if ((v31 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v31 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v49, (JSC::JSGlobalObject *)a2);
LABEL_61:
      if (*((_DWORD *)v32 + 20))
      {
        v41 = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
        v27 = v48;
        if (v41)
        {
          v34 = 1;
          v44 = 1;
          v48 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v42);
            else
              *(_DWORD *)v27 -= 2;
          }
          v35 = 0;
          v27 = 0;
          *(_DWORD *)(a3 + 32) = 1;
LABEL_64:
          result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v34])(&v49, &v43);
          if (!v35)
          {
LABEL_67:
            v29 = v46;
            goto LABEL_68;
          }
          goto LABEL_65;
        }
      }
      else
      {
        v27 = v48;
      }
      v34 = 0;
      v44 = 0;
      v43 = 0;
      v35 = 1;
      goto LABEL_64;
    }
    v33 = *(WTF::StringImpl **)(v31 + 8);
    if ((v33 & 1) != 0)
    {
      v33 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v31, (JSC::JSGlobalObject *)a2);
      if (!v33)
        goto LABEL_60;
    }
    else if (!v33)
    {
LABEL_60:
      v48 = v33;
      goto LABEL_61;
    }
    *(_DWORD *)v33 += 2;
    goto LABEL_60;
  }
  v27 = 0;
  v28 = 0;
  *(_DWORD *)(a3 + 32) = 1;
LABEL_68:
  if (v29 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v29])(&v43, &v45);
LABEL_117:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      result = WTF::StringImpl::destroy(v5, v16);
      if (!v27)
        goto LABEL_123;
      goto LABEL_121;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v27)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v27 == 2)
    result = WTF::StringImpl::destroy(v27, v16);
  else
    *(_DWORD *)v27 -= 2;
LABEL_123:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      result = WTF::StringImpl::destroy(v6, v16);
      if (!v28)
        return result;
      goto LABEL_127;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v28)
    return result;
LABEL_127:
  if (*(_DWORD *)v28 == 2)
    return WTF::StringImpl::destroy(v28, v16);
  *(_DWORD *)v28 -= 2;
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::ImageSmoothingQuality>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_0::operator() const(void)::impl;
    unk_1EE2F4700 = &WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4708 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::ImageSmoothingQuality>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  char **v12;
  int v13;
  int v14;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "high" && v7 == 4)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 104 || *(_WORD *)(v6 + 1) != 26473 || *((_WORD *)v6 + 1) != 26727)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 104)
        goto LABEL_16;
      v13 = *(_DWORD *)(v6 + 2);
      v14 = *((_DWORD *)v6 + 1);
      if (v13 != 6750313 || v14 != 6815847)
        goto LABEL_16;
    }
    goto LABEL_40;
  }
  if (v6 == "high" && v7 == 4)
  {
LABEL_40:
    v12 = &WebCore::parseEnumerationFromString<WebCore::ImageSmoothingQuality>(WTF::String const&)::mappings;
    goto LABEL_41;
  }
  if (v6 != "low" && v7 == 3)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 108 || *(_WORD *)(v6 + 1) != 30575)
        goto LABEL_16;
    }
    else if (*(_WORD *)v6 != 108 || *(_DWORD *)(v6 + 2) != 7798895)
    {
      goto LABEL_16;
    }
  }
  else if (v6 != "low" || v7 != 3)
  {
    if (v6 == "medium" || v7 != 6)
    {
      if (v7 == 6 && v6 == "medium")
        goto LABEL_63;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 109 && *(_DWORD *)(v6 + 1) == 1969841253 && *(_DWORD *)(v6 + 2) == 1836411236)
      {
LABEL_63:
        v12 = &off_1E32A6350;
        goto LABEL_41;
      }
    }
    else if (*(_WORD *)v6 == 109
           && *(_QWORD *)(v6 + 4) == 0x6D007500690064
           && *(_QWORD *)(v6 + 2) == 0x75006900640065)
    {
      goto LABEL_63;
    }
LABEL_16:
    v9 = 0;
    goto LABEL_42;
  }
  v12 = &off_1E32A6338;
LABEL_41:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_42:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::JSInputDeviceInfo::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSMediaDeviceInfo::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSMediaDeviceInfo::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSMediaDeviceInfo::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSInputDeviceInfo>,(WebCore::DOMConstructorID)136>(uint64_t a1, uint64_t a2)
{
  unint64_t SlowCase;
  _QWORD *v5;
  JSC::JSCell *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  SlowCase = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1088);
  if (SlowCase)
    return SlowCase;
  v5 = (_QWORD *)(a1 + 41456);
  v6 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaDeviceInfo>,(WebCore::DOMConstructorID)137>(a1, a2);
  LODWORD(v19) = 67099;
  v7 = JSC::Structure::create((uint64_t *)a1, a2, v6);
  *(_DWORD *)(v7 + 16) |= 0x80000u;
  v8 = (_QWORD *)*v5;
  SlowCase = *(_QWORD *)(*v5 + 22768);
  if (SlowCase >= *(_QWORD *)(*v5 + 22776))
  {
    SlowCase = v8[2848];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_4;
    }
    v18 = *(_QWORD *)(SlowCase + 8) ^ v8[2849];
    v8[2847] = SlowCase + HIDWORD(v18);
    v8[2848] = SlowCase + (int)v18;
  }
  v8[2846] = SlowCase + 48;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000000, 6, (uint64_t)&v19);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v19);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v19);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v16 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSInputDeviceInfo>((WebCore::JSMediaDeviceInfo *)a1, (JSC::VM *)a2, v15)+ 48);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v16, 14, (uint64_t)&v19);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1088) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsInputDeviceInfoConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSInputDeviceInfoPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSInputDeviceInfo>,(WebCore::DOMConstructorID)136>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::wrap<WebCore::InputDeviceInfo>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v35 = *(_QWORD *)(v5 + 32);
    if (!v35)
      goto LABEL_5;
    v36 = *(_DWORD *)(v35 - 8);
    v37 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(v35 + 16 * v40);
    if (v41 != a3)
    {
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v36;
        v41 = *(_QWORD *)(v35 + 16 * v40);
        ++v42;
        if (v41 == a3)
          goto LABEL_56;
      }
      goto LABEL_5;
    }
LABEL_56:
    v6 = *(_QWORD *)(v35 + 16 * v40 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 8);
  if (*(void (***)(WebCore::InputDeviceInfo *__hidden))a3 != off_1E335FAF0)
  {
    __break(0xC471u);
    JUMPOUT(0x194CAF65CLL);
  }
  v8 = WebCore::getDOMStructure<WebCore::JSInputDeviceInfo>(*((WebCore::JSMediaDeviceInfo **)a2 + 7), a2, (WebCore::JSDOMGlobalObject *)a3);
  v9 = *((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(v9 + 41456);
  v11 = *(_QWORD *)(v10 + 23536);
  v12 = *(_QWORD **)(v11 + 1112);
  if (!v12)
  {
    v13 = *(_QWORD *)(v10 + 22648);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_11:
    v15 = *(_QWORD *)(v13 + 2824);
    if (!*(_QWORD *)(v15 + 1112))
    {
      v16 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
      v44 = 0;
      MEMORY[0x19AEA3204](v16, &v45, v9 + 192, v9 + 1872, 32, 8, &v44);
      v18 = (uint64_t)v44;
      v44 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = v45;
      v45 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::fastFree(v19, v17);
        else
          --*(_DWORD *)v19;
      }
      v20 = *(_QWORD *)(v15 + 1112);
      *(_QWORD *)(v15 + 1112) = v16;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v22 = *(_QWORD *)(v11 + 1112);
    *(_QWORD *)(v11 + 1112) = v12;
    if (v22)
    {
      v23 = (WTF *)MEMORY[0x19AEA3528](v22, v21);
      WTF::fastFree(v23, v24);
    }
    v25 = __ldxr((unsigned __int8 *)v13);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_26;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
LABEL_26:
  SlowCase = v12[3];
  if (SlowCase < v12[4])
  {
LABEL_27:
    v12[3] = SlowCase + 32;
    goto LABEL_28;
  }
  SlowCase = v12[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
    v12[4] = SlowCase + HIDWORD(v43);
    v12[5] = SlowCase + (int)v43;
    goto LABEL_27;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_28:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v8);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v26 = *((_QWORD *)a2 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::MediaDeviceInfo *)::owner = (uint64_t)&off_1E32B3410;
  }
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::MediaDeviceInfo *)::owner;
    Allocator[2] = v26;
    v30 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v30)
      return SlowCase;
LABEL_50:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v45 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::MediaDeviceInfo *)::owner;
  v34[2] = v26;
  v44 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  v30 = (uint64_t)v44;
  if (v44)
    goto LABEL_50;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSInputEvent>::construct(JSC::VM **a1, unint64_t a2)
{
  WTF::StringImpl *v2;
  _BOOL8 v3;
  JSC::JSGlobalObject *v4;
  JSC::VM *v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  unint64_t v10;
  JSC::JSCell *v11;
  JSC::VM *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  _BOOL4 v16;
  BOOL v17;
  char v18;
  BOOL v19;
  JSC::VM *v20;
  double v21;
  WTF::StringImpl *v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  double v27;
  BOOL v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  JSC::VM *v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  double v41;
  int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  WTF *v48;
  _BOOL4 v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  WebCore::JSDOMGlobalObject *v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  JSCell *v60;
  JSC::JSCell *v61;
  JSC::JSGlobalObject *v62;
  JSC::JSObject *v63;
  JSC::JSGlobalObject *v64;
  WebCore::JSUIEvent *v65;
  WebCore::JSDOMGlobalObject *v66;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v68;
  JSC::Structure *v69;
  unint64_t SubclassStructure;
  _DWORD *v71;
  JSCell *v72;
  uint64_t *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  JSC::VM **v86;
  unint64_t v87;
  JSValue v88;
  unint64_t v89;
  int hasExceptionsAfterHandlingTraps;
  int v91;
  int v92;
  int v93;
  uint64_t (**v94)();
  int v95;
  int v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  int *v100;
  int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  int *v105;
  int v106;
  int v107;
  uint64_t v108;
  int *v109;
  int v110;
  _BOOL8 v111;
  uint64_t (**v112)();
  _BOOL8 v113;
  BOOL v114;
  _BOOL8 v115;
  int v116;
  uint64_t v117;
  int *v118;
  int v119;
  BOOL v120;
  _BOOL8 v121;
  _BOOL4 v122;
  unsigned int v123;
  BOOL v124;
  BOOL v125;
  char v126;
  uint64_t v127;
  unint64_t v128;
  JSC::VM *v129;
  JSC::JSGlobalObject *v130;
  BOOL v131;
  char v132;
  BOOL v133;
  WTF::StringImpl *v134;
  _BOOL4 v135;
  WTF::StringImpl *v136;
  BOOL v137;
  WTF::StringImpl *v138;
  unsigned int v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142;
  unsigned int v143;
  unint64_t v144;
  unsigned int v145;
  JSC::VM *v146;
  JSC::VM *v147;
  unint64_t v148[2];

  v4 = (JSC::JSGlobalObject *)a1;
  v5 = a1[7];
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v88.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, v4, v88);
  }
  v6 = a2;
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a2 + 48), (uint64_t)&v140);
  v9 = v141;
  if (v141)
  {
    v72 = 0;
    goto LABEL_151;
  }
  v127 = v7;
  v128 = v6;
  v10 = (unint64_t)off_1E32A90E0;
  v129 = v5;
  v130 = v4;
  if ((unint64_t)(*(int *)(v6 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v146 = (JSC::VM *)*((_QWORD *)v4 + 7);
    LOBYTE(v11) = 10;
    goto LABEL_14;
  }
  v11 = *(JSC::JSCell **)(v6 + 56);
  v12 = (JSC::VM *)*((_QWORD *)v4 + 7);
  v146 = v12;
  if (((unint64_t)v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_14:
    v2 = 0;
    v16 = 0;
    v14 = 0;
    LODWORD(v3) = 0;
    v6 = 0;
    v17 = 0;
    v4 = 0;
    v145 = 0;
    v144 = 0;
    v18 = 1;
    goto LABEL_15;
  }
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v11)) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_213;
  }
  v14 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v2 = (WTF::StringImpl *)v144;
  v10 = JSC::JSObject::get(v14, v4, v144);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v15);
    else
      *(_DWORD *)v2 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    goto LABEL_213;
  if (v10 == 10)
  {
    v3 = 0;
    goto LABEL_24;
  }
  v20 = (JSC::VM *)*((_QWORD *)v4 + 7);
  if (v10 >= 0xFFFE000000000000)
  {
    v102 = (_DWORD)v10 == 0;
  }
  else
  {
    *(_QWORD *)&v21 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v21 <= 0.0)
      {
        v3 = v21 < 0.0;
        goto LABEL_23;
      }
      goto LABEL_308;
    }
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      v3 = v10 == 7;
      goto LABEL_23;
    }
    v103 = *(unsigned __int8 *)(v10 + 5);
    if (v103 == 3)
    {
      v106 = *(_DWORD *)(v10 + 8);
LABEL_306:
      v3 = v106 != 0;
      goto LABEL_23;
    }
    if (v103 == 2)
    {
      v104 = *(_QWORD *)(v10 + 8);
      if ((v104 & 1) != 0)
        v105 = (int *)(v10 + 16);
      else
        v105 = (int *)(v104 + 4);
      v106 = *v105;
      goto LABEL_306;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
    {
LABEL_308:
      v3 = 1;
      goto LABEL_23;
    }
    v102 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)v4;
  }
  v3 = !v102;
LABEL_23:
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    goto LABEL_213;
LABEL_24:
  WTF::AtomStringImpl::addLiteral();
  v2 = (WTF::StringImpl *)v144;
  v10 = JSC::JSObject::get(v14, v4, v144);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v22);
    else
      *(_DWORD *)v2 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    goto LABEL_213;
  if (v10 == 10)
  {
    v6 = 0;
    goto LABEL_35;
  }
  v23 = (JSC::VM *)*((_QWORD *)v4 + 7);
  if (v10 >= 0xFFFE000000000000)
  {
    v6 = (_DWORD)v10 != 0;
    goto LABEL_34;
  }
  *(_QWORD *)&v24 = v10 - 0x2000000000000;
  if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v6 = v24 > 0.0 || v24 < 0.0;
  }
  else
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      v6 = v10 == 7;
      goto LABEL_34;
    }
    v107 = *(unsigned __int8 *)(v10 + 5);
    if (v107 == 3)
    {
      v110 = *(_DWORD *)(v10 + 8);
LABEL_310:
      v6 = v110 != 0;
      goto LABEL_34;
    }
    if (v107 == 2)
    {
      v108 = *(_QWORD *)(v10 + 8);
      if ((v108 & 1) != 0)
        v109 = (int *)(v10 + 16);
      else
        v109 = (int *)(v108 + 4);
      v110 = *v109;
      goto LABEL_310;
    }
    v6 = (*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0
      || *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) != (_QWORD)v4;
  }
LABEL_34:
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    goto LABEL_213;
LABEL_35:
  WTF::AtomStringImpl::addLiteral();
  v2 = (WTF::StringImpl *)v144;
  v10 = JSC::JSObject::get(v14, v4, v144);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v25);
    else
      *(_DWORD *)v2 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    goto LABEL_213;
  if (v10 == 10)
  {
    v125 = 0;
    goto LABEL_47;
  }
  v26 = (JSC::VM *)*((_QWORD *)v4 + 7);
  if (v10 >= 0xFFFE000000000000)
  {
    v28 = (_DWORD)v10 != 0;
    goto LABEL_45;
  }
  *(_QWORD *)&v27 = v10 - 0x2000000000000;
  if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v111 = v3;
    v112 = (uint64_t (**)())v6;
    v113 = v111;
    if (v27 <= 0.0)
    {
      v114 = v27 < 0.0;
LABEL_317:
      v125 = v114;
LABEL_318:
      v121 = v113;
      v6 = (unint64_t)v112;
      v3 = v121;
      goto LABEL_46;
    }
    goto LABEL_316;
  }
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    v115 = v3;
    v112 = (uint64_t (**)())v6;
    v113 = v115;
    v116 = *(unsigned __int8 *)(v10 + 5);
    if (v116 == 3)
    {
      v119 = *(_DWORD *)(v10 + 8);
LABEL_314:
      v114 = v119 != 0;
      goto LABEL_317;
    }
    if (v116 == 2)
    {
      v117 = *(_QWORD *)(v10 + 8);
      if ((v117 & 1) != 0)
        v118 = (int *)(v10 + 16);
      else
        v118 = (int *)(v117 + 4);
      v119 = *v118;
      goto LABEL_314;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v125 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) != (_QWORD)v4;
      goto LABEL_318;
    }
LABEL_316:
    v114 = 1;
    goto LABEL_317;
  }
  v28 = v10 == 7;
LABEL_45:
  v125 = v28;
LABEL_46:
  if (!*((_DWORD *)v26 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v26))
  {
LABEL_47:
    WTF::AtomStringImpl::addLiteral();
    v10 = v144;
    v30 = JSC::JSObject::get(v14, v4, v144);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        v82 = v30;
        WTF::StringImpl::destroy((WTF::StringImpl *)v10, v29);
        v30 = v82;
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (*((_DWORD *)v12 + 20))
    {
      v89 = v30;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
      v30 = v89;
      if (hasExceptionsAfterHandlingTraps)
        goto LABEL_213;
    }
    if (v30 == 10)
    {
      v123 = 0;
    }
    else
    {
      v144 = v30;
      v10 = *((_QWORD *)v4 + 7);
      if (v30 < 0xFFFE000000000000)
      {
        v83 = v30 - 0x2000000000000;
        if (v30 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v144, v4);
          v83 = v97;
        }
        v84 = (v83 >> 52) & 0x7FF;
        if ((v84 - 1023) <= 0x53)
        {
          v87 = v83 >> (51 - (v83 >> 52));
          if (v84 > 0x433)
            LODWORD(v87) = v83 << ((v83 >> 52) - 51);
          if (v84 >= 0x41F)
            LODWORD(v30) = v87;
          else
            LODWORD(v30) = (((1 << ((v83 >> 52) + 1)) - 1) & v87) + (1 << ((v83 >> 52) + 1));
          if ((v83 & 0x8000000000000000) != 0)
            LODWORD(v30) = -(int)v30;
        }
        else
        {
          LODWORD(v30) = 0;
        }
      }
      if (*(_DWORD *)(v10 + 80))
      {
        v92 = v30;
        v93 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10);
        LODWORD(v30) = v92;
        if (v93)
          goto LABEL_158;
      }
      v123 = v30;
    }
    WTF::AtomStringImpl::addLiteral();
    v31 = (WTF::StringImpl *)v144;
    v10 = JSC::JSObject::get(v14, v4, v144);
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v32);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    {
LABEL_158:
      v2 = 0;
LABEL_159:
      v139 = 1;
      goto LABEL_110;
    }
    if ((v10 | 8) == 0xA)
    {
      v2 = 0;
    }
    else
    {
      v144 = *((_QWORD *)v4 + 7);
      if ((v10 & 0xFFFE000000000002) != 0
        || *(unsigned __int8 *)(v10 + 5) < 0x17u
        || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C))
        || (v85 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 3408),
            !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 104))(v85))
        || (v2 = *(WTF::StringImpl **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 104))(v85) + 112)) == 0)
      {
        JSC::throwTypeError();
        goto LABEL_158;
      }
      ++*(_DWORD *)v2;
    }
    WTF::AtomStringImpl::addLiteral();
    v4 = (JSC::JSGlobalObject *)v144;
    v10 = JSC::JSObject::get(v14, v130, v144);
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v33);
      else
        *(_DWORD *)v4 -= 2;
    }
    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
      goto LABEL_159;
    if (v10 == 10)
    {
      v4 = 0;
      v145 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(v130, v10, (uint64_t)&v144);
      v34 = v145;
      if (v145)
      {
        v4 = 0;
        v12 = 0;
        v139 = 1;
        v10 = (unint64_t)off_1E32A90E0;
        goto LABEL_102;
      }
      v4 = (JSC::JSGlobalObject *)v144;
    }
    v144 = 0;
    WTF::AtomStringImpl::addLiteral();
    v35 = v142;
    v36 = JSC::JSObject::get(v14, v130, (unint64_t)v142);
    v16 = v123;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::destroy(v35, v8);
        v16 = v123;
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    if (*((_DWORD *)v12 + 20))
    {
      v91 = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
      v16 = v123;
      if (v91)
      {
        v12 = 0;
        v139 = 1;
        v10 = (unint64_t)off_1E32A90E0;
        goto LABEL_101;
      }
    }
    if (v36 == 10)
    {
      v18 = 0;
      v10 = (unint64_t)off_1E32A90E0;
      v17 = v125;
LABEL_15:
      v12 = (JSC::VM *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v12 += 2;
      v19 = 0;
      v143 = 0;
      v142 = 0;
      if ((v18 & 1) != 0)
        goto LABEL_98;
LABEL_85:
      v122 = v3;
      LODWORD(v3) = v16;
      v126 = v17;
      v123 = v6;
      v6 = (unint64_t)off_1E32A90E0;
      WTF::AtomStringImpl::addLiteral();
      v39 = (WTF::StringImpl *)v148[0];
      v10 = JSC::JSObject::get(v14, v130, v148[0]);
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v8);
        else
          *(_DWORD *)v39 -= 2;
      }
      if (*((_DWORD *)v146 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v146) & 1) != 0)
      {
        v42 = 1;
        v10 = (unint64_t)off_1E32A90E0;
        goto LABEL_99;
      }
      if (v10 == 10)
      {
        v19 = 0;
        v10 = (unint64_t)off_1E32A90E0;
        goto LABEL_91;
      }
      v40 = (JSC::VM *)*((_QWORD *)v130 + 7);
      v16 = v3;
      if (v10 >= 0xFFFE000000000000)
        goto LABEL_261;
      *(_QWORD *)&v41 = v10 - 0x2000000000000;
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v41 <= 0.0)
        {
          v19 = v41 < 0.0;
LABEL_323:
          v16 = v3;
          goto LABEL_96;
        }
      }
      else
      {
        if ((v10 & 0xFFFE000000000002) != 0)
        {
          v19 = v10 == 7;
          goto LABEL_96;
        }
        v98 = *(unsigned __int8 *)(v10 + 5);
        if (v98 == 3)
        {
          v101 = *(_DWORD *)(v10 + 8);
LABEL_301:
          v120 = v101 == 0;
          goto LABEL_320;
        }
        if (v98 == 2)
        {
          v99 = *(_QWORD *)(v10 + 8);
          if ((v99 & 1) != 0)
            v100 = (int *)(v10 + 16);
          else
            v100 = (int *)(v99 + 4);
          v101 = *v100;
          goto LABEL_301;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v120 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)v130;
LABEL_320:
          v19 = !v120;
          goto LABEL_323;
        }
      }
      v19 = 1;
      goto LABEL_323;
    }
    v148[0] = v36;
    v37 = (JSC::VM *)*((_QWORD *)v130 + 7);
    v17 = v125;
    if ((v36 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v36 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v148, v130);
      v16 = v123;
      v17 = v125;
      goto LABEL_82;
    }
    v38 = *(JSC::VM **)(v36 + 8);
    if ((v38 & 1) != 0)
    {
      v86 = (JSC::VM **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v36, v130);
      v16 = v123;
      v38 = *v86;
      v17 = v125;
      if (!*v86)
        goto LABEL_81;
    }
    else if (!v38)
    {
LABEL_81:
      v147 = v38;
LABEL_82:
      v10 = (unint64_t)off_1E32A90E0;
      if (*((_DWORD *)v37 + 20))
      {
        v94 = (uint64_t (**)())v3;
        LODWORD(v3) = v6;
        v6 = (unint64_t)v94;
        v95 = JSC::VM::hasExceptionsAfterHandlingTraps(v37);
        v12 = v147;
        if (v95)
        {
          v143 = 1;
          v147 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v8);
            else
              *(_DWORD *)v12 -= 2;
          }
          v12 = 0;
          goto LABEL_257;
        }
        v96 = v6;
        LODWORD(v6) = v3;
        LODWORD(v3) = v96;
        v17 = v125;
        v16 = v123;
      }
      else
      {
        v12 = v147;
      }
      v143 = 0;
      v142 = 0;
      goto LABEL_85;
    }
    *(_DWORD *)v38 += 2;
    goto LABEL_81;
  }
LABEL_213:
  v139 = 1;
  while (1)
  {
    v43 = v139;
    if (v139)
      break;
    v122 = 0;
    v126 = (char)v11;
    if (!v141)
    {
      v44 = v140;
      v140 = 0;
      v45 = v131;
      v46 = v132 != 0;
      v47 = v133;
      v48 = v134;
      v49 = v135;
      v50 = v136;
      v134 = 0;
      v136 = 0;
      v124 = v137;
      v51 = v138;
      v138 = 0;
      v52 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v52);
      *(_QWORD *)(v52 + 8) = 0;
      if (v45)
        v56 = 2326530;
      else
        v56 = 2326528;
      v57 = v56 | (v44 != 0) | (4 * v46) | (8 * v47) | *(_DWORD *)(v52 + 20) & 0xFFC00000;
      *(_DWORD *)(v52 + 16) = 1;
      *(_DWORD *)(v52 + 20) = v57;
      if (v44)
      {
        *(_DWORD *)v44 += 2;
        v57 = *(_DWORD *)(v52 + 20);
      }
      *(_QWORD *)(v52 + 24) = v44;
      *(_QWORD *)(v52 + 32) = 0;
      *(_QWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = v55;
      *(_QWORD *)(v52 + 64) = 0;
      *(_DWORD *)(v52 + 20) = v57 | 0x4000;
      if (v48)
        ++*(_DWORD *)v48;
      *(_QWORD *)(v52 + 72) = v48;
      *(_DWORD *)(v52 + 80) = v49;
      *(_QWORD *)v52 = off_1E33A5230;
      if (v51)
        *(_DWORD *)v51 += 2;
      *(_QWORD *)(v52 + 88) = v51;
      if (v50)
        *(_DWORD *)v50 += 2;
      *(_QWORD *)(v52 + 96) = v50;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 112) = 0;
      *(_QWORD *)(v52 + 120) = 0;
      *(_BYTE *)(v52 + 128) = v124;
      v144 = v52;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v53);
        else
          *(_DWORD *)v51 -= 2;
      }
      if (v50)
      {
        if (*(_DWORD *)v50 != 2)
        {
          *(_DWORD *)v50 -= 2;
          goto LABEL_132;
        }
        WTF::StringImpl::destroy(v50, v53);
        if (!v48)
        {
LABEL_135:
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v53);
            else
              *(_DWORD *)v44 -= 2;
          }
          if (*(void (***)(WebCore::InputEvent *__hidden))v52 != off_1E33A5230)
          {
            __break(0xC471u);
            JUMPOUT(0x194CB0394);
          }
          v58 = *(_QWORD *)(v127 + 40);
          v59 = WebCore::getDOMStructure<WebCore::JSInputEvent>(*(WebCore::JSUIEvent **)(v58 + 56), (JSC::VM *)v58, v54);
          v60 = (JSCell *)WebCore::JSInputEvent::create(v59, (JSC::VM *)v58, (uint64_t *)&v144);
          WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*(_QWORD *)(v58 + 3320), v52, (uint64_t)v60);
          v61 = *(JSC::JSCell **)(v128 + 40);
          if (((unint64_t)v61 & 0xFFFE000000000002) == 0)
          {
            v62 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v61);
            if (v62)
            {
              v64 = v62;
              if (v62 != *(JSC::JSGlobalObject **)(v128 + 24))
              {
                v65 = (WebCore::JSUIEvent *)*((_QWORD *)v130 + 7);
                FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(v130, v62, v63);
                if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
                {
                  v68 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSInputEvent>(v65, FunctionRealm, v66);
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(v130, v64, v68, v69);
                  if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
                    JSC::JSObject::setStructure(v60, v65, SubclassStructure);
                }
              }
            }
          }
          if (*((_DWORD *)v129 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v129) & 1) != 0)
            v60 = 0;
          v43 = 0;
          v71 = (_DWORD *)v144;
          v144 = 0;
          if (v71)
          {
            if (v71[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 8))(v71);
            else
              --v71[4];
          }
          goto LABEL_149;
        }
      }
      else
      {
LABEL_132:
        if (!v48)
          goto LABEL_135;
      }
      if (*(_DWORD *)v48 == 1)
      {
        v74 = (uint64_t *)*((_QWORD *)v48 + 2);
        *((_QWORD *)v48 + 2) = 0;
        if (v74)
        {
          if (*v74)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v74, v53);
          WTF::fastFree((WTF *)v74, v53);
        }
        v75 = (unsigned int *)*((_QWORD *)v48 + 1);
        *((_QWORD *)v48 + 1) = 0;
        if (v75)
        {
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            atomic_store(1u, v75);
            WTF::fastFree((WTF *)v75, v53);
          }
        }
        WTF::fastFree(v48, v53);
      }
      else
      {
        --*(_DWORD *)v48;
      }
      goto LABEL_135;
    }
    v40 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_261:
    v19 = (_DWORD)v10 != 0;
LABEL_96:
    v10 = v6;
    if (!*((_DWORD *)v40 + 20))
    {
      LODWORD(v3) = v122;
      v6 = v123;
      v17 = v126;
      goto LABEL_98;
    }
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
    {
LABEL_91:
      v6 = v123;
      v17 = v126;
      v16 = v3;
      LODWORD(v3) = v122;
LABEL_98:
      v42 = 0;
      v131 = v3;
      v132 = v6;
      v133 = v17;
      v134 = v2;
      v135 = v16;
      v136 = v4;
      v137 = v19;
      v138 = v12;
      v2 = 0;
      v4 = 0;
      v12 = 0;
      goto LABEL_99;
    }
LABEL_257:
    v42 = 1;
LABEL_99:
    v139 = v42;
    if (v143 != -1)
      (*(void (**)(unint64_t *, WTF::StringImpl **))(v10 + 8 * v143))(v148, &v142);
LABEL_101:
    v34 = v145;
LABEL_102:
    if (v34 != -1)
      (*(void (**)(WTF::StringImpl **, unint64_t *))(v10 + 8 * v34))(&v142, &v144);
    if (!v12)
      goto LABEL_107;
    if (*(_DWORD *)v12 != 2)
    {
      *(_DWORD *)v12 -= 2;
LABEL_107:
      if (v4)
        goto LABEL_108;
      goto LABEL_110;
    }
    WTF::StringImpl::destroy(v12, v8);
    if (v4)
    {
LABEL_108:
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v8);
      else
        *(_DWORD *)v4 -= 2;
    }
LABEL_110:
    if (v2)
    {
      if (*(_DWORD *)v2 == 1)
      {
        v78 = (uint64_t *)*((_QWORD *)v2 + 2);
        *((_QWORD *)v2 + 2) = 0;
        if (v78)
        {
          if (*v78)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v78, v8);
          WTF::fastFree((WTF *)v78, v8);
        }
        v79 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v79)
        {
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
          {
            atomic_store(1u, v79);
            WTF::fastFree((WTF *)v79, v8);
          }
        }
        WTF::fastFree(v2, v8);
      }
      else
      {
        --*(_DWORD *)v2;
      }
    }
  }
  v60 = 0;
  v72 = 0;
  if (v139 != -1)
  {
LABEL_149:
    ((void (*)(unint64_t *, BOOL *))off_1E32AAC20[v43])(&v144, &v131);
    v72 = v60;
  }
  v9 = v141;
LABEL_151:
  if (v9 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E32A9100[v9])(&v131, &v140);
  return v72;
}

uint64_t WebCore::JSInputEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSUIEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSInputEvent::createPrototype(WebCore::JSInputEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSInputEventPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSInputEventPrototype::create(WebCore::JSInputEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSInputEvent::s_info, &WebCore::JSInputEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSInputEvent>,(WebCore::DOMConstructorID)455>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t SlowCase;
  _QWORD *v6;
  JSC::JSCell *v7;
  JSC::JSCell *v8;
  uint64_t Structure;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  uint64_t v19;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a2 + 3312);
  SlowCase = *(_QWORD *)(v2 + 3640);
  if (SlowCase)
    return SlowCase;
  v6 = (_QWORD *)(a1 + 41456);
  v7 = *(JSC::JSCell **)(v2 + 3968);
  if (!v7)
  {
    v8 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
    Structure = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)a1, a2, v8);
    v7 = (JSC::JSCell *)WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3968) = v7;
    if (v7)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
    }
  }
  LODWORD(v22) = 67099;
  v10 = JSC::Structure::create((uint64_t *)a1, a2, v7);
  *(_DWORD *)(v10 + 16) |= 0x80000u;
  v11 = (_QWORD *)*v6;
  SlowCase = *(_QWORD *)(*v6 + 22768);
  if (SlowCase >= *(_QWORD *)(*v6 + 22776))
  {
    SlowCase = v11[2848];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_6;
    }
    v21 = *(_QWORD *)(SlowCase + 8) ^ v11[2849];
    v11[2847] = SlowCase + HIDWORD(v21);
    v11[2848] = SlowCase + (int)v21;
  }
  v11[2846] = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v6[62] + 1768);
  v22 = 0;
  v23 = SlowCase;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v12, 0xFFFE000000000001, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create(a1, &v22);
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v14;
  if (v14 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)SlowCase);
  v16 = *(_QWORD *)(v6[62] + 1968);
  v22 = 0;
  v23 = SlowCase;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v16, v14, 6, (uint64_t)&v22);
  v17 = *(_QWORD *)(v6[62] + 2160);
  v19 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSInputEvent>((WebCore::JSUIEvent *)a1, (JSC::VM *)a2, v18) + 48);
  v22 = 0;
  v23 = SlowCase;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v17, v19, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3640) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsInputEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSInputEventPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSInputEvent>,(WebCore::DOMConstructorID)455>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsInputEvent_inputType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsInputEvent_data(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v2)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v2 + 4);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_5;
      v8 = v9;
    }
    return *(_QWORD *)(v4 + 8 * v8 + 42216);
  }
LABEL_5:
  v3 = *(_QWORD *)(v4 + 64760);
  if (!v3 || v2 != *(_QWORD *)(v3 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v3;
}

uint64_t WebCore::jsInputEvent_isComposing(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 128))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsInputEvent_dataTransfer(uint64_t a1, uint64_t a2)
{
  WebCore::DataTransfer *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  WTF *v7;
  void *v8;

  v2 = *(WebCore::DataTransfer **)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++*(_DWORD *)v2;
  v5 = WebCore::wrap<WebCore::DataTransfer>(a1, v3, v2);
  if (*(_DWORD *)v2 == 1)
  {
    WebCore::DataTransfer::~DataTransfer(v2, v4);
    WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return v5;
}

uint64_t WebCore::JSInputEvent::subspaceForImpl(WebCore::JSInputEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3720);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3720))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3720);
    *(_QWORD *)(v8 + 3720) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3720);
  *(_QWORD *)(v3 + 3720) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

WTF *WebCore::JSInspectorAuditAccessibilityObject::destroy(WebCore::JSInspectorAuditAccessibilityObject *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSInspectorAuditAccessibilityObject::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSInspectorAuditAccessibilityObjectOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSInspectorAuditAccessibilityObjectOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::createWrapper<WebCore::InspectorAuditAccessibilityObject,WebCore::InspectorAuditAccessibilityObject>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  JSC::JSCell *v15;
  unint64_t v16;
  unint64_t SlowCase;
  int v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  JSC::Structure *Allocator;
  unint64_t v49;
  unint64_t v50;
  WTF::StringImpl *v51[6];
  int v52;
  int v53;
  int v54;
  JSC::Structure *v55;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSInspectorAuditAccessibilityObject::s_info
        + ~((_QWORD)&WebCore::JSInspectorAuditAccessibilityObject::s_info << 32)) ^ (((unint64_t)&WebCore::JSInspectorAuditAccessibilityObject::s_info
                                                                                    + ~((_QWORD)&WebCore::JSInspectorAuditAccessibilityObject::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSInspectorAuditAccessibilityObject::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_15;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSInspectorAuditAccessibilityObject::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(JSC::JSCell **)(a1 + 656);
  LODWORD(v51[0]) = 23;
  v16 = JSC::Structure::create((uint64_t *)v14, a1, v15);
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  SlowCase = *(_QWORD *)(v14 + 38904);
  if (SlowCase >= *(_QWORD *)(v14 + 38912))
  {
    SlowCase = *(_QWORD *)(v14 + 38920);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_9;
    }
    v50 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 38928);
    *(_QWORD *)(v14 + 38912) = SlowCase + HIDWORD(v50);
    *(_QWORD *)(v14 + 38920) = SlowCase + (int)v50;
  }
  *(_QWORD *)(v14 + 38904) = SlowCase + 16;
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  v18 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)SlowCase = v16 >> 4;
  *(_DWORD *)(SlowCase + 4) = v18;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>((JSC::VM *)v14, (uint64_t)&WebCore::JSInspectorAuditAccessibilityObject::s_info, (uint64_t)&WebCore::JSInspectorAuditAccessibilityObjectPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v19 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create(v14, v51);
  v22 = v51[0];
  v51[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v54 = *(_DWORD *)SlowCase;
  v55 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v52 = 0;
  v53 = v24;
  v51[0] = (WTF::StringImpl *)&v53;
  v51[1] = (WTF::StringImpl *)SlowCase;
  v51[2] = (WTF::StringImpl *)v14;
  v51[3] = (WTF::StringImpl *)&v54;
  v51[4] = (WTF::StringImpl *)&v55;
  v51[5] = (WTF::StringImpl *)&v52;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, (JSC::VM *)v14, v19, 6, (uint64_t)v51);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, v14, v52, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  LODWORD(v51[0]) = 23;
  v25 = JSC::Structure::create((uint64_t *)v14, a1, (JSC::JSCell *)SlowCase);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v25, (uint64_t)&WebCore::JSInspectorAuditAccessibilityObject::s_info);
LABEL_15:
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(v26 + 41456);
  v28 = *(_QWORD *)(v27 + 23536);
  v29 = *(_QWORD **)(v28 + 5680);
  if (v29)
    goto LABEL_35;
  v30 = *(_QWORD *)(v27 + 22648);
  if (__ldaxr((unsigned __int8 *)v30))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v30))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v30);
LABEL_20:
  v32 = *(_QWORD *)(v30 + 2824);
  if (!*(_QWORD *)(v32 + 5680))
  {
    v33 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v51, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v33, v51, v26 + 192, v26 + 1872, 32, 8, &v55);
    v35 = (uint64_t)v55;
    v55 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v51[0];
    v51[0] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        WTF::fastFree(v36, v34);
      else
        --*(_DWORD *)v36;
    }
    v37 = *(_QWORD *)(v32 + 5680);
    *(_QWORD *)(v32 + 5680) = v33;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v28 + 5680);
  *(_QWORD *)(v28 + 5680) = v29;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v30);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v30))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v30);
LABEL_35:
  v42 = v29[3];
  if (v42 < v29[4])
  {
LABEL_36:
    v29[3] = v42 + 32;
    goto LABEL_37;
  }
  v42 = v29[5];
  if ((v42 & 1) == 0)
  {
    v49 = *(_QWORD *)(v42 + 8) ^ v29[6];
    v29[4] = v42 + HIDWORD(v49);
    v29[5] = v42 + (int)v49;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  v42 = JSC::LocalAllocator::allocateSlowCase();
LABEL_37:
  *(_DWORD *)v42 = 0;
  WebCore::JSDOMObject::JSDOMObject(v42, v13);
  v43 = *a2;
  *a2 = 0;
  *(_QWORD *)(v42 + 24) = v43;
  if (*(_BYTE *)(v26 + 755))
    __dmb(0xAu);
  v44 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335E10 & 1) == 0)
  {
    qword_1EE335E08 = (uint64_t)&off_1E32A8200;
    byte_1EE335E10 = 1;
  }
  v51[0] = v4;
  if ((v42 & 8) != 0)
    v45 = (v42 - 112) | 1;
  else
    v45 = v42 & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  Allocator = *(JSC::Structure **)(v46 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v42;
  *((_QWORD *)Allocator + 1) = &qword_1EE335E08;
  *((_QWORD *)Allocator + 2) = v44;
  v55 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v44 + 32), (uint64_t *)v51, (uint64_t *)&v55);
  if (v55)
    *((_QWORD *)v55 + 1) = 3;
  return v42;
}

WTF *WebCore::JSInspectorAuditDOMObject::destroy(WebCore::JSInspectorAuditDOMObject *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSInspectorAuditDOMObject::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSInspectorAuditDOMObjectOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSInspectorAuditDOMObjectOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::createWrapper<WebCore::InspectorAuditDOMObject,WebCore::InspectorAuditDOMObject>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  JSC::JSCell *v15;
  unint64_t v16;
  unint64_t SlowCase;
  int v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  JSC::Structure *Allocator;
  unint64_t v49;
  unint64_t v50;
  WTF::StringImpl *v51[6];
  int v52;
  int v53;
  int v54;
  JSC::Structure *v55;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSInspectorAuditDOMObject::s_info
        + ~((_QWORD)&WebCore::JSInspectorAuditDOMObject::s_info << 32)) ^ (((unint64_t)&WebCore::JSInspectorAuditDOMObject::s_info
                                                                          + ~((_QWORD)&WebCore::JSInspectorAuditDOMObject::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSInspectorAuditDOMObject::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_15;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSInspectorAuditDOMObject::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(JSC::JSCell **)(a1 + 656);
  LODWORD(v51[0]) = 23;
  v16 = JSC::Structure::create((uint64_t *)v14, a1, v15);
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  SlowCase = *(_QWORD *)(v14 + 38904);
  if (SlowCase >= *(_QWORD *)(v14 + 38912))
  {
    SlowCase = *(_QWORD *)(v14 + 38920);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_9;
    }
    v50 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 38928);
    *(_QWORD *)(v14 + 38912) = SlowCase + HIDWORD(v50);
    *(_QWORD *)(v14 + 38920) = SlowCase + (int)v50;
  }
  *(_QWORD *)(v14 + 38904) = SlowCase + 16;
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  v18 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)SlowCase = v16 >> 4;
  *(_DWORD *)(SlowCase + 4) = v18;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v14, (uint64_t)&WebCore::JSInspectorAuditDOMObject::s_info, (uint64_t)&WebCore::JSInspectorAuditDOMObjectPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v19 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create(v14, v51);
  v22 = v51[0];
  v51[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v54 = *(_DWORD *)SlowCase;
  v55 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v52 = 0;
  v53 = v24;
  v51[0] = (WTF::StringImpl *)&v53;
  v51[1] = (WTF::StringImpl *)SlowCase;
  v51[2] = (WTF::StringImpl *)v14;
  v51[3] = (WTF::StringImpl *)&v54;
  v51[4] = (WTF::StringImpl *)&v55;
  v51[5] = (WTF::StringImpl *)&v52;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, (JSC::VM *)v14, v19, 6, (uint64_t)v51);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, v14, v52, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  LODWORD(v51[0]) = 23;
  v25 = JSC::Structure::create((uint64_t *)v14, a1, (JSC::JSCell *)SlowCase);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v25, (uint64_t)&WebCore::JSInspectorAuditDOMObject::s_info);
LABEL_15:
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(v26 + 41456);
  v28 = *(_QWORD *)(v27 + 23536);
  v29 = *(_QWORD **)(v28 + 5688);
  if (v29)
    goto LABEL_35;
  v30 = *(_QWORD *)(v27 + 22648);
  if (__ldaxr((unsigned __int8 *)v30))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v30))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v30);
LABEL_20:
  v32 = *(_QWORD *)(v30 + 2824);
  if (!*(_QWORD *)(v32 + 5688))
  {
    v33 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v51, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v33, v51, v26 + 192, v26 + 1872, 32, 8, &v55);
    v35 = (uint64_t)v55;
    v55 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v51[0];
    v51[0] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        WTF::fastFree(v36, v34);
      else
        --*(_DWORD *)v36;
    }
    v37 = *(_QWORD *)(v32 + 5688);
    *(_QWORD *)(v32 + 5688) = v33;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v28 + 5688);
  *(_QWORD *)(v28 + 5688) = v29;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v30);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v30))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v30);
LABEL_35:
  v42 = v29[3];
  if (v42 < v29[4])
  {
LABEL_36:
    v29[3] = v42 + 32;
    goto LABEL_37;
  }
  v42 = v29[5];
  if ((v42 & 1) == 0)
  {
    v49 = *(_QWORD *)(v42 + 8) ^ v29[6];
    v29[4] = v42 + HIDWORD(v49);
    v29[5] = v42 + (int)v49;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  v42 = JSC::LocalAllocator::allocateSlowCase();
LABEL_37:
  *(_DWORD *)v42 = 0;
  WebCore::JSDOMObject::JSDOMObject(v42, v13);
  v43 = *a2;
  *a2 = 0;
  *(_QWORD *)(v42 + 24) = v43;
  if (*(_BYTE *)(v26 + 755))
    __dmb(0xAu);
  v44 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335E20 & 1) == 0)
  {
    qword_1EE335E18 = (uint64_t)&off_1E32A8230;
    byte_1EE335E20 = 1;
  }
  v51[0] = v4;
  if ((v42 & 8) != 0)
    v45 = (v42 - 112) | 1;
  else
    v45 = v42 & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  Allocator = *(JSC::Structure **)(v46 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v42;
  *((_QWORD *)Allocator + 1) = &qword_1EE335E18;
  *((_QWORD *)Allocator + 2) = v44;
  v55 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v44 + 32), (uint64_t *)v51, (uint64_t *)&v55);
  if (v55)
    *((_QWORD *)v55 + 1) = 3;
  return v42;
}

WebCore::InspectorAuditResourcesObject *WebCore::JSInspectorAuditResourcesObject::destroy(WebCore::JSInspectorAuditResourcesObject *this, JSC::JSCell *a2)
{
  WebCore::InspectorAuditResourcesObject *result;
  WTF *v4;
  void *v5;

  result = (WebCore::InspectorAuditResourcesObject *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::InspectorAuditResourcesObject::~InspectorAuditResourcesObject(result, a2);
      return (WebCore::InspectorAuditResourcesObject *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSInspectorAuditResourcesObject::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSInspectorAuditResourcesObjectOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSInspectorAuditResourcesObjectOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::InspectorAuditResourcesObject *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::InspectorAuditResourcesObject *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::InspectorAuditResourcesObject **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::InspectorAuditResourcesObject **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::InspectorAuditResourcesObject **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::InspectorAuditResourcesObject::~InspectorAuditResourcesObject(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::InspectorAuditResourcesObject,WebCore::InspectorAuditResourcesObject>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  JSC::JSCell *v15;
  unint64_t v16;
  unint64_t SlowCase;
  int v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  JSC::Structure *Allocator;
  unint64_t v49;
  unint64_t v50;
  WTF::StringImpl *v51[6];
  int v52;
  int v53;
  int v54;
  JSC::Structure *v55;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSInspectorAuditResourcesObject::s_info
        + ~((_QWORD)&WebCore::JSInspectorAuditResourcesObject::s_info << 32)) ^ (((unint64_t)&WebCore::JSInspectorAuditResourcesObject::s_info
                                                                                + ~((_QWORD)&WebCore::JSInspectorAuditResourcesObject::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSInspectorAuditResourcesObject::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_15;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSInspectorAuditResourcesObject::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(JSC::JSCell **)(a1 + 656);
  LODWORD(v51[0]) = 23;
  v16 = JSC::Structure::create((uint64_t *)v14, a1, v15);
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  SlowCase = *(_QWORD *)(v14 + 38904);
  if (SlowCase >= *(_QWORD *)(v14 + 38912))
  {
    SlowCase = *(_QWORD *)(v14 + 38920);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_9;
    }
    v50 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 38928);
    *(_QWORD *)(v14 + 38912) = SlowCase + HIDWORD(v50);
    *(_QWORD *)(v14 + 38920) = SlowCase + (int)v50;
  }
  *(_QWORD *)(v14 + 38904) = SlowCase + 16;
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  v18 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)SlowCase = v16 >> 4;
  *(_DWORD *)(SlowCase + 4) = v18;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v14, (uint64_t)&WebCore::JSInspectorAuditResourcesObject::s_info, (uint64_t)&WebCore::JSInspectorAuditResourcesObjectPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v19 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create(v14, v51);
  v22 = v51[0];
  v51[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v54 = *(_DWORD *)SlowCase;
  v55 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v52 = 0;
  v53 = v24;
  v51[0] = (WTF::StringImpl *)&v53;
  v51[1] = (WTF::StringImpl *)SlowCase;
  v51[2] = (WTF::StringImpl *)v14;
  v51[3] = (WTF::StringImpl *)&v54;
  v51[4] = (WTF::StringImpl *)&v55;
  v51[5] = (WTF::StringImpl *)&v52;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, (JSC::VM *)v14, v19, 6, (uint64_t)v51);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, v14, v52, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  LODWORD(v51[0]) = 23;
  v25 = JSC::Structure::create((uint64_t *)v14, a1, (JSC::JSCell *)SlowCase);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v25, (uint64_t)&WebCore::JSInspectorAuditResourcesObject::s_info);
LABEL_15:
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(v26 + 41456);
  v28 = *(_QWORD *)(v27 + 23536);
  v29 = *(_QWORD **)(v28 + 5696);
  if (v29)
    goto LABEL_35;
  v30 = *(_QWORD *)(v27 + 22648);
  if (__ldaxr((unsigned __int8 *)v30))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v30))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v30);
LABEL_20:
  v32 = *(_QWORD *)(v30 + 2824);
  if (!*(_QWORD *)(v32 + 5696))
  {
    v33 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v51, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v33, v51, v26 + 192, v26 + 1872, 32, 8, &v55);
    v35 = (uint64_t)v55;
    v55 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v51[0];
    v51[0] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        WTF::fastFree(v36, v34);
      else
        --*(_DWORD *)v36;
    }
    v37 = *(_QWORD *)(v32 + 5696);
    *(_QWORD *)(v32 + 5696) = v33;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v28 + 5696);
  *(_QWORD *)(v28 + 5696) = v29;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v30);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v30))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v30);
LABEL_35:
  v42 = v29[3];
  if (v42 < v29[4])
  {
LABEL_36:
    v29[3] = v42 + 32;
    goto LABEL_37;
  }
  v42 = v29[5];
  if ((v42 & 1) == 0)
  {
    v49 = *(_QWORD *)(v42 + 8) ^ v29[6];
    v29[4] = v42 + HIDWORD(v49);
    v29[5] = v42 + (int)v49;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  v42 = JSC::LocalAllocator::allocateSlowCase();
LABEL_37:
  *(_DWORD *)v42 = 0;
  WebCore::JSDOMObject::JSDOMObject(v42, v13);
  v43 = *a2;
  *a2 = 0;
  *(_QWORD *)(v42 + 24) = v43;
  if (*(_BYTE *)(v26 + 755))
    __dmb(0xAu);
  v44 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335E30 & 1) == 0)
  {
    qword_1EE335E28 = (uint64_t)&off_1E32A8260;
    byte_1EE335E30 = 1;
  }
  v51[0] = v4;
  if ((v42 & 8) != 0)
    v45 = (v42 - 112) | 1;
  else
    v45 = v42 & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  Allocator = *(JSC::Structure **)(v46 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v42;
  *((_QWORD *)Allocator + 1) = &qword_1EE335E28;
  *((_QWORD *)Allocator + 2) = v44;
  v55 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v44 + 32), (uint64_t *)v51, (uint64_t *)&v55);
  if (v55)
    *((_QWORD *)v55 + 1) = 3;
  return v42;
}

_QWORD *WebCore::JSInspectorFrontendHost::destroy(WebCore::JSInspectorFrontendHost *this, JSC::JSCell *a2)
{
  _QWORD *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;

  result = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v4 = (unsigned int *)result[2];
      result[2] = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = result;
          WTF::fastFree((WTF *)v4, a2);
          result = v7;
        }
      }
      return (_QWORD *)WTF::fastFree((WTF *)result, a2);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSInspectorFrontendHost::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsInspectorFrontendHost_supportsShowCertificate()
{
  return 7;
}

uint64_t WebCore::jsInspectorFrontendHost_isRemote(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v2)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
    return 7;
  return 6;
}

uint64_t WebCore::jsInspectorFrontendHost_localizedStringsURL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 56);
LABEL_9:
    v7 = *(_QWORD *)(v5 + 41968);
LABEL_10:
    v11 = 0;
    if (!v4)
      return v7;
    goto LABEL_16;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 72))(&v11);
  v4 = v11;
  v5 = *(_QWORD *)(a1 + 56);
  if (!v11)
    goto LABEL_9;
  v6 = *((_DWORD *)v11 + 1);
  if (!v6)
    goto LABEL_9;
  if (v6 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v9 = *(unsigned __int16 *)v8;
      if (v9 > 0xFF)
        goto LABEL_5;
      v9 = v9;
    }
    v7 = *(_QWORD *)(v5 + 8 * v9 + 42216);
    goto LABEL_15;
  }
LABEL_5:
  v7 = *(_QWORD *)(v5 + 64760);
  if (!v7 || v11 != *(WTF::StringImpl **)(v7 + 8))
  {
    v7 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_10;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v7;
}

uint64_t WebCore::jsInspectorFrontendHost_backendCommandsURL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 56);
LABEL_9:
    v7 = *(_QWORD *)(v5 + 41968);
LABEL_10:
    v11 = 0;
    if (!v4)
      return v7;
    goto LABEL_16;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 80))(&v11);
  v4 = v11;
  v5 = *(_QWORD *)(a1 + 56);
  if (!v11)
    goto LABEL_9;
  v6 = *((_DWORD *)v11 + 1);
  if (!v6)
    goto LABEL_9;
  if (v6 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v9 = *(unsigned __int16 *)v8;
      if (v9 > 0xFF)
        goto LABEL_5;
      v9 = v9;
    }
    v7 = *(_QWORD *)(v5 + 8 * v9 + 42216);
    goto LABEL_15;
  }
LABEL_5:
  v7 = *(_QWORD *)(v5 + 64760);
  if (!v7 || v11 != *(WTF::StringImpl **)(v7 + 8))
  {
    v7 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_10;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v7;
}

unint64_t WebCore::jsInspectorFrontendHost_inspectionLevel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
    if ((v3 & 0x80000000) != 0)
      return COERCE__INT64((double)v3) + 0x2000000000000;
  }
  else
  {
    v3 = 1;
  }
  return v3 | 0xFFFE000000000000;
}

unint64_t WebCore::jsInspectorFrontendHost_debuggableInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;

  WebCore::InspectorFrontendHost::debuggableInfo(*(WebCore::InspectorFrontendHost **)(a2 + 24), (uint64_t)&v48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v5 = 8 * *(unsigned __int8 *)(v4 + 14);
  v6 = JSC::allocateCell<JSC::JSFinalObject>(v3, v5 + 16);
  v7 = *(_DWORD *)(v4 + 8);
  *(_DWORD *)v6 = v4 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  bzero((void *)(v6 + 16), v5);
  if (*(_BYTE *)(v3 + 755))
    __dmb(0xAu);
  if (!v48)
    goto LABEL_13;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *((_DWORD *)v48 + 1);
  if (v9)
  {
    if (v9 != 1)
    {
LABEL_6:
      v10 = *(_QWORD *)(v8 + 64760);
      if (!v10 || v48 != *(WTF::StringImpl **)(v10 + 8))
        v10 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v36 = (unsigned __int8 *)*((_QWORD *)v48 + 1);
    if ((*((_BYTE *)v48 + 16) & 4) != 0)
    {
      v37 = *v36;
    }
    else
    {
      v44 = *(unsigned __int16 *)v36;
      if (v44 > 0xFF)
        goto LABEL_6;
      v37 = v44;
    }
    v10 = *(_QWORD *)(v8 + 8 * v37 + 42216);
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    goto LABEL_105;
  WTF::AtomStringImpl::addLiteral();
  v11 = v53;
  v53 = 0;
  v54 = v6;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v6, (JSC::VM *)v3, (unint64_t)v11, v10, 0, (uint64_t)&v53);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_13:
  if (!v50)
    goto LABEL_23;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *((_DWORD *)v50 + 1);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_16:
      v15 = *(_QWORD *)(v13 + 64760);
      if (!v15 || v50 != *(WTF::StringImpl **)(v15 + 8))
        v15 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_19;
    }
    v38 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
    if ((*((_BYTE *)v50 + 16) & 4) != 0)
    {
      v39 = *v38;
    }
    else
    {
      v45 = *(unsigned __int16 *)v38;
      if (v45 > 0xFF)
        goto LABEL_16;
      v39 = v45;
    }
    v15 = *(_QWORD *)(v13 + 8 * v39 + 42216);
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 41968);
  }
LABEL_19:
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    goto LABEL_105;
  WTF::AtomStringImpl::addLiteral();
  v16 = v53;
  v53 = 0;
  v54 = v6;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v6, (JSC::VM *)v3, (unint64_t)v16, v15, 0, (uint64_t)&v53);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_23:
  if (v52)
    v18 = 7;
  else
    v18 = 6;
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    goto LABEL_105;
  WTF::AtomStringImpl::addLiteral();
  v19 = v53;
  v53 = 0;
  v54 = v6;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v6, (JSC::VM *)v3, (unint64_t)v19, v18, 0, (uint64_t)&v53);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (!v49)
    goto LABEL_40;
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *((_DWORD *)v49 + 1);
  if (v22)
  {
    if (v22 != 1)
    {
LABEL_33:
      v23 = *(_QWORD *)(v21 + 64760);
      if (!v23 || v49 != *(WTF::StringImpl **)(v23 + 8))
        v23 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_36;
    }
    v40 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
    if ((*((_BYTE *)v49 + 16) & 4) != 0)
    {
      v41 = *v40;
    }
    else
    {
      v46 = *(unsigned __int16 *)v40;
      if (v46 > 0xFF)
        goto LABEL_33;
      v41 = v46;
    }
    v23 = *(_QWORD *)(v21 + 8 * v41 + 42216);
  }
  else
  {
    v23 = *(_QWORD *)(v21 + 41968);
  }
LABEL_36:
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    goto LABEL_105;
  WTF::AtomStringImpl::addLiteral();
  v24 = v53;
  v53 = 0;
  v54 = v6;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v6, (JSC::VM *)v3, (unint64_t)v24, v23, 0, (uint64_t)&v53);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_40:
  v26 = v51;
  if (!v51)
    goto LABEL_50;
  v27 = *(_QWORD *)(a1 + 56);
  v28 = *((_DWORD *)v51 + 1);
  if (!v28)
  {
    v29 = *(_QWORD *)(v27 + 41968);
    goto LABEL_46;
  }
  if (v28 == 1)
  {
    v42 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
    if ((*((_BYTE *)v51 + 16) & 4) != 0)
    {
      v43 = *v42;
    }
    else
    {
      v47 = *(unsigned __int16 *)v42;
      if (v47 > 0xFF)
        goto LABEL_43;
      v43 = v47;
    }
    v29 = *(_QWORD *)(v27 + 8 * v43 + 42216);
    goto LABEL_46;
  }
LABEL_43:
  v29 = *(_QWORD *)(v27 + 64760);
  if (!v29 || v51 != *(WTF::StringImpl **)(v29 + 8))
    v29 = JSC::jsStringWithCacheSlowCase();
LABEL_46:
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
  {
LABEL_105:
    v6 = 0;
    goto LABEL_50;
  }
  WTF::AtomStringImpl::addLiteral();
  v30 = v53;
  v53 = 0;
  v54 = v6;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v6, (JSC::VM *)v3, (unint64_t)v30, v29, 0, (uint64_t)&v53);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v26);
    else
      *(_DWORD *)v30 -= 2;
  }
LABEL_50:
  v31 = v51;
  v51 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v26);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v50;
  v50 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v26);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v49;
  v49 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v26);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v48;
  v48 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v26);
    else
      *(_DWORD *)v34 -= 2;
  }
  return v6;
}

uint64_t WebCore::jsInspectorFrontendHost_platform(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

uint64_t WebCore::jsInspectorFrontendHost_platformVersionName(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *MEMORY[0x1E0CBF738];
  if (!*MEMORY[0x1E0CBF738])
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::jsInspectorFrontendHost_supportsDiagnosticLogging(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v2)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 312))(v2))
    return 7;
  return 6;
}

uint64_t WebCore::jsInspectorFrontendHost_supportsWebExtensions()
{
  return 6;
}

uint64_t WebCore::JSInspectorFrontendHostOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSInspectorFrontendHostOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (unsigned int *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::InspectorFrontendHost>(int a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  JSC::JSCell *v25;
  unint64_t v26;
  unint64_t SlowCase;
  int v28;
  uint64_t i;
  char *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::Structure *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  JSC::Structure *Allocator;
  unint64_t v62;
  unint64_t v63;
  WTF::StringImpl *v64[6];
  int v65;
  int v66;
  int v67;
  JSC::Structure *v68;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSInspectorFrontendHost::s_info
         + ~((_QWORD)&WebCore::JSInspectorFrontendHost::s_info << 32)) ^ (((unint64_t)&WebCore::JSInspectorFrontendHost::s_info
                                                                         + ~((_QWORD)&WebCore::JSInspectorFrontendHost::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSInspectorFrontendHost::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_36;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSInspectorFrontendHost::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v64[0]) = 23;
  v26 = JSC::Structure::create((uint64_t *)v24, a2, v25);
  *(_DWORD *)(v26 + 16) |= 0x80000u;
  SlowCase = *(_QWORD *)(v24 + 38904);
  if (SlowCase >= *(_QWORD *)(v24 + 38912))
  {
    SlowCase = *(_QWORD *)(v24 + 38920);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_17;
    }
    v63 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = SlowCase + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = SlowCase + (int)v63;
  }
  *(_QWORD *)(v24 + 38904) = SlowCase + 16;
LABEL_17:
  *(_DWORD *)SlowCase = 0;
  v28 = *(_DWORD *)(v26 + 8);
  *(_DWORD *)SlowCase = v26 >> 4;
  *(_DWORD *)(SlowCase + 4) = v28;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, (JSC::VM *)v24);
  for (i = 0; i != 290; i += 5)
  {
    v30 = (&WebCore::JSInspectorFrontendHostPrototypeTableValues)[i + 1];
    if (v30)
    {
      if (v30 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v24 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v31 = v64[0];
      JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSInspectorFrontendHost::s_info, (unint64_t *)v64, (uint64_t)&(&WebCore::JSInspectorFrontendHostPrototypeTableValues)[i], (unsigned __int8 *)SlowCase);
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
  }
  v33 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v64);
  v36 = v34;
  v37 = v64[0];
  v64[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v67 = *(_DWORD *)SlowCase;
  v68 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v65 = 0;
  v66 = v39;
  v64[0] = (WTF::StringImpl *)&v66;
  v64[1] = (WTF::StringImpl *)SlowCase;
  v64[2] = (WTF::StringImpl *)v24;
  v64[3] = (WTF::StringImpl *)&v67;
  v64[4] = (WTF::StringImpl *)&v68;
  v64[5] = (WTF::StringImpl *)&v65;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v24, v33, 6, (uint64_t)v64);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, v24, v65, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v64[0]) = 23;
  v40 = JSC::Structure::create((uint64_t *)v24, a2, (JSC::JSCell *)SlowCase);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v40, (uint64_t)&WebCore::JSInspectorFrontendHost::s_info);
LABEL_36:
  v41 = *(_QWORD *)(a2 + 56);
  v42 = *(_QWORD *)(v41 + 41456);
  v43 = *(_QWORD *)(v42 + 23536);
  v44 = *(_QWORD **)(v43 + 5704);
  if (v44)
    goto LABEL_56;
  v45 = *(_QWORD *)(v42 + 22648);
  if (__ldaxr((unsigned __int8 *)v45))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v45))
  {
    goto LABEL_41;
  }
  MEMORY[0x19AEA534C](v45);
LABEL_41:
  v47 = *(_QWORD *)(v45 + 2824);
  if (!*(_QWORD *)(v47 + 5704))
  {
    v48 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v64, "IsoSpace T");
    v68 = 0;
    MEMORY[0x19AEA3204](v48, v64, v41 + 192, v41 + 1872, 32, 8, &v68);
    v50 = (uint64_t)v68;
    v68 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v51 = v64[0];
    v64[0] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
        WTF::fastFree(v51, v49);
      else
        --*(_DWORD *)v51;
    }
    v52 = *(_QWORD *)(v47 + 5704);
    *(_QWORD *)(v47 + 5704) = v48;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v53 = *(_QWORD *)(v43 + 5704);
  *(_QWORD *)(v43 + 5704) = v44;
  if (v53)
  {
    v54 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v54, v55);
  }
  v56 = __ldxr((unsigned __int8 *)v45);
  if (v56 != 1)
  {
    __clrex();
    goto LABEL_55;
  }
  if (__stlxr(0, (unsigned __int8 *)v45))
LABEL_55:
    WTF::Lock::unlockSlow((WTF::Lock *)v45);
LABEL_56:
  v14 = v44[3];
  if (v14 >= v44[4])
  {
    v14 = v44[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_58;
    }
    v62 = *(_QWORD *)(v14 + 8) ^ v44[6];
    v44[4] = v14 + HIDWORD(v62);
    v44[5] = v14 + (int)v62;
  }
  v44[3] = v14 + 32;
LABEL_58:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v41 + 755))
    __dmb(0xAu);
  v57 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335E40 & 1) == 0)
  {
    qword_1EE335E38 = (uint64_t)&off_1E32A8290;
    byte_1EE335E40 = 1;
  }
  v64[0] = a3;
  if ((v14 & 8) != 0)
    v58 = (v14 - 112) | 1;
  else
    v58 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v58 & 1) != 0)
    v59 = v58 + 47;
  else
    v59 = *(_QWORD *)v58 + 32;
  Allocator = *(JSC::Structure **)(v59 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v59 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335E38;
  *((_QWORD *)Allocator + 2) = v57;
  v68 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v57 + 32), (uint64_t *)v64, (uint64_t *)&v68);
  if (v68)
    *((_QWORD *)v68 + 1) = 3;
  return v14;
}

uint64_t WebCore::JSIntersectionObserver::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return (uint64_t)WebCore::JSIntersectionObserver::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSIntersectionObserver>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::ScriptExecutionContext *v13;
  _QWORD *v14;
  _QWORD *Allocator;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  JSC::JSCell *v19;
  JSC::VM *v20;
  uint64_t Object;
  JSC::Structure *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSC::JSGlobalObject *v35;
  int v36;
  int v37;
  int v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  int v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  JSC::VM *v52;
  uint64_t v53;
  WebCore::IntersectionObserver *v54;
  JSCell *v55;
  JSC::JSCell *v56;
  JSC::JSGlobalObject *v57;
  JSC::JSObject *v58;
  JSC::JSGlobalObject *v59;
  uint64_t v60;
  JSC::VM *v62;
  WTF::StringImpl *v63;
  int v64;
  int v65;
  bmalloc::api *v66;
  void *v67;
  uint64_t v68;
  uint64_t FunctionRealm;
  JSC::JSObject *v70;
  JSC::Structure *v71;
  unint64_t SubclassStructure;
  JSValue v73;
  WTF::StringImpl *v75;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v77;
  uint64_t v78;
  WebCore::JSIntersectionObserver *v79;
  JSC::JSCell *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  JSC::VM *v84;
  WTF::StringImpl *v85[2];
  int v86;
  uint64_t v87;
  int v88;
  WebCore::IntersectionObserver *v89;
  WTF::StringImpl *v90;
  unsigned __int8 v91;
  WTF::StringImpl *v92;
  _QWORD v93[2];
  int v94;
  JSC::VM *v95;
  _QWORD *v96;
  uint64_t v97;
  char v98[8];
  int v99;
  char v100;
  WTF::StringImpl *v101;
  _BYTE v102[16];
  int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  unsigned __int8 v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v84 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v73.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v73);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v84, (uint64_t)"IntersectionObserver", 21);
  v8 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CB4CB4);
  }
  v9 = *(_QWORD *)(a2 + 48);
  v81 = v5;
  v10 = *(WebCore::JSDOMGlobalObject **)(v5 + 40);
  v89 = (WebCore::IntersectionObserver *)*((_QWORD *)this + 7);
  if ((v9 & 0xFFFE000000000002) != 0
    || (v11 = *(unsigned __int8 *)(v9 + 5), v11 < 0x17)
    || (v11 & 0xFE) != 0x1A
    && ((*(_BYTE *)(v9 + 6) & 4) == 0
     || ((*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0x38))(&v97, v9), !(_BYTE)v97)))
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v89, 0, "callback", 9, "IntersectionObserver", 21, v7, 0, 0);
    v55 = 0;
    v60 = 1;
    v83 = 1;
    goto LABEL_116;
  }
  v12 = WTF::fastMalloc((WTF *)0x20);
  v13 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  *(_DWORD *)(v12 + 16) = 1;
  *(_QWORD *)v12 = &off_1E33A18C0;
  *(_QWORD *)(v12 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v12, v13);
  *(_QWORD *)v12 = &off_1E32A73B0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  Allocator = 0;
  if (v10)
  {
    if ((v10 & 8) != 0)
      v77 = ((unint64_t)v10 - 112) | 1;
    else
      v77 = (unint64_t)v10 & 0xFFFFFFFFFFFFC000;
    if ((v77 & 1) != 0)
      v78 = v77 + 47;
    else
      v78 = *(_QWORD *)v77 + 32;
    Allocator = *(_QWORD **)(v78 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v78 + 16) = *Allocator;
    *Allocator = v10;
    Allocator[1] = 0;
    Allocator[2] = 0;
  }
  v14[1] = &off_1E32268A0;
  *v14 = Allocator;
  if ((v9 & 8) != 0)
    v16 = (v9 - 112) | 1;
  else
    v16 = v9 & 0xFFFFFFFFFFFFC000;
  if ((v16 & 1) != 0)
    v17 = v16 + 47;
  else
    v17 = *(_QWORD *)v16 + 32;
  v18 = *(_QWORD **)(v17 + 16);
  if (!v18)
    v18 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v17 + 16) = *v18;
  *v18 = v9;
  v18[1] = v14 + 1;
  v18[2] = v12;
  v14[2] = v18;
  *(_QWORD *)(v12 + 24) = v14;
  v82 = v12;
  v83 = 0;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v95 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_26;
  }
  v19 = *(JSC::JSCell **)(a2 + 56);
  v20 = (JSC::VM *)*((_QWORD *)this + 7);
  v95 = v20;
  if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_26:
    v22 = 0;
    LOBYTE(v89) = 0;
    v91 = 0;
    v94 = 0;
    v26 = 1;
    v92 = 0;
    v93[0] = 0;
    goto LABEL_27;
  }
  if (((unint64_t)v19 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v19)) == 0)
  {
    JSC::throwTypeError();
    v55 = 0;
    v44 = 1;
    v104 = 1;
    goto LABEL_114;
  }
  v22 = (JSC::Structure *)Object;
  LOBYTE(v89) = 0;
  v91 = 0;
  v94 = 0;
  v92 = 0;
  v93[0] = 0;
  WTF::AtomStringImpl::addLiteral();
  v23 = v110;
  v25 = JSC::JSObject::get(v22, this, (unint64_t)v110);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
  {
    v104 = 1;
    goto LABEL_78;
  }
  if ((v25 | 8) == 0xA)
  {
    v26 = 0;
LABEL_27:
    v27 = 0;
    LOBYTE(v111) = 0;
    v113 = 0;
    v114 = 0;
    LOBYTE(v105) = 0;
    v107 = 0;
    goto LABEL_28;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Element>,WebCore::IDLInterface<WebCore::Document>>>::convert((uint64_t)&v105, (uint64_t)this, v25);
  WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>((uint64_t)&v110, (uint64_t)&v105);
  if (v108 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32AC3E8[v108])(v85, &v106);
  v42 = v114;
  if (!v114)
  {
    v27 = v113;
    LOBYTE(v105) = 0;
    v107 = 0;
    if (v113)
    {
      LODWORD(v106) = -1;
      v64 = v112;
      if (v112 != -1)
      {
        ((void (*)(WTF::StringImpl **, unint64_t *, WTF::StringImpl **))off_1E32AB910[v112])(v85, &v105, &v111);
        LODWORD(v106) = v64;
      }
      v26 = 0;
      v27 = 1;
      v107 = 1;
    }
    else
    {
      v26 = 0;
    }
LABEL_28:
    if (v91 != v27)
    {
      if (v91)
      {
        if ((_DWORD)v90 != -1)
          ((void (*)(WTF::StringImpl **, WebCore::IntersectionObserver **))off_1E32AB900[v90])(v85, &v89);
        LODWORD(v90) = -1;
        v91 = 0;
      }
      else
      {
        LOBYTE(v89) = 0;
        LODWORD(v90) = -1;
        v65 = v106;
        if ((_DWORD)v106 != -1)
        {
          ((void (*)(WTF::StringImpl **, WebCore::IntersectionObserver **, unint64_t *))off_1E32AB910[v106])(v85, &v89, &v105);
          LODWORD(v90) = v65;
        }
        v91 = 1;
      }
      goto LABEL_37;
    }
    if (!v91)
      goto LABEL_40;
    if ((_DWORD)v90 == -1)
    {
      if ((_DWORD)v106 == -1)
        goto LABEL_37;
    }
    else if ((_DWORD)v106 == -1)
    {
      ((void (*)(WTF::StringImpl **, WebCore::IntersectionObserver **))off_1E32AB900[v90])(v85, &v89);
      LODWORD(v90) = -1;
      goto LABEL_37;
    }
    v85[0] = (WTF::StringImpl *)&v89;
    ((void (*)(WTF::StringImpl **, WebCore::IntersectionObserver **, unint64_t *))off_1E32AB920[v106])(v85, &v89, &v105);
LABEL_37:
    if (v107 && (_DWORD)v106 != -1)
      ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32AB900[v106])(v85, &v105);
LABEL_40:
    if (v26)
      goto LABEL_46;
    WTF::AtomStringImpl::addLiteral();
    v28 = (WTF::StringImpl *)v105;
    v30 = JSC::JSObject::get(v22, this, v105);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
    {
      v104 = 1;
      goto LABEL_75;
    }
    if (v30 == 10)
    {
LABEL_46:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v31 = (WTF::StringImpl *)v105;
    }
    else
    {
      v105 = v30;
      v62 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v30 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v30 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v105, this);
      }
      else
      {
        v63 = *(WTF::StringImpl **)(v30 + 8);
        if ((v63 & 1) != 0)
          v63 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, this);
        if (v63)
          *(_DWORD *)v63 += 2;
        v85[0] = v63;
      }
      if (*((_DWORD *)v62 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v62);
        v31 = v85[0];
        if (hasExceptionsAfterHandlingTraps)
        {
          v41 = 1;
          v88 = 1;
          v85[0] = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v29);
            else
              *(_DWORD *)v31 -= 2;
          }
          v104 = 1;
          goto LABEL_74;
        }
      }
      else
      {
        v31 = v85[0];
      }
    }
    v88 = 0;
    v87 = 0;
    v32 = v92;
    v92 = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v29);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (v26)
      goto LABEL_60;
    WTF::AtomStringImpl::addLiteral();
    v33 = (WTF::StringImpl *)v105;
    v35 = (JSC::JSGlobalObject *)JSC::JSObject::get(v22, this, v105);
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v34);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
    {
      v104 = 1;
      goto LABEL_73;
    }
    if (v35 == (JSC::JSGlobalObject *)10)
    {
LABEL_60:
      v37 = 0;
      v106 = 0;
      v108 = 0;
      v109 = 0;
      LOBYTE(v85[0]) = 0;
      v86 = -1;
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLSequence<WebCore::IDLDouble>>>::convert((uint64_t)&v105, this, v35);
      v36 = v109;
      if (v109)
      {
        v104 = 1;
LABEL_71:
        if (v36 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32AB960[v36])(v85, &v106);
LABEL_73:
        v41 = v88;
        if (v88 == -1)
        {
LABEL_75:
          v42 = v114;
          goto LABEL_76;
        }
LABEL_74:
        ((void (*)(unint64_t *, uint64_t *))off_1E32A90E0[v41])(&v105, &v87);
        goto LABEL_75;
      }
      v37 = v108;
      LOBYTE(v85[0]) = 0;
      v86 = -1;
      if (v108 == -1)
      {
        if (v94 != -1)
        {
          ((void (*)(_QWORD **, _QWORD *))off_1E32AB930[v94])(&v96, v93);
          v94 = -1;
        }
        goto LABEL_62;
      }
    }
    ((void (*)(_QWORD **, WTF::StringImpl **, uint64_t *))off_1E32AB940[v37])(&v96, v85, &v106);
    v86 = v37;
    v96 = v93;
    ((void (*)(_QWORD **, _QWORD *, WTF::StringImpl **))off_1E32AB950[v37])(&v96, v93, v85);
LABEL_62:
    if (v86 != -1)
      ((void (*)(_QWORD **, WTF::StringImpl **))off_1E32AB930[v86])(&v96, v85);
    v98[0] = 0;
    v100 = 0;
    if (v91)
    {
      v99 = -1;
      v38 = (int)v90;
      if ((_DWORD)v90 != -1)
      {
        ((void (*)(WTF::StringImpl **, char *, WebCore::IntersectionObserver **))off_1E32AB910[v90])(v85, v98, &v89);
        v99 = v38;
      }
      v100 = 1;
    }
    v39 = v92;
    v92 = 0;
    v101 = v39;
    v102[0] = 0;
    v103 = -1;
    v40 = v94;
    if (v94 != -1)
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, _QWORD *))off_1E32AB940[v94])(v85, v102, v93);
      v103 = v40;
    }
    v104 = 0;
    v36 = v109;
    goto LABEL_71;
  }
  v104 = 1;
LABEL_76:
  if (v42 != -1)
    ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32AB970[v42])(&v105, &v111);
LABEL_78:
  if (v94 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E32AB930[v94])(&v110, v93);
  v94 = -1;
  v43 = v92;
  v92 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v29);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (v91 && (_DWORD)v90 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::IntersectionObserver **))off_1E32AB900[v90])(&v110, &v89);
  v44 = v104;
  if (v104)
  {
    v55 = 0;
    goto LABEL_113;
  }
  v45 = v8 - 192;
  v82 = 0;
  v105 = v12;
  LOBYTE(v89) = 0;
  v91 = 0;
  if (v100)
  {
    LODWORD(v90) = -1;
    v46 = v99;
    if (v99 != -1)
    {
      ((void (*)(WTF::StringImpl **, WebCore::IntersectionObserver **, char *))off_1E32AB910[v99])(&v110, &v89, v98);
      LODWORD(v90) = v46;
    }
    v91 = 1;
  }
  v47 = v101;
  v101 = 0;
  v92 = v47;
  LOBYTE(v93[0]) = 0;
  v94 = -1;
  v48 = v103;
  if (v103 != -1)
  {
    ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))off_1E32AB940[v103])(&v110, v93, v102);
    v94 = v48;
  }
  WebCore::IntersectionObserver::create(v45, (uint64_t *)&v105, (uint64_t)&v89, (uint64_t)&v110);
  if (v94 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E32AB930[v94])(v85, v93);
  v94 = -1;
  v50 = v92;
  v92 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (v91 && (_DWORD)v90 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::IntersectionObserver **))off_1E32AB900[v90])(v85, &v89);
  v51 = (_DWORD *)v105;
  v105 = 0;
  if (v51)
  {
    if (v51[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51);
    else
      --v51[4];
  }
  v52 = v84;
  if (*((_DWORD *)v84 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v84) & 1) != 0)
  {
LABEL_175:
    v55 = 0;
LABEL_110:
    if (v112 != -1)
      ((void (*)(WebCore::IntersectionObserver **, WTF::StringImpl **))off_1E32AB980[v112])(&v89, &v110);
    v44 = v104;
LABEL_113:
    if (v44 == -1)
    {
LABEL_115:
      v60 = 0;
LABEL_116:
      ((void (*)(uint64_t *, uint64_t *))off_1E32AB9A0[v60])(&v97, &v82);
      return v55;
    }
LABEL_114:
    ((void (*)(WebCore::IntersectionObserver **, char *))off_1E32AB990[v44])(&v89, v98);
    goto LABEL_115;
  }
  if (!v112)
  {
    v53 = *(_QWORD *)(v81 + 40);
    v54 = v110;
    v110 = 0;
    v89 = v54;
    v55 = (JSCell *)WebCore::createWrapper<WebCore::IntersectionObserver,WebCore::IntersectionObserver>(v53, (uint64_t *)&v89);
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
      {
        WebCore::IntersectionObserver::~IntersectionObserver(v89);
        bmalloc::api::isoDeallocate(v66, v67);
      }
      else
      {
        --*(_DWORD *)v89;
      }
    }
    goto LABEL_105;
  }
  if (v112 == 1)
  {
    LOBYTE(v89) = (_BYTE)v110;
    v75 = v111;
    v111 = 0;
    v90 = v75;
    if (!*((_QWORD *)v84 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v84, (unsigned __int8 *)&v89);
      v75 = v90;
    }
    v90 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v49);
      else
        *(_DWORD *)v75 -= 2;
    }
    v55 = 0;
LABEL_105:
    if (!*((_DWORD *)v52 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v52) & 1) == 0)
    {
      v56 = *(JSC::JSCell **)(a2 + 40);
      if (((unint64_t)v56 & 0xFFFE000000000002) == 0)
      {
        v57 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v56);
        if (v57)
        {
          v59 = v57;
          if (v57 != *(JSC::JSGlobalObject **)(a2 + 24))
          {
            v68 = *((_QWORD *)this + 7);
            FunctionRealm = JSC::getFunctionRealm(this, v57, v58);
            if (!*(_DWORD *)(v68 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v68) & 1) == 0)
            {
              v70 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSIntersectionObserver>((uint64_t *)v68, FunctionRealm);
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v59, v70, v71);
              if (!*(_DWORD *)(v68 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v68) & 1) == 0)
                JSC::JSObject::setStructure(v55, (JSC::VM *)v68, SubclassStructure);
            }
          }
        }
      }
      if (!*((_DWORD *)v52 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v52) & 1) == 0)
        goto LABEL_110;
    }
    goto LABEL_175;
  }
  v79 = (WebCore::JSIntersectionObserver *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSIntersectionObserver::destroy(v79, v80);
}

WebCore::IntersectionObserver *WebCore::JSIntersectionObserver::destroy(WebCore::JSIntersectionObserver *this, JSC::JSCell *a2)
{
  WebCore::IntersectionObserver *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::IntersectionObserver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IntersectionObserver::~IntersectionObserver(result);
      return (WebCore::IntersectionObserver *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSIntersectionObserver::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIntersectionObserver::visitChildren(WebCore::JSIntersectionObserver *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = (uint64_t)WebCore::JSIntersectionObserver::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSIntersectionObserverPrototype::create(WebCore::JSIntersectionObserverPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSIntersectionObserver::s_info, (uint64_t)&WebCore::JSIntersectionObserverPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIntersectionObserver>,(WebCore::DOMConstructorID)716>(uint64_t a1, uint64_t a2)
{
  unint64_t SlowCase;
  _QWORD *v6;
  JSC::JSCell *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  JSC::JSCell *v24;
  unint64_t v25;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  SlowCase = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5728);
  if (SlowCase)
    return SlowCase;
  v6 = (_QWORD *)(a1 + 41456);
  v7 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  v8 = JSC::Structure::create((uint64_t *)a1, a2, v7);
  *(_DWORD *)(v8 + 16) |= 0x80000u;
  v9 = (_QWORD *)*v6;
  SlowCase = *(_QWORD *)(*v6 + 22768);
  if (SlowCase < *(_QWORD *)(*v6 + 22776))
    goto LABEL_4;
  SlowCase = v9[2848];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v9[2849];
    v9[2847] = SlowCase + HIDWORD(v32);
    v9[2848] = SlowCase + (int)v32;
LABEL_4:
    v9[2846] = SlowCase + 48;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v6[62] + 1768);
  v33 = 0;
  v34 = SlowCase;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)SlowCase);
  v14 = *(_QWORD *)(v6[62] + 1968);
  v33 = 0;
  v34 = SlowCase;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v6[62] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSIntersectionObserver::s_info
         + ~((_QWORD)&WebCore::JSIntersectionObserver::s_info << 32)) ^ (((unint64_t)&WebCore::JSIntersectionObserver::s_info
                                                                        + ~((_QWORD)&WebCore::JSIntersectionObserver::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSIntersectionObserver::s_info)
    {
LABEL_11:
      v23 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v23)
        goto LABEL_13;
    }
    else
    {
      v31 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v31) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v31;
        if (v22 == &WebCore::JSIntersectionObserver::s_info)
          goto LABEL_11;
      }
    }
  }
  v24 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v33) = 23;
  v25 = JSC::Structure::create((uint64_t *)a1, a2, v24);
  *(_DWORD *)(v25 + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSIntersectionObserverPrototype::create((WebCore::JSIntersectionObserverPrototype *)a1, v25, v26, v27);
  LODWORD(v33) = 23;
  v29 = JSC::Structure::create((uint64_t *)a1, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSIntersectionObserver::s_info);
LABEL_13:
  v30 = *(_QWORD *)(v23 + 48);
  v33 = 0;
  v34 = SlowCase;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5728) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsIntersectionObserverConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIntersectionObserverPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIntersectionObserver>,(WebCore::DOMConstructorID)716>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::IDLAttribute<WebCore::JSIntersectionObserver>::get<&WebCore::jsIntersectionObserver_rootGetter,(WebCore::CastedThisErrorBehavior)3>(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  v5 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  v7 = v4;
  return WebCore::JSConverterOverloader<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,true,true>::convert<WebCore::ContainerNode *>(a1, v5, &v7, a4);
}

uint64_t WebCore::jsIntersectionObserver_rootMargin(WebCore *a1, uint64_t a2, WebCore::JSIntersectionObserver *a3)
{
  return WebCore::jsIntersectionObserver_rootMarginGetter(a1, *(JSC::JSGlobalObject **)(a2 + 24), a3);
}

uint64_t WebCore::jsIntersectionObserver_thresholds(JSC *a1, uint64_t a2)
{
  return WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLDouble>>::convert<double,0ul>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(a2 + 24) + 64);
}

void WebCore::JSIntersectionObserverOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::IntersectionObserver *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::IntersectionObserver *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::IntersectionObserver **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::IntersectionObserver **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::IntersectionObserver **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::IntersectionObserver::~IntersectionObserver(v3);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::IntersectionObserver,WebCore::IntersectionObserver>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  uint64_t *v13;
  JSC::JSCell *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t SlowCase;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  int v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSIntersectionObserver::s_info
        + ~((_QWORD)&WebCore::JSIntersectionObserver::s_info << 32)) ^ (((unint64_t)&WebCore::JSIntersectionObserver::s_info
                                                                       + ~((_QWORD)&WebCore::JSIntersectionObserver::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSIntersectionObserver::s_info)
    {
LABEL_3:
      v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v12)
        goto LABEL_5;
    }
    else
    {
      v31 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v31) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v31;
        if (v11 == &WebCore::JSIntersectionObserver::s_info)
          goto LABEL_3;
      }
    }
  }
  v13 = *(uint64_t **)(a1 + 56);
  v14 = *(JSC::JSCell **)(a1 + 656);
  LODWORD(v42) = 23;
  v15 = JSC::Structure::create(v13, a1, v14);
  *(_DWORD *)(v15 + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSIntersectionObserverPrototype::create((WebCore::JSIntersectionObserverPrototype *)v13, v15, v16, v17);
  LODWORD(v42) = 23;
  v19 = JSC::Structure::create(v13, a1, v18);
  v12 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSIntersectionObserver::s_info);
LABEL_5:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 5808);
  if (v23)
    goto LABEL_6;
  v32 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v32))
  {
    __clrex();
LABEL_28:
    MEMORY[0x19AEA534C](v32);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v32))
    goto LABEL_28;
LABEL_29:
  v34 = *(_QWORD *)(v32 + 2824);
  v42 = *(_QWORD **)(v34 + 5808);
  if (!v42)
  {
    v40 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", v20 + 192, v20 + 1872, &v40, JSC::JSCell::numberOfLowerTierCells, (uint64_t *)&v41);
    v36 = (uint64_t)v41;
    v42 = v41;
    v37 = *(_QWORD *)(v34 + 5808);
    *(_QWORD *)(v34 + 5808) = v41;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = *(unsigned int *)(v32 + 2844);
    if ((_DWORD)v38 == *(_DWORD *)(v32 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v32 + 2832, (unint64_t)&v42);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v32 + 2832) + 8 * v38) = v36;
      *(_DWORD *)(v32 + 2844) = v38 + 1;
    }
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  v41 = (_QWORD *)JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSIntersectionObserver::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v22, (uint64_t *)&v41);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100]((uint64_t *)&v41);
  v35 = __ldxr((unsigned __int8 *)v32);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v32))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_6:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_7:
    v23[3] = SlowCase + 32;
    goto LABEL_8;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v39 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v39);
    v23[5] = SlowCase + (int)v39;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v12);
  v25 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v25;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v26 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335E50 & 1) == 0)
  {
    qword_1EE335E48 = (uint64_t)&off_1E3393600;
    byte_1EE335E50 = 1;
  }
  v42 = (_QWORD *)v4;
  if ((SlowCase & 8) != 0)
    v27 = (SlowCase - 112) | 1;
  else
    v27 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v27 & 1) != 0)
    v28 = v27 + 47;
  else
    v28 = *(_QWORD *)v27 + 32;
  Allocator = *(_QWORD **)(v28 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v28 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335E48;
  Allocator[2] = v26;
  v41 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), (uint64_t *)&v42, (uint64_t *)&v41);
  if (v41)
    v41[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::IntersectionObserver>(uint64_t a1, WebCore::IntersectionObserver *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WebCore::IntersectionObserver *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  bmalloc::api *v13;
  void *v14;
  WebCore::IntersectionObserver *v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WebCore::IntersectionObserver **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WebCore::IntersectionObserver **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v15 = a2;
  v11 = WebCore::createWrapper<WebCore::IntersectionObserver,WebCore::IntersectionObserver>(a1, (uint64_t *)&v15);
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::IntersectionObserver::~IntersectionObserver(v15);
      bmalloc::api::isoDeallocate(v13, v14);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  return v11;
}

uint64_t WebCore::JSIntersectionObserverCallback::handleEvent(uint64_t a1, void *a2, WebCore::JSDOMGlobalObject *a3, WebCore::IntersectionObserver *a4)
{
  uint64_t v8;
  JSC::VM *v9;
  unint64_t v10;
  objc_class *v11;
  JSValue v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Structure *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v21;
  char v22[8];
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  _BYTE v27[8];
  objc_class *v28;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v8 = **(_QWORD **)(a1 + 24);
  if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    v9 = 0;
  else
    v9 = *(JSC::VM **)v8;
  MEMORY[0x19AEA3294](v27, *((_QWORD *)v9 + 7));
  v10 = WebCore::wrap<WebCore::IntersectionObserver>((uint64_t)v9, (WebCore::IntersectionObserver *)a2);
  v22[0] = 0;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  *((_QWORD *)&v25[0] + 1) = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::IntersectionObserverEntry>>>::convert<WTF::Ref<WebCore::IntersectionObserverEntry,WTF::RawPtrTraits<WebCore::IntersectionObserverEntry>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverEntry>>,0ul>((uint64_t)v9, v9, a3);
  v23 = 0x800000001;
  v11 = (objc_class *)WebCore::wrap<WebCore::IntersectionObserver>((uint64_t)v9, a4);
  v12.super.isa = v11;
  v13 = v23;
  if ((_DWORD)v23 == HIDWORD(v23) || v24 != (WTF *)((char *)v25 + 8) && v24)
  {
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v23, v12) == 1)
      v22[0] = 1;
  }
  else
  {
    *((_QWORD *)v24 + v23) = v11;
    LODWORD(v23) = v13 + 1;
  }
  v28 = 0;
  v14 = *(uint64_t **)(a1 + 24);
  v15 = *v14;
  if (*v14 && (*(_BYTE *)(v15 + 8) & 3) == 0 && *(_QWORD *)v15)
  {
    v16 = v14[2];
    if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
      v17 = 0;
    else
      v17 = *(JSC::Structure **)v16;
    WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v15, v17, v10, (uint64_t)v22, 0, 0, (uint64_t *)&v28);
    v18 = 0;
    v12.super.isa = v28;
    if (v28)
    {
      WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v28, 0, 0, 0);
      v18 = 1;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v28 = (objc_class *)&v23;
    v21 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v28);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v19, v21);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v12.super.isa);
  MEMORY[0x19AEA32A0](v27);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v18;
}

uint64_t WebCore::JSIntersectionObserverEntry::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSIntersectionObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSIntersectionObserverEntry>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  JSC::JSCell *v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  JSCell *v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  WTF *v24;
  double v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::JSCell *v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  JSC::VM *v35;
  double v36;
  BOOL v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  JSC::VM *v52;
  double v53;
  uint64_t v54;
  void *v55;
  WebCore::JSDOMGlobalObject *v56;
  void *v57;
  JSC::JSCell *v58;
  JSC::JSGlobalObject *v59;
  JSC::JSObject *v60;
  JSC::JSGlobalObject *v61;
  WebCore::JSIntersectionObserverEntry *v62;
  JSC::JSCell **FunctionRealm;
  JSC::JSObject *v64;
  JSC::Structure *v65;
  unint64_t SubclassStructure;
  JSValue v67;
  bmalloc::api *v68;
  void *v69;
  WTF *v70;
  double v71;
  char v72;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  int *v78;
  int v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  WTF *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v94;
  uint64_t v95;
  BOOL v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  double v104;
  uint64_t v105;
  BOOL v106;
  int v107;
  WTF *v108[4];
  int v109;
  _BYTE v110[7];
  JSC::VM *v111[4];

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v67.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v67);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(JSC::JSCell **)(a2 + 48);
  v111[0] = *((JSC::VM **)a1 + 7);
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v6 & 0xFFFE000000000002) != 0)
      goto LABEL_97;
    Object = JSC::JSCell::getObject(v6);
    if (!Object)
      goto LABEL_97;
    v8 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v10 = (JSC::JSCell *)JSC::JSObject::get(v8, a1, v97);
    if ((_QWORD)v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v97, v9);
      else
        *(_DWORD *)v97 -= 2;
    }
    if (*((_DWORD *)v111[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v111[0]))
      goto LABEL_13;
    if (v10 == (JSC::JSCell *)10)
      goto LABEL_10;
    WebCore::convertDictionary<WebCore::DOMRectInit>(v10, (uint64_t)a1, (uint64_t)&v87);
    if ((_DWORD)v89)
      goto LABEL_13;
    v19 = v87;
    v20 = v88;
    WTF::AtomStringImpl::addLiteral();
    v21 = (WTF::StringImpl *)v97;
    v23 = JSC::JSObject::get(v8, a1, v97);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (*((_DWORD *)v111[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111[0]) & 1) != 0)
      goto LABEL_13;
    if (v23 == 10)
    {
      v11 = "intersectionRatio";
      v12 = "double";
      v13 = (int)a1;
      v14 = 18;
      v15 = 7;
      goto LABEL_12;
    }
    *(_QWORD *)&v97 = v23;
    v24 = (WTF *)*((_QWORD *)a1 + 7);
    v108[0] = v24;
    if (v23 >= 0xFFFE000000000000)
    {
      v25 = (double)(int)v23;
    }
    else if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v70 = v24;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v97, a1);
      v24 = v70;
      v25 = v71;
    }
    else
    {
      *(_QWORD *)&v25 = v23 - 0x2000000000000;
    }
    if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
      goto LABEL_13;
    if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      goto LABEL_13;
    }
    WTF::AtomStringImpl::addLiteral();
    v26 = (WTF::StringImpl *)v97;
    v28 = (JSC::JSCell *)JSC::JSObject::get(v8, a1, v97);
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v27);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (*((_DWORD *)v111[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111[0]) & 1) != 0)
      goto LABEL_13;
    if (v28 == (JSC::JSCell *)10)
    {
      v11 = "intersectionRect";
      v12 = "DOMRectInit";
      v13 = (int)a1;
      v14 = 17;
      goto LABEL_11;
    }
    WebCore::convertDictionary<WebCore::DOMRectInit>(v28, (uint64_t)a1, (uint64_t)v108);
    if (v109)
      goto LABEL_13;
    v29 = v108[0];
    v30 = v108[1];
    v31 = v108[2];
    v86 = v108[3];
    WTF::AtomStringImpl::addLiteral();
    v32 = (WTF::StringImpl *)v97;
    v34 = JSC::JSObject::get(v8, a1, v97);
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v33);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (*((_DWORD *)v111[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111[0]) & 1) != 0)
      goto LABEL_13;
    if (v34 == 10)
    {
      v11 = "isIntersecting";
      v12 = "BOOLean";
      v13 = (int)a1;
      v14 = 15;
      v15 = 8;
      goto LABEL_12;
    }
    v35 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v34 >= 0xFFFE000000000000)
    {
      v75 = (_DWORD)v34 == 0;
      goto LABEL_154;
    }
    *(_QWORD *)&v36 = v34 - 0x2000000000000;
    if (v34 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v36 <= 0.0)
      {
        v37 = v36 < 0.0;
        goto LABEL_47;
      }
    }
    else
    {
      if ((v34 & 0xFFFE000000000002) != 0)
      {
        v37 = v34 == 7;
        goto LABEL_47;
      }
      v76 = *(unsigned __int8 *)(v34 + 5);
      if (v76 == 3)
      {
        v79 = *(_DWORD *)(v34 + 8);
LABEL_150:
        v75 = v79 == 0;
        goto LABEL_154;
      }
      if (v76 == 2)
      {
        v77 = *(_QWORD *)(v34 + 8);
        if ((v77 & 1) != 0)
          v78 = (int *)(v34 + 16);
        else
          v78 = (int *)(v77 + 4);
        v79 = *v78;
        goto LABEL_150;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v75 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_154:
        v37 = !v75;
LABEL_47:
        if (*((_DWORD *)v35 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v35) & 1) != 0)
          goto LABEL_13;
        WTF::AtomStringImpl::addLiteral();
        v38 = (WTF::StringImpl *)v97;
        v40 = JSC::JSObject::get(v8, a1, v97);
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v39);
          else
            *(_DWORD *)v38 -= 2;
        }
        if (*((_DWORD *)v111[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111[0]) & 1) != 0)
          goto LABEL_13;
        if (v40 == 10)
        {
          v11 = "rootBounds";
          v12 = "DOMRectInit";
          v13 = (int)a1;
          v14 = 11;
          goto LABEL_11;
        }
        if ((v40 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v85 = 0;
          v84 = 0;
        }
        else
        {
          WebCore::convertDictionary<WebCore::DOMRectInit>((JSC::JSCell *)v40, (uint64_t)a1, (uint64_t)&v97);
          if ((_DWORD)v99)
          {
LABEL_98:
            v16 = 0;
            v17 = 1;
            v107 = 1;
            goto LABEL_15;
          }
          v83 = *((_QWORD *)&v97 + 1);
          v84 = v97;
          v85 = 1;
          v81 = *((_QWORD *)&v98 + 1);
          v82 = v98;
        }
        WTF::AtomStringImpl::addLiteral();
        v41 = (WTF::StringImpl *)v97;
        v43 = JSC::JSObject::get(v8, a1, v97);
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v42);
          else
            *(_DWORD *)v41 -= 2;
        }
        if (*((_DWORD *)v111[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111[0]) & 1) != 0)
          goto LABEL_98;
        if (v43 == 10)
        {
          WebCore::throwRequiredMemberTypeError((int)a1, (int)v111, "target", 7, "IntersectionObserverEntryInit", 30, "Element", 8);
          goto LABEL_98;
        }
        *(_QWORD *)&v97 = *((_QWORD *)a1 + 7);
        if ((v43 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v43 + 5) == 241)
        {
          v44 = *(_QWORD *)(v43 + 24);
          if (v44)
          {
            *(_DWORD *)(v44 + 24) += 2;
            WTF::AtomStringImpl::addLiteral();
            v45 = (WTF::StringImpl *)v97;
            v47 = JSC::JSObject::get(v8, a1, v97);
            v49 = v82;
            v48 = v83;
            v50 = v81;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
              {
                WTF::StringImpl::destroy(v45, v46);
                v50 = v81;
                v49 = v82;
                v48 = v83;
              }
              else
              {
                *(_DWORD *)v45 -= 2;
              }
            }
            if (!*((_DWORD *)v111[0] + 20)
              || (v72 = JSC::VM::hasExceptionsAfterHandlingTraps(v111[0]),
                  v50 = v81,
                  v49 = v82,
                  v48 = v83,
                  (v72 & 1) == 0))
            {
              if (v47 == 10)
              {
                WebCore::throwRequiredMemberTypeError((int)a1, (int)v111, "time", 5, "IntersectionObserverEntryInit", 30, "double", 7);
              }
              else
              {
                *(_QWORD *)&v97 = v47;
                v52 = (JSC::VM *)*((_QWORD *)a1 + 7);
                v111[1] = v52;
                if (v47 >= 0xFFFE000000000000)
                {
                  v53 = (double)(int)v47;
                }
                else if (v47 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  v74 = v52;
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v97, a1);
                  v50 = v81;
                  v49 = v82;
                  v48 = v83;
                  v52 = v74;
                }
                else
                {
                  *(_QWORD *)&v53 = v47 - 0x2000000000000;
                }
                if (!*((_DWORD *)v52 + 20)
                  || (v80 = v53,
                      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v52),
                      v50 = v81,
                      v49 = v82,
                      v48 = v83,
                      v53 = v80,
                      (hasExceptionsAfterHandlingTraps & 1) == 0))
                {
                  if ((*(_QWORD *)&v53 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                  {
                    *(double *)&v97 = v53;
                    *((_QWORD *)&v97 + 1) = v84;
                    *(_QWORD *)&v98 = v48;
                    *((_QWORD *)&v98 + 1) = v49;
                    *(_QWORD *)&v99 = v50;
                    BYTE8(v99) = v85;
                    *(_DWORD *)((char *)&v99 + 9) = *(_DWORD *)v110;
                    HIDWORD(v99) = *(_DWORD *)&v110[3];
                    v100 = v19;
                    v101 = v20;
                    *(_QWORD *)&v102 = v29;
                    *((_QWORD *)&v102 + 1) = v30;
                    *(_QWORD *)&v103 = v31;
                    *((_QWORD *)&v103 + 1) = v86;
                    v104 = v25;
                    v106 = v37;
                    v107 = 0;
                    v91 = v20;
                    v92 = v102;
                    v93 = v103;
                    v87 = v97;
                    v88 = v98;
                    v89 = v99;
                    v90 = v19;
                    v105 = 0;
                    v94 = v25;
                    v95 = v44;
                    v96 = v37;
                    v54 = bmalloc::api::isoAllocate();
                    v108[0] = (WTF *)WebCore::IntersectionObserverEntry::IntersectionObserverEntry(v54, (uint64_t)&v87);
                    if (*(_DWORD *)(v44 + 24) == 2)
                    {
                      if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v44, v55);
                    }
                    else
                    {
                      *(_DWORD *)(v44 + 24) -= 2;
                    }
                    v16 = (JSCell *)WebCore::createWrapper<WebCore::IntersectionObserverEntry,WebCore::IntersectionObserverEntry>(*(JSC::VM **)(v5 + 40), v108, v56);
                    v58 = *(JSC::JSCell **)(a2 + 40);
                    if (((unint64_t)v58 & 0xFFFE000000000002) == 0)
                    {
                      v59 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v58);
                      if (v59)
                      {
                        v61 = v59;
                        if (v59 != *(JSC::JSGlobalObject **)(a2 + 24))
                        {
                          v62 = (WebCore::JSIntersectionObserverEntry *)*((_QWORD *)a1 + 7);
                          FunctionRealm = (JSC::JSCell **)JSC::getFunctionRealm(a1, v59, v60);
                          if (!*((_DWORD *)v62 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) == 0)
                          {
                            v64 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSIntersectionObserverEntry>(v62, FunctionRealm);
                            SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v61, v64, v65);
                            if (!*((_DWORD *)v62 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) == 0)
                              JSC::JSObject::setStructure(v16, v62, SubclassStructure);
                          }
                        }
                      }
                    }
                    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
                      v16 = 0;
                    if (v108[0])
                    {
                      if (*(_DWORD *)v108[0] == 1)
                      {
                        WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(v108[0], v57);
                        bmalloc::api::isoDeallocate(v68, v69);
                      }
                      else
                      {
                        --*(_DWORD *)v108[0];
                      }
                    }
                    v17 = 0;
                    goto LABEL_15;
                  }
                  JSC::throwTypeError();
                }
              }
            }
            v107 = 1;
            if (*(_DWORD *)(v44 + 24) == 2)
            {
              if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v44, v51);
            }
            else
            {
              *(_DWORD *)(v44 + 24) -= 2;
            }
            goto LABEL_14;
          }
        }
LABEL_97:
        JSC::throwTypeError();
        goto LABEL_98;
      }
    }
    v37 = 1;
    goto LABEL_47;
  }
LABEL_10:
  v11 = "boundingClientRect";
  v12 = "DOMRectInit";
  v13 = (int)a1;
  v14 = 19;
LABEL_11:
  v15 = 12;
LABEL_12:
  WebCore::throwRequiredMemberTypeError(v13, (int)v111, v11, v14, "IntersectionObserverEntryInit", 30, v12, v15);
LABEL_13:
  v107 = 1;
LABEL_14:
  v16 = 0;
  v17 = 1;
LABEL_15:
  ((void (*)(__int128 *, __int128 *))off_1E32ABAF0[v17])(&v87, &v97);
  return v16;
}

uint64_t WebCore::JSIntersectionObserverEntry::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSIntersectionObserverEntry::visitChildren(WebCore::JSIntersectionObserverEntry *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSIntersectionObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIntersectionObserverEntry>,(WebCore::DOMConstructorID)717>(uint64_t a1, uint64_t a2)
{
  unint64_t SlowCase;
  _QWORD *v5;
  JSC::JSCell *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  SlowCase = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5736);
  if (SlowCase)
    return SlowCase;
  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v18) = 67099;
  v7 = JSC::Structure::create((uint64_t *)a1, a2, v6);
  *(_DWORD *)(v7 + 16) |= 0x80000u;
  v8 = (_QWORD *)*v5;
  SlowCase = *(_QWORD *)(*v5 + 22768);
  if (SlowCase >= *(_QWORD *)(*v5 + 22776))
  {
    SlowCase = v8[2848];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_4;
    }
    v17 = *(_QWORD *)(SlowCase + 8) ^ v8[2849];
    v8[2847] = SlowCase + HIDWORD(v17);
    v8[2848] = SlowCase + (int)v17;
  }
  v8[2846] = SlowCase + 48;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v18 = 0;
  v19 = SlowCase;
  v20 = -1;
  v21 = 0x1000000;
  v22 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000001, 6, (uint64_t)&v18);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v18);
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v18 = 0;
  v19 = SlowCase;
  v20 = -1;
  v21 = 0x1000000;
  v22 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v18);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSIntersectionObserverEntry>((WebCore::JSIntersectionObserverEntry *)a1, (JSC::JSCell **)a2)+ 48);
  v18 = 0;
  v19 = SlowCase;
  v20 = -1;
  v21 = 0x1000000;
  v22 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v15, 14, (uint64_t)&v18);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5736) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsIntersectionObserverEntryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSIntersectionObserverEntryPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSIntersectionObserverEntry>,(WebCore::DOMConstructorID)717>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsIntersectionObserverEntry_time(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 8);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::jsIntersectionObserverEntry_rootBounds(uint64_t a1, uint64_t a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  bmalloc::api *v9;

  v2 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 3320);
  if (*(_DWORD *)(v4 + 48))
  {
    v9 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 16);
    v6 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v4 + 32), &v9);
    if (v6)
      return v6;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2 || (*(_BYTE *)(v5 + 8) & 3) != 0 || (v6 = *(_QWORD *)v5) == 0)
  {
LABEL_6:
    ++*((_DWORD *)v2 + 2);
    v9 = v2;
    v6 = WebCore::createWrapper<WebCore::DOMRectReadOnly,WebCore::DOMRectReadOnly>(v3, (uint64_t *)&v9);
    WTF::Ref<WebCore::DOMRectReadOnly,WTF::RawPtrTraits<WebCore::DOMRectReadOnly>,WTF::DefaultRefDerefTraits<WebCore::DOMRectReadOnly>>::~Ref(&v9, v7);
  }
  return v6;
}

uint64_t WebCore::jsIntersectionObserverEntry_boundingClientRect(uint64_t a1, uint64_t a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  bmalloc::api *v9;
  uint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;

  v2 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 24);
  if (!v2)
    return 2;
  v5 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v6 = *(_QWORD *)(v5 + 3320);
  if (*(_DWORD *)(v6 + 48))
  {
    v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v12 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 24);
    v9 = v2;
    v10 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v6 + 32), &v12);
    v2 = v9;
    v3 = v10;
    v5 = v11;
    if (v3)
      return v3;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2 || (*(_BYTE *)(v7 + 8) & 3) != 0 || (v3 = *(_QWORD *)v7) == 0)
  {
LABEL_8:
    ++*((_DWORD *)v2 + 2);
    v12 = v2;
    v3 = WebCore::createWrapper<WebCore::DOMRectReadOnly,WebCore::DOMRectReadOnly>(v5, (uint64_t *)&v12);
    WTF::Ref<WebCore::DOMRectReadOnly,WTF::RawPtrTraits<WebCore::DOMRectReadOnly>,WTF::DefaultRefDerefTraits<WebCore::DOMRectReadOnly>>::~Ref(&v12, v8);
  }
  return v3;
}

uint64_t WebCore::jsIntersectionObserverEntry_intersectionRect(uint64_t a1, uint64_t a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  bmalloc::api *v9;
  uint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;

  v2 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 32);
  if (!v2)
    return 2;
  v5 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v6 = *(_QWORD *)(v5 + 3320);
  if (*(_DWORD *)(v6 + 48))
  {
    v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v12 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 32);
    v9 = v2;
    v10 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v6 + 32), &v12);
    v2 = v9;
    v3 = v10;
    v5 = v11;
    if (v3)
      return v3;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2 || (*(_BYTE *)(v7 + 8) & 3) != 0 || (v3 = *(_QWORD *)v7) == 0)
  {
LABEL_8:
    ++*((_DWORD *)v2 + 2);
    v12 = v2;
    v3 = WebCore::createWrapper<WebCore::DOMRectReadOnly,WebCore::DOMRectReadOnly>(v5, (uint64_t *)&v12);
    WTF::Ref<WebCore::DOMRectReadOnly,WTF::RawPtrTraits<WebCore::DOMRectReadOnly>,WTF::DefaultRefDerefTraits<WebCore::DOMRectReadOnly>>::~Ref(&v12, v8);
  }
  return v3;
}

uint64_t WebCore::jsIntersectionObserverEntry_isIntersecting(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 56))
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsIntersectionObserverEntry_intersectionRatio(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsIntersectionObserverEntry_target(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 48);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSIntersectionObserverEntryOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

unint64_t WebCore::createWrapper<WebCore::IntersectionObserverEntry,WebCore::IntersectionObserverEntry>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSIntersectionObserverEntry *v14;
  JSC::JSCell *Prototype;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t SlowCase;
  WTF *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *Allocator;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSIntersectionObserverEntry::s_info
        + ~((_QWORD)&WebCore::JSIntersectionObserverEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSIntersectionObserverEntry::s_info
                                                                            + ~((_QWORD)&WebCore::JSIntersectionObserverEntry::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSIntersectionObserverEntry::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v28 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v28) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v28;
        if (v12 == &WebCore::JSIntersectionObserverEntry::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (WebCore::JSIntersectionObserverEntry *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSIntersectionObserverEntry::createPrototype(v14, (JSC::JSCell **)a1, a3);
  LODWORD(v45) = 23;
  v16 = JSC::Structure::create((uint64_t *)v14, (int)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v16, (uint64_t)&WebCore::JSIntersectionObserverEntry::s_info);
LABEL_5:
  v17 = *((_QWORD *)a1 + 7);
  v18 = *(_QWORD *)(v17 + 41456);
  v19 = *(_QWORD *)(v18 + 23536);
  v20 = *(_QWORD **)(v19 + 5816);
  if (v20)
    goto LABEL_6;
  v29 = *(_QWORD *)(v18 + 22648);
  if (__ldaxr((unsigned __int8 *)v29))
  {
    __clrex();
LABEL_28:
    MEMORY[0x19AEA534C](v29);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v29))
    goto LABEL_28;
LABEL_29:
  v31 = *(_QWORD *)(v29 + 2824);
  v43 = *(_QWORD *)(v31 + 5816);
  if (!v43)
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v36, &v45, v17 + 192, v17 + 1872, 32, 8, &v44);
    v38 = (uint64_t)v44;
    v44 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v45;
    v45 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v43 = v36;
    v40 = *(_QWORD *)(v31 + 5816);
    *(_QWORD *)(v31 + 5816) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v41 = *(unsigned int *)(v29 + 2844);
    if ((_DWORD)v41 == *(_DWORD *)(v29 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v29 + 2832, (unint64_t)&v43);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v29 + 2832) + 8 * v41) = v36;
      *(_DWORD *)(v29 + 2844) = v41 + 1;
    }
  }
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v19 + 5816);
  *(_QWORD *)(v19 + 5816) = v20;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v29);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v29))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_6:
  SlowCase = v20[3];
  if (SlowCase < v20[4])
  {
LABEL_7:
    v20[3] = SlowCase + 32;
    goto LABEL_8;
  }
  SlowCase = v20[5];
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ v20[6];
    v20[4] = SlowCase + HIDWORD(v42);
    v20[5] = SlowCase + (int)v42;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v22 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v22;
  if (*(_BYTE *)(v17 + 755))
    __dmb(0xAu);
  v23 = *((_QWORD *)a1 + 415);
  if ((byte_1EE335E60 & 1) == 0)
  {
    qword_1EE335E58 = (uint64_t)&off_1E32A82C0;
    byte_1EE335E60 = 1;
  }
  v45 = v5;
  if ((SlowCase & 8) != 0)
    v24 = (SlowCase - 112) | 1;
  else
    v24 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v24 & 1) != 0)
    v25 = v24 + 47;
  else
    v25 = *(_QWORD *)v24 + 32;
  Allocator = *(_QWORD **)(v25 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v25 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335E58;
  Allocator[2] = v23;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSInvokeEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  JSC::JSCell *v8;
  JSC::VM *v9;
  uint64_t Object;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  JSC::VM *v20;
  double v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  JSC::VM *v30;
  double v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  JSC::VM *v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  WebCore::JSDOMGlobalObject *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  JSCell *v52;
  JSC::JSCell *v53;
  JSC::JSGlobalObject *v54;
  JSC::JSObject *v55;
  JSC::JSGlobalObject *v56;
  WebCore::JSEvent *v57;
  WebCore::JSDOMGlobalObject *v58;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v60;
  JSC::Structure *v61;
  unint64_t SubclassStructure;
  _DWORD *v63;
  JSValue v65;
  int hasExceptionsAfterHandlingTraps;
  BOOL v67;
  int v68;
  uint64_t v69;
  int *v70;
  int v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  int *v80;
  int v81;
  uint64_t v82;
  JSC::VM *v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  unint64_t v92;
  int v93;
  JSC::VM *v94;
  JSC::VM *v95;
  WTF::StringImpl *v96;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v65.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v65);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v90);
  v7 = v91;
  if (!v91)
  {
    v83 = v3;
    v82 = v5;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v94 = (JSC::VM *)*((_QWORD *)a1 + 7);
    }
    else
    {
      v8 = *(JSC::JSCell **)(a2 + 56);
      v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v94 = v9;
      if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
        {
          JSC::throwTypeError();
          goto LABEL_127;
        }
        v11 = Object;
        WTF::AtomStringImpl::addLiteral();
        v12 = (WTF::StringImpl *)v92;
        v14 = JSC::JSObject::get((JSC::Structure *)v11, a1, v92);
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v13);
          else
            *(_DWORD *)v12 -= 2;
        }
        if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        {
LABEL_127:
          v52 = 0;
          LODWORD(v14) = 1;
          v89 = 1;
LABEL_107:
          ((void (*)(unint64_t *, BOOL *))off_1E32ABC40[v14])(&v92, &v84);
          v7 = v91;
          goto LABEL_108;
        }
        if (v14 == 10)
        {
          v15 = 0;
          while (1)
          {
            WTF::AtomStringImpl::addLiteral();
            v22 = (WTF::StringImpl *)v92;
            v24 = JSC::JSObject::get((JSC::Structure *)v11, a1, v92);
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v23);
              else
                *(_DWORD *)v22 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_127;
            if (v24 == 10)
            {
              v16 = 0;
              goto LABEL_35;
            }
            v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v24 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v26 = v24 - 0x2000000000000;
            if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v24 & 0xFFFE000000000002) != 0)
              {
                v16 = v24 == 7;
                goto LABEL_34;
              }
              v73 = *(unsigned __int8 *)(v24 + 5);
              if (v73 == 3)
              {
                v76 = *(_DWORD *)(v24 + 8);
                goto LABEL_195;
              }
              if (v73 == 2)
              {
                v74 = *(_QWORD *)(v24 + 8);
                if ((v74 & 1) != 0)
                  v75 = (int *)(v24 + 16);
                else
                  v75 = (int *)(v74 + 4);
                v76 = *v75;
LABEL_195:
                v72 = v76 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_197:
                  v16 = 1;
                  goto LABEL_34;
                }
                v72 = *(_QWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_207:
              v16 = !v72;
              goto LABEL_34;
            }
            if (v26 > 0.0)
              goto LABEL_197;
            v16 = v26 < 0.0;
LABEL_34:
            if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
              goto LABEL_127;
LABEL_35:
            WTF::AtomStringImpl::addLiteral();
            v27 = (WTF::StringImpl *)v92;
            v29 = JSC::JSObject::get((JSC::Structure *)v11, a1, v92);
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v28);
              else
                *(_DWORD *)v27 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_127;
            if (v29 == 10)
            {
              v17 = 0;
              goto LABEL_46;
            }
            v30 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v29 >= 0xFFFE000000000000)
            {
              v77 = (_DWORD)v29 == 0;
              goto LABEL_211;
            }
            *(_QWORD *)&v31 = v29 - 0x2000000000000;
            if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v29 & 0xFFFE000000000002) != 0)
              {
                v17 = v29 == 7;
                goto LABEL_45;
              }
              v78 = *(unsigned __int8 *)(v29 + 5);
              if (v78 == 3)
              {
                v81 = *(_DWORD *)(v29 + 8);
              }
              else
              {
                if (v78 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_201:
                    v17 = 1;
                    goto LABEL_45;
                  }
                  v77 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_211;
                }
                v79 = *(_QWORD *)(v29 + 8);
                if ((v79 & 1) != 0)
                  v80 = (int *)(v29 + 16);
                else
                  v80 = (int *)(v79 + 4);
                v81 = *v80;
              }
              v77 = v81 == 0;
LABEL_211:
              v17 = !v77;
              goto LABEL_45;
            }
            if (v31 > 0.0)
              goto LABEL_201;
            v17 = v31 < 0.0;
LABEL_45:
            if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
              goto LABEL_127;
LABEL_46:
            WTF::AtomStringImpl::addLiteral();
            v32 = (WTF::StringImpl *)v92;
            v33 = JSC::JSObject::get((JSC::Structure *)v11, a1, v92);
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v6);
              else
                *(_DWORD *)v32 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_127;
            if (v33 == 10)
            {
              v18 = 0;
LABEL_15:
              v9 = (JSC::VM *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *(_DWORD *)v9 += 2;
              v19 = 0;
              v93 = 0;
              v92 = 0;
              if ((v18 & 1) != 0)
                goto LABEL_71;
              goto LABEL_61;
            }
            v96 = (WTF::StringImpl *)v33;
            v34 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if ((v33 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v33 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v96, a1);
              goto LABEL_58;
            }
            v35 = *(JSC::VM **)(v33 + 8);
            if ((v35 & 1) != 0)
            {
              v35 = *(JSC::VM **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v33, a1);
              if (!v35)
                goto LABEL_57;
LABEL_56:
              *(_DWORD *)v35 += 2;
              goto LABEL_57;
            }
            if (v35)
              goto LABEL_56;
LABEL_57:
            v95 = v35;
LABEL_58:
            if (*((_DWORD *)v34 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v34);
              v9 = v95;
              if (hasExceptionsAfterHandlingTraps)
              {
                v93 = 1;
                v95 = 0;
                if (v9)
                {
                  if (*(_DWORD *)v9 == 2)
                    WTF::StringImpl::destroy(v9, v6);
                  else
                    *(_DWORD *)v9 -= 2;
                }
                v9 = 0;
                goto LABEL_141;
              }
            }
            else
            {
              v9 = v95;
            }
            v93 = 0;
            v92 = 0;
LABEL_61:
            WTF::AtomStringImpl::addLiteral();
            v36 = v96;
            v11 = JSC::JSObject::get((JSC::Structure *)v11, a1, (unint64_t)v96);
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v6);
              else
                *(_DWORD *)v36 -= 2;
            }
            if (!*((_DWORD *)v94 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v94) & 1) == 0)
            {
              if ((v11 | 8) == 0xA)
              {
                v19 = 0;
LABEL_71:
                LODWORD(v14) = 0;
                v84 = v15;
                v85 = v16;
                v86 = v17;
                v87 = v19;
                v88 = v9;
                v9 = 0;
                goto LABEL_72;
              }
              v96 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
              if ((v11 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v11 + 5) == 241)
              {
                v19 = *(_QWORD *)(v11 + 24);
                if (v19)
                {
                  *(_DWORD *)(v19 + 24) += 2;
                  goto LABEL_71;
                }
              }
              JSC::throwTypeError();
            }
LABEL_141:
            LODWORD(v14) = 1;
LABEL_72:
            v89 = v14;
            if (v93 != -1)
              ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32A90E0[v93])(&v96, &v92);
            if (!v9)
              goto LABEL_77;
            if (*(_DWORD *)v9 != 2)
            {
              *(_DWORD *)v9 -= 2;
LABEL_77:
              if ((_DWORD)v14)
                goto LABEL_112;
              goto LABEL_78;
            }
            WTF::StringImpl::destroy(v9, v6);
            LODWORD(v14) = v89;
            if (v89)
            {
LABEL_112:
              v52 = 0;
              goto LABEL_107;
            }
LABEL_78:
            if (!v91)
            {
              v37 = v90;
              v90 = 0;
              v38 = v84;
              v39 = v85;
              v40 = v86;
              v41 = v87;
              v42 = v88;
              v87 = 0;
              v88 = 0;
              v43 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v43);
              *(_QWORD *)(v43 + 8) = 0;
              if (v38)
                v47 = 2359298;
              else
                v47 = 2359296;
              v48 = v47 | (v37 != 0) | (4 * v39) | (8 * v40) | *(_DWORD *)(v43 + 20) & 0xFFC00000;
              *(_DWORD *)(v43 + 16) = 1;
              *(_DWORD *)(v43 + 20) = v48;
              if (v37)
              {
                *(_DWORD *)v37 += 2;
                v48 = *(_DWORD *)(v43 + 20);
              }
              *(_QWORD *)(v43 + 24) = v37;
              *(_QWORD *)(v43 + 32) = 0;
              *(_QWORD *)(v43 + 40) = 0;
              *(_QWORD *)(v43 + 48) = 0;
              *(_QWORD *)(v43 + 56) = v46;
              *(_QWORD *)(v43 + 64) = 0;
              *(_DWORD *)(v43 + 20) = v48 | 0x4000;
              *(_QWORD *)v43 = off_1E33A5320;
              if (v41)
                *(_DWORD *)(v41 + 24) += 2;
              *(_QWORD *)(v43 + 72) = v41;
              if (v42)
              {
                v49 = *(_DWORD *)v42;
                *(_DWORD *)v42 += 2;
                *(_QWORD *)(v43 + 80) = v42;
                v92 = v43;
                if (v49)
                  *(_DWORD *)v42 = v49;
                else
                  WTF::StringImpl::destroy(v42, v44);
              }
              else
              {
                *(_QWORD *)(v43 + 80) = 0;
                v92 = v43;
              }
              if (v41)
              {
                if (*(_DWORD *)(v41 + 24) == 2)
                {
                  if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v41);
                }
                else
                {
                  *(_DWORD *)(v41 + 24) -= 2;
                }
              }
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, v44);
                else
                  *(_DWORD *)v37 -= 2;
              }
              if (*(void (***)(WebCore::InvokeEvent *__hidden))v43 != off_1E33A5320)
              {
                __break(0xC471u);
                JUMPOUT(0x194CB7EECLL);
              }
              v50 = *(_QWORD *)(v82 + 40);
              v51 = WebCore::getDOMStructure<WebCore::JSInvokeEvent>(*(WebCore::JSEvent **)(v50 + 56), (JSC::VM *)v50, v45);
              v52 = (JSCell *)WebCore::JSInvokeEvent::create(v51, (JSC::VM *)v50, (uint64_t *)&v92);
              WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*(_QWORD *)(v50 + 3320), v43, (uint64_t)v52);
              v53 = *(JSC::JSCell **)(a2 + 40);
              if (((unint64_t)v53 & 0xFFFE000000000002) == 0)
              {
                v54 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v53);
                if (v54)
                {
                  v56 = v54;
                  if (v54 != *(JSC::JSGlobalObject **)(a2 + 24))
                  {
                    v57 = (WebCore::JSEvent *)*((_QWORD *)a1 + 7);
                    FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v54, v55);
                    if (!*((_DWORD *)v57 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) == 0)
                    {
                      v60 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSInvokeEvent>(v57, FunctionRealm, v58);
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v56, v60, v61);
                      if (!*((_DWORD *)v57 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) == 0)
                        JSC::JSObject::setStructure(v52, v57, SubclassStructure);
                    }
                  }
                }
              }
              if (*((_DWORD *)v83 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v83) & 1) != 0)
                v52 = 0;
              v63 = (_DWORD *)v92;
              v92 = 0;
              if (v63)
              {
                if (v63[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
                else
                  --v63[4];
              }
              LODWORD(v14) = 0;
              goto LABEL_107;
            }
            v20 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_163:
            v67 = (_DWORD)v14 == 0;
LABEL_203:
            v15 = !v67;
LABEL_23:
            if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
              goto LABEL_127;
          }
          v72 = (_DWORD)v24 == 0;
          goto LABEL_207;
        }
        v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v14 >= 0xFFFE000000000000)
          goto LABEL_163;
        *(_QWORD *)&v21 = v14 - 0x2000000000000;
        if (v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v21 <= 0.0)
          {
            v15 = v21 < 0.0;
            goto LABEL_23;
          }
        }
        else
        {
          if ((v14 & 0xFFFE000000000002) != 0)
          {
            v15 = v14 == 7;
            goto LABEL_23;
          }
          v68 = *(unsigned __int8 *)(v14 + 5);
          if (v68 == 3)
          {
            v71 = *(_DWORD *)(v14 + 8);
LABEL_191:
            v67 = v71 == 0;
            goto LABEL_203;
          }
          if (v68 == 2)
          {
            v69 = *(_QWORD *)(v14 + 8);
            if ((v69 & 1) != 0)
              v70 = (int *)(v14 + 16);
            else
              v70 = (int *)(v69 + 4);
            v71 = *v70;
            goto LABEL_191;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v67 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_203;
          }
        }
        v15 = 1;
        goto LABEL_23;
      }
    }
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    goto LABEL_15;
  }
  v52 = 0;
LABEL_108:
  if (v7 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E32A9100[v7])(&v84, &v90);
  return v52;
}

uint64_t WebCore::JSInvokeEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSInvokeEvent::createPrototype(WebCore::JSInvokeEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSInvokeEventPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSInvokeEventPrototype::create(WebCore::JSInvokeEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSInvokeEvent::s_info, &WebCore::JSInvokeEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSInvokeEvent>,(WebCore::DOMConstructorID)456>(uint64_t a1, uint64_t a2)
{
  unint64_t SlowCase;
  _QWORD *v5;
  JSC::JSCell *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  SlowCase = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3648);
  if (SlowCase)
    return SlowCase;
  v5 = (_QWORD *)(a1 + 41456);
  v6 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  LODWORD(v19) = 67099;
  v7 = JSC::Structure::create((uint64_t *)a1, a2, v6);
  *(_DWORD *)(v7 + 16) |= 0x80000u;
  v8 = (_QWORD *)*v5;
  SlowCase = *(_QWORD *)(*v5 + 22768);
  if (SlowCase >= *(_QWORD *)(*v5 + 22776))
  {
    SlowCase = v8[2848];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_4;
    }
    v18 = *(_QWORD *)(SlowCase + 8) ^ v8[2849];
    v8[2847] = SlowCase + HIDWORD(v18);
    v8[2848] = SlowCase + (int)v18;
  }
  v8[2846] = SlowCase + 48;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000001, 6, (uint64_t)&v19);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v19);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v19);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v16 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSInvokeEvent>((WebCore::JSEvent *)a1, (JSC::VM *)a2, v15) + 48);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v16, 14, (uint64_t)&v19);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3648) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsInvokeEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSInvokeEventPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSInvokeEvent>,(WebCore::DOMConstructorID)456>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsInvokeEvent_invoker(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::Element *v4;
  WebCore::JSDOMGlobalObject *v5;
  void *v6;
  unint64_t v7;
  WebCore::JSDOMGlobalObject *v9;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::InvokeEvent::invoker(*(unsigned int **)(a2 + 24), (unsigned int **)&v9);
  v5 = v9;
  if (!v9)
    return 2;
  v7 = WebCore::toJS(a1, v3, v9, v4);
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v5, v6);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  return v7;
}

uint64_t WebCore::jsInvokeEvent_action(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 80);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::JSInvokeEvent::subspaceForImpl(WebCore::JSInvokeEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3728);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3728))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3728);
    *(_QWORD *)(v8 + 3728) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3728);
  *(_QWORD *)(v3 + 3728) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::parseEnumeration<WebCore::IterationCompositeOperation>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "accumulate" && v7 == 10)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 97 || *(_QWORD *)(v6 + 1) != 0x74616C756D756363 || *(_QWORD *)(v6 + 2) != 0x6574616C756D7563)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 97)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BD1E0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968BD1F0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
    }
LABEL_38:
    v13 = &WebCore::parseEnumerationFromString<WebCore::IterationCompositeOperation>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 == "accumulate" && v7 == 10)
    goto LABEL_38;
  if (v6 == "replace" || v7 != 7)
  {
    if (v7 != 7 || v6 != "replace")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 114)
      goto LABEL_16;
    if (*(_QWORD *)(v6 + 6) != 0x6500630061006CLL || *(_QWORD *)(v6 + 2) != 0x61006C00700065)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 114 || *(_DWORD *)(v6 + 1) != 1634496613 || *(_DWORD *)(v6 + 3) != 1701011820)
  {
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_40;
  }
LABEL_30:
  v13 = &off_1E32A7908;
LABEL_39:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

void WebCore::convertDictionary<WebCore::JsonWebKey>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  unint64_t v6;
  JSC::Structure *Object;
  uint64_t v8;
  JSC::VM *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::SmallStrings *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  JSC::VM *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  JSC::VM *v42;
  double v43;
  __int16 v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  JSC::VM *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  JSC::VM *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  JSC::VM *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  JSValue v68;
  int i;
  unsigned int v70;
  JSC::JSCell *IndexQuickly;
  JSC::VM *v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  uint64_t (**v81)();
  WTF::StringImpl *v82;
  int v83;
  int v84;
  uint64_t v85;
  JSC::JSCell *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  WTF::StringImpl *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF *v100;
  unint64_t v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  JSC::VM *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  JSC::VM *v109;
  JSC::VM *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  JSC::VM *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  JSC::VM *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  JSC::VM *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  JSC::VM *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  __int128 v134;
  unint64_t v135;
  WTF::StringImpl *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  WTF::StringImpl *v145;
  char hasExceptionsAfterHandlingTraps;
  int v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  char v159;
  char v160;
  int v161;
  WTF *v162;
  BOOL v163;
  int v164;
  uint64_t v165;
  int *v166;
  int v167;
  WTF::StringImpl *v168;
  unint64_t v169;
  int v170;
  WTF::StringImpl *v171[2];
  WTF *v172;
  unint64_t v173;
  char v174;
  int v175;
  WTF::StringImpl *v176;
  __int16 v177;
  WTF::StringImpl *v178[2];
  WTF::StringImpl *v179[2];
  WTF::StringImpl *v180[2];
  WTF::StringImpl *v181[2];
  _BYTE v182[32];
  unint64_t v183;
  char v184;
  WTF::StringImpl *v185;
  JSC::VM *v186;
  JSC::VM *v187;
  WTF::StringImpl **v188;
  WTF::StringImpl *v189;
  unint64_t v190;

  v5 = (_DWORD *)*((_QWORD *)a2 + 7);
  v186 = (JSC::VM *)v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    *(_DWORD *)(a3 + 184) = 1;
    return;
  }
  v174 = 0;
  v176 = 0;
  v177 = 0;
  v184 = 0;
  v185 = 0;
  v171[0] = 0;
  v171[1] = 0;
  LOBYTE(v172) = 0;
  *(_OWORD *)v178 = 0u;
  *(_OWORD *)v179 = 0u;
  *(_OWORD *)v180 = 0u;
  *(_OWORD *)v181 = 0u;
  memset(v182, 0, 25);
  if (v6 == 2)
    goto LABEL_419;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
      WTF::StringImpl::destroy(v168, this);
    else
      *(_DWORD *)v168 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v8 == 10)
    goto LABEL_22;
  v189 = (WTF::StringImpl *)v8;
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v10 & 1) != 0)
  {
    v10 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, a2);
    if (!v10)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (v10)
LABEL_15:
    *(_DWORD *)v10 += 2;
LABEL_16:
  v188 = (WTF::StringImpl **)v10;
LABEL_17:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v11 = (WTF::StringImpl *)v188;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
    {
      v80 = 1;
      LODWORD(v169) = 1;
      v188 = 0;
      if (v11)
      {
        v147 = *(_DWORD *)v11 - 2;
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          goto LABEL_588;
        }
        goto LABEL_566;
      }
LABEL_567:
      *(_DWORD *)(a3 + 184) = 1;
LABEL_568:
      v81 = off_1E32A90E0;
      goto LABEL_208;
    }
  }
  else
  {
    v11 = (WTF::StringImpl *)v188;
  }
  LODWORD(v169) = 0;
  v168 = 0;
  v12 = v176;
  v176 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, this);
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
LABEL_22:
  WTF::AtomStringImpl::addLiteral();
  v13 = v168;
  v14 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, this);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v14 != 10)
  {
    v189 = (WTF::StringImpl *)v14;
    v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_33:
      if (*((_DWORD *)v15 + 20))
      {
        v148 = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
        v11 = (WTF::StringImpl *)v188;
        if ((v148 & 1) != 0)
        {
          v80 = 1;
          LODWORD(v169) = 1;
          v188 = 0;
          if (!v11)
            goto LABEL_567;
          v147 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          if ((_DWORD)v169)
            goto LABEL_588;
          v11 = v168;
          goto LABEL_36;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)v188;
      }
      LODWORD(v169) = 0;
LABEL_36:
      v168 = 0;
      v17 = v178[0];
      v178[0] = v11;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::destroy(v17, this);
          if ((_DWORD)v169 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v14 + 8);
    if ((v16 & 1) != 0)
    {
      v16 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v14, a2);
      if (!v16)
        goto LABEL_32;
    }
    else if (!v16)
    {
LABEL_32:
      v188 = (WTF::StringImpl **)v16;
      goto LABEL_33;
    }
    *(_DWORD *)v16 += 2;
    goto LABEL_32;
  }
LABEL_39:
  v18 = (JSC::SmallStrings *)(v5 + 10492);
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 10492));
  v19 = v168;
  v20 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, this);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v20 != 10)
  {
    v189 = (WTF::StringImpl *)v20;
    v21 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_50:
      if (*((_DWORD *)v21 + 20))
      {
        v149 = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
        v11 = (WTF::StringImpl *)v188;
        if ((v149 & 1) != 0)
        {
          v80 = 1;
          LODWORD(v169) = 1;
          v188 = 0;
          if (!v11)
            goto LABEL_567;
          v147 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          if ((_DWORD)v169)
            goto LABEL_588;
          v11 = v168;
          goto LABEL_53;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)v188;
      }
      LODWORD(v169) = 0;
LABEL_53:
      v168 = 0;
      v23 = v179[1];
      v179[1] = v11;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::destroy(v23, this);
          if ((_DWORD)v169 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
        }
        else
        {
          *(_DWORD *)v23 -= 2;
        }
      }
      goto LABEL_56;
    }
    v22 = *(_QWORD *)(v20 + 8);
    if ((v22 & 1) != 0)
    {
      v22 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, a2);
      if (!v22)
        goto LABEL_49;
    }
    else if (!v22)
    {
LABEL_49:
      v188 = (WTF::StringImpl **)v22;
      goto LABEL_50;
    }
    *(_DWORD *)v22 += 2;
    goto LABEL_49;
  }
LABEL_56:
  WTF::AtomStringImpl::addLiteral();
  v24 = v168;
  v25 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, this);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v25 != 10)
  {
    v189 = (WTF::StringImpl *)v25;
    v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v25 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v25 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_67:
      if (*((_DWORD *)v26 + 20))
      {
        v150 = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
        v11 = (WTF::StringImpl *)v188;
        if ((v150 & 1) != 0)
        {
          v80 = 1;
          LODWORD(v169) = 1;
          v188 = 0;
          if (!v11)
            goto LABEL_567;
          v147 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          if ((_DWORD)v169)
            goto LABEL_588;
          v11 = v168;
          goto LABEL_70;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)v188;
      }
      LODWORD(v169) = 0;
LABEL_70:
      v168 = 0;
      v28 = *(WTF::StringImpl **)v182;
      *(_QWORD *)v182 = v11;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, this);
          if ((_DWORD)v169 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      goto LABEL_73;
    }
    v27 = *(_QWORD *)(v25 + 8);
    if ((v27 & 1) != 0)
    {
      v27 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, a2);
      if (!v27)
        goto LABEL_66;
    }
    else if (!v27)
    {
LABEL_66:
      v188 = (WTF::StringImpl **)v27;
      goto LABEL_67;
    }
    *(_DWORD *)v27 += 2;
    goto LABEL_66;
  }
LABEL_73:
  WTF::AtomStringImpl::addLiteral();
  v29 = v168;
  v30 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, this);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v30 != 10)
  {
    v189 = (WTF::StringImpl *)v30;
    v31 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v30 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v30 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_84:
      if (*((_DWORD *)v31 + 20))
      {
        v151 = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
        v11 = (WTF::StringImpl *)v188;
        if ((v151 & 1) != 0)
        {
          v80 = 1;
          LODWORD(v169) = 1;
          v188 = 0;
          if (!v11)
            goto LABEL_567;
          v147 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          if ((_DWORD)v169)
            goto LABEL_588;
          v11 = v168;
          goto LABEL_87;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)v188;
      }
      LODWORD(v169) = 0;
LABEL_87:
      v168 = 0;
      v33 = *(WTF::StringImpl **)&v182[8];
      *(_QWORD *)&v182[8] = v11;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::destroy(v33, this);
          if ((_DWORD)v169 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      goto LABEL_90;
    }
    v32 = *(_QWORD *)(v30 + 8);
    if ((v32 & 1) != 0)
    {
      v32 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, a2);
      if (!v32)
        goto LABEL_83;
    }
    else if (!v32)
    {
LABEL_83:
      v188 = (WTF::StringImpl **)v32;
      goto LABEL_84;
    }
    *(_DWORD *)v32 += 2;
    goto LABEL_83;
  }
LABEL_90:
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 10492));
  v34 = v168;
  v35 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, this);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v35 != 10)
  {
    v189 = (WTF::StringImpl *)v35;
    v36 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v35 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v35 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_101:
      if (*((_DWORD *)v36 + 20))
      {
        v152 = JSC::VM::hasExceptionsAfterHandlingTraps(v36);
        v11 = (WTF::StringImpl *)v188;
        if ((v152 & 1) != 0)
        {
          v80 = 1;
          LODWORD(v169) = 1;
          v188 = 0;
          if (!v11)
            goto LABEL_567;
          v147 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          if ((_DWORD)v169)
            goto LABEL_588;
          v11 = v168;
          goto LABEL_104;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)v188;
      }
      LODWORD(v169) = 0;
LABEL_104:
      v168 = 0;
      v38 = v180[1];
      v180[1] = v11;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::destroy(v38, this);
          if ((_DWORD)v169 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
      goto LABEL_107;
    }
    v37 = *(_QWORD *)(v35 + 8);
    if ((v37 & 1) != 0)
    {
      v37 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v35, a2);
      if (!v37)
        goto LABEL_100;
    }
    else if (!v37)
    {
LABEL_100:
      v188 = (WTF::StringImpl **)v37;
      goto LABEL_101;
    }
    *(_DWORD *)v37 += 2;
    goto LABEL_100;
  }
LABEL_107:
  WTF::AtomStringImpl::addLiteral();
  v39 = v168;
  v41 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v40);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v41 == 10)
    goto LABEL_118;
  v42 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (v41 >= 0xFFFE000000000000)
  {
    v163 = (_DWORD)v41 == 0;
    goto LABEL_605;
  }
  *(_QWORD *)&v43 = v41 - 0x2000000000000;
  if (v41 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v43 <= 0.0)
    {
      v44 = v43 < 0.0;
      goto LABEL_116;
    }
  }
  else
  {
    if ((v41 & 0xFFFE000000000002) != 0)
    {
      v44 = v41 == 7;
      goto LABEL_116;
    }
    v164 = *(unsigned __int8 *)(v41 + 5);
    if (v164 == 3)
    {
      v167 = *(_DWORD *)(v41 + 8);
LABEL_601:
      v163 = v167 == 0;
      goto LABEL_605;
    }
    if (v164 == 2)
    {
      v165 = *(_QWORD *)(v41 + 8);
      if ((v165 & 1) != 0)
        v166 = (int *)(v41 + 16);
      else
        v166 = (int *)(v165 + 4);
      v167 = *v166;
      goto LABEL_601;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v163 = *(_QWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_605:
      v44 = !v163;
      goto LABEL_116;
    }
  }
  v44 = 1;
LABEL_116:
  if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
  {
LABEL_573:
    v144 = 1;
LABEL_424:
    *(_DWORD *)(a3 + 184) = v144;
    goto LABEL_425;
  }
  v177 = v44 | 0x100;
LABEL_118:
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 10492));
  v45 = v168;
  v46 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, this);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v46 != 10)
  {
    v189 = (WTF::StringImpl *)v46;
    v47 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v46 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v46 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_129:
      if (*((_DWORD *)v47 + 20))
      {
        v153 = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
        v11 = (WTF::StringImpl *)v188;
        if ((v153 & 1) != 0)
        {
          v80 = 1;
          LODWORD(v169) = 1;
          v188 = 0;
          if (!v11)
            goto LABEL_567;
          v147 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          if ((_DWORD)v169)
            goto LABEL_588;
          v11 = v168;
          goto LABEL_132;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)v188;
      }
      LODWORD(v169) = 0;
LABEL_132:
      v168 = 0;
      v49 = v185;
      v185 = v11;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::destroy(v49, this);
          if ((_DWORD)v169 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
      goto LABEL_135;
    }
    v48 = *(_QWORD *)(v46 + 8);
    if ((v48 & 1) != 0)
    {
      v48 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v46, a2);
      if (!v48)
        goto LABEL_128;
    }
    else if (!v48)
    {
LABEL_128:
      v188 = (WTF::StringImpl **)v48;
      goto LABEL_129;
    }
    *(_DWORD *)v48 += 2;
    goto LABEL_128;
  }
LABEL_135:
  WTF::AtomStringImpl::addLiteral();
  v50 = v168;
  v52 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v51);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_573;
  if (v52 == 10)
  {
LABEL_140:
    WTF::AtomStringImpl::addLiteral();
    v53 = v168;
    v54 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, this);
      else
        *(_DWORD *)v53 -= 2;
    }
    if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      goto LABEL_573;
    if (v54 == 10)
    {
LABEL_157:
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 10492));
      v58 = v168;
      v59 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, this);
        else
          *(_DWORD *)v58 -= 2;
      }
      if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
        goto LABEL_573;
      if (v59 == 10)
      {
LABEL_174:
        WTF::AtomStringImpl::addLiteral();
        v63 = v168;
        v65 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v64);
          else
            *(_DWORD *)v63 -= 2;
        }
        if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
          goto LABEL_573;
        if (v65 == 10)
        {
LABEL_318:
          JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 10492));
          v102 = v168;
          v103 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, this);
            else
              *(_DWORD *)v102 -= 2;
          }
          if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
            goto LABEL_573;
          if (v103 == 10)
          {
LABEL_335:
            JSC::SmallStrings::singleCharacterStringRep(v18);
            v107 = v168;
            v108 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, this);
              else
                *(_DWORD *)v107 -= 2;
            }
            v109 = v186;
            if (*((_DWORD *)v186 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v186) & 1) != 0)
              goto LABEL_573;
            if (v108 == 10)
            {
LABEL_352:
              WTF::AtomStringImpl::addLiteral();
              v113 = v168;
              v114 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, this);
                else
                  *(_DWORD *)v113 -= 2;
              }
              if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
                goto LABEL_573;
              if (v114 == 10)
              {
LABEL_369:
                WTF::AtomStringImpl::addLiteral();
                v118 = v168;
                v119 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
                if (v118)
                {
                  if (*(_DWORD *)v118 == 2)
                    WTF::StringImpl::destroy(v118, this);
                  else
                    *(_DWORD *)v118 -= 2;
                }
                if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
                  goto LABEL_573;
                if (v119 == 10)
                {
LABEL_386:
                  JSC::SmallStrings::singleCharacterStringRep(v18);
                  v123 = v168;
                  v124 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
                  if (v123)
                  {
                    if (*(_DWORD *)v123 == 2)
                      WTF::StringImpl::destroy(v123, this);
                    else
                      *(_DWORD *)v123 -= 2;
                  }
                  if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
                    goto LABEL_573;
                  if (v124 == 10)
                  {
LABEL_403:
                    JSC::SmallStrings::singleCharacterStringRep(v18);
                    v128 = v168;
                    v129 = JSC::JSObject::get(Object, a2, (unint64_t)v168);
                    if (v128)
                    {
                      if (*(_DWORD *)v128 == 2)
                        WTF::StringImpl::destroy(v128, this);
                      else
                        *(_DWORD *)v128 -= 2;
                    }
                    if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
                      goto LABEL_573;
                    if (v129 == 10)
                      goto LABEL_419;
                    v168 = (WTF::StringImpl *)v129;
                    v130 = (JSC::VM *)*((_QWORD *)a2 + 7);
                    if ((v129 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v129 + 5) != 2)
                    {
                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v168, a2);
                      goto LABEL_414;
                    }
                    v131 = *(WTF::StringImpl **)(v129 + 8);
                    if ((v131 & 1) != 0)
                    {
                      v131 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v129, a2);
                      if (!v131)
                        goto LABEL_413;
                    }
                    else if (!v131)
                    {
LABEL_413:
                      v189 = v131;
LABEL_414:
                      if (*((_DWORD *)v130 + 20))
                      {
                        v161 = JSC::VM::hasExceptionsAfterHandlingTraps(v130);
                        v132 = v189;
                        if (v161)
                        {
                          v189 = 0;
                          if (v132)
                          {
                            if (*(_DWORD *)v132 == 2)
                              WTF::StringImpl::destroy(v132, this);
                            else
                              *(_DWORD *)v132 -= 2;
                          }
                          goto LABEL_573;
                        }
                      }
                      else
                      {
                        v132 = v189;
                      }
                      v133 = v179[0];
                      v179[0] = v132;
                      if (v133)
                      {
                        if (*(_DWORD *)v133 == 2)
                          WTF::StringImpl::destroy(v133, this);
                        else
                          *(_DWORD *)v133 -= 2;
                      }
LABEL_419:
                      v134 = *(_OWORD *)v171;
                      v171[0] = 0;
                      v171[1] = 0;
                      *(_OWORD *)a3 = v134;
                      *(_BYTE *)(a3 + 16) = 0;
                      *(_BYTE *)(a3 + 32) = 0;
                      if (v174)
                      {
                        *(_QWORD *)(a3 + 16) = v172;
                        v135 = v173;
                        v172 = 0;
                        v173 = 0;
                        *(_QWORD *)(a3 + 24) = v135;
                        *(_BYTE *)(a3 + 32) = 1;
                      }
                      *(_DWORD *)(a3 + 40) = v175;
                      v136 = v176;
                      v176 = 0;
                      *(_QWORD *)(a3 + 48) = v136;
                      *(_WORD *)(a3 + 56) = v177;
                      v137 = *(_OWORD *)v178;
                      v138 = *(_OWORD *)v179;
                      *(_OWORD *)v178 = 0u;
                      *(_OWORD *)v179 = 0u;
                      *(_OWORD *)(a3 + 64) = v137;
                      *(_OWORD *)(a3 + 80) = v138;
                      v139 = *(_OWORD *)v180;
                      v140 = *(_OWORD *)v181;
                      *(_OWORD *)v180 = 0u;
                      *(_OWORD *)v181 = 0u;
                      *(_OWORD *)(a3 + 96) = v139;
                      *(_OWORD *)(a3 + 112) = v140;
                      v141 = *(_OWORD *)v182;
                      *(_OWORD *)v182 = 0u;
                      *(_OWORD *)(a3 + 128) = v141;
                      v142 = *(_QWORD *)&v182[16];
                      *(_QWORD *)&v182[16] = 0;
                      *(_QWORD *)(a3 + 144) = v142;
                      *(_BYTE *)(a3 + 152) = 0;
                      *(_BYTE *)(a3 + 168) = 0;
                      if (v184)
                      {
                        *(_QWORD *)(a3 + 152) = *(_QWORD *)&v182[24];
                        v143 = v183;
                        *(_QWORD *)&v182[24] = 0;
                        v183 = 0;
                        *(_QWORD *)(a3 + 160) = v143;
                        *(_BYTE *)(a3 + 168) = 1;
                      }
                      v144 = 0;
                      v145 = v185;
                      v185 = 0;
                      *(_QWORD *)(a3 + 176) = v145;
                      goto LABEL_424;
                    }
                    *(_DWORD *)v131 += 2;
                    goto LABEL_413;
                  }
                  v189 = (WTF::StringImpl *)v124;
                  v125 = (JSC::VM *)*((_QWORD *)a2 + 7);
                  if ((v124 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v124 + 5) != 2)
                  {
                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
                    goto LABEL_397;
                  }
                  v126 = *(_QWORD *)(v124 + 8);
                  if ((v126 & 1) != 0)
                  {
                    v126 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v124, a2);
                    if (!v126)
                      goto LABEL_396;
                  }
                  else if (!v126)
                  {
LABEL_396:
                    v188 = (WTF::StringImpl **)v126;
LABEL_397:
                    if (!*((_DWORD *)v125 + 20))
                    {
                      v11 = (WTF::StringImpl *)v188;
LABEL_399:
                      LODWORD(v169) = 0;
                      goto LABEL_400;
                    }
                    v160 = JSC::VM::hasExceptionsAfterHandlingTraps(v125);
                    v11 = (WTF::StringImpl *)v188;
                    if ((v160 & 1) == 0)
                      goto LABEL_399;
                    v80 = 1;
                    LODWORD(v169) = 1;
                    v188 = 0;
                    if (!v11)
                      goto LABEL_567;
                    v147 = *(_DWORD *)v11 - 2;
                    if (*(_DWORD *)v11 != 2)
                      goto LABEL_566;
                    WTF::StringImpl::destroy(v11, this);
                    v80 = v169;
                    if (!(_DWORD)v169)
                    {
                      v11 = v168;
LABEL_400:
                      v168 = 0;
                      v127 = v178[1];
                      v178[1] = v11;
                      if (v127)
                      {
                        if (*(_DWORD *)v127 == 2)
                        {
                          WTF::StringImpl::destroy(v127, this);
                          if ((_DWORD)v169 != -1)
                            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
                        }
                        else
                        {
                          *(_DWORD *)v127 -= 2;
                        }
                      }
                      goto LABEL_403;
                    }
LABEL_588:
                    *(_DWORD *)(a3 + 184) = 1;
                    if (v80 == -1)
                      goto LABEL_425;
                    goto LABEL_568;
                  }
                  *(_DWORD *)v126 += 2;
                  goto LABEL_396;
                }
                v189 = (WTF::StringImpl *)v119;
                v120 = (JSC::VM *)*((_QWORD *)a2 + 7);
                if ((v119 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v119 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_380:
                  if (!*((_DWORD *)v120 + 20))
                  {
                    v11 = (WTF::StringImpl *)v188;
LABEL_382:
                    LODWORD(v169) = 0;
LABEL_383:
                    v168 = 0;
                    v122 = v171[1];
                    v171[1] = v11;
                    if (v122)
                    {
                      if (*(_DWORD *)v122 == 2)
                      {
                        WTF::StringImpl::destroy(v122, this);
                        if ((_DWORD)v169 != -1)
                          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
                      }
                      else
                      {
                        *(_DWORD *)v122 -= 2;
                      }
                    }
                    goto LABEL_386;
                  }
                  v159 = JSC::VM::hasExceptionsAfterHandlingTraps(v120);
                  v11 = (WTF::StringImpl *)v188;
                  if ((v159 & 1) == 0)
                    goto LABEL_382;
                  v80 = 1;
                  LODWORD(v169) = 1;
                  v188 = 0;
                  if (v11)
                  {
                    v147 = *(_DWORD *)v11 - 2;
                    if (*(_DWORD *)v11 == 2)
                    {
                      WTF::StringImpl::destroy(v11, this);
                      v80 = v169;
                      if ((_DWORD)v169)
                        goto LABEL_588;
                      v11 = v168;
                      goto LABEL_383;
                    }
LABEL_566:
                    *(_DWORD *)v11 = v147;
                    goto LABEL_567;
                  }
                  goto LABEL_567;
                }
                v121 = *(_QWORD *)(v119 + 8);
                if ((v121 & 1) != 0)
                {
                  v121 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v119, a2);
                  if (!v121)
                    goto LABEL_379;
                }
                else if (!v121)
                {
LABEL_379:
                  v188 = (WTF::StringImpl **)v121;
                  goto LABEL_380;
                }
                *(_DWORD *)v121 += 2;
                goto LABEL_379;
              }
              v189 = (WTF::StringImpl *)v114;
              v115 = (JSC::VM *)*((_QWORD *)a2 + 7);
              if ((v114 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v114 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_363:
                if (*((_DWORD *)v115 + 20))
                {
                  v158 = JSC::VM::hasExceptionsAfterHandlingTraps(v115);
                  v11 = (WTF::StringImpl *)v188;
                  if ((v158 & 1) != 0)
                  {
                    v80 = 1;
                    LODWORD(v169) = 1;
                    v188 = 0;
                    if (!v11)
                      goto LABEL_567;
                    v147 = *(_DWORD *)v11 - 2;
                    if (*(_DWORD *)v11 != 2)
                      goto LABEL_566;
                    WTF::StringImpl::destroy(v11, this);
                    v80 = v169;
                    if ((_DWORD)v169)
                      goto LABEL_588;
                    v11 = v168;
                    goto LABEL_366;
                  }
                }
                else
                {
                  v11 = (WTF::StringImpl *)v188;
                }
                LODWORD(v169) = 0;
LABEL_366:
                v168 = 0;
                v117 = *(WTF::StringImpl **)&v182[16];
                *(_QWORD *)&v182[16] = v11;
                if (v117)
                {
                  if (*(_DWORD *)v117 == 2)
                  {
                    WTF::StringImpl::destroy(v117, this);
                    if ((_DWORD)v169 != -1)
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
                  }
                  else
                  {
                    *(_DWORD *)v117 -= 2;
                  }
                }
                goto LABEL_369;
              }
              v116 = *(_QWORD *)(v114 + 8);
              if ((v116 & 1) != 0)
              {
                v116 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v114, a2);
                if (!v116)
                  goto LABEL_362;
              }
              else if (!v116)
              {
LABEL_362:
                v188 = (WTF::StringImpl **)v116;
                goto LABEL_363;
              }
              *(_DWORD *)v116 += 2;
              goto LABEL_362;
            }
            v189 = (WTF::StringImpl *)v108;
            v110 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v108 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v108 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_346:
              if (*((_DWORD *)v110 + 20))
              {
                v157 = JSC::VM::hasExceptionsAfterHandlingTraps(v110);
                v11 = (WTF::StringImpl *)v188;
                if ((v157 & 1) != 0)
                {
                  v80 = 1;
                  LODWORD(v169) = 1;
                  v188 = 0;
                  if (!v11)
                    goto LABEL_567;
                  v147 = *(_DWORD *)v11 - 2;
                  if (*(_DWORD *)v11 != 2)
                    goto LABEL_566;
                  WTF::StringImpl::destroy(v11, this);
                  v80 = v169;
                  if ((_DWORD)v169)
                    goto LABEL_588;
                  v11 = v168;
                  goto LABEL_349;
                }
              }
              else
              {
                v11 = (WTF::StringImpl *)v188;
              }
              LODWORD(v169) = 0;
LABEL_349:
              v168 = 0;
              v112 = v181[1];
              v181[1] = v11;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                {
                  WTF::StringImpl::destroy(v112, this);
                  if ((_DWORD)v169 != -1)
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
                }
                else
                {
                  *(_DWORD *)v112 -= 2;
                }
              }
              goto LABEL_352;
            }
            v111 = *(_QWORD *)(v108 + 8);
            if ((v111 & 1) != 0)
            {
              v111 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v108, a2);
              if (!v111)
                goto LABEL_345;
            }
            else if (!v111)
            {
LABEL_345:
              v188 = (WTF::StringImpl **)v111;
              goto LABEL_346;
            }
            *(_DWORD *)v111 += 2;
            goto LABEL_345;
          }
          v189 = (WTF::StringImpl *)v103;
          v104 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((v103 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v103 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_329:
            if (*((_DWORD *)v104 + 20))
            {
              v156 = JSC::VM::hasExceptionsAfterHandlingTraps(v104);
              v11 = (WTF::StringImpl *)v188;
              if ((v156 & 1) != 0)
              {
                v80 = 1;
                LODWORD(v169) = 1;
                v188 = 0;
                if (!v11)
                  goto LABEL_567;
                v147 = *(_DWORD *)v11 - 2;
                if (*(_DWORD *)v11 != 2)
                  goto LABEL_566;
                WTF::StringImpl::destroy(v11, this);
                v80 = v169;
                if ((_DWORD)v169)
                  goto LABEL_588;
                v11 = v168;
                goto LABEL_332;
              }
            }
            else
            {
              v11 = (WTF::StringImpl *)v188;
            }
            LODWORD(v169) = 0;
LABEL_332:
            v168 = 0;
            v106 = v181[0];
            v181[0] = v11;
            if (v106)
            {
              if (*(_DWORD *)v106 == 2)
              {
                WTF::StringImpl::destroy(v106, this);
                if ((_DWORD)v169 != -1)
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
              }
              else
              {
                *(_DWORD *)v106 -= 2;
              }
            }
            goto LABEL_335;
          }
          v105 = *(_QWORD *)(v103 + 8);
          if ((v105 & 1) != 0)
          {
            v105 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v103, a2);
            if (!v105)
              goto LABEL_328;
          }
          else if (!v105)
          {
LABEL_328:
            v188 = (WTF::StringImpl **)v105;
            goto LABEL_329;
          }
          *(_DWORD *)v105 += 2;
          goto LABEL_328;
        }
        v66 = *((_QWORD *)a2 + 7);
        v188 = (WTF::StringImpl **)v66;
        if ((v65 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v65 + 5) <= 0x16u)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          JSC::throwTypeError();
          v82 = v168;
          v168 = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
              WTF::StringImpl::destroy(v82, this);
            else
              *(_DWORD *)v82 -= 2;
          }
          v83 = 1;
          v170 = 1;
        }
        else
        {
          v189 = 0;
          v190 = 0;
          if (JSC::getIterationMode() == 2)
          {
            for (i = 1; ; ++i)
            {
              v70 = (*(_BYTE *)(v65 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v65 + 8) - 8) : 0;
              if (i - 1 >= v70)
                break;
              IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v65, i - 1, 0);
              if (!IndexQuickly)
                IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v65, a2, (i - 1));
              if (*(_DWORD *)(v66 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66) & 1) != 0)
                break;
              WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RsaOtherPrimesInfo>>::convert(a2, IndexQuickly, (uint64_t)&v189);
              if (*(_QWORD *)(v66 + 16))
              {
                v88 = JSC::JSArrayIterator::create();
                v89 = i | 0xFFFE000000000000;
                if (i < 0)
                  v89 = COERCE__INT64((double)i) + 0x2000000000000;
                *(_QWORD *)(v88 + 16) = v89;
                goto LABEL_289;
              }
            }
          }
          else
          {
            JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v65, v68);
            if (!*(_DWORD *)(v66 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66) & 1) == 0)
            {
              while (1)
              {
                v85 = JSC::iteratorStep();
                if (*(_QWORD *)(v66 + 16) || v85 == 6)
                  break;
                v87 = (JSC::JSCell *)JSC::iteratorValue();
                if (*(_DWORD *)(v66 + 80))
                {
                  if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66) & 1) != 0)
                    break;
                }
                WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RsaOtherPrimesInfo>>::convert(a2, v87, (uint64_t)&v189);
                if (*(_QWORD *)(v66 + 16))
                {
LABEL_289:
                  JSC::iteratorClose();
                  break;
                }
              }
            }
          }
          if (*(_DWORD *)(v66 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66) & 1) != 0)
          {
            v90 = 1;
          }
          else
          {
            v90 = 0;
            v168 = v189;
            v91 = v190;
            v189 = 0;
            v190 = 0;
            v169 = v91;
          }
          v170 = v90;
          WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v189, v67);
          v83 = v170;
          if (!v170)
          {
            v92 = v168;
            v189 = v168;
            v93 = v169;
            v94 = HIDWORD(v169);
            v168 = 0;
            v169 = 0;
            v190 = __PAIR64__(v94, v93);
            if (v184)
            {
              if (HIDWORD(v183))
              {
                v95 = 24 * HIDWORD(v183);
                v96 = (WTF::StringImpl **)(*(_QWORD *)&v182[24] + 16);
                do
                {
                  v97 = *v96;
                  *v96 = 0;
                  if (v97)
                  {
                    if (*(_DWORD *)v97 == 2)
                      WTF::StringImpl::destroy(v97, this);
                    else
                      *(_DWORD *)v97 -= 2;
                  }
                  v98 = *(v96 - 1);
                  *(v96 - 1) = 0;
                  if (v98)
                  {
                    if (*(_DWORD *)v98 == 2)
                      WTF::StringImpl::destroy(v98, this);
                    else
                      *(_DWORD *)v98 -= 2;
                  }
                  v99 = *(v96 - 2);
                  *(v96 - 2) = 0;
                  if (v99)
                  {
                    if (*(_DWORD *)v99 == 2)
                      WTF::StringImpl::destroy(v99, this);
                    else
                      *(_DWORD *)v99 -= 2;
                  }
                  v96 += 3;
                  v95 -= 24;
                }
                while (v95);
              }
              v100 = *(WTF **)&v182[24];
              if (*(_QWORD *)&v182[24])
              {
                *(_QWORD *)&v182[24] = 0;
                LODWORD(v183) = 0;
                WTF::fastFree(v100, this);
              }
              *(_QWORD *)&v182[24] = v189;
              v101 = v190;
              v189 = 0;
              v190 = 0;
              v183 = v101;
            }
            else
            {
              v189 = 0;
              v190 = 0;
              *(_QWORD *)&v182[24] = v92;
              v183 = __PAIR64__(v94, v93);
              v184 = 1;
            }
            WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v189, this);
            v84 = 1;
            v83 = v170;
LABEL_315:
            if (v83 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32ABCD8[v83])(&v189, &v168);
            if (!v84)
              goto LABEL_425;
            goto LABEL_318;
          }
        }
        v84 = 0;
        *(_DWORD *)(a3 + 184) = 1;
        goto LABEL_315;
      }
      v189 = (WTF::StringImpl *)v59;
      v60 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v59 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v59 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_168:
        if (*((_DWORD *)v60 + 20))
        {
          v155 = JSC::VM::hasExceptionsAfterHandlingTraps(v60);
          v11 = (WTF::StringImpl *)v188;
          if ((v155 & 1) != 0)
          {
            v80 = 1;
            LODWORD(v169) = 1;
            v188 = 0;
            if (!v11)
              goto LABEL_567;
            v147 = *(_DWORD *)v11 - 2;
            if (*(_DWORD *)v11 != 2)
              goto LABEL_566;
            WTF::StringImpl::destroy(v11, this);
            v80 = v169;
            if ((_DWORD)v169)
              goto LABEL_588;
            v11 = v168;
            goto LABEL_171;
          }
        }
        else
        {
          v11 = (WTF::StringImpl *)v188;
        }
        LODWORD(v169) = 0;
LABEL_171:
        v168 = 0;
        v62 = v180[0];
        v180[0] = v11;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::destroy(v62, this);
            if ((_DWORD)v169 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
        goto LABEL_174;
      }
      v61 = *(_QWORD *)(v59 + 8);
      if ((v61 & 1) != 0)
      {
        v61 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v59, a2);
        if (!v61)
          goto LABEL_167;
      }
      else if (!v61)
      {
LABEL_167:
        v188 = (WTF::StringImpl **)v61;
        goto LABEL_168;
      }
      *(_DWORD *)v61 += 2;
      goto LABEL_167;
    }
    v189 = (WTF::StringImpl *)v54;
    v55 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v54 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v54 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v189, a2);
LABEL_151:
      if (*((_DWORD *)v55 + 20))
      {
        v154 = JSC::VM::hasExceptionsAfterHandlingTraps(v55);
        v11 = (WTF::StringImpl *)v188;
        if ((v154 & 1) != 0)
        {
          v80 = 1;
          LODWORD(v169) = 1;
          v188 = 0;
          if (!v11)
            goto LABEL_567;
          v147 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v11, this);
          v80 = v169;
          if ((_DWORD)v169)
            goto LABEL_588;
          v11 = v168;
          goto LABEL_154;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)v188;
      }
      LODWORD(v169) = 0;
LABEL_154:
      v168 = 0;
      v57 = v171[0];
      v171[0] = v11;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
        {
          WTF::StringImpl::destroy(v57, this);
          if ((_DWORD)v169 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v169])(&v189, &v168);
        }
        else
        {
          *(_DWORD *)v57 -= 2;
        }
      }
      goto LABEL_157;
    }
    v56 = *(_QWORD *)(v54 + 8);
    if ((v56 & 1) != 0)
    {
      v56 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v54, a2);
      if (!v56)
        goto LABEL_150;
    }
    else if (!v56)
    {
LABEL_150:
      v188 = (WTF::StringImpl **)v56;
      goto LABEL_151;
    }
    *(_DWORD *)v56 += 2;
    goto LABEL_150;
  }
  v72 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v187 = v72;
  if ((v52 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v52 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v79 = v189;
    v189 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v78);
      else
        *(_DWORD *)v79 -= 2;
    }
    v80 = 1;
    v170 = 1;
LABEL_206:
    *(_DWORD *)(a3 + 184) = 1;
    goto LABEL_207;
  }
  v189 = 0;
  v190 = 0;
  v188 = &v189;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::CryptoKeyUsage>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, v52, (uint64_t *)&v188);
  if (!*((_DWORD *)v72 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) == 0)
  {
    v73 = v189;
    v74 = v190;
    v75 = HIDWORD(v190);
    v170 = 0;
    goto LABEL_198;
  }
  v162 = v189;
  v80 = 1;
  v170 = 1;
  if (!v189)
    goto LABEL_206;
  v189 = 0;
  LODWORD(v190) = 0;
  WTF::fastFree(v162, this);
  v80 = v170;
  if (!v170)
  {
    v73 = v168;
    v74 = v169;
    v75 = HIDWORD(v169);
LABEL_198:
    v168 = 0;
    v169 = 0;
    if (!v174)
    {
      v172 = v73;
      v173 = __PAIR64__(v75, v74);
      v174 = 1;
      goto LABEL_140;
    }
    v76 = v172;
    if (v172)
    {
      v172 = 0;
      LODWORD(v173) = 0;
      WTF::fastFree(v76, this);
      v77 = v170;
      v172 = v73;
      v173 = __PAIR64__(v75, v74);
      if (v170 == -1)
        goto LABEL_140;
    }
    else
    {
      v77 = 0;
      v172 = v73;
      v173 = __PAIR64__(v75, v74);
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32ABCC8[v77])(&v189, &v168);
    goto LABEL_140;
  }
  *(_DWORD *)(a3 + 184) = 1;
  if (v80 == -1)
    goto LABEL_425;
LABEL_207:
  v81 = off_1E32ABCC8;
LABEL_208:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))v81[v80])(&v189, &v168);
LABEL_425:
  WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v171, this);
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::JsonWebKey *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  WTF *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  JSC::VM *v89;
  unsigned int v90;
  uint64_t v91;
  objc_class *v92;
  int v93;
  BOOL v94;
  JSValue v95;
  void *v96;
  unsigned __int8 *v97;
  unsigned int v98;
  unsigned __int8 *v99;
  unsigned int v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned __int8 *v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned __int8 *v107;
  unsigned int v108;
  unsigned __int8 *v109;
  unsigned int v110;
  unsigned __int8 *v111;
  unsigned int v112;
  unsigned __int8 *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  JSC::VM *v124;
  uint64_t v125;
  uint64_t *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  unsigned __int8 *v166;
  unsigned int v167;
  unsigned __int8 *v168;
  unsigned int v169;
  unsigned __int8 *v170;
  unsigned int v171;
  unsigned __int8 *v172;
  unsigned int v173;
  unsigned __int8 *v174;
  unsigned int v175;
  unsigned __int8 *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  _QWORD *v184;
  uint64_t *v185;
  unsigned int v186;
  unsigned int v187;
  WTF *v188;
  int v189;
  WTF *v190;
  uint64_t v191;
  WTF *v192;
  _OWORD v193[4];
  uint64_t v194;
  JSC::VM *v195;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  v12 = *((_QWORD *)a3 + 6);
  if (!v12)
    goto LABEL_13;
  v13 = *((_QWORD *)this + 7);
  v14 = *(_DWORD *)(v12 + 4);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_6:
      v15 = *(_QWORD *)(v13 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
        v15 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v97 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v98 = *v97;
    }
    else
    {
      v115 = *(unsigned __int16 *)v97;
      if (v115 > 0xFF)
        goto LABEL_6;
      v98 = v115;
    }
    v15 = *(_QWORD *)(v13 + 8 * v98 + 42216);
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v16 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v16, v15, 0, (uint64_t)&v190);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_13:
  v18 = *((_QWORD *)a3 + 8);
  if (!v18)
    goto LABEL_23;
  v19 = *((_QWORD *)this + 7);
  v20 = *(_DWORD *)(v18 + 4);
  if (v20)
  {
    if (v20 != 1)
    {
LABEL_16:
      v21 = *(_QWORD *)(v19 + 64760);
      if (!v21 || v18 != *(_QWORD *)(v21 + 8))
        v21 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_19;
    }
    v99 = *(unsigned __int8 **)(v18 + 8);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      v100 = *v99;
    }
    else
    {
      v116 = *(unsigned __int16 *)v99;
      if (v116 > 0xFF)
        goto LABEL_16;
      v100 = v116;
    }
    v21 = *(_QWORD *)(v19 + 8 * v100 + 42216);
  }
  else
  {
    v21 = *(_QWORD *)(v19 + 41968);
  }
LABEL_19:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v22 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v22, v21, 0, (uint64_t)&v190);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_23:
  v24 = *((_QWORD *)a3 + 11);
  if (!v24)
    goto LABEL_33;
  v25 = *((_QWORD *)this + 7);
  v26 = *(_DWORD *)(v24 + 4);
  if (v26)
  {
    if (v26 != 1)
    {
LABEL_26:
      v27 = *(_QWORD *)(v25 + 64760);
      if (!v27 || v24 != *(_QWORD *)(v27 + 8))
        v27 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_29;
    }
    v101 = *(unsigned __int8 **)(v24 + 8);
    if ((*(_BYTE *)(v24 + 16) & 4) != 0)
    {
      v102 = *v101;
    }
    else
    {
      v117 = *(unsigned __int16 *)v101;
      if (v117 > 0xFF)
        goto LABEL_26;
      v102 = v117;
    }
    v27 = *(_QWORD *)(v25 + 8 * v102 + 42216);
  }
  else
  {
    v27 = *(_QWORD *)(v25 + 41968);
  }
LABEL_29:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v28 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v28, v27, 0, (uint64_t)&v190);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
LABEL_33:
  v30 = *((_QWORD *)a3 + 16);
  if (!v30)
    goto LABEL_43;
  v31 = *((_QWORD *)this + 7);
  v32 = *(_DWORD *)(v30 + 4);
  if (v32)
  {
    if (v32 != 1)
    {
LABEL_36:
      v33 = *(_QWORD *)(v31 + 64760);
      if (!v33 || v30 != *(_QWORD *)(v33 + 8))
        v33 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_39;
    }
    v103 = *(unsigned __int8 **)(v30 + 8);
    if ((*(_BYTE *)(v30 + 16) & 4) != 0)
    {
      v104 = *v103;
    }
    else
    {
      v118 = *(unsigned __int16 *)v103;
      if (v118 > 0xFF)
        goto LABEL_36;
      v104 = v118;
    }
    v33 = *(_QWORD *)(v31 + 8 * v104 + 42216);
  }
  else
  {
    v33 = *(_QWORD *)(v31 + 41968);
  }
LABEL_39:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v34 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v34, v33, 0, (uint64_t)&v190);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
LABEL_43:
  v36 = *((_QWORD *)a3 + 17);
  if (!v36)
    goto LABEL_53;
  v37 = *((_QWORD *)this + 7);
  v38 = *(_DWORD *)(v36 + 4);
  if (v38)
  {
    if (v38 != 1)
    {
LABEL_46:
      v39 = *(_QWORD *)(v37 + 64760);
      if (!v39 || v36 != *(_QWORD *)(v39 + 8))
        v39 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_49;
    }
    v105 = *(unsigned __int8 **)(v36 + 8);
    if ((*(_BYTE *)(v36 + 16) & 4) != 0)
    {
      v106 = *v105;
    }
    else
    {
      v119 = *(unsigned __int16 *)v105;
      if (v119 > 0xFF)
        goto LABEL_46;
      v106 = v119;
    }
    v39 = *(_QWORD *)(v37 + 8 * v106 + 42216);
  }
  else
  {
    v39 = *(_QWORD *)(v37 + 41968);
  }
LABEL_49:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v40 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v40, v39, 0, (uint64_t)&v190);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
LABEL_53:
  v42 = *((_QWORD *)a3 + 13);
  if (!v42)
    goto LABEL_63;
  v43 = *((_QWORD *)this + 7);
  v44 = *(_DWORD *)(v42 + 4);
  if (v44)
  {
    if (v44 != 1)
    {
LABEL_56:
      v45 = *(_QWORD *)(v43 + 64760);
      if (!v45 || v42 != *(_QWORD *)(v45 + 8))
        v45 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_59;
    }
    v107 = *(unsigned __int8 **)(v42 + 8);
    if ((*(_BYTE *)(v42 + 16) & 4) != 0)
    {
      v108 = *v107;
    }
    else
    {
      v120 = *(unsigned __int16 *)v107;
      if (v120 > 0xFF)
        goto LABEL_56;
      v108 = v120;
    }
    v45 = *(_QWORD *)(v43 + 8 * v108 + 42216);
  }
  else
  {
    v45 = *(_QWORD *)(v43 + 41968);
  }
LABEL_59:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v46 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v46, v45, 0, (uint64_t)&v190);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
LABEL_63:
  if (*((_BYTE *)a3 + 57))
  {
    if (*((_BYTE *)a3 + 56))
      v48 = 7;
    else
      v48 = 6;
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v49 = v190;
    v190 = 0;
    v191 = v10;
    v192 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v193[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v49, v48, 0, (uint64_t)&v190);
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v50);
      else
        *(_DWORD *)v49 -= 2;
    }
  }
  v51 = *((_QWORD *)a3 + 22);
  if (!v51)
    goto LABEL_81;
  v52 = *((_QWORD *)this + 7);
  v53 = *(_DWORD *)(v51 + 4);
  if (v53)
  {
    if (v53 != 1)
    {
LABEL_74:
      v54 = *(_QWORD *)(v52 + 64760);
      if (!v54 || v51 != *(_QWORD *)(v54 + 8))
        v54 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_77;
    }
    v109 = *(unsigned __int8 **)(v51 + 8);
    if ((*(_BYTE *)(v51 + 16) & 4) != 0)
    {
      v110 = *v109;
    }
    else
    {
      v121 = *(unsigned __int16 *)v109;
      if (v121 > 0xFF)
        goto LABEL_74;
      v110 = v121;
    }
    v54 = *(_QWORD *)(v52 + 8 * v110 + 42216);
  }
  else
  {
    v54 = *(_QWORD *)(v52 + 41968);
  }
LABEL_77:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v55 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v55, v54, 0, (uint64_t)&v190);
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v56);
    else
      *(_DWORD *)v55 -= 2;
  }
LABEL_81:
  if (*((_BYTE *)a3 + 32))
  {
    v57 = *((unsigned int *)a3 + 7);
    v190 = 0;
    LODWORD(v191) = 0;
    HIDWORD(v191) = v57;
    if ((_DWORD)v57)
    {
      if (v57 >> 30)
        goto LABEL_363;
      v58 = (WTF *)WTF::fastMalloc((WTF *)(4 * v57));
      LODWORD(v191) = v57;
      v190 = v58;
      memcpy(v58, *((const void **)a3 + 2), 4 * *((unsigned int *)a3 + 7));
    }
    v60 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::CryptoKeyUsage>>>::convert<WebCore::CryptoKeyUsage,0ul>((uint64_t)this, (uint64_t)a2, (unsigned int **)&v190);
    v61 = v190;
    if (v190)
    {
      v190 = 0;
      LODWORD(v191) = 0;
      WTF::fastFree(v61, v59);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v62 = v190;
    v190 = 0;
    v191 = v10;
    v192 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v193[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v62, v60, 0, (uint64_t)&v190);
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v63);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  v64 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v65 = *((_QWORD *)this + 7);
    v66 = *(_DWORD *)(v64 + 4);
    if (v66)
    {
      if (v66 != 1)
      {
LABEL_94:
        v67 = *(_QWORD *)(v65 + 64760);
        if (!v67 || v64 != *(_QWORD *)(v67 + 8))
          v67 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_97;
      }
      v111 = *(unsigned __int8 **)(v64 + 8);
      if ((*(_BYTE *)(v64 + 16) & 4) != 0)
      {
        v112 = *v111;
      }
      else
      {
        v122 = *(unsigned __int16 *)v111;
        if (v122 > 0xFF)
          goto LABEL_94;
        v112 = v122;
      }
      v67 = *(_QWORD *)(v65 + 8 * v112 + 42216);
    }
    else
    {
      v67 = *(_QWORD *)(v65 + 41968);
    }
LABEL_97:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v68 = v190;
    v190 = 0;
    v191 = v10;
    v192 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v193[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v68, v67, 0, (uint64_t)&v190);
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v69);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  v70 = *((_QWORD *)a3 + 12);
  if (!v70)
    goto LABEL_111;
  v71 = *((_QWORD *)this + 7);
  v72 = *(_DWORD *)(v70 + 4);
  if (v72)
  {
    if (v72 != 1)
    {
LABEL_104:
      v73 = *(_QWORD *)(v71 + 64760);
      if (!v73 || v70 != *(_QWORD *)(v73 + 8))
        v73 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_107;
    }
    v113 = *(unsigned __int8 **)(v70 + 8);
    if ((*(_BYTE *)(v70 + 16) & 4) != 0)
    {
      v114 = *v113;
    }
    else
    {
      v123 = *(unsigned __int16 *)v113;
      if (v123 > 0xFF)
        goto LABEL_104;
      v114 = v123;
    }
    v73 = *(_QWORD *)(v71 + 8 * v114 + 42216);
  }
  else
  {
    v73 = *(_QWORD *)(v71 + 41968);
  }
LABEL_107:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v74 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v74, v73, 0, (uint64_t)&v190);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v75);
    else
      *(_DWORD *)v74 -= 2;
  }
LABEL_111:
  if (!*((_BYTE *)a3 + 168))
    goto LABEL_218;
  v76 = *((unsigned int *)a3 + 41);
  v185 = 0;
  v186 = 0;
  v187 = v76;
  if (!(_DWORD)v76)
  {
    v79 = 0;
    goto LABEL_125;
  }
  if (v76 >= 0xAAAAAAB)
  {
LABEL_363:
    __break(0xC471u);
    JUMPOUT(0x194CBC144);
  }
  v77 = 24 * v76;
  v78 = WTF::fastMalloc((WTF *)(24 * v76));
  v79 = (uint64_t *)v78;
  v186 = (v77 & 0xFFFFFFF8) / 0x18;
  v185 = (uint64_t *)v78;
  v80 = *((_DWORD *)a3 + 41);
  if (v80)
  {
    v81 = 0;
    v82 = *((_QWORD *)a3 + 19);
    v83 = v82 + 24 * v80;
    do
    {
      v84 = v82 + v81;
      v85 = *(_DWORD **)(v82 + v81);
      if (v85)
        *v85 += 2;
      v86 = v78 + v81;
      *(_QWORD *)(v78 + v81) = v85;
      v87 = *(_DWORD **)(v84 + 8);
      if (v87)
        *v87 += 2;
      *(_QWORD *)(v86 + 8) = v87;
      v88 = *(_DWORD **)(v84 + 16);
      if (v88)
        *v88 += 2;
      *(_QWORD *)(v86 + 16) = v88;
      v81 += 24;
    }
    while (v84 + 24 != v83);
  }
LABEL_125:
  v89 = (JSC::VM *)*((_QWORD *)this + 7);
  v195 = v89;
  LOBYTE(v190) = 0;
  v191 = 0x800000000;
  v192 = (WTF *)((char *)v193 + 8);
  memset(v193, 0, sizeof(v193));
  v194 = 0;
  v90 = v187;
  if (v187 >= 9)
  {
    LOBYTE(v190) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v191) == 1;
    v90 = v187;
    v79 = v185;
LABEL_127:
    v91 = 24 * v90;
    while (1)
    {
      v92 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, v79);
      if (*((_DWORD *)v89 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v89) & 1) != 0)
          goto LABEL_360;
      }
      v93 = v191;
      if ((_DWORD)v191 != HIDWORD(v191) && (v192 != (WTF *)((char *)v193 + 8) ? (v94 = v192 == 0) : (v94 = 1), v94))
      {
        *((_QWORD *)v192 + v191) = v92;
        LODWORD(v191) = v93 + 1;
      }
      else
      {
        v95.super.isa = v92;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v191, v95) == 1)
          LOBYTE(v190) = 1;
      }
      v79 += 3;
      v91 -= 24;
      if (!v91)
        goto LABEL_208;
    }
  }
  if (v187)
    goto LABEL_127;
LABEL_208:
  if ((_BYTE)v190)
  {
    JSC::throwOutOfMemoryError();
LABEL_360:
    v125 = 0;
    goto LABEL_211;
  }
  v188 = v192;
  v189 = v191;
  v124 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (*((_DWORD *)v124 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v124) & 1) != 0)
    goto LABEL_360;
  v125 = JSC::constructArray();
LABEL_211:
  v126 = *(uint64_t **)&v193[0];
  if (*(_QWORD *)&v193[0])
  {
    v188 = (WTF *)&v191;
    v184 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v193[0], (uint64_t *)&v188);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v126, v184);
  }
  if (v192 != (WTF *)((char *)v193 + 8) && v192)
    WTF::fastFree(v192, v96);
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v185, (WTF::StringImpl *)v96);
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v127 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v127, v125, 0, (uint64_t)&v190);
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, v128);
    else
      *(_DWORD *)v127 -= 2;
  }
LABEL_218:
  v129 = *((_QWORD *)a3 + 14);
  if (!v129)
    goto LABEL_228;
  v130 = *((_QWORD *)this + 7);
  v131 = *(_DWORD *)(v129 + 4);
  if (v131)
  {
    if (v131 != 1)
    {
LABEL_221:
      v132 = *(_QWORD *)(v130 + 64760);
      if (!v132 || v129 != *(_QWORD *)(v132 + 8))
        v132 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_224;
    }
    v166 = *(unsigned __int8 **)(v129 + 8);
    if ((*(_BYTE *)(v129 + 16) & 4) != 0)
    {
      v167 = *v166;
    }
    else
    {
      v178 = *(unsigned __int16 *)v166;
      if (v178 > 0xFF)
        goto LABEL_221;
      v167 = v178;
    }
    v132 = *(_QWORD *)(v130 + 8 * v167 + 42216);
  }
  else
  {
    v132 = *(_QWORD *)(v130 + 41968);
  }
LABEL_224:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v133 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v133, v132, 0, (uint64_t)&v190);
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, v134);
    else
      *(_DWORD *)v133 -= 2;
  }
LABEL_228:
  v135 = *((_QWORD *)a3 + 15);
  if (!v135)
    goto LABEL_238;
  v136 = *((_QWORD *)this + 7);
  v137 = *(_DWORD *)(v135 + 4);
  if (v137)
  {
    if (v137 != 1)
    {
LABEL_231:
      v138 = *(_QWORD *)(v136 + 64760);
      if (!v138 || v135 != *(_QWORD *)(v138 + 8))
        v138 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_234;
    }
    v168 = *(unsigned __int8 **)(v135 + 8);
    if ((*(_BYTE *)(v135 + 16) & 4) != 0)
    {
      v169 = *v168;
    }
    else
    {
      v179 = *(unsigned __int16 *)v168;
      if (v179 > 0xFF)
        goto LABEL_231;
      v169 = v179;
    }
    v138 = *(_QWORD *)(v136 + 8 * v169 + 42216);
  }
  else
  {
    v138 = *(_QWORD *)(v136 + 41968);
  }
LABEL_234:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v139 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v139, v138, 0, (uint64_t)&v190);
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
      WTF::StringImpl::destroy(v139, v140);
    else
      *(_DWORD *)v139 -= 2;
  }
LABEL_238:
  v141 = *((_QWORD *)a3 + 18);
  if (!v141)
    goto LABEL_248;
  v142 = *((_QWORD *)this + 7);
  v143 = *(_DWORD *)(v141 + 4);
  if (v143)
  {
    if (v143 != 1)
    {
LABEL_241:
      v144 = *(_QWORD *)(v142 + 64760);
      if (!v144 || v141 != *(_QWORD *)(v144 + 8))
        v144 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_244;
    }
    v170 = *(unsigned __int8 **)(v141 + 8);
    if ((*(_BYTE *)(v141 + 16) & 4) != 0)
    {
      v171 = *v170;
    }
    else
    {
      v180 = *(unsigned __int16 *)v170;
      if (v180 > 0xFF)
        goto LABEL_241;
      v171 = v180;
    }
    v144 = *(_QWORD *)(v142 + 8 * v171 + 42216);
  }
  else
  {
    v144 = *(_QWORD *)(v142 + 41968);
  }
LABEL_244:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v145 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v145, v144, 0, (uint64_t)&v190);
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
      WTF::StringImpl::destroy(v145, v146);
    else
      *(_DWORD *)v145 -= 2;
  }
LABEL_248:
  v147 = *((_QWORD *)a3 + 1);
  if (!v147)
    goto LABEL_258;
  v148 = *((_QWORD *)this + 7);
  v149 = *(_DWORD *)(v147 + 4);
  if (v149)
  {
    if (v149 != 1)
    {
LABEL_251:
      v150 = *(_QWORD *)(v148 + 64760);
      if (!v150 || v147 != *(_QWORD *)(v150 + 8))
        v150 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_254;
    }
    v172 = *(unsigned __int8 **)(v147 + 8);
    if ((*(_BYTE *)(v147 + 16) & 4) != 0)
    {
      v173 = *v172;
    }
    else
    {
      v181 = *(unsigned __int16 *)v172;
      if (v181 > 0xFF)
        goto LABEL_251;
      v173 = v181;
    }
    v150 = *(_QWORD *)(v148 + 8 * v173 + 42216);
  }
  else
  {
    v150 = *(_QWORD *)(v148 + 41968);
  }
LABEL_254:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v151 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v151, v150, 0, (uint64_t)&v190);
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, v152);
    else
      *(_DWORD *)v151 -= 2;
  }
LABEL_258:
  v153 = *((_QWORD *)a3 + 9);
  if (!v153)
    goto LABEL_268;
  v154 = *((_QWORD *)this + 7);
  v155 = *(_DWORD *)(v153 + 4);
  if (v155)
  {
    if (v155 != 1)
    {
LABEL_261:
      v156 = *(_QWORD *)(v154 + 64760);
      if (!v156 || v153 != *(_QWORD *)(v156 + 8))
        v156 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_264;
    }
    v174 = *(unsigned __int8 **)(v153 + 8);
    if ((*(_BYTE *)(v153 + 16) & 4) != 0)
    {
      v175 = *v174;
    }
    else
    {
      v182 = *(unsigned __int16 *)v174;
      if (v182 > 0xFF)
        goto LABEL_261;
      v175 = v182;
    }
    v156 = *(_QWORD *)(v154 + 8 * v175 + 42216);
  }
  else
  {
    v156 = *(_QWORD *)(v154 + 41968);
  }
LABEL_264:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v157 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v157, v156, 0, (uint64_t)&v190);
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, v158);
    else
      *(_DWORD *)v157 -= 2;
  }
LABEL_268:
  v159 = *((_QWORD *)a3 + 10);
  if (!v159)
    return v10;
  v160 = *((_QWORD *)this + 7);
  v161 = *(_DWORD *)(v159 + 4);
  if (v161)
  {
    if (v161 != 1)
    {
LABEL_271:
      v162 = *(_QWORD *)(v160 + 64760);
      if (!v162 || v159 != *(_QWORD *)(v162 + 8))
        v162 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_274;
    }
    v176 = *(unsigned __int8 **)(v159 + 8);
    if ((*(_BYTE *)(v159 + 16) & 4) != 0)
    {
      v177 = *v176;
    }
    else
    {
      v183 = *(unsigned __int16 *)v176;
      if (v183 > 0xFF)
        goto LABEL_271;
      v177 = v183;
    }
    v162 = *(_QWORD *)(v160 + 8 * v177 + 42216);
  }
  else
  {
    v162 = *(_QWORD *)(v160 + 41968);
  }
LABEL_274:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v7 + 41968));
  v163 = v190;
  v190 = 0;
  v191 = v10;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v163, v162, 0, (uint64_t)&v190);
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
      WTF::StringImpl::destroy(v163, v164);
    else
      *(_DWORD *)v163 -= 2;
  }
  return v10;
}

_DWORD *WebCore::JSKHRParallelShaderCompile::destroy(WebCore::JSKHRParallelShaderCompile *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSKHRParallelShaderCompile::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSKHRParallelShaderCompileOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsKHRParallelShaderCompile";
    a5[1] = 42;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194CBC380);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSKHRParallelShaderCompileOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::KHRParallelShaderCompile>(int a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  JSC::JSCell *v25;
  unint64_t v26;
  unint64_t SlowCase;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::Structure *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  void *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  JSC::Structure *Allocator;
  unint64_t v59;
  unint64_t v60;
  WTF::StringImpl *v61[6];
  int v62;
  int v63;
  int v64;
  JSC::Structure *v65;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::KHRParallelShaderCompile *__hidden))a3 != off_1E33DD118)
  {
    __break(0xC471u);
    JUMPOUT(0x194CBCB24);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSKHRParallelShaderCompile::s_info
         + ~((_QWORD)&WebCore::JSKHRParallelShaderCompile::s_info << 32)) ^ (((unint64_t)&WebCore::JSKHRParallelShaderCompile::s_info
                                                                            + ~((_QWORD)&WebCore::JSKHRParallelShaderCompile::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSKHRParallelShaderCompile::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_29;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSKHRParallelShaderCompile::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v61[0]) = 23;
  v26 = JSC::Structure::create((uint64_t *)v24, a2, v25);
  *(_DWORD *)(v26 + 16) |= 0x80000u;
  SlowCase = *(_QWORD *)(v24 + 38904);
  if (SlowCase >= *(_QWORD *)(v24 + 38912))
  {
    SlowCase = *(_QWORD *)(v24 + 38920);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v60 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = SlowCase + HIDWORD(v60);
    *(_QWORD *)(v24 + 38920) = SlowCase + (int)v60;
  }
  *(_QWORD *)(v24 + 38904) = SlowCase + 16;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  v28 = *(_DWORD *)(v26 + 8);
  *(_DWORD *)SlowCase = v26 >> 4;
  *(_DWORD *)(SlowCase + 4) = v28;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, (JSC::VM *)v24);
  WTF::AtomStringImpl::addLiteral();
  v29 = v61[0];
  JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSKHRParallelShaderCompile::s_info, (unint64_t *)v61, (uint64_t)&WebCore::JSKHRParallelShaderCompilePrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = JSC::JSString::create(v24, v61);
  v34 = v61[0];
  v61[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v64 = *(_DWORD *)SlowCase;
  v65 = v35;
  v36 = JSC::Structure::outOfLineCapacity(v35);
  v62 = 0;
  v63 = v36;
  v61[0] = (WTF::StringImpl *)&v63;
  v61[1] = (WTF::StringImpl *)SlowCase;
  v61[2] = (WTF::StringImpl *)v24;
  v61[3] = (WTF::StringImpl *)&v64;
  v61[4] = (WTF::StringImpl *)&v65;
  v61[5] = (WTF::StringImpl *)&v62;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v35, (JSC::VM *)v24, v31, 6, (uint64_t)v61);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, v24, v62, v33);
  *((_DWORD *)v35 + 4) |= 0x10u;
  LODWORD(v61[0]) = 23;
  v37 = JSC::Structure::create((uint64_t *)v24, a2, (JSC::JSCell *)SlowCase);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v37, (uint64_t)&WebCore::JSKHRParallelShaderCompile::s_info);
LABEL_29:
  v38 = *(_QWORD *)(a2 + 56);
  v39 = *(_QWORD *)(v38 + 41456);
  v40 = *(_QWORD *)(v39 + 23536);
  v41 = *(_QWORD **)(v40 + 5096);
  if (v41)
    goto LABEL_49;
  v42 = *(_QWORD *)(v39 + 22648);
  if (__ldaxr((unsigned __int8 *)v42))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v42))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v42);
LABEL_34:
  v44 = *(_QWORD *)(v42 + 2824);
  if (!*(_QWORD *)(v44 + 5096))
  {
    v45 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v61, "IsoSpace T");
    v65 = 0;
    MEMORY[0x19AEA3204](v45, v61, v38 + 192, v38 + 1872, 32, 8, &v65);
    v47 = (uint64_t)v65;
    v65 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    v48 = v61[0];
    v61[0] = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::fastFree(v48, v46);
      else
        --*(_DWORD *)v48;
    }
    v49 = *(_QWORD *)(v44 + 5096);
    *(_QWORD *)(v44 + 5096) = v45;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v50 = *(_QWORD *)(v40 + 5096);
  *(_QWORD *)(v40 + 5096) = v41;
  if (v50)
  {
    v51 = (WTF *)MEMORY[0x19AEA3528](v50);
    WTF::fastFree(v51, v52);
  }
  v53 = __ldxr((unsigned __int8 *)v42);
  if (v53 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v42))
LABEL_48:
    WTF::Lock::unlockSlow((WTF::Lock *)v42);
LABEL_49:
  v14 = v41[3];
  if (v14 >= v41[4])
  {
    v14 = v41[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_51;
    }
    v59 = *(_QWORD *)(v14 + 8) ^ v41[6];
    v41[4] = v14 + HIDWORD(v59);
    v41[5] = v14 + (int)v59;
  }
  v41[3] = v14 + 32;
LABEL_51:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v38 + 755))
    __dmb(0xAu);
  v54 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335E70 & 1) == 0)
  {
    qword_1EE335E68 = (uint64_t)&off_1E32A82F0;
    byte_1EE335E70 = 1;
  }
  v61[0] = a3;
  if ((v14 & 8) != 0)
    v55 = (v14 - 112) | 1;
  else
    v55 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v55 & 1) != 0)
    v56 = v55 + 47;
  else
    v56 = *(_QWORD *)v55 + 32;
  Allocator = *(JSC::Structure **)(v56 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v56 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335E68;
  *((_QWORD *)Allocator + 2) = v54;
  v65 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v54 + 32), (uint64_t *)v61, (uint64_t *)&v65);
  if (v65)
    *((_QWORD *)v65 + 1) = 3;
  return v14;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::construct(JSC::JSGlobalObject *a1, unint64_t a2)
{
  JSC::Structure *v2;
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  unint64_t v10;
  JSC::JSCell *v11;
  JSC::VM *v12;
  uint64_t Object;
  WTF::StringImpl *v14;
  unint64_t v15;
  int v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::VM *v21;
  double v22;
  BOOL v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  char v28;
  JSC::VM *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  JSC::VM *v43;
  double v44;
  unint64_t v45;
  BOOL v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WebCore::JSDOMGlobalObject *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  JSCell *v60;
  JSC::JSCell *v61;
  JSC::JSGlobalObject *v62;
  JSC::JSObject *v63;
  JSC::JSGlobalObject *v64;
  void (***v65)(WebCore::KeyboardEvent *__hidden);
  JSCell *v66;
  JSC::VM *v68;
  double v69;
  BOOL v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  JSC::VM *v73;
  double v74;
  BOOL v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  JSC::VM *v78;
  double v79;
  BOOL v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  JSC::VM *v87;
  double v88;
  BOOL v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  JSC::VM *v92;
  double v93;
  BOOL v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  JSC::VM *v97;
  double v98;
  BOOL v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  JSC::VM *v102;
  double v103;
  BOOL v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  JSC::VM *v107;
  double v108;
  BOOL v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  BOOL v112;
  JSC::VM *v113;
  double v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  JSC::VM *v120;
  unint64_t v121;
  uint64_t *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  unint64_t v135;
  int v136;
  int v137;
  JSValue v138;
  int v139;
  int hasExceptionsAfterHandlingTraps;
  WebCore::JSKeyboardEvent *v141;
  WebCore::JSDOMGlobalObject *v142;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v144;
  JSC::Structure *v145;
  unint64_t SubclassStructure;
  unint64_t v147;
  BOOL v148;
  int v149;
  uint64_t v150;
  int *v151;
  int v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  int *v156;
  int v157;
  BOOL v158;
  int v159;
  uint64_t v160;
  int *v161;
  int v162;
  BOOL v163;
  int v164;
  uint64_t v165;
  int *v166;
  int v167;
  BOOL v168;
  int v169;
  uint64_t v170;
  int *v171;
  int v172;
  BOOL v173;
  int v174;
  uint64_t v175;
  int *v176;
  int v177;
  BOOL v178;
  int v179;
  uint64_t v180;
  int *v181;
  int v182;
  BOOL v183;
  int v184;
  uint64_t v185;
  int *v186;
  int v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  int *v191;
  int v192;
  BOOL v193;
  int v194;
  uint64_t v195;
  int *v196;
  int v197;
  BOOL v198;
  int v199;
  uint64_t v200;
  int *v201;
  int v202;
  unsigned int v203;
  BOOL v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  JSC::Structure *v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  JSC::VM *v213;
  WTF::StringImpl *v214;
  int v215;
  WTF::StringImpl *v216;
  WTF *v217;
  int v218;
  int v219;
  __int16 v220;
  WTF::StringImpl *v221[2];
  int v222;
  __int16 v223;
  WTF::StringImpl *v224;
  unint64_t v225;
  int v226;
  __int16 v227;
  BOOL v228;
  WTF *v229;
  int v230;
  int v231;
  __int16 v232;
  __int128 v233;
  int v234;
  __int16 v235;
  WTF::StringImpl *v236;
  unint64_t v237;
  int v238;
  unsigned int v239;
  unint64_t v240;
  int v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  int v244;
  uint64_t v245;
  void (***v246)(WebCore::KeyboardEvent *__hidden);
  int v247;
  uint64_t v248;
  JSC::VM *v249;
  unint64_t v250[2];

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v138.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v138);
  }
  v5 = a2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, v7, (uint64_t)&v240);
  v9 = v241;
  if (v241)
  {
    v66 = 0;
    goto LABEL_143;
  }
  v212 = v6;
  v213 = v4;
  v10 = MEMORY[0x1E0CBF738];
  v214 = (WTF::StringImpl *)v5;
  if ((unint64_t)(*(int *)(v5 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v249 = (JSC::VM *)*((_QWORD *)a1 + 7);
    goto LABEL_14;
  }
  v11 = *(JSC::JSCell **)(v5 + 56);
  v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v249 = v12;
  if (((unint64_t)v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_14:
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v16 = 0;
    v2 = 0;
    v211 = 0;
    v210 = 0;
    v205 = 0;
    v248 = 0;
    v17 = 1;
    goto LABEL_15;
  }
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v11)) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_347;
  }
  v2 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  LODWORD(v5) = (_DWORD)v216;
  v15 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
      WTF::StringImpl::destroy(v216, v14);
    else
      *(_DWORD *)v216 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    goto LABEL_347;
  if (v15 == 10)
  {
    BYTE4(v211) = 0;
    goto LABEL_151;
  }
  v68 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (v15 >= 0xFFFE000000000000)
  {
    v158 = (_DWORD)v15 == 0;
    goto LABEL_471;
  }
  *(_QWORD *)&v69 = v15 - 0x2000000000000;
  if (v15 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v69 <= 0.0)
    {
      v70 = v69 < 0.0;
      goto LABEL_150;
    }
    goto LABEL_475;
  }
  if ((v15 & 0xFFFE000000000002) != 0)
  {
    v70 = v15 == 7;
    goto LABEL_150;
  }
  v159 = *(unsigned __int8 *)(v15 + 5);
  if (v159 == 3)
  {
    v162 = *(_DWORD *)(v15 + 8);
LABEL_598:
    v158 = v162 == 0;
    goto LABEL_471;
  }
  if (v159 == 2)
  {
    v160 = *(_QWORD *)(v15 + 8);
    if ((v160 & 1) != 0)
      v161 = (int *)(v15 + 16);
    else
      v161 = (int *)(v160 + 4);
    v162 = *v161;
    goto LABEL_598;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_475:
    v70 = 1;
    goto LABEL_150;
  }
  v158 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_471:
  v70 = !v158;
LABEL_150:
  BYTE4(v211) = v70;
  if (*((_DWORD *)v68 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v68))
    goto LABEL_347;
LABEL_151:
  WTF::AtomStringImpl::addLiteral();
  LODWORD(v5) = (_DWORD)v216;
  v72 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
      WTF::StringImpl::destroy(v216, v71);
    else
      *(_DWORD *)v216 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    goto LABEL_347;
  if (v72 == 10)
  {
    LOBYTE(v211) = 0;
    goto LABEL_162;
  }
  v73 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (v72 >= 0xFFFE000000000000)
  {
    v163 = (_DWORD)v72 == 0;
    goto LABEL_483;
  }
  *(_QWORD *)&v74 = v72 - 0x2000000000000;
  if (v72 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v74 <= 0.0)
    {
      v75 = v74 < 0.0;
      goto LABEL_161;
    }
    goto LABEL_487;
  }
  if ((v72 & 0xFFFE000000000002) != 0)
  {
    v75 = v72 == 7;
    goto LABEL_161;
  }
  v164 = *(unsigned __int8 *)(v72 + 5);
  if (v164 == 3)
  {
    v167 = *(_DWORD *)(v72 + 8);
LABEL_602:
    v163 = v167 == 0;
    goto LABEL_483;
  }
  if (v164 == 2)
  {
    v165 = *(_QWORD *)(v72 + 8);
    if ((v165 & 1) != 0)
      v166 = (int *)(v72 + 16);
    else
      v166 = (int *)(v165 + 4);
    v167 = *v166;
    goto LABEL_602;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_487:
    v75 = 1;
    goto LABEL_161;
  }
  v163 = *(_QWORD *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_483:
  v75 = !v163;
LABEL_161:
  LOBYTE(v211) = v75;
  if (*((_DWORD *)v73 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v73))
    goto LABEL_347;
LABEL_162:
  WTF::AtomStringImpl::addLiteral();
  LODWORD(v5) = (_DWORD)v216;
  v77 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
      WTF::StringImpl::destroy(v216, v76);
    else
      *(_DWORD *)v216 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    goto LABEL_347;
  if (v77 == 10)
  {
    v210 = 0;
    goto LABEL_173;
  }
  v78 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (v77 >= 0xFFFE000000000000)
  {
    v168 = (_DWORD)v77 == 0;
    goto LABEL_495;
  }
  *(_QWORD *)&v79 = v77 - 0x2000000000000;
  if (v77 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v79 <= 0.0)
    {
      v80 = v79 < 0.0;
      goto LABEL_172;
    }
    goto LABEL_499;
  }
  if ((v77 & 0xFFFE000000000002) != 0)
  {
    v80 = v77 == 7;
    goto LABEL_172;
  }
  v169 = *(unsigned __int8 *)(v77 + 5);
  if (v169 == 3)
  {
    v172 = *(_DWORD *)(v77 + 8);
LABEL_606:
    v168 = v172 == 0;
    goto LABEL_495;
  }
  if (v169 == 2)
  {
    v170 = *(_QWORD *)(v77 + 8);
    if ((v170 & 1) != 0)
      v171 = (int *)(v77 + 16);
    else
      v171 = (int *)(v170 + 4);
    v172 = *v171;
    goto LABEL_606;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_499:
    v80 = 1;
    goto LABEL_172;
  }
  v168 = *(_QWORD *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_495:
  v80 = !v168;
LABEL_172:
  v210 = v80;
  if (!*((_DWORD *)v78 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v78))
  {
LABEL_173:
    WTF::AtomStringImpl::addLiteral();
    v5 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
    if (v216)
    {
      if (*(_DWORD *)v216 == 2)
        WTF::StringImpl::destroy(v216, v81);
      else
        *(_DWORD *)v216 -= 2;
    }
    if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
      goto LABEL_347;
    if (v5 == 10)
    {
      v215 = 0;
    }
    else
    {
      v216 = (WTF::StringImpl *)v5;
      v82 = v5;
      v5 = *((_QWORD *)a1 + 7);
      v215 = v82;
      if (v82 < 0xFFFE000000000000)
      {
        v130 = v82 - 0x2000000000000;
        if (v82 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v216, a1);
          v130 = v147;
        }
        v131 = (v130 >> 52) & 0x7FF;
        if ((v131 - 1023) <= 0x53)
        {
          v135 = v130 >> (51 - (v130 >> 52));
          if (v131 > 0x433)
            LODWORD(v135) = v130 << ((v130 >> 52) - 51);
          if (v131 >= 0x41F)
            v136 = v135;
          else
            v136 = (((1 << ((v130 >> 52) + 1)) - 1) & v135) + (1 << ((v130 >> 52) + 1));
          if ((v130 & 0x8000000000000000) == 0)
            v137 = v136;
          else
            v137 = -v136;
          v215 = v137;
        }
        else
        {
          v215 = 0;
        }
      }
      if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
        goto LABEL_281;
    }
    WTF::AtomStringImpl::addLiteral();
    v5 = (unint64_t)v216;
    v84 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v5, v83);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    {
LABEL_281:
      v2 = 0;
      v18 = v214;
LABEL_282:
      v239 = 1;
      goto LABEL_115;
    }
    if ((v84 | 8) == 0xA)
    {
      v209 = 0;
    }
    else
    {
      v216 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
      if ((v84 & 0xFFFE000000000002) != 0
        || *(unsigned __int8 *)(v84 + 5) < 0x17u
        || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C))
        || (v132 = *(_QWORD *)(*(_QWORD *)(v84 + 16) + 3408),
            !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 104))(v132))
        || (v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 104))(v132),
            (v134 = *(_DWORD **)(v133 + 112)) == 0))
      {
        JSC::throwTypeError();
        goto LABEL_281;
      }
      v209 = *(JSC::Structure **)(v133 + 112);
      ++*v134;
    }
    WTF::AtomStringImpl::addLiteral();
    v5 = (unint64_t)v216;
    v86 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v5, v85);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    {
LABEL_395:
      v18 = v214;
      v2 = v209;
      goto LABEL_282;
    }
    if (v86 == 10)
    {
      BYTE4(v208) = 0;
      goto LABEL_198;
    }
    v87 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v86 >= 0xFFFE000000000000)
    {
      v173 = (_DWORD)v86 == 0;
      goto LABEL_507;
    }
    *(_QWORD *)&v88 = v86 - 0x2000000000000;
    if (v86 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v88 <= 0.0)
      {
        v89 = v88 < 0.0;
        goto LABEL_197;
      }
    }
    else
    {
      if ((v86 & 0xFFFE000000000002) != 0)
      {
        v89 = v86 == 7;
        goto LABEL_197;
      }
      v174 = *(unsigned __int8 *)(v86 + 5);
      if (v174 == 3)
      {
        v177 = *(_DWORD *)(v86 + 8);
LABEL_614:
        v173 = v177 == 0;
        goto LABEL_507;
      }
      if (v174 == 2)
      {
        v175 = *(_QWORD *)(v86 + 8);
        if ((v175 & 1) != 0)
          v176 = (int *)(v86 + 16);
        else
          v176 = (int *)(v175 + 4);
        v177 = *v176;
        goto LABEL_614;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v173 = *(_QWORD *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_507:
        v89 = !v173;
LABEL_197:
        BYTE4(v208) = v89;
        if (*((_DWORD *)v87 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v87) & 1) != 0)
          goto LABEL_395;
LABEL_198:
        WTF::AtomStringImpl::addLiteral();
        v5 = (unint64_t)v216;
        v91 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v5, v90);
          else
            *(_DWORD *)v5 -= 2;
        }
        if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
          goto LABEL_395;
        if (v91 == 10)
        {
          LOBYTE(v208) = 0;
          goto LABEL_209;
        }
        v92 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v91 >= 0xFFFE000000000000)
        {
          v178 = (_DWORD)v91 == 0;
          goto LABEL_519;
        }
        *(_QWORD *)&v93 = v91 - 0x2000000000000;
        if (v91 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v93 <= 0.0)
          {
            v94 = v93 < 0.0;
            goto LABEL_208;
          }
        }
        else
        {
          if ((v91 & 0xFFFE000000000002) != 0)
          {
            v94 = v91 == 7;
            goto LABEL_208;
          }
          v179 = *(unsigned __int8 *)(v91 + 5);
          if (v179 == 3)
          {
            v182 = *(_DWORD *)(v91 + 8);
LABEL_618:
            v178 = v182 == 0;
            goto LABEL_519;
          }
          if (v179 == 2)
          {
            v180 = *(_QWORD *)(v91 + 8);
            if ((v180 & 1) != 0)
              v181 = (int *)(v91 + 16);
            else
              v181 = (int *)(v180 + 4);
            v182 = *v181;
            goto LABEL_618;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v91 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v178 = *(_QWORD *)(16 * (*(_DWORD *)v91 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_519:
            v94 = !v178;
LABEL_208:
            LOBYTE(v208) = v94;
            if (*((_DWORD *)v92 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v92) & 1) != 0)
              goto LABEL_395;
LABEL_209:
            WTF::AtomStringImpl::addLiteral();
            v5 = (unint64_t)v216;
            v96 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
            if (v5)
            {
              if (*(_DWORD *)v5 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v5, v95);
              else
                *(_DWORD *)v5 -= 2;
            }
            if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
              goto LABEL_395;
            if (v96 == 10)
            {
              BYTE4(v207) = 0;
              goto LABEL_220;
            }
            v97 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v96 >= 0xFFFE000000000000)
            {
              v183 = (_DWORD)v96 == 0;
              goto LABEL_531;
            }
            *(_QWORD *)&v98 = v96 - 0x2000000000000;
            if (v96 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v98 <= 0.0)
              {
                v99 = v98 < 0.0;
                goto LABEL_219;
              }
            }
            else
            {
              if ((v96 & 0xFFFE000000000002) != 0)
              {
                v99 = v96 == 7;
                goto LABEL_219;
              }
              v184 = *(unsigned __int8 *)(v96 + 5);
              if (v184 == 3)
              {
                v187 = *(_DWORD *)(v96 + 8);
LABEL_622:
                v183 = v187 == 0;
                goto LABEL_531;
              }
              if (v184 == 2)
              {
                v185 = *(_QWORD *)(v96 + 8);
                if ((v185 & 1) != 0)
                  v186 = (int *)(v96 + 16);
                else
                  v186 = (int *)(v185 + 4);
                v187 = *v186;
                goto LABEL_622;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v183 = *(_QWORD *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_531:
                v99 = !v183;
LABEL_219:
                BYTE4(v207) = v99;
                if (*((_DWORD *)v97 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v97) & 1) != 0)
                  goto LABEL_395;
LABEL_220:
                WTF::AtomStringImpl::addLiteral();
                v5 = (unint64_t)v216;
                v101 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
                if (v5)
                {
                  if (*(_DWORD *)v5 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v5, v100);
                  else
                    *(_DWORD *)v5 -= 2;
                }
                if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
                  goto LABEL_395;
                if (v101 == 10)
                {
                  LOBYTE(v207) = 0;
                  goto LABEL_231;
                }
                v102 = (JSC::VM *)*((_QWORD *)a1 + 7);
                if (v101 >= 0xFFFE000000000000)
                {
                  v188 = (_DWORD)v101 == 0;
                  goto LABEL_543;
                }
                *(_QWORD *)&v103 = v101 - 0x2000000000000;
                if (v101 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v103 <= 0.0)
                  {
                    v104 = v103 < 0.0;
                    goto LABEL_230;
                  }
                }
                else
                {
                  if ((v101 & 0xFFFE000000000002) != 0)
                  {
                    v104 = v101 == 7;
                    goto LABEL_230;
                  }
                  v189 = *(unsigned __int8 *)(v101 + 5);
                  if (v189 == 3)
                  {
                    v192 = *(_DWORD *)(v101 + 8);
LABEL_626:
                    v188 = v192 == 0;
                    goto LABEL_543;
                  }
                  if (v189 == 2)
                  {
                    v190 = *(_QWORD *)(v101 + 8);
                    if ((v190 & 1) != 0)
                      v191 = (int *)(v101 + 16);
                    else
                      v191 = (int *)(v190 + 4);
                    v192 = *v191;
                    goto LABEL_626;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v188 = *(_QWORD *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_543:
                    v104 = !v188;
LABEL_230:
                    LOBYTE(v207) = v104;
                    if (*((_DWORD *)v102 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v102) & 1) != 0)
                      goto LABEL_395;
LABEL_231:
                    WTF::AtomStringImpl::addLiteral();
                    v5 = (unint64_t)v216;
                    v106 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
                    if (v5)
                    {
                      if (*(_DWORD *)v5 == 2)
                        WTF::StringImpl::destroy((WTF::StringImpl *)v5, v105);
                      else
                        *(_DWORD *)v5 -= 2;
                    }
                    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
                      goto LABEL_395;
                    if (v106 == 10)
                    {
                      BYTE4(v206) = 0;
                      goto LABEL_242;
                    }
                    v107 = (JSC::VM *)*((_QWORD *)a1 + 7);
                    if (v106 >= 0xFFFE000000000000)
                    {
                      v193 = (_DWORD)v106 == 0;
                      goto LABEL_555;
                    }
                    *(_QWORD *)&v108 = v106 - 0x2000000000000;
                    if (v106 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                    {
                      if (v108 <= 0.0)
                      {
                        v109 = v108 < 0.0;
                        goto LABEL_241;
                      }
                    }
                    else
                    {
                      if ((v106 & 0xFFFE000000000002) != 0)
                      {
                        v109 = v106 == 7;
                        goto LABEL_241;
                      }
                      v194 = *(unsigned __int8 *)(v106 + 5);
                      if (v194 == 3)
                      {
                        v197 = *(_DWORD *)(v106 + 8);
LABEL_630:
                        v193 = v197 == 0;
                        goto LABEL_555;
                      }
                      if (v194 == 2)
                      {
                        v195 = *(_QWORD *)(v106 + 8);
                        if ((v195 & 1) != 0)
                          v196 = (int *)(v106 + 16);
                        else
                          v196 = (int *)(v195 + 4);
                        v197 = *v196;
                        goto LABEL_630;
                      }
                      if ((*(_BYTE *)(16 * (*(_DWORD *)v106 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                      {
                        v193 = *(_QWORD *)(16 * (*(_DWORD *)v106 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_555:
                        v109 = !v193;
LABEL_241:
                        BYTE4(v206) = v109;
                        if (*((_DWORD *)v107 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v107) & 1) != 0)
                          goto LABEL_395;
LABEL_242:
                        WTF::AtomStringImpl::addLiteral();
                        v5 = (unint64_t)v216;
                        v111 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
                        if (v5)
                        {
                          if (*(_DWORD *)v5 == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v5, v110);
                          else
                            *(_DWORD *)v5 -= 2;
                        }
                        if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
                          goto LABEL_395;
                        if (v111 == 10)
                        {
                          v112 = 0;
LABEL_253:
                          WTF::AtomStringImpl::addLiteral();
                          v115 = v216;
                          v117 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
                          if (v115)
                          {
                            if (*(_DWORD *)v115 == 2)
                              WTF::StringImpl::destroy(v115, v116);
                            else
                              *(_DWORD *)v115 -= 2;
                          }
                          v5 = (unint64_t)v249;
                          if (*((_DWORD *)v249 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v249) & 1) != 0)
                            goto LABEL_395;
                          LOBYTE(v206) = v112;
                          if (v117 == 10)
                          {
                            v205 = 0;
                            v248 = 0;
                          }
                          else
                          {
                            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v117, &v248);
                            if (HIDWORD(v248))
                            {
LABEL_397:
                              v239 = 1;
                              v18 = v214;
                              v2 = v209;
                              goto LABEL_115;
                            }
                            v205 = v248;
                          }
                          WTF::AtomStringImpl::addLiteral();
                          v118 = v216;
                          v119 = JSC::JSObject::get(v2, a1, (unint64_t)v216);
                          if (v118)
                          {
                            if (*(_DWORD *)v118 == 2)
                              WTF::StringImpl::destroy(v118, v8);
                            else
                              *(_DWORD *)v118 -= 2;
                          }
                          if (*(_DWORD *)(v5 + 80)
                            && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
                          {
                            goto LABEL_397;
                          }
                          if (v119 != 10)
                          {
                            v246 = (void (***)(WebCore::KeyboardEvent *__hidden))v119;
                            v120 = (JSC::VM *)*((_QWORD *)a1 + 7);
                            if ((v119 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v119 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v246, a1);
                            }
                            else
                            {
                              v121 = *(_QWORD *)(v119 + 8);
                              if ((v121 & 1) != 0)
                                v121 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v119, a1);
                              if (v121)
                                *(_DWORD *)v121 += 2;
                              v243 = (WTF::StringImpl *)v121;
                            }
                            if (*((_DWORD *)v120 + 20))
                            {
                              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v120);
                              v18 = v243;
                              if (hasExceptionsAfterHandlingTraps)
                              {
                                LODWORD(v217) = 1;
                                v243 = 0;
                                if (v18)
                                {
                                  if (*(_DWORD *)v18 == 2)
                                    WTF::StringImpl::destroy(v18, v8);
                                  else
                                    *(_DWORD *)v18 -= 2;
                                }
                                v18 = 0;
                                v5 = 0;
                                v27 = 0;
                                v239 = 1;
                                goto LABEL_359;
                              }
                            }
                            else
                            {
                              v18 = v243;
                            }
                            LODWORD(v217) = 0;
                            v216 = 0;
LABEL_18:
                            WTF::AtomStringImpl::addLiteral();
                            v19 = (WTF::StringImpl *)v246;
                            v5 = JSC::JSObject::get(v2, a1, (unint64_t)v246);
                            if (v19)
                            {
                              if (*(_DWORD *)v19 == 2)
                                WTF::StringImpl::destroy(v19, v20);
                              else
                                *(_DWORD *)v19 -= 2;
                            }
                            if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
                              goto LABEL_358;
                            if (v5 == 10)
                            {
                              v204 = 0;
                              goto LABEL_29;
                            }
                            v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
                            if (v5 >= 0xFFFE000000000000)
                              goto LABEL_446;
                            *(_QWORD *)&v22 = v5 - 0x2000000000000;
                            if (v5 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                            {
                              if (v22 <= 0.0)
                              {
                                v23 = v22 < 0.0;
                                goto LABEL_28;
                              }
                            }
                            else
                            {
                              if ((v5 & 0xFFFE000000000002) != 0)
                              {
                                v23 = v5 == 7;
                                goto LABEL_28;
                              }
                              v149 = *(unsigned __int8 *)(v5 + 5);
                              if (v149 == 3)
                              {
                                v152 = *(_DWORD *)(v5 + 8);
LABEL_584:
                                v148 = v152 == 0;
                                goto LABEL_447;
                              }
                              if (v149 == 2)
                              {
                                v150 = *(_QWORD *)(v5 + 8);
                                if ((v150 & 1) != 0)
                                  v151 = (int *)(v5 + 16);
                                else
                                  v151 = (int *)(v150 + 4);
                                v152 = *v151;
                                goto LABEL_584;
                              }
                              if ((*(_BYTE *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                              {
                                v148 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                                goto LABEL_447;
                              }
                            }
                            v23 = 1;
                            goto LABEL_28;
                          }
                          v17 = 0;
                          v16 = v215;
LABEL_15:
                          v18 = *(WTF::StringImpl **)v10;
                          if (*(_QWORD *)v10)
                            *(_DWORD *)v18 += 2;
                          LODWORD(v217) = 0;
                          v216 = 0;
                          v215 = v16;
                          if ((v17 & 1) != 0)
                          {
                            v204 = 0;
                            v26 = 1;
                            goto LABEL_35;
                          }
                          goto LABEL_18;
                        }
                        v113 = (JSC::VM *)*((_QWORD *)a1 + 7);
                        if (v111 >= 0xFFFE000000000000)
                        {
                          v198 = (_DWORD)v111 == 0;
                          goto LABEL_567;
                        }
                        *(_QWORD *)&v114 = v111 - 0x2000000000000;
                        if (v111 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                        {
                          if (v114 <= 0.0)
                          {
                            v112 = v114 < 0.0;
                            goto LABEL_252;
                          }
                        }
                        else
                        {
                          if ((v111 & 0xFFFE000000000002) != 0)
                          {
                            v112 = v111 == 7;
                            goto LABEL_252;
                          }
                          v199 = *(unsigned __int8 *)(v111 + 5);
                          if (v199 == 3)
                          {
                            v202 = *(_DWORD *)(v111 + 8);
LABEL_634:
                            v198 = v202 == 0;
                            goto LABEL_567;
                          }
                          if (v199 == 2)
                          {
                            v200 = *(_QWORD *)(v111 + 8);
                            if ((v200 & 1) != 0)
                              v201 = (int *)(v111 + 16);
                            else
                              v201 = (int *)(v200 + 4);
                            v202 = *v201;
                            goto LABEL_634;
                          }
                          if ((*(_BYTE *)(16 * (*(_DWORD *)v111 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                          {
                            v198 = *(_QWORD *)(16 * (*(_DWORD *)v111 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_567:
                            v112 = !v198;
LABEL_252:
                            if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
                              goto LABEL_395;
                            goto LABEL_253;
                          }
                        }
                        v112 = 1;
                        goto LABEL_252;
                      }
                    }
                    v109 = 1;
                    goto LABEL_241;
                  }
                }
                v104 = 1;
                goto LABEL_230;
              }
            }
            v99 = 1;
            goto LABEL_219;
          }
        }
        v94 = 1;
        goto LABEL_208;
      }
    }
    v89 = 1;
    goto LABEL_197;
  }
LABEL_347:
  v239 = 1;
  v18 = v214;
  while (1)
  {
    v49 = v239;
    if (v239)
      break;
    if (!v241)
    {
      v50 = v240;
      v240 = 0;
      v243 = (WTF::StringImpl *)v50;
      LOWORD(v216) = v227;
      BYTE2(v216) = v228;
      v217 = v229;
      v218 = v230;
      v219 = v231;
      v220 = v232;
      v51 = v233;
      v229 = 0;
      v233 = 0uLL;
      *(_OWORD *)v221 = v51;
      v223 = v235;
      v222 = v234;
      v226 = v238;
      v52 = v236;
      v236 = 0;
      v224 = v52;
      v225 = v237;
      WebCore::KeyboardEvent::create(&v243, (unsigned __int8 *)&v216, 0, (uint64_t *)&v246);
      v55 = v224;
      v224 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v53);
        else
          *(_DWORD *)v55 -= 2;
      }
      v56 = v221[1];
      v221[1] = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v53);
        else
          *(_DWORD *)v56 -= 2;
      }
      v57 = v221[0];
      v221[0] = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v53);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = v217;
      v217 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
        {
          v122 = (uint64_t *)*((_QWORD *)v58 + 2);
          *((_QWORD *)v58 + 2) = 0;
          if (v122)
          {
            if (*v122)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v122, v53);
            WTF::fastFree((WTF *)v122, v53);
          }
          v123 = (unsigned int *)*((_QWORD *)v58 + 1);
          *((_QWORD *)v58 + 1) = 0;
          if (v123)
          {
            do
            {
              v124 = __ldaxr(v123);
              v125 = v124 - 1;
            }
            while (__stlxr(v125, v123));
            if (!v125)
            {
              atomic_store(1u, v123);
              WTF::fastFree((WTF *)v123, v53);
            }
          }
          WTF::fastFree(v58, v53);
        }
        else
        {
          --*(_DWORD *)v58;
        }
      }
      v59 = v243;
      v243 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v53);
        else
          *(_DWORD *)v59 -= 2;
      }
      if (*v246 != off_1E33A5590)
      {
        __break(0xC471u);
        JUMPOUT(0x194CBE004);
      }
      v60 = (JSCell *)WebCore::createWrapper<WebCore::KeyboardEvent,WebCore::KeyboardEvent>(*(WebCore::JSKeyboardEvent ***)(v212 + 40), (uint64_t *)&v246, v54);
      v61 = (JSC::JSCell *)*((_QWORD *)v18 + 5);
      if (((unint64_t)v61 & 0xFFFE000000000002) == 0)
      {
        v62 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v61);
        if (v62)
        {
          v64 = v62;
          if (v62 != *((JSC::JSGlobalObject **)v18 + 3))
          {
            v141 = (WebCore::JSKeyboardEvent *)*((_QWORD *)a1 + 7);
            FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v62, v63);
            if (!*((_DWORD *)v141 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v141) & 1) == 0)
            {
              v144 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSKeyboardEvent>(v141, FunctionRealm, v142);
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v64, v144, v145);
              if (!*((_DWORD *)v141 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v141) & 1) == 0)
                JSC::JSObject::setStructure(v60, v141, SubclassStructure);
            }
          }
        }
      }
      if (*((_DWORD *)v213 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v213) & 1) != 0)
        v60 = 0;
      v65 = v246;
      v246 = 0;
      if (v65)
      {
        if (*((_DWORD *)v65 + 4) == 1)
          (*v65)[1]((WebCore::KeyboardEvent *)v65);
        else
          --*((_DWORD *)v65 + 4);
      }
      goto LABEL_141;
    }
    v21 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_446:
    v148 = (_DWORD)v5 == 0;
LABEL_447:
    v23 = !v148;
LABEL_28:
    v204 = v23;
    if (!*((_DWORD *)v21 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    {
LABEL_29:
      WTF::AtomStringImpl::addLiteral();
      v24 = (WTF::StringImpl *)v246;
      v25 = JSC::JSObject::get(v2, a1, (unint64_t)v246);
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v8);
        else
          *(_DWORD *)v24 -= 2;
      }
      if (!*((_DWORD *)v249 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v249))
      {
        if (v25 == 10)
        {
          v26 = 0;
LABEL_35:
          v27 = *(WTF::StringImpl **)v10;
          if (*(_QWORD *)v10)
            *(_DWORD *)v27 += 2;
          v247 = 0;
          v246 = 0;
          if ((v26 & 1) != 0)
          {
            v10 = 0;
            v245 = 0;
            v28 = 1;
            goto LABEL_63;
          }
LABEL_49:
          WTF::AtomStringImpl::addLiteral();
          v31 = v243;
          v33 = JSC::JSObject::get(v2, a1, (unint64_t)v243);
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v32);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
            goto LABEL_363;
          if (v33 == 10)
          {
            v10 = 0;
            v245 = 0;
          }
          else
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v33, &v245);
            if (HIDWORD(v245))
              goto LABEL_363;
            v10 = v245;
          }
          WTF::AtomStringImpl::addLiteral();
          v34 = v243;
          v35 = JSC::JSObject::get(v2, a1, (unint64_t)v243);
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v8);
            else
              *(_DWORD *)v34 -= 2;
          }
          if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
          {
LABEL_363:
            v5 = 0;
            v239 = 1;
            goto LABEL_364;
          }
          if (v35 == 10)
          {
            v28 = 0;
LABEL_63:
            v5 = *MEMORY[0x1E0CBF3B8];
            if (*MEMORY[0x1E0CBF3B8])
              *(_DWORD *)v5 += 2;
            v244 = 0;
            v243 = 0;
            if ((v28 & 1) == 0)
            {
              v203 = v10;
              goto LABEL_69;
            }
            v41 = v7;
            v38 = 0;
            v42 = 0;
            v242 = 0;
            v2 = v209;
            v46 = v204;
LABEL_94:
            v47 = 0;
            v250[0] = 0;
LABEL_97:
            v48 = 0;
            LOBYTE(v227) = BYTE4(v211);
            HIBYTE(v227) = v211;
            v228 = v210;
            v229 = v2;
            v230 = v215;
            LOBYTE(v231) = v208;
            BYTE1(v231) = v206;
            BYTE2(v231) = BYTE4(v208);
            HIBYTE(v231) = BYTE4(v207);
            LOBYTE(v232) = v207;
            HIBYTE(v232) = BYTE4(v206);
            *(_QWORD *)&v233 = v27;
            *((_QWORD *)&v233 + 1) = v18;
            v234 = v38;
            LOBYTE(v235) = v42;
            HIBYTE(v235) = v46;
            v236 = (WTF::StringImpl *)v5;
            v237 = __PAIR64__(v10, v205);
            v238 = v47;
            v18 = 0;
            v5 = 0;
            v27 = 0;
            v2 = 0;
            goto LABEL_98;
          }
          WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, v35, (uint64_t)&v243);
          if (v244)
          {
            v5 = 0;
            goto LABEL_406;
          }
          v203 = v10;
          v5 = (unint64_t)v243;
          v243 = 0;
LABEL_69:
          WTF::AtomStringImpl::addLiteral();
          v10 = v250[0];
          v37 = JSC::JSObject::get(v2, a1, v250[0]);
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v10, v36);
            else
              *(_DWORD *)v10 -= 2;
          }
          if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
            goto LABEL_406;
          if (v37 == 10)
          {
            v38 = 0;
            v242 = 0;
          }
          else
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v37, &v242);
            if (HIDWORD(v242))
              goto LABEL_406;
            v38 = v242;
          }
          WTF::AtomStringImpl::addLiteral();
          v10 = v250[0];
          v40 = JSC::JSObject::get(v2, a1, v250[0]);
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v10, v39);
            else
              *(_DWORD *)v10 -= 2;
          }
          if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
          {
LABEL_406:
            v239 = 1;
            goto LABEL_407;
          }
          if (v40 == 10)
          {
            v41 = v7;
            v42 = 0;
            goto LABEL_88;
          }
          v43 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v40 >= 0xFFFE000000000000)
          {
            v41 = v7;
            v153 = (_DWORD)v40 == 0;
            goto LABEL_459;
          }
          *(_QWORD *)&v44 = v40 - 0x2000000000000;
          v41 = v7;
          if (v40 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v44 <= 0.0)
            {
              v42 = v44 < 0.0;
              goto LABEL_87;
            }
          }
          else
          {
            if ((v40 & 0xFFFE000000000002) != 0)
            {
              v42 = v40 == 7;
              goto LABEL_87;
            }
            v154 = *(unsigned __int8 *)(v40 + 5);
            if (v154 == 3)
            {
              v157 = *(_DWORD *)(v40 + 8);
              goto LABEL_588;
            }
            if (v154 == 2)
            {
              v155 = *(_QWORD *)(v40 + 8);
              if ((v155 & 1) != 0)
                v156 = (int *)(v40 + 16);
              else
                v156 = (int *)(v155 + 4);
              v157 = *v156;
LABEL_588:
              v153 = v157 == 0;
LABEL_459:
              v42 = !v153;
LABEL_87:
              if (*((_DWORD *)v43 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v43))
              {
                v239 = 1;
                v7 = v41;
LABEL_407:
                v2 = v209;
              }
              else
              {
LABEL_88:
                WTF::AtomStringImpl::addLiteral();
                v10 = v250[0];
                v45 = JSC::JSObject::get(v2, a1, v250[0]);
                v2 = v209;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v10, v8);
                  else
                    *(_DWORD *)v10 -= 2;
                }
                if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
                {
                  v239 = 1;
                }
                else
                {
                  if (v45 == 10)
                  {
                    v10 = v203;
                    v46 = v204;
                    goto LABEL_94;
                  }
                  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v45, v250);
                  v10 = v203;
                  if (!HIDWORD(v250[0]))
                  {
                    v47 = v250[0];
                    v46 = v204;
                    goto LABEL_97;
                  }
                  v48 = 1;
LABEL_98:
                  v239 = v48;
                }
                v7 = v41;
              }
              if (v244 != -1)
                ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32A9100[v244])(v250, &v243);
LABEL_102:
              if (v247 != -1)
                ((void (*)(WTF::StringImpl **, void (****)(WebCore::KeyboardEvent *__hidden)))off_1E32A90E0[v247])(&v243, &v246);
              goto LABEL_104;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v153 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_459;
            }
          }
          v42 = 1;
          goto LABEL_87;
        }
        v243 = (WTF::StringImpl *)v25;
        v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if ((v25 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v25 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v243, a1);
        }
        else
        {
          v30 = *(_QWORD *)(v25 + 8);
          if ((v30 & 1) != 0)
            v30 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, a1);
          if (v30)
            *(_DWORD *)v30 += 2;
          v250[0] = v30;
        }
        if (*((_DWORD *)v29 + 20))
        {
          v139 = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
          v27 = (WTF::StringImpl *)v250[0];
          if (v139)
          {
            v247 = 1;
            v250[0] = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v8);
              else
                *(_DWORD *)v27 -= 2;
            }
            v5 = 0;
            v27 = 0;
            v239 = 1;
LABEL_364:
            v2 = v209;
            goto LABEL_102;
          }
        }
        else
        {
          v27 = (WTF::StringImpl *)v250[0];
        }
        v247 = 0;
        v246 = 0;
        goto LABEL_49;
      }
    }
LABEL_358:
    v5 = 0;
    v27 = 0;
    v239 = 1;
LABEL_359:
    v2 = v209;
LABEL_104:
    if ((_DWORD)v217 != -1)
      ((void (*)(void (****)(WebCore::KeyboardEvent *__hidden), WTF::StringImpl **))off_1E32A90E0[v217])(&v246, &v216);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v5, v8);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v8);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (v27)
    {
      v18 = v214;
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v8);
      else
        *(_DWORD *)v27 -= 2;
    }
    else
    {
      v18 = v214;
    }
LABEL_115:
    if (v2)
    {
      if (*(_DWORD *)v2 == 1)
      {
        v126 = (uint64_t *)*((_QWORD *)v2 + 2);
        *((_QWORD *)v2 + 2) = 0;
        if (v126)
        {
          if (*v126)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v126, v8);
          WTF::fastFree((WTF *)v126, v8);
        }
        v127 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v127)
        {
          do
          {
            v128 = __ldaxr(v127);
            v129 = v128 - 1;
          }
          while (__stlxr(v129, v127));
          if (!v129)
          {
            atomic_store(1u, v127);
            WTF::fastFree((WTF *)v127, v8);
          }
        }
        WTF::fastFree(v2, v8);
      }
      else
      {
        --*(_DWORD *)v2;
      }
    }
  }
  v60 = 0;
  v66 = 0;
  if (v239 != -1)
  {
LABEL_141:
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E32ABD10[v49])(&v216, &v227);
    v66 = v60;
  }
  v9 = v241;
LABEL_143:
  if (v9 != -1)
    ((void (*)(__int16 *, unint64_t *))off_1E32A9100[v9])(&v227, &v240);
  return v66;
}

JSC::VM *WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000001, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::getDOMStructure<WebCore::JSKeyboardEvent>((WebCore::JSKeyboardEvent *)a2, a3, v11);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v12 + 48), 14);
  return JSC::reifyStaticProperties<4u>((JSC::VM *)a2, (uint64_t)&WebCore::JSKeyboardEvent::s_info, &WebCore::JSKeyboardEventConstructorTableValues, (JSC::JSObject *)a1);
}

WTF::StringImpl *WebCore::JSKeyboardEventPrototype::finishCreation(WebCore::JSKeyboardEventPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<19u>(a2, (uint64_t)&WebCore::JSKeyboardEvent::s_info, (uint64_t)&WebCore::JSKeyboardEventPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSKeyboardEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSUIEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSKeyboardEvent::createPrototype(WebCore::JSKeyboardEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSKeyboardEventPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSKeyboardEventPrototype::create(WebCore::JSKeyboardEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSKeyboardEventPrototype::finishCreation((WebCore::JSKeyboardEventPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::JSKeyboardEvent::getConstructor(WebCore::JSKeyboardEvent *this, JSC::VM *a2, const JSC::JSGlobalObject *a3)
{
  uint64_t v4;
  unint64_t result;
  JSC::JSCell *v7;
  JSC::JSCell *v8;
  uint64_t Structure;
  uint64_t v10;
  JSC::Heap *v11;
  unint64_t v12;
  JSC::JSCell *v13;

  v4 = *((_QWORD *)a2 + 414);
  result = *(_QWORD *)(v4 + 3656);
  if (!result)
  {
    v7 = *(JSC::JSCell **)(v4 + 3968);
    if (!v7)
    {
      v8 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>((uint64_t)this, (uint64_t)a2);
      Structure = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)this, (int)a2, v8);
      v7 = (JSC::JSCell *)WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create((uint64_t)this, Structure, a2);
      *(_QWORD *)(*((_QWORD *)a2 + 414) + 3968) = v7;
      if (v7)
      {
        if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
        {
          v13 = v7;
          JSC::Heap::writeBarrierSlowPath((WebCore::JSKeyboardEvent *)((char *)this + 192), (const JSCell *)a2);
          v7 = v13;
        }
      }
    }
    v10 = WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::createStructure((uint64_t *)this, (int)a2, v7);
    result = WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::create((uint64_t)this, v10, a2);
    *(_QWORD *)(*((_QWORD *)a2 + 414) + 3656) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
      {
        v11 = (WebCore::JSKeyboardEvent *)((char *)this + 192);
        v12 = result;
        JSC::Heap::writeBarrierSlowPath(v11, (const JSCell *)a2);
        return v12;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsKeyboardEventConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  JSC::JSCell *v6;
  JSC::JSCell *v7;
  uint64_t Structure;
  uint64_t v9;
  JSC::Heap *v10;
  unint64_t v11;
  JSC::JSCell *v12;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSKeyboardEventPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 3312);
  result = *(_QWORD *)(v4 + 3656);
  if (!result)
  {
    v6 = *(JSC::JSCell **)(v4 + 3968);
    if (!v6)
    {
      v7 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(v2, v3);
      Structure = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)v2, v3, v7);
      v6 = (JSC::JSCell *)WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create(v2, Structure, (JSC::VM *)v3);
      *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3968) = v6;
      if (v6)
      {
        if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
        {
          v12 = v6;
          JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v2 + 192), (const JSCell *)v3);
          v6 = v12;
        }
      }
    }
    v9 = WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::createStructure((uint64_t *)v2, v3, v6);
    result = WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::create(v2, v9, (JSC::VM *)v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3656) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v10 = (JSC::Heap *)(v2 + 192);
        v11 = result;
        JSC::Heap::writeBarrierSlowPath(v10, (const JSCell *)v3);
        return v11;
      }
    }
  }
  return result;
}

uint64_t WebCore::jsKeyboardEvent_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsKeyboardEvent_code(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsKeyboardEvent_location(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 120);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsKeyboardEvent_ctrlKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 2) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsKeyboardEvent_shiftKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 8) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsKeyboardEvent_altKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 1) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsKeyboardEvent_metaKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 4) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsKeyboardEvent_repeat(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 124))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsKeyboardEvent_isComposing(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 125))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsKeyboardEvent_keyIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsKeyboardEvent_charCode(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = WebCore::KeyboardEvent::charCode(*(WebCore::KeyboardEvent **)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsKeyboardEvent_keyCode(WebCore *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  WebCore *v5;
  WebCore::KeyboardEvent *v6;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 140))
  {
    v3 = *(_DWORD *)(v2 + 136);
  }
  else
  {
    v6 = *(WebCore::KeyboardEvent **)(a2 + 24);
    if (!*(_QWORD *)(v2 + 88))
    {
      v3 = 0;
      return v3 | 0xFFFE000000000000;
    }
    v5 = (WebCore *)WebCore::eventNames(a1);
    if (*((_QWORD *)v6 + 3) == *((_QWORD *)v5 + 131)
      || *((_QWORD *)v6 + 3) == *(_QWORD *)(WebCore::eventNames(v5) + 1072))
    {
      v3 = *(_DWORD *)(*((_QWORD *)v6 + 11) + 96);
      if (v3 - 160 < 6)
      {
        v3 = dword_1968C0190[v3 - 160];
        return v3 | 0xFFFE000000000000;
      }
    }
    else
    {
      v3 = WebCore::KeyboardEvent::charCode(v6);
    }
  }
  if ((v3 & 0x80000000) != 0)
    return COERCE__INT64((double)v3) + 0x2000000000000;
  return v3 | 0xFFFE000000000000;
}

uint64_t WebCore::JSKeyboardEvent::subspaceForImpl(WebCore::JSKeyboardEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3736);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3736))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 3736);
    *(_QWORD *)(v9 + 3736) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 3736);
  *(_QWORD *)(v3 + 3736) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

void WebCore::convertDictionary<WebCore::KeyframeAnimationOptions>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  double v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unsigned __int16 v37;
  int v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  double v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  double v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  unsigned __int16 v53;
  JSC::VM *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  unsigned __int16 v58;
  JSC::VM *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  JSC::VM *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v82;
  int v83;
  JSC::VM *v84;
  unsigned __int16 v85;
  _DWORD *v86;
  int v87;
  __int128 v88;
  __int128 v89;
  _DWORD *v90;
  int v91;
  int v92;
  int v93;
  char hasExceptionsAfterHandlingTraps;
  char v95;
  char v96;
  char v97;
  int v98;
  double v99;
  double v100;
  double v101;
  double v102;
  WTF::StringImpl *v103;
  int v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  int v108;
  __int128 v109;
  __int128 v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113[2];
  _DWORD *v114;
  char v115;
  uint64_t v116;
  JSC::VM *v117;
  WTF::StringImpl *v118;
  int v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  int v124;
  int v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v117 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_5;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
    {
LABEL_5:
      v8 = WebCore::autoAtomData;
      if (WebCore::autoAtomData)
        *(_DWORD *)WebCore::autoAtomData += 2;
      v107 = v8;
      v108 = 1;
      v109 = 0uLL;
      *(_QWORD *)&v110 = 0;
      *((_QWORD *)&v110 + 1) = 0x3FF0000000000000;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v111 = v122;
      v112 = 4;
      v115 = 0;
      v116 = 0;
      v113[0] = 0;
      v113[1] = 0;
      LOBYTE(v114) = 0;
      if (v6 == 2)
      {
        *(_QWORD *)&v109 = 0;
        goto LABEL_32;
      }
      WTF::AtomStringImpl::addLiteral();
      v10 = (WTF::StringImpl *)JSC::JSObject::get(Object, a2, (unint64_t)v122);
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
          WTF::StringImpl::destroy(v122, v9);
        else
          *(_DWORD *)v122 -= 2;
      }
      if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
      {
        v11 = 0.0;
        if (v10 == (WTF::StringImpl *)10)
          goto LABEL_19;
        v122 = v10;
        v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v118 = v12;
        if ((unint64_t)v10 >= 0xFFFE000000000000)
        {
          v11 = (double)(int)v10;
        }
        else if ((unint64_t)v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v122, a2);
        }
        else
        {
          *(_QWORD *)&v11 = (char *)v10 - 0x2000000000000;
        }
        if (*((_DWORD *)v12 + 20))
        {
          v99 = v11;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
          v11 = v99;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            goto LABEL_278;
        }
        if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
LABEL_19:
          *(double *)&v109 = v11;
          WTF::AtomStringImpl::addLiteral();
          v13 = v122;
          v15 = JSC::JSObject::get(Object, a2, (unint64_t)v122);
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v14);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
            goto LABEL_278;
          if (v15 == 10)
          {
            LOBYTE(v16) = 0;
          }
          else
          {
            v122 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
            v17 = v122;
            v16 = WebCore::parseEnumeration<WebCore::PlaybackDirection>(a2, v15);
            if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
              goto LABEL_278;
            if (v16 <= 0xFFu)
            {
              JSC::throwTypeError();
              goto LABEL_278;
            }
          }
          BYTE1(v112) = v16;
          WTF::AtomStringImpl::addLiteral();
          v18 = v122;
          v20 = JSC::JSObject::get(Object, a2, (unint64_t)v122);
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v19);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
          {
            if (v20 != 10)
            {
              WebCore::Converter<WebCore::IDLUnion<WebCore::IDLUnrestrictedDouble,WebCore::IDLDOMString>>::convert(a2, v20, (uint64_t)&v122);
              v38 = v125;
              if (v125)
              {
                *(_DWORD *)(a3 + 112) = 1;
LABEL_201:
                if (v38 != -1)
                  ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32AC0E8[v38])(&v118, &v123);
                goto LABEL_203;
              }
              v21 = v124;
              LOBYTE(v118) = 0;
              v119 = -1;
              if (v124 == -1)
              {
                if (v108 == -1)
                  goto LABEL_37;
                ((void (*)(uint64_t **, uint64_t *))off_1E32AC0B8[v108])(&v105, &v107);
                v108 = -1;
LABEL_34:
                if (v119 != -1)
                  ((void (*)(uint64_t **, WTF::StringImpl **))off_1E32AC0B8[v119])(&v105, &v118);
                if (v6 == 2)
                {
LABEL_42:
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v25 = v118;
LABEL_51:
                  v106 = 0;
                  v105 = 0;
                  v28 = v111;
                  v111 = v25;
                  if (v28)
                  {
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, v23);
                    else
                      *(_DWORD *)v28 -= 2;
                  }
                  if (v6 == 2)
                  {
                    LOBYTE(v112) = 4;
                    *((_QWORD *)&v109 + 1) = 0;
                    *(_QWORD *)&v110 = 0;
                    *((_QWORD *)&v110 + 1) = 0x3FF0000000000000;
                    HIWORD(v112) = 0;
                    goto LABEL_119;
                  }
                  WTF::AtomStringImpl::addLiteral();
                  v29 = v118;
                  v31 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 2)
                      WTF::StringImpl::destroy(v29, v30);
                    else
                      *(_DWORD *)v29 -= 2;
                  }
                  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                    goto LABEL_290;
                  v32 = 0.0;
                  if (v31 == 10)
                    goto LABEL_66;
                  v118 = (WTF::StringImpl *)v31;
                  v33 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                  v103 = v33;
                  if (v31 >= 0xFFFE000000000000)
                  {
                    v32 = (double)(int)v31;
                  }
                  else if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                  {
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v118, a2);
                  }
                  else
                  {
                    *(_QWORD *)&v32 = v31 - 0x2000000000000;
                  }
                  if (*((_DWORD *)v33 + 20))
                  {
                    v100 = v32;
                    v95 = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
                    v32 = v100;
                    if ((v95 & 1) != 0)
                      goto LABEL_290;
                  }
                  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                  {
LABEL_66:
                    *((double *)&v109 + 1) = v32;
                    WTF::AtomStringImpl::addLiteral();
                    v34 = v118;
                    v36 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, v35);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                      goto LABEL_290;
                    if (v36 == 10)
                    {
                      LOBYTE(v37) = 4;
                    }
                    else
                    {
                      v118 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                      v39 = v118;
                      v37 = WebCore::parseEnumeration<WebCore::FillMode>(a2, v36);
                      if (*((_DWORD *)v39 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
                        goto LABEL_290;
                      if (v37 <= 0xFFu)
                        goto LABEL_239;
                    }
                    LOBYTE(v112) = v37;
                    WTF::AtomStringImpl::addLiteral();
                    v40 = v118;
                    v42 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 2)
                        WTF::StringImpl::destroy(v40, v41);
                      else
                        *(_DWORD *)v40 -= 2;
                    }
                    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                      goto LABEL_290;
                    v43 = 0.0;
                    if (v42 == 10)
                      goto LABEL_88;
                    v118 = (WTF::StringImpl *)v42;
                    v44 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                    v103 = v44;
                    if (v42 >= 0xFFFE000000000000)
                    {
                      v43 = (double)(int)v42;
                    }
                    else if (v42 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v118, a2);
                    }
                    else
                    {
                      *(_QWORD *)&v43 = v42 - 0x2000000000000;
                    }
                    if (*((_DWORD *)v44 + 20))
                    {
                      v101 = v43;
                      v96 = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
                      v43 = v101;
                      if ((v96 & 1) != 0)
                        goto LABEL_290;
                    }
                    if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                    {
LABEL_88:
                      *(double *)&v110 = v43;
                      WTF::AtomStringImpl::addLiteral();
                      v45 = v118;
                      v47 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                      if (v45)
                      {
                        if (*(_DWORD *)v45 == 2)
                          WTF::StringImpl::destroy(v45, v46);
                        else
                          *(_DWORD *)v45 -= 2;
                      }
                      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                        goto LABEL_290;
                      v48 = 1.0;
                      if (v47 != 10)
                      {
                        v118 = (WTF::StringImpl *)v47;
                        v49 = (JSC::VM *)*((_QWORD *)a2 + 7);
                        if (v47 >= 0xFFFE000000000000)
                        {
                          v48 = (double)(int)v47;
                        }
                        else if (v47 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                        {
                          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v118, a2);
                        }
                        else
                        {
                          *(_QWORD *)&v48 = v47 - 0x2000000000000;
                        }
                        if (*((_DWORD *)v49 + 20))
                        {
                          v102 = v48;
                          v97 = JSC::VM::hasExceptionsAfterHandlingTraps(v49);
                          v48 = v102;
                          if ((v97 & 1) != 0)
                            goto LABEL_290;
                        }
                      }
                      *((double *)&v110 + 1) = v48;
                      WTF::AtomStringImpl::addLiteral();
                      v50 = v118;
                      v52 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                      if (v50)
                      {
                        if (*(_DWORD *)v50 == 2)
                          WTF::StringImpl::destroy(v50, v51);
                        else
                          *(_DWORD *)v50 -= 2;
                      }
                      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                        goto LABEL_290;
                      if (v52 == 10)
                      {
                        LOBYTE(v53) = 0;
                      }
                      else
                      {
                        v118 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                        v54 = v118;
                        v53 = WebCore::parseEnumeration<WebCore::CompositeOperation>(a2, v52);
                        if (*((_DWORD *)v54 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v54) & 1) != 0)
                          goto LABEL_290;
                        if (v53 <= 0xFFu)
                          goto LABEL_239;
                      }
                      HIBYTE(v112) = v53;
                      WTF::AtomStringImpl::addLiteral();
                      v55 = v118;
                      v57 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                      if (v55)
                      {
                        if (*(_DWORD *)v55 == 2)
                          WTF::StringImpl::destroy(v55, v56);
                        else
                          *(_DWORD *)v55 -= 2;
                      }
                      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                        goto LABEL_290;
                      if (v57 == 10)
                      {
                        LOBYTE(v58) = 0;
                        goto LABEL_113;
                      }
                      v118 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                      v59 = v118;
                      v58 = WebCore::parseEnumeration<WebCore::IterationCompositeOperation>(a2, v57);
                      if (*((_DWORD *)v59 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
                      {
LABEL_290:
                        v92 = 0;
LABEL_291:
                        *(_DWORD *)(a3 + 112) = 1;
LABEL_199:
                        ((void (*)(WTF::StringImpl **, uint64_t **))off_1E32A90E0[v92])(&v118, &v105);
LABEL_200:
                        v38 = v125;
                        goto LABEL_201;
                      }
                      if (v58 > 0xFFu)
                      {
LABEL_113:
                        BYTE2(v112) = v58;
                        WTF::AtomStringImpl::addLiteral();
                        v60 = v118;
                        v61 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                        if (v60)
                        {
                          if (*(_DWORD *)v60 == 2)
                            WTF::StringImpl::destroy(v60, v23);
                          else
                            *(_DWORD *)v60 -= 2;
                        }
                        if (!*((_DWORD *)v5 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) == 0)
                        {
                          if (v61 != 10 && (v61 & 0xFFFFFFFFFFFFFFF7) != 2)
                          {
                            WebCore::valueToUSVString(a2, v61, (uint64_t)&v118);
                            LOBYTE(v103) = 0;
                            v104 = -1;
                            v91 = v119;
                            if (v119 == -1)
                            {
                              v91 = -1;
                            }
                            else
                            {
                              ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))off_1E32A9688[v119])(&v121, &v103, &v118);
                              v104 = v91;
                              if (v119 != -1)
                              {
                                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v119])(&v121, &v118);
                                v91 = v104;
                              }
                              if (!v91)
                              {
                                v62 = v103;
LABEL_120:
                                v103 = 0;
                                v63 = v113[0];
                                v113[0] = v62;
                                if (v63)
                                {
                                  if (*(_DWORD *)v63 == 2)
                                    WTF::StringImpl::destroy(v63, v23);
                                  else
                                    *(_DWORD *)v63 -= 2;
                                }
                                v64 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
                                if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 136))(v64)
                                                + 472) & 0x20000) == 0)
                                  goto LABEL_132;
                                if (v6 == 2)
                                  goto LABEL_130;
                                WTF::AtomStringImpl::addLiteral();
                                v65 = v118;
                                v66 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                                if (v65)
                                {
                                  if (*(_DWORD *)v65 == 2)
                                    WTF::StringImpl::destroy(v65, v23);
                                  else
                                    *(_DWORD *)v65 -= 2;
                                }
                                if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                                  goto LABEL_161;
                                if (v66 == 10)
                                {
LABEL_130:
                                  v67 = 0x100000000;
LABEL_131:
                                  v116 = v67;
LABEL_132:
                                  if (v6 == 2)
                                    goto LABEL_138;
                                  WTF::AtomStringImpl::addLiteral();
                                  v68 = v118;
                                  v69 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                                  if (v68)
                                  {
                                    if (*(_DWORD *)v68 == 2)
                                      WTF::StringImpl::destroy(v68, v23);
                                    else
                                      *(_DWORD *)v68 -= 2;
                                  }
                                  if (*((_DWORD *)v5 + 20)
                                    && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                                  {
                                    goto LABEL_161;
                                  }
                                  if (v69 == 10)
                                  {
LABEL_138:
                                    v70 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                                    if (*MEMORY[0x1E0CBF738])
                                      *(_DWORD *)v70 += 2;
LABEL_148:
                                    v119 = 0;
                                    v118 = 0;
                                    v73 = v113[1];
                                    v113[1] = v70;
                                    if (v73)
                                    {
                                      if (*(_DWORD *)v73 == 2)
                                        WTF::StringImpl::destroy(v73, v23);
                                      else
                                        *(_DWORD *)v73 -= 2;
                                    }
                                    if (v6 != 2)
                                    {
                                      WTF::AtomStringImpl::addLiteral();
                                      v74 = v121;
                                      v76 = JSC::JSObject::get(Object, a2, (unint64_t)v121);
                                      if (v74)
                                      {
                                        if (*(_DWORD *)v74 == 2)
                                          WTF::StringImpl::destroy(v74, v75);
                                        else
                                          *(_DWORD *)v74 -= 2;
                                      }
                                      if (*((_DWORD *)v117 + 20)
                                        && (JSC::VM::hasExceptionsAfterHandlingTraps(v117) & 1) != 0)
                                      {
                                        goto LABEL_172;
                                      }
                                      if (v76 != 10)
                                      {
                                        if ((v76 & 0xFFFFFFFFFFFFFFF7) == 2)
                                        {
                                          v77 = 0;
                                        }
                                        else
                                        {
                                          v121 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                                          if ((v76 & 0xFFFE000000000002) != 0)
                                            goto LABEL_171;
                                          v78 = *(unsigned int *)(16 * (*(_DWORD *)v76 & 0xFFFFFFFE) + 0x4C);
                                          v79 = *(_DWORD *)(16 * (*(_DWORD *)v76 & 0xFFFFFFFE) + 0x4C) != 0;
                                          if ((_DWORD)v78)
                                          {
                                            v80 = 16 * v78;
                                            if ((char **)v80 != &WebCore::JSAnimationTimeline::s_info)
                                            {
                                              do
                                              {
                                                v80 = *(_QWORD *)(v80 + 16);
                                                v79 = v80 != 0;
                                              }
                                              while ((char **)v80 != &WebCore::JSAnimationTimeline::s_info && v80 != 0);
                                            }
                                          }
                                          if (!v79 || (v77 = *(_DWORD **)(v76 + 24)) == 0)
                                          {
LABEL_171:
                                            JSC::throwTypeError();
LABEL_172:
                                            v82 = 0;
                                            v83 = 1;
LABEL_194:
                                            *(_DWORD *)(a3 + 112) = v83;
                                            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v82])(&v121, &v118);
                                            goto LABEL_195;
                                          }
                                        }
                                        if (v115)
                                        {
                                          if (v77)
                                            ++v77[2];
                                          v86 = v114;
                                          v114 = v77;
                                          if (v86)
                                          {
                                            if (v86[2] == 1)
                                              (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
                                            else
                                              --v86[2];
                                          }
                                        }
                                        else
                                        {
                                          if (v77)
                                            ++v77[2];
                                          v114 = v77;
                                          v115 = 1;
                                        }
                                      }
                                    }
                                    *(_BYTE *)(a3 + 8) = 0;
                                    *(_DWORD *)(a3 + 16) = -1;
                                    v87 = v108;
                                    if (v108 != -1)
                                    {
                                      ((void (*)(WTF::StringImpl **))off_1E32AC0C8[v108])(&v121);
                                      *(_DWORD *)(a3 + 16) = v87;
                                    }
                                    v88 = v110;
                                    *(_OWORD *)(a3 + 24) = v109;
                                    *(_OWORD *)(a3 + 40) = v88;
                                    *(_QWORD *)(a3 + 56) = v111;
                                    *(_DWORD *)(a3 + 64) = v112;
                                    v89 = *(_OWORD *)v113;
                                    v111 = 0;
                                    v113[0] = 0;
                                    v113[1] = 0;
                                    *(_OWORD *)(a3 + 72) = v89;
                                    *(_BYTE *)(a3 + 88) = 0;
                                    *(_BYTE *)(a3 + 96) = 0;
                                    if (v115)
                                    {
                                      v90 = v114;
                                      v114 = 0;
                                      *(_QWORD *)(a3 + 88) = v90;
                                      *(_BYTE *)(a3 + 96) = 1;
                                    }
                                    v83 = 0;
                                    v82 = 0;
                                    *(_QWORD *)(a3 + 104) = v116;
                                    goto LABEL_194;
                                  }
                                  v121 = (WTF::StringImpl *)v69;
                                  v71 = (JSC::VM *)*((_QWORD *)a2 + 7);
                                  if ((v69 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v69 + 5) != 2)
                                  {
                                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v121, a2);
LABEL_146:
                                    if (*((_DWORD *)v71 + 20))
                                    {
                                      v98 = JSC::VM::hasExceptionsAfterHandlingTraps(v71);
                                      v70 = v120;
                                      if (v98)
                                      {
                                        v119 = 1;
                                        v120 = 0;
                                        if (v70)
                                        {
                                          if (*(_DWORD *)v70 == 2)
                                            WTF::StringImpl::destroy(v70, v23);
                                          else
                                            *(_DWORD *)v70 -= 2;
                                        }
                                        v83 = 1;
                                        v82 = 1;
                                        goto LABEL_194;
                                      }
                                    }
                                    else
                                    {
                                      v70 = v120;
                                    }
                                    goto LABEL_148;
                                  }
                                  v72 = *(WTF::StringImpl **)(v69 + 8);
                                  if ((v72 & 1) != 0)
                                  {
                                    v72 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v69, a2);
                                    if (!v72)
                                      goto LABEL_145;
                                  }
                                  else if (!v72)
                                  {
LABEL_145:
                                    v120 = v72;
                                    goto LABEL_146;
                                  }
                                  *(_DWORD *)v72 += 2;
                                  goto LABEL_145;
                                }
                                if (v66 >> 49)
                                {
                                  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a2, v66, &v118);
                                  if (!HIDWORD(v118))
                                  {
                                    v67 = v118;
                                    goto LABEL_131;
                                  }
                                }
                                else
                                {
                                  v118 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                                  v84 = v118;
                                  v85 = WebCore::parseEnumeration<WebCore::AnimationFrameRatePreset>(a2, v66);
                                  if (!*((_DWORD *)v84 + 20)
                                    || (JSC::VM::hasExceptionsAfterHandlingTraps(v84) & 1) == 0)
                                  {
                                    if (v85 > 0xFFu)
                                    {
                                      v67 = v85 | 0x100000000;
                                      goto LABEL_131;
                                    }
                                    JSC::throwTypeError();
                                  }
                                }
LABEL_161:
                                *(_DWORD *)(a3 + 112) = 1;
LABEL_195:
                                v91 = v104;
                                goto LABEL_196;
                              }
                            }
                            *(_DWORD *)(a3 + 112) = 1;
LABEL_196:
                            if (v91 != -1)
                              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v91])(&v118, &v103);
                            v92 = v106;
                            if (v106 == -1)
                              goto LABEL_200;
                            goto LABEL_199;
                          }
LABEL_119:
                          v62 = 0;
                          v104 = 0;
                          goto LABEL_120;
                        }
                        goto LABEL_290;
                      }
LABEL_239:
                      JSC::throwTypeError();
                      goto LABEL_290;
                    }
                  }
                  JSC::throwTypeError();
                  goto LABEL_290;
                }
LABEL_37:
                WTF::AtomStringImpl::addLiteral();
                v22 = v118;
                v24 = JSC::JSObject::get(Object, a2, (unint64_t)v118);
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, v23);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                {
                  *(_DWORD *)(a3 + 112) = 1;
                  goto LABEL_200;
                }
                if (v24 == 10)
                  goto LABEL_42;
                v118 = (WTF::StringImpl *)v24;
                v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
                if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v118, a2);
LABEL_49:
                  if (*((_DWORD *)v26 + 20))
                  {
                    v93 = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
                    v25 = v103;
                    if (v93)
                    {
                      v106 = 1;
                      v103 = 0;
                      if (v25)
                      {
                        if (*(_DWORD *)v25 == 2)
                          WTF::StringImpl::destroy(v25, v23);
                        else
                          *(_DWORD *)v25 -= 2;
                      }
                      v92 = 1;
                      goto LABEL_291;
                    }
                  }
                  else
                  {
                    v25 = v103;
                  }
                  goto LABEL_51;
                }
                v27 = *(WTF::StringImpl **)(v24 + 8);
                if ((v27 & 1) != 0)
                {
                  v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, a2);
                  if (!v27)
                    goto LABEL_48;
                }
                else if (!v27)
                {
LABEL_48:
                  v103 = v27;
                  goto LABEL_49;
                }
                *(_DWORD *)v27 += 2;
                goto LABEL_48;
              }
LABEL_33:
              ((void (*)(uint64_t **, WTF::StringImpl **, unint64_t *))off_1E32AC0C8[v21])(&v105, &v118, &v123);
              v119 = v21;
              v105 = &v107;
              ((void (*)(uint64_t **, uint64_t *, WTF::StringImpl **))off_1E32AC0D8[v21])(&v105, &v107, &v118);
              goto LABEL_34;
            }
LABEL_32:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v123 = (unint64_t)v118;
            v21 = 1;
            v124 = 1;
            v125 = 0;
            LOBYTE(v118) = 0;
            v119 = -1;
            goto LABEL_33;
          }
        }
        else
        {
          JSC::throwTypeError();
        }
      }
LABEL_278:
      *(_DWORD *)(a3 + 112) = 1;
LABEL_203:
      WebCore::KeyframeAnimationOptions::~KeyframeAnimationOptions((WebCore::KeyframeAnimationOptions *)&v107, v23);
      return;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 112) = 1;
}

uint64_t WebCore::convertDictionary<WebCore::KeyframeEffect::BasePropertyIndexedKeyframe>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  WTF::StringImpl *v8;
  JSC::JSObject *v9;
  unint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSC::JSObject *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSC::JSObject *v19;
  unint64_t v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  JSC::JSObject *v30;
  unsigned __int16 v31;
  JSC::VM *v32;
  unsigned int v33;
  JSC::JSObject *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  JSValue v41;
  unsigned int j;
  unsigned int v43;
  unint64_t v44;
  JSC::VM *v45;
  unsigned __int16 v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v52;
  JSC::VM *v53;
  unsigned __int16 v54;
  int v55;
  char *v56;
  uint64_t v57;
  unsigned __int16 v58;
  char v59;
  uint64_t v60;
  JSValue v61;
  unsigned int i;
  unsigned int v63;
  unint64_t IndexQuickly;
  WTF::StringImpl *v65;
  uint64_t v66;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  WTF *v71;
  int v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  void *v81;
  int v82;
  void *v83;
  int hasExceptionsAfterHandlingTraps;
  _QWORD v85[2];
  unsigned int v86;
  _QWORD v87[2];
  int v88;
  _QWORD v89[2];
  int v90;
  JSC::VM *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  int v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WTF *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  int v100;
  int v101;
  WTF::StringImpl *v102;
  WTF *v103;
  WTF::StringImpl *v104;
  int v105;
  int v106;
  WTF::StringImpl *v107;
  WTF *v108;
  WTF::StringImpl *v109;
  int v110;
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v91 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(a3 + 80) = 1;
    return result;
  }
  v85[0] = 0;
  v85[1] = 0;
  v86 = 1;
  v87[0] = 0;
  v87[1] = 0;
  v88 = 0;
  v89[0] = 0;
  v89[1] = 0;
  v90 = 0;
  if (v6 == 2)
    goto LABEL_11;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(Object, a2, (unint64_t)v107);
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, v8);
    else
      *(_DWORD *)v107 -= 2;
  }
  if (!*((_DWORD *)v5 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v5), !(_DWORD)result))
  {
    if (v10 == 10)
    {
LABEL_11:
      v11 = 0;
      v108 = 0;
      v109 = 0;
      v111 = 0;
      v110 = 0;
      LOBYTE(v102) = 0;
      LODWORD(v104) = -1;
      goto LABEL_12;
    }
    v29 = *((_QWORD *)a2 + 7);
    if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0x17u)
      goto LABEL_61;
    v30 = (JSC::JSObject *)JSC::iteratorMethod(a2, (JSC::JSGlobalObject *)v10, v9);
    if (*(_DWORD *)(v29 + 80))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29);
      if ((_DWORD)result)
      {
        v28 = 1;
        v111 = 1;
        goto LABEL_214;
      }
    }
    v29 = *((_QWORD *)a2 + 7);
    if (v30 == (JSC::JSObject *)10)
    {
LABEL_61:
      v102 = (WTF::StringImpl *)v29;
      result = WebCore::parseEnumeration<WebCore::CompositeOperationOrAuto>(a2, v10);
      v31 = result;
      if (!*(_DWORD *)(v29 + 80)
        || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29), (result & 1) == 0))
      {
        if (v31 > 0xFFu)
        {
          v28 = 0;
          LOBYTE(v108) = v31;
          v110 = 1;
          goto LABEL_64;
        }
        result = JSC::throwTypeError();
      }
      v28 = 1;
LABEL_64:
      v111 = v28;
      if (v28)
      {
LABEL_214:
        *(_DWORD *)(a3 + 80) = 1;
LABEL_48:
        if (v28 != -1)
          result = ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E32AC1C0[v28])(&v102, &v108);
        goto LABEL_50;
      }
LABEL_65:
      v11 = v110;
      LOBYTE(v102) = 0;
      LODWORD(v104) = -1;
      if (v110 == -1)
      {
        if (v90 != -1)
        {
          ((void (*)(WTF **, _QWORD *))off_1E32AC0F8[v90])(&v97, v89);
          v90 = -1;
        }
        goto LABEL_13;
      }
LABEL_12:
      ((void (*)(WTF **, WTF::StringImpl **, WTF **))off_1E32AC108[v11])(&v97, &v102, &v108);
      LODWORD(v104) = v11;
      v97 = (WTF *)v89;
      ((void (*)(WTF **, _QWORD *, WTF::StringImpl **))off_1E32AC118[v11])(&v97, v89, &v102);
LABEL_13:
      if ((_DWORD)v104 != -1)
        ((void (*)(WTF **, WTF::StringImpl **))off_1E32AC0F8[v104])(&v97, &v102);
      if (v6 == 2)
        goto LABEL_21;
      WTF::AtomStringImpl::addLiteral();
      v12 = v102;
      v15 = JSC::JSObject::get(Object, a2, (unint64_t)v102);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v13);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (*((_DWORD *)v5 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
        if ((_DWORD)result)
        {
          *(_DWORD *)(a3 + 80) = 1;
LABEL_47:
          v28 = v111;
          goto LABEL_48;
        }
      }
      if (v15 == 10)
      {
LABEL_21:
        v16 = 0;
        v103 = 0;
        v104 = 0;
        v106 = 0;
        v105 = 0;
        LOBYTE(v97) = 0;
        LODWORD(v99) = -1;
        goto LABEL_22;
      }
      v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v15 & 0xFFFE000000000002) != 0)
      {
        v92 = (WTF::StringImpl *)v15;
LABEL_70:
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v92, a2);
        goto LABEL_84;
      }
      v33 = *(unsigned __int8 *)(v15 + 5);
      if (v33 >= 0x17)
      {
        v34 = (JSC::JSObject *)JSC::iteratorMethod(a2, (JSC::JSGlobalObject *)v15, v14);
        if (*((_DWORD *)v32 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
          if ((_DWORD)result)
          {
            v106 = 1;
            goto LABEL_88;
          }
        }
        if (v34 != (JSC::JSObject *)10)
        {
          result = WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(a2, v15, v34, (uint64_t)&v97);
          if ((_DWORD)v99)
          {
            v106 = 1;
            if ((_DWORD)v99 == -1)
            {
LABEL_88:
              v27 = v106;
              if (v106)
              {
                *(_DWORD *)(a3 + 80) = 1;
LABEL_45:
                if (v27 != -1)
                  result = ((uint64_t (*)(WTF **, WTF **))off_1E32AC1B0[v27])(&v97, &v103);
                goto LABEL_47;
              }
              v16 = v105;
              LOBYTE(v97) = 0;
              LODWORD(v99) = -1;
              if (v105 == -1)
              {
                if (v88 != -1)
                {
                  ((void (*)(WTF::StringImpl **, _QWORD *))off_1E32AC128[v88])(&v92, v87);
                  v88 = -1;
                }
LABEL_23:
                if ((_DWORD)v99 != -1)
                  ((void (*)(WTF::StringImpl **, WTF **))off_1E32AC128[v99])(&v92, &v97);
                if (v6 == 2)
                  goto LABEL_31;
                WTF::AtomStringImpl::addLiteral();
                v17 = v97;
                v20 = JSC::JSObject::get(Object, a2, (unint64_t)v97);
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, v18);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                result = (uint64_t)v91;
                if (*((_DWORD *)v91 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v91);
                  if ((_DWORD)result)
                  {
                    *(_DWORD *)(a3 + 80) = 1;
LABEL_44:
                    v27 = v106;
                    goto LABEL_45;
                  }
                }
                if (v20 == 10)
                {
LABEL_31:
                  v22 = 0;
                  v98 = 0;
                  v100 = 0;
                  v101 = 0;
                  LOBYTE(v92) = 0;
                  v94 = -1;
                  goto LABEL_32;
                }
                if ((v20 & 0xFFFFFFFFFFFFFFF7) == 2)
                {
                  v98 = 0;
                  v100 = 0;
                  v101 = 0;
                  goto LABEL_99;
                }
                if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
                  goto LABEL_95;
                v39 = (JSC::VM *)*((_QWORD *)a2 + 7);
                v40 = (JSC::JSObject *)JSC::iteratorMethod(a2, (JSC::JSGlobalObject *)v20, v19);
                if (*((_DWORD *)v39 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
                  if ((_DWORD)result)
                  {
                    v26 = 1;
                    v101 = 1;
                    goto LABEL_211;
                  }
                }
                if (v40 == (JSC::JSObject *)10)
                {
LABEL_95:
                  result = (uint64_t)WebCore::Converter<WebCore::IDLDouble>::convert(a2, v20, (uint64_t)&v92);
                  v26 = v93;
                  if ((_DWORD)v93)
                  {
                    v26 = 1;
                  }
                  else
                  {
                    v98 = v92;
                    v100 = 2;
                  }
                  v101 = v26;
                  if (v26)
                    goto LABEL_211;
                  goto LABEL_99;
                }
                v95 = 0;
                v96 = 0;
                v60 = *((_QWORD *)a2 + 7);
                if (JSC::getIterationMode() == 2)
                {
                  for (i = 1; ; ++i)
                  {
                    v63 = (*(_BYTE *)(v20 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v20 + 8) - 8) : 0;
                    if (i - 1 >= v63)
                      break;
                    IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v20, i - 1, 0);
                    if (!IndexQuickly)
                      IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v20, a2, i - 1);
                    if (*(_DWORD *)(v60 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v60) & 1) != 0)
                      break;
                    WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDouble>>::convert((uint64_t)a2, IndexQuickly, (uint64_t)&v95);
                    if (*(_QWORD *)(v60 + 16))
                    {
                      v76 = JSC::JSArrayIterator::create();
                      if ((i & 0x80000000) != 0)
                        v77 = COERCE__INT64((double)i) + 0x2000000000000;
                      else
                        v77 = i | 0xFFFE000000000000;
                      *(_QWORD *)(v76 + 16) = v77;
                      goto LABEL_206;
                    }
                  }
                }
                else
                {
                  JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v20, v40, v61);
                  if (!*(_DWORD *)(v60 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v60) & 1) == 0)
                  {
                    while (1)
                    {
                      v66 = JSC::iteratorStep();
                      if (*(_QWORD *)(v60 + 16) || v66 == 6)
                        break;
                      v68 = JSC::iteratorValue();
                      if (*(_DWORD *)(v60 + 80))
                      {
                        if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v60) & 1) != 0)
                          break;
                      }
                      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDouble>>::convert((uint64_t)a2, v68, (uint64_t)&v95);
                      if (*(_QWORD *)(v60 + 16))
                      {
LABEL_206:
                        JSC::iteratorClose();
                        break;
                      }
                    }
                  }
                }
                if (*(_DWORD *)(v60 + 80))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v60);
                  v78 = v95;
                  if (hasExceptionsAfterHandlingTraps)
                  {
                    v94 = 1;
                    if (v95)
                      WTF::fastFree(v95, v83);
                    v79 = 1;
                    v80 = 1;
LABEL_210:
                    v101 = v79;
                    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AC418[v80])(&v95, &v92);
                    v26 = v101;
                    if (v101)
                    {
LABEL_211:
                      *(_DWORD *)(a3 + 80) = 1;
LABEL_42:
                      if (v26 != -1)
                        result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AC1A0[v26])(&v92, &v98);
                      goto LABEL_44;
                    }
LABEL_99:
                    v22 = v100;
                    LOBYTE(v92) = 0;
                    v94 = -1;
                    if (v100 == -1)
                    {
                      if (v86 == -1)
                      {
                        *(_BYTE *)(a3 + 8) = 0;
                        *(_DWORD *)(a3 + 24) = -1;
LABEL_37:
                        *(_BYTE *)(a3 + 32) = 0;
                        *(_DWORD *)(a3 + 48) = -1;
                        v24 = v88;
                        if (v88 != -1)
                        {
                          result = ((uint64_t (*)(WTF::StringImpl **))off_1E32AC138[v88])(&v92);
                          *(_DWORD *)(a3 + 48) = v24;
                        }
                        *(_BYTE *)(a3 + 56) = 0;
                        *(_DWORD *)(a3 + 72) = -1;
                        v25 = v90;
                        if (v90 != -1)
                        {
                          result = ((uint64_t (*)(WTF::StringImpl **))off_1E32AC108[v90])(&v92);
                          *(_DWORD *)(a3 + 72) = v25;
                        }
                        *(_DWORD *)(a3 + 80) = 0;
                        v26 = v101;
                        goto LABEL_42;
                      }
                      result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E32AC158[v86])(&v95, v85);
                      v86 = -1;
LABEL_33:
                      if (v94 != -1)
                        result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AC158[v94])(&v95, &v92);
                      v23 = v86;
                      *(_BYTE *)(a3 + 8) = 0;
                      *(_DWORD *)(a3 + 24) = -1;
                      if ((_DWORD)v23 != -1)
                      {
                        result = ((uint64_t (*)(WTF::StringImpl **))off_1E32AC170[v23])(&v92);
                        *(_DWORD *)(a3 + 24) = v23;
                      }
                      goto LABEL_37;
                    }
LABEL_32:
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))off_1E32AC170[v22])(&v95, &v92, &v98);
                    v94 = v22;
                    v95 = (WTF::StringImpl *)v85;
                    result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *, WTF::StringImpl **))off_1E32AC188[v22])(&v95, v85, &v92);
                    goto LABEL_33;
                  }
                }
                else
                {
                  v78 = v95;
                }
                v79 = 0;
                v80 = 0;
                v94 = 0;
                v92 = 0;
                v93 = 0;
                v98 = v78;
                v99 = v96;
                v100 = 1;
                goto LABEL_210;
              }
LABEL_22:
              ((void (*)(WTF::StringImpl **, WTF **, WTF **))off_1E32AC138[v16])(&v92, &v97, &v103);
              LODWORD(v99) = v16;
              v92 = (WTF::StringImpl *)v87;
              ((void (*)(WTF::StringImpl **, _QWORD *, WTF **))off_1E32AC148[v16])(&v92, v87, &v97);
              goto LABEL_23;
            }
          }
          else
          {
            v103 = v97;
            v65 = v98;
            v97 = 0;
            v98 = 0;
            v104 = v65;
            v105 = 0;
            v106 = 0;
          }
          result = ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E32A9BB0[v99])(&v92, &v97);
          goto LABEL_88;
        }
        v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v33 = *(unsigned __int8 *)(v15 + 5);
      }
      v92 = (WTF::StringImpl *)v15;
      if (v33 != 2)
        goto LABEL_70;
      v35 = *(WTF::StringImpl **)(v15 + 8);
      if ((v35 & 1) != 0)
      {
        v35 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, a2);
        if (!v35)
          goto LABEL_83;
      }
      else if (!v35)
      {
LABEL_83:
        v95 = v35;
LABEL_84:
        if (*((_DWORD *)v32 + 20))
        {
          v75 = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
          v36 = v95;
          if (v75)
          {
            LODWORD(v98) = 1;
            v95 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v74);
              else
                *(_DWORD *)v36 -= 2;
            }
            v37 = 1;
            v38 = 1;
            goto LABEL_87;
          }
        }
        else
        {
          v36 = v95;
        }
        v37 = 0;
        v38 = 0;
        LODWORD(v98) = 0;
        v97 = 0;
        v103 = v36;
        v105 = 1;
LABEL_87:
        v106 = v37;
        result = ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E32A90E0[v38])(&v92, &v97);
        goto LABEL_88;
      }
      *(_DWORD *)v35 += 2;
      goto LABEL_83;
    }
    v97 = 0;
    v98 = 0;
    if (JSC::getIterationMode() == 2)
    {
      for (j = 1; ; ++j)
      {
        v43 = (*(_BYTE *)(v10 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v10 + 8) - 8) : 0;
        if (j - 1 >= v43)
          break;
        v44 = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v10, j - 1, 0);
        if (!v44)
          v44 = JSC::JSObject::get((JSC::JSObject *)v10, a2, j - 1);
        if (*(_DWORD *)(v29 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29) & 1) != 0)
          break;
        v102 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
        v45 = v102;
        v46 = WebCore::parseEnumeration<WebCore::CompositeOperationOrAuto>(a2, v44);
        if (!*((_DWORD *)v45 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) == 0)
        {
          if (v46 <= 0xFFu)
          {
            JSC::throwTypeError();
          }
          else
          {
            LOBYTE(v102) = v46;
            v47 = HIDWORD(v98);
            if (HIDWORD(v98) == (_DWORD)v98)
            {
              v48 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v97, (WTF *)(HIDWORD(v98) + 1), (unint64_t)&v102);
              v47 = HIDWORD(v98);
              *((_BYTE *)v97 + HIDWORD(v98)) = *v48;
            }
            else
            {
              *((_BYTE *)v97 + HIDWORD(v98)) = v46;
            }
            HIDWORD(v98) = v47 + 1;
          }
        }
        if (*(_QWORD *)(v29 + 16))
        {
          v69 = JSC::JSArrayIterator::create();
          if ((j & 0x80000000) != 0)
            v70 = COERCE__INT64((double)j) + 0x2000000000000;
          else
            v70 = j | 0xFFFE000000000000;
          *(_QWORD *)(v69 + 16) = v70;
          goto LABEL_188;
        }
      }
    }
    else
    {
      v49 = JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v10, v30, v41);
      if (!*(_DWORD *)(v29 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29) & 1) == 0)
      {
        while (1)
        {
          v50 = JSC::iteratorStep();
          if (*(_QWORD *)(v29 + 16) || v50 == 6)
            break;
          v52 = JSC::iteratorValue();
          if (*(_DWORD *)(v29 + 80))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29) & 1) != 0)
              break;
          }
          v102 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
          v53 = v102;
          v54 = WebCore::parseEnumeration<WebCore::CompositeOperationOrAuto>(a2, v52);
          if (!*((_DWORD *)v53 + 20)
            || (v57 = v49,
                v58 = v54,
                v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v53),
                v54 = v58,
                v49 = v57,
                (v59 & 1) == 0))
          {
            if (v54 <= 0xFFu)
            {
              JSC::throwTypeError();
            }
            else
            {
              LOBYTE(v102) = v54;
              v55 = HIDWORD(v98);
              if (HIDWORD(v98) == (_DWORD)v98)
              {
                v56 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v97, (WTF *)(HIDWORD(v98) + 1), (unint64_t)&v102);
                v55 = HIDWORD(v98);
                *((_BYTE *)v97 + HIDWORD(v98)) = *v56;
              }
              else
              {
                *((_BYTE *)v97 + HIDWORD(v98)) = v54;
              }
              HIDWORD(v98) = v55 + 1;
            }
          }
          if (*(_QWORD *)(v29 + 16))
          {
LABEL_188:
            JSC::iteratorClose();
            break;
          }
        }
      }
    }
    if (*(_DWORD *)(v29 + 80))
    {
      v82 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29);
      v71 = v97;
      if (v82)
      {
        LODWORD(v104) = 1;
        if (v97)
        {
          v97 = 0;
          LODWORD(v98) = 0;
          WTF::fastFree(v71, v81);
        }
        v72 = 1;
        v73 = 1;
LABEL_192:
        v111 = v72;
        result = ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E32AC408[v73])(&v97, &v102);
        v28 = v111;
        if (v111)
          goto LABEL_214;
        goto LABEL_65;
      }
    }
    else
    {
      v71 = v97;
    }
    v72 = 0;
    v73 = 0;
    LODWORD(v104) = 0;
    v102 = 0;
    v103 = 0;
    v108 = v71;
    v109 = v98;
    v110 = 0;
    goto LABEL_192;
  }
  *(_DWORD *)(a3 + 80) = 1;
LABEL_50:
  if (v90 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E32AC0F8[v90])(&v107, v89);
  v90 = -1;
  if (v88 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E32AC128[v88])(&v107, v87);
  v88 = -1;
  if (v86 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E32AC158[v86])(&v107, v85);
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::KeyframeEffect::BaseKeyframe>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unsigned __int16 v9;
  uint64_t Object;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  double v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  double v25;
  WTF::StringImpl *v26;
  int v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v28 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 0;
    v8 = v26;
    LOBYTE(v9) = 3;
LABEL_18:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = v30;
LABEL_27:
    v27 = 0;
    v26 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        result = WTF::StringImpl::destroy(v8, v14);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v6 == 2)
      goto LABEL_36;
    WTF::AtomStringImpl::addLiteral();
    v19 = v30;
    v20 = JSC::JSObject::get(v7, a2, (unint64_t)v30);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = (uint64_t)v28;
    if (*((_DWORD *)v28 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
      if ((result & 1) != 0)
        goto LABEL_77;
    }
    if ((v20 | 8) == 0xA)
    {
LABEL_36:
      v21 = NAN;
LABEL_37:
      v22 = 0;
      *(double *)a3 = v21;
      *(_QWORD *)(a3 + 8) = v16;
      *(_BYTE *)(a3 + 16) = v9;
      v16 = 0;
      goto LABEL_38;
    }
    v24 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    v29 = v24;
    v30 = (WTF::StringImpl *)v20;
    if (v20 >= 0xFFFE000000000000)
    {
      v21 = (double)(int)v20;
    }
    else if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, a2);
    }
    else
    {
      *(_QWORD *)&v21 = v20 - 0x2000000000000;
    }
    if (!*((_DWORD *)v24 + 20)
      || (v25 = v21, result = JSC::VM::hasExceptionsAfterHandlingTraps(v24), v21 = v25, (result & 1) == 0))
    {
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        goto LABEL_37;
      result = JSC::throwTypeError();
    }
LABEL_77:
    v22 = 1;
LABEL_38:
    *(_DWORD *)(a3 + 24) = v22;
    v23 = v27;
    if (v27 == -1)
      goto LABEL_40;
    goto LABEL_39;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(a3 + 24) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v26;
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::JSObject::get(v7, a2, (unint64_t)v26);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v11);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((_DWORD)result)
      goto LABEL_69;
  }
  if (v12 == 10)
  {
    LOBYTE(v9) = 3;
  }
  else
  {
    v26 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    v9 = WebCore::parseEnumeration<WebCore::CompositeOperationOrAuto>(a2, v12);
    if (*((_DWORD *)v26 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
      if ((result & 1) != 0)
        goto LABEL_69;
    }
    if (v9 <= 0xFFu)
    {
      result = JSC::throwTypeError();
      goto LABEL_69;
    }
  }
  WTF::AtomStringImpl::addLiteral();
  result = JSC::JSObject::get(v7, a2, (unint64_t)v26);
  v15 = result;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      result = WTF::StringImpl::destroy(v26, v14);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((_DWORD)result)
    {
LABEL_69:
      *(_DWORD *)(a3 + 24) = 1;
      if (!v8)
        return result;
      goto LABEL_41;
    }
  }
  if (v15 == 10)
    goto LABEL_18;
  v30 = (WTF::StringImpl *)v15;
  v17 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v15 + 8);
    if ((v18 & 1) != 0)
    {
      result = JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, a2);
      v18 = *(WTF::StringImpl **)result;
      if (!*(_QWORD *)result)
        goto LABEL_24;
    }
    else if (!v18)
    {
LABEL_24:
      v29 = v18;
      goto LABEL_25;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_24;
  }
  result = JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v30, a2);
LABEL_25:
  if (!*((_DWORD *)v17 + 20))
  {
    v16 = v29;
    goto LABEL_27;
  }
  result = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
  v16 = v29;
  if (!(_DWORD)result)
    goto LABEL_27;
  v23 = 1;
  v27 = 1;
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  *(_DWORD *)(a3 + 24) = 1;
  v16 = v8;
LABEL_39:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v23])(&v30, &v26);
LABEL_40:
  v8 = v16;
  if (!v16)
    return result;
LABEL_41:
  if (*(_DWORD *)v8 == 2)
    return WTF::StringImpl::destroy(v8, v14);
  *(_DWORD *)v8 -= 2;
  return result;
}

void WebCore::JSDOMConstructor<WebCore::JSKeyframeEffect>::construct(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(int *)(a2 + 32) - 1;
  if (v2 >= 3)
    v2 = 3;
  __asm { BR              X10 }
}

JSCell *sub_194CC1EC0(uint64_t a1, uint64_t a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  JSC::JSGlobalObject *v4;

  return WebCore::constructJSKeyframeEffect1(v3, v4, a3);
}

uint64_t sub_194CC1EE4(int a1, JSC::JSGlobalObject *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  JSC::VM *v28;
  JSC *v29;
  JSValue v30;

  v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(v29, a2);
  return JSC::VM::throwException(v28, v29, v30);
}

JSCell *WebCore::constructJSKeyframeEffect1(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSCell *v14;
  int v15;
  int v16;
  int v17;
  uint64_t (*v18)();
  int v19;
  JSC::JSCell **v20;
  uint64_t v21;
  uint64_t v22;
  JSC::JSCell **v23;
  JSC::JSCell *v24;
  WebCore::Node *v25;
  int v26;
  WebCore::JSDOMGlobalObject *v27;
  JSC::JSCell **v28;
  uint64_t v29;
  JSC::JSCell **v30;
  JSC::JSCell *v31;
  JSC::VM *v32;
  WebCore::JSAnimationEffect **v33;
  uint64_t v34;
  _DWORD *v35;
  JSC::JSCell *v36;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v38;
  JSC::JSGlobalObject *v39;
  WebCore::JSAnimationEffect *v40;
  WebCore::JSDOMGlobalObject *v41;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v43;
  JSC::Structure *v44;
  unint64_t SubclassStructure;
  JSC::JSCell *v47;
  JSC::JSCell *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  JSValue v51;
  _QWORD *v52;
  JSC::JSCell **v53;
  int v54;
  JSC::VM *v55;
  char v56;
  uint64_t v57;
  int v58;
  _BYTE v59[72];
  int v60;
  char v61;
  int v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  uint64_t v65[8];
  int v66;
  int v67;
  int v68;
  JSC::JSCell **v69;
  _BYTE v70[72];
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v55 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 3);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v55, (uint64_t)"KeyframeEffect", 15);
  v8 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CC2820);
  }
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
  }
  else
  {
    v57 = *((_QWORD *)this + 7);
    if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) != 241 || (v10 = *(_QWORD *)(v9 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v57, 0, "target", 7, "KeyframeEffect", 15, v7, 0, 0, "Element", 8);
      return 0;
    }
  }
  if ((*((_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v53 = 0;
    v54 = 0;
    goto LABEL_14;
  }
  WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)this, *((_QWORD *)a2 + 7), (uint64_t)&v57);
  LOBYTE(v53) = 0;
  v54 = -1;
  v11 = v58;
  if (v58 == -1)
    return 0;
  ((void (*)(_DWORD **, JSC::JSCell ***, uint64_t *))off_1E32AC1D0[v58])(&v63, &v53, &v57);
  v54 = v11;
  if (v58 != -1)
  {
    ((void (*)(_DWORD **, uint64_t *))off_1E32AA870[v58])(&v63, &v57);
    v11 = v54;
  }
  if (!v11)
  {
LABEL_14:
    if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL || (v12 = *((_QWORD *)a2 + 8), v12 == 10))
    {
      LOBYTE(v58) = 0;
      v61 = 0;
      v62 = 0;
      v13 = *(JSC::JSGlobalObject **)(v5 + 40);
      goto LABEL_43;
    }
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2
      || (v12 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    {
      WebCore::convertDictionary<WebCore::KeyframeEffectOptions>((uint64_t)&v72, this, *((JSC::JSCell **)a2 + 8));
      WebCore::Detail::ConversionResultStorage<std::variant<double,WebCore::KeyframeEffectOptions>>::ConversionResultStorage<WebCore::KeyframeEffectOptions>(WebCore::Detail::ConversionResultStorage<WebCore::KeyframeEffectOptions> &&)::{lambda(void)#1}::operator()((WTF::StringImpl *)&v63, (uint64_t)&v72);
      if (v75 != -1)
        ((void (*)(JSC::JSCell ***, WTF::StringImpl **))off_1E32AC200[v75])(&v69, &v73);
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnrestrictedDouble>::convert(this, *((_QWORD *)a2 + 8), (uint64_t)&v72);
      v15 = (int)v73;
      if ((_DWORD)v73)
      {
        v15 = 1;
      }
      else
      {
        v65[0] = v72;
        v67 = 0;
      }
      v68 = v15;
    }
    v16 = v68;
    if (v68)
    {
      v62 = 1;
LABEL_38:
      if (v16 != -1)
        ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32AC210[v16])(&v72, &v64);
      v19 = v62;
      if (v62)
      {
        v14 = 0;
LABEL_76:
        if (v19 != -1)
          ((void (*)(_DWORD **, int *))off_1E32AC230[v19])(&v63, &v58);
        v11 = v54;
        goto LABEL_79;
      }
      if (v54)
        goto LABEL_107;
      v13 = *(JSC::JSGlobalObject **)(v5 + 40);
LABEL_43:
      v69 = 0;
      v20 = v53;
      if (!v53)
      {
LABEL_49:
        v25 = (WebCore::Node *)(v8 - 192);
        LOBYTE(v63) = 0;
        LOBYTE(v67) = 0;
        if (v61)
        {
          LOBYTE(v64) = 0;
          v66 = -1;
          v26 = v60;
          if (v60 != -1)
          {
            ((void (*)(char *, WTF::StringImpl **, _BYTE *))off_1E32AC1F0[v60])(&v56, &v64, v59);
            v66 = v26;
          }
          LOBYTE(v67) = 1;
        }
        WebCore::KeyframeEffect::create(v13, v25, v10, &v69, (uint64_t)&v63, (uint64_t)&v72);
        if ((_BYTE)v67 && v66 != -1)
          ((void (*)(char *, WTF::StringImpl **))off_1E32AC1E0[v66])(&v56, &v64);
        if (v69)
        {
          v28 = v69 - 2;
          v29 = *(_QWORD *)(((unint64_t)(v69 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v30 = (JSC::JSCell **)*(v69 - 1);
          if (v30)
          {
            v31 = *v28;
            *v30 = *v28;
            *((_QWORD *)v31 + 1) = v30;
            *v28 = 0;
            v28[1] = 0;
          }
          *v28 = *(JSC::JSCell **)(v29 + 40);
          *(_QWORD *)(v29 + 40) = v28;
        }
        v32 = v55;
        if (*((_DWORD *)v55 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) != 0)
        {
LABEL_99:
          v14 = 0;
LABEL_73:
          if (v74 != -1)
            ((void (*)(_DWORD **, uint64_t *))off_1E32AC220[v74])(&v63, &v72);
          v19 = v62;
          goto LABEL_76;
        }
        if (!v74)
        {
          v33 = *(WebCore::JSAnimationEffect ***)(v5 + 40);
          v34 = v72;
          v72 = 0;
          v63 = (_DWORD *)v34;
          v14 = (JSCell *)WebCore::toJSNewlyCreated(v33, (uint64_t *)&v63, v27);
          v35 = v63;
          v63 = 0;
          if (v35)
          {
            if (v35[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            else
              --v35[2];
          }
          goto LABEL_65;
        }
        if (v74 == 1)
        {
          v49 = (WTF::StringImpl *)v72;
          LOBYTE(v63) = v72;
          v50 = v73;
          v73 = 0;
          v64 = v50;
          if (!*((_QWORD *)v32 + 2))
          {
            v51.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v72, (JSC::JSGlobalObject *)&v64);
            JSC::VM::throwException(v32, this, v51);
            v50 = v64;
          }
          v64 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v49);
            else
              *(_DWORD *)v50 -= 2;
          }
          v14 = 0;
LABEL_65:
          if (!*((_DWORD *)v32 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) == 0)
          {
            v36 = (JSC::JSCell *)*((_QWORD *)a2 + 5);
            if (((unint64_t)v36 & 0xFFFE000000000002) == 0)
            {
              Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v36);
              if (Object)
              {
                v39 = Object;
                if (Object != *((JSC::JSGlobalObject **)a2 + 3))
                {
                  v40 = (WebCore::JSAnimationEffect *)*((_QWORD *)this + 7);
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v38);
                  if (!*((_DWORD *)v40 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
                  {
                    v43 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSKeyframeEffect>(v40, FunctionRealm, v41);
                    SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v39, v43, v44);
                    if (!*((_DWORD *)v40 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
                      JSC::JSObject::setStructure(v14, v40, SubclassStructure);
                  }
                }
              }
            }
            if (!*((_DWORD *)v32 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) == 0)
              goto LABEL_73;
          }
          goto LABEL_99;
        }
LABEL_107:
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      v21 = *(_QWORD *)(((unint64_t)(v53 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v22 = *(_QWORD *)(v21 + 40);
      if (v22)
      {
        *(_QWORD *)(v21 + 40) = *(_QWORD *)v22;
        *(_QWORD *)(v22 + 16) = 0;
        v23 = (JSC::JSCell **)(v22 + 16);
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        v69 = (JSC::JSCell **)(v22 + 16);
      }
      else
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v53 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
        v52 = *(_QWORD **)(v21 + 40);
        v20 = v53;
        *(_QWORD *)(v21 + 40) = *v52;
        *v52 = 0;
        v52[1] = 0;
        v52[2] = 0;
        v23 = (JSC::JSCell **)(v52 + 2);
        v69 = v23;
        if (!v20)
        {
          v24 = 0;
          goto LABEL_48;
        }
      }
      v24 = *v20;
      if (*v20)
      {
        v47 = *(JSC::JSCell **)(((unint64_t)(v23 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v48 = (JSC::JSCell *)*((_QWORD *)v47 + 3);
        v47 = (JSC::JSCell *)((char *)v47 + 24);
        *(v23 - 2) = v48;
        *(v23 - 1) = v47;
        *(_QWORD *)v47 = v23 - 2;
        *((_QWORD *)v48 + 1) = v23 - 2;
      }
LABEL_48:
      *v23 = v24;
      if (v62)
        goto LABEL_107;
      goto LABEL_49;
    }
    v70[0] = 0;
    v71 = -1;
    v17 = v67;
    if (v67 == -1)
    {
      LOBYTE(v73) = 0;
      v76 = 1;
      LOBYTE(v58) = 0;
      v59[0] = 0;
      v60 = -1;
      v61 = 1;
      v62 = 0;
    }
    else
    {
      v18 = off_1E32AC1F0[v67];
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))v18)(&v72, v70, v65);
      v71 = v17;
      LOBYTE(v73) = 0;
      v75 = -1;
      ((void (*)(char *, WTF::StringImpl **, _BYTE *))v18)(&v56, &v73, v70);
      v75 = v17;
      v76 = 1;
      LOBYTE(v58) = 0;
      v61 = 0;
      v59[0] = 0;
      v60 = -1;
      ((void (*)(char *, _BYTE *, WTF::StringImpl **))v18)(&v56, v59, &v73);
      v60 = v17;
      v61 = 1;
      v62 = 0;
      if (!v76)
      {
LABEL_35:
        if (v71 != -1)
          ((void (*)(char *, _BYTE *))off_1E32AC1E0[v71])(&v56, v70);
        v16 = v68;
        goto LABEL_38;
      }
      if (v75 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E32AC1E0[v75])(&v56, &v73);
    }
    v75 = -1;
    goto LABEL_35;
  }
  v14 = 0;
LABEL_79:
  if (v11 != -1)
    ((void (*)(uint64_t *, JSC::JSCell ***))off_1E32AA870[v11])(&v57, &v53);
  return v14;
}

uint64_t WebCore::JSKeyframeEffect::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAnimationEffect::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAnimationEffect::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAnimationEffect::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSKeyframeEffect::createPrototype(WebCore::JSKeyframeEffect *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSAnimationEffect::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSKeyframeEffectPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSKeyframeEffectPrototype::create(WebCore::JSKeyframeEffectPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSKeyframeEffect::s_info, &WebCore::JSKeyframeEffectPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSKeyframeEffect>,(WebCore::DOMConstructorID)325>(uint64_t a1, uint64_t a2)
{
  unint64_t SlowCase;
  _QWORD *v5;
  JSC::JSCell *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  SlowCase = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2600);
  if (SlowCase)
    return SlowCase;
  v5 = (_QWORD *)(a1 + 41456);
  v6 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationEffect>,(WebCore::DOMConstructorID)316>(a1, a2);
  LODWORD(v19) = 67099;
  v7 = JSC::Structure::create((uint64_t *)a1, a2, v6);
  *(_DWORD *)(v7 + 16) |= 0x80000u;
  v8 = (_QWORD *)*v5;
  SlowCase = *(_QWORD *)(*v5 + 22768);
  if (SlowCase >= *(_QWORD *)(*v5 + 22776))
  {
    SlowCase = v8[2848];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_4;
    }
    v18 = *(_QWORD *)(SlowCase + 8) ^ v8[2849];
    v8[2847] = SlowCase + HIDWORD(v18);
    v8[2848] = SlowCase + (int)v18;
  }
  v8[2846] = SlowCase + 48;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000001, 6, (uint64_t)&v19);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v19);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v19);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v16 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSKeyframeEffect>((WebCore::JSAnimationEffect *)a1, (JSC::VM *)a2, v15)+ 48);
  v19 = 0;
  v20 = SlowCase;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v16, 14, (uint64_t)&v19);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2600) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsKeyframeEffectConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSKeyframeEffectPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSKeyframeEffect>,(WebCore::DOMConstructorID)325>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsKeyframeEffect_target(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 264);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::setJSKeyframeEffect_target(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *v13;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSKeyframeEffect::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSKeyframeEffect::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v9 = 0;
  }
  else
  {
    v13 = *(WebCore::Node **)(a1 + 56);
    if ((a3 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(a3 + 5) != 241
      || (v9 = *(WebCore::Node **)(a3 + 24)) == 0)
    {
      WebCore::throwAttributeTypeError(a1, (int)&v13, "KeyframeEffect", 15, "target", 7, "Element", 8);
      return 0;
    }
    *((_DWORD *)v9 + 6) += 2;
  }
  v13 = v9;
  WebCore::KeyframeEffect::setTarget(v8, (uint64_t *)&v13);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::jsKeyframeEffect_pseudoElement(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v13;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(v2 + 264))
    return 2;
  if (!*(_BYTE *)(v2 + 288))
    return 2;
  WebCore::pseudoElementIdentifierAsString(v2 + 272, (uint64_t *)&v13);
  v4 = v13;
  if (!v13)
    return 2;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (uint64_t *)(v5 + 41968);
  v7 = *((_DWORD *)v13 + 1);
  if (!v7)
    goto LABEL_16;
  if (v7 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    if ((*((_BYTE *)v13 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_6;
      v10 = v11;
    }
    v6 = (uint64_t *)(v5 + 8 * v10 + 42216);
LABEL_16:
    v8 = *v6;
    goto LABEL_17;
  }
LABEL_6:
  v8 = *(_QWORD *)(v5 + 64760);
  if (!v8 || v13 != *(WTF::StringImpl **)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v4 = v13;
    v13 = 0;
    if (!v4)
      return v8;
    goto LABEL_18;
  }
LABEL_17:
  v13 = 0;
LABEL_18:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v8;
}

BOOL WebCore::setJSKeyframeEffect_pseudoElement(JSC *a1, uint64_t a2, uint64_t a3, int16x8_t a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::KeyframeEffect *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  char v28;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSKeyframeEffect::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSKeyframeEffect::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::KeyframeEffect **)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
    v23 = 0;
LABEL_14:
    v22 = 0;
    v24 = v12;
    WebCore::KeyframeEffect::setPseudoElement(v11, (unsigned int **)&v24, (uint64_t)&v26, a4);
    v14 = v24;
    v24 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (v28)
    {
      v18 = (WTF::StringImpl *)v26;
      LOBYTE(v24) = v26;
      v19 = v27;
      v27 = 0;
      v25 = v19;
      if (!*((_QWORD *)v5 + 2))
      {
        v20.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v26, (JSC::JSGlobalObject *)&v25);
        JSC::VM::throwException(v5, a1, v20);
        v19 = v25;
      }
      v25 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (v28)
      {
        v21 = v27;
        v27 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v18);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
    }
    v15 = 1;
    v16 = v23;
    goto LABEL_19;
  }
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v26);
  LOBYTE(v22) = 0;
  v23 = -1;
  v16 = (int)v27;
  if ((_DWORD)v27 == -1)
    return 0;
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **, int *))off_1E32A9688[v27])(&v24, &v22, &v26);
  v23 = v16;
  if ((_DWORD)v27 != -1)
  {
    ((void (*)(WTF::StringImpl **, int *))off_1E32A90E0[v27])(&v24, &v26);
    v16 = v23;
  }
  if (!v16)
  {
    v12 = v22;
    goto LABEL_14;
  }
  v15 = 0;
LABEL_19:
  if (v16 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E32A90E0[v16])(&v26, &v22);
  return v15;
}

uint64_t WebCore::jsKeyframeEffect_iterationComposite(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 306);
  if ((byte_1EE335D17 & 1) == 0)
  {
    dword_1ECE78C10 += 2;
    byte_1EE335D17 = 1;
    qword_1EE335E98 = (uint64_t)&dword_1ECE78C10;
    dword_1ECE78C30 += 2;
    qword_1EE335EA0 = (uint64_t)&dword_1ECE78C30;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1069[8 * v4 + 392];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSKeyframeEffect_iterationComposite(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  __int16 v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSKeyframeEffect::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSKeyframeEffect::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::IterationCompositeOperation>(a1, (unint64_t)this);
  v11 = v10;
  v12 = HIBYTE(v10);
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v16 = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !v12)
      return v16;
  }
  else if (!HIBYTE(v10))
  {
    return 0;
  }
  if (*(unsigned __int8 *)(v9 + 306) != v11)
  {
    *(_BYTE *)(v9 + 306) = v11;
    v13 = *(_QWORD *)(v9 + 264);
    if (v13)
    {
      if (!*(_BYTE *)(v9 + 288) || (v14 = *(WTF::StringImpl **)(v9 + 280)) == 0)
      {
        v16 = 1;
        WebCore::Node::invalidateStyle(v13, 1u, 0);
        return v16;
      }
      *(_DWORD *)v14 += 2;
      WebCore::Node::invalidateStyle(v13, 1u, 0);
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::jsKeyframeEffect_composite(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 + 96);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 8);
    if (v5)
    {
      if ((*(unsigned int (**)(_QWORD *))(*v5 + 104))(v5))
      {
        v7 = (_QWORD *)v5[7];
        if (v7)
        {
          if ((*(unsigned int (**)(_QWORD *))(*v7 + 24))(v7))
          {
            v8 = v7[33];
            if (v8)
              WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8));
          }
        }
      }
    }
  }
  return WebCore::convertEnumerationToJS<WebCore::CompositeOperation>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(v3 + 307));
}

BOOL WebCore::setJSKeyframeEffect_composite(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::KeyframeEffect *v9;
  __int16 v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  _WORD *v14;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSKeyframeEffect::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSKeyframeEffect::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(WebCore::KeyframeEffect **)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::CompositeOperation>(a1, (unint64_t)this);
  v11 = v10;
  v12 = HIBYTE(v10);
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !v12)
      return result;
  }
  else if (!HIBYTE(v10))
  {
    return 0;
  }
  WebCore::KeyframeEffect::setComposite(v9, (WTF::StringImpl *)v11);
  v13 = *((_QWORD *)v9 + 12);
  if (v13)
  {
    v14 = *(_WORD **)(v13 + 8);
    if (v14)
    {
      if ((*(unsigned int (**)(_WORD *))(*(_QWORD *)v14 + 112))(v14))
        v14[120] |= 0x200u;
    }
  }
  return 1;
}

uint64_t WebCore::JSKeyframeEffect::subspaceForImpl(WebCore::JSKeyframeEffect *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2640);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2640))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2640);
    *(_QWORD *)(v8 + 2640) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2640);
  *(_QWORD *)(v3 + 2640) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::toJSNewlyCreated(WebCore::JSAnimationEffect **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  void (***v3)(WebCore::KeyframeEffect *__hidden);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::JSAnimationEffect *v9;
  uint64_t *v10;
  _QWORD *Allocator;
  unint64_t v13;
  uint64_t v14;
  WebCore::JSAnimationEffect *v15;
  uint64_t *v16;
  _QWORD *v17;
  void (***v18)(WebCore::KeyframeEffect *__hidden);

  v3 = (void (***)(WebCore::KeyframeEffect *__hidden))*a2;
  if (*(void (***)(WebCore::KeyframeEffect *__hidden))*a2 != off_1E3391588)
  {
    __break(0xC471u);
    JUMPOUT(0x194CC3B68);
  }
  v6 = WebCore::getDOMStructure<WebCore::JSKeyframeEffect>(a1[7], (JSC::VM *)a1, a3);
  v7 = WebCore::JSKeyframeEffect::create(v6, (JSC::VM *)a1, a2);
  v8 = v7;
  v9 = a1[415];
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationEffect *)::owner = (uint64_t)&off_1E3226610;
  }
  v10 = (uint64_t *)((char *)v9 + 32);
  v18 = v3;
  if (v7)
  {
    v15 = v9;
    v16 = (uint64_t *)((char *)v9 + 32);
    if ((v7 & 8) != 0)
      v13 = (v7 - 112) | 1;
    else
      v13 = v7 & 0xFFFFFFFFFFFFC000;
    if ((v13 & 1) != 0)
      v14 = v13 + 47;
    else
      v14 = *(_QWORD *)v13 + 32;
    Allocator = *(_QWORD **)(v14 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v14 + 16) = *Allocator;
    *Allocator = v8;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationEffect *)::owner;
    Allocator[2] = v15;
    v10 = v16;
  }
  else
  {
    Allocator = 0;
  }
  v17 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v10, (uint64_t *)&v18, (uint64_t *)&v17);
  if (v17)
    v17[1] = 3;
  return v8;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::KeyframeEffectOptions>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  double v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unsigned __int16 v37;
  int v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  double v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  double v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  unsigned __int16 v53;
  JSC::VM *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  unsigned __int16 v58;
  JSC::VM *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  int v64;
  __int128 v65;
  WTF::StringImpl *v66;
  int v67;
  int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *result;
  int v71;
  char hasExceptionsAfterHandlingTraps;
  char v73;
  char v74;
  char v75;
  double v76;
  double v77;
  double v78;
  double v79;
  WTF::StringImpl *v80;
  int v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  JSC::VM *v91;
  WTF::StringImpl *v92;
  int v93;
  char v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  int v97;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v91 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a1 + 80) = 1;
    return result;
  }
  v8 = WebCore::autoAtomData;
  if (WebCore::autoAtomData)
    *(_DWORD *)WebCore::autoAtomData += 2;
  v84 = v8;
  v85 = 1;
  v86 = 0uLL;
  *(_QWORD *)&v87 = 0;
  *((_QWORD *)&v87 + 1) = 0x3FF0000000000000;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = v95;
  v89 = 4;
  v90 = 0;
  if (v6 == 2)
  {
    *(_QWORD *)&v86 = 0;
    goto LABEL_32;
  }
  WTF::AtomStringImpl::addLiteral();
  v10 = (WTF::StringImpl *)JSC::JSObject::get(Object, a2, (unint64_t)v95);
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v9);
    else
      *(_DWORD *)v95 -= 2;
  }
  if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
  {
    v11 = 0.0;
    if (v10 == (WTF::StringImpl *)10)
      goto LABEL_19;
    v95 = v10;
    v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v92 = v12;
    if ((unint64_t)v10 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v10;
    }
    else if ((unint64_t)v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v95, a2);
    }
    else
    {
      *(_QWORD *)&v11 = (char *)v10 - 0x2000000000000;
    }
    if (*((_DWORD *)v12 + 20))
    {
      v76 = v11;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
      v11 = v76;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        goto LABEL_208;
    }
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
LABEL_19:
      *(double *)&v86 = v11;
      WTF::AtomStringImpl::addLiteral();
      v13 = v95;
      v15 = JSC::JSObject::get(Object, a2, (unint64_t)v95);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
        goto LABEL_208;
      if (v15 == 10)
      {
        LOBYTE(v16) = 0;
      }
      else
      {
        v95 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
        v17 = v95;
        v16 = WebCore::parseEnumeration<WebCore::PlaybackDirection>(a2, v15);
        if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
          goto LABEL_208;
        if (v16 <= 0xFFu)
        {
          JSC::throwTypeError();
          goto LABEL_208;
        }
      }
      BYTE1(v89) = v16;
      WTF::AtomStringImpl::addLiteral();
      v18 = v95;
      v20 = JSC::JSObject::get(Object, a2, (unint64_t)v95);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
      {
        if (v20 != 10)
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLUnrestrictedDouble,WebCore::IDLDOMString>>::convert(a2, v20, (uint64_t)&v95);
          v38 = v98;
          if (v98)
          {
            *(_DWORD *)(a1 + 80) = 1;
LABEL_131:
            if (v38 != -1)
              ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32AC0E8[v38])(&v92, &v96);
            goto LABEL_133;
          }
          v21 = v97;
          LOBYTE(v92) = 0;
          v93 = -1;
          if (v97 == -1)
          {
            if (v85 == -1)
              goto LABEL_37;
            ((void (*)(uint64_t **, uint64_t *))off_1E32AC0B8[v85])(&v82, &v84);
            v85 = -1;
LABEL_34:
            if (v93 != -1)
              ((void (*)(uint64_t **, WTF::StringImpl **))off_1E32AC0B8[v93])(&v82, &v92);
            if (v6 == 2)
            {
LABEL_42:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v25 = v92;
LABEL_51:
              v83 = 0;
              v82 = 0;
              v28 = v88;
              v88 = v25;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v23);
                else
                  *(_DWORD *)v28 -= 2;
              }
              if (v6 == 2)
              {
                LOBYTE(v89) = 4;
                *((_QWORD *)&v86 + 1) = 0;
                *(_QWORD *)&v87 = 0;
                *((_QWORD *)&v87 + 1) = 0x3FF0000000000000;
                HIWORD(v89) = 0;
                goto LABEL_119;
              }
              WTF::AtomStringImpl::addLiteral();
              v29 = v92;
              v31 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v30);
                else
                  *(_DWORD *)v29 -= 2;
              }
              if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                goto LABEL_220;
              v32 = 0.0;
              if (v31 == 10)
                goto LABEL_66;
              v92 = (WTF::StringImpl *)v31;
              v33 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
              v80 = v33;
              if (v31 >= 0xFFFE000000000000)
              {
                v32 = (double)(int)v31;
              }
              else if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v92, a2);
              }
              else
              {
                *(_QWORD *)&v32 = v31 - 0x2000000000000;
              }
              if (*((_DWORD *)v33 + 20))
              {
                v77 = v32;
                v73 = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
                v32 = v77;
                if ((v73 & 1) != 0)
                  goto LABEL_220;
              }
              if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
              {
LABEL_66:
                *((double *)&v86 + 1) = v32;
                WTF::AtomStringImpl::addLiteral();
                v34 = v92;
                v36 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, v35);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                  goto LABEL_220;
                if (v36 == 10)
                {
                  LOBYTE(v37) = 4;
                }
                else
                {
                  v92 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                  v39 = v92;
                  v37 = WebCore::parseEnumeration<WebCore::FillMode>(a2, v36);
                  if (*((_DWORD *)v39 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
                    goto LABEL_220;
                  if (v37 <= 0xFFu)
                    goto LABEL_173;
                }
                LOBYTE(v89) = v37;
                WTF::AtomStringImpl::addLiteral();
                v40 = v92;
                v42 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, v41);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                  goto LABEL_220;
                v43 = 0.0;
                if (v42 == 10)
                  goto LABEL_88;
                v92 = (WTF::StringImpl *)v42;
                v44 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                v80 = v44;
                if (v42 >= 0xFFFE000000000000)
                {
                  v43 = (double)(int)v42;
                }
                else if (v42 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v92, a2);
                }
                else
                {
                  *(_QWORD *)&v43 = v42 - 0x2000000000000;
                }
                if (*((_DWORD *)v44 + 20))
                {
                  v78 = v43;
                  v74 = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
                  v43 = v78;
                  if ((v74 & 1) != 0)
                    goto LABEL_220;
                }
                if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                {
LABEL_88:
                  *(double *)&v87 = v43;
                  WTF::AtomStringImpl::addLiteral();
                  v45 = v92;
                  v47 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, v46);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                    goto LABEL_220;
                  v48 = 1.0;
                  if (v47 != 10)
                  {
                    v92 = (WTF::StringImpl *)v47;
                    v49 = (JSC::VM *)*((_QWORD *)a2 + 7);
                    if (v47 >= 0xFFFE000000000000)
                    {
                      v48 = (double)(int)v47;
                    }
                    else if (v47 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v92, a2);
                    }
                    else
                    {
                      *(_QWORD *)&v48 = v47 - 0x2000000000000;
                    }
                    if (*((_DWORD *)v49 + 20))
                    {
                      v79 = v48;
                      v75 = JSC::VM::hasExceptionsAfterHandlingTraps(v49);
                      v48 = v79;
                      if ((v75 & 1) != 0)
                        goto LABEL_220;
                    }
                  }
                  *((double *)&v87 + 1) = v48;
                  WTF::AtomStringImpl::addLiteral();
                  v50 = v92;
                  v52 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, v51);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                    goto LABEL_220;
                  if (v52 == 10)
                  {
                    LOBYTE(v53) = 0;
                  }
                  else
                  {
                    v92 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                    v54 = v92;
                    v53 = WebCore::parseEnumeration<WebCore::CompositeOperation>(a2, v52);
                    if (*((_DWORD *)v54 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v54) & 1) != 0)
                      goto LABEL_220;
                    if (v53 <= 0xFFu)
                      goto LABEL_173;
                  }
                  HIBYTE(v89) = v53;
                  WTF::AtomStringImpl::addLiteral();
                  v55 = v92;
                  v57 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
                  if (v55)
                  {
                    if (*(_DWORD *)v55 == 2)
                      WTF::StringImpl::destroy(v55, v56);
                    else
                      *(_DWORD *)v55 -= 2;
                  }
                  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                    goto LABEL_220;
                  if (v57 == 10)
                  {
                    LOBYTE(v58) = 0;
                    goto LABEL_113;
                  }
                  v92 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                  v59 = v92;
                  v58 = WebCore::parseEnumeration<WebCore::IterationCompositeOperation>(a2, v57);
                  if (*((_DWORD *)v59 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
                  {
LABEL_220:
                    v68 = 0;
LABEL_221:
                    *(_DWORD *)(a1 + 80) = 1;
LABEL_129:
                    ((void (*)(WTF::StringImpl **, uint64_t **))off_1E32A90E0[v68])(&v92, &v82);
LABEL_130:
                    v38 = v98;
                    goto LABEL_131;
                  }
                  if (v58 > 0xFFu)
                  {
LABEL_113:
                    BYTE2(v89) = v58;
                    WTF::AtomStringImpl::addLiteral();
                    v60 = v92;
                    v61 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
                    if (v60)
                    {
                      if (*(_DWORD *)v60 == 2)
                        WTF::StringImpl::destroy(v60, v23);
                      else
                        *(_DWORD *)v60 -= 2;
                    }
                    if (!*((_DWORD *)v5 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) == 0)
                    {
                      if (v61 != 10 && (v61 & 0xFFFFFFFFFFFFFFF7) != 2)
                      {
                        WebCore::valueToUSVString(a2, v61, (uint64_t)&v92);
                        LOBYTE(v80) = 0;
                        v81 = -1;
                        v67 = v93;
                        if (v93 == -1)
                        {
                          v67 = -1;
                        }
                        else
                        {
                          ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E32A9688[v93])(&v94, &v80, &v92);
                          v81 = v67;
                          if (v93 != -1)
                          {
                            ((void (*)(char *, WTF::StringImpl **))off_1E32A90E0[v93])(&v94, &v92);
                            v67 = v81;
                          }
                          if (!v67)
                          {
                            v62 = v80;
                            goto LABEL_120;
                          }
                        }
                        *(_DWORD *)(a1 + 80) = 1;
                        goto LABEL_126;
                      }
LABEL_119:
                      v62 = 0;
                      v81 = 0;
LABEL_120:
                      v80 = 0;
                      v63 = v90;
                      v90 = v62;
                      if (v63)
                      {
                        if (*(_DWORD *)v63 == 2)
                          WTF::StringImpl::destroy(v63, v23);
                        else
                          *(_DWORD *)v63 -= 2;
                      }
                      *(_BYTE *)(a1 + 8) = 0;
                      v23 = (WTF::StringImpl *)(a1 + 8);
                      *(_DWORD *)(a1 + 16) = -1;
                      v64 = v85;
                      if (v85 != -1)
                      {
                        ((void (*)(WTF::StringImpl **))off_1E32AC0C8[v85])(&v92);
                        *(_DWORD *)(a1 + 16) = v64;
                      }
                      v65 = v87;
                      *(_OWORD *)(a1 + 24) = v86;
                      *(_OWORD *)(a1 + 40) = v65;
                      *(_QWORD *)(a1 + 56) = v88;
                      *(_DWORD *)(a1 + 64) = v89;
                      v66 = v90;
                      v88 = 0;
                      v90 = 0;
                      *(_QWORD *)(a1 + 72) = v66;
                      *(_DWORD *)(a1 + 80) = 0;
                      v67 = v81;
LABEL_126:
                      if (v67 != -1)
                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v67])(&v92, &v80);
                      v68 = v83;
                      if (v83 == -1)
                        goto LABEL_130;
                      goto LABEL_129;
                    }
                    goto LABEL_220;
                  }
LABEL_173:
                  JSC::throwTypeError();
                  goto LABEL_220;
                }
              }
              JSC::throwTypeError();
              goto LABEL_220;
            }
LABEL_37:
            WTF::AtomStringImpl::addLiteral();
            v22 = v92;
            v24 = JSC::JSObject::get(Object, a2, (unint64_t)v92);
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v23);
              else
                *(_DWORD *)v22 -= 2;
            }
            if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
            {
              *(_DWORD *)(a1 + 80) = 1;
              goto LABEL_130;
            }
            if (v24 == 10)
              goto LABEL_42;
            v92 = (WTF::StringImpl *)v24;
            v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v92, a2);
LABEL_49:
              if (*((_DWORD *)v26 + 20))
              {
                v71 = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
                v25 = v80;
                if (v71)
                {
                  v83 = 1;
                  v80 = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, v23);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                  v68 = 1;
                  goto LABEL_221;
                }
              }
              else
              {
                v25 = v80;
              }
              goto LABEL_51;
            }
            v27 = *(WTF::StringImpl **)(v24 + 8);
            if ((v27 & 1) != 0)
            {
              v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, a2);
              if (!v27)
                goto LABEL_48;
            }
            else if (!v27)
            {
LABEL_48:
              v80 = v27;
              goto LABEL_49;
            }
            *(_DWORD *)v27 += 2;
            goto LABEL_48;
          }
LABEL_33:
          ((void (*)(uint64_t **, WTF::StringImpl **, unint64_t *))off_1E32AC0C8[v21])(&v82, &v92, &v96);
          v93 = v21;
          v82 = &v84;
          ((void (*)(uint64_t **, uint64_t *, WTF::StringImpl **))off_1E32AC0D8[v21])(&v82, &v84, &v92);
          goto LABEL_34;
        }
LABEL_32:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v96 = (unint64_t)v92;
        v21 = 1;
        v97 = 1;
        v98 = 0;
        LOBYTE(v92) = 0;
        v93 = -1;
        goto LABEL_33;
      }
    }
    else
    {
      JSC::throwTypeError();
    }
  }
LABEL_208:
  *(_DWORD *)(a1 + 80) = 1;
LABEL_133:
  v69 = v90;
  v90 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v23);
    else
      *(_DWORD *)v69 -= 2;
  }
  result = v88;
  v88 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  if (v85 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E32AC0B8[v85])(&v95, &v84);
  return result;
}

void WebCore::JSHTMLTrackElementOwner::~JSHTMLTrackElementOwner(WebCore::JSHTMLTrackElementOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSHTMLVideoElementOwner::~JSHTMLVideoElementOwner(WebCore::JSHTMLVideoElementOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSHighlightOwner::~JSHighlightOwner(WebCore::JSHighlightOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSHighlightRegistryOwner::~JSHighlightRegistryOwner(WebCore::JSHighlightRegistryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSHistoryOwner::~JSHistoryOwner(WebCore::JSHistoryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBCursorOwner::~JSIDBCursorOwner(WebCore::JSIDBCursorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBDatabaseOwner::~JSIDBDatabaseOwner(WebCore::JSIDBDatabaseOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBFactoryOwner::~JSIDBFactoryOwner(WebCore::JSIDBFactoryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBIndexOwner::~JSIDBIndexOwner(WebCore::JSIDBIndexOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBKeyRangeOwner::~JSIDBKeyRangeOwner(WebCore::JSIDBKeyRangeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBObjectStoreOwner::~JSIDBObjectStoreOwner(WebCore::JSIDBObjectStoreOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBOpenDBRequestOwner::~JSIDBOpenDBRequestOwner(WebCore::JSIDBOpenDBRequestOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBRequestOwner::~JSIDBRequestOwner(WebCore::JSIDBRequestOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIDBTransactionOwner::~JSIDBTransactionOwner(WebCore::JSIDBTransactionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIdleDeadlineOwner::~JSIdleDeadlineOwner(WebCore::JSIdleDeadlineOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSIdleRequestCallback::hasCallback(WebCore::JSIdleRequestCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSImageBitmapOwner::~JSImageBitmapOwner(WebCore::JSImageBitmapOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSImageBitmapRenderingContextOwner::~JSImageBitmapRenderingContextOwner(WebCore::JSImageBitmapRenderingContextOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSImageCaptureOwner::~JSImageCaptureOwner(WebCore::JSImageCaptureOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSImageDataOwner::~JSImageDataOwner(WebCore::JSImageDataOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSInspectorAuditAccessibilityObjectOwner::~JSInspectorAuditAccessibilityObjectOwner(WebCore::JSInspectorAuditAccessibilityObjectOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSInspectorAuditDOMObjectOwner::~JSInspectorAuditDOMObjectOwner(WebCore::JSInspectorAuditDOMObjectOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSInspectorAuditResourcesObjectOwner::~JSInspectorAuditResourcesObjectOwner(WebCore::JSInspectorAuditResourcesObjectOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSInspectorFrontendHostOwner::~JSInspectorFrontendHostOwner(WebCore::JSInspectorFrontendHostOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSIntersectionObserverEntryOwner::~JSIntersectionObserverEntryOwner(WebCore::JSIntersectionObserverEntryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSKHRParallelShaderCompileOwner::~JSKHRParallelShaderCompileOwner(WebCore::JSKHRParallelShaderCompileOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::jsHTMLTextAreaElementPrototypeFunction_checkValidity(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLTextAreaElement", "checkValidity");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLTextAreaElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLTextAreaElement", "checkValidity");
  if (WebCore::ValidatedFormListedElement::checkValidity((_BYTE *)(*(_QWORD *)(v3 + 24) + 112), 0))
    return 7;
  return 6;
}

uint64_t WebCore::jsHTMLTextAreaElementPrototypeFunction_reportValidity(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLTextAreaElement", "reportValidity");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLTextAreaElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLTextAreaElement", "reportValidity");
  if (WebCore::ValidatedFormListedElement::reportValidity((WebCore::ValidatedFormListedElement *)(*(_QWORD *)(v3 + 24) + 112)))
    return 7;
  return 6;
}

_BYTE *WebCore::jsHTMLTextAreaElementPrototypeFunction_setCustomValidity(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "HTMLTextAreaElement", "setCustomValidity");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLTextAreaElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "HTMLTextAreaElement", "setCustomValidity");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v27 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v26 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v26;
    if (hasExceptionsAfterHandlingTraps)
    {
      v25 = 1;
      v26 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v17 = 1;
      goto LABEL_30;
    }
  }
  else
  {
    v14 = v26;
  }
  v25 = 0;
  v24 = 0;
  if (v14)
    *(_DWORD *)v14 += 2;
  v15 = *(WTF::StringImpl **)(v11 + 144);
  *(_QWORD *)(v11 + 144) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ValidatedFormListedElement::updateValidity(v11 + 112);
  if (!v14)
    goto LABEL_36;
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v16);
LABEL_36:
    v17 = 0;
    goto LABEL_29;
  }
  v17 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_29:
  v18 = 10;
LABEL_30:
  ((void (*)(uint64_t *, uint64_t *))off_1E32A90E0[v17])(&v27, &v24);
  return (_BYTE *)v18;
}

uint64_t WebCore::jsHTMLTextAreaElementPrototypeFunction_select(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::HTMLTextFormControlElement *v9;
  uint64_t v11;
  uint64_t v12[2];

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "HTMLTextAreaElement", "select");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLTextAreaElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "HTMLTextAreaElement", "select");
  v9 = *(WebCore::HTMLTextFormControlElement **)(v3 + 24);
  v12[0] = 0;
  v12[1] = 0;
  if (WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)v9, 0, 0xFFFFFFFF, 0, 3, v12, 0))
    WebCore::HTMLTextFormControlElement::scheduleSelectEvent(v9);
  return 10;
}

_BYTE *WebCore::jsHTMLTextAreaElementPrototypeFunction_setRangeText(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSHTMLTextAreaElement *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  JSValue v14;
  uint64_t v15;
  WebCore::HTMLTextFormControlElement *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v34;
  WTF::StringImpl *v35;
  _QWORD v36[2];
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41[2];
  WTF::StringImpl *v42;
  char v43;

  v5 = *((_QWORD *)this + 7);
  v36[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v36, "HTMLTextAreaElement", "setRangeText");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHTMLTextAreaElement::s_info && v9 != 0);
  }
  if (!v8)
  {
    return WebCore::throwThisTypeError((int)this, (int)v36, "HTMLTextAreaElement", "setRangeText");
  }
  else
  {
    v36[1] = v5;
    v12 = *((int *)a2 + 8) - 1;
    if (v12 >= 4)
      v12 = 4;
    switch(v12)
    {
      case 0uLL:
        v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
        return (_BYTE *)JSC::VM::throwException((JSC::VM *)v5, this, v14);
      case 1uLL:
        v15 = *((_QWORD *)a2 + 6);
        v16 = *(WebCore::HTMLTextFormControlElement **)(v6 + 24);
        *(_QWORD *)v41 = v15;
        if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
        {
          v17 = *(WTF::StringImpl **)(v15 + 8);
          if ((v17 & 1) != 0)
          {
            v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
            if (!v17)
              goto LABEL_22;
          }
          else if (!v17)
          {
LABEL_22:
            v39 = v17;
            goto LABEL_23;
          }
          *(_DWORD *)v17 += 2;
          goto LABEL_22;
        }
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v41, this);
LABEL_23:
        if (!*(_DWORD *)(v5 + 80))
        {
          v18 = v39;
          goto LABEL_25;
        }
        v18 = v39;
        if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
        {
LABEL_25:
          v38 = 0;
          v37 = 0;
          if (v18)
          {
            v19 = *((_QWORD *)v18 + 1);
            v20 = *((unsigned int *)v18 + 1) | ((unint64_t)((*((_DWORD *)v18 + 4) >> 2) & 1) << 32);
            v21 = WebCore::HTMLTextFormControlElement::selectionStart(v16);
            v22 = WebCore::HTMLTextFormControlElement::selectionEnd(v16);
            v39 = 0;
            (*(void (**)(int *__return_ptr, WebCore::HTMLTextFormControlElement *, uint64_t, unint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 1384))(v41, v16, v19, v20, v21, v22, &v39);
            v24 = v39;
            v39 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v23);
              else
                *(_DWORD *)v24 -= 2;
            }
            if (*(_DWORD *)v18 != 2)
            {
              *(_DWORD *)v18 -= 2;
              goto LABEL_31;
            }
            v30 = v18;
          }
          else
          {
            v28 = WebCore::HTMLTextFormControlElement::selectionStart(v16);
            v29 = WebCore::HTMLTextFormControlElement::selectionEnd(v16);
            v39 = 0;
            (*(void (**)(int *__return_ptr, WebCore::HTMLTextFormControlElement *, _QWORD, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 1384))(v41, v16, 0, 0x100000000, v28, v29, &v39);
            v30 = v39;
            v39 = 0;
            if (!v30)
              goto LABEL_31;
            if (*(_DWORD *)v30 != 2)
            {
              *(_DWORD *)v30 -= 2;
              goto LABEL_31;
            }
          }
          WTF::StringImpl::destroy(v30, v23);
LABEL_31:
          if (!v43)
          {
            v25 = 10;
LABEL_33:
            v26 = 0;
            goto LABEL_34;
          }
          v32 = (WTF::StringImpl *)LOBYTE(v41[0]);
          LOBYTE(v39) = v41[0];
          v33 = v42;
          v42 = 0;
          v40 = v33;
          if (!*(_QWORD *)(v5 + 16))
          {
            v34.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v41[0]), (JSC::JSGlobalObject *)&v40);
            JSC::VM::throwException((JSC::VM *)v5, this, v34);
            v33 = v40;
          }
          v40 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v32);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v43)
          {
            v35 = v42;
            v42 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 != 2)
              {
                v25 = 0;
                *(_DWORD *)v35 -= 2;
                goto LABEL_33;
              }
              WTF::StringImpl::destroy(v35, v32);
            }
          }
          v25 = 0;
          goto LABEL_33;
        }
        v38 = 1;
        v39 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v31);
          else
            *(_DWORD *)v18 -= 2;
        }
        v25 = 0;
        v26 = 1;
LABEL_34:
        ((void (*)(int *, uint64_t *))off_1E32A90E0[v26])(v41, &v37);
        break;
      case 3uLL:
      case 4uLL:
        return (_BYTE *)WebCore::jsHTMLTextAreaElementPrototypeFunction_setRangeText2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
      default:
        return (_BYTE *)JSC::throwTypeError();
    }
  }
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsHTMLTextAreaElementPrototypeFunction_setSelectionRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::HTMLTextFormControlElement *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  JSValue v25;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  _DWORD v31[2];
  _DWORD v32[2];
  WTF::StringImpl *v33;
  uint64_t v34[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "HTMLTextAreaElement", "setSelectionRange");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHTMLTextAreaElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHTMLTextAreaElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "HTMLTextAreaElement", "setSelectionRange");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v25);
  }
  v12 = *(WebCore::HTMLTextFormControlElement **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v32);
  if (v32[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v31);
  if (v31[1])
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL || (v13 = *((_QWORD *)a2 + 8), v13 == 10))
  {
    v14 = 0;
    v30 = 0;
    goto LABEL_27;
  }
  v34[0] = v13;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v34, this);
    goto LABEL_24;
  }
  v16 = *(WTF::StringImpl **)(v13 + 8);
  if ((v16 & 1) != 0)
  {
    v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
    if (!v16)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v16)
LABEL_22:
    *(_DWORD *)v16 += 2;
LABEL_23:
  v33 = v16;
LABEL_24:
  if (*((_DWORD *)v15 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    v14 = v33;
    if (hasExceptionsAfterHandlingTraps)
    {
      v30 = 1;
      v33 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v27);
        else
          *(_DWORD *)v14 -= 2;
      }
      v22 = 0;
      v21 = 1;
      goto LABEL_38;
    }
  }
  else
  {
    v14 = v33;
  }
  v30 = 0;
LABEL_27:
  v17 = v32[0];
  v18 = v31[0];
  v29 = 0;
  v34[0] = 0;
  v34[1] = 0;
  if ((MEMORY[0x19AEA53F4](v14, "forward", 7) & 1) != 0)
  {
    v19 = 1;
  }
  else if (MEMORY[0x19AEA53F4](v14, "backward", 8))
  {
    v19 = 2;
  }
  else
  {
    v19 = 0;
  }
  if (WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)v12, v17, v18, v19, 3, v34, 1))
    WebCore::HTMLTextFormControlElement::scheduleSelectEvent(v12);
  if (!v14)
    goto LABEL_41;
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v20);
LABEL_41:
    v21 = 0;
    goto LABEL_37;
  }
  v21 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_37:
  v22 = 10;
LABEL_38:
  ((void (*)(uint64_t *, uint64_t *))off_1E32A90E0[v21])(v34, &v29);
  return (_BYTE *)v22;
}

uint64_t WebCore::jsHTMLTextAreaElementPrototypeFunction_setRangeText2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSHTMLTextAreaElement *a4)
{
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::VM *v13;
  WTF::StringImpl *v14;
  char *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v30;
  int v31;
  unsigned int v32[2];
  unsigned int v33[2];
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char v40;

  v7 = *((_QWORD *)this + 7);
  v8 = *((_QWORD *)a2 + 6);
  v38 = v8;
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v9 = *(WTF::StringImpl **)(v8 + 8);
    if ((v9 & 1) != 0)
    {
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
      if (!v9)
        goto LABEL_6;
    }
    else if (!v9)
    {
LABEL_6:
      v36 = v9;
      goto LABEL_7;
    }
    *(_DWORD *)v9 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v38, this);
LABEL_7:
  if (*(_DWORD *)(v7 + 80))
  {
    v10 = v36;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7))
    {
      v35 = 1;
      v36 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v23);
        else
          *(_DWORD *)v10 -= 2;
      }
      v19 = 0;
      v21 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v10 = v36;
  }
  v34 = v10;
  v35 = 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v33);
  if (v33[1])
  {
    v19 = 0;
    v21 = 0;
    goto LABEL_36;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v32);
  if (!v32[1])
  {
    if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL || (v11 = *((_QWORD *)a2 + 9), v11 == 10))
    {
      v12 = 0;
      v31 = 0;
      goto LABEL_23;
    }
    v38 = v11;
    v13 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v38, this);
      goto LABEL_20;
    }
    v14 = *(WTF::StringImpl **)(v11 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, this);
      if (!v14)
        goto LABEL_19;
    }
    else if (!v14)
    {
LABEL_19:
      v36 = v14;
LABEL_20:
      if (*((_DWORD *)v13 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v13);
        v12 = v36;
        if (hasExceptionsAfterHandlingTraps)
        {
          v31 = 1;
          v36 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v28);
            else
              *(_DWORD *)v12 -= 2;
          }
          v19 = 0;
          v20 = 1;
          goto LABEL_34;
        }
      }
      else
      {
        v12 = v36;
      }
      v31 = 0;
LABEL_23:
      v34 = 0;
      if (v10)
      {
        v15 = (char *)*((_QWORD *)v10 + 1);
        v16 = *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v15 = 0;
        v16 = 0x100000000;
      }
      v30 = 0;
      v36 = v12;
      WebCore::HTMLTextFormControlElement::setRangeText(a3, v15, v16, v33[0], v32[0], (uint64_t *)&v36, (uint64_t)&v38);
      v18 = v36;
      v36 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v17);
          if (!v10)
            goto LABEL_31;
          goto LABEL_29;
        }
        *(_DWORD *)v18 -= 2;
      }
      if (!v10)
        goto LABEL_31;
LABEL_29:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v17);
      else
        *(_DWORD *)v10 -= 2;
LABEL_31:
      if (!v40)
      {
        v19 = 10;
LABEL_33:
        v20 = 0;
LABEL_34:
        ((void (*)(uint64_t *, uint64_t *))off_1E32A90E0[v20])(&v38, &v30);
        v21 = v35;
        goto LABEL_35;
      }
      v24 = (WTF::StringImpl *)v38;
      LOBYTE(v36) = v38;
      v25 = v39;
      v39 = 0;
      v37 = v25;
      if (!*(_QWORD *)(v7 + 16))
      {
        v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v38, (JSC::JSGlobalObject *)&v37);
        JSC::VM::throwException((JSC::VM *)v7, this, v26);
        v25 = v37;
      }
      v37 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      if (v40)
      {
        v27 = v39;
        v39 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 != 2)
          {
            v19 = 0;
            *(_DWORD *)v27 -= 2;
            goto LABEL_33;
          }
          WTF::StringImpl::destroy(v27, v24);
        }
      }
      v19 = 0;
      goto LABEL_33;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_19;
  }
  v21 = 0;
  v19 = 0;
LABEL_35:
  if (v21 != -1)
LABEL_36:
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v21])(&v38, &v34);
  return v19;
}

uint64_t WebCore::jsHTMLVideoElementPrototypeFunction_webkitEnterFullscreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  JSC::VM *v15;
  char v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "HTMLVideoElement", "webkitEnterFullscreen");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "HTMLVideoElement", "webkitEnterFullscreen");
  WebCore::HTMLVideoElement::webkitEnterFullscreen(*(_QWORD *)(v4 + 24), (uint64_t)&v18);
  if (!v20)
    return 10;
  v12 = (WTF::StringImpl *)v18;
  v16 = v18;
  v13 = v19;
  v17 = v19;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v18, (JSC::JSGlobalObject *)&v17);
    JSC::VM::throwException(v5, this, v14);
    v13 = v17;
  }
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return 0;
}

uint64_t WebCore::jsHTMLVideoElementPrototypeFunction_webkitExitFullscreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLVideoElement", "webkitExitFullscreen");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLVideoElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLVideoElement", "webkitExitFullscreen");
  WebCore::HTMLVideoElement::webkitExitFullscreen(*(WebCore::HTMLVideoElement **)(v3 + 24), a2);
  return 10;
}

uint64_t WebCore::jsHTMLVideoElementPrototypeFunction_webkitEnterFullScreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  JSC::VM *v15;
  char v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "HTMLVideoElement", "webkitEnterFullScreen");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "HTMLVideoElement", "webkitEnterFullScreen");
  WebCore::HTMLVideoElement::webkitEnterFullscreen(*(_QWORD *)(v4 + 24), (uint64_t)&v18);
  if (!v20)
    return 10;
  v12 = (WTF::StringImpl *)v18;
  v16 = v18;
  v13 = v19;
  v17 = v19;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v18, (JSC::JSGlobalObject *)&v17);
    JSC::VM::throwException(v5, this, v14);
    v13 = v17;
  }
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return 0;
}

uint64_t WebCore::jsHTMLVideoElementPrototypeFunction_webkitExitFullScreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLVideoElement", "webkitExitFullScreen");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLVideoElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "HTMLVideoElement", "webkitExitFullScreen");
  WebCore::HTMLVideoElement::webkitExitFullscreen(*(WebCore::HTMLVideoElement **)(v3 + 24), a2);
  return 10;
}

unint64_t WebCore::jsHTMLVideoElementPrototypeFunction_getVideoPlaybackQuality(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF *v11;
  void *v12;
  unint64_t v13;
  uint64_t v15;
  WTF *v16;

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "HTMLVideoElement", "getVideoPlaybackQuality");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSHTMLVideoElement::s_info && v7 != 0);
  }
  if (!v6)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "HTMLVideoElement", "getVideoPlaybackQuality");
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::HTMLMediaElement::getVideoPlaybackQuality(*(WebCore::HTMLMediaElement **)(v4 + 24), &v16);
  v11 = v16;
  if (!v16)
    return 2;
  v13 = WebCore::wrap<WebCore::VideoPlaybackQuality>((uint64_t)this, v10, v16);
  if (*(_DWORD *)v11 == 1)
    WTF::fastFree(v11, v12);
  else
    --*(_DWORD *)v11;
  return v13;
}

uint64_t WebCore::jsHTMLVideoElementPrototypeFunction_webkitSupportsPresentationMode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::HTMLVideoElement *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::HTMLVideoElement *v15;
  uint64_t v16;
  WebCore::MediaElementSession *v17;
  JSValue v19;
  JSC::VM *v20;
  JSC::VM *v21;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "HTMLVideoElement", "webkitSupportsPresentationMode");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "HTMLVideoElement", "webkitSupportsPresentationMode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(WebCore::HTMLVideoElement **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v21 = v4;
  v14 = WebCore::parseEnumeration<WebCore::HTMLVideoElement::VideoPresentationMode>(this, v12);
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if ((v14 & 0xFF00000000) == 0)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v21, 0, "mode", 5, "HTMLVideoElement", 17, v13, "webkitSupportsPresentationMode", 31, "\"inline\", \"fullscreen\", \"picture-in-picture\"", 45);
      return 0;
    }
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 2)
      {
        if (HIBYTE(WebCore::isPictureInPictureSupported))
        {
          if (!(_BYTE)WebCore::isPictureInPictureSupported)
            return 6;
        }
        else if (!-[objc_class isPictureInPictureSupported](getAVPictureInPictureControllerClass(), "isPictureInPictureSupported"))
        {
          return 6;
        }
        v15 = v11;
        v16 = 2;
      }
      else
      {
        if ((_DWORD)v14 != 1)
          return 6;
        v15 = v11;
        v16 = 1;
      }
      if ((WebCore::HTMLVideoElement::supportsFullscreen(v15, v16) & 1) != 0)
        return 7;
    }
    else
    {
      v17 = (WebCore::MediaElementSession *)*((_QWORD *)v11 + 200);
      if (!v17)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(v11);
        v17 = (WebCore::MediaElementSession *)*((_QWORD *)v11 + 200);
      }
      if ((WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(v17) & 1) == 0)
        return 7;
    }
    return 6;
  }
  return 0;
}

uint64_t WebCore::jsHTMLVideoElementPrototypeFunction_webkitSetPresentationMode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v18;
  JSC::VM *v19;
  _QWORD v20[4];
  unsigned int v21;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "HTMLVideoElement", "webkitSetPresentationMode");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "HTMLVideoElement", "webkitSetPresentationMode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v18);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v20[0] = v4;
  v14 = WebCore::parseEnumeration<WebCore::HTMLVideoElement::VideoPresentationMode>(this, v12);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if ((v14 & 0xFF00000000) == 0)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v20, 0, "mode", 5, "HTMLVideoElement", 17, v13, "webkitSetPresentationMode", 26, "\"inline\", \"fullscreen\", \"picture-in-picture\"", 45);
    return 0;
  }
  v21 = v14;
  if ((_DWORD)v14 != 3
    || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 680) + 680) & 0x2000000) != 0)
  {
    v15 = *(_QWORD *)(v11 + 1824);
    v16 = *(_QWORD *)(v11 + 1832);
    v20[0] = "HTMLMediaElement";
    v20[1] = 17;
    v20[2] = "webkitSetPresentationMode";
    v20[3] = v16;
    if (*(_BYTE *)(v15 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WebCore::HTMLVideoElement::VideoPresentationMode>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v20, ", mode = ", &v21);
    if (((*(unsigned int *)(v11 + 1265) | ((unint64_t)*(unsigned __int16 *)(v11 + 1269) << 32)) & 0x200000000) == 0)
      WebCore::HTMLVideoElement::setPresentationMode((WebCore::HTMLVideoElement *)v11, (void *)v21);
  }
  return 10;
}

unint64_t WebCore::jsHTMLVideoElementPrototypeFunction_requestPictureInPicture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194CC69ACLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSHTMLVideoElement::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"HTMLVideoElement", "requestPictureInPicture", v16);
    v27 = 0;
  }
  else
  {
    WebCore::HTMLVideoElementPictureInPicture::requestPictureInPicture(*(WTF **)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsHTMLVideoElementPrototypeFunction_requestVideoFrameCallback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  unsigned int v19;
  WebCore::JSVideoFrameRequestCallback *v20;
  WebCore::JSVideoFrameRequestCallback *v21;
  unsigned int v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  JSValue v28;
  JSC::VM *v29;
  JSC::VM *v30;
  uint64_t v31;
  int v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "HTMLVideoElement", "requestVideoFrameCallback");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSHTMLVideoElement::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "HTMLVideoElement", "requestVideoFrameCallback");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v28);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v18 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v30 = v9;
  if ((v17 & 0xFFFE000000000002) == 0
    && (v19 = *(unsigned __int8 *)(v17 + 5), v19 >= 0x17)
    && ((v19 & 0xFE) == 0x1A
     || (*(_BYTE *)(v17 + 6) & 4) != 0
     && ((*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v17 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v31, v17), (_BYTE)v31)))
  {
    v20 = (WebCore::JSVideoFrameRequestCallback *)WTF::fastMalloc((WTF *)0x20);
    v21 = WebCore::JSVideoFrameRequestCallback::JSVideoFrameRequestCallback(v20, v17, v18);
    v32 = 0;
    v30 = v21;
    v31 = 0;
    v22 = WebCore::HTMLVideoElement::requestVideoFrameCallback(v16, (uint64_t *)&v30);
    if ((v22 & 0x80000000) != 0)
      v23 = COERCE__INT64((double)v22) + 0x2000000000000;
    else
      v23 = v22 | 0xFFFE000000000000;
    v24 = v30;
    v30 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 4) == 1)
        (*(void (**)(JSC::VM *))(*(_QWORD *)v24 + 16))(v24);
      else
        --*((_DWORD *)v24 + 4);
    }
    v25 = 0;
  }
  else
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v30, 0, "callback", 9, "HTMLVideoElement", 17, a8, "requestVideoFrameCallback", 26);
    v23 = 0;
    v25 = 1;
    v32 = 1;
  }
  ((void (*)(JSC::VM **, uint64_t *))off_1E32A90D0[v25])(&v30, &v31);
  return (_BYTE *)v23;
}

uint64_t WebCore::jsHTMLVideoElementPrototypeFunction_cancelVideoFrameCallback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned __int8 *v11;
  JSValue v13;
  JSC::VM *v14;
  unsigned int v15[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v14 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "HTMLVideoElement", "cancelVideoFrameCallback");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLVideoElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLVideoElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "HTMLVideoElement", "cancelVideoFrameCallback");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    v11 = *(unsigned __int8 **)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v15);
    if (v15[1])
    {
      return 0;
    }
    else
    {
      WebCore::HTMLVideoElement::cancelVideoFrameCallback(v11, (void *)v15[0]);
      return 10;
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore27JSVideoFrameRequestCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void WebCore::HashChangeEvent::~HashChangeEvent(WebCore::HashChangeEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15HashChangeEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsHighlightPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::JSGlobalObject *v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  char BackingSet;
  const JSC::Identifier *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSValue v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v9;
  v10 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "Highlight", "has");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSHighlight::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSHighlight::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "Highlight", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v40);
  }
  v17 = *((_QWORD *)a2 + 6);
  v42 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSAbstractRange::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSAbstractRange::s_info && v20 != 0);
  }
  if (v19 && *(_QWORD *)(v17 + 24))
  {
    BackingSet = WebCore::getBackingSet((unint64_t)this, v10, a3);
    v27 = v26;
    if (BackingSet)
    {
      v28 = *((_QWORD *)v10 + 3);
      v29 = *(unsigned int *)(v28 + 20);
      if ((_DWORD)v29)
      {
        v30 = *(uint64_t **)(v28 + 8);
        v31 = 8 * v29;
        do
        {
          v32 = *v30++;
          v33 = *(_QWORD *)(v32 + 16);
          JSC::JSLockHolder::JSLockHolder();
          v34 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v33);
          WebCore::addToBackingSet((uint64_t)this, v27, v34);
          MEMORY[0x19AEA32A0](&v42);
          v31 -= 8;
        }
        while (v31);
      }
    }
    v35 = (WTF::StringImpl *)MEMORY[0x1E0CBEBB0];
    *MEMORY[0x1E0CBEBB0] += 2;
    v42 = v35;
    v23 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v27, (JSC::JSObject *)&v42, v25);
    v37 = v42;
    v42 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v42, 0, "key", 4, "Highlight", 10, a8, "has", 4, "AbstractRange", 14);
    return 0;
  }
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsHighlightPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingSet;
  const JSC::Identifier *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28;

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "Highlight", "entries");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlight::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlight::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "Highlight", "entries");
  BackingSet = WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v13;
  if (BackingSet)
  {
    v15 = *(_QWORD *)(v4 + 24);
    v16 = *(unsigned int *)(v15 + 20);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)(v15 + 8);
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        v20 = *(_QWORD *)(v19 + 16);
        JSC::JSLockHolder::JSLockHolder();
        v21 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v20);
        WebCore::addToBackingSet((uint64_t)this, v14, v21);
        MEMORY[0x19AEA32A0](&v28);
        v18 -= 8;
      }
      while (v18);
    }
  }
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF8];
  *MEMORY[0x1E0CBEBF8] += 2;
  v28 = v22;
  v24 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)&v28, v12);
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsHighlightPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingSet;
  const JSC::Identifier *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28;

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "Highlight", "keys");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlight::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlight::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "Highlight", "keys");
  BackingSet = WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v13;
  if (BackingSet)
  {
    v15 = *(_QWORD *)(v4 + 24);
    v16 = *(unsigned int *)(v15 + 20);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)(v15 + 8);
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        v20 = *(_QWORD *)(v19 + 16);
        JSC::JSLockHolder::JSLockHolder();
        v21 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v20);
        WebCore::addToBackingSet((uint64_t)this, v14, v21);
        MEMORY[0x19AEA32A0](&v28);
        v18 -= 8;
      }
      while (v18);
    }
  }
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBC0];
  *MEMORY[0x1E0CBEBC0] += 2;
  v28 = v22;
  v24 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)&v28, v12);
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsHighlightPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingSet;
  const JSC::Identifier *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28;

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "Highlight", "values");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlight::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlight::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "Highlight", "values");
  BackingSet = WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v13;
  if (BackingSet)
  {
    v15 = *(_QWORD *)(v4 + 24);
    v16 = *(unsigned int *)(v15 + 20);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)(v15 + 8);
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        v20 = *(_QWORD *)(v19 + 16);
        JSC::JSLockHolder::JSLockHolder();
        v21 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v20);
        WebCore::addToBackingSet((uint64_t)this, v14, v21);
        MEMORY[0x19AEA32A0](&v28);
        v18 -= 8;
      }
      while (v18);
    }
  }
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  v28 = v22;
  v24 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)&v28, v12);
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsHighlightPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v23;
  JSC::VM *v24;
  char v25[8];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "Highlight", "forEach");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHighlight::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHighlight::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "Highlight", "forEach");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    if (WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3))
    {
      v14 = *(_QWORD *)(v5 + 24);
      v15 = *(unsigned int *)(v14 + 20);
      if ((_DWORD)v15)
      {
        v16 = v12;
        v17 = *(uint64_t **)(v14 + 8);
        v18 = 8 * v15;
        do
        {
          v19 = *v17++;
          v20 = *(_QWORD *)(v19 + 16);
          JSC::JSLockHolder::JSLockHolder();
          v21 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v20);
          WebCore::addToBackingSet((uint64_t)this, v16, v21);
          MEMORY[0x19AEA32A0](v25);
          v18 -= 8;
        }
        while (v18);
      }
    }
    return (_BYTE *)WebCore::forwardForEachCallToBackingSet(this, a2, (JSC::CallFrame *)v5, v13);
  }
}

JSC::JSGlobalObject *WebCore::jsHighlightPrototypeFunction_add(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  JSC::JSObject *v24;
  char BackingSet;
  const JSC::Identifier *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  JSValue v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v42, "Highlight", "add");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSHighlight::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSHighlight::s_info && v14 != 0);
  }
  if (!v13)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v42, "Highlight", "add");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (JSC::JSGlobalObject *)JSC::VM::throwException(v9, this, v41);
  }
  v17 = *((_QWORD *)a2 + 6);
  v43 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSAbstractRange::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSAbstractRange::s_info && v20 != 0);
  }
  if (v19 && (v23 = *(_QWORD *)(v17 + 24)) != 0)
  {
    WebCore::Highlight::addToSetLike(*(_QWORD *)(v10 + 24), v23);
    BackingSet = WebCore::getBackingSet((unint64_t)this, (JSC::JSGlobalObject *)v10, v24);
    v28 = v27;
    if (BackingSet)
    {
      v29 = *(_QWORD *)(v10 + 24);
      v30 = *(unsigned int *)(v29 + 20);
      if ((_DWORD)v30)
      {
        v31 = *(uint64_t **)(v29 + 8);
        v32 = 8 * v30;
        do
        {
          v33 = *v31++;
          v34 = *(_QWORD *)(v33 + 16);
          JSC::JSLockHolder::JSLockHolder();
          v35 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v34);
          WebCore::addToBackingSet((uint64_t)this, v28, v35);
          MEMORY[0x19AEA32A0](&v43);
          v32 -= 8;
        }
        while (v32);
      }
    }
    v36 = (WTF::StringImpl *)MEMORY[0x1E0CBEBA0];
    *MEMORY[0x1E0CBEBA0] += 2;
    v43 = v36;
    WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v28, (JSC::JSObject *)&v43, v26);
    v38 = v43;
    v43 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v43, 0, "key", 4, "Highlight", 10, a8, "add", 4, "AbstractRange", 14);
    return 0;
  }
  return (JSC::JSGlobalObject *)v10;
}

_BYTE *WebCore::jsHighlightPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  JSC::JSObject *v11;
  char BackingSet;
  const JSC::Identifier *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  WTF::StringImpl *v29;

  v28 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "Highlight", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlight::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlight::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "Highlight", "clear");
  WebCore::Highlight::clearFromSetLike(*(_QWORD *)(v4 + 24), a2);
  BackingSet = WebCore::getBackingSet((unint64_t)this, (JSC::JSGlobalObject *)v4, v11);
  v15 = v14;
  if (BackingSet)
  {
    v16 = *(_QWORD *)(v4 + 24);
    v17 = *(unsigned int *)(v16 + 20);
    if ((_DWORD)v17)
    {
      v18 = *(uint64_t **)(v16 + 8);
      v19 = 8 * v17;
      do
      {
        v20 = *v18++;
        v21 = *(_QWORD *)(v20 + 16);
        JSC::JSLockHolder::JSLockHolder();
        v22 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v21);
        WebCore::addToBackingSet((uint64_t)this, v15, v22);
        MEMORY[0x19AEA32A0](&v29);
        v19 -= 8;
      }
      while (v19);
    }
  }
  v23 = (WTF::StringImpl *)MEMORY[0x1E0CBEBD8];
  *MEMORY[0x1E0CBEBD8] += 2;
  v29 = v23;
  v25 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v15, (JSC::JSObject *)&v29, v13);
  v26 = v29;
  v29 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsHighlightPrototypeFunction_delete(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::JSGlobalObject *v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  char BackingSet;
  const JSC::Identifier *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  WebCore::HighlightRange **v42;
  WebCore::HighlightRange *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v48;
  void *v49;
  JSValue v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v52 = v9;
  v10 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v52, "Highlight", "delete");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSHighlight::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSHighlight::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v52, "Highlight", "delete");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v51.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v51);
  }
  v17 = *((_QWORD *)a2 + 6);
  v53 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSAbstractRange::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSAbstractRange::s_info && v20 != 0);
  }
  if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
  {
    BackingSet = WebCore::getBackingSet((unint64_t)this, v10, a3);
    v28 = v27;
    if (BackingSet)
    {
      v29 = *((_QWORD *)v10 + 3);
      v30 = *(unsigned int *)(v29 + 20);
      if ((_DWORD)v30)
      {
        v31 = *(uint64_t **)(v29 + 8);
        v32 = 8 * v30;
        do
        {
          v33 = *v31++;
          v34 = *(_QWORD *)(v33 + 16);
          JSC::JSLockHolder::JSLockHolder();
          v35 = WebCore::wrap<WebCore::AbstractRange>((uint64_t)this, (uint64_t)this, v34);
          WebCore::addToBackingSet((uint64_t)this, v28, v35);
          MEMORY[0x19AEA32A0](&v53);
          v32 -= 8;
        }
        while (v32);
      }
    }
    v36 = *((_QWORD *)v10 + 3);
    if (*(_DWORD *)(v36 + 20))
    {
      v37 = 0;
      v38 = -8;
      while (1)
      {
        v39 = *(_QWORD *)(v36 + 8);
        WebCore::Highlight::repaintRange(v24);
        if (*(_QWORD *)(*(_QWORD *)(v39 + 8 * v37) + 16) == v24)
          break;
        ++v37;
        v38 -= 8;
        if (v37 >= *(unsigned int *)(v36 + 20))
          goto LABEL_39;
      }
      v41 = *(_QWORD *)(v36 + 8);
      v42 = (WebCore::HighlightRange **)(v41 + 8 * v37);
      v43 = *v42;
      *v42 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1)
        {
          WebCore::HighlightRange::~HighlightRange(v43, v40);
          WTF::fastFree(v48, v49);
        }
        else
        {
          --*(_DWORD *)v43;
        }
      }
      memmove(v42, v42 + 1, *(_QWORD *)(v36 + 8) + 8 * *(unsigned int *)(v36 + 20) - v41 + v38);
      --*(_DWORD *)(v36 + 20);
    }
LABEL_39:
    v44 = (WTF::StringImpl *)MEMORY[0x1E0CBEBE0];
    *MEMORY[0x1E0CBEBE0] += 2;
    v53 = v44;
    v23 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v28, (JSC::JSObject *)&v53, v26);
    v46 = v53;
    v53 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v53, 0, "key", 4, "Highlight", 10, a8, "delete", 7, "AbstractRange", 14);
    return 0;
  }
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  JSC::JSObject *v12;
  int v13;
  WTF::StringImpl *v14;
  char BackingMap;
  WTF::StringImpl *v16;
  const JSC::Identifier *v17;
  JSC::CallFrame *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSValue v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "HighlightRegistry", "get");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHighlightRegistry::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHighlightRegistry::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "HighlightRegistry", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v32);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v34);
  v13 = v35;
  if (!v35)
  {
    v14 = v34;
    v34 = 0;
    BackingMap = WebCore::getBackingMap((unint64_t)this, v5, v12);
    v18 = v16;
    if (!BackingMap)
      goto LABEL_34;
    v36[0] = this;
    v36[1] = v16;
    v19 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v21 = v19 + 16 * v20;
      if (*(_DWORD *)(v19 - 12))
      {
        v22 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
        if ((_DWORD)v20)
        {
          v23 = 16 * v20;
          v22 = v19;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            v23 -= 16;
            if (!v23)
            {
              v22 = v21;
              goto LABEL_22;
            }
          }
        }
        goto LABEL_22;
      }
      v22 = v19 + 16 * v20;
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = v19 + 16 * v20;
    if (!v19)
    {
      v24 = 0;
LABEL_27:
      while (v22 != v24)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v36, (uint64_t *)v22, *(WTF **)(v22 + 8));
        v25 = v22 + 16;
        v22 = v21;
        if (v25 != v21)
        {
          v22 = v25;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            if (v22 == v21)
            {
              v22 = v21;
              break;
            }
          }
        }
      }
LABEL_34:
      v26 = (WTF::StringImpl *)MEMORY[0x1E0CBEBA8];
      *MEMORY[0x1E0CBEBA8] += 2;
      v36[0] = v26;
      v28 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v18, (JSC::JSObject *)v36, v17);
      v29 = v36[0];
      v36[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::destroy(v29, v27);
          if (v14)
          {
LABEL_38:
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v27);
            else
              *(_DWORD *)v14 -= 2;
          }
LABEL_40:
          v13 = v35;
          goto LABEL_41;
        }
        *(_DWORD *)v29 -= 2;
      }
      if (v14)
        goto LABEL_38;
      goto LABEL_40;
    }
LABEL_22:
    v24 = v19 + 16 * *(unsigned int *)(v19 - 4);
    goto LABEL_27;
  }
  v28 = 0;
LABEL_41:
  if (v13 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v13])(v36, &v34);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  JSC::JSObject *v12;
  int v13;
  WTF::StringImpl *v14;
  char BackingMap;
  WTF::StringImpl *v16;
  const JSC::Identifier *v17;
  JSC::CallFrame *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSValue v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "HighlightRegistry", "has");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHighlightRegistry::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHighlightRegistry::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "HighlightRegistry", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v32);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v34);
  v13 = v35;
  if (!v35)
  {
    v14 = v34;
    v34 = 0;
    BackingMap = WebCore::getBackingMap((unint64_t)this, v5, v12);
    v18 = v16;
    if (!BackingMap)
      goto LABEL_34;
    v36[0] = this;
    v36[1] = v16;
    v19 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v21 = v19 + 16 * v20;
      if (*(_DWORD *)(v19 - 12))
      {
        v22 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
        if ((_DWORD)v20)
        {
          v23 = 16 * v20;
          v22 = v19;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            v23 -= 16;
            if (!v23)
            {
              v22 = v21;
              goto LABEL_22;
            }
          }
        }
        goto LABEL_22;
      }
      v22 = v19 + 16 * v20;
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = v19 + 16 * v20;
    if (!v19)
    {
      v24 = 0;
LABEL_27:
      while (v22 != v24)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v36, (uint64_t *)v22, *(WTF **)(v22 + 8));
        v25 = v22 + 16;
        v22 = v21;
        if (v25 != v21)
        {
          v22 = v25;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            if (v22 == v21)
            {
              v22 = v21;
              break;
            }
          }
        }
      }
LABEL_34:
      v26 = (WTF::StringImpl *)MEMORY[0x1E0CBEBB0];
      *MEMORY[0x1E0CBEBB0] += 2;
      v36[0] = v26;
      v28 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v18, (JSC::JSObject *)v36, v17);
      v29 = v36[0];
      v36[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::destroy(v29, v27);
          if (v14)
          {
LABEL_38:
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v27);
            else
              *(_DWORD *)v14 -= 2;
          }
LABEL_40:
          v13 = v35;
          goto LABEL_41;
        }
        *(_DWORD *)v29 -= 2;
      }
      if (v14)
        goto LABEL_38;
      goto LABEL_40;
    }
LABEL_22:
    v24 = v19 + 16 * *(unsigned int *)(v19 - 4);
    goto LABEL_27;
  }
  v28 = 0;
LABEL_41:
  if (v13 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v13])(v36, &v34);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "HighlightRegistry", "entries");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlightRegistry::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlightRegistry::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "HighlightRegistry", "entries");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v28[0] = this;
    v28[1] = v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 4);
      v17 = v15 + 16 * v16;
      if (*(_DWORD *)(v15 - 12))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if ((_DWORD)v16)
        {
          v19 = 16 * v16;
          v18 = v15;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            v19 -= 16;
            if (!v19)
            {
              v18 = v17;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v18 = v15 + 16 * v16;
    }
    else
    {
      v18 = 0;
      v16 = 0;
    }
    v17 = v15 + 16 * v16;
    if (!v15)
    {
      v20 = 0;
LABEL_25:
      while (v18 != v20)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v28, (uint64_t *)v18, *(WTF **)(v18 + 8));
        v21 = v18 + 16;
        v18 = v17;
        if (v21 != v17)
        {
          v18 = v21;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            if (v18 == v17)
            {
              v18 = v17;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v20 = v15 + 16 * *(unsigned int *)(v15 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF8];
  *MEMORY[0x1E0CBEBF8] += 2;
  v28[0] = v22;
  v24 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v28, v13);
  v25 = v28[0];
  v28[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "HighlightRegistry", "keys");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlightRegistry::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlightRegistry::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "HighlightRegistry", "keys");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v28[0] = this;
    v28[1] = v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 4);
      v17 = v15 + 16 * v16;
      if (*(_DWORD *)(v15 - 12))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if ((_DWORD)v16)
        {
          v19 = 16 * v16;
          v18 = v15;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            v19 -= 16;
            if (!v19)
            {
              v18 = v17;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v18 = v15 + 16 * v16;
    }
    else
    {
      v18 = 0;
      v16 = 0;
    }
    v17 = v15 + 16 * v16;
    if (!v15)
    {
      v20 = 0;
LABEL_25:
      while (v18 != v20)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v28, (uint64_t *)v18, *(WTF **)(v18 + 8));
        v21 = v18 + 16;
        v18 = v17;
        if (v21 != v17)
        {
          v18 = v21;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            if (v18 == v17)
            {
              v18 = v17;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v20 = v15 + 16 * *(unsigned int *)(v15 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBC0];
  *MEMORY[0x1E0CBEBC0] += 2;
  v28[0] = v22;
  v24 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v28, v13);
  v25 = v28[0];
  v28[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "HighlightRegistry", "values");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlightRegistry::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlightRegistry::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "HighlightRegistry", "values");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v28[0] = this;
    v28[1] = v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 4);
      v17 = v15 + 16 * v16;
      if (*(_DWORD *)(v15 - 12))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if ((_DWORD)v16)
        {
          v19 = 16 * v16;
          v18 = v15;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            v19 -= 16;
            if (!v19)
            {
              v18 = v17;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v18 = v15 + 16 * v16;
    }
    else
    {
      v18 = 0;
      v16 = 0;
    }
    v17 = v15 + 16 * v16;
    if (!v15)
    {
      v20 = 0;
LABEL_25:
      while (v18 != v20)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v28, (uint64_t *)v18, *(WTF **)(v18 + 8));
        v21 = v18 + 16;
        v18 = v17;
        if (v21 != v17)
        {
          v18 = v21;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            if (v18 == v17)
            {
              v18 = v17;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v20 = v15 + 16 * *(unsigned int *)(v15 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  v28[0] = v22;
  v24 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v28, v13);
  v25 = v28[0];
  v28[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::CallFrame *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  JSC::VM *v23;
  _QWORD v24[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "HighlightRegistry", "forEach");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHighlightRegistry::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHighlightRegistry::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "HighlightRegistry", "forEach");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    if (!WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3))
      return (_BYTE *)WebCore::forwardForEachCallToBackingMap(this, a2, v5, v13);
    v24[0] = this;
    v24[1] = v12;
    v14 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v14)
    {
      v15 = *(unsigned int *)(v14 - 4);
      v16 = v14 + 16 * v15;
      if (*(_DWORD *)(v14 - 12))
      {
        v17 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
        if ((_DWORD)v15)
        {
          v18 = 16 * v15;
          v17 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            v18 -= 16;
            if (!v18)
            {
              v17 = v16;
              goto LABEL_21;
            }
          }
        }
        goto LABEL_21;
      }
      v17 = v14 + 16 * v15;
    }
    else
    {
      v17 = 0;
      v15 = 0;
    }
    v16 = v14 + 16 * v15;
    if (!v14)
    {
      v19 = 0;
LABEL_26:
      while (v17 != v19)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v24, (uint64_t *)v17, *(WTF **)(v17 + 8));
        v20 = v17 + 16;
        v17 = v16;
        if (v20 != v16)
        {
          v17 = v20;
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            if (v17 == v16)
            {
              v17 = v16;
              break;
            }
          }
        }
      }
      return (_BYTE *)WebCore::forwardForEachCallToBackingMap(this, a2, v5, v13);
    }
LABEL_21:
    v19 = v14 + 16 * *(unsigned int *)(v14 - 4);
    goto LABEL_26;
  }
  v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return (_BYTE *)JSC::VM::throwException(v4, this, v22);
}

JSC::JSGlobalObject *WebCore::jsHighlightRegistryPrototypeFunction_set(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  WTF *v20;
  uint64_t v21;
  void *v22;
  JSC::JSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  WTF *v29;
  char BackingMap;
  WTF::StringImpl *v31;
  const JSC::Identifier *v32;
  JSC::CallFrame *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v46;
  WebCore::HighlightRange **v47;
  uint64_t v48;
  WebCore::HighlightRange *v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  JSValue v54;
  JSC::VM *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF *v59;
  WTF::StringImpl *v60[2];
  char v61;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v55 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v55, "HighlightRegistry", "set");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHighlightRegistry::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHighlightRegistry::s_info && v9 != 0);
  }
  if (!v8)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v55, "HighlightRegistry", "set");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v54.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (JSC::JSGlobalObject *)JSC::VM::throwException(v4, this, v54);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v57);
  v13 = v58;
  if (!v58)
  {
    v14 = *((_QWORD *)a2 + 7);
    v60[0] = *((WTF::StringImpl **)this + 7);
    if ((v14 & 0xFFFE000000000002) != 0)
      goto LABEL_25;
    v15 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
    v16 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
    v17 = (char **)(16 * v15);
    if ((_DWORD)v15)
      v18 = v17 == &WebCore::JSHighlight::s_info;
    else
      v18 = 1;
    if (!v18)
    {
      do
      {
        v17 = (char **)v17[2];
        v16 = v17 != 0;
      }
      while (v17 != &WebCore::JSHighlight::s_info && v17 != 0);
    }
    if (!v16 || (v20 = *(WTF **)(v14 + 24)) == 0)
    {
LABEL_25:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v60, 1, "value", 6, "HighlightRegistry", 18, v12, "set", 4, "Highlight", 10);
      v5 = 0;
LABEL_61:
      v13 = v58;
      goto LABEL_62;
    }
    v56 = v57;
    v57 = 0;
    v21 = *(_QWORD *)(v5 + 24);
    ++*(_DWORD *)v20;
    v59 = v20;
    WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>((uint64_t *)(v21 + 8), &v56, (uint64_t *)&v59, (uint64_t)v60);
    if (v61)
    {
      v24 = (_QWORD *)(v21 + 16);
      v25 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v25 == *(_DWORD *)(v21 + 24))
      {
        v27 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v56);
        v25 = *(unsigned int *)(v21 + 28);
        v26 = (_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * v25);
      }
      else
      {
        v26 = (_QWORD *)(*v24 + 8 * v25);
        v27 = (uint64_t *)&v56;
      }
      v28 = *v27;
      *v27 = 0;
      *v26 = v28;
      *(_DWORD *)(v21 + 28) = v25 + 1;
    }
    v29 = v59;
    v59 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
      {
        v46 = *((unsigned int *)v29 + 5);
        if ((_DWORD)v46)
        {
          v47 = (WebCore::HighlightRange **)*((_QWORD *)v29 + 1);
          v48 = 8 * v46;
          do
          {
            v49 = *v47;
            *v47 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 1)
              {
                WebCore::HighlightRange::~HighlightRange(v49, v22);
                WTF::fastFree(v50, v51);
              }
              else
              {
                --*(_DWORD *)v49;
              }
            }
            ++v47;
            v48 -= 8;
          }
          while (v48);
        }
        v52 = (WTF *)*((_QWORD *)v29 + 1);
        if (v52)
        {
          *((_QWORD *)v29 + 1) = 0;
          *((_DWORD *)v29 + 4) = 0;
          WTF::fastFree(v52, v22);
        }
        WTF::fastFree(v29, v22);
      }
      else
      {
        --*(_DWORD *)v29;
      }
    }
    BackingMap = WebCore::getBackingMap((unint64_t)this, (JSC::JSGlobalObject *)v5, v23);
    v33 = v31;
    if (!BackingMap)
    {
LABEL_55:
      v41 = (WTF::StringImpl *)MEMORY[0x1E0CBEBB8];
      *MEMORY[0x1E0CBEBB8] += 2;
      v60[0] = v41;
      WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v33, (JSC::JSObject *)v60, v32);
      v43 = v60[0];
      v60[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v42);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = v56;
      v56 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v42);
        else
          *(_DWORD *)v44 -= 2;
      }
      goto LABEL_61;
    }
    v60[0] = this;
    v60[1] = v31;
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    if (v34)
    {
      v35 = *(unsigned int *)(v34 - 4);
      v36 = v34 + 16 * v35;
      if (*(_DWORD *)(v34 - 12))
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
        if ((_DWORD)v35)
        {
          v38 = 16 * v35;
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
          while ((unint64_t)(*(_QWORD *)v37 + 1) <= 1)
          {
            v37 += 16;
            v38 -= 16;
            if (!v38)
            {
              v37 = v36;
              goto LABEL_45;
            }
          }
        }
        goto LABEL_45;
      }
      v37 = v34 + 16 * v35;
    }
    else
    {
      v37 = 0;
      v35 = 0;
    }
    v36 = v34 + 16 * v35;
LABEL_45:
    if (v34)
      v39 = v34 + 16 * *(unsigned int *)(v34 - 4);
    else
      v39 = 0;
    while (v37 != v39)
    {
      WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v60, (uint64_t *)v37, *(WTF **)(v37 + 8));
      v40 = v37 + 16;
      v37 = v36;
      if (v40 != v36)
      {
        v37 = v40;
        while ((unint64_t)(*(_QWORD *)v37 + 1) <= 1)
        {
          v37 += 16;
          if (v37 == v36)
          {
            v37 = v36;
            break;
          }
        }
      }
    }
    goto LABEL_55;
  }
  v5 = 0;
LABEL_62:
  if (v13 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v13])(v60, &v57);
  return (JSC::JSGlobalObject *)v5;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  JSC::JSObject *v11;
  char BackingMap;
  WTF::StringImpl *v13;
  const JSC::Identifier *v14;
  JSC::CallFrame *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  WTF::StringImpl *v29[2];

  v28 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "HighlightRegistry", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHighlightRegistry::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHighlightRegistry::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "HighlightRegistry", "clear");
  WebCore::HighlightRegistry::clear(*(_QWORD *)(v4 + 24), a2);
  BackingMap = WebCore::getBackingMap((unint64_t)this, (JSC::JSGlobalObject *)v4, v11);
  v15 = v13;
  if (BackingMap)
  {
    v29[0] = this;
    v29[1] = v13;
    v16 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v16)
    {
      v17 = *(unsigned int *)(v16 - 4);
      v18 = v16 + 16 * v17;
      if (*(_DWORD *)(v16 - 12))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if ((_DWORD)v17)
        {
          v20 = 16 * v17;
          v19 = v16;
          while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
          {
            v19 += 16;
            v20 -= 16;
            if (!v20)
            {
              v19 = v18;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v19 = v16 + 16 * v17;
    }
    else
    {
      v19 = 0;
      v17 = 0;
    }
    v18 = v16 + 16 * v17;
    if (!v16)
    {
      v21 = 0;
LABEL_25:
      while (v19 != v21)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v29, (uint64_t *)v19, *(WTF **)(v19 + 8));
        v22 = v19 + 16;
        v19 = v18;
        if (v22 != v18)
        {
          v19 = v22;
          while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
          {
            v19 += 16;
            if (v19 == v18)
            {
              v19 = v18;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v21 = v16 + 16 * *(unsigned int *)(v16 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v23 = (WTF::StringImpl *)MEMORY[0x1E0CBEBD8];
  *MEMORY[0x1E0CBEBD8] += 2;
  v29[0] = v23;
  v25 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v15, (JSC::JSObject *)v29, v14);
  v26 = v29[0];
  v29[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsHighlightRegistryPrototypeFunction_delete(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  JSC::JSObject *v12;
  int v13;
  char BackingMap;
  WTF::StringImpl *v15;
  JSC::CallFrame *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  const JSC::Identifier *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  JSValue v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "HighlightRegistry", "delete");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHighlightRegistry::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHighlightRegistry::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "HighlightRegistry", "delete");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v39);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v42);
  v13 = v43;
  if (!v43)
  {
    v41 = v42;
    v42 = 0;
    BackingMap = WebCore::getBackingMap((unint64_t)this, v5, v12);
    v16 = v15;
    if (!BackingMap)
    {
LABEL_34:
      v24 = *((_QWORD *)v5 + 3);
      v25 = *(unsigned int *)(v24 + 28);
      if ((_DWORD)v25)
      {
        v26 = *(WTF::StringImpl ***)(v24 + 16);
        v27 = v41;
        if (*v26 == v41)
        {
          v28 = 0;
LABEL_41:
          v30 = &v26[v28];
          *v30 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::destroy(v27, v15);
              v25 = *(unsigned int *)(v24 + 28);
            }
            else
            {
              *(_DWORD *)v27 -= 2;
            }
          }
          memmove(v30, v30 + 1, *(_QWORD *)(v24 + 16) + 8 * v25 - (_QWORD)(v30 + 1));
          --*(_DWORD *)(v24 + 28);
        }
        else
        {
          v28 = 0;
          while (v25 - 1 != v28)
          {
            v29 = v26[++v28];
            if (v29 == v41)
              goto LABEL_41;
          }
        }
      }
      WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::remove((uint64_t *)(v24 + 8), (WTF::StringImpl *)&v41);
      v31 = (WTF::StringImpl *)MEMORY[0x1E0CBEBE0];
      *MEMORY[0x1E0CBEBE0] += 2;
      v44[0] = v31;
      v34 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v16, (JSC::JSObject *)v44, v32);
      v35 = v44[0];
      v44[0] = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v33);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = v41;
      v41 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v33);
        else
          *(_DWORD *)v36 -= 2;
      }
      v13 = v43;
      goto LABEL_52;
    }
    v44[0] = this;
    v44[1] = v15;
    v17 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v17)
    {
      v18 = *(unsigned int *)(v17 - 4);
      v19 = v17 + 16 * v18;
      if (*(_DWORD *)(v17 - 12))
      {
        v20 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
        if ((_DWORD)v18)
        {
          v21 = 16 * v18;
          v20 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
          while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
          {
            v20 += 16;
            v21 -= 16;
            if (!v21)
            {
              v20 = v19;
              goto LABEL_22;
            }
          }
        }
        goto LABEL_22;
      }
      v20 = v17 + 16 * v18;
    }
    else
    {
      v20 = 0;
      v18 = 0;
    }
    v19 = v17 + 16 * v18;
    if (!v17)
    {
      v22 = 0;
LABEL_27:
      while (v20 != v22)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>((uint64_t)v44, (uint64_t *)v20, *(WTF **)(v20 + 8));
        v23 = v20 + 16;
        v20 = v19;
        if (v23 != v19)
        {
          v20 = v23;
          while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
          {
            v20 += 16;
            if (v20 == v19)
            {
              v20 = v19;
              break;
            }
          }
        }
      }
      goto LABEL_34;
    }
LABEL_22:
    v22 = v17 + 16 * *(unsigned int *)(v17 - 4);
    goto LABEL_27;
  }
  v34 = 0;
LABEL_52:
  if (v13 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9100[v13])(v44, &v42);
  return (_BYTE *)v34;
}

uint64_t WebCore::jsHistoryPrototypeFunction_back(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  WebCore::History *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSValue v11;
  JSC::VM *v12;
  char v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = WebCore::IDLOperation<WebCore::JSHistory>::cast(*((_QWORD *)a2 + 5));
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "History", "back");
  v6 = *(WebCore::History **)(v5 + 24);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (!v7)
    return 10;
  if (*(_BYTE *)(v7 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CC96ACLL);
  }
  WebCore::History::go(v6, (WebCore::Document *)(v7 - 192), 0xFFFFFFFFLL, (uint64_t)&v15);
  if (!v17)
    return 10;
  v9 = (WTF::StringImpl *)v15;
  v13 = v15;
  v10 = v16;
  v14 = v16;
  if (!*((_QWORD *)v4 + 2))
  {
    v11.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v14);
    JSC::VM::throwException(v4, this, v11);
    v10 = v14;
  }
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return 0;
}

uint64_t WebCore::jsHistoryPrototypeFunction_forward(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  WebCore::History *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSValue v11;
  JSC::VM *v12;
  char v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = WebCore::IDLOperation<WebCore::JSHistory>::cast(*((_QWORD *)a2 + 5));
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "History", "forward");
  v6 = *(WebCore::History **)(v5 + 24);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (!v7)
    return 10;
  if (*(_BYTE *)(v7 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CC97D4);
  }
  WebCore::History::go(v6, (WebCore::Document *)(v7 - 192), 1, (uint64_t)&v15);
  if (!v17)
    return 10;
  v9 = (WTF::StringImpl *)v15;
  v13 = v15;
  v10 = v16;
  v14 = v16;
  if (!*((_QWORD *)v4 + 2))
  {
    v11.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v14);
    JSC::VM::throwException(v4, this, v11);
    v10 = v14;
  }
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return 0;
}

uint64_t WebCore::jsHistoryPrototypeFunction_go(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  WebCore::History *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  JSC::VM *v24;
  char v25;
  WTF::StringImpl *v26;
  int v27[2];
  WTF::StringImpl *v28;
  char v29;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSHistory>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "History", "go");
  v7 = *(WebCore::History **)(v6 + 24);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (!v8)
    return 10;
  v9 = v8;
  if (*(_BYTE *)(v8 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CC99C0);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    *(_QWORD *)v27 = 10;
    v11 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v27, this);
    v14 = v13;
LABEL_9:
    v15 = (v14 >> 52) & 0x7FF;
    v16 = v15 - 1023;
    v17 = v14 >> (51 - (v14 >> 52));
    if (v15 > 0x433)
      LODWORD(v17) = v14 << ((v14 >> 52) - 51);
    if (v15 >= 0x41F)
      v18 = v17;
    else
      v18 = (((1 << ((v14 >> 52) + 1)) - 1) & v17) + (1 << ((v14 >> 52) + 1));
    if ((v14 & 0x8000000000000000) == 0)
      v19 = v18;
    else
      v19 = -v18;
    if (v16 <= 0x53)
      v12 = v19;
    else
      v12 = 0;
    goto LABEL_20;
  }
  v10 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v27 = v10;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v10 < 0xFFFE000000000000)
  {
    v14 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = v10;
LABEL_20:
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11))
  {
    WebCore::History::go(v7, (WebCore::Document *)(v9 - 192), v12, (uint64_t)v27);
    if (!v29)
      return 10;
    v21 = (WTF::StringImpl *)LOBYTE(v27[0]);
    v25 = v27[0];
    v22 = v28;
    v26 = v28;
    if (!*((_QWORD *)v5 + 2))
    {
      v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException(v5, this, v23);
      v22 = v26;
    }
    v26 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsHistoryPrototypeFunction_pushState(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  JSValue v35;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  uint64_t v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t *v54;
  WTF::StringImpl *v55;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "History", "pushState");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHistory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHistory::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "History", "pushState");
  v11 = *(_QWORD **)(v5 + 24);
  v47 = v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v35);
  }
  v12 = *((_QWORD *)a2 + 6);
  v54 = 0;
  v55 = 0;
  v49 = 0;
  v50 = 0;
  WebCore::SerializedScriptValue::create(this, v12, (uint64_t)&v49, (uint64_t)&v54, 1, 1, 0, (uint64_t)&v51);
  if (!v53)
  {
    v14 = v51;
    v51 = 0;
LABEL_11:
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v53])(&v49, &v51);
    v15 = v14;
    goto LABEL_12;
  }
  v14 = 0;
  v15 = 0;
  if (v53 != -1)
    goto LABEL_11;
LABEL_12:
  v16 = v54;
  if (HIDWORD(v55))
  {
    v41 = 8 * HIDWORD(v55);
    do
    {
      v16 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v16, v13)+ 1;
      v41 -= 8;
    }
    while (v41);
    v16 = v54;
  }
  if (v16)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree((WTF *)v16, v13);
  }
  if (!v15)
  {
    v28 = 0;
    v31 = 1;
    LODWORD(v50) = 1;
    goto LABEL_47;
  }
  v49 = v15;
  LODWORD(v50) = 0;
  v17 = *((_QWORD *)a2 + 7);
  v51 = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v51, this);
  }
  else
  {
    v19 = *(_QWORD *)(v17 + 8);
    if ((v19 & 1) != 0)
      v19 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, this);
    if (v19)
      *(_DWORD *)v19 += 2;
    v54 = (uint64_t *)v19;
  }
  if (!*((_DWORD *)v18 + 20))
  {
    v20 = (WTF::StringImpl *)v54;
LABEL_25:
    v45 = v20;
    v46 = 0;
    if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL
      || (v21 = *((_QWORD *)a2 + 8), v21 == 10)
      || (v21 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v22 = 0;
      v44 = 0;
    }
    else
    {
      WebCore::valueToUSVString(this, v21, (uint64_t)&v51);
      LOBYTE(v43) = 0;
      v44 = -1;
      v29 = (int)v52;
      if ((_DWORD)v52 == -1)
      {
        v28 = 0;
        goto LABEL_44;
      }
      ((void (*)(uint64_t **, WTF::StringImpl **, uint64_t *))off_1E32A9688[v52])(&v54, &v43, &v51);
      v44 = v29;
      if ((_DWORD)v52 != -1)
      {
        ((void (*)(uint64_t **, uint64_t *))off_1E32A90E0[v52])(&v54, &v51);
        v29 = v44;
      }
      if (v29)
      {
        v28 = 0;
LABEL_42:
        if (v29 != -1)
          ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v29])(&v51, &v43);
LABEL_44:
        v30 = v46;
        if (v46 == -1)
          goto LABEL_46;
        goto LABEL_45;
      }
      v22 = v43;
    }
    v48 = v22;
    v49 = 0;
    v54 = (uint64_t *)v15;
    v45 = 0;
    v43 = 0;
    WebCore::History::stateObjectAdded(v11, (uint64_t *)&v54, &v48, 0, (uint64_t)&v51);
    v24 = v48;
    v48 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v23);
      else
        *(_DWORD *)v20 -= 2;
    }
    v25 = (unsigned int *)v54;
    v54 = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v25 + 2), v23);
        WTF::fastFree((WTF *)v25, v40);
      }
    }
    if (!(_BYTE)v53)
    {
      v28 = 10;
LABEL_41:
      v29 = v44;
      goto LABEL_42;
    }
    LOBYTE(v54) = v51;
    v38 = v52;
    v52 = 0;
    v55 = v38;
    if (!*((_QWORD *)v47 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v47, (unsigned __int8 *)&v54);
      v38 = v55;
    }
    v55 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v23);
      else
        *(_DWORD *)v38 -= 2;
    }
    if ((_BYTE)v53)
    {
      v39 = v52;
      v52 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 != 2)
        {
          v28 = 0;
          *(_DWORD *)v39 -= 2;
          goto LABEL_41;
        }
        WTF::StringImpl::destroy(v39, v23);
      }
    }
    v28 = 0;
    goto LABEL_41;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
  v20 = (WTF::StringImpl *)v54;
  if (!hasExceptionsAfterHandlingTraps)
    goto LABEL_25;
  v46 = 1;
  v54 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v37);
    else
      *(_DWORD *)v20 -= 2;
  }
  v28 = 0;
  v30 = 1;
LABEL_45:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v30])(&v51, &v45);
LABEL_46:
  v31 = v50;
  if ((_DWORD)v50 != -1)
LABEL_47:
    ((void (*)(uint64_t *, uint64_t *))off_1E32A9698[v31])(&v51, &v49);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsHistoryPrototypeFunction_replaceState(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  JSValue v35;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t *v54;
  WTF::StringImpl *v55;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "History", "replaceState");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHistory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHistory::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "History", "replaceState");
  v11 = *(_QWORD **)(v5 + 24);
  v47 = v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v35);
  }
  v12 = *((_QWORD *)a2 + 6);
  v54 = 0;
  v55 = 0;
  v49 = 0;
  v50 = 0;
  WebCore::SerializedScriptValue::create(this, v12, (uint64_t)&v49, (uint64_t)&v54, 1, 1, 0, (uint64_t)&v51);
  if (!v53)
  {
    v14 = v51;
    v51 = 0;
LABEL_11:
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v53])(&v49, &v51);
    v15 = v14;
    goto LABEL_12;
  }
  v14 = 0;
  v15 = 0;
  if (v53 != -1)
    goto LABEL_11;
LABEL_12:
  v16 = v54;
  if (HIDWORD(v55))
  {
    v41 = 8 * HIDWORD(v55);
    do
    {
      v16 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v16, v13)+ 1;
      v41 -= 8;
    }
    while (v41);
    v16 = v54;
  }
  if (v16)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree((WTF *)v16, v13);
  }
  if (!v15)
  {
    v29 = 0;
    v31 = 1;
    LODWORD(v50) = 1;
    goto LABEL_48;
  }
  v49 = v15;
  LODWORD(v50) = 0;
  v17 = *((_QWORD *)a2 + 7);
  v51 = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v51, this);
  }
  else
  {
    v19 = *(_QWORD *)(v17 + 8);
    if ((v19 & 1) != 0)
      v19 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, this);
    if (v19)
      *(_DWORD *)v19 += 2;
    v54 = (uint64_t *)v19;
  }
  if (*((_DWORD *)v18 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
    v20 = (WTF::StringImpl *)v54;
    if (hasExceptionsAfterHandlingTraps)
    {
      v46 = 1;
      v54 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v37);
        else
          *(_DWORD *)v20 -= 2;
      }
      v29 = 0;
      v30 = 1;
      goto LABEL_46;
    }
  }
  else
  {
    v20 = (WTF::StringImpl *)v54;
  }
  v45 = v20;
  v46 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL || (v21 = *((_QWORD *)a2 + 8), v21 == 10))
  {
    v23 = 0;
    v44 = 0;
LABEL_30:
    v48 = v23;
    v49 = 0;
    v54 = (uint64_t *)v15;
    v45 = 0;
    v43 = 0;
    WebCore::History::stateObjectAdded(v11, (uint64_t *)&v54, &v48, 1, (uint64_t)&v51);
    v25 = v48;
    v48 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v24);
      else
        *(_DWORD *)v20 -= 2;
    }
    v26 = (unsigned int *)v54;
    v54 = 0;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v26 + 2), v24);
        WTF::fastFree((WTF *)v26, v38);
      }
    }
    if (!(_BYTE)v53)
    {
      v29 = 10;
LABEL_42:
      v22 = v44;
      goto LABEL_43;
    }
    LOBYTE(v54) = v51;
    v39 = v52;
    v52 = 0;
    v55 = v39;
    if (!*((_QWORD *)v47 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v47, (unsigned __int8 *)&v54);
      v39 = v55;
    }
    v55 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v24);
      else
        *(_DWORD *)v39 -= 2;
    }
    if ((_BYTE)v53)
    {
      v40 = v52;
      v52 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 != 2)
        {
          v29 = 0;
          *(_DWORD *)v40 -= 2;
          goto LABEL_42;
        }
        WTF::StringImpl::destroy(v40, v24);
      }
    }
    v29 = 0;
    goto LABEL_42;
  }
  WebCore::convert<WebCore::IDLNullable<WebCore::IDLUSVString>>(this, v21, (uint64_t)&v43);
  v22 = v44;
  if (!v44)
  {
    v23 = v43;
    goto LABEL_30;
  }
  v29 = 0;
LABEL_43:
  if (v22 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v22])(&v51, &v43);
  v30 = v46;
  if (v46 != -1)
LABEL_46:
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v30])(&v51, &v45);
  v31 = v50;
  if ((_DWORD)v50 != -1)
LABEL_48:
    ((void (*)(uint64_t *, uint64_t *))off_1E32A9698[v31])(&v51, &v49);
  return (_BYTE *)v29;
}

unint64_t WebCore::IDLOperation<WebCore::JSHistory>::cast(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSHistory::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSHistory::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

JSC::JSGlobalObject *WebCore::convert<WebCore::IDLNullable<WebCore::IDLUSVString>>@<X0>(JSC::JSGlobalObject *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  _BYTE v5[8];
  int v6;
  char v7;

  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    result = (JSC::JSGlobalObject *)WebCore::valueToUSVString(result, a2, (uint64_t)v5);
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 8) = -1;
    v4 = v6;
    if (v6 != -1)
    {
      result = (JSC::JSGlobalObject *)((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E32A9688[v6])(&v7, a3, v5);
      *(_DWORD *)(a3 + 8) = v4;
      if (v6 != -1)
        return (JSC::JSGlobalObject *)((uint64_t (*)(char *, _BYTE *))off_1E32A90E0[v6])(&v7, v5);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      return WTF::fastFree((WTF *)v2, v5);
    }
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmHkdfParams::parametersClass(WebCore::CryptoAlgorithmHkdfParams *this)
{
  return 8;
}

uint64_t WebCore::CryptoAlgorithmHmacKeyParams::parametersClass(WebCore::CryptoAlgorithmHmacKeyParams *this)
{
  return 9;
}

uint64_t WebCore::jsIDBCursorPrototypeFunction_advance(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  uint64_t result;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  char v19;
  WTF::StringImpl *v20;
  unsigned int v21[2];
  WTF::StringImpl *v22;
  char v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "IDBCursor", "advance");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBCursor::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBCursor::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "IDBCursor", "advance");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  v11 = *(unsigned int **)(v5 + 24);
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v21);
  if (!v21[1])
  {
    WebCore::IDBCursor::advance(v11, v21[0], (uint64_t)v21);
    if (!v23)
      return 10;
    v14 = (WTF::StringImpl *)LOBYTE(v21[0]);
    v19 = v21[0];
    v15 = v22;
    v22 = 0;
    v20 = v15;
    if (!*((_QWORD *)v4 + 2))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v21[0]), (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException(v4, this, v16);
      v15 = v20;
    }
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v23)
    {
      v17 = v22;
      v22 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 != 2)
        {
          result = 0;
          *(_DWORD *)v17 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v17, v14);
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsIDBCursorPrototypeFunction_continue(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  uint64_t result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  char v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBCursor", "continue");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBCursor::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBCursor::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBCursor", "continue");
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  WebCore::IDBCursor::continueFunction(*(_QWORD *)(v5 + 24), this, v11, (uint64_t)&v20);
  if (!v22)
    return 10;
  v13 = (WTF::StringImpl *)v20;
  v18 = v20;
  v14 = v21;
  v21 = 0;
  v19 = v14;
  if (!*((_QWORD *)v4 + 2))
  {
    v15.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v19);
    JSC::VM::throwException(v4, this, v15);
    v14 = v19;
  }
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v22)
  {
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        result = 0;
        *(_DWORD *)v16 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v16, v13);
    }
  }
  return 0;
}

uint64_t WebCore::jsIDBCursorPrototypeFunction_continuePrimaryKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  JSValue v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  char v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBCursor", "continuePrimaryKey");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBCursor::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBCursor::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBCursor", "continuePrimaryKey");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v12.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v12);
  }
  WebCore::IDBCursor::continuePrimaryKey(*(_QWORD *)(v5 + 24), this, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)&v20);
  if (!v22)
    return 10;
  v13 = (WTF::StringImpl *)v20;
  v18 = v20;
  v14 = v21;
  v21 = 0;
  v19 = v14;
  if (!*((_QWORD *)v4 + 2))
  {
    v15.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v19);
    JSC::VM::throwException(v4, this, v15);
    v14 = v19;
  }
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v22)
  {
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        result = 0;
        *(_DWORD *)v16 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v16, v13);
    }
  }
  return 0;
}

unsigned int *WebCore::jsIDBCursorPrototypeFunction_update(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unsigned int *v13;
  JSValue v16;
  JSC::VM *v17;
  unsigned __int8 v18[16];
  int v19;
  JSC::VM *v20;
  char v21;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBCursor", "update");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSIDBCursor::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSIDBCursor::s_info && v9 != 0);
  }
  if (!v8)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBCursor", "update");
  v20 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v4, this, v16);
  }
  v12 = *(_QWORD *)(v6 + 40);
  WebCore::IDBCursor::update(*(_QWORD *)(v5 + 24), this, *((WTF **)a2 + 6), (uint64_t)v18);
  v13 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v12, &v20, v18);
  if (v19 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v19])(&v21, v18);
  return v13;
}

unsigned int *WebCore::jsIDBCursorPrototypeFunction_delete(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::IDBCursor *v12;
  uint64_t v13;
  unsigned int *v14;
  JSC::VM *v16;
  unsigned __int8 v17[16];
  int v18;
  JSC::VM *v19;
  char v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v16, "IDBCursor", "delete");
  v6 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSIDBCursor::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSIDBCursor::s_info && v9 != 0);
  }
  if (!v8)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v16, "IDBCursor", "delete");
  v12 = *(WebCore::IDBCursor **)(v4 + 24);
  v19 = v5;
  v13 = *(_QWORD *)(v6 + 40);
  WebCore::IDBCursor::deleteFunction(v12, (uint64_t)v17);
  v14 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v13, &v19, v17);
  if (v18 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v18])(&v20, v17);
  return v14;
}

unsigned int *WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(JSC *this, uint64_t a2, JSC::VM **a3, unsigned __int8 *a4)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  JSC::JSGlobalObject *v16;
  WTF::StringImpl *v17;
  JSValue v18;
  uint64_t v19;
  unsigned int **v20;
  unsigned int *v21;
  WTF::StringImpl *v22;

  v4 = *((_DWORD *)a4 + 4);
  if (!v4)
  {
    v6 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    v21 = (unsigned int *)v6;
    v7 = WebCore::getDOMStructure<WebCore::JSIDBRequest>(*(WebCore::JSIDBRequest **)(a2 + 56), (JSC::VM *)a2);
    v8 = WebCore::JSIDBRequest::create(v7, a2, (uint64_t *)&v21);
    WebCore::cacheWrapper<WebCore::IDBRequest,WebCore::JSIDBRequest>(*(_QWORD *)(a2 + 3320), v6, v8);
    v9 = v21;
    v21 = 0;
    if (v9)
    {
      v10 = v9 + 15;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v9 + 15);
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 72))(v9);
      }
    }
    return (unsigned int *)v8;
  }
  if (v4 == 1)
  {
    v16 = (JSC::JSGlobalObject *)*a4;
    LOBYTE(v21) = *a4;
    v17 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = 0;
    v22 = v17;
    if (!*((_QWORD *)*a3 + 2))
    {
      v18.super.isa = (Class)WebCore::createDOMException(this, v16, (JSC::JSGlobalObject *)&v22);
      JSC::VM::throwException(*a3, this, v18);
      v17 = v22;
    }
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    return 0;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10IDBRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v19, v20);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10IDBRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 15;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10IDBRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOSS_EEEDcSK_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32A9990[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOSS_EEEDcSK_DpT0_(unsigned int **a1, WTF::StringImpl *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*a1, a2, a3);
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, WTF::StringImpl *a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  v4 = result;
  v5 = result[4];
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 1)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E32A9990[v5])(&v13, result);
LABEL_8:
    v4[4] = -1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    v4[2] = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    v4[3] = v9;
    v4[4] = 1;
    return result;
  }
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v10 = *(WTF::StringImpl ***)a2;
    v11 = 8 * v7;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  result = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v8;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6StringENSA_6VectorISB_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32A9990[v3])(&v5, a2);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

_BYTE *WebCore::jsIDBDatabasePrototypeFunction_transaction(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  const char *v22;
  int v23;
  int v24;
  char **v25;
  uint64_t Object;
  JSC::Structure *v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  const char *v35;
  int v36;
  BOOL v37;
  int v38;
  char **v39;
  const char *v40;
  int v41;
  WebCore::IDBTransaction *v42;
  unint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  JSValue v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  JSValue v56;
  uint16x8_t v58;
  bmalloc::api *v59;
  void *v60;
  uint16x8_t v61;
  uint16x8_t v62;
  JSC::VM *v64;
  _QWORD v65[2];
  int v66;
  int v67[2];
  WTF::StringImpl *v68;
  int v69;
  uint64_t v70;
  WebCore::IDBTransaction *v71;
  WTF::StringImpl *v72;
  char v73[8];
  _BYTE v74[16];
  unsigned int v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v64 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "IDBDatabase", "transaction");
  v7 = (uint64_t)a2;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSIDBDatabase::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSIDBDatabase::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "IDBDatabase", "transaction");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v53.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v53);
  }
  v13 = *(_QWORD *)(v6 + 24);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert(this, *((_QWORD *)a2 + 6), a3, (uint64_t)v73);
  v16 = v76;
  if (v76)
  {
    v44 = 0;
    goto LABEL_115;
  }
  v17 = *(int *)(v7 + 32);
  if ((unint64_t)(v17 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = *(_QWORD *)(v7 + 56);
    if (v18 == 10)
    {
      v19 = 0;
      goto LABEL_40;
    }
    v3 = *((_QWORD *)this + 7);
    v71 = (WebCore::IDBTransaction *)v3;
    *(_QWORD *)v67 = v18;
    if ((v18 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v18 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v67, this);
      v20 = v65[0];
      if (v65[0])
        goto LABEL_24;
      goto LABEL_121;
    }
    v20 = *(_QWORD *)(v18 + 8);
    if ((v20 & 1) != 0)
    {
      v20 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v18, this);
      if (!v20)
      {
LABEL_23:
        v65[0] = v20;
        if (v20)
        {
LABEL_24:
          v21 = *(_DWORD *)(v20 + 16);
          v22 = *(const char **)(v20 + 8);
          v23 = *(_DWORD *)(v20 + 4);
          if (v22 == "readonly" || v23 != 8)
          {
            if (v22 != "readonly" || v23 != 8)
            {
              v40 = "readwrite";
              if (v22 == "readwrite" || v23 != 9)
                goto LABEL_177;
              if ((v21 & 4) != 0)
              {
                if (*v22 != 114 || *(_DWORD *)(v22 + 1) != 2003067237 || *(_DWORD *)(v22 + 5) != 1702127986)
                  goto LABEL_30;
              }
              else
              {
                if (*(_WORD *)v22 != 114)
                  goto LABEL_30;
                v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v22 + 2), (int16x8_t)xmmword_1968C0130);
                v58.i16[0] = vminvq_u16(v58);
                if (!v58.i32[0])
                  goto LABEL_30;
              }
              v25 = &off_1E32A5080;
              goto LABEL_34;
            }
          }
          else if ((v21 & 4) != 0)
          {
            if (*v22 != 114 || *(_DWORD *)(v22 + 1) != 1868849509 || *((_DWORD *)v22 + 1) != 2037149295)
              goto LABEL_30;
          }
          else
          {
            if (*(_WORD *)v22 != 114)
            {
LABEL_30:
              v24 = 0;
              v19 = 0;
              goto LABEL_35;
            }
            v24 = 0;
            if (*(_QWORD *)(v22 + 2) != 0x6F006400610065)
            {
              v19 = 0;
              goto LABEL_35;
            }
            v19 = 0;
            if (*((_QWORD *)v22 + 1) != 0x79006C006E006FLL)
              goto LABEL_35;
          }
          v25 = &WebCore::parseEnumerationFromString<WebCore::IDBTransactionMode>(WTF::String const&)::mappings;
          goto LABEL_34;
        }
LABEL_121:
        v19 = 0;
        v24 = 0;
        goto LABEL_37;
      }
    }
    else if (!v20)
    {
      goto LABEL_23;
    }
    *(_DWORD *)v20 += 2;
    goto LABEL_23;
  }
  v19 = 0;
  while (1)
  {
LABEL_40:
    if ((unint64_t)(v17 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v32 = 2;
      v7 = 10;
      goto LABEL_101;
    }
    v7 = *(_QWORD *)(v7 + 64);
    v3 = *((_QWORD *)this + 7);
    v70 = v3;
    if ((v7 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if ((v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject((JSC::JSCell *)v7)) == 0)
      {
LABEL_130:
        JSC::throwTypeError();
LABEL_131:
        v44 = 0;
        goto LABEL_114;
      }
      v27 = (JSC::Structure *)Object;
      v28 = v5;
      WTF::AtomStringImpl::addLiteral();
      v29 = *(WTF::StringImpl **)v67;
      v31 = JSC::JSObject::get(v27, this, *(unint64_t *)v67);
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v30);
        else
          *(_DWORD *)v29 -= 2;
      }
      v5 = v28;
      if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
        goto LABEL_131;
      if (v31 != 10)
      {
        v3 = *((_QWORD *)this + 7);
        v71 = (WebCore::IDBTransaction *)v3;
        *(_QWORD *)v67 = v31;
        if ((v31 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v31 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v67, this);
          v33 = v65[0];
          if (v65[0])
            goto LABEL_57;
          goto LABEL_125;
        }
        v33 = *(_QWORD *)(v31 + 8);
        if ((v33 & 1) != 0)
        {
          v33 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v31, this);
          if (!v33)
          {
LABEL_56:
            v65[0] = v33;
            if (v33)
            {
LABEL_57:
              v34 = *(_DWORD *)(v33 + 16);
              v35 = *(const char **)(v33 + 8);
              v36 = *(_DWORD *)(v33 + 4);
              v37 = v36 != 7;
              if (v35 == "default" || v36 != 7)
              {
                if (v35 == "default")
                {
                  v38 = *(_DWORD *)(v33 + 4);
                  if (v36 == 7)
                    goto LABEL_88;
                }
                else
                {
                  v38 = *(_DWORD *)(v33 + 4);
                }
              }
              else
              {
                if ((v34 & 4) != 0)
                {
                  if (*v35 != 100 || *(_DWORD *)(v35 + 1) != 1969317477 || *(_DWORD *)(v35 + 3) != 1953264993)
                    goto LABEL_63;
                  goto LABEL_88;
                }
                if (*(_WORD *)v35 != 100)
                {
LABEL_63:
                  v38 = 7;
                  goto LABEL_64;
                }
                v38 = 7;
                if (*(_QWORD *)(v35 + 2) == 0x75006100660065 && *(_QWORD *)(v35 + 6) == 0x74006C00750061)
                {
LABEL_88:
                  v39 = &WebCore::parseEnumerationFromString<WebCore::IDBTransactionDurability>(WTF::String const&)::mappings;
                  goto LABEL_96;
                }
              }
LABEL_64:
              if (v35 == "relaxed")
                v37 = 1;
              if (v37)
              {
                if (v35 == "relaxed" && v36 == 7)
                  goto LABEL_95;
              }
              else
              {
                if (!v38)
                  goto LABEL_95;
                if ((v34 & 4) != 0)
                {
                  if (*v35 != 114 || *(_DWORD *)(v35 + 1) != 2019650661 || *(_DWORD *)(v35 + 3) != 1684371553)
                    goto LABEL_72;
LABEL_95:
                  v39 = &off_1E32A5038;
                  goto LABEL_96;
                }
                if (*(_WORD *)v35 == 114
                  && *(_QWORD *)(v35 + 2) == 0x780061006C0065
                  && *(_QWORD *)(v35 + 6) == 0x64006500780061)
                {
                  goto LABEL_95;
                }
              }
LABEL_72:
              if (v35 == "strict" || v38 != 6)
              {
                if (v38 == 6 && v35 == "strict")
                  goto LABEL_78;
              }
              else if ((v34 & 4) != 0)
              {
                if (*v35 == 115 && *(_DWORD *)(v35 + 1) == 1667854964 && *(_DWORD *)(v35 + 2) == 1952672114)
                {
LABEL_78:
                  v39 = &off_1E32A5050;
LABEL_96:
                  v32 = *((unsigned __int8 *)v39 + 16);
                  v41 = 1;
                  goto LABEL_97;
                }
              }
              else if (*(_WORD *)v35 == 115
                     && *(_QWORD *)(v35 + 4) == 0x74006300690072
                     && *(_QWORD *)(v35 + 2) == 0x63006900720074)
              {
                goto LABEL_78;
              }
              v41 = 0;
              v32 = 0;
LABEL_97:
              v65[0] = 0;
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v33, v30);
              else
                *(_DWORD *)v33 -= 2;
              goto LABEL_99;
            }
LABEL_125:
            v32 = 0;
            v41 = 0;
LABEL_99:
            if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
              goto LABEL_131;
            if (!v41)
              goto LABEL_130;
            goto LABEL_101;
          }
        }
        else if (!v33)
        {
          goto LABEL_56;
        }
        *(_DWORD *)v33 += 2;
        goto LABEL_56;
      }
    }
    v32 = 2;
LABEL_101:
    if (!v76)
    {
      v3 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
      LOBYTE(v65[0]) = 0;
      v66 = -1;
      v6 = v75;
      if (v75 != -1)
      {
        ((void (*)(int *, _QWORD *, _BYTE *))off_1E32A99A0[v75])(v67, v65, v74);
        v66 = v6;
      }
      WebCore::IDBDatabase::transaction(v13, (uint64_t)v65, v19, v32 | 0x100, (uint64_t)v67);
      if (!v69)
      {
        v42 = *(WebCore::IDBTransaction **)v67;
        *(_QWORD *)v67 = 0;
        v71 = v42;
        v43 = WebCore::getDOMStructure<WebCore::JSIDBTransaction>(*(WebCore::JSIDBTransaction **)(v3 + 56), (JSC::VM *)v3);
        v44 = WebCore::JSIDBTransaction::create(v43, v3, (uint64_t *)&v71);
        WebCore::cacheWrapper<WebCore::IDBTransaction,WebCore::JSIDBTransaction>(*(_QWORD *)(v3 + 3320), (uint64_t)v42, v44);
        v46 = (unsigned int *)v71;
        v71 = 0;
        if (v46)
        {
          v47 = v46 + 6;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v46 + 6);
            WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v46, v45);
            bmalloc::api::isoDeallocate(v59, v60);
          }
        }
        goto LABEL_110;
      }
      if (v69 == 1)
        break;
    }
    v20 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_177:
    if (v22 == v40 && v23 == 9)
    {
      v25 = &off_1E32A5080;
LABEL_34:
      v19 = *((unsigned __int8 *)v25 + 16);
      v24 = 1;
      goto LABEL_35;
    }
    if (v22 == "versionchange" || v23 != 13)
    {
      if (v23 == 13 && v22 == "versionchange")
      {
LABEL_186:
        v25 = &off_1E32A5098;
        goto LABEL_34;
      }
    }
    else if ((v21 & 4) != 0)
    {
      if (*v22 == 118 && *(_QWORD *)(v22 + 1) == 0x68636E6F69737265 && *(_QWORD *)(v22 + 5) == 0x65676E6168636E6FLL)
        goto LABEL_186;
    }
    else if (*(_WORD *)v22 == 118)
    {
      v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v22 + 2), (int16x8_t)xmmword_1968C0140);
      v61.i16[0] = vminvq_u16(v61);
      if (v61.i32[0])
      {
        v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v22 + 10), (int16x8_t)xmmword_1968A3560);
        v62.i16[0] = vminvq_u16(v62);
        if (v62.i32[0])
          goto LABEL_186;
      }
    }
    v24 = 0;
    v19 = 0;
LABEL_35:
    v65[0] = 0;
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v20, v14);
    else
      *(_DWORD *)v20 -= 2;
LABEL_37:
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
      goto LABEL_169;
    if (!v24)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v71, 1, "mode", 5, "IDBDatabase", 12, v15, "transaction", 12, "\"readonly\", \"readwrite\", \"versionchange\"", 41);
LABEL_169:
      v44 = 0;
      goto LABEL_114;
    }
    v17 = *(int *)(v7 + 32);
  }
  v54 = (WTF::StringImpl *)LOBYTE(v67[0]);
  LOBYTE(v71) = v67[0];
  v55 = v68;
  v68 = 0;
  v72 = v55;
  if (!*((_QWORD *)v5 + 2))
  {
    v56.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v67[0]), (JSC::JSGlobalObject *)&v72);
    JSC::VM::throwException(v5, this, v56);
    v55 = v72;
  }
  v72 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v54);
    else
      *(_DWORD *)v55 -= 2;
  }
  v44 = 0;
LABEL_110:
  if (v69 != -1)
    ((void (*)(WebCore::IDBTransaction **, int *))off_1E32A9BC0[v69])(&v71, v67);
  v69 = -1;
  if (v66 != -1)
    ((void (*)(WebCore::IDBTransaction **, _QWORD *))off_1E32A9990[v66])(&v71, v65);
LABEL_114:
  v16 = v76;
LABEL_115:
  if (v16 != -1)
    ((void (*)(int *, _BYTE *))off_1E32A9BD0[v16])(v67, v74);
  return (_BYTE *)v44;
}

uint64_t WebCore::jsIDBDatabasePrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "IDBDatabase", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSIDBDatabase::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSIDBDatabase::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "IDBDatabase", "close");
  WebCore::IDBDatabase::close(*(_QWORD *)(v3 + 24));
  return 10;
}

_BYTE *WebCore::jsIDBDatabasePrototypeFunction_createObjectStore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  JSC::JSCell *v16;
  JSC::VM *v17;
  uint64_t Object;
  JSC::Structure *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  BOOL v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  WTF *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v48;
  int v49;
  uint64_t (*v50)();
  int v51;
  JSValue v53;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  JSValue v57;
  bmalloc::api *v58;
  void *v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  BOOL v64;
  WebCore *v65;
  JSC::JSGlobalObject *v66;
  JSC::CallFrame *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  unsigned __int8 v75;
  BOOL v76;
  JSC::VM *v77;
  _BYTE v78[16];
  int v79;
  WTF::StringImpl *v80[2];
  int v81;
  char v82;
  char v83;
  uint64_t v84;
  _BYTE v85[16];
  int v86;
  char v87;
  unsigned __int8 v88;
  int v89;
  WTF::StringImpl *v90;
  char v91[8];
  int v92;
  int v93;
  unsigned __int8 v94;
  int v95;
  WTF *v96;
  WTF::StringImpl *v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v69 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v69, "IDBDatabase", "createObjectStore");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSIDBDatabase::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSIDBDatabase::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v69, "IDBDatabase", "createObjectStore");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v53.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v53);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v84 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v90 = (WTF::StringImpl *)v14;
      goto LABEL_19;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v84, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v15 = v90;
    if (hasExceptionsAfterHandlingTraps)
    {
      v71 = 1;
      v90 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v55);
        else
          *(_DWORD *)v15 -= 2;
      }
      v39 = 0;
      v46 = 1;
      goto LABEL_95;
    }
  }
  else
  {
    v15 = v90;
  }
  v70 = v15;
  v71 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v77 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_32;
  }
  v16 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  v77 = v17;
  if (((unint64_t)v16 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_32:
    LOBYTE(v72) = 0;
    v75 = 0;
    v76 = 0;
LABEL_44:
    v30 = 0;
    v91[0] = 0;
    v94 = 0;
    v95 = 0;
    LOBYTE(v96) = 0;
    LOBYTE(v99) = 0;
    goto LABEL_45;
  }
  v68 = v12;
  if (((unint64_t)v16 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v16)) == 0)
  {
    JSC::throwTypeError();
    v39 = 0;
    v34 = 1;
    v89 = 1;
    goto LABEL_93;
  }
  v19 = (JSC::Structure *)Object;
  v20 = v4;
  LOBYTE(v72) = 0;
  v75 = 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v90;
  v23 = JSC::JSObject::get(v19, this, (unint64_t)v90);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
  {
    v89 = 1;
    v4 = v20;
    v12 = v68;
    goto LABEL_69;
  }
  v4 = v20;
  if (v23 == 10)
  {
    v24 = 0;
    goto LABEL_38;
  }
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v23 >= 0xFFFE000000000000)
  {
    v24 = (_DWORD)v23 != 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v26 = v23 - 0x2000000000000;
  if (v23 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v26 <= 0.0)
    {
      v24 = v26 < 0.0;
LABEL_162:
      v4 = v20;
      goto LABEL_37;
    }
LABEL_161:
    v24 = 1;
    goto LABEL_162;
  }
  if ((v23 & 0xFFFE000000000002) == 0)
  {
    v60 = *(unsigned __int8 *)(v23 + 5);
    if (v60 == 3)
    {
      v63 = *(_DWORD *)(v23 + 8);
LABEL_156:
      v64 = v63 == 0;
      goto LABEL_157;
    }
    if (v60 == 2)
    {
      v61 = *(_QWORD *)(v23 + 8);
      if ((v61 & 1) != 0)
        v62 = (int *)(v23 + 16);
      else
        v62 = (int *)(v61 + 4);
      v63 = *v62;
      goto LABEL_156;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v64 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_157:
      v24 = !v64;
      goto LABEL_162;
    }
    goto LABEL_161;
  }
  v24 = v23 == 7;
LABEL_37:
  if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
  {
LABEL_143:
    v89 = 1;
    v12 = v68;
    goto LABEL_69;
  }
LABEL_38:
  v76 = v24;
  WTF::AtomStringImpl::addLiteral();
  v27 = v90;
  v29 = JSC::JSObject::get(v19, this, (unint64_t)v90);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    goto LABEL_143;
  if ((v29 | 8) == 0xA)
  {
    v12 = v68;
    goto LABEL_44;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert(this, v29, a3, (uint64_t)&v96);
  v48 = v100;
  if (v100)
  {
    v95 = 1;
    v12 = v68;
    goto LABEL_114;
  }
  v78[0] = 0;
  v79 = -1;
  v49 = v99;
  if (v99 == -1)
  {
    LOBYTE(v80[0]) = 0;
    v82 = 1;
    v91[0] = 0;
    v93 = -1;
    v94 = 1;
    v95 = 0;
    v12 = v68;
LABEL_110:
    v81 = -1;
    goto LABEL_111;
  }
  v50 = off_1E32A99A0[v99];
  ((void (*)(WTF::StringImpl **, _BYTE *, WTF::StringImpl **))v50)(v80, v78, &v97);
  v79 = v49;
  LOBYTE(v80[0]) = 0;
  v81 = -1;
  ((void (*)(char *, WTF::StringImpl **, _BYTE *))v50)(&v83, v80, v78);
  v81 = v49;
  v82 = 1;
  v91[0] = 0;
  v94 = 0;
  v93 = -1;
  ((void (*)(char *, char *, WTF::StringImpl **))v50)(&v83, v91, v80);
  v93 = v49;
  v94 = 1;
  v95 = 0;
  v12 = v68;
  if (v82)
  {
    if (v81 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E32A9990[v81])(&v83, v80);
    goto LABEL_110;
  }
LABEL_111:
  if (v79 != -1)
    ((void (*)(char *, _BYTE *))off_1E32A9990[v79])(&v83, v78);
  v48 = v100;
LABEL_114:
  if (v48 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A9BD0[v48])(v80, &v97);
  v33 = v95;
  if (!v95)
  {
    v30 = v94;
    LOBYTE(v96) = 0;
    LOBYTE(v99) = 0;
    if (v94)
    {
      v98 = -1;
      v51 = v93;
      if (v93 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF **, char *))off_1E32A99A0[v93])(v80, &v96, v91);
        v98 = v51;
      }
      v30 = 1;
      LOBYTE(v99) = 1;
    }
LABEL_45:
    if (v75 != v30)
    {
      if (v75)
      {
        if (v74 != -1)
          ((void (*)(WTF::StringImpl **, WTF **, JSC::CallFrame *))off_1E32A9990[v74])(v80, &v72, a3);
        v74 = -1;
        v75 = 0;
      }
      else
      {
        LOBYTE(v72) = 0;
        v74 = -1;
        v31 = v98;
        if (v98 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF **, WTF **))off_1E32A99A0[v98])(v80, &v72, &v96);
          v74 = v31;
        }
        v75 = 1;
      }
      goto LABEL_59;
    }
    if (!v75)
    {
LABEL_62:
      v85[0] = 0;
      v87 = 0;
      if (v75)
      {
        v86 = -1;
        v32 = v74;
        if (v74 != -1)
        {
          ((void (*)(WTF **, _BYTE *, WTF **))off_1E32A99A0[v74])(&v96, v85, &v72);
          v86 = v32;
        }
        v87 = 1;
      }
      v88 = v76;
      v89 = 0;
      v33 = v95;
      goto LABEL_67;
    }
    if (v74 == -1)
    {
      if (v98 == -1)
        goto LABEL_59;
    }
    else if (v98 == -1)
    {
      ((void (*)(WTF::StringImpl **, WTF **, JSC::CallFrame *))off_1E32A9990[v74])(v80, &v72, a3);
      v74 = -1;
LABEL_59:
      if ((_BYTE)v99 && v98 != -1)
        ((void (*)(WTF::StringImpl **, WTF **))off_1E32A9990[v98])(v80, &v96);
      goto LABEL_62;
    }
    v80[0] = (WTF::StringImpl *)&v72;
    ((void (*)(WTF::StringImpl **, WTF **, WTF **))off_1E32A99B0[v98])(v80, &v72, &v96);
    goto LABEL_59;
  }
  v89 = 1;
LABEL_67:
  if (v33 != -1)
    ((void (*)(WTF **, char *, JSC::CallFrame *))off_1E32A99C0[v33])(&v96, v91, a3);
LABEL_69:
  if (v75 && v74 != -1)
    ((void (*)(WTF::StringImpl **, WTF **))off_1E32A9990[v74])(&v90, &v72);
  v34 = v89;
  if (v89)
  {
    v39 = 0;
    goto LABEL_92;
  }
  v35 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v70 = 0;
  v80[0] = v15;
  LOBYTE(v90) = 0;
  LOBYTE(v93) = 0;
  if (v87)
  {
    v92 = -1;
    v36 = v86;
    if (v86 != -1)
    {
      ((void (*)(WTF **, WTF::StringImpl **, _BYTE *))off_1E32A99A0[v86])(&v96, &v90, v85);
      v92 = v36;
    }
    LOBYTE(v93) = 1;
  }
  v94 = v88;
  WebCore::IDBDatabase::createObjectStore(v12, v80, (uint64_t)&v90, (uint64_t)&v96);
  if (!v98)
  {
    v37 = v96;
    v96 = 0;
    v72 = v37;
    v39 = WebCore::createWrapper<WebCore::IDBObjectStore,WebCore::IDBObjectStore>(v35, &v72);
    v40 = v72;
    v72 = 0;
    if (v40)
    {
      v41 = (unsigned int *)*((_QWORD *)v40 + 19);
      v42 = v41 + 6;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v41 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v41, v38);
        bmalloc::api::isoDeallocate(v58, v59);
      }
    }
LABEL_83:
    if (v98 != -1)
      ((void (*)(WTF **, WTF **))off_1E32A9BE0[v98])(&v72, &v96);
    v98 = -1;
    if ((_BYTE)v93 && v92 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E32A9990[v92])(&v72, &v90);
    v45 = v80[0];
    v80[0] = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v38);
      else
        *(_DWORD *)v45 -= 2;
    }
    v34 = v89;
LABEL_92:
    if (v34 == -1)
    {
LABEL_94:
      v46 = 0;
LABEL_95:
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v46])(&v84, &v70);
      return (_BYTE *)v39;
    }
LABEL_93:
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E32A9BF0[v34])(&v90, v85);
    goto LABEL_94;
  }
  if (v98 == 1)
  {
    v38 = (WTF::StringImpl *)v96;
    LOBYTE(v72) = (_BYTE)v96;
    v56 = v97;
    v97 = 0;
    v73 = v56;
    if (!*(_QWORD *)(v4 + 16))
    {
      v57.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v96, (JSC::JSGlobalObject *)&v73);
      JSC::VM::throwException((JSC::VM *)v4, this, v57);
      v56 = v73;
    }
    v73 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v38);
      else
        *(_DWORD *)v56 -= 2;
    }
    v39 = 0;
    goto LABEL_83;
  }
  v65 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsIDBDatabasePrototypeFunction_deleteObjectStore(v65, v66, v67);
}

_BYTE *WebCore::jsIDBDatabasePrototypeFunction_deleteObjectStore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33[2];
  WTF::StringImpl *v34;
  char v35;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "IDBDatabase", "deleteObjectStore");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBDatabase::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBDatabase::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "IDBDatabase", "deleteObjectStore");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v33 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v31 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v33, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v14 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v30 = 1;
      v31 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v14 = v31;
  }
  v30 = 0;
  v29 = 0;
  v31 = v14;
  WebCore::IDBDatabase::deleteObjectStore(v11, &v31, a3, (uint64_t)v33);
  v16 = v31;
  v31 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v35)
  {
    v24 = (WTF::StringImpl *)LOBYTE(v33[0]);
    LOBYTE(v31) = v33[0];
    v25 = v34;
    v34 = 0;
    v32 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v32);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v32;
    }
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v35)
    {
      v27 = v34;
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v17 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_26;
        }
        WTF::StringImpl::destroy(v27, v24);
      }
    }
    v17 = 0;
    goto LABEL_26;
  }
  v17 = 10;
LABEL_26:
  v18 = 0;
LABEL_27:
  ((void (*)(int *, uint64_t *))off_1E32A90E0[v18])(v33, &v29);
  return (_BYTE *)v17;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t this@<X1>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  JSC::VM *v7;
  unsigned int v8;
  JSC::JSObject *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v19;
  JSC::JSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((this & 0xFFFE000000000002) != 0)
  {
    v25 = this;
LABEL_3:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, a1);
    goto LABEL_13;
  }
  v8 = *(unsigned __int8 *)(this + 5);
  if (v8 < 0x17)
  {
LABEL_8:
    v25 = this;
    if (v8 != 2)
      goto LABEL_3;
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_12;
    }
    else if (!v10)
    {
LABEL_12:
      v24 = v10;
LABEL_13:
      if (*((_DWORD *)v7 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
        v11 = v24;
        if (hasExceptionsAfterHandlingTraps)
        {
          LODWORD(v22) = 1;
          v24 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v17);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = 1;
          v13 = 1;
          goto LABEL_16;
        }
      }
      else
      {
        v11 = v24;
      }
      v12 = 0;
      v13 = 0;
      LODWORD(v22) = 0;
      v21 = 0;
      *(_QWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 24) = 0;
LABEL_16:
      *(_DWORD *)(a4 + 32) = v12;
      return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E32A90E0[v13])(&v25, &v21);
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_12;
  }
  v9 = (JSC::JSObject *)JSC::iteratorMethod(a1, (JSC::JSGlobalObject *)this, a3);
  if (*((_DWORD *)v7 + 20))
  {
    v19 = v7;
    v20 = v9;
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
    v9 = v20;
    if ((_DWORD)result)
    {
      *(_DWORD *)(a4 + 32) = 1;
      return result;
    }
  }
  if (v9 == (JSC::JSObject *)10)
  {
    v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v8 = *(unsigned __int8 *)(this + 5);
    goto LABEL_8;
  }
  result = WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(a1, this, v9, (uint64_t)&v21);
  v15 = v23;
  if (!v23)
  {
    *(_QWORD *)(a4 + 8) = v21;
    v16 = v22;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)(a4 + 16) = v16;
    *(_DWORD *)(a4 + 24) = 1;
    *(_DWORD *)(a4 + 32) = 0;
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E32A9BB0[v15])(&v25, &v21);
  }
  *(_DWORD *)(a4 + 32) = 1;
  if ((_DWORD)v15 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E32A9BB0[v15])(&v25, &v21);
  return result;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  JSC::VM *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF **v14;

  v12 = 0;
  v13 = 0;
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v14 = &v12;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a1, a2, a3, (uint64_t *)&v14);
  if (*((_DWORD *)v5 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v5), (result & 1) != 0))
  {
    v8 = HIDWORD(v13);
    result = (uint64_t)v12;
    *(_DWORD *)(a4 + 16) = 1;
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(WTF::StringImpl **)result;
        *(_QWORD *)result = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            v11 = result;
            WTF::StringImpl::destroy(v10, v7);
            result = v11;
          }
          else
          {
            *(_DWORD *)v10 -= 2;
          }
        }
        result += 8;
        v9 -= 8;
      }
      while (v9);
      result = (uint64_t)v12;
    }
    if (result)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      return WTF::fastFree((WTF *)result, v7);
    }
  }
  else
  {
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  JSC::JSRopeString *IndexQuickly;
  JSC::JSRopeString *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      IndexQuickly = (JSC::JSRopeString *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSRopeString *)JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          break;
      }
      v18 = v8;
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDOMString>::convert((int)&v18, a1, IndexQuickly, *a4);
      if (*(_QWORD *)(v8 + 16))
      {
        v16 = JSC::JSArrayIterator::create();
        v17 = i | 0xFFFE000000000000;
        if (i < 0)
          v17 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v16 + 16) = v17;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, a3, v10);
    if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || result == 6)
          break;
        v15 = (JSC::JSRopeString *)JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          if ((result & 1) != 0)
            break;
        }
        v18 = v8;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDOMString>::convert((int)&v18, a1, v15, *a4);
        if (*(_QWORD *)(v8 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14IDBTransactionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  result = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    v3 = result + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
      return (unsigned int *)bmalloc::api::isoDeallocate(v6, v7);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14IDBTransactionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringENS9_6VectorISA_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32A9990[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int **)(v2 + 152);
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11IDBDatabase21ObjectStoreParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32A9990[v3])(&v5, a2);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

uint64_t WebCore::jsIDBFactoryPrototypeFunction_open(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  WebCore::IDBClient::IDBConnectionProxy **v13;
  uint64_t v14;
  WebCore::ScriptExecutionContext *v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WebCore::IDBDatabaseIdentifier *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  JSValue v29;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WebCore::IDBDatabaseIdentifier *v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;
  char v40;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "IDBFactory", "open");
  v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v8 = *(unsigned int *)(v7 + 0x4C);
  v9 = *(_DWORD *)(v7 + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSIDBFactory::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSIDBFactory::s_info && v10 != 0);
  }
  if (!v9)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "IDBFactory", "open");
  v38 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v29);
  }
  v13 = *(WebCore::IDBClient::IDBConnectionProxy ***)(v5 + 24);
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v7 + 40));
  if (!v14)
    return 10;
  v15 = (WebCore::ScriptExecutionContext *)v14;
  v16 = *((_QWORD *)a2 + 6);
  v33 = (WebCore::IDBDatabaseIdentifier *)v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v18)
        goto LABEL_19;
    }
    else if (!v18)
    {
LABEL_19:
      v39 = v18;
      goto LABEL_20;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, this);
LABEL_20:
  if (*((_DWORD *)v17 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v39;
    if (hasExceptionsAfterHandlingTraps)
    {
      v37 = 1;
      v39 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v31);
        else
          *(_DWORD *)v19 -= 2;
      }
      v24 = 0;
      v26 = 1;
      goto LABEL_39;
    }
  }
  else
  {
    v19 = v39;
  }
  v36 = v19;
  v37 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL || (v20 = *((_QWORD *)a2 + 7), v20 == 10))
  {
    v21 = 0;
    v22 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v36 = 0;
    v39 = v19;
    goto LABEL_25;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v20, (uint64_t)&v33);
  if (!v34)
  {
    v21 = v33;
    v22 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v36 = 0;
    v39 = v19;
    if (!v33)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v33) = 33;
      v35 = 1;
      goto LABEL_26;
    }
LABEL_25:
    WebCore::IDBFactory::openInternal(v13, v15, &v39, v21, (uint64_t)&v33);
LABEL_26:
    v24 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBOpenDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>(this, v22, &v38, (unsigned __int8 *)&v33);
    if (v35 != -1)
      ((void (*)(char *, WebCore::IDBDatabaseIdentifier **))off_1E32A9CC8[v35])(&v40, &v33);
    v35 = -1;
    v25 = v39;
    v39 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v23);
      else
        *(_DWORD *)v25 -= 2;
    }
    goto LABEL_38;
  }
  v24 = 0;
LABEL_38:
  v26 = 0;
LABEL_39:
  ((void (*)(WebCore::IDBDatabaseIdentifier **, WTF::StringImpl **))off_1E32A90E0[v26])(&v33, &v36);
  return (uint64_t)v24;
}

uint64_t WebCore::jsIDBFactoryPrototypeFunction_deleteDatabase(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  WebCore::IDBClient::IDBConnectionProxy **v13;
  uint64_t v14;
  WebCore::ScriptExecutionContext *v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSValue v27;
  WTF::StringImpl *v28;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v30;
  unsigned __int8 v31[16];
  int v32;
  uint64_t v33;
  int v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  char v37;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "IDBFactory", "deleteDatabase");
  v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v8 = *(unsigned int *)(v7 + 0x4C);
  v9 = *(_DWORD *)(v7 + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSIDBFactory::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSIDBFactory::s_info && v10 != 0);
  }
  if (!v9)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "IDBFactory", "deleteDatabase");
  v35 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v27);
  }
  v13 = *(WebCore::IDBClient::IDBConnectionProxy ***)(v5 + 24);
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v7 + 40));
  if (!v14)
    return 10;
  v15 = (WebCore::ScriptExecutionContext *)v14;
  v16 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v31 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v18)
        goto LABEL_19;
    }
    else if (!v18)
    {
LABEL_19:
      v36 = v18;
      goto LABEL_20;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v31, this);
LABEL_20:
  if (*((_DWORD *)v17 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v36;
    if (hasExceptionsAfterHandlingTraps)
    {
      v34 = 1;
      v36 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v28);
        else
          *(_DWORD *)v19 -= 2;
      }
      v22 = 0;
      v24 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v19 = v36;
  }
  v34 = 0;
  v20 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v33 = 0;
  v36 = v19;
  WebCore::IDBFactory::deleteDatabase(v13, v15, &v36, (uint64_t)v31);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBOpenDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>(this, v20, &v35, v31);
  if (v32 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9CC8[v32])(&v37, v31);
  v32 = -1;
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = 0;
LABEL_28:
  ((void (*)(unsigned __int8 *, uint64_t *))off_1E32A90E0[v24])(v31, &v33);
  return (uint64_t)v22;
}

unint64_t WebCore::jsIDBFactoryPrototypeFunction_databases(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::SecurityContext *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194CCD94CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_34;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSIDBFactory::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSIDBFactory::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_34:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"IDBFactory", "databases", v16);
    goto LABEL_35;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v24 = (WebCore::SecurityContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28));
  if (!v24)
  {
LABEL_35:
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_29;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_33;
  }
  v30 = v14;
  WebCore::IDBFactory::databases(v23, v24, (uint64_t *)&v30);
  if (v30)
  {
    if (*((_DWORD *)v30 + 4) != 1)
    {
      --*((_DWORD *)v30 + 4);
      goto LABEL_29;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v30 + 16);
LABEL_33:
    v27();
  }
LABEL_29:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unsigned int *WebCore::jsIDBFactoryPrototypeFunction_cmp(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  int v11;
  unint64_t v12;
  unsigned int *result;
  JSValue v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  JSC *v18;
  uint64_t v19;
  JSC::VM **v20;
  unsigned __int8 *v21;
  JSC::VM *v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  _BYTE v26[8];
  WTF::StringImpl *v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v22, "IDBFactory", "cmp");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBFactory::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBFactory::s_info && v8 != 0);
  }
  if (!v7)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v22, "IDBFactory", "cmp");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    WebCore::IDBFactory::cmp(this, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)&v23);
    v11 = v25;
    if (!v25)
    {
      v12 = (__int16)v23 & 0xFFFFFFFFLL | 0xFFFE000000000000;
LABEL_15:
      ((void (*)(_BYTE *, int *))off_1E32A9CD8[v11])(v26, &v23);
      return (unsigned int *)v12;
    }
    if (v25 == 1)
    {
      v15 = (WTF::StringImpl *)v23;
      v26[0] = v23;
      v16 = v24;
      v24 = 0;
      v27 = v16;
      if (!*((_QWORD *)v4 + 2))
      {
        v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v27);
        JSC::VM::throwException(v4, this, v17);
        v16 = v27;
      }
      v27 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v12 = 0;
      result = 0;
      v11 = v25;
      if (v25 != -1)
        goto LABEL_15;
    }
    else
    {
      v18 = (JSC *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBOpenDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>(v18, v19, v20, v21);
    }
  }
  return result;
}

unsigned int *WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBOpenDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>(JSC *this, uint64_t a2, JSC::VM **a3, unsigned __int8 *a4)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  JSC::JSGlobalObject *v16;
  WTF::StringImpl *v17;
  JSValue v18;
  uint64_t v19;
  unsigned int **v20;
  unsigned int *v21;
  WTF::StringImpl *v22;

  v4 = *((_DWORD *)a4 + 4);
  if (!v4)
  {
    v6 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    v21 = (unsigned int *)v6;
    v7 = WebCore::getDOMStructure<WebCore::JSIDBOpenDBRequest>(*(WebCore::JSIDBOpenDBRequest **)(a2 + 56), (JSC::VM *)a2);
    v8 = WebCore::JSIDBOpenDBRequest::create(v7, a2, (uint64_t *)&v21);
    WebCore::cacheWrapper<WebCore::IDBOpenDBRequest,WebCore::JSIDBOpenDBRequest>(*(_QWORD *)(a2 + 3320), v6, v8);
    v9 = v21;
    v21 = 0;
    if (v9)
    {
      v10 = v9 + 15;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v9 + 15);
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 72))(v9);
      }
    }
    return (unsigned int *)v8;
  }
  if (v4 == 1)
  {
    v16 = (JSC::JSGlobalObject *)*a4;
    LOBYTE(v21) = *a4;
    v17 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = 0;
    v22 = v17;
    if (!*((_QWORD *)*a3 + 2))
    {
      v18.super.isa = (Class)WebCore::createDOMException(this, v16, (JSC::JSGlobalObject *)&v22);
      JSC::VM::throwException(*a3, this, v18);
      v17 = v22;
    }
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    return 0;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16IDBOpenDBRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v19, v20);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16IDBOpenDBRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 15;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 15);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16IDBOpenDBRequestENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJsN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJsS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  uint64_t v27;
  JSC::VM *v28;
  unsigned __int8 v29[16];
  int v30;
  JSC::VM *v31;
  char v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBIndex", "get");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBIndex::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBIndex::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBIndex", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v9, this, v17);
  }
  v20 = *((_QWORD *)a2 + 6);
  if ((v20 & 0xFFFFFFFFFFFFFFF7) == 2)
    return WebCore::jsIDBIndexPrototypeFunction_get1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
  {
    v22 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
    v23 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
    v24 = (char **)(16 * v22);
    if ((_DWORD)v22)
      v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
    else
      v25 = 1;
    if (!v25)
    {
      do
      {
        v24 = (char **)v24[2];
        v23 = v24 != 0;
      }
      while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
    }
    if (v23)
      return WebCore::jsIDBIndexPrototypeFunction_get1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  }
  v31 = v9;
  v27 = *(_QWORD *)(v11 + 40);
  WebCore::IDBIndex::get(*((_QWORD *)v10 + 3), this, v20, (uint64_t)v29);
  v19 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v27, &v31, v29);
  if (v30 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v30])(&v32, v29);
  return v19;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_getKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  uint64_t v27;
  JSC::VM *v28;
  unsigned __int8 v29[16];
  int v30;
  JSC::VM *v31;
  char v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBIndex", "getKey");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBIndex::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBIndex::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBIndex", "getKey");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v9, this, v17);
  }
  v20 = *((_QWORD *)a2 + 6);
  if ((v20 & 0xFFFFFFFFFFFFFFF7) == 2)
    return WebCore::jsIDBIndexPrototypeFunction_getKey1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
  {
    v22 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
    v23 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
    v24 = (char **)(16 * v22);
    if ((_DWORD)v22)
      v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
    else
      v25 = 1;
    if (!v25)
    {
      do
      {
        v24 = (char **)v24[2];
        v23 = v24 != 0;
      }
      while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
    }
    if (v23)
      return WebCore::jsIDBIndexPrototypeFunction_getKey1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  }
  v31 = v9;
  v27 = *(_QWORD *)(v11 + 40);
  WebCore::IDBIndex::getKey(*((_QWORD *)v10 + 3), this, v20, (uint64_t)v29);
  v19 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v27, &v31, v29);
  if (v30 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v30])(&v32, v29);
  return v19;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_getAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v31;
  _BOOL4 v32;
  char **v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[2];
  unsigned __int8 v43[16];
  int v44;
  JSC::VM *v45;
  _QWORD *v46;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42[0] = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBIndex", "getAll");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBIndex::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBIndex::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBIndex", "getAll");
  v42[1] = v9;
  v17 = *((int *)a2 + 8);
  v18 = v17 - 1;
  if ((unint64_t)(v17 - 1) >= 2)
    v18 = 2;
  if (v18 == 2)
  {
    v20 = *((_QWORD *)a2 + 6);
    if (v20 == 10 || (v20 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBIndexPrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    {
      v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
      v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
      v23 = (char **)(16 * v21);
      if ((_DWORD)v21)
        v24 = v23 == &WebCore::JSIDBKeyRange::s_info;
      else
        v24 = 1;
      if (!v24)
      {
        do
        {
          v23 = (char **)v23[2];
          v22 = v23 != 0;
        }
        while (v23 != &WebCore::JSIDBKeyRange::s_info && v23 != 0);
      }
      if (v22)
        return WebCore::jsIDBIndexPrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v26 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v27 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v27 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v38 = *(_QWORD *)(v11 + 40);
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v39 = off_1E3357A10;
    v39[1] = this;
    v39[2] = v20;
    v46 = v39;
    WebCore::IDBIndex::doGetAll(v26, v27, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v39 + 8))(v39);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v38, &v45, v43);
    if (v44 != -1)
      goto LABEL_60;
  }
  else
  {
    if (v18 != 1)
    {
      if (v18)
        return (unsigned int *)JSC::throwTypeError();
      return WebCore::jsIDBIndexPrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v28 = *((_QWORD *)a2 + 6);
    if (v28 == 10 || (v28 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBIndexPrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v28 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v28 + 5) >= 0x17u)
    {
      v31 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
      v32 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
      v33 = (char **)(16 * v31);
      if ((_DWORD)v31)
        v34 = v33 == &WebCore::JSIDBKeyRange::s_info;
      else
        v34 = 1;
      if (!v34)
      {
        do
        {
          v33 = (char **)v33[2];
          v32 = v33 != 0;
        }
        while (v33 != &WebCore::JSIDBKeyRange::s_info && v33 != 0);
      }
      if (v32)
        return WebCore::jsIDBIndexPrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v36 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v37 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v37 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v37 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v40 = *(_QWORD *)(v11 + 40);
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v41 = off_1E3357A10;
    v41[1] = this;
    v41[2] = v28;
    v46 = v41;
    WebCore::IDBIndex::doGetAll(v36, v37, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v41 + 8))(v41);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v40, &v45, v43);
    if (v44 != -1)
LABEL_60:
      ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v44])(&v46, v43);
  }
  return v29;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_getAllKeys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v31;
  _BOOL4 v32;
  char **v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[2];
  unsigned __int8 v43[16];
  int v44;
  JSC::VM *v45;
  _QWORD *v46;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42[0] = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBIndex", "getAllKeys");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBIndex::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBIndex::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBIndex", "getAllKeys");
  v42[1] = v9;
  v17 = *((int *)a2 + 8);
  v18 = v17 - 1;
  if ((unint64_t)(v17 - 1) >= 2)
    v18 = 2;
  if (v18 == 2)
  {
    v20 = *((_QWORD *)a2 + 6);
    if (v20 == 10 || (v20 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBIndexPrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    {
      v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
      v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
      v23 = (char **)(16 * v21);
      if ((_DWORD)v21)
        v24 = v23 == &WebCore::JSIDBKeyRange::s_info;
      else
        v24 = 1;
      if (!v24)
      {
        do
        {
          v23 = (char **)v23[2];
          v22 = v23 != 0;
        }
        while (v23 != &WebCore::JSIDBKeyRange::s_info && v23 != 0);
      }
      if (v22)
        return WebCore::jsIDBIndexPrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v26 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v27 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v27 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v38 = *(_QWORD *)(v11 + 40);
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v39 = off_1E3357A60;
    v39[1] = this;
    v39[2] = v20;
    v46 = v39;
    WebCore::IDBIndex::doGetAllKeys(v26, v27, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v39 + 8))(v39);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v38, &v45, v43);
    if (v44 != -1)
      goto LABEL_60;
  }
  else
  {
    if (v18 != 1)
    {
      if (v18)
        return (unsigned int *)JSC::throwTypeError();
      return WebCore::jsIDBIndexPrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v28 = *((_QWORD *)a2 + 6);
    if (v28 == 10 || (v28 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBIndexPrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v28 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v28 + 5) >= 0x17u)
    {
      v31 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
      v32 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
      v33 = (char **)(16 * v31);
      if ((_DWORD)v31)
        v34 = v33 == &WebCore::JSIDBKeyRange::s_info;
      else
        v34 = 1;
      if (!v34)
      {
        do
        {
          v33 = (char **)v33[2];
          v32 = v33 != 0;
        }
        while (v33 != &WebCore::JSIDBKeyRange::s_info && v33 != 0);
      }
      if (v32)
        return WebCore::jsIDBIndexPrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v36 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v37 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v37 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v37 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v40 = *(_QWORD *)(v11 + 40);
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v41 = off_1E3357A60;
    v41[1] = this;
    v41[2] = v28;
    v46 = v41;
    WebCore::IDBIndex::doGetAllKeys(v36, v37, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v41 + 8))(v41);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v40, &v45, v43);
    if (v44 != -1)
LABEL_60:
      ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v44])(&v46, v43);
  }
  return v29;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_count(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WebCore::IDBIndex **v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  unint64_t v17;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  unsigned int *v25;
  JSC::VM *v26;
  unsigned __int8 v27[16];
  int v28;
  JSC::VM *v29;
  char v30;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = (WebCore::IDBIndex **)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v26, "IDBIndex", "count");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBIndex::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBIndex::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v26, "IDBIndex", "count");
  if (*((_DWORD *)a2 + 8) == 1)
    return WebCore::jsIDBIndexPrototypeFunction_count1Body(this, a2, (JSC::CallFrame *)v10, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)a2 + 6);
  if (v17 == 10 || (v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    return WebCore::jsIDBIndexPrototypeFunction_count1Body(this, a2, (JSC::CallFrame *)v10, a4, a5, a6, a7, a8);
  if ((v17 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) >= 0x17u)
  {
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSIDBKeyRange::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSIDBKeyRange::s_info && v21 != 0);
    }
    if (v20)
      return WebCore::jsIDBIndexPrototypeFunction_count1Body(this, a2, (JSC::CallFrame *)v10, a4, a5, a6, a7, a8);
  }
  v29 = v9;
  v24 = *(_QWORD *)(v11 + 40);
  WebCore::IDBIndex::count(v10[3], this, v17, (uint64_t)v27);
  v25 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v24, &v29, v27);
  if (v28 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v28])(&v30, v27);
  return v25;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_openCursor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  BOOL v25;
  _QWORD v28[2];

  v8 = *((_QWORD *)this + 7);
  v28[0] = v8;
  v9 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSIDBIndex::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSIDBIndex::s_info && v12 != 0);
    }
    if (v11)
    {
      v28[1] = v8;
      v15 = *((int *)a2 + 8) - 1;
      if (v15 >= 2)
        v15 = 2;
      if (v15 == 2)
      {
        v16 = *((_QWORD *)a2 + 6);
        if (v16 == 10 || (v16 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBIndexPrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
          return WebCore::jsIDBIndexPrototypeFunction_openCursor2Body(this, a2, v9, a4);
        v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
        }
      }
      else
      {
        if (v15 != 1)
          return WebCore::jsIDBIndexPrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        v22 = *((_QWORD *)a2 + 6);
        if (v22 == 10 || (v22 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBIndexPrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v22 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) < 0x17u)
          return WebCore::jsIDBIndexPrototypeFunction_openCursor2Body(this, a2, v9, a4);
        v23 = *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) != 0;
        v24 = (char **)(16 * v23);
        if ((_DWORD)v23)
          v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
        else
          v25 = 1;
        if (!v25)
        {
          do
          {
            v24 = (char **)v24[2];
            v18 = v24 != 0;
          }
          while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
        }
      }
      if (v18)
        return WebCore::jsIDBIndexPrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
      return WebCore::jsIDBIndexPrototypeFunction_openCursor2Body(this, a2, v9, a4);
    }
  }
  return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v28, "IDBIndex", "openCursor");
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_openKeyCursor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  BOOL v25;
  _QWORD v28[2];

  v8 = *((_QWORD *)this + 7);
  v28[0] = v8;
  v9 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSIDBIndex::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSIDBIndex::s_info && v12 != 0);
    }
    if (v11)
    {
      v28[1] = v8;
      v15 = *((int *)a2 + 8) - 1;
      if (v15 >= 2)
        v15 = 2;
      if (v15 == 2)
      {
        v16 = *((_QWORD *)a2 + 6);
        if (v16 == 10 || (v16 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBIndexPrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
          return WebCore::jsIDBIndexPrototypeFunction_openKeyCursor2Body(this, a2, v9, a4);
        v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
        }
      }
      else
      {
        if (v15 != 1)
          return WebCore::jsIDBIndexPrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        v22 = *((_QWORD *)a2 + 6);
        if (v22 == 10 || (v22 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBIndexPrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v22 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) < 0x17u)
          return WebCore::jsIDBIndexPrototypeFunction_openKeyCursor2Body(this, a2, v9, a4);
        v23 = *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) != 0;
        v24 = (char **)(16 * v23);
        if ((_DWORD)v23)
          v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
        else
          v25 = 1;
        if (!v25)
        {
          do
          {
            v24 = (char **)v24[2];
            v18 = v24 != 0;
          }
          while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
        }
      }
      if (v18)
        return WebCore::jsIDBIndexPrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
      return WebCore::jsIDBIndexPrototypeFunction_openKeyCursor2Body(this, a2, v9, a4);
    }
  }
  return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v28, "IDBIndex", "openKeyCursor");
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_get1Body(WebCore *this, unint64_t a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WebCore::IDBIndex *v10;
  const WebCore::IDBKey **v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  unsigned __int8 v20[16];
  int v21;
  JSC::VM *v22;
  char v23;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v9;
  v10 = (WebCore::IDBIndex *)*((_QWORD *)a3 + 3);
  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)v20 = v9;
    if ((a2 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSIDBKeyRange::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSIDBKeyRange::s_info && v14 != 0);
    }
    if (!v13 || (v11 = *(const WebCore::IDBKey ***)(a2 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v20, 0, "key", 4, "IDBIndex", 9, a8, "get", 4, "IDBKeyRange", 12);
      return 0;
    }
  }
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  WebCore::IDBIndex::get(v10, v11, (uint64_t)v20);
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v18, &v22, v20);
  if (v21 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v21])(&v23, v20);
  return v17;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_getKey1Body(WebCore *this, unint64_t a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WebCore::IDBIndex *v10;
  const WebCore::IDBKey **v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  unsigned __int8 v20[16];
  int v21;
  JSC::VM *v22;
  char v23;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v9;
  v10 = (WebCore::IDBIndex *)*((_QWORD *)a3 + 3);
  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)v20 = v9;
    if ((a2 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSIDBKeyRange::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSIDBKeyRange::s_info && v14 != 0);
    }
    if (!v13 || (v11 = *(const WebCore::IDBKey ***)(a2 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v20, 0, "key", 4, "IDBIndex", 9, a8, "getKey", 7, "IDBKeyRange", 12);
      return 0;
    }
  }
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  WebCore::IDBIndex::getKey(v10, v11, (uint64_t)v20);
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v18, &v22, v20);
  if (v21 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v21])(&v23, v20);
  return v17;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_getAll1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  _QWORD *v23;
  unsigned __int8 v25[16];
  int v26;
  JSC::VM *v27;
  _QWORD *v28;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 == 1)
  {
    v15 = 0;
    v14 = 0;
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v25 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v25, 0, "range", 6, "IDBIndex", 9, a8, "getAll", 7, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v15 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v25);
      if (HIDWORD(*(_QWORD *)v25))
        return 0;
      v15 = *(_QWORD *)v25 | 0x100000000;
    }
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = &off_1E33579E8;
  v23[1] = v14;
  v28 = v23;
  WebCore::IDBIndex::doGetAll(v11, v15, (uint64_t)&v28, (uint64_t)v25);
  (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v27, v25);
  if (v26 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v26])(&v28, v25);
  return v22;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_getAllKeys1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  _QWORD *v23;
  unsigned __int8 v25[16];
  int v26;
  JSC::VM *v27;
  _QWORD *v28;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 == 1)
  {
    v15 = 0;
    v14 = 0;
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v25 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v25, 0, "range", 6, "IDBIndex", 9, a8, "getAllKeys", 11, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v15 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v25);
      if (HIDWORD(*(_QWORD *)v25))
        return 0;
      v15 = *(_QWORD *)v25 | 0x100000000;
    }
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = &off_1E3357A38;
  v23[1] = v14;
  v28 = v23;
  WebCore::IDBIndex::doGetAllKeys(v11, v15, (uint64_t)&v28, (uint64_t)v25);
  (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v27, v25);
  if (v26 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v26])(&v28, v25);
  return v22;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_count1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WebCore::IDBIndex *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  const WebCore::IDBKey **v20;
  unsigned __int8 v21[16];
  int v22;
  JSC::VM *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char v31;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v9;
  v10 = (WebCore::IDBIndex *)*((_QWORD *)a3 + 3);
  if (*((_DWORD *)a2 + 8) == 1 || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    v25 = 0;
    v28 = 0;
    v30 = 0;
    LOBYTE(v24) = 0;
    v26 = 7;
    v27 = 0;
    v29 = 8;
  }
  else
  {
    v24 = v9;
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSIDBKeyRange::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSIDBKeyRange::s_info && v14 != 0);
    }
    if (!v13 || (v20 = *(const WebCore::IDBKey ***)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v24, 0, "range", 6, "IDBIndex", 9, a8, "count", 6, "IDBKeyRange", 12);
      return 0;
    }
    v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)&v24, v20);
  }
  WebCore::IDBIndex::doCount(v10, (const WebCore::IDBKeyRangeData *)&v24, (uint64_t)v21);
  if (v29 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v29])(&v31, &v28);
  v29 = -1;
  if (v26 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v26])(&v31, &v25);
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v18, &v23, v21);
  if (v22 != -1)
    ((void (*)(JSC::VM **, unsigned __int8 *))off_1E32A9930[v22])(&v24, v21);
  return v17;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_openCursor1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 v27[16];
  int v28;
  JSC::VM *v29;
  _QWORD *v30;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 != 1)
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v27 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "range", 6, "IDBIndex", 9, a8, "openCursor", 11, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      LOBYTE(v15) = 0;
    }
    else
    {
      v23 = *((_QWORD *)a2 + 7);
      if (v23 == 10)
      {
        LOBYTE(v15) = 0;
        goto LABEL_23;
      }
      *(_QWORD *)v27 = v10;
      v15 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v23);
      if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
        return 0;
      if (v15 <= 0xFFu)
      {
        WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v27, 1, "direction", 10, "IDBIndex", 9, v24, "openCursor", 11, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
        return 0;
      }
    }
LABEL_23:
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
    goto LABEL_25;
  }
  LOBYTE(v15) = 0;
  v14 = 0;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
LABEL_25:
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = &off_1E3357938;
  v25[1] = v14;
  v30 = v25;
  WebCore::IDBIndex::doOpenCursor(v11, v15, (uint64_t)&v30, (uint64_t)v27);
  (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v29, v27);
  if (v28 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v28])(&v30, v27);
  return v22;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_openCursor2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned __int8 v16[16];
  int v17;
  JSC::VM *v18;
  _QWORD *v19;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v6;
  v7 = *((_QWORD *)a3 + 3);
  v8 = *((_QWORD *)a2 + 6);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 7);
    if (v9 == 10)
    {
      LOBYTE(v10) = 0;
      goto LABEL_7;
    }
    *(_QWORD *)v16 = v6;
    v10 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v9);
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
      return 0;
    if (v10 <= 0xFFu)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v16, 1, "direction", 10, "IDBIndex", 9, v11, "openCursor", 11, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
      return 0;
    }
  }
LABEL_7:
  v12 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E3357960;
  v13[1] = this;
  v13[2] = v8;
  v19 = v13;
  WebCore::IDBIndex::doOpenCursor(v7, v10, (uint64_t)&v19, (uint64_t)v16);
  (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v12, &v18, v16);
  if (v17 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v17])(&v19, v16);
  return v14;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_openKeyCursor1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 v27[16];
  int v28;
  JSC::VM *v29;
  _QWORD *v30;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 != 1)
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v27 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "range", 6, "IDBIndex", 9, a8, "openKeyCursor", 14, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      LOBYTE(v15) = 0;
    }
    else
    {
      v23 = *((_QWORD *)a2 + 7);
      if (v23 == 10)
      {
        LOBYTE(v15) = 0;
        goto LABEL_23;
      }
      *(_QWORD *)v27 = v10;
      v15 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v23);
      if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
        return 0;
      if (v15 <= 0xFFu)
      {
        WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v27, 1, "direction", 10, "IDBIndex", 9, v24, "openKeyCursor", 14, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
        return 0;
      }
    }
LABEL_23:
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
    goto LABEL_25;
  }
  LOBYTE(v15) = 0;
  v14 = 0;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
LABEL_25:
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = &off_1E3357998;
  v25[1] = v14;
  v30 = v25;
  WebCore::IDBIndex::doOpenKeyCursor(v11, v15, (uint64_t)&v30, (uint64_t)v27);
  (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v29, v27);
  if (v28 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v28])(&v30, v27);
  return v22;
}

unsigned int *WebCore::jsIDBIndexPrototypeFunction_openKeyCursor2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBIndex *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned __int8 v16[16];
  int v17;
  JSC::VM *v18;
  _QWORD *v19;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v6;
  v7 = *((_QWORD *)a3 + 3);
  v8 = *((_QWORD *)a2 + 6);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 7);
    if (v9 == 10)
    {
      LOBYTE(v10) = 0;
      goto LABEL_7;
    }
    *(_QWORD *)v16 = v6;
    v10 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v9);
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
      return 0;
    if (v10 <= 0xFFu)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v16, 1, "direction", 10, "IDBIndex", 9, v11, "openKeyCursor", 14, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
      return 0;
    }
  }
LABEL_7:
  v12 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E33579C0;
  v13[1] = this;
  v13[2] = v8;
  v19 = v13;
  WebCore::IDBIndex::doOpenKeyCursor(v7, v10, (uint64_t)&v19, (uint64_t)v16);
  (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v12, &v18, v16);
  if (v17 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v17])(&v19, v16);
  return v14;
}

uint64_t WebCore::jsIDBKeyRangeConstructorFunction_only(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  JSValue v7;
  unsigned __int8 v8[16];
  int v9;
  JSC::VM *v10;
  char v11;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v7.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v7);
  }
  else
  {
    WebCore::IDBKeyRange::only(this, *((_QWORD *)a2 + 6), (uint64_t)v8);
    v5 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBKeyRange>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>(this, (uint64_t)this, &v10, v8);
    if (v9 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E32A9F90[v9])(&v11, v8);
  }
  return v5;
}

uint64_t WebCore::jsIDBKeyRangeConstructorFunction_lowerBound(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  double v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  JSValue v19;
  BOOL v20;
  _QWORD v21[2];
  int v22;
  JSC::VM *v23;
  WebCore::IDBKey *v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  if (*((_DWORD *)a2 + 8) == 2)
  {
    v5 = 10;
    goto LABEL_13;
  }
  v5 = *((_QWORD *)a2 + 7);
  if (v5 >= 0xFFFE000000000000)
  {
    v20 = (_DWORD)v5 == 0;
    goto LABEL_38;
  }
  *(_QWORD *)&v6 = v5 - 0x2000000000000;
  if (v5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v5 & 0xFFFE000000000002) == 0)
    {
      v7 = *(unsigned __int8 *)(v5 + 5);
      if (v7 == 3)
      {
        v10 = *(_DWORD *)(v5 + 8);
      }
      else
      {
        if (v7 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v11 = 1;
            goto LABEL_14;
          }
          v20 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_38;
        }
        v8 = *(_QWORD *)(v5 + 8);
        if ((v8 & 1) != 0)
          v9 = (int *)(v5 + 16);
        else
          v9 = (int *)(v8 + 4);
        v10 = *v9;
      }
      v20 = v10 == 0;
LABEL_38:
      v11 = !v20;
      goto LABEL_14;
    }
LABEL_13:
    v11 = v5 == 7;
    goto LABEL_14;
  }
  v11 = v6 > 0.0 || v6 < 0.0;
LABEL_14:
  v12 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  WebCore::createIDBKeyFromValue(&v24, this, v12);
  v13 = (unsigned int *)v24;
  if (WebCore::IDBKey::isValid(v24))
  {
    v15 = bmalloc::api::isoAllocate();
    *(_QWORD *)v15 = 0;
    *(_DWORD *)(v15 + 8) = 1;
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 32) = v11;
    *(_BYTE *)(v15 + 33) = 1;
    v21[0] = v15;
    v22 = 0;
  }
  else
  {
    LOBYTE(v21[0]) = 26;
    v21[1] = 0;
    v22 = 1;
    if (v13)
    {
      if (*v13 == 1)
      {
        v18 = v13[6];
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v18])(&v25, v13 + 2);
        v13[6] = -1;
        bmalloc::api::isoDeallocate((bmalloc::api *)v13, v14);
      }
      else
      {
        --*v13;
      }
    }
  }
  v16 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBKeyRange>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>(this, (uint64_t)this, &v23, (unsigned __int8 *)v21);
  if (v22 != -1)
    ((void (*)(WebCore::IDBKey **, _QWORD *))off_1E32A9F90[v22])(&v24, v21);
  return v16;
}

uint64_t WebCore::jsIDBKeyRangeConstructorFunction_upperBound(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  double v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  JSValue v19;
  BOOL v20;
  _QWORD v21[2];
  int v22;
  JSC::VM *v23;
  WebCore::IDBKey *v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  if (*((_DWORD *)a2 + 8) == 2)
  {
    v5 = 10;
    goto LABEL_13;
  }
  v5 = *((_QWORD *)a2 + 7);
  if (v5 >= 0xFFFE000000000000)
  {
    v20 = (_DWORD)v5 == 0;
    goto LABEL_38;
  }
  *(_QWORD *)&v6 = v5 - 0x2000000000000;
  if (v5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v5 & 0xFFFE000000000002) == 0)
    {
      v7 = *(unsigned __int8 *)(v5 + 5);
      if (v7 == 3)
      {
        v10 = *(_DWORD *)(v5 + 8);
      }
      else
      {
        if (v7 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v11 = 1;
            goto LABEL_14;
          }
          v20 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_38;
        }
        v8 = *(_QWORD *)(v5 + 8);
        if ((v8 & 1) != 0)
          v9 = (int *)(v5 + 16);
        else
          v9 = (int *)(v8 + 4);
        v10 = *v9;
      }
      v20 = v10 == 0;
LABEL_38:
      v11 = !v20;
      goto LABEL_14;
    }
LABEL_13:
    v11 = v5 == 7;
    goto LABEL_14;
  }
  v11 = v6 > 0.0 || v6 < 0.0;
LABEL_14:
  v12 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  WebCore::createIDBKeyFromValue(&v24, this, v12);
  v13 = (unsigned int *)v24;
  if (WebCore::IDBKey::isValid(v24))
  {
    v15 = bmalloc::api::isoAllocate();
    *(_QWORD *)v15 = 0;
    *(_DWORD *)(v15 + 8) = 1;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = v13;
    *(_BYTE *)(v15 + 32) = 1;
    *(_BYTE *)(v15 + 33) = v11;
    v21[0] = v15;
    v22 = 0;
  }
  else
  {
    LOBYTE(v21[0]) = 26;
    v21[1] = 0;
    v22 = 1;
    if (v13)
    {
      if (*v13 == 1)
      {
        v18 = v13[6];
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v18])(&v25, v13 + 2);
        v13[6] = -1;
        bmalloc::api::isoDeallocate((bmalloc::api *)v13, v14);
      }
      else
      {
        --*v13;
      }
    }
  }
  v16 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBKeyRange>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>(this, (uint64_t)this, &v23, (unsigned __int8 *)v21);
  if (v22 != -1)
    ((void (*)(WebCore::IDBKey **, _QWORD *))off_1E32A9F90[v22])(&v24, v21);
  return v16;
}

uint64_t WebCore::jsIDBKeyRangeConstructorFunction_bound(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  unint64_t v7;
  double v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  JSValue v25;
  BOOL v26;
  BOOL v27;
  unsigned __int8 v28[16];
  int v29;
  JSC::VM *v30;
  char v31;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v4;
  v5 = *((int *)a2 + 8);
  if ((unint64_t)(v5 - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v25);
  }
  if (v5 == 3)
  {
    v7 = 10;
    goto LABEL_13;
  }
  v7 = *((_QWORD *)a2 + 8);
  if (v7 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v7 == 0;
    goto LABEL_54;
  }
  *(_QWORD *)&v8 = v7 - 0x2000000000000;
  if (v7 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v7 & 0xFFFE000000000002) == 0)
    {
      v9 = *(unsigned __int8 *)(v7 + 5);
      if (v9 == 3)
      {
        v12 = *(_DWORD *)(v7 + 8);
      }
      else
      {
        if (v9 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v13 = 1;
            goto LABEL_14;
          }
          v26 = *(_QWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_54;
        }
        v10 = *(_QWORD *)(v7 + 8);
        if ((v10 & 1) != 0)
          v11 = (int *)(v7 + 16);
        else
          v11 = (int *)(v10 + 4);
        v12 = *v11;
      }
      v26 = v12 == 0;
LABEL_54:
      v13 = !v26;
      goto LABEL_14;
    }
LABEL_13:
    v13 = v7 == 7;
    goto LABEL_14;
  }
  v13 = v8 > 0.0 || v8 < 0.0;
LABEL_14:
  v14 = *((_QWORD *)a2 + 6);
  v15 = *((_QWORD *)a2 + 7);
  if (*((_DWORD *)v4 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v5 = *((int *)a2 + 8);
  }
  if ((unint64_t)(v5 - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
    v16 = 10;
    goto LABEL_26;
  }
  v16 = *((_QWORD *)a2 + 9);
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v27 = (_DWORD)v16 == 0;
    goto LABEL_58;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v16 & 0xFFFE000000000002) == 0)
    {
      v18 = *(unsigned __int8 *)(v16 + 5);
      if (v18 == 3)
      {
        v21 = *(_DWORD *)(v16 + 8);
      }
      else
      {
        if (v18 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v22 = 1;
            goto LABEL_27;
          }
          v27 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_58;
        }
        v19 = *(_QWORD *)(v16 + 8);
        if ((v19 & 1) != 0)
          v20 = (int *)(v16 + 16);
        else
          v20 = (int *)(v19 + 4);
        v21 = *v20;
      }
      v27 = v21 == 0;
LABEL_58:
      v22 = !v27;
      goto LABEL_27;
    }
LABEL_26:
    v22 = v16 == 7;
    goto LABEL_27;
  }
  v22 = COERCE_DOUBLE(v16 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v16 - 0x2000000000000) < 0.0;
LABEL_27:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  WebCore::IDBKeyRange::bound(this, v14, v15, v13, v22, (uint64_t)v28);
  v23 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBKeyRange>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>(this, (uint64_t)this, &v30, v28);
  if (v29 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9F90[v29])(&v31, v28);
  return v23;
}

uint64_t WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBKeyRange>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>(JSC *this, uint64_t a2, JSC::VM **a3, unsigned __int8 *a4)
{
  int v4;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  JSC::JSGlobalObject *v50;
  WTF::StringImpl *v51;
  JSValue v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;

  v4 = *((_DWORD *)a4 + 4);
  if (!v4)
  {
    v6 = *(WTF **)a4;
    *(_QWORD *)a4 = 0;
    v7 = *(_QWORD *)(a2 + 3296);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = ((unint64_t)&WebCore::JSIDBKeyRange::s_info + ~((_QWORD)&WebCore::JSIDBKeyRange::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBKeyRange::s_info + ~((_QWORD)&WebCore::JSIDBKeyRange::s_info << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(char ***)(v7 + 16 * v12);
      if (v13 == &WebCore::JSIDBKeyRange::s_info)
      {
LABEL_7:
        v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
        if (v15)
          goto LABEL_9;
      }
      else
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(char ***)(v7 + 16 * v12);
          ++v14;
          if (v13 == &WebCore::JSIDBKeyRange::s_info)
            goto LABEL_7;
        }
      }
    }
    v16 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSIDBKeyRangePrototype::createStructure(v16, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v20 = (JSC::JSCell *)WebCore::JSIDBKeyRangePrototype::create((WebCore::JSIDBKeyRangePrototype *)v16, Structure, v18, v19);
    v21 = WebCore::JSIDBKeyRange::createStructure(v16, a2, v20);
    v15 = WebCore::cacheDOMStructure((JSCell *)a2, v21, (uint64_t)&WebCore::JSIDBKeyRange::s_info);
LABEL_9:
    v22 = *(_QWORD *)(a2 + 56);
    v23 = *(_QWORD *)(v22 + 41456);
    v24 = *(_QWORD *)(v23 + 23536);
    v25 = *(_QWORD **)(v24 + 920);
    if (v25)
      goto LABEL_29;
    v26 = *(_QWORD *)(v23 + 22648);
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_14:
    v28 = *(_QWORD *)(v26 + 2824);
    if (!*(_QWORD *)(v28 + 920))
    {
      v29 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v55, "IsoSpace T");
      v57 = 0;
      MEMORY[0x19AEA3204](v29, &v55, v22 + 192, v22 + 1872, 32, 8, &v57);
      v31 = (uint64_t)v57;
      v57 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v32 = v55;
      v55 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree(v32, v30);
        else
          --*(_DWORD *)v32;
      }
      v33 = *(_QWORD *)(v28 + 920);
      *(_QWORD *)(v28 + 920) = v29;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    }
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v34 = *(_QWORD *)(v24 + 920);
    *(_QWORD *)(v24 + 920) = v25;
    if (v34)
    {
      v35 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v35, v36);
    }
    v37 = __ldxr((unsigned __int8 *)v26);
    if (v37 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
      {
LABEL_29:
        SlowCase = v25[3];
        if (SlowCase >= v25[4])
        {
          SlowCase = v25[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_31:
            *(_DWORD *)SlowCase = 0;
            WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
            *(_QWORD *)(SlowCase + 24) = v6;
            if (*(_BYTE *)(v22 + 755))
              __dmb(0xAu);
            v39 = *(_QWORD *)(a2 + 3320);
            if ((byte_1EE335D80 & 1) == 0)
            {
              qword_1EE335D78 = (uint64_t)&off_1E32A8050;
              byte_1EE335D80 = 1;
            }
            if (*(_DWORD *)(v39 + 48))
            {
              v55 = v6;
              if ((SlowCase & 8) != 0)
                v45 = (SlowCase - 112) | 1;
              else
                v45 = SlowCase & 0xFFFFFFFFFFFFC000;
              if ((v45 & 1) != 0)
                v46 = v45 + 47;
              else
                v46 = *(_QWORD *)v45 + 32;
              Allocator = *(_QWORD **)(v46 + 16);
              if (!Allocator)
                Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
              *(_QWORD *)(v46 + 16) = *Allocator;
              *Allocator = SlowCase;
              Allocator[1] = &qword_1EE335D78;
              Allocator[2] = v39;
              v57 = Allocator;
              JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v55, (uint64_t *)&v57);
              v43 = (uint64_t)v57;
              if (!v57)
                return SlowCase;
            }
            else
            {
              if ((SlowCase & 8) != 0)
                v40 = (SlowCase - 112) | 1;
              else
                v40 = SlowCase & 0xFFFFFFFFFFFFC000;
              if ((v40 & 1) != 0)
                v41 = v40 + 47;
              else
                v41 = *(_QWORD *)v40 + 32;
              v42 = *(_QWORD **)(v41 + 16);
              if (!v42)
                v42 = (_QWORD *)JSC::WeakSet::findAllocator();
              *(_QWORD *)(v41 + 16) = *v42;
              *v42 = SlowCase;
              v42[1] = &qword_1EE335D78;
              v42[2] = v39;
              v43 = *(_QWORD *)v6;
              *(_QWORD *)v6 = v42;
              if (!v43)
                return SlowCase;
            }
            *(_QWORD *)(v43 + 8) = 3;
            return SlowCase;
          }
          v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
          v25[4] = SlowCase + HIDWORD(v53);
          v25[5] = SlowCase + (int)v53;
        }
        v25[3] = SlowCase + 32;
        goto LABEL_31;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    goto LABEL_29;
  }
  if (v4 == 1)
  {
    v50 = (JSC::JSGlobalObject *)*a4;
    LOBYTE(v55) = *a4;
    v51 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = 0;
    v56 = v51;
    if (!*((_QWORD *)*a3 + 2))
    {
      v52.super.isa = (Class)WebCore::createDOMException(this, v50, (JSC::JSGlobalObject *)&v56);
      JSC::VM::throwException(*a3, this, v52);
      v51 = v56;
    }
    v56 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
    return 0;
  }
  v54 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11IDBKeyRangeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v54);
}

WebCore::IDBKeyRange *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11IDBKeyRangeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::IDBKeyRange **a2)
{
  WebCore::IDBKeyRange *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(result, a2);
      return (WebCore::IDBKeyRange *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11IDBKeyRangeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsIDBKeyRangePrototypeFunction_includes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  int v11;
  uint64_t v12;
  _BYTE *result;
  JSValue v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WebCore *v18;
  JSC::JSGlobalObject *v19;
  JSC::CallFrame *v20;
  JSC::VM *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;
  _BYTE v25[8];
  WTF::StringImpl *v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "IDBKeyRange", "includes");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBKeyRange::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBKeyRange::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "IDBKeyRange", "includes");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    WebCore::IDBKeyRange::includes(*(_QWORD *)(v5 + 24), this, *((_QWORD *)a2 + 6), (uint64_t)&v22);
    v11 = v24;
    if (!v24)
    {
      if ((_BYTE)v22)
        v12 = 7;
      else
        v12 = 6;
LABEL_17:
      off_1E32AA090[v11](v25, &v22);
      return (_BYTE *)v12;
    }
    if (v24 == 1)
    {
      v15 = (WTF::StringImpl *)v22;
      v25[0] = v22;
      v16 = v23;
      v23 = 0;
      v26 = v16;
      if (!*((_QWORD *)v4 + 2))
      {
        v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v22, (JSC::JSGlobalObject *)&v26);
        JSC::VM::throwException(v4, this, v17);
        v16 = v26;
      }
      v26 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v12 = 0;
      result = 0;
      v11 = v24;
      if (v24 != -1)
        goto LABEL_17;
    }
    else
    {
      v18 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_BYTE *)WebCore::jsIDBObjectStorePrototypeFunction_put(v18, v19, v20);
    }
  }
  return result;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_put(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  JSValue v17;
  JSC::VM *v18;
  unsigned __int8 v19[16];
  int v20;
  JSC::VM *v21;
  char v22;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v18, "IDBObjectStore", "put");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSIDBObjectStore::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSIDBObjectStore::s_info && v9 != 0);
  }
  if (!v8)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v18, "IDBObjectStore", "put");
  v21 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v4, this, v17);
  }
  if (*((_DWORD *)a2 + 8) == 2)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 7);
  v13 = *(_QWORD *)(v6 + 40);
  WebCore::IDBObjectStore::put(*(_QWORD *)(v5 + 24), this, *((_QWORD *)a2 + 6), v12, (uint64_t)v19);
  v14 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v13, &v21, v19);
  if (v20 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v20])(&v22, v19);
  return v14;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_add(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  JSValue v17;
  JSC::VM *v18;
  unsigned __int8 v19[16];
  int v20;
  JSC::VM *v21;
  char v22;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v18, "IDBObjectStore", "add");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSIDBObjectStore::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSIDBObjectStore::s_info && v9 != 0);
  }
  if (!v8)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v18, "IDBObjectStore", "add");
  v21 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v4, this, v17);
  }
  if (*((_DWORD *)a2 + 8) == 2)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 7);
  v13 = *(_QWORD *)(v6 + 40);
  WebCore::IDBObjectStore::add(*(_QWORD *)(v5 + 24), this, *((_QWORD *)a2 + 6), v12, (uint64_t)v19);
  v14 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v13, &v21, v19);
  if (v20 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v20])(&v22, v19);
  return v14;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_delete(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  JSC::VM *v30;
  unsigned __int8 v31[16];
  int v32;
  JSC::VM *v33;
  _QWORD *v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v30, "IDBObjectStore", "delete");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBObjectStore::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBObjectStore::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v30, "IDBObjectStore", "delete");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v9, this, v17);
  }
  v20 = *((_QWORD *)a2 + 6);
  if ((v20 & 0xFFFFFFFFFFFFFFF7) == 2)
    return WebCore::jsIDBObjectStorePrototypeFunction_delete1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
  {
    v22 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
    v23 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
    v24 = (char **)(16 * v22);
    if ((_DWORD)v22)
      v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
    else
      v25 = 1;
    if (!v25)
    {
      do
      {
        v24 = (char **)v24[2];
        v23 = v24 != 0;
      }
      while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
    }
    if (v23)
      return WebCore::jsIDBObjectStorePrototypeFunction_delete1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  }
  v33 = v9;
  v27 = *((_QWORD *)v10 + 3);
  v28 = *(_QWORD *)(v11 + 40);
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v29 = off_1E3358500;
  v29[1] = this;
  v29[2] = v20;
  v34 = v29;
  WebCore::IDBObjectStore::doDelete(v27, (uint64_t)&v34, (uint64_t)v31);
  (*(void (**)(_QWORD *))(*v29 + 8))(v29);
  v19 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v28, &v33, v31);
  if (v32 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v32])(&v34, v31);
  return v19;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  WebCore::IDBTransaction *v15;
  int v16;
  unsigned int *v17;
  JSC::VM *v19;
  WebCore::IDBRequest *v20[2];
  int v21;
  JSC::VM *v22;
  char v23;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v19, "IDBObjectStore", "clear");
  v6 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSIDBObjectStore::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSIDBObjectStore::s_info && v9 != 0);
  }
  if (!v8)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v19, "IDBObjectStore", "clear");
  v12 = *(_QWORD *)(v4 + 24);
  v22 = v5;
  v13 = *(_QWORD *)(v6 + 40);
  if (*(_BYTE *)(v12 + 160))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = 8;
LABEL_16:
    LOBYTE(v20[0]) = v14;
    v16 = 1;
    goto LABEL_17;
  }
  v15 = *(WebCore::IDBTransaction **)(v12 + 152);
  if (*((_BYTE *)v15 + 136))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = 27;
    goto LABEL_16;
  }
  if (!*((_BYTE *)v15 + 96))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = 28;
    goto LABEL_16;
  }
  WebCore::IDBTransaction::requestClearObjectStore(v15, (WebCore::IDBObjectStore *)v12, v20);
  v16 = 0;
LABEL_17:
  v21 = v16;
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v13, &v22, (unsigned __int8 *)v20);
  if (v21 != -1)
    ((void (*)(char *, WebCore::IDBRequest **))off_1E32A9930[v21])(&v23, v20);
  return v17;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  uint64_t v27;
  JSC::VM *v28;
  unsigned __int8 v29[16];
  int v30;
  JSC::VM *v31;
  char v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBObjectStore", "get");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBObjectStore::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBObjectStore::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBObjectStore", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v9, this, v17);
  }
  v20 = *((_QWORD *)a2 + 6);
  if ((v20 & 0xFFFFFFFFFFFFFFF7) == 2)
    return WebCore::jsIDBObjectStorePrototypeFunction_get1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
  {
    v22 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
    v23 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
    v24 = (char **)(16 * v22);
    if ((_DWORD)v22)
      v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
    else
      v25 = 1;
    if (!v25)
    {
      do
      {
        v24 = (char **)v24[2];
        v23 = v24 != 0;
      }
      while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
    }
    if (v23)
      return WebCore::jsIDBObjectStorePrototypeFunction_get1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  }
  v31 = v9;
  v27 = *(_QWORD *)(v11 + 40);
  WebCore::IDBObjectStore::get(*((_QWORD *)v10 + 3), this, v20, (uint64_t)v29);
  v19 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v27, &v31, v29);
  if (v30 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v30])(&v32, v29);
  return v19;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_getKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  uint64_t v27;
  JSC::VM *v28;
  unsigned __int8 v29[16];
  int v30;
  JSC::VM *v31;
  char v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBObjectStore", "getKey");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBObjectStore::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBObjectStore::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v28, "IDBObjectStore", "getKey");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (unsigned int *)JSC::VM::throwException(v9, this, v17);
  }
  v20 = *((_QWORD *)a2 + 6);
  if ((v20 & 0xFFFFFFFFFFFFFFF7) == 2)
    return WebCore::jsIDBObjectStorePrototypeFunction_getKey1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
  {
    v22 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
    v23 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
    v24 = (char **)(16 * v22);
    if ((_DWORD)v22)
      v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
    else
      v25 = 1;
    if (!v25)
    {
      do
      {
        v24 = (char **)v24[2];
        v23 = v24 != 0;
      }
      while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
    }
    if (v23)
      return WebCore::jsIDBObjectStorePrototypeFunction_getKey1Body(this, *((_QWORD *)a2 + 6), v10, a4, a5, a6, a7, a8);
  }
  v31 = v9;
  v27 = *(_QWORD *)(v11 + 40);
  WebCore::IDBObjectStore::getKey(*((_QWORD *)v10 + 3), this, v20, (uint64_t)v29);
  v19 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v27, &v31, v29);
  if (v30 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v30])(&v32, v29);
  return v19;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_getAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v31;
  _BOOL4 v32;
  char **v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[2];
  unsigned __int8 v43[16];
  int v44;
  JSC::VM *v45;
  _QWORD *v46;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42[0] = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBObjectStore", "getAll");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBObjectStore::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBObjectStore::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBObjectStore", "getAll");
  v42[1] = v9;
  v17 = *((int *)a2 + 8);
  v18 = v17 - 1;
  if ((unint64_t)(v17 - 1) >= 2)
    v18 = 2;
  if (v18 == 2)
  {
    v20 = *((_QWORD *)a2 + 6);
    if (v20 == 10 || (v20 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBObjectStorePrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    {
      v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
      v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
      v23 = (char **)(16 * v21);
      if ((_DWORD)v21)
        v24 = v23 == &WebCore::JSIDBKeyRange::s_info;
      else
        v24 = 1;
      if (!v24)
      {
        do
        {
          v23 = (char **)v23[2];
          v22 = v23 != 0;
        }
        while (v23 != &WebCore::JSIDBKeyRange::s_info && v23 != 0);
      }
      if (v22)
        return WebCore::jsIDBObjectStorePrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v26 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v27 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v27 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v38 = *(_QWORD *)(v11 + 40);
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v39 = off_1E3358550;
    v39[1] = this;
    v39[2] = v20;
    v46 = v39;
    WebCore::IDBObjectStore::doGetAll(v26, v27, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v39 + 8))(v39);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v38, &v45, v43);
    if (v44 != -1)
      goto LABEL_60;
  }
  else
  {
    if (v18 != 1)
    {
      if (v18)
        return (unsigned int *)JSC::throwTypeError();
      return WebCore::jsIDBObjectStorePrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v28 = *((_QWORD *)a2 + 6);
    if (v28 == 10 || (v28 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBObjectStorePrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v28 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v28 + 5) >= 0x17u)
    {
      v31 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
      v32 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
      v33 = (char **)(16 * v31);
      if ((_DWORD)v31)
        v34 = v33 == &WebCore::JSIDBKeyRange::s_info;
      else
        v34 = 1;
      if (!v34)
      {
        do
        {
          v33 = (char **)v33[2];
          v32 = v33 != 0;
        }
        while (v33 != &WebCore::JSIDBKeyRange::s_info && v33 != 0);
      }
      if (v32)
        return WebCore::jsIDBObjectStorePrototypeFunction_getAll1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v36 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v37 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v37 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v37 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v40 = *(_QWORD *)(v11 + 40);
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v41 = off_1E3358550;
    v41[1] = this;
    v41[2] = v28;
    v46 = v41;
    WebCore::IDBObjectStore::doGetAll(v36, v37, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v41 + 8))(v41);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v40, &v45, v43);
    if (v44 != -1)
LABEL_60:
      ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v44])(&v46, v43);
  }
  return v29;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_getAllKeys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v31;
  _BOOL4 v32;
  char **v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[2];
  unsigned __int8 v43[16];
  int v44;
  JSC::VM *v45;
  _QWORD *v46;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42[0] = v9;
  v10 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBObjectStore", "getAllKeys");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBObjectStore::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBObjectStore::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v42, "IDBObjectStore", "getAllKeys");
  v42[1] = v9;
  v17 = *((int *)a2 + 8);
  v18 = v17 - 1;
  if ((unint64_t)(v17 - 1) >= 2)
    v18 = 2;
  if (v18 == 2)
  {
    v20 = *((_QWORD *)a2 + 6);
    if (v20 == 10 || (v20 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBObjectStorePrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v20 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    {
      v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
      v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
      v23 = (char **)(16 * v21);
      if ((_DWORD)v21)
        v24 = v23 == &WebCore::JSIDBKeyRange::s_info;
      else
        v24 = 1;
      if (!v24)
      {
        do
        {
          v23 = (char **)v23[2];
          v22 = v23 != 0;
        }
        while (v23 != &WebCore::JSIDBKeyRange::s_info && v23 != 0);
      }
      if (v22)
        return WebCore::jsIDBObjectStorePrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v26 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v27 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v27 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v38 = *(_QWORD *)(v11 + 40);
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v39 = off_1E33585A0;
    v39[1] = this;
    v39[2] = v20;
    v46 = v39;
    WebCore::IDBObjectStore::doGetAllKeys(v26, v27, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v39 + 8))(v39);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v38, &v45, v43);
    if (v44 != -1)
      goto LABEL_60;
  }
  else
  {
    if (v18 != 1)
    {
      if (v18)
        return (unsigned int *)JSC::throwTypeError();
      return WebCore::jsIDBObjectStorePrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v28 = *((_QWORD *)a2 + 6);
    if (v28 == 10 || (v28 & 0xFFFFFFFFFFFFFFF7) == 2)
      return WebCore::jsIDBObjectStorePrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    if ((v28 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v28 + 5) >= 0x17u)
    {
      v31 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
      v32 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
      v33 = (char **)(16 * v31);
      if ((_DWORD)v31)
        v34 = v33 == &WebCore::JSIDBKeyRange::s_info;
      else
        v34 = 1;
      if (!v34)
      {
        do
        {
          v33 = (char **)v33[2];
          v32 = v33 != 0;
        }
        while (v33 != &WebCore::JSIDBKeyRange::s_info && v33 != 0);
      }
      if (v32)
        return WebCore::jsIDBObjectStorePrototypeFunction_getAllKeys1Body(this, a2, v10, a4, a5, a6, a7, a8);
    }
    v45 = v9;
    v36 = *((_QWORD *)v10 + 3);
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v37 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v37 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
      if (HIDWORD(*(_QWORD *)v43))
        return 0;
      v37 = *(_QWORD *)v43 | 0x100000000;
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v40 = *(_QWORD *)(v11 + 40);
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v41 = off_1E33585A0;
    v41[1] = this;
    v41[2] = v28;
    v46 = v41;
    WebCore::IDBObjectStore::doGetAllKeys(v36, v37, (uint64_t)&v46, (uint64_t)v43);
    (*(void (**)(_QWORD *))(*v41 + 8))(v41);
    v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v40, &v45, v43);
    if (v44 != -1)
LABEL_60:
      ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v44])(&v46, v43);
  }
  return v29;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_count(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WebCore::IDBTransaction ***v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  unint64_t v17;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  unsigned int *v25;
  JSC::VM *v26;
  unsigned __int8 v27[16];
  int v28;
  JSC::VM *v29;
  char v30;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = (WebCore::IDBTransaction ***)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v26, "IDBObjectStore", "count");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIDBObjectStore::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIDBObjectStore::s_info && v14 != 0);
  }
  if (!v13)
    return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)&v26, "IDBObjectStore", "count");
  if (*((_DWORD *)a2 + 8) == 1)
    return WebCore::jsIDBObjectStorePrototypeFunction_count1Body(this, a2, (JSC::CallFrame *)v10, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)a2 + 6);
  if (v17 == 10 || (v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    return WebCore::jsIDBObjectStorePrototypeFunction_count1Body(this, a2, (JSC::CallFrame *)v10, a4, a5, a6, a7, a8);
  if ((v17 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) >= 0x17u)
  {
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSIDBKeyRange::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSIDBKeyRange::s_info && v21 != 0);
    }
    if (v20)
      return WebCore::jsIDBObjectStorePrototypeFunction_count1Body(this, a2, (JSC::CallFrame *)v10, a4, a5, a6, a7, a8);
  }
  v29 = v9;
  v24 = *(_QWORD *)(v11 + 40);
  WebCore::IDBObjectStore::count(v10[3], this, v17, (uint64_t)v27);
  v25 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v24, &v29, v27);
  if (v28 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v28])(&v30, v27);
  return v25;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_openCursor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  BOOL v25;
  _QWORD v28[2];

  v8 = *((_QWORD *)this + 7);
  v28[0] = v8;
  v9 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSIDBObjectStore::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSIDBObjectStore::s_info && v12 != 0);
    }
    if (v11)
    {
      v28[1] = v8;
      v15 = *((int *)a2 + 8) - 1;
      if (v15 >= 2)
        v15 = 2;
      if (v15 == 2)
      {
        v16 = *((_QWORD *)a2 + 6);
        if (v16 == 10 || (v16 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBObjectStorePrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
          return WebCore::jsIDBObjectStorePrototypeFunction_openCursor2Body(this, a2, v9, a4);
        v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
        }
      }
      else
      {
        if (v15 != 1)
          return WebCore::jsIDBObjectStorePrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        v22 = *((_QWORD *)a2 + 6);
        if (v22 == 10 || (v22 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBObjectStorePrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v22 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) < 0x17u)
          return WebCore::jsIDBObjectStorePrototypeFunction_openCursor2Body(this, a2, v9, a4);
        v23 = *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) != 0;
        v24 = (char **)(16 * v23);
        if ((_DWORD)v23)
          v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
        else
          v25 = 1;
        if (!v25)
        {
          do
          {
            v24 = (char **)v24[2];
            v18 = v24 != 0;
          }
          while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
        }
      }
      if (v18)
        return WebCore::jsIDBObjectStorePrototypeFunction_openCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
      return WebCore::jsIDBObjectStorePrototypeFunction_openCursor2Body(this, a2, v9, a4);
    }
  }
  return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v28, "IDBObjectStore", "openCursor");
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CallFrame *v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  BOOL v25;
  _QWORD v28[2];

  v8 = *((_QWORD *)this + 7);
  v28[0] = v8;
  v9 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSIDBObjectStore::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSIDBObjectStore::s_info && v12 != 0);
    }
    if (v11)
    {
      v28[1] = v8;
      v15 = *((int *)a2 + 8) - 1;
      if (v15 >= 2)
        v15 = 2;
      if (v15 == 2)
      {
        v16 = *((_QWORD *)a2 + 6);
        if (v16 == 10 || (v16 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
          return WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor2Body(this, a2, v9, a4);
        v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
        }
      }
      else
      {
        if (v15 != 1)
          return WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        v22 = *((_QWORD *)a2 + 6);
        if (v22 == 10 || (v22 & 0xFFFFFFFFFFFFFFF7) == 2)
          return WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
        if ((v22 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) < 0x17u)
          return WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor2Body(this, a2, v9, a4);
        v23 = *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) != 0;
        v24 = (char **)(16 * v23);
        if ((_DWORD)v23)
          v25 = v24 == &WebCore::JSIDBKeyRange::s_info;
        else
          v25 = 1;
        if (!v25)
        {
          do
          {
            v24 = (char **)v24[2];
            v18 = v24 != 0;
          }
          while (v24 != &WebCore::JSIDBKeyRange::s_info && v24 != 0);
        }
      }
      if (v18)
        return WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor1Body(this, a2, v9, a4, a5, a6, a7, a8);
      return WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor2Body(this, a2, v9, a4);
    }
  }
  return (unsigned int *)WebCore::throwThisTypeError((int)this, (int)v28, "IDBObjectStore", "openKeyCursor");
}

_BYTE *WebCore::jsIDBObjectStorePrototypeFunction_index(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSValue v27;
  WTF::StringImpl *v28;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v30;
  JSValue v31;
  bmalloc::api *v32;
  void *v33;
  WebCore *v34;
  JSC::JSGlobalObject *v35;
  JSC::CallFrame *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39[2];
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  v4 = *((_QWORD *)this + 7);
  v37 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "IDBObjectStore", "index");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBObjectStore::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBObjectStore::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "IDBObjectStore", "index");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v39 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v44 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v39, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v14 = v44;
    if (hasExceptionsAfterHandlingTraps)
    {
      v43 = 1;
      v44 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v28);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v24 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = v44;
  }
  v43 = 0;
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v42 = 0;
  v38 = v14;
  WebCore::IDBObjectStore::index(v11, &v38, a3, (uint64_t)v39);
  if (!v41)
  {
    v16 = *(WTF **)v39;
    *(_QWORD *)v39 = 0;
    v18 = WebCore::wrap<WebCore::IDBIndex>(v15, v16);
    v19 = *(unsigned int **)(*((_QWORD *)v16 + 18) + 152);
    v20 = v19 + 6;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v19, v17);
      bmalloc::api::isoDeallocate(v32, v33);
    }
LABEL_26:
    if (v41 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E32AA3C0[v41])(&v44, v39);
    v41 = -1;
    v23 = v38;
    v38 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = 0;
LABEL_32:
    ((void (*)(int *, uint64_t *))off_1E32A90E0[v24])(v39, &v42);
    return (_BYTE *)v18;
  }
  if (v41 == 1)
  {
    v17 = (WTF::StringImpl *)LOBYTE(v39[0]);
    LOBYTE(v44) = v39[0];
    v30 = v40;
    v40 = 0;
    v45 = v30;
    if (!*(_QWORD *)(v4 + 16))
    {
      v31.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v39[0]), (JSC::JSGlobalObject *)&v45);
      JSC::VM::throwException((JSC::VM *)v4, this, v31);
      v30 = v45;
    }
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v17);
      else
        *(_DWORD *)v30 -= 2;
    }
    v18 = 0;
    goto LABEL_26;
  }
  v34 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsIDBObjectStorePrototypeFunction_createIndex(v34, v35, v36);
}

_BYTE *WebCore::jsIDBObjectStorePrototypeFunction_createIndex(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::Structure *v16;
  int v17;
  JSC::JSCell *v18;
  JSC::VM *v19;
  int v20;
  _BOOL4 v21;
  int v22;
  uint64_t Object;
  WTF::StringImpl *v24;
  _BOOL4 v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  JSC::VM *v31;
  double v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  JSValue v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSValue v49;
  bmalloc::api *v50;
  void *v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  int *v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  int *v60;
  int v61;
  unint64_t v62;
  JSC::Structure *v63;
  uint64_t v64;
  __int16 v65;
  unsigned int v66[4];
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  _BYTE v77[16];
  int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v64 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "IDBObjectStore", "createIndex");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSIDBObjectStore::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSIDBObjectStore::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "IDBObjectStore", "createIndex");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v46.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v46);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v76 = v13;
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v76, this);
    goto LABEL_19;
  }
  v14 = *(WTF::StringImpl **)(v13 + 8);
  if ((v14 & 1) != 0)
  {
    v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
    if (!v14)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v14)
LABEL_17:
    *(_DWORD *)v14 += 2;
LABEL_18:
  v69 = v14;
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    v15 = v69;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    {
      v73 = 1;
      v69 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v47);
        else
          *(_DWORD *)v15 -= 2;
      }
      v36 = 0;
      v43 = 1;
      goto LABEL_74;
    }
  }
  else
  {
    v15 = v69;
  }
  v72 = v15;
  v73 = 0;
  v16 = (JSC::Structure *)*((_QWORD *)a2 + 7);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert(this, (uint64_t)v16, a3, (uint64_t)&v76);
  v17 = v79;
  if (v79)
  {
    v36 = 0;
    goto LABEL_71;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) < 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = (JSC::JSCell *)*((_QWORD *)a2 + 8);
    v19 = (JSC::VM *)*((_QWORD *)this + 7);
    *(_QWORD *)v66 = v19;
    if (((unint64_t)v18 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      goto LABEL_54;
    }
    v63 = v16;
    if (((unint64_t)v18 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v18)) == 0)
    {
      JSC::throwTypeError();
LABEL_83:
      v36 = 0;
      goto LABEL_70;
    }
    v16 = (JSC::Structure *)Object;
    v62 = v12;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get(v16, this, (unint64_t)v69);
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v24);
      else
        *(_DWORD *)v69 -= 2;
    }
    if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
      goto LABEL_83;
    if (v12 == 10)
    {
      v25 = 0;
      goto LABEL_39;
    }
    v26 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v12 >= 0xFFFE000000000000)
      goto LABEL_111;
    *(_QWORD *)&v27 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v27 <= 0.0)
      {
        v25 = v27 < 0.0;
        goto LABEL_38;
      }
    }
    else
    {
      if ((v12 & 0xFFFE000000000002) != 0)
      {
        v25 = v12 == 7;
        goto LABEL_38;
      }
      v53 = *(unsigned __int8 *)(v12 + 5);
      if (v53 == 3)
      {
        v56 = *(_DWORD *)(v12 + 8);
LABEL_130:
        v52 = v56 == 0;
        goto LABEL_138;
      }
      if (v53 == 2)
      {
        v54 = *(_QWORD *)(v12 + 8);
        if ((v54 & 1) != 0)
          v55 = (int *)(v12 + 16);
        else
          v55 = (int *)(v54 + 4);
        v56 = *v55;
        goto LABEL_130;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v52 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_138;
      }
    }
    v25 = 1;
    goto LABEL_38;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
LABEL_54:
  while (1)
  {
    v19 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v72 = 0;
    v68 = v15;
    if (!v20)
    {
      v5 = v22 | v21;
      LOBYTE(v66[0]) = 0;
      v67 = -1;
      v33 = v78;
      if (v78 != -1)
      {
        ((void (*)(WTF::StringImpl **, unsigned int *, _BYTE *))off_1E32A99A0[v78])(&v69, v66, v77);
        v67 = v33;
      }
      v65 = v5;
      WebCore::IDBObjectStore::createIndex(v12, &v68, v66, (char *)&v65, (uint64_t)&v69);
      if (!v71)
      {
        v34 = v69;
        v69 = 0;
        v74 = v34;
        v36 = WebCore::toJSNewlyCreated((uint64_t)v19, &v74);
        v37 = v74;
        v74 = 0;
        if (v37)
        {
          v38 = *(unsigned int **)(*((_QWORD *)v37 + 18) + 152);
          v39 = v38 + 6;
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            atomic_store(1u, v38 + 6);
            WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v38, v35);
            bmalloc::api::isoDeallocate(v50, v51);
          }
        }
        goto LABEL_63;
      }
      if (v71 == 1)
        break;
    }
    v26 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_111:
    v52 = (_DWORD)v12 == 0;
LABEL_138:
    v25 = !v52;
LABEL_38:
    if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
      goto LABEL_83;
LABEL_39:
    WTF::AtomStringImpl::addLiteral();
    v28 = v69;
    v30 = JSC::JSObject::get(v16, this, (unint64_t)v69);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
      goto LABEL_83;
    if (v30 == 10)
    {
      v21 = 0;
      goto LABEL_50;
    }
    v31 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v30 >= 0xFFFE000000000000)
    {
      v57 = (_DWORD)v30 == 0;
      goto LABEL_142;
    }
    *(_QWORD *)&v32 = v30 - 0x2000000000000;
    if (v30 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v30 & 0xFFFE000000000002) != 0)
      {
        v21 = v30 == 7;
        goto LABEL_49;
      }
      v58 = *(unsigned __int8 *)(v30 + 5);
      if (v58 == 3)
      {
        v61 = *(_DWORD *)(v30 + 8);
      }
      else
      {
        if (v58 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_136:
            v21 = 1;
            goto LABEL_49;
          }
          v57 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_142;
        }
        v59 = *(_QWORD *)(v30 + 8);
        if ((v59 & 1) != 0)
          v60 = (int *)(v30 + 16);
        else
          v60 = (int *)(v59 + 4);
        v61 = *v60;
      }
      v57 = v61 == 0;
LABEL_142:
      v21 = !v57;
      goto LABEL_49;
    }
    if (v32 > 0.0)
      goto LABEL_136;
    v21 = v32 < 0.0;
LABEL_49:
    if (*((_DWORD *)v31 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) != 0)
      goto LABEL_83;
LABEL_50:
    if (v25)
      v22 = 256;
    else
      v22 = 0;
    v20 = v79;
    v12 = v62;
    v16 = v63;
  }
  v35 = (WTF::StringImpl *)v69;
  LOBYTE(v74) = (_BYTE)v69;
  v48 = v70;
  v70 = 0;
  v75 = v48;
  if (!*(_QWORD *)(v4 + 16))
  {
    v49.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v69, (JSC::JSGlobalObject *)&v75);
    JSC::VM::throwException((JSC::VM *)v4, this, v49);
    v48 = v75;
  }
  v75 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v35);
    else
      *(_DWORD *)v48 -= 2;
  }
  v36 = 0;
LABEL_63:
  if (v71 != -1)
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32AA3C0[v71])(&v74, &v69);
  v71 = -1;
  if (v67 != -1)
    ((void (*)(WTF **, unsigned int *))off_1E32A9990[v67])(&v74, v66);
  v42 = v68;
  v68 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v35);
    else
      *(_DWORD *)v42 -= 2;
  }
LABEL_70:
  v17 = v79;
LABEL_71:
  if (v17 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E32A9BD0[v17])(&v69, v77);
  v43 = 0;
LABEL_74:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v43])(&v76, &v72);
  return (_BYTE *)v36;
}

_BYTE *WebCore::jsIDBObjectStorePrototypeFunction_deleteIndex(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::IDBObjectStore *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33[2];
  WTF::StringImpl *v34;
  char v35;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "IDBObjectStore", "deleteIndex");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBObjectStore::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBObjectStore::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "IDBObjectStore", "deleteIndex");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v21);
  }
  v11 = *(WebCore::IDBObjectStore **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v33 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v31 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v33, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v14 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v30 = 1;
      v31 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v14 = v31;
  }
  v30 = 0;
  v29 = 0;
  v31 = v14;
  WebCore::IDBObjectStore::deleteIndex(v11, &v31, a3, (uint64_t)v33);
  v16 = v31;
  v31 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v35)
  {
    v24 = (WTF::StringImpl *)LOBYTE(v33[0]);
    LOBYTE(v31) = v33[0];
    v25 = v34;
    v34 = 0;
    v32 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v32);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v32;
    }
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v35)
    {
      v27 = v34;
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v17 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_26;
        }
        WTF::StringImpl::destroy(v27, v24);
      }
    }
    v17 = 0;
    goto LABEL_26;
  }
  v17 = 10;
LABEL_26:
  v18 = 0;
LABEL_27:
  ((void (*)(int *, uint64_t *))off_1E32A90E0[v18])(v33, &v29);
  return (_BYTE *)v17;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_delete1Body(WebCore *this, unint64_t a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 v21[16];
  int v22;
  JSC::VM *v23;
  _QWORD *v24;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v9;
  v10 = *((_QWORD *)a3 + 3);
  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)v21 = v9;
    if ((a2 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSIDBKeyRange::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSIDBKeyRange::s_info && v14 != 0);
    }
    if (!v13 || (v11 = *(_QWORD *)(a2 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v21, 0, "keyRange", 9, "IDBObjectStore", 15, a8, "delete", 7, "IDBKeyRange", 12);
      return 0;
    }
  }
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = off_1E33584D8;
  v19[1] = v11;
  v24 = v19;
  WebCore::IDBObjectStore::doDelete(v10, (uint64_t)&v24, (uint64_t)v21);
  (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v18, &v23, v21);
  if (v22 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v22])(&v24, v21);
  return v17;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_get1Body(WebCore *this, unint64_t a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  const WebCore::IDBKey **v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  unsigned __int8 v20[16];
  int v21;
  JSC::VM *v22;
  char v23;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v9;
  v10 = *((_QWORD *)a3 + 3);
  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)v20 = v9;
    if ((a2 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSIDBKeyRange::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSIDBKeyRange::s_info && v14 != 0);
    }
    if (!v13 || (v11 = *(const WebCore::IDBKey ***)(a2 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v20, 0, "key", 4, "IDBObjectStore", 15, a8, "get", 4, "IDBKeyRange", 12);
      return 0;
    }
  }
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  WebCore::IDBObjectStore::get(v10, v11, (uint64_t)v20);
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v18, &v22, v20);
  if (v21 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v21])(&v23, v20);
  return v17;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_getKey1Body(WebCore *this, unint64_t a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WebCore::IDBObjectStore *v10;
  const WebCore::IDBKey **v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  unsigned __int8 v20[16];
  int v21;
  JSC::VM *v22;
  char v23;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v9;
  v10 = (WebCore::IDBObjectStore *)*((_QWORD *)a3 + 3);
  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)v20 = v9;
    if ((a2 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSIDBKeyRange::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSIDBKeyRange::s_info && v14 != 0);
    }
    if (!v13 || (v11 = *(const WebCore::IDBKey ***)(a2 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v20, 0, "key", 4, "IDBObjectStore", 15, a8, "getKey", 7, "IDBKeyRange", 12);
      return 0;
    }
  }
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  WebCore::IDBObjectStore::getKey(v10, v11, (uint64_t)v20);
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v18, &v22, v20);
  if (v21 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E32A9930[v21])(&v23, v20);
  return v17;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_getAll1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  _QWORD *v23;
  unsigned __int8 v25[16];
  int v26;
  JSC::VM *v27;
  _QWORD *v28;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 == 1)
  {
    v15 = 0;
    v14 = 0;
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v25 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v25, 0, "range", 6, "IDBObjectStore", 15, a8, "getAll", 7, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v15 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v25);
      if (HIDWORD(*(_QWORD *)v25))
        return 0;
      v15 = *(_QWORD *)v25 | 0x100000000;
    }
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = &off_1E3358528;
  v23[1] = v14;
  v28 = v23;
  WebCore::IDBObjectStore::doGetAll(v11, v15, (uint64_t)&v28, (uint64_t)v25);
  (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v27, v25);
  if (v26 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v26])(&v28, v25);
  return v22;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_getAllKeys1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  _QWORD *v23;
  unsigned __int8 v25[16];
  int v26;
  JSC::VM *v27;
  _QWORD *v28;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 == 1)
  {
    v15 = 0;
    v14 = 0;
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v25 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v25, 0, "range", 6, "IDBObjectStore", 15, a8, "getAllKeys", 11, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v15 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v25);
      if (HIDWORD(*(_QWORD *)v25))
        return 0;
      v15 = *(_QWORD *)v25 | 0x100000000;
    }
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = &off_1E3358578;
  v23[1] = v14;
  v28 = v23;
  WebCore::IDBObjectStore::doGetAllKeys(v11, v15, (uint64_t)&v28, (uint64_t)v25);
  (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v27, v25);
  if (v26 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v26])(&v28, v25);
  return v22;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_count1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WebCore::IDBTransaction **v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  const WebCore::IDBKey **v20;
  unsigned __int8 v21[16];
  int v22;
  JSC::VM *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char v31;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v9;
  v10 = (WebCore::IDBTransaction **)*((_QWORD *)a3 + 3);
  if (*((_DWORD *)a2 + 8) == 1 || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    v25 = 0;
    v28 = 0;
    v30 = 0;
    LOBYTE(v24) = 0;
    v26 = 7;
    v27 = 0;
    v29 = 8;
  }
  else
  {
    v24 = v9;
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSIDBKeyRange::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSIDBKeyRange::s_info && v14 != 0);
    }
    if (!v13 || (v20 = *(const WebCore::IDBKey ***)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v24, 0, "range", 6, "IDBObjectStore", 15, a8, "count", 6, "IDBKeyRange", 12);
      return 0;
    }
    v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)&v24, v20);
  }
  WebCore::IDBObjectStore::doCount(v10, (const WebCore::IDBKeyRangeData *)&v24, (uint64_t)v21);
  if (v29 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v29])(&v31, &v28);
  v29 = -1;
  if (v26 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v26])(&v31, &v25);
  v17 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v18, &v23, v21);
  if (v22 != -1)
    ((void (*)(JSC::VM **, unsigned __int8 *))off_1E32A9930[v22])(&v24, v21);
  return v17;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_openCursor1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 v27[16];
  int v28;
  JSC::VM *v29;
  _QWORD *v30;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 != 1)
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v27 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "range", 6, "IDBObjectStore", 15, a8, "openCursor", 11, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      LOBYTE(v15) = 0;
    }
    else
    {
      v23 = *((_QWORD *)a2 + 7);
      if (v23 == 10)
      {
        LOBYTE(v15) = 0;
        goto LABEL_23;
      }
      *(_QWORD *)v27 = v10;
      v15 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v23);
      if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
        return 0;
      if (v15 <= 0xFFu)
      {
        WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v27, 1, "direction", 10, "IDBObjectStore", 15, v24, "openCursor", 11, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
        return 0;
      }
    }
LABEL_23:
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
    goto LABEL_25;
  }
  LOBYTE(v15) = 0;
  v14 = 0;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
LABEL_25:
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = &off_1E3358428;
  v25[1] = v14;
  v30 = v25;
  WebCore::IDBObjectStore::doOpenCursor(v11, v15, (uint64_t)&v30, (uint64_t)v27);
  (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v29, v27);
  if (v28 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v28])(&v30, v27);
  return v22;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_openCursor2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned __int8 v16[16];
  int v17;
  JSC::VM *v18;
  _QWORD *v19;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v6;
  v7 = *((_QWORD *)a3 + 3);
  v8 = *((_QWORD *)a2 + 6);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 7);
    if (v9 == 10)
    {
      LOBYTE(v10) = 0;
      goto LABEL_7;
    }
    *(_QWORD *)v16 = v6;
    v10 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v9);
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
      return 0;
    if (v10 <= 0xFFu)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v16, 1, "direction", 10, "IDBObjectStore", 15, v11, "openCursor", 11, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
      return 0;
    }
  }
LABEL_7:
  v12 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E3358450;
  v13[1] = this;
  v13[2] = v8;
  v19 = v13;
  WebCore::IDBObjectStore::doOpenCursor(v7, v10, (uint64_t)&v19, (uint64_t)v16);
  (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v12, &v18, v16);
  if (v17 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v17])(&v19, v16);
  return v14;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 v27[16];
  int v28;
  JSC::VM *v29;
  _QWORD *v30;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v10;
  v11 = *((_QWORD *)a3 + 3);
  v12 = *((int *)a2 + 8);
  if ((_DWORD)v12 != 1)
  {
    v13 = *((_QWORD *)a2 + 6);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)v27 = v10;
      if ((v13 & 0xFFFE000000000002) != 0)
        goto LABEL_16;
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &WebCore::JSIDBKeyRange::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &WebCore::JSIDBKeyRange::s_info && v19 != 0);
      }
      if (!v18 || (v14 = *(_QWORD *)(v13 + 24)) == 0)
      {
LABEL_16:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "range", 6, "IDBObjectStore", 15, a8, "openKeyCursor", 14, "IDBKeyRange", 12);
        return 0;
      }
    }
    if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      LOBYTE(v15) = 0;
    }
    else
    {
      v23 = *((_QWORD *)a2 + 7);
      if (v23 == 10)
      {
        LOBYTE(v15) = 0;
        goto LABEL_23;
      }
      *(_QWORD *)v27 = v10;
      v15 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v23);
      if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
        return 0;
      if (v15 <= 0xFFu)
      {
        WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v27, 1, "direction", 10, "IDBObjectStore", 15, v24, "openKeyCursor", 14, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
        return 0;
      }
    }
LABEL_23:
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    if (v14)
      ++*(_DWORD *)(v14 + 8);
    goto LABEL_25;
  }
  LOBYTE(v15) = 0;
  v14 = 0;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
LABEL_25:
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = &off_1E3358488;
  v25[1] = v14;
  v30 = v25;
  WebCore::IDBObjectStore::doOpenKeyCursor(v11, v15, (uint64_t)&v30, (uint64_t)v27);
  (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  v22 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v16, &v29, v27);
  if (v28 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v28])(&v30, v27);
  return v22;
}

unsigned int *WebCore::jsIDBObjectStorePrototypeFunction_openKeyCursor2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSIDBObjectStore *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned __int8 v16[16];
  int v17;
  JSC::VM *v18;
  _QWORD *v19;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v6;
  v7 = *((_QWORD *)a3 + 3);
  v8 = *((_QWORD *)a2 + 6);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 7);
    if (v9 == 10)
    {
      LOBYTE(v10) = 0;
      goto LABEL_7;
    }
    *(_QWORD *)v16 = v6;
    v10 = WebCore::parseEnumeration<WebCore::IndexedDB::CursorDirection>(this, v9);
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
      return 0;
    if (v10 <= 0xFFu)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v16, 1, "direction", 10, "IDBObjectStore", 15, v11, "openKeyCursor", 14, "\"next\", \"nextunique\", \"prev\", \"prevunique\"", 43);
      return 0;
    }
  }
LABEL_7:
  v12 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E33584B0;
  v13[1] = this;
  v13[2] = v8;
  v19 = v13;
  WebCore::IDBObjectStore::doOpenCursor(v7, v10, (uint64_t)&v19, (uint64_t)v16);
  (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::IDBRequest>,WebCore::ExceptionOr<WTF::Ref<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>(this, v12, &v18, v16);
  if (v17 != -1)
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E32A9930[v17])(&v19, v16);
  return v14;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8IDBIndexENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int **)(*(_QWORD *)(v2 + 144) + 152);
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8IDBIndexENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsIDBTransactionPrototypeFunction_objectStore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSValue v27;
  WTF::StringImpl *v28;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v30;
  JSValue v31;
  bmalloc::api *v32;
  void *v33;
  WebCore *v34;
  JSC::JSGlobalObject *v35;
  JSC::CallFrame *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39[2];
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  v4 = *((_QWORD *)this + 7);
  v37 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "IDBTransaction", "objectStore");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBTransaction::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBTransaction::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "IDBTransaction", "objectStore");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v39 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v44 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v39, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v14 = v44;
    if (hasExceptionsAfterHandlingTraps)
    {
      v43 = 1;
      v44 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v28);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v24 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = v44;
  }
  v43 = 0;
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v42 = 0;
  v38 = v14;
  WebCore::IDBTransaction::objectStore(v11, &v38, a3, (uint64_t)v39);
  if (!v41)
  {
    v16 = *(WTF **)v39;
    *(_QWORD *)v39 = 0;
    v18 = WebCore::wrap<WebCore::IDBObjectStore>(v15, v16);
    v19 = (unsigned int *)*((_QWORD *)v16 + 19);
    v20 = v19 + 6;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v19, v17);
      bmalloc::api::isoDeallocate(v32, v33);
    }
LABEL_26:
    if (v41 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E32A9BE0[v41])(&v44, v39);
    v41 = -1;
    v23 = v38;
    v38 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = 0;
LABEL_32:
    ((void (*)(int *, uint64_t *))off_1E32A90E0[v24])(v39, &v42);
    return (_BYTE *)v18;
  }
  if (v41 == 1)
  {
    v17 = (WTF::StringImpl *)LOBYTE(v39[0]);
    LOBYTE(v44) = v39[0];
    v30 = v40;
    v40 = 0;
    v45 = v30;
    if (!*(_QWORD *)(v4 + 16))
    {
      v31.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v39[0]), (JSC::JSGlobalObject *)&v45);
      JSC::VM::throwException((JSC::VM *)v4, this, v31);
      v30 = v45;
    }
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v17);
      else
        *(_DWORD *)v30 -= 2;
    }
    v18 = 0;
    goto LABEL_26;
  }
  v34 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsIDBTransactionPrototypeFunction_abort(v34, v35, v36);
}

uint64_t WebCore::jsIDBTransactionPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  uint64_t result;
  JSC::VM *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBTransaction", "abort");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBTransaction::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBTransaction::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "IDBTransaction", "abort");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(unsigned __int8 *)(v11 + 136) - 2 >= 3)
  {
    WebCore::IDBTransaction::abortInternal((WebCore::IDBDatabase **)v11);
    return 10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = 8;
    v22 = 1;
    v18 = 8;
    v13 = v21;
    v21 = 0;
    v19 = v13;
    if (!*((_QWORD *)v5 + 2))
    {
      v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v19);
      JSC::VM::throwException(v5, this, v14);
      v13 = v19;
    }
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v22)
    {
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 != 2)
        {
          result = 0;
          *(_DWORD *)v15 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v15, v12);
      }
    }
    return 0;
  }
}

uint64_t WebCore::jsIDBTransactionPrototypeFunction_commit(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "IDBTransaction", "commit");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSIDBTransaction::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSIDBTransaction::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "IDBTransaction", "commit");
  WebCore::IDBTransaction::commit(*(_QWORD *)(v4 + 24), (uint64_t)&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16IIRFilterOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  WTF *result;

  v3 = *(WTF **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 48) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  result = *(WTF **)(a2 + 24);
  if (result)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

_BYTE *WebCore::jsIIRFilterNodePrototypeFunction_getFrequencyResponse(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  JSValue v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  JSValue v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  JSC::VM *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  char v59;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "IIRFilterNode", "getFrequencyResponse");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSIIRFilterNode::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSIIRFilterNode::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "IIRFilterNode", "getFrequencyResponse");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v43.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v43);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v55 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_29;
  if (*(_BYTE *)(v18 + 5) != 46)
    goto LABEL_29;
  JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(v18, &v57);
  v19 = (_DWORD *)v57;
  if (!v57)
    goto LABEL_29;
  v20 = *(_QWORD *)(v57 + 32);
  v21 = MEMORY[0x1E0CC10F8];
  if (v20)
  {
    v22 = *(_QWORD *)(v20 + 16);
    if (v22)
    {
      if ((v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v22 & 0x3FFFFFFFFLL) + v23)
      {
        if (*(_QWORD *)(v20 + 32)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0)
        {
          v57 = 0;
          goto LABEL_27;
        }
      }
    }
  }
  if ((*(_BYTE *)(v57 + 6) & 3) == 0)
  {
    v53 = v57;
    v54 = 0;
    v28 = *((_QWORD *)a2 + 7);
    v55 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v28 & 0xFFFE000000000002) != 0)
      goto LABEL_49;
    if (*(_BYTE *)(v28 + 5) != 46)
      goto LABEL_49;
    JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(v28, &v57);
    v29 = (_DWORD *)v57;
    if (!v57)
      goto LABEL_49;
    v30 = *(_QWORD *)(v57 + 32);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        if ((v32 = *(_QWORD *)(v21 + 56)) == 0
          || !*(_BYTE *)(v21 + 34) && *MEMORY[0x1E0CC10F0]
          || (v31 & 0x3FFFFFFFFLL) + v32)
        {
          if (*(_QWORD *)(v30 + 32)
             ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
             : 0)
          {
            v57 = 0;
            goto LABEL_47;
          }
        }
      }
    }
    if ((*(_BYTE *)(v57 + 6) & 3) != 0)
    {
LABEL_47:
      if (*v29 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v29;
LABEL_49:
      v34 = 1;
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v55, 1, "magResponse", 12, "IIRFilterNode", 14, a8, "getFrequencyResponse", 21, "Float32Array", 13);
      v25 = 0;
      v52 = 1;
LABEL_50:
      ((void (*)(uint64_t *, uint64_t *))off_1E32AA850[v34])(&v57, &v51);
      v26 = 0;
      goto LABEL_30;
    }
    v51 = v57;
    v52 = 0;
    v35 = *((_QWORD *)a2 + 8);
    v55 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v35 & 0xFFFE000000000002) != 0)
      goto LABEL_68;
    if (*(_BYTE *)(v35 + 5) != 46)
      goto LABEL_68;
    JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(v35, &v57);
    v36 = (_DWORD *)v57;
    if (!v57)
      goto LABEL_68;
    v37 = *(_QWORD *)(v57 + 32);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 16);
      if (v38)
      {
        if ((v39 = *(_QWORD *)(v21 + 56)) == 0
          || !*(_BYTE *)(v21 + 34) && *MEMORY[0x1E0CC10F0]
          || (v38 & 0x3FFFFFFFFLL) + v39)
        {
          if (*(_QWORD *)(v37 + 32)
             ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
             : 0)
          {
            v57 = 0;
            goto LABEL_66;
          }
        }
      }
    }
    if ((*(_BYTE *)(v57 + 6) & 3) != 0)
    {
LABEL_66:
      if (*v36 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v36;
LABEL_68:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v55, 2, "phaseResponse", 14, "IIRFilterNode", 14, a8, "getFrequencyResponse", 21, "Float32Array", 13);
      v25 = 0;
      v41 = 1;
      v50 = 1;
LABEL_69:
      ((void (*)(uint64_t *, uint64_t *))off_1E32AA850[v41])(&v57, &v49);
      v34 = 0;
      goto LABEL_50;
    }
    v50 = 0;
    v53 = 0;
    v51 = 0;
    v49 = 0;
    WebCore::IIRFilterNode::getFrequencyResponse(v17, (uint64_t)v19, (uint64_t)v29, v57, (uint64_t)&v57);
    if (*v36 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v36;
    if (*v29 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v29;
    if (*v19 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v19;
    if (!v59)
    {
      v25 = 10;
LABEL_78:
      v41 = 0;
      goto LABEL_69;
    }
    v44 = (WTF::StringImpl *)v57;
    LOBYTE(v55) = v57;
    v45 = v58;
    v58 = 0;
    v56 = v45;
    if (!*((_QWORD *)v9 + 2))
    {
      v46.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v57, (JSC::JSGlobalObject *)&v56);
      JSC::VM::throwException(v9, this, v46);
      v45 = v56;
    }
    v56 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v44);
      else
        *(_DWORD *)v45 -= 2;
    }
    if (v59)
    {
      v47 = v58;
      v58 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 != 2)
        {
          v25 = 0;
          *(_DWORD *)v47 -= 2;
          goto LABEL_78;
        }
        WTF::StringImpl::destroy(v47, v44);
      }
    }
    v25 = 0;
    goto LABEL_78;
  }
LABEL_27:
  if (*v19 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*v19;
LABEL_29:
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v55, 0, "frequencyHz", 12, "IIRFilterNode", 14, a8, "getFrequencyResponse", 21, "Float32Array", 13);
  v25 = 0;
  v26 = 1;
  v54 = 1;
LABEL_30:
  ((void (*)(uint64_t *, uint64_t *))off_1E32AA850[v26])(&v57, &v53);
  return (_BYTE *)v25;
}

unint64_t WebCore::jsIdleDeadlinePrototypeFunction_timeRemaining(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::IdleDeadline *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "IdleDeadline", "timeRemaining");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSIdleDeadline::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSIdleDeadline::s_info && v6 != 0);
  }
  if (!v5)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "IdleDeadline", "timeRemaining");
  v9 = *(WebCore::IdleDeadline **)(v3 + 24);
  v10 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v3 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!v10)
    return 10;
  if (*(_BYTE *)(v10 + 274))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v11 = WebCore::IdleDeadline::timeRemaining(v9, (WebCore::Document *)(v10 - 192));
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v12 = (int)v11, v11 == (double)(int)v12)
      && ((_DWORD)v12 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
    {
      return v12 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v11 + 0x2000000000000;
    }
  }
  return result;
}

uint64_t WebCore::jsImageBitmapPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSImageBitmap::s_info;
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSImageBitmap::s_info && v6 != 0);
    }
    if (v5)
    {
      v9 = *(_QWORD *)(v3 + 24);
      v10 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      if (!v10)
        return 10;
      v11 = *(_QWORD *)(v10 + 8);
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v11);
LABEL_17:
      v13 = *(_QWORD *)(v11 + 8);
      v14 = v13 - 1;
      *(_QWORD *)(v11 + 8) = v13 - 1;
      if (v13 == 1)
      {
        v19 = *(_QWORD *)(v11 + 16);
        v15 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = 0;
        v16 = v19 != 0;
      }
      else
      {
        v15 = 0;
        v16 = 1;
      }
      v17 = __ldxr((unsigned __int8 *)v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
        {
          if (!v14)
            goto LABEL_25;
          return 10;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (!v14)
      {
LABEL_25:
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          WTF::fastFree((WTF *)v11, a2);
      }
      return 10;
    }
  }
  return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "ImageBitmap", "close");
}

uint64_t WebCore::jsImageBitmapRenderingContextPrototypeFunction_transferFromImageBitmap(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  JSValue v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  WebCore::InspectorCanvasAgent *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  JSValue v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  bmalloc::api *v51;
  WTF::StringImpl *v52;
  int v53[2];
  WTF::StringImpl *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v49 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v49, "ImageBitmapRenderingContext", "transferFromImageBitmap");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSImageBitmapRenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSImageBitmapRenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v49, "ImageBitmapRenderingContext", "transferFromImageBitmap");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      *(_QWORD *)v53 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSImageBitmap::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSImageBitmap::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v53, 0, "bitmap", 7, "ImageBitmapRenderingContext", 28, a8, "transferFromImageBitmap", 24, "ImageBitmap", 12);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 25))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 32) + 144))(*(_QWORD *)(v16 + 32));
      if (v35
        && (v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36)) != 0
        && (v38 = *(WebCore::InspectorCanvasAgent **)(v37 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v38, (WebCore::CanvasRenderingContext *)v16, (WebCore::ImageBitmap *)v18, (uint64_t)v53);
      }
      else
      {
        LOBYTE(v53[0]) = 0;
        v55 = 0;
      }
      v51 = (bmalloc::api *)v53;
      v52 = (WTF::StringImpl *)1;
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 32) + 144))(*(_QWORD *)(v16 + 32));
      if (v42)
      {
        v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
        if (v44)
        {
          v45 = *(_QWORD *)(v44 + 96);
          if (v45)
            WebCore::InspectorCanvasAgent::recordAction(v45, (WebCore::CanvasRenderingContext *)v16, (const WTF::StringImpl *)&v50, &v51);
        }
      }
      if (v55)
      {
        v46 = *(_DWORD **)v53;
        *(_QWORD *)v53 = 0;
        if (v46)
        {
          if (*v46 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v46;
        }
      }
      v47 = v50;
      v50 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v43);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
    if (!v18)
    {
      v51 = 0;
      WebCore::ImageBitmapRenderingContext::transferFromImageBitmap((WebCore::ImageBitmapRenderingContext *)v16, &v51, (uint64_t)v53);
      goto LABEL_33;
    }
    ++*(_DWORD *)(v18 + 8);
    v51 = (bmalloc::api *)v18;
    WebCore::ImageBitmapRenderingContext::transferFromImageBitmap((WebCore::ImageBitmapRenderingContext *)v16, &v51, (uint64_t)v53);
    v51 = 0;
    if (*(_DWORD *)(v18 + 8) != 1)
    {
      --*(_DWORD *)(v18 + 8);
LABEL_33:
      if (!v55)
        return 10;
      v39 = (WTF::StringImpl *)LOBYTE(v53[0]);
      LOBYTE(v51) = v53[0];
      v40 = v54;
      v52 = v54;
      if (!*((_QWORD *)v9 + 2))
      {
        v41.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v53[0]), (JSC::JSGlobalObject *)&v52);
        JSC::VM::throwException(v9, this, v41);
        v40 = v52;
      }
      v52 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v39);
        else
          *(_DWORD *)v40 -= 2;
      }
      return 0;
    }
    v26 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v18 + 16) = 0;
    if (!v26)
    {
LABEL_52:
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
        *(_QWORD *)v18 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v18, v25);
      goto LABEL_33;
    }
    v27 = *(_QWORD *)(v26 + 8);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v27);
LABEL_40:
    v29 = *(_QWORD *)(v27 + 8);
    v30 = v29 - 1;
    *(_QWORD *)(v27 + 8) = v29 - 1;
    if (v29 == 1)
    {
      v48 = *(_QWORD *)(v27 + 16);
      v31 = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = 0;
      v32 = v48 != 0;
    }
    else
    {
      v31 = 0;
      v32 = 1;
    }
    v33 = __ldxr((unsigned __int8 *)v27);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
      {
LABEL_47:
        if (!v30)
        {
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          if (!v32)
            WTF::fastFree((WTF *)v27, v25);
        }
        goto LABEL_52;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
    goto LABEL_47;
  }
  v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v34);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12ImageCaptureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12ImageCaptureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsImageCapturePrototypeFunction_getPhotoCapabilities(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194CD5D9CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSImageCapture::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSImageCapture::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ImageCapture", "getPhotoCapabilities", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v30 = v14;
  WebCore::ImageCapture::getPhotoCapabilities(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsImageCapturePrototypeFunction_takePhoto(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  WebCore::DOMGuardedObject *v25;
  uint64_t v26;
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;
  _OWORD v31[3];
  WebCore::DOMGuardedObject *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194CD6064);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_36;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSImageCapture::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSImageCapture::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_36:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ImageCapture", "takePhoto", v16);
LABEL_44:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_32;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v23 = 10;
  else
    v23 = *((_QWORD *)a2 + 6);
  v24 = *(_QWORD *)(v17 + 24);
  WebCore::convertDictionary<WebCore::PhotoSettings>((JSC::JSCell *)v23, (unint64_t)this, (uint64_t)&v32);
  if (v36)
    goto LABEL_44;
  v31[0] = v33;
  v31[1] = v34;
  v31[2] = v35;
  v30 = v14;
  WebCore::ImageCapture::takePhoto(v24, (uint64_t)v31, (uint64_t *)&v30);
  v25 = v30;
  v30 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v25 + 16))(v25);
    else
      --*((_DWORD *)v25 + 4);
  }
LABEL_32:
  v26 = *(_QWORD *)(v10 + 16);
  if (v26)
  {
    if (*(_QWORD *)(v10 + 24) != v26)
    {
      v28 = *(objc_class **)(v26 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v32);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v32, v28, 0);
      v29 = v32;
      v32 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsImageCapturePrototypeFunction_getPhotoSettings(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194CD62E8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSImageCapture::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSImageCapture::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ImageCapture", "getPhotoSettings", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v30 = v14;
  WebCore::ImageCapture::getPhotoSettings(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::ImageData>,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>>(JSC *this, uint64_t a2, JSC::VM **a3, unsigned __int8 *a4)
{
  int v5;
  WTF *v6;
  void *v7;
  unint64_t v8;
  WTF *v9;
  _DWORD *v11;
  JSC::JSGlobalObject *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WebCore::JSImageData *v16;
  JSC::VM *v17;
  WebCore::JSDOMGlobalObject *v18;
  WTF *v19;
  WTF::StringImpl *v20;

  v5 = *((_DWORD *)a4 + 4);
  if (!v5)
  {
    v6 = *(WTF **)a4;
    *(_QWORD *)a4 = 0;
    v19 = v6;
    v8 = WebCore::toJSNewlyCreated(this, a2, (WebCore::JSDOMGlobalObject *)&v19);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v11 = (_DWORD *)*((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 2) = 0;
        if (v11)
        {
          if (*v11 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v11;
        }
        WTF::fastFree(v9, v7);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    return v8;
  }
  if (v5 == 1)
  {
    v13 = (JSC::JSGlobalObject *)*a4;
    LOBYTE(v19) = *a4;
    v14 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = 0;
    v20 = v14;
    if (!*((_QWORD *)*a3 + 2))
    {
      v15.super.isa = (Class)WebCore::createDOMException(this, v13, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException(*a3, this, v15);
      v14 = v20;
    }
    v20 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    return 0;
  }
  v16 = (WebCore::JSImageData *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::getDOMStructure<WebCore::JSImageData>(v16, v17, v18);
}

uint64_t WebCore::getDOMStructure<WebCore::JSImageData>(WebCore::JSImageData *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSImageData::s_info + ~((_QWORD)&WebCore::JSImageData::s_info << 32)) ^ (((unint64_t)&WebCore::JSImageData::s_info + ~((_QWORD)&WebCore::JSImageData::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSImageData::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSImageData::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSImageData::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSImageData::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSImageData::s_info);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_19Uint8ClampedAdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

_BYTE *WebCore::jsInputDeviceInfoPrototypeFunction_getCapabilities(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::JSGlobalObject *v10;
  const WebCore::MediaTrackCapabilities *v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;
  _BYTE v16[432];

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "InputDeviceInfo", "getCapabilities");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSInputDeviceInfo::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSInputDeviceInfo::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "InputDeviceInfo", "getCapabilities");
  v10 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::toMediaTrackCapabilities((int *)(*(_QWORD *)(v4 + 24) + 56), *(_QWORD *)(v4 + 24) + 40, (uint64_t)v16);
  v12 = WebCore::convertDictionaryToJS(this, v10, (WebCore::JSDOMGlobalObject *)v16, v11);
  WebCore::MediaTrackCapabilities::~MediaTrackCapabilities((WebCore::MediaTrackCapabilities *)v16, v13);
  return (_BYTE *)v12;
}

void WebCore::MediaTrackCapabilities::~MediaTrackCapabilities(WebCore::MediaTrackCapabilities *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  if (*((_BYTE *)this + 424))
  {
    v3 = (WTF *)*((_QWORD *)this + 51);
    if (v3)
    {
      *((_QWORD *)this + 51) = 0;
      *((_DWORD *)this + 104) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  if (*((_BYTE *)this + 400))
  {
    v4 = (WTF *)*((_QWORD *)this + 48);
    if (v4)
    {
      *((_QWORD *)this + 48) = 0;
      *((_DWORD *)this + 98) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 328))
  {
    v5 = *((unsigned int *)this + 81);
    if ((_DWORD)v5)
    {
      v13 = (WTF::StringImpl **)*((_QWORD *)this + 39);
      v14 = 8 * v5;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v6 = (WTF *)*((_QWORD *)this + 39);
    if (v6)
    {
      *((_QWORD *)this + 39) = 0;
      *((_DWORD *)this + 80) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (*((_BYTE *)this + 240))
  {
    v10 = (WTF *)*((_QWORD *)this + 28);
    if (v10)
    {
      *((_QWORD *)this + 28) = 0;
      *((_DWORD *)this + 58) = 0;
      WTF::fastFree(v10, a2);
    }
  }
  if (*((_BYTE *)this + 136))
  {
    v11 = *((unsigned int *)this + 33);
    if ((_DWORD)v11)
    {
      v16 = (WTF::StringImpl **)*((_QWORD *)this + 15);
      v17 = 8 * v11;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    v12 = (WTF *)*((_QWORD *)this + 15);
    if (v12)
    {
      *((_QWORD *)this + 15) = 0;
      *((_DWORD *)this + 32) = 0;
      WTF::fastFree(v12, a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10InputEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF *v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v6 = (uint64_t *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v6)
      {
        if (*v6)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v6, a2);
        WTF::fastFree((WTF *)v6, a2);
      }
      v7 = (unsigned int *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      return (WTF::StringImpl *)WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

_BYTE *WebCore::jsInputEventPrototypeFunction_getTargetRanges(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  objc_class *v16;
  int v17;
  BOOL v18;
  JSValue v19;
  void *v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v25;
  JSC::VM *v26;
  WTF *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  WTF *v31;
  _OWORD v32[4];
  uint64_t v33;
  JSC::VM *v34;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "InputEvent", "getTargetRanges");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInputEvent::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInputEvent::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "InputEvent", "getTargetRanges");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v34 = v5;
  v29 = 0;
  v30 = 0x800000000;
  v31 = (WTF *)((char *)v32 + 8);
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v13 = *(_DWORD *)(v11 + 124);
  if (v13 >= 9)
  {
    v29 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v30) == 1;
    v13 = *(_DWORD *)(v11 + 124);
    if (v13)
    {
LABEL_14:
      v14 = *(uint64_t **)(v11 + 112);
      v15 = 8 * v13;
      do
      {
        v16 = (objc_class *)(*v14 ? WebCore::wrap<WebCore::StaticRange>((uint64_t)this, v12, *v14) : 2);
        if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
          goto LABEL_45;
        v17 = v30;
        if ((_DWORD)v30 != HIDWORD(v30) && (v31 != (WTF *)((char *)v32 + 8) ? (v18 = v31 == 0) : (v18 = 1), v18))
        {
          *((_QWORD *)v31 + v30) = v16;
          LODWORD(v30) = v17 + 1;
        }
        else
        {
          v19.super.isa = v16;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v30, v19) == 1)
            v29 = 1;
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else if (v13)
  {
    goto LABEL_14;
  }
  if (v29)
  {
    JSC::throwOutOfMemoryError();
LABEL_45:
    v22 = 0;
    goto LABEL_36;
  }
  v27 = v31;
  v28 = v30;
  v21 = *(JSC::VM **)(v12 + 56);
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    goto LABEL_45;
  v22 = JSC::constructArray();
LABEL_36:
  v23 = *(uint64_t **)&v32[0];
  if (*(_QWORD *)&v32[0])
  {
    v27 = (WTF *)&v30;
    v25 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v32[0], (uint64_t *)&v27);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v23, v25);
  }
  if (v31 != (WTF *)((char *)v32 + 8) && v31)
    WTF::fastFree(v31, v20);
  return (_BYTE *)v22;
}

uint64_t WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getElementsByComputedRole(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  Inspector::InspectorAuditAgent **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebCore::Node *v21;
  uint64_t v22;
  WebCore::Document *v23;
  WTF::StringImpl *v24;
  void *v25;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSValue v32;
  WTF::StringImpl *v33;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v35;
  JSValue v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore *v40;
  JSC::JSGlobalObject *v41;
  JSC::CallFrame *v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;
  int v45[2];
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "InspectorAuditAccessibilityObject", "getElementsByComputedRole");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "InspectorAuditAccessibilityObject", "getElementsByComputedRole");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v32);
  }
  v12 = *(Inspector::InspectorAuditAgent ***)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v15 = v13;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CD6FBCLL);
  }
  v16 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v45 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v18)
        goto LABEL_20;
    }
    else if (!v18)
    {
LABEL_20:
      v50 = v18;
      goto LABEL_21;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_20;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v45, this);
LABEL_21:
  if (*((_DWORD *)v17 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v50;
    if (hasExceptionsAfterHandlingTraps)
    {
      v49 = 1;
      v50 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v33);
        else
          *(_DWORD *)v19 -= 2;
      }
      v26 = 0;
      v29 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    v19 = v50;
  }
  v48 = v19;
  v49 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v21 = 0;
  }
  else
  {
    v20 = *((_QWORD *)a2 + 7);
    if ((v20 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v21 = 0;
    }
    else
    {
      *(_QWORD *)v45 = *((_QWORD *)this + 7);
      if ((v20 & 0xFFFE000000000002) != 0
        || *(unsigned __int8 *)(v20 + 5) < 0xF0u
        || (v21 = *(WebCore::Node **)(v20 + 24)) == 0)
      {
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v45, 1, "container", 10, "InspectorAuditAccessibilityObject", 34, v14, "getElementsByComputedRole", 26, "Node", 5);
        v26 = 0;
LABEL_39:
        v29 = 0;
LABEL_40:
        ((void (*)(int *, WTF::StringImpl **))off_1E32A90E0[v29])(v45, &v48);
        return v26;
      }
    }
  }
  v22 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v48 = 0;
  v44 = v19;
  WebCore::InspectorAuditAccessibilityObject::getElementsByComputedRole(v12, (WebCore::Document *)(v15 - 192), &v44, v21, (uint64_t)v45);
  if (!v47)
  {
    v50 = *(WTF::StringImpl **)v45;
    v24 = v46;
    *(_QWORD *)v45 = 0;
    v46 = 0;
    v51 = v24;
    v26 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>::convert<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul>((WebCore::DOMWrapperWorld **)this, v22, (uint64_t)&v50, v23);
    if (HIDWORD(v51))
    {
      v37 = v50;
      v38 = 8 * HIDWORD(v51);
      do
      {
        v39 = *(_QWORD *)v37;
        *(_QWORD *)v37 = 0;
        if (v39)
        {
          if (*(_DWORD *)(v39 + 24) == 2)
          {
            if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v39, v25);
          }
          else
          {
            *(_DWORD *)(v39 + 24) -= 2;
          }
        }
        v37 = (WTF::StringImpl *)((char *)v37 + 8);
        v38 -= 8;
      }
      while (v38);
    }
    v27 = v50;
    if (v50)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      WTF::fastFree(v27, v25);
    }
LABEL_34:
    if (v47 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E32AAEB0[v47])(&v50, v45);
    v47 = -1;
    v28 = v44;
    v44 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v28 -= 2;
    }
    goto LABEL_39;
  }
  if (v47 == 1)
  {
    v25 = (void *)LOBYTE(v45[0]);
    LOBYTE(v50) = v45[0];
    v35 = v46;
    v46 = 0;
    v51 = v35;
    if (!*((_QWORD *)v4 + 2))
    {
      v36.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v45[0]), (JSC::JSGlobalObject *)&v51);
      JSC::VM::throwException(v4, this, v36);
      v35 = v51;
    }
    v51 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v35 -= 2;
    }
    v26 = 0;
    goto LABEL_34;
  }
  v40 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getActiveDescendant(v40, v41, v42);
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getActiveDescendant(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  unsigned __int8 v26[16];
  int v27;
  JSC::VM *v28;
  char v29;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getActiveDescendant");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getActiveDescendant");
  v28 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v26 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v26, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getActiveDescendant", 20, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getActiveDescendant(v17, v19, (uint64_t)v26);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>((WebCore::DOMWrapperWorld **)this, v20, &v28, v26);
    if (v27 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E32AAEC0[v27])(&v29, v26);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getChildNodes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;
  char v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getChildNodes");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getChildNodes");
  v26 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v28 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v28, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getChildNodes", 14, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getChildNodes(v17, v19, (uint64_t)&v28);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>,WebCore::ExceptionOr<std::optional<WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)this, v20, &v26, (uint64_t)&v28);
    if (v30 != -1)
      ((void (*)(char *, uint64_t *))off_1E32AAED0[v30])(&v27, &v29);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getComputedProperties(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  unsigned int v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  __int16 v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WebCore *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  unsigned __int8 *v116;
  unsigned int v117;
  unsigned __int8 *v118;
  unsigned int v119;
  unsigned __int8 *v120;
  unsigned int v121;
  unsigned __int8 *v122;
  unsigned int v123;
  unsigned __int8 *v124;
  unsigned int v125;
  unsigned __int8 *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  WTF::StringImpl **v135;
  WTF::StringImpl *v136;
  WTF *v137;
  _QWORD *v138;
  _DWORD **v139;
  _DWORD *v140;
  WTF *v141;
  uint64_t v142;
  WTF *v143;
  _QWORD *v144;
  _DWORD *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF *v148;
  WTF *v149;
  _DWORD *v150;
  WTF *v151;
  WTF::StringImpl *v152;
  WTF *v153;
  WTF *v154;
  _DWORD *v155;
  WTF *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  JSValue v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  JSValue v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  _DWORD *v168;
  uint64_t v169;
  JSC::VM *v170;
  __int16 v171;
  WTF::StringImpl *v172[2];
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  unsigned __int16 v176;
  uint64_t v177;
  unsigned __int16 v178;
  _DWORD **v179;
  int v180;
  unsigned int v181;
  char v182;
  _DWORD *v183;
  int v184;
  __int16 v185;
  _DWORD *v186;
  __int16 v187;
  char v188;
  __int16 v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  _QWORD *v198;
  unsigned int v199;
  unsigned int v200;
  char v201;
  _DWORD *v202;
  int v203;
  __int16 v204;
  WTF::StringImpl *v205;
  __int16 v206;
  WTF *v207;
  unint64_t v208;
  int v209;
  int v210;
  uint64_t v211;
  JSC::VM *v212;
  int v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  unsigned __int16 v219;
  uint64_t v220;
  unsigned __int16 v221;
  _DWORD **v222;
  uint64_t v223;
  unsigned __int8 v224;
  _DWORD *v225;
  int v226;
  __int16 v227;
  _DWORD *v228;
  __int16 v229;
  char v230;
  unsigned int v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v170 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v170, "InspectorAuditAccessibilityObject", "getComputedProperties");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v170, "InspectorAuditAccessibilityObject", "getComputedProperties");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v160.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v160);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v212 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v212, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getComputedProperties", 22, "Node", 5);
    return 0;
  }
  v169 = *(_QWORD *)(v11 + 40);
  WebCore::InspectorAuditAccessibilityObject::getComputedProperties(v17, v19, (uint64_t)&v212);
  if (v231)
  {
    if (v231 == 1)
    {
      v161 = (WTF::StringImpl *)v213;
      LOBYTE(v171) = v213;
      v162 = v214;
      v214 = 0;
      v172[0] = v162;
      if (!*((_QWORD *)v9 + 2))
      {
        v163.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v213, (JSC::JSGlobalObject *)v172);
        JSC::VM::throwException(v9, this, v163);
        v162 = v172[0];
      }
      v172[0] = 0;
      if (v162)
      {
        if (*(_DWORD *)v162 == 2)
          WTF::StringImpl::destroy(v162, v161);
        else
          *(_DWORD *)v162 -= 2;
      }
      v27 = 0;
      goto LABEL_225;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_386;
  }
  if (!v230)
  {
    v27 = 2;
    goto LABEL_225;
  }
  v173 = v216;
  v20 = (unsigned __int16)v213;
  v171 = v213;
  v22 = v214;
  v21 = v215;
  v214 = 0;
  v215 = 0;
  v172[0] = v22;
  v172[1] = (WTF::StringImpl *)v21;
  v174 = v217;
  v23 = v218;
  v175 = v218;
  v167 = v219;
  v176 = v219;
  v24 = v220;
  v218 = 0;
  v220 = 0;
  v177 = v24;
  v166 = v221;
  v178 = v221;
  LOBYTE(v179) = 0;
  v182 = 0;
  v165 = v224;
  if (v224)
  {
    v25 = v222;
    v222 = 0;
    v179 = v25;
    LODWORD(v25) = v223;
    v26 = HIDWORD(v223);
    v223 = 0;
    v180 = (int)v25;
    v181 = v26;
    v164 = v26;
    v182 = 1;
  }
  v28 = v225;
  v183 = v225;
  v184 = v226;
  v185 = v227;
  v29 = v228;
  v225 = 0;
  v228 = 0;
  v186 = v29;
  v30 = v229;
  v187 = v229;
  v188 = 1;
  v189 = v213;
  if (v22)
    *(_DWORD *)v22 += 2;
  v190 = v22;
  if (v21)
    *(_DWORD *)v21 += 2;
  v191 = v21;
  v192 = v173;
  v193 = v174;
  if (v23)
    *(_DWORD *)v23 += 2;
  v194 = v23;
  v195 = v167;
  if (v24)
    *(_DWORD *)v24 += 2;
  v196 = v24;
  v197 = v166;
  LOBYTE(v198) = 0;
  v201 = 0;
  v168 = v28;
  if (v165)
  {
    v198 = 0;
    v199 = 0;
    v200 = v164;
    if (v164)
    {
      if (v164 >> 29)
        goto LABEL_386;
      v137 = (WTF *)(8 * v164);
      v138 = (_QWORD *)WTF::fastMalloc(v137);
      v199 = v164;
      v198 = v138;
      v139 = v179;
      do
      {
        v140 = *v139;
        if (*v139)
          *v140 += 2;
        *v138++ = v140;
        ++v139;
        v137 = (WTF *)((char *)v137 - 8);
      }
      while (v137);
    }
    v201 = 1;
    v28 = v168;
  }
  if (v28)
    *v28 += 2;
  v202 = v28;
  v203 = v184;
  v204 = v185;
  if (v29)
    *v29 += 2;
  v205 = (WTF::StringImpl *)v29;
  v206 = v30;
  v31 = *((_QWORD *)this + 7);
  v32 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v33 = 8 * *(unsigned __int8 *)(v32 + 14);
  v27 = JSC::allocateCell<JSC::JSFinalObject>(v31, v33 + 16);
  v34 = *(_DWORD *)(v32 + 8);
  *(_DWORD *)v27 = v32 >> 4;
  *(_DWORD *)(v27 + 4) = v34;
  *(_QWORD *)(v27 + 8) = 0;
  bzero((void *)(v27 + 16), v33);
  if (*(_BYTE *)(v31 + 755))
    __dmb(0xAu);
  if (v20 >= 0x100)
  {
    if ((_BYTE)v20)
      v35 = 7;
    else
      v35 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v36 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v36, v35, 0, (uint64_t)&v207);
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v37);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v38 = this;
  if (v22)
  {
    v39 = *((_QWORD *)this + 7);
    v40 = *((_DWORD *)v22 + 1);
    if (v40)
    {
      if (v40 != 1)
      {
LABEL_49:
        v41 = *(_QWORD *)(v39 + 64760);
        if (!v41 || v22 != *(WTF::StringImpl **)(v41 + 8))
          v41 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_52;
      }
      v116 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
      if ((*((_BYTE *)v22 + 16) & 4) != 0)
      {
        v117 = *v116;
      }
      else
      {
        v128 = *(unsigned __int16 *)v116;
        if (v128 > 0xFF)
          goto LABEL_49;
        v117 = v128;
      }
      v41 = *(_QWORD *)(v39 + 8 * v117 + 42216);
    }
    else
    {
      v41 = *(_QWORD *)(v39 + 41968);
    }
LABEL_52:
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v42 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v42, v41, 0, (uint64_t)&v207);
    v38 = this;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v43);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  if (!v21)
    goto LABEL_66;
  v44 = *((_QWORD *)v38 + 7);
  v45 = *(_DWORD *)(v21 + 4);
  if (v45)
  {
    if (v45 != 1)
    {
LABEL_59:
      v46 = *(_QWORD *)(v44 + 64760);
      if (!v46 || v21 != *(_QWORD *)(v46 + 8))
        v46 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_62;
    }
    v118 = *(unsigned __int8 **)(v21 + 8);
    if ((*(_BYTE *)(v21 + 16) & 4) != 0)
    {
      v119 = *v118;
    }
    else
    {
      v129 = *(unsigned __int16 *)v118;
      if (v129 > 0xFF)
        goto LABEL_59;
      v119 = v129;
    }
    v46 = *(_QWORD *)(v44 + 8 * v119 + 42216);
  }
  else
  {
    v46 = *(_QWORD *)(v44 + 41968);
  }
LABEL_62:
  if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
    goto LABEL_383;
  WTF::AtomStringImpl::addLiteral();
  v47 = v207;
  v207 = 0;
  v208 = v27;
  v209 = -1;
  v210 = 0x1000000;
  v211 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v47, v46, 0, (uint64_t)&v207);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v48);
    else
      *(_DWORD *)v47 -= 2;
  }
LABEL_66:
  if (BYTE1(v192))
  {
    if ((_BYTE)v192)
      v49 = 7;
    else
      v49 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v50 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v50, v49, 0, (uint64_t)&v207);
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v51);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (BYTE3(v192))
  {
    if (BYTE2(v192))
      v52 = 7;
    else
      v52 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v53 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v53, v52, 0, (uint64_t)&v207);
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v54);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  if (BYTE5(v192))
  {
    if (BYTE4(v192))
      v55 = 7;
    else
      v55 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v56 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v56, v55, 0, (uint64_t)&v207);
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v57);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  if (BYTE12(v192))
  {
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v58 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v58, DWORD2(v192) | 0xFFFE000000000000, 0, (uint64_t)&v207);
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v59);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  if (BYTE1(v193))
  {
    if ((_BYTE)v193)
      v60 = 7;
    else
      v60 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v61 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v61, v60, 0, (uint64_t)&v207);
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v62);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  if (BYTE8(v193))
  {
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v63 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v63, DWORD1(v193) | 0xFFFE000000000000, 0, (uint64_t)&v207);
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v64);
      else
        *(_DWORD *)v63 -= 2;
    }
  }
  if (BYTE13(v193))
  {
    if (BYTE12(v193))
      v65 = 7;
    else
      v65 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v66 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v66, v65, 0, (uint64_t)&v207);
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v67);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  if (HIBYTE(v193))
  {
    if (BYTE14(v193))
      v68 = 7;
    else
      v68 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v69 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v69, v68, 0, (uint64_t)&v207);
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
      {
        WTF::StringImpl::destroy(v69, v70);
        if (!v23)
          goto LABEL_134;
        goto LABEL_125;
      }
      *(_DWORD *)v69 -= 2;
    }
  }
  if (!v23)
    goto LABEL_134;
LABEL_125:
  v71 = *((_QWORD *)v38 + 7);
  v72 = *(_DWORD *)(v23 + 4);
  if (v72)
  {
    if (v72 != 1)
    {
LABEL_127:
      v73 = *(_QWORD *)(v71 + 64760);
      if (!v73 || v23 != *(_QWORD *)(v73 + 8))
        v73 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_130;
    }
    v120 = *(unsigned __int8 **)(v23 + 8);
    if ((*(_BYTE *)(v23 + 16) & 4) != 0)
    {
      v121 = *v120;
    }
    else
    {
      v130 = *(unsigned __int16 *)v120;
      if (v130 > 0xFF)
        goto LABEL_127;
      v121 = v130;
    }
    v73 = *(_QWORD *)(v71 + 8 * v121 + 42216);
  }
  else
  {
    v73 = *(_QWORD *)(v71 + 41968);
  }
LABEL_130:
  if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
    goto LABEL_383;
  WTF::AtomStringImpl::addLiteral();
  v74 = v207;
  v207 = 0;
  v208 = v27;
  v209 = -1;
  v210 = 0x1000000;
  v211 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v74, v73, 0, (uint64_t)&v207);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v75);
    else
      *(_DWORD *)v74 -= 2;
  }
LABEL_134:
  if (v167 < 0x100)
    goto LABEL_142;
  if ((_BYTE)v167)
    v76 = 7;
  else
    v76 = 6;
  if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
    goto LABEL_383;
  WTF::AtomStringImpl::addLiteral();
  v77 = v207;
  v207 = 0;
  v208 = v27;
  v209 = -1;
  v210 = 0x1000000;
  v211 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v77, v76, 0, (uint64_t)&v207);
  if (!v77)
  {
LABEL_142:
    if (!v24)
      goto LABEL_152;
    goto LABEL_143;
  }
  if (*(_DWORD *)v77 != 2)
  {
    *(_DWORD *)v77 -= 2;
    goto LABEL_142;
  }
  WTF::StringImpl::destroy(v77, v78);
  if (!v24)
    goto LABEL_152;
LABEL_143:
  v79 = *((_QWORD *)v38 + 7);
  v80 = *(_DWORD *)(v24 + 4);
  if (v80)
  {
    if (v80 != 1)
    {
LABEL_145:
      v81 = *(_QWORD *)(v79 + 64760);
      if (!v81 || v24 != *(_QWORD *)(v81 + 8))
        v81 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_148;
    }
    v122 = *(unsigned __int8 **)(v24 + 8);
    if ((*(_BYTE *)(v24 + 16) & 4) != 0)
    {
      v123 = *v122;
    }
    else
    {
      v131 = *(unsigned __int16 *)v122;
      if (v131 > 0xFF)
        goto LABEL_145;
      v123 = v131;
    }
    v81 = *(_QWORD *)(v79 + 8 * v123 + 42216);
  }
  else
  {
    v81 = *(_QWORD *)(v79 + 41968);
  }
LABEL_148:
  if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
    goto LABEL_383;
  WTF::AtomStringImpl::addLiteral();
  v82 = v207;
  v207 = 0;
  v208 = v27;
  v209 = -1;
  v210 = 0x1000000;
  v211 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v82, v81, 0, (uint64_t)&v207);
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v83);
    else
      *(_DWORD *)v82 -= 2;
  }
LABEL_152:
  if (v166 >= 0x100)
  {
    if ((_BYTE)v166)
      v84 = 7;
    else
      v84 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v85 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v85, v84, 0, (uint64_t)&v207);
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v86);
      else
        *(_DWORD *)v85 -= 2;
    }
  }
  if (v165)
  {
    if (!v164)
    {
      v87 = 0;
      v207 = 0;
      v208 = 0;
      goto LABEL_163;
    }
    if (!(v164 >> 29))
    {
      v141 = (WTF *)(8 * v164);
      v142 = WTF::fastMalloc(v141);
      v87 = (WTF *)v142;
      v143 = 0;
      v144 = v198;
      do
      {
        v145 = *(_DWORD **)((char *)v143 + (_QWORD)v144);
        if (v145)
          *v145 += 2;
        *(_QWORD *)((char *)v143 + v142) = v145;
        v143 = (WTF *)((char *)v143 + 8);
      }
      while (v141 != v143);
      v146 = WTF::fastMalloc((WTF *)(8 * v164));
      v148 = (WTF *)v146;
      v149 = 0;
      do
      {
        v150 = *(_DWORD **)((char *)v149 + (_QWORD)v87);
        if (v150)
          *v150 += 2;
        *(_QWORD *)((char *)v149 + v146) = v150;
        v149 = (WTF *)((char *)v149 + 8);
      }
      while (v141 != v149);
      v151 = 0;
      do
      {
        v152 = *(WTF::StringImpl **)((char *)v151 + (_QWORD)v148);
        *(_QWORD *)((char *)v151 + (_QWORD)v148) = 0;
        if (v152)
        {
          if (*(_DWORD *)v152 == 2)
            WTF::StringImpl::destroy(v152, v147);
          else
            *(_DWORD *)v152 -= 2;
        }
        v151 = (WTF *)((char *)v151 + 8);
      }
      while (v141 != v151);
      WTF::fastFree(v148, v147);
      HIDWORD(v208) = v164;
      v153 = (WTF *)WTF::fastMalloc((WTF *)(8 * v164));
      v154 = 0;
      LODWORD(v208) = v164;
      v207 = v153;
      do
      {
        v155 = *(_DWORD **)((char *)v154 + (_QWORD)v87);
        if (v155)
          *v155 += 2;
        *(_QWORD *)((char *)v154 + (_QWORD)v153) = v155;
        v154 = (WTF *)((char *)v154 + 8);
      }
      while (v141 != v154);
LABEL_163:
      v89 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)v38, v169, (uint64_t)&v207);
      if (HIDWORD(v208))
      {
        v156 = v207;
        v157 = 8 * HIDWORD(v208);
        do
        {
          v158 = *(WTF::StringImpl **)v156;
          *(_QWORD *)v156 = 0;
          if (v158)
          {
            if (*(_DWORD *)v158 == 2)
              WTF::StringImpl::destroy(v158, v88);
            else
              *(_DWORD *)v158 -= 2;
          }
          v156 = (WTF *)((char *)v156 + 8);
          v157 -= 8;
        }
        while (v157);
      }
      v90 = v207;
      if (v207)
      {
        v207 = 0;
        LODWORD(v208) = 0;
        WTF::fastFree(v90, v88);
        if (!v164)
          goto LABEL_166;
      }
      else if (!v164)
      {
LABEL_166:
        if (v87)
          WTF::fastFree(v87, v88);
        if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
          goto LABEL_383;
        WTF::AtomStringImpl::addLiteral();
        v91 = v207;
        v207 = 0;
        v208 = v27;
        v209 = -1;
        v210 = 0x1000000;
        v211 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v91, v89, 0, (uint64_t)&v207);
        if (v91)
        {
          if (*(_DWORD *)v91 == 2)
            WTF::StringImpl::destroy(v91, v92);
          else
            *(_DWORD *)v91 -= 2;
        }
        goto LABEL_172;
      }
      v134 = 8 * v164;
      v135 = (WTF::StringImpl **)v87;
      do
      {
        v136 = *v135;
        *v135 = 0;
        if (v136)
        {
          if (*(_DWORD *)v136 == 2)
            WTF::StringImpl::destroy(v136, v88);
          else
            *(_DWORD *)v136 -= 2;
        }
        ++v135;
        v134 -= 8;
      }
      while (v134);
      goto LABEL_166;
    }
LABEL_386:
    __break(0xC471u);
    JUMPOUT(0x194CD8B58);
  }
LABEL_172:
  if (!v168)
    goto LABEL_182;
  v93 = *((_QWORD *)v38 + 7);
  v94 = v168[1];
  if (v94)
  {
    if (v94 != 1)
    {
LABEL_175:
      v95 = *(_QWORD *)(v93 + 64760);
      if (!v95 || v168 != *(_DWORD **)(v95 + 8))
        v95 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_178;
    }
    v124 = (unsigned __int8 *)*((_QWORD *)v168 + 1);
    if ((v168[4] & 4) != 0)
    {
      v125 = *v124;
    }
    else
    {
      v132 = *(unsigned __int16 *)v124;
      if (v132 > 0xFF)
        goto LABEL_175;
      v125 = v132;
    }
    v95 = *(_QWORD *)(v93 + 8 * v125 + 42216);
  }
  else
  {
    v95 = *(_QWORD *)(v93 + 41968);
  }
LABEL_178:
  if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
    goto LABEL_383;
  WTF::AtomStringImpl::addLiteral();
  v96 = v207;
  v207 = 0;
  v208 = v27;
  v209 = -1;
  v210 = 0x1000000;
  v211 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v96, v95, 0, (uint64_t)&v207);
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v97);
    else
      *(_DWORD *)v96 -= 2;
  }
LABEL_182:
  if (BYTE1(v203))
  {
    if ((_BYTE)v203)
      v98 = 7;
    else
      v98 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v99 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v99, v98, 0, (uint64_t)&v207);
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, v100);
      else
        *(_DWORD *)v99 -= 2;
    }
  }
  if (HIBYTE(v203))
  {
    if (BYTE2(v203))
      v101 = 7;
    else
      v101 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v102 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v102, v101, 0, (uint64_t)&v207);
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, v103);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  if (HIBYTE(v204))
  {
    if ((_BYTE)v204)
      v104 = 7;
    else
      v104 = 6;
    if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
      goto LABEL_383;
    WTF::AtomStringImpl::addLiteral();
    v105 = v207;
    v207 = 0;
    v208 = v27;
    v209 = -1;
    v210 = 0x1000000;
    v211 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v105, v104, 0, (uint64_t)&v207);
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v106);
      else
        *(_DWORD *)v105 -= 2;
    }
  }
  v107 = v205;
  if (!v205)
    goto LABEL_216;
  v108 = *((_QWORD *)v38 + 7);
  v109 = *((_DWORD *)v205 + 1);
  if (v109)
  {
    if (v109 != 1)
    {
LABEL_209:
      v110 = *(_QWORD *)(v108 + 64760);
      if (!v110 || v205 != *(WTF::StringImpl **)(v110 + 8))
        v110 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_212;
    }
    v126 = (unsigned __int8 *)*((_QWORD *)v205 + 1);
    if ((*((_BYTE *)v205 + 16) & 4) != 0)
    {
      v127 = *v126;
    }
    else
    {
      v133 = *(unsigned __int16 *)v126;
      if (v133 > 0xFF)
        goto LABEL_209;
      v127 = v133;
    }
    v110 = *(_QWORD *)(v108 + 8 * v127 + 42216);
  }
  else
  {
    v110 = *(_QWORD *)(v108 + 41968);
  }
LABEL_212:
  if (*(_DWORD *)(v31 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) != 0)
  {
LABEL_383:
    v27 = 0;
    goto LABEL_224;
  }
  WTF::AtomStringImpl::addLiteral();
  v111 = v207;
  v207 = 0;
  v208 = v27;
  v209 = -1;
  v210 = 0x1000000;
  v211 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v111, v110, 0, (uint64_t)&v207);
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v107);
    else
      *(_DWORD *)v111 -= 2;
  }
LABEL_216:
  if (HIBYTE(v206))
  {
    if ((_BYTE)v206)
      v112 = 7;
    else
      v112 = 6;
    if (!*(_DWORD *)(v31 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31) & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v113 = v207;
      v207 = 0;
      v208 = v27;
      v209 = -1;
      v210 = 0x1000000;
      v211 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v27, (JSC::VM *)v31, (unint64_t)v113, v112, 0, (uint64_t)&v207);
      if (v113)
      {
        if (*(_DWORD *)v113 == 2)
          WTF::StringImpl::destroy(v113, v107);
        else
          *(_DWORD *)v113 -= 2;
      }
      goto LABEL_224;
    }
    goto LABEL_383;
  }
LABEL_224:
  WebCore::InspectorAuditAccessibilityObject::ComputedProperties::~ComputedProperties((WebCore::InspectorAuditAccessibilityObject::ComputedProperties *)&v189, v107);
  WebCore::InspectorAuditAccessibilityObject::ComputedProperties::~ComputedProperties((WebCore::InspectorAuditAccessibilityObject::ComputedProperties *)&v171, v114);
LABEL_225:
  if (v231 != -1)
    (*(&off_1E32AAEE0 + v231))((int)&v171, (WebCore::InspectorAuditAccessibilityObject::ComputedProperties *)&v213);
  return (_BYTE *)v27;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getControlledNodes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;
  char v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getControlledNodes");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getControlledNodes");
  v26 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v28 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v28, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getControlledNodes", 19, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getControlledNodes(v17, v19, (uint64_t)&v28);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>,WebCore::ExceptionOr<std::optional<WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)this, v20, &v26, (uint64_t)&v28);
    if (v30 != -1)
      ((void (*)(char *, uint64_t *))off_1E32AAED0[v30])(&v27, &v29);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getFlowedNodes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;
  char v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getFlowedNodes");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getFlowedNodes");
  v26 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v28 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v28, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getFlowedNodes", 15, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getFlowedNodes(v17, v19, (uint64_t)&v28);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>,WebCore::ExceptionOr<std::optional<WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)this, v20, &v26, (uint64_t)&v28);
    if (v30 != -1)
      ((void (*)(char *, uint64_t *))off_1E32AAED0[v30])(&v27, &v29);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getMouseEventNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  unsigned __int8 v26[16];
  int v27;
  JSC::VM *v28;
  char v29;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getMouseEventNode");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getMouseEventNode");
  v28 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v26 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v26, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getMouseEventNode", 18, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getMouseEventNode(v17, v19, (uint64_t)v26);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>((WebCore::DOMWrapperWorld **)this, v20, &v28, v26);
    if (v27 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E32AAEC0[v27])(&v29, v26);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getOwnedNodes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;
  char v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getOwnedNodes");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getOwnedNodes");
  v26 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v28 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v28, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getOwnedNodes", 14, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getOwnedNodes(v17, v19, (uint64_t)&v28);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>,WebCore::ExceptionOr<std::optional<WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)this, v20, &v26, (uint64_t)&v28);
    if (v30 != -1)
      ((void (*)(char *, uint64_t *))off_1E32AAED0[v30])(&v27, &v29);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getParentNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  unsigned __int8 v26[16];
  int v27;
  JSC::VM *v28;
  char v29;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getParentNode");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getParentNode");
  v28 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v26 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v26, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getParentNode", 14, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getParentNode(v17, v19, (uint64_t)v26);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>((WebCore::DOMWrapperWorld **)this, v20, &v28, v26);
    if (v27 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E32AAEC0[v27])(&v29, v26);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsInspectorAuditAccessibilityObjectPrototypeFunction_getSelectedChildNodes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;
  char v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getSelectedChildNodes");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorAuditAccessibilityObject::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorAuditAccessibilityObject::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorAuditAccessibilityObject", "getSelectedChildNodes");
  v26 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v24);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v28 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v28, 0, "node", 5, "InspectorAuditAccessibilityObject", 34, a8, "getSelectedChildNodes", 22, "Node", 5);
    return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v11 + 40);
    WebCore::InspectorAuditAccessibilityObject::getSelectedChildNodes(v17, v19, (uint64_t)&v28);
    v21 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>,WebCore::ExceptionOr<std::optional<WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)this, v20, &v26, (uint64_t)&v28);
    if (v30 != -1)
      ((void (*)(char *, uint64_t *))off_1E32AAED0[v30])(&v27, &v29);
  }
  return (_BYTE *)v21;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore4NodeENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  WTF *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2[3];
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)a2;
    v5 = 8 * v2;
    v7 = a2;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      ++v4;
      v5 -= 8;
      a2 = v7;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore4NodeENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>(WebCore::DOMWrapperWorld **this, uint64_t a2, JSC::VM **a3, unsigned __int8 *a4)
{
  int v5;
  uint64_t v6;
  unint64_t Wrapper;
  uint64_t v9;
  JSC::JSGlobalObject *v11;
  WTF::StringImpl *v12;
  JSValue v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WebCore::Node *v22;
  uint64_t v23;
  unsigned int **v24;
  WebCore::Node *v25;
  WTF::StringImpl *v26;

  v5 = *((_DWORD *)a4 + 4);
  if (!v5)
  {
    v6 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    if (!v6)
      return 2;
    if (*(_BYTE *)(a2 + 3328))
    {
      v9 = *(_QWORD *)(v6 + 8);
      if (!v9)
        goto LABEL_24;
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
      if (!v14)
        goto LABEL_24;
      v15 = *(_DWORD *)(v14 - 8);
      v16 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = *(_QWORD *)(v14 + 16 * v19);
      if (v20 != v6)
      {
        v21 = 1;
        while (v20)
        {
          v19 = ((_DWORD)v19 + v21) & v15;
          v20 = *(_QWORD *)(v14 + 16 * v19);
          ++v21;
          if (v20 == v6)
            goto LABEL_23;
        }
        goto LABEL_24;
      }
LABEL_23:
      v9 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (!v9)
      {
LABEL_24:
        *(_DWORD *)(v6 + 24) += 2;
        v25 = (WebCore::Node *)v6;
        Wrapper = WebCore::createWrapper(this, (JSC::VM *)a2, (WebCore::JSDOMGlobalObject *)&v25, (WebCore::Document *)a4);
        v22 = v25;
        v25 = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v22, (void *)a2);
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
        goto LABEL_27;
      }
    }
    if ((*(_BYTE *)(v9 + 8) & 3) == 0)
    {
      Wrapper = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
      {
LABEL_27:
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
        return Wrapper;
      }
    }
    goto LABEL_24;
  }
  if (v5 == 1)
  {
    v11 = (JSC::JSGlobalObject *)*a4;
    LOBYTE(v25) = *a4;
    v12 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = 0;
    v26 = v12;
    if (!*((_QWORD *)*a3 + 2))
    {
      v13.super.isa = (Class)WebCore::createDOMException((JSC *)this, v11, (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException(*a3, (JSC::JSGlobalObject *)this, v13);
      v12 = v26;
    }
    v26 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    return 0;
  }
  v23 = std::__throw_bad_variant_access[abi:sn180100]();
  return (unint64_t)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v23, v24);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::toJS<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>,WebCore::ExceptionOr<std::optional<WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(uint64_t this, uint64_t a2, JSC::VM **a3, uint64_t a4)
{
  JSC *v4;
  int v5;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  JSC::JSGlobalObject *v17;
  WTF::StringImpl *v18;
  JSValue v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *v27;

  v4 = (JSC *)this;
  v5 = *(_DWORD *)(a4 + 32);
  if (v5)
  {
    if (v5 == 1)
    {
      v17 = (JSC::JSGlobalObject *)*(unsigned __int8 *)(a4 + 8);
      LOBYTE(v26) = *(_BYTE *)(a4 + 8);
      v18 = *(WTF::StringImpl **)(a4 + 16);
      *(_QWORD *)(a4 + 16) = 0;
      v27 = v18;
      if (!*((_QWORD *)*a3 + 2))
      {
        v19.super.isa = (Class)WebCore::createDOMException(v4, v17, (JSC::JSGlobalObject *)&v27);
        JSC::VM::throwException(*a3, v4, v19);
        v18 = v27;
      }
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      return 0;
    }
    this = std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    if (!*(_BYTE *)(a4 + 24))
      return 2;
    v7 = *(WTF **)(a4 + 8);
    v8 = *(unsigned int *)(a4 + 20);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v26 = 0;
    LODWORD(v27) = 0;
    HIDWORD(v27) = v8;
    if (!(_DWORD)v8)
    {
LABEL_7:
      v14 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Node>>>::convert<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul>((WebCore::DOMWrapperWorld **)v4, a2, (uint64_t)&v26, (WebCore::Document *)a4);
      if (HIDWORD(v27))
      {
        v20 = v26;
        v21 = 8 * HIDWORD(v27);
        do
        {
          v22 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v13);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
          v21 -= 8;
        }
        while (v21);
      }
      v15 = v26;
      if (v26)
      {
        v26 = 0;
        LODWORD(v27) = 0;
        WTF::fastFree(v15, v13);
      }
      if ((_DWORD)v8)
      {
        v23 = 8 * v8;
        v24 = v7;
        do
        {
          v25 = *(_QWORD *)v24;
          *(_QWORD *)v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v13);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
          v24 = (WTF *)((char *)v24 + 8);
          v23 -= 8;
        }
        while (v23);
      }
      if (v7)
        WTF::fastFree(v7, v13);
      return v14;
    }
    if (!(v8 >> 29))
    {
      v9 = 8 * v8;
      v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
      LODWORD(v27) = v8;
      v26 = v10;
      v11 = v7;
      do
      {
        v12 = *(_QWORD *)v11;
        v11 = (WTF *)((char *)v11 + 8);
        *(_DWORD *)(v12 + 24) += 2;
        *(_QWORD *)v10 = v12;
        v10 = (WTF *)((char *)v10 + 8);
        v9 -= 8;
      }
      while (v9);
      goto LABEL_7;
    }
  }
  __break(0xC471u);
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF6VectorINS9_3RefIN7WebCore4NodeENS9_12RawPtrTraitsISD_EENS9_21DefaultRefDerefTraitsISD_EEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEENSC_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v2)
    {
      v4 = *(uint64_t **)a2;
      v5 = 8 * v2;
      v7 = a2;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)a2);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        ++v4;
        v5 -= 8;
        a2 = v7;
      }
      while (v5);
    }
    v3 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF6VectorINS9_3RefIN7WebCore4NodeENS9_12RawPtrTraitsISD_EENS9_21DefaultRefDerefTraitsISD_EEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEENSC_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::InspectorAuditAccessibilityObject::ComputedProperties::~ComputedProperties(WebCore::InspectorAuditAccessibilityObject::ComputedProperties *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 104))
  {
    v5 = *((unsigned int *)this + 25);
    if ((_DWORD)v5)
    {
      v11 = (WTF::StringImpl **)*((_QWORD *)this + 11);
      v12 = 8 * v5;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    v6 = (WTF *)*((_QWORD *)this + 11);
    if (v6)
    {
      *((_QWORD *)this + 11) = 0;
      *((_DWORD *)this + 24) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore33InspectorAuditAccessibilityObject18ComputedPropertiesEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(int a1, WebCore::InspectorAuditAccessibilityObject::ComputedProperties *this)
{
  if (*((_BYTE *)this + 144))
    WebCore::InspectorAuditAccessibilityObject::ComputedProperties::~ComputedProperties(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore33InspectorAuditAccessibilityObject18ComputedPropertiesEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsInspectorAuditDOMObjectPrototypeFunction_hasEventListeners(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  Inspector::InspectorAuditAgent **v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  JSValue v31;
  WTF::StringImpl *v32;
  JSValue v33;
  WTF::StringImpl *v34;
  int hasExceptionsAfterHandlingTraps;
  WebCore *v36;
  JSC::JSGlobalObject *v37;
  JSC::CallFrame *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41[2];
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  v9 = *((_QWORD *)this + 7);
  v39 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v39, "InspectorAuditDOMObject", "hasEventListeners");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSInspectorAuditDOMObject::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSInspectorAuditDOMObject::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v39, "InspectorAuditDOMObject", "hasEventListeners");
  v16 = *((int *)a2 + 8);
  if ((_DWORD)v16 == 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v9, this, v31);
  }
  v17 = *(Inspector::InspectorAuditAgent ***)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v41 = v9;
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) < 0xF0u
    || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "node", 5, "InspectorAuditDOMObject", 24, a8, "hasEventListeners", 18, "Node", 5);
    return 0;
  }
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL || (v20 = *((_QWORD *)a2 + 7), v20 == 10))
  {
    v21 = 0;
    v45 = 0;
    goto LABEL_28;
  }
  *(_QWORD *)v41 = *((_QWORD *)a2 + 7);
  if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v41, this);
    goto LABEL_25;
  }
  v22 = *(WTF::StringImpl **)(v20 + 8);
  if ((v22 & 1) != 0)
  {
    v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, this);
    if (!v22)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v22)
LABEL_23:
    *(_DWORD *)v22 += 2;
LABEL_24:
  v46 = v22;
LABEL_25:
  if (*(_DWORD *)(v9 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9);
    v21 = v46;
    if (hasExceptionsAfterHandlingTraps)
    {
      v45 = 1;
      v46 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v34);
        else
          *(_DWORD *)v21 -= 2;
      }
      v26 = 0;
      v28 = 1;
      goto LABEL_37;
    }
  }
  else
  {
    v21 = v46;
  }
  v45 = 0;
LABEL_28:
  v44 = 0;
  v40 = v21;
  WebCore::InspectorAuditDOMObject::hasEventListeners(v17, v19, &v40, (uint64_t)v41);
  v23 = v43;
  if (!v43)
  {
    if (LOBYTE(v41[0]))
      v24 = 7;
    else
      v24 = 6;
LABEL_32:
    ((void (**)(WTF::StringImpl **, int *))off_1E32AA090)[v23](&v46, v41);
    v26 = v24;
LABEL_33:
    v43 = -1;
    v27 = v40;
    v40 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v25);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = 0;
LABEL_37:
    ((void (*)(int *, uint64_t *))off_1E32A90E0[v28])(v41, &v44);
    return (_BYTE *)v26;
  }
  if (v43 == 1)
  {
    v25 = (WTF::StringImpl *)LOBYTE(v41[0]);
    LOBYTE(v46) = v41[0];
    v32 = v42;
    v42 = 0;
    v47 = v32;
    if (!*(_QWORD *)(v9 + 16))
    {
      v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v41[0]), (JSC::JSGlobalObject *)&v47);
      JSC::VM::throwException((JSC::VM *)v9, this, v33);
      v32 = v47;
    }
    v47 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v25);
      else
        *(_DWORD *)v32 -= 2;
    }
    v24 = 0;
    v26 = 0;
    v23 = v43;
    if (v43 == -1)
      goto LABEL_33;
    goto LABEL_32;
  }
  v36 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsInspectorAuditDOMObjectPrototypeFunction_simulateUserInteraction(v36, v37, v38);
}

uint64_t WebCore::jsInspectorAuditDOMObjectPrototypeFunction_simulateUserInteraction(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::JSVoidCallback *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  int v32;
  WebCore::JSVoidCallback *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "InspectorAuditDOMObject", "simulateUserInteraction");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSInspectorAuditDOMObject::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSInspectorAuditDOMObject::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "InspectorAuditDOMObject", "simulateUserInteraction");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CDA2FCLL);
  }
  v15 = *((_QWORD *)a2 + 6);
  v16 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v33 = (WebCore::JSVoidCallback *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) != 0
    || (v17 = *(unsigned __int8 *)(v15 + 5), v17 < 0x17)
    || (v17 & 0xFE) != 0x1A
    && ((*(_BYTE *)(v15 + 6) & 4) == 0
     || (v29 = v13,
         (*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v35, v15), v13 = v29, !(_BYTE)v35)))
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v33, 0, "callback", 9, "InspectorAuditDOMObject", 24, v14, "simulateUserInteraction", 24);
    v20 = 0;
    v21 = 1;
    v32 = 1;
    goto LABEL_23;
  }
  v18 = v13 - 192;
  v19 = (WebCore::JSVoidCallback *)WTF::fastMalloc((WTF *)0x20);
  v32 = 0;
  v31 = 0;
  v33 = WebCore::JSVoidCallback::JSVoidCallback(v19, v15, v16);
  WebCore::InspectorAuditDOMObject::simulateUserInteraction(v12, v18, &v33, &v35);
  if (*((_DWORD *)v19 + 4) == 1)
    (*(void (**)(WebCore::JSVoidCallback *))(*(_QWORD *)v19 + 16))(v19);
  else
    --*((_DWORD *)v19 + 4);
  if (v37)
  {
    v25 = (WTF::StringImpl *)v35;
    LOBYTE(v33) = v35;
    v26 = v36;
    v36 = 0;
    v34 = v26;
    if (!*((_QWORD *)v4 + 2))
    {
      v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v35, (JSC::JSGlobalObject *)&v34);
      JSC::VM::throwException(v4, this, v27);
      v26 = v34;
    }
    v34 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (v37)
    {
      v28 = v36;
      v36 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 != 2)
        {
          v20 = 0;
          *(_DWORD *)v28 -= 2;
          goto LABEL_22;
        }
        WTF::StringImpl::destroy(v28, v25);
      }
    }
    v20 = 0;
    goto LABEL_22;
  }
  v20 = 10;
LABEL_22:
  v21 = 0;
LABEL_23:
  ((void (*)(uint64_t *, uint64_t *))off_1E32AAF40[v21])(&v35, &v31);
  return v20;
}

uint64_t WebCore::jsInspectorAuditResourcesObjectPrototypeFunction_getResources(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  Inspector::InspectorAuditAgent **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  JSValue v53;
  void *v54;
  JSC::VM *v55;
  uint64_t v56;
  uint64_t *v57;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSValue v61;
  _QWORD *v62;
  WebCore *v63;
  JSC::JSGlobalObject *v64;
  JSC::CallFrame *v65;
  JSC::VM *v66;
  int v67[2];
  WTF::StringImpl *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  char v73[8];
  WTF::StringImpl *v74;
  WTF *v75;
  _OWORD v76[4];
  uint64_t v77;
  JSC::VM *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  int v81;
  int v82;
  uint64_t v83;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v66 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v66, "InspectorAuditResourcesObject", "getResources");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorAuditResourcesObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorAuditResourcesObject::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v66, "InspectorAuditResourcesObject", "getResources");
  v11 = *(Inspector::InspectorAuditAgent ***)(v4 + 24);
  v12 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  if (*(_BYTE *)(v12 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CDAA8CLL);
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::InspectorAuditResourcesObject::getResources(v11, (WebCore::Document *)(v12 - 192), (uint64_t)v67);
  if (!v69)
  {
    v14 = *(_QWORD *)v67;
    v70 = *(_QWORD *)v67;
    v15 = (int)v68;
    v16 = HIDWORD(v68);
    *(_QWORD *)v67 = 0;
    v68 = 0;
    v71 = v15;
    v72 = v16;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
    v78 = v17;
    v73[0] = 0;
    v74 = (WTF::StringImpl *)0x800000000;
    v75 = (WTF *)((char *)v76 + 8);
    memset(v76, 0, sizeof(v76));
    v77 = 0;
    if (v16 >= 9)
    {
      v73[0] = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v74) == 1;
      goto LABEL_17;
    }
    if ((_DWORD)v16)
    {
LABEL_17:
      v18 = 24 * v16;
      v19 = (uint64_t *)(v14 + 8);
      do
      {
        v20 = *((_QWORD *)this + 7);
        v21 = JSC::StructureCache::emptyObjectStructureForPrototype();
        v22 = 8 * *(unsigned __int8 *)(v21 + 14);
        v23 = JSC::allocateCell<JSC::JSFinalObject>(v20, v22 + 16);
        v24 = *(_DWORD *)(v21 + 8);
        *(_DWORD *)v23 = v21 >> 4;
        *(_DWORD *)(v23 + 4) = v24;
        *(_QWORD *)(v23 + 8) = 0;
        bzero((void *)(v23 + 16), v22);
        if (*(_BYTE *)(v20 + 755))
          __dmb(0xAu);
        v25 = *(v19 - 1);
        if (!v25)
          goto LABEL_30;
        v26 = *((_QWORD *)this + 7);
        v27 = *(_DWORD *)(v25 + 4);
        if (v27)
        {
          if (v27 != 1)
            goto LABEL_23;
          v44 = *(unsigned __int8 **)(v25 + 8);
          if ((*(_BYTE *)(v25 + 16) & 4) != 0)
          {
            v45 = *v44;
          }
          else
          {
            v50 = *(unsigned __int16 *)v44;
            if (v50 > 0xFF)
            {
LABEL_23:
              v28 = *(_QWORD *)(v26 + 64760);
              if (!v28 || v25 != *(_QWORD *)(v28 + 8))
                v28 = JSC::jsStringWithCacheSlowCase();
              goto LABEL_26;
            }
            v45 = v50;
          }
          v28 = *(_QWORD *)(v26 + 8 * v45 + 42216);
        }
        else
        {
          v28 = *(_QWORD *)(v26 + 41968);
        }
LABEL_26:
        if (*(_DWORD *)(v20 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) != 0)
          goto LABEL_87;
        WTF::AtomStringImpl::addLiteral();
        v29 = v79;
        v79 = 0;
        v80 = v23;
        v81 = -1;
        v82 = 0x1000000;
        v83 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v23, (JSC::VM *)v20, (unint64_t)v29, v28, 0, (uint64_t)&v79);
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v30);
          else
            *(_DWORD *)v29 -= 2;
        }
LABEL_30:
        v31 = v19[1];
        if (!v31)
          goto LABEL_40;
        v32 = *((_QWORD *)this + 7);
        v33 = *(_DWORD *)(v31 + 4);
        if (v33)
        {
          if (v33 == 1)
          {
            v46 = *(unsigned __int8 **)(v31 + 8);
            if ((*(_BYTE *)(v31 + 16) & 4) != 0)
            {
              v47 = *v46;
LABEL_67:
              v34 = *(_QWORD *)(v32 + 8 * v47 + 42216);
              goto LABEL_36;
            }
            v51 = *(unsigned __int16 *)v46;
            if (v51 <= 0xFF)
            {
              v47 = v51;
              goto LABEL_67;
            }
          }
          v34 = *(_QWORD *)(v32 + 64760);
          if (!v34 || v31 != *(_QWORD *)(v34 + 8))
            v34 = JSC::jsStringWithCacheSlowCase();
        }
        else
        {
          v34 = *(_QWORD *)(v32 + 41968);
        }
LABEL_36:
        if (!*(_DWORD *)(v20 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) == 0)
        {
          WTF::AtomStringImpl::addLiteral();
          v35 = v79;
          v79 = 0;
          v80 = v23;
          v81 = -1;
          v82 = 0x1000000;
          v83 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v23, (JSC::VM *)v20, (unint64_t)v35, v34, 0, (uint64_t)&v79);
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v36);
            else
              *(_DWORD *)v35 -= 2;
          }
LABEL_40:
          v37 = *v19;
          if (!*v19)
            goto LABEL_50;
          v38 = *((_QWORD *)this + 7);
          v39 = *(_DWORD *)(v37 + 4);
          if (v39)
          {
            if (v39 != 1)
              goto LABEL_43;
            v48 = *(unsigned __int8 **)(v37 + 8);
            if ((*(_BYTE *)(v37 + 16) & 4) != 0)
            {
              v49 = *v48;
              goto LABEL_70;
            }
            v52 = *(unsigned __int16 *)v48;
            if (v52 > 0xFF)
            {
LABEL_43:
              v40 = *(_QWORD *)(v38 + 64760);
              if (!v40 || v37 != *(_QWORD *)(v40 + 8))
                v40 = JSC::jsStringWithCacheSlowCase();
            }
            else
            {
              v49 = v52;
LABEL_70:
              v40 = *(_QWORD *)(v38 + 8 * v49 + 42216);
            }
          }
          else
          {
            v40 = *(_QWORD *)(v38 + 41968);
          }
          if (!*(_DWORD *)(v20 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) == 0)
          {
            WTF::AtomStringImpl::addLiteral();
            v41 = v79;
            v79 = 0;
            v80 = v23;
            v81 = -1;
            v82 = 0x1000000;
            v83 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v23, (JSC::VM *)v20, (unint64_t)v41, v40, 0, (uint64_t)&v79);
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v42);
              else
                *(_DWORD *)v41 -= 2;
            }
            goto LABEL_50;
          }
        }
LABEL_87:
        v23 = 0;
LABEL_50:
        if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
          goto LABEL_113;
        v43 = (int)v74;
        if ((_DWORD)v74 == HIDWORD(v74) || v75 != (WTF *)((char *)v76 + 8) && v75)
        {
          v53.super.isa = (Class)v23;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v74, v53) == 1)
            v73[0] = 1;
        }
        else
        {
          *((_QWORD *)v75 + v74) = v23;
          LODWORD(v74) = v43 + 1;
        }
        v19 += 3;
        v18 -= 24;
      }
      while (v18);
    }
    if (v73[0])
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v79 = v75;
      LODWORD(v80) = (_DWORD)v74;
      v55 = *(JSC::VM **)(v13 + 56);
      if (!*((_DWORD *)v55 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) == 0)
      {
        v56 = JSC::constructArray();
LABEL_91:
        v57 = *(uint64_t **)&v76[0];
        if (*(_QWORD *)&v76[0])
        {
          v79 = (WTF::StringImpl *)&v74;
          v62 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v76[0], (uint64_t *)&v79);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v57, v62);
        }
        if (v75 != (WTF *)((char *)v76 + 8) && v75)
          WTF::fastFree(v75, v54);
        WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v70, (WTF::StringImpl *)v54);
LABEL_95:
        if (v69 != -1)
          ((void (*)(char *, int *))off_1E32AAFA0[v69])(v73, v67);
        return v56;
      }
    }
LABEL_113:
    v56 = 0;
    goto LABEL_91;
  }
  if (v69 == 1)
  {
    v59 = (WTF::StringImpl *)LOBYTE(v67[0]);
    v73[0] = v67[0];
    v60 = v68;
    v68 = 0;
    v74 = v60;
    if (!*((_QWORD *)v5 + 2))
    {
      v61.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v67[0]), (JSC::JSGlobalObject *)&v74);
      JSC::VM::throwException(v5, this, v61);
      v60 = v74;
    }
    v74 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v59);
      else
        *(_DWORD *)v60 -= 2;
    }
    v56 = 0;
    goto LABEL_95;
  }
  v63 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsInspectorAuditResourcesObjectPrototypeFunction_getResourceContent(v63, v64, v65);
}

unint64_t WebCore::jsInspectorAuditResourcesObjectPrototypeFunction_getResourceContent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  Inspector::InspectorAuditAgent **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  JSValue v40;
  WTF::StringImpl *v41;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v43;
  JSValue v44;
  unsigned int *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  int v57;
  uint64_t v58;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v47, "InspectorAuditResourcesObject", "getResourceContent");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSInspectorAuditResourcesObject::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSInspectorAuditResourcesObject::s_info && v9 != 0);
  }
  if (!v8)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v47, "InspectorAuditResourcesObject", "getResourceContent");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v40);
  }
  v12 = *(Inspector::InspectorAuditAgent ***)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CDAFD4);
  }
  v15 = *((_QWORD *)a2 + 6);
  v54 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(WTF::StringImpl **)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v17)
        goto LABEL_20;
    }
    else if (!v17)
    {
LABEL_20:
      v49 = v17;
      goto LABEL_21;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_20;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, this);
LABEL_21:
  if (*((_DWORD *)v16 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    v18 = v49;
    if (hasExceptionsAfterHandlingTraps)
    {
      v53 = 1;
      v49 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v41);
        else
          *(_DWORD *)v18 -= 2;
      }
      v24 = 0;
      v34 = 1;
      goto LABEL_51;
    }
  }
  else
  {
    v18 = v49;
  }
  v53 = 0;
  v52 = 0;
  v48 = v18;
  WebCore::InspectorAuditResourcesObject::getResourceContent(v12, (WebCore::Document *)(v14 - 192), &v48, (uint64_t)&v49);
  if (!v51)
  {
    v19 = v49;
    v49 = 0;
    v20 = v50;
    v21 = *((_QWORD *)this + 7);
    v22 = JSC::StructureCache::emptyObjectStructureForPrototype();
    v23 = 8 * *(unsigned __int8 *)(v22 + 14);
    v24 = JSC::allocateCell<JSC::JSFinalObject>(v21, v23 + 16);
    v25 = *(_DWORD *)(v22 + 8);
    *(_DWORD *)v24 = v22 >> 4;
    *(_DWORD *)(v24 + 4) = v25;
    *(_QWORD *)(v24 + 8) = 0;
    bzero((void *)(v24 + 16), v23);
    if (*(_BYTE *)(v21 + 755))
      __dmb(0xAu);
    if (v20)
      v26 = 7;
    else
      v26 = 6;
    if (*(_DWORD *)(v21 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21) & 1) != 0)
    {
      v24 = 0;
      if (!v19)
        goto LABEL_45;
LABEL_43:
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v28);
      else
        *(_DWORD *)v19 -= 2;
      goto LABEL_45;
    }
    WTF::AtomStringImpl::addLiteral();
    v27 = v54;
    v54 = 0;
    v55 = (WTF::StringImpl *)v24;
    v56 = -1;
    v57 = 0x1000000;
    v58 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v24, (JSC::VM *)v21, (unint64_t)v27, v26, 0, (uint64_t)&v54);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::destroy(v27, v28);
        if (v19)
        {
LABEL_34:
          v29 = *((_QWORD *)this + 7);
          v30 = *((_DWORD *)v19 + 1);
          if (v30)
          {
            if (v30 != 1)
            {
LABEL_36:
              v31 = *(_QWORD *)(v29 + 64760);
              if (!v31 || v19 != *(WTF::StringImpl **)(v31 + 8))
                v31 = JSC::jsStringWithCacheSlowCase();
              goto LABEL_39;
            }
            v36 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
            if ((*((_BYTE *)v19 + 16) & 4) != 0)
            {
              v37 = *v36;
            }
            else
            {
              v38 = *(unsigned __int16 *)v36;
              if (v38 > 0xFF)
                goto LABEL_36;
              v37 = v38;
            }
            v31 = *(_QWORD *)(v29 + 8 * v37 + 42216);
          }
          else
          {
            v31 = *(_QWORD *)(v29 + 41968);
          }
LABEL_39:
          if (*(_DWORD *)(v21 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21) & 1) != 0)
          {
            v24 = 0;
          }
          else
          {
            WTF::AtomStringImpl::addLiteral();
            v32 = v54;
            v54 = 0;
            v55 = (WTF::StringImpl *)v24;
            v56 = -1;
            v57 = 0x1000000;
            v58 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v24, (JSC::VM *)v21, (unint64_t)v32, v31, 0, (uint64_t)&v54);
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v28);
              else
                *(_DWORD *)v32 -= 2;
            }
          }
          goto LABEL_43;
        }
LABEL_45:
        if (v51 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AAFB0[v51])(&v54, &v49);
        v51 = -1;
        v33 = v48;
        v48 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v28);
          else
            *(_DWORD *)v33 -= 2;
        }
        v34 = 0;
LABEL_51:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v34])(&v54, &v52);
        return v24;
      }
      *(_DWORD *)v27 -= 2;
    }
    if (v19)
      goto LABEL_34;
    goto LABEL_45;
  }
  if (v51 == 1)
  {
    v28 = (WTF::StringImpl *)v49;
    LOBYTE(v54) = (_BYTE)v49;
    v43 = v50;
    v50 = 0;
    v55 = v43;
    if (!*((_QWORD *)v4 + 2))
    {
      v44.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v49, (JSC::JSGlobalObject *)&v55);
      JSC::VM::throwException(v4, this, v44);
      v43 = v55;
    }
    v55 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v28);
      else
        *(_DWORD *)v43 -= 2;
    }
    v24 = 0;
    goto LABEL_45;
  }
  v45 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
  return (unint64_t)WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v45, v46);
}

unsigned int *WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore29InspectorAuditResourcesObject8ResourceELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, (WTF::StringImpl *)a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore29InspectorAuditResourcesObject8ResourceELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29InspectorAuditResourcesObject15ResourceContentENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29InspectorAuditResourcesObject15ResourceContentENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      if (*((_BYTE *)v3 + 48))
      {
        v4 = *((_DWORD *)v3 + 11);
        if (v4)
          WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(*((_QWORD *)v3 + 4), *((_QWORD *)v3 + 4) + 56 * v4);
        v5 = (WTF *)*((_QWORD *)v3 + 4);
        if (v5)
        {
          *((_QWORD *)v3 + 4) = 0;
          *((_DWORD *)v3 + 10) = 0;
          WTF::fastFree(v5, a2);
        }
      }
      v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 56);
    }
    while (v3 != a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore21InspectorFrontendHost15ContextMenuItemELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
    WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 56 * v3));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_loaded(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "loaded");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "loaded");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_closeWindow(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "InspectorFrontendHost", "closeWindow");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "InspectorFrontendHost", "closeWindow");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 144))(v10);
    v12 = *(unsigned int **)(v9 + 16);
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    if (v12)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (v13 == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
    }
  }
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_reopen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "reopen");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "reopen");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 152))(v9);
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_reset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *((_QWORD *)a2 + 5);
  v13 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "InspectorFrontendHost", "reset");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "InspectorFrontendHost", "reset");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 160))(v10);
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 152))(v11);
  }
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_bringToFront(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "bringToFront");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "bringToFront");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9);
  return 10;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_inspectedURLChanged(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSValue v20;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "inspectedURLChanged");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "inspectedURLChanged");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v26 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v25 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v25;
    if (hasExceptionsAfterHandlingTraps)
    {
      v24 = 1;
      v25 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v16 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v14 = v25;
  }
  v24 = 0;
  v23 = 0;
  v26 = v14;
  v15 = *(_QWORD *)(v11 + 8);
  if (v15)
  {
    (*(void (**)(_QWORD, WTF::StringImpl **, JSC::CallFrame *))(*(_QWORD *)v15 + 288))(*(_QWORD *)(v11 + 8), &v26, a3);
    v14 = v26;
  }
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = 0;
  v17 = 10;
LABEL_27:
  ((void (*)(WTF::StringImpl **, uint64_t *, JSC::CallFrame *))off_1E32A90E0[v16])(&v26, &v23, a3);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_showCertificate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::InspectorFrontendHost *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  JSValue v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "showCertificate");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "showCertificate");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(WebCore::InspectorFrontendHost **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v26 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v25 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    v14 = v25;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      v24 = 1;
      v25 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v21);
        else
          *(_DWORD *)v14 -= 2;
      }
      v16 = 0;
      v17 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v25;
  }
  v24 = 0;
  v23 = 0;
  v26 = v14;
  if (WebCore::InspectorFrontendHost::showCertificate(v11, (const WTF::String *)&v26))
    v16 = 7;
  else
    v16 = 6;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v17 = 0;
LABEL_28:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v17])(&v26, &v23);
  return (_BYTE *)v16;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_setZoomFactor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Page *v17;
  BOOL v18;
  JSValue v20;
  int v21;
  double v22;
  JSC::VM *v23;
  unint64_t v24;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v23, "InspectorFrontendHost", "setZoomFactor");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v23, "InspectorFrontendHost", "setZoomFactor");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v24 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v24, this);
    v13 = v22;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    *(float *)&v21 = -INFINITY;
  }
  else
  {
    if (v13 <= 3.40282347e38)
    {
      v14 = v13;
      goto LABEL_20;
    }
    *(float *)&v21 = INFINITY;
  }
  v14 = *(float *)&v21;
LABEL_20:
  v15 = *(_QWORD *)(v11 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(WebCore::Page **)(v16 + 160);
      if (v17)
        v18 = *((_BYTE *)v17 + 144) == 0;
      else
        v18 = 0;
      if (v18)
        WebCore::LocalFrame::setPageAndTextZoomFactors(v17, v14, 1.0);
    }
  }
  return 10;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_zoomFactor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  double v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "InspectorFrontendHost", "zoomFactor");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "InspectorFrontendHost", "zoomFactor");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  v10 = 1.0;
  if (v9)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 160);
      if (v12 && *(_BYTE *)(v12 + 144) == 0)
        v10 = *(float *)(v12 + 592);
    }
  }
  v14 = v10;
  if (COERCE__INT64(fabs(v10)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v15 = (int)v10, (double)(int)v15 == v14)
    && ((_DWORD)v15 || (LODWORD(v10) & 0x80000000) == 0))
  {
    return (_BYTE *)(v15 | 0xFFFE000000000000);
  }
  else
  {
    return (_BYTE *)(*(_QWORD *)&v14 + 0x2000000000000);
  }
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_setForcedAppearance(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  JSValue v20;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v22;
  JSC::VM *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "InspectorFrontendHost", "setForcedAppearance");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "InspectorFrontendHost", "setForcedAppearance");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v27 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v26 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v26;
    if (hasExceptionsAfterHandlingTraps)
    {
      v25 = 1;
      v26 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v16 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = v26;
  }
  v25 = 0;
  v24 = 0;
  v27 = v14;
  WebCore::InspectorFrontendHost::setForcedAppearance(v11, &v27);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = 0;
  v17 = 10;
LABEL_25:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v16])(&v27, &v24);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_userInterfaceLayoutDirection(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)a2 + 5);
  v19 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "InspectorFrontendHost", "userInterfaceLayoutDirection");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSInspectorFrontendHost::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "InspectorFrontendHost", "userInterfaceLayoutDirection");
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = *((_QWORD *)this + 7);
  v12 = v20;
  if (!v20 || (v13 = *((_DWORD *)v20 + 1)) == 0)
  {
    v14 = *(_QWORD *)(v11 + 41968);
LABEL_20:
    v20 = 0;
    if (!v12)
      return (_BYTE *)v14;
    goto LABEL_27;
  }
  if (v13 != 1)
    goto LABEL_17;
  v15 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
  if ((*((_BYTE *)v20 + 16) & 4) != 0)
  {
    v16 = *v15;
LABEL_25:
    v14 = *(_QWORD *)(v11 + 8 * v16 + 42216);
    goto LABEL_26;
  }
  v18 = *(unsigned __int16 *)v15;
  if (v18 <= 0xFF)
  {
    v16 = v18;
    goto LABEL_25;
  }
LABEL_17:
  v14 = *(_QWORD *)(v11 + 64760);
  if (!v14 || v20 != *(WTF::StringImpl **)(v14 + 8))
  {
    v14 = JSC::jsStringWithCacheSlowCase();
    v12 = v20;
    goto LABEL_20;
  }
LABEL_26:
  v20 = 0;
LABEL_27:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v12);
  else
    *(_DWORD *)v12 -= 2;
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_supportsDockSide(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSValue v20;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "supportsDockSide");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "supportsDockSide");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v26 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v25 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v25;
    if (hasExceptionsAfterHandlingTraps)
    {
      v24 = 1;
      v25 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v16 = 0;
      v17 = 1;
      goto LABEL_39;
    }
  }
  else
  {
    v14 = v25;
  }
  v24 = 0;
  v23 = 0;
  if (!*(_QWORD *)(v11 + 8))
  {
    v16 = 6;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](v14, "undocked", 8) & 1) != 0)
  {
    v15 = 0;
  }
  else if ((MEMORY[0x19AEA53F4](v14, "right", 5) & 1) != 0)
  {
    v15 = 1;
  }
  else if ((MEMORY[0x19AEA53F4](v14, "left", 4) & 1) != 0)
  {
    v15 = 2;
  }
  else
  {
    v16 = 6;
    if (!MEMORY[0x19AEA53F4](v14, "bottom", 6))
      goto LABEL_36;
    v15 = 3;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 184))(*(_QWORD *)(v11 + 8), v15))
    v16 = 7;
  else
    v16 = 6;
LABEL_36:
  if (!v14)
  {
LABEL_42:
    v17 = 0;
    goto LABEL_39;
  }
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, a2);
    goto LABEL_42;
  }
  v17 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_39:
  ((void (*)(uint64_t *, uint64_t *, JSC::CallFrame *))off_1E32A90E0[v17])(&v26, &v23, a3);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_requestSetDockSide(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSValue v20;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "requestSetDockSide");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "requestSetDockSide");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v26 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v25 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v25;
    if (hasExceptionsAfterHandlingTraps)
    {
      v24 = 1;
      v25 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v16 = 1;
      goto LABEL_37;
    }
  }
  else
  {
    v14 = v25;
  }
  v24 = 0;
  v23 = 0;
  if (*(_QWORD *)(v11 + 8))
  {
    if ((MEMORY[0x19AEA53F4](v14, "undocked", 8) & 1) != 0)
    {
      v15 = 0;
    }
    else if ((MEMORY[0x19AEA53F4](v14, "right", 5) & 1) != 0)
    {
      v15 = 1;
    }
    else if ((MEMORY[0x19AEA53F4](v14, "left", 4) & 1) != 0)
    {
      v15 = 2;
    }
    else
    {
      if (!MEMORY[0x19AEA53F4](v14, "bottom", 6))
        goto LABEL_33;
      v15 = 3;
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 192))(*(_QWORD *)(v11 + 8), v15);
  }
LABEL_33:
  if (!v14)
  {
LABEL_40:
    v16 = 0;
    goto LABEL_36;
  }
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, a2);
    goto LABEL_40;
  }
  v16 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_36:
  v17 = 10;
LABEL_37:
  ((void (*)(uint64_t *, uint64_t *, JSC::CallFrame *))off_1E32A90E0[v16])(&v26, &v23, a3);
  return (_BYTE *)v17;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_setAttachedWindowHeight(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "InspectorFrontendHost", "setAttachedWindowHeight");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "InspectorFrontendHost", "setAttachedWindowHeight");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 200))(v12, v16[0]);
      return 10;
    }
  }
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_setAttachedWindowWidth(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "InspectorFrontendHost", "setAttachedWindowWidth");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "InspectorFrontendHost", "setAttachedWindowWidth");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 208))(v12, v16[0]);
      return 10;
    }
  }
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_setSheetRect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  float v19;
  uint64_t v20;
  JSValue v22;
  int v23;
  int v24;
  double v25;
  double v26;
  JSC::VM *v27;
  _DWORD v28[2];
  _DWORD v29[2];
  unint64_t v30;
  float v31;
  float v32;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "InspectorFrontendHost", "setSheetRect");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSInspectorFrontendHost::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "InspectorFrontendHost", "setSheetRect");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v22);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v30 = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v14 = v25;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v14 < -3.40282347e38)
  {
    v23 = -8388608;
  }
  else
  {
    if (v14 <= 3.40282347e38)
    {
      v15 = v14;
      goto LABEL_20;
    }
    v23 = 2139095040;
  }
  LODWORD(v15) = v23;
LABEL_20:
  v16 = *((_QWORD *)a2 + 7);
  v30 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
  }
  else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
    v18 = v26;
  }
  else
  {
    *(_QWORD *)&v18 = v16 - 0x2000000000000;
  }
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    v24 = -8388608;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v19 = v18;
      goto LABEL_27;
    }
    v24 = 2139095040;
  }
  LODWORD(v19) = v24;
LABEL_27:
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v29);
  if (v29[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v28);
  if (v28[1])
    return 0;
  v20 = *(_QWORD *)(v12 + 8);
  if (v20)
  {
    v30 = __PAIR64__(LODWORD(v19), LODWORD(v15));
    v31 = (float)v29[0];
    v32 = (float)v28[0];
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v20 + 216))(v20, &v30);
  }
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_startWindowDrag(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "startWindowDrag");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "startWindowDrag");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_moveWindowBy(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, double a4, __n128 a5)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  uint64_t v21;
  JSValue v23;
  int v24;
  unsigned __int32 v25;
  double v26;
  double v27;
  JSC::VM *v28;
  unint64_t v29;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v6;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "InspectorFrontendHost", "moveWindowBy");
  v9 = *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSInspectorFrontendHost::s_info && v11 != 0);
  }
  if (!v10)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "InspectorFrontendHost", "moveWindowBy");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v6, this, v23);
  }
  v14 = *(_QWORD *)(v7 + 24);
  v15 = *((_QWORD *)a2 + 6);
  v29 = v15;
  if (v15 >= 0xFFFE000000000000)
  {
    v16 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v29, this);
    v16 = v26;
  }
  else
  {
    *(_QWORD *)&v16 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    return 0;
  if (v16 < -3.40282347e38)
  {
    *(float *)&v24 = -INFINITY;
  }
  else
  {
    if (v16 <= 3.40282347e38)
    {
      v17 = v16;
      goto LABEL_20;
    }
    *(float *)&v24 = INFINITY;
  }
  v17 = *(float *)&v24;
LABEL_20:
  v18 = *((_QWORD *)a2 + 7);
  v29 = v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v18 >= 0xFFFE000000000000)
  {
    v20 = (double)(int)v18;
  }
  else if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v29, this);
    v20 = v27;
  }
  else
  {
    *(_QWORD *)&v20 = v18 - 0x2000000000000;
  }
  if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
    return 0;
  if (v20 < -3.40282347e38)
  {
    v25 = -8388608;
LABEL_43:
    a5.n128_u32[0] = v25;
    goto LABEL_27;
  }
  if (v20 > 3.40282347e38)
  {
    v25 = 2139095040;
    goto LABEL_43;
  }
  a5.n128_f32[0] = v20;
LABEL_27:
  v21 = *(_QWORD *)(v14 + 8);
  if (v21)
    (*(void (**)(uint64_t, float, __n128))(*(_QWORD *)v21 + 56))(v21, v17, a5);
  return 10;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_copyText(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::InspectorFrontendHost *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "InspectorFrontendHost", "copyText");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "InspectorFrontendHost", "copyText");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(WebCore::InspectorFrontendHost **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v28 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v17 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  v28 = v14;
  WebCore::InspectorFrontendHost::copyText(v11, (const WTF::String *)&v28);
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = 0;
  v18 = 10;
LABEL_25:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v17])(&v28, &v25);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_killText(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::InspectorFrontendHost *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v22;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorFrontendHost", "killText");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorFrontendHost", "killText");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v11 = *(WebCore::InspectorFrontendHost **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v29 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v28 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v28;
    if (hasExceptionsAfterHandlingTraps)
    {
      v27 = 1;
      v28 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v24);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v19 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v28;
  }
  v26 = v14;
  v27 = 0;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!*((_DWORD *)v15 + 20))
    goto LABEL_22;
  if ((JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
  {
    v15 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_22:
    if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    {
      v18 = 0;
    }
    else
    {
      v26 = 0;
      v29 = v14;
      WebCore::InspectorFrontendHost::killText(v11, (const WTF::String *)&v29);
      v17 = v29;
      v29 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = 10;
    }
    goto LABEL_27;
  }
  v18 = 0;
LABEL_27:
  v19 = 0;
LABEL_28:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v19])(&v29, &v26);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_openURLExternally(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "InspectorFrontendHost", "openURLExternally");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "InspectorFrontendHost", "openURLExternally");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v28 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v17 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  v28 = v14;
  if ((WTF::protocolIsJavaScript() & 1) == 0)
  {
    v16 = *(_QWORD *)(v11 + 8);
    if (v16)
    {
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 224))(v16, &v28);
      v14 = v28;
    }
  }
  v28 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v17 = 0;
  v18 = 10;
LABEL_28:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v17])(&v28, &v25);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_revealFileExternally(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "InspectorFrontendHost", "revealFileExternally");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "InspectorFrontendHost", "revealFileExternally");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v28 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v17 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  v28 = v14;
  if (WTF::protocolIs())
  {
    v16 = *(_QWORD *)(v11 + 8);
    if (v16)
    {
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 232))(v16, &v28);
      v14 = v28;
    }
  }
  v28 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v17 = 0;
  v18 = 10;
LABEL_28:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v17])(&v28, &v25);
  return (_BYTE *)v18;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_canSave(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  int v21;
  int v23;
  __int32 v24;
  char **v26;
  unsigned int v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint64_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  JSValue v34;
  JSC::VM *v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "InspectorFrontendHost", "canSave");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSInspectorFrontendHost::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "InspectorFrontendHost", "canSave");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v34);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v37 = v9;
  v39 = v17;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 2)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, this);
      if (!v18)
      {
LABEL_18:
        v38 = v18;
        if (v18)
          goto LABEL_19;
LABEL_44:
        v27 = 0;
        goto LABEL_52;
      }
    }
    else if (!v18)
    {
      goto LABEL_18;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v39, this);
  v18 = v38;
  if (!v38)
    goto LABEL_44;
LABEL_19:
  v19 = *(_DWORD *)(v18 + 16);
  v20 = *(const char **)(v18 + 8);
  v21 = *(_DWORD *)(v18 + 4);
  if (v20 != "file-variants" && v21 == 13)
  {
    if ((v19 & 4) != 0)
    {
      if (*v20 != 102 || *(_QWORD *)(v20 + 1) != 0x697261762D656C69 || *(_QWORD *)(v20 + 5) != 0x73746E6169726176)
        goto LABEL_28;
    }
    else
    {
      if (*(_WORD *)v20 != 102)
        goto LABEL_28;
      v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968C0150);
      v28.i16[0] = vminvq_u16(v28);
      v24 = v28.i32[0];
      if (!v28.i32[0])
        goto LABEL_70;
      v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 10), (int16x8_t)xmmword_1968C0160);
      v29.i16[0] = vminvq_u16(v29);
      v23 = v29.i32[0];
      if (!v29.i32[0])
        goto LABEL_29;
    }
LABEL_48:
    v26 = &WebCore::parseEnumerationFromString<WebCore::InspectorFrontendClient::SaveMode>(WTF::String const&)::mappings;
    goto LABEL_49;
  }
  if (v20 == "file-variants" && v21 == 13)
    goto LABEL_48;
  if (v20 == "single-file" || v21 != 11)
  {
    if (v21 == 11 && v20 == "single-file")
      goto LABEL_40;
    goto LABEL_28;
  }
  if ((v19 & 4) != 0)
  {
    if (*v20 == 115 && *(_QWORD *)(v20 + 1) == 0x69662D656C676E69 && *(_QWORD *)(v20 + 3) == 0x656C69662D656C67)
      goto LABEL_40;
    goto LABEL_28;
  }
  if (*(_WORD *)v20 != 115)
  {
LABEL_28:
    v23 = 0;
    goto LABEL_29;
  }
  v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968C0170);
  v32.i16[0] = vminvq_u16(v32);
  v24 = v32.i32[0];
  if (v32.i32[0])
  {
    v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 6), (int16x8_t)xmmword_1968C0180);
    v33.i16[0] = vminvq_u16(v33);
    v23 = v33.i32[0];
    if (v33.i32[0])
    {
LABEL_40:
      v26 = &off_1E32A6E88;
LABEL_49:
      v24 = *((unsigned __int8 *)v26 + 16);
      v23 = 1;
      goto LABEL_50;
    }
LABEL_29:
    v24 = 0;
    goto LABEL_50;
  }
LABEL_70:
  v23 = 0;
LABEL_50:
  v27 = v24 | (v23 << 8);
  v38 = 0;
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v18, a2);
  else
    *(_DWORD *)v18 -= 2;
LABEL_52:
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v27 <= 0xFF)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v37, 0, "saveMode", 9, "InspectorFrontendHost", 22, a8, "canSave", 8, "\"single-file\", \"file-variants\"", 31);
    return 0;
  }
  v30 = *(_QWORD *)(v16 + 8);
  if (!v30)
    return 6;
  if ((*(unsigned int (**)(uint64_t, _QWORD, JSC::CallFrame *))(*(_QWORD *)v30 + 240))(v30, v27, a3))
  {
    return 7;
  }
  return 6;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_save(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  JSC::JSCell *v14;
  JSValue v15;
  int i;
  unsigned int v17;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSCell *v25;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  JSC::VM *v34;
  _BOOL8 v35;
  uint64_t v36;
  JSValue v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  int *v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;

  v4 = *((_QWORD *)this + 7);
  v45 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "InspectorFrontendHost", "save");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSInspectorFrontendHost::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "InspectorFrontendHost", "save");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v39);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v49 = v4;
  if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v20 = v46;
    v46 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = 0;
    v22 = 1;
    v48 = 1;
    goto LABEL_57;
  }
  v50 = 0;
  v51 = 0;
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v17 = (*(_BYTE *)(v13 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v13 + 8) - 8) : 0;
      if (i - 1 >= v17)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v13, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v13, this, (i - 1));
      if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::InspectorFrontendClientSaveData>>::convert((uint64_t)this, IndexQuickly, (uint64_t)&v50);
      if (*(_QWORD *)(v4 + 16))
      {
        v27 = JSC::JSArrayIterator::create();
        v28 = i | 0xFFFE000000000000;
        if (i < 0)
          v28 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v27 + 16) = v28;
        goto LABEL_46;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v13, v15);
    if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
    {
      while (1)
      {
        v23 = JSC::iteratorStep();
        if (*(_QWORD *)(v4 + 16) || v23 == 6)
          break;
        v14 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v4 + 80))
        {
          v25 = v14;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
          v14 = v25;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::InspectorFrontendClientSaveData>>::convert((uint64_t)this, v14, (uint64_t)&v50);
        if (*(_QWORD *)(v4 + 16))
        {
LABEL_46:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (!*(_DWORD *)(v4 + 80) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
  {
    v29 = v50;
    v46 = v50;
    v30 = v51;
    v31 = HIDWORD(v51);
    v50 = 0;
    v51 = 0;
    v47 = __PAIR64__(v31, v30);
    v48 = 0;
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v50, v14);
    v33 = *((_QWORD *)a2 + 7);
    v34 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v33 >= 0xFFFE000000000000)
    {
      v40 = (_DWORD)v33 == 0;
      goto LABEL_83;
    }
    if (v33 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v35 = COERCE_DOUBLE(v33 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v33 - 0x2000000000000) < 0.0;
      goto LABEL_52;
    }
    if ((v33 & 0xFFFE000000000002) != 0)
    {
      v35 = v33 == 7;
      goto LABEL_52;
    }
    v41 = *(unsigned __int8 *)(v33 + 5);
    if (v41 == 3)
    {
      v44 = *(_DWORD *)(v33 + 8);
    }
    else
    {
      if (v41 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v35 = 1;
LABEL_52:
          if (*((_DWORD *)v34 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) != 0)
          {
            v21 = 0;
          }
          else
          {
            v46 = 0;
            v47 = 0;
            v50 = v29;
            v51 = __PAIR64__(v31, v30);
            v36 = *(_QWORD *)(v12 + 8);
            if (v36)
              (*(void (**)(uint64_t, WTF::StringImpl **, _BOOL8))(*(_QWORD *)v36 + 248))(v36, &v50, v35);
            WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v50, v32);
            v21 = 10;
          }
          v22 = 0;
          goto LABEL_57;
        }
        v40 = *(_QWORD *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_83:
        v35 = !v40;
        goto LABEL_52;
      }
      v42 = *(_QWORD *)(v33 + 8);
      if ((v42 & 1) != 0)
        v43 = (int *)(v33 + 16);
      else
        v43 = (int *)(v42 + 4);
      v44 = *v43;
    }
    v40 = v44 == 0;
    goto LABEL_83;
  }
  v22 = 1;
  v48 = 1;
  WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v50, v14);
  v21 = 0;
LABEL_57:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AB8F0[v22])(&v50, &v46);
  return (_BYTE *)v21;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_canLoad(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "canLoad");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "canLoad");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (!v9)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 256))(v9))
    return 7;
  return 6;
}

unint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_load(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  JSValue v37;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v39;
  objc_class *v40;
  WebCore::DOMGuardedObject *v41;
  WebCore::DOMGuardedObject *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194CDE5E4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_57;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSInspectorFrontendHost::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_57:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"InspectorFrontendHost", "load", v17);
  }
  else
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v25 = *(_QWORD *)(v18 + 24);
      v26 = *((_QWORD *)a2 + 6);
      v45 = (WTF::StringImpl *)v26;
      if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, this);
LABEL_32:
        if (*((_DWORD *)v24 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
          v28 = v44;
          if (hasExceptionsAfterHandlingTraps)
          {
            v43 = 1;
            v44 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v39);
              else
                *(_DWORD *)v28 -= 2;
            }
            v34 = 1;
LABEL_45:
            ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E32A90E0[v34])(&v45, &v42);
            if (!v14)
              goto LABEL_48;
            goto LABEL_46;
          }
        }
        else
        {
          v28 = v44;
        }
        v43 = 0;
        v42 = 0;
        v44 = v28;
        v29 = *(_QWORD *)(v25 + 8);
        if (v29)
        {
          v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v30 = &off_1E33EE7C0;
          *((_QWORD *)v30 + 1) = v14;
          v45 = v30;
          (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v29 + 264))(v29, &v44, &v45);
          v32 = v45;
          v45 = 0;
          if (v32)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
          v14 = 0;
          v28 = v44;
        }
        else
        {
          v45 = 0;
          WebCore::DeferredPromise::reject((uint64_t)v14, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v45, 0);
          v33 = v45;
          v45 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v31);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
        v44 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v31);
          else
            *(_DWORD *)v28 -= 2;
        }
        v34 = 0;
        goto LABEL_45;
      }
      v27 = *(WTF::StringImpl **)(v26 + 8);
      if ((v27 & 1) != 0)
      {
        v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, this);
        if (!v27)
          goto LABEL_31;
      }
      else if (!v27)
      {
LABEL_31:
        v44 = v27;
        goto LABEL_32;
      }
      *(_DWORD *)v27 += 2;
      goto LABEL_31;
    }
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v37);
  }
LABEL_46:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_48:
  v35 = *(_QWORD *)(v10 + 16);
  if (v35)
  {
    if (*(_QWORD *)(v10 + 24) != v35)
    {
      v40 = *(objc_class **)(v35 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v42);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v42, v40, 0);
      v41 = v42;
      v42 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v41 + 16))(v41);
        else
          --*((_DWORD *)v41 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_canPickColorFromScreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "canPickColorFromScreen");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "canPickColorFromScreen");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (!v9)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 272))(v9))
    return 7;
  return 6;
}

unint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_pickColorFromScreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void (*v26)(void);
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  objc_class *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194CDE9C0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSInspectorFrontendHost::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_39:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"InspectorFrontendHost", "pickColorFromScreen", v16);
LABEL_32:
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_34;
    }
    v26 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8);
  if (!v23)
  {
    v33 = 0;
    WebCore::DeferredPromise::reject((uint64_t)v14, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v33, 0);
    v28 = v33;
    v33 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    goto LABEL_32;
  }
  v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v24 = &off_1E33EE7E8;
  *((_QWORD *)v24 + 1) = v14;
  v33 = v24;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v23 + 280))(v23, &v33);
  v25 = v33;
  v33 = 0;
  if (v25)
  {
    v26 = *(void (**)(void))(*(_QWORD *)v25 + 8);
LABEL_28:
    v26();
  }
LABEL_34:
  v29 = *(_QWORD *)(v10 + 16);
  if (v29)
  {
    if (*(_QWORD *)(v10 + 24) != v29)
    {
      v31 = *(objc_class **)(v29 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v33);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v33, v31, 0);
      v32 = v33;
      v33 = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 16))(v32);
        else
          --*((_DWORD *)v32 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_showContextMenu(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v27;
  WTF *v28;
  JSC::VM *v29;
  WTF::StringImpl *v30[2];
  int v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  uint64_t v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "InspectorFrontendHost", "showContextMenu");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 76);
  v13 = *(_DWORD *)(v11 + 76) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorFrontendHost::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "InspectorFrontendHost", "showContextMenu");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v27);
  }
  v17 = *((_QWORD *)a2 + 6);
  v30[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) != 239 || !*(_QWORD *)(v17 + 24))
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v30, 0, "event", 6, "InspectorFrontendHost", 22, a8, "showContextMenu", 16, "Event", 6);
    return 0;
  }
  v18 = *((_QWORD *)a2 + 7);
  v32 = v9;
  if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v24 = v30[0];
    v30[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    v22 = 0;
    v21 = 1;
    v31 = 1;
    goto LABEL_29;
  }
  v33 = 0;
  v34 = 0;
  v30[0] = (WTF::StringImpl *)&v33;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::InspectorFrontendHost::ContextMenuItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::InspectorFrontendHost::ContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v18, (uint64_t *)v30);
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
  {
    v28 = v33;
    v31 = 1;
    if (HIDWORD(v34))
    {
      WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(v33, (WTF::StringImpl *)((char *)v33 + 56 * HIDWORD(v34)));
      v28 = v33;
    }
    if (v28)
    {
      v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree(v28, v19);
    }
    v22 = 0;
    v21 = 1;
LABEL_29:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AAFC0[v21])(&v33, v30);
    return (_BYTE *)v22;
  }
  v20 = v33;
  v31 = 0;
  v30[0] = 0;
  v30[1] = 0;
  if (HIDWORD(v34))
    WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(v33, (WTF::StringImpl *)((char *)v33 + 56 * HIDWORD(v34)));
  if (v20)
    WTF::fastFree(v20, v19);
  v21 = v31;
  v22 = 10;
  if (v31 != -1)
    goto LABEL_29;
  return (_BYTE *)v22;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_dispatchEventAsContextMenuEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  JSValue v19;
  JSC::VM *v20;
  JSC::VM *v21;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "InspectorFrontendHost", "dispatchEventAsContextMenuEvent");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 76);
  v13 = *(_DWORD *)(v11 + 76) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorFrontendHost::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "InspectorFrontendHost", "dispatchEventAsContextMenuEvent");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v19);
  }
  else
  {
    v17 = *((_QWORD *)a2 + 6);
    v21 = v9;
    if ((v17 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) == 239 && *(_QWORD *)(v17 + 24))
    {
      return 10;
    }
    else
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v21, 0, "event", 6, "InspectorFrontendHost", 22, a8, "dispatchEventAsContextMenuEvent", 32, "Event", 6);
      return 0;
    }
  }
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_sendMessageToBackend(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSValue v20;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "sendMessageToBackend");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "InspectorFrontendHost", "sendMessageToBackend");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v26 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v25 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v25;
    if (hasExceptionsAfterHandlingTraps)
    {
      v24 = 1;
      v25 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v16 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v14 = v25;
  }
  v24 = 0;
  v23 = 0;
  v26 = v14;
  v15 = *(_QWORD *)(v11 + 8);
  if (v15)
  {
    (*(void (**)(_QWORD, WTF::StringImpl **, JSC::CallFrame *))(*(_QWORD *)v15 + 336))(*(_QWORD *)(v11 + 8), &v26, a3);
    v14 = v26;
  }
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = 0;
  v17 = 10;
LABEL_27:
  ((void (*)(WTF::StringImpl **, uint64_t *, JSC::CallFrame *))off_1E32A90E0[v16])(&v26, &v23, a3);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_unbufferedLog(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v22;
  WTF::StringImpl *v23;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorFrontendHost", "unbufferedLog");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSInspectorFrontendHost::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "InspectorFrontendHost", "unbufferedLog");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v12 = *((_QWORD *)a2 + 6);
  v29 = (WTF *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v28 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v28;
    if (hasExceptionsAfterHandlingTraps)
    {
      v27 = 1;
      v28 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v19 = 0;
      v18 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v28;
  }
  v27 = 0;
  v26 = 0;
  v28 = v14;
  WTF::String::utf8();
  WTFLogAlways();
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, v15);
    else
      --*(_DWORD *)v16;
  }
  v17 = v28;
  v28 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = 0;
  v19 = 10;
LABEL_28:
  ((void (*)(WTF **, uint64_t *))off_1E32A90E0[v18])(&v29, &v26);
  return (_BYTE *)v19;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_isUnderTest(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "isUnderTest");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "isUnderTest");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (!v9)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 360))(v9))
    return 7;
  return 6;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_beep(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "beep");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSInspectorFrontendHost::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "InspectorFrontendHost", "beep");
  {
    if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
      (*(void (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                      + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
  }
  else
  {
    WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
  }
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_inspectInspector(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "InspectorFrontendHost", "inspectInspector");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "InspectorFrontendHost", "inspectInspector");
  WebCore::InspectorFrontendHost::inspectInspector(*(_QWORD **)(v3 + 24));
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_isBeingInspected(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *((_QWORD *)a2 + 5);
  v13 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "InspectorFrontendHost", "isBeingInspected");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "InspectorFrontendHost", "isBeingInspected");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  if (v9
    && (v10 = *(_QWORD *)(v9 + 8)) != 0
    && ((v11 = *(_QWORD *)(v10 + 80),
         (Inspector::FrontendRouter::hasLocalFrontend(*(Inspector::FrontendRouter **)(v11 + 24)) & 1) != 0)
     || Inspector::FrontendRouter::hasRemoteFrontend(*(Inspector::FrontendRouter **)(v11 + 24))))
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_setAllowsInspectingInspector(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  double v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  BOOL v22;
  BOOL v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  JSC::VM *v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "InspectorFrontendHost", "setAllowsInspectingInspector");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSInspectorFrontendHost::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "InspectorFrontendHost", "setAllowsInspectingInspector");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  v11 = *((_QWORD *)a2 + 6);
  if (v11 >= 0xFFFE000000000000)
  {
    v22 = (_DWORD)v11 == 0;
    goto LABEL_44;
  }
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      v13 = v11 == 7;
      goto LABEL_17;
    }
    v25 = *(unsigned __int8 *)(v11 + 5);
    if (v25 == 3)
    {
      v28 = *(_DWORD *)(v11 + 8);
    }
    else
    {
      if (v25 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v13 = 1;
          goto LABEL_17;
        }
        v22 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_44;
      }
      v26 = *(_QWORD *)(v11 + 8);
      if ((v26 & 1) != 0)
        v27 = (int *)(v11 + 16);
      else
        v27 = (int *)(v26 + 4);
      v28 = *v27;
    }
    v22 = v28 == 0;
LABEL_44:
    v13 = !v22;
    goto LABEL_17;
  }
  v23 = v12 <= 0.0;
  v24 = v12 < 0.0;
  v13 = !v23 || v24;
LABEL_17:
  v14 = *(_QWORD *)(v5 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 112);
      v18 = 0x400000000000;
      if (!v13)
        v18 = 0;
      *(_QWORD *)(v17 + 672) = *(_QWORD *)(v17 + 672) & 0xFFFFBFFFFFFFFFFFLL | v18;
      v19 = *(_QWORD *)(v14 + 8);
      if (v19)
        (*(void (**)(uint64_t, uint64_t, JSC::CallFrame *))(*(_QWORD *)v19 + 304))(v19, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 8) + 112) + 672) >> 46) & 1, a3);
    }
  }
  return 10;
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_engineeringSettingsAllowed(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;

  v3 = *((_QWORD *)a2 + 5);
  v13 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "InspectorFrontendHost", "engineeringSettingsAllowed");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSInspectorFrontendHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "InspectorFrontendHost", "engineeringSettingsAllowed");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 112) + 704) & 0x2000000) != 0)
      {
        {
          if (WebCore::InspectorFrontendHost::engineeringSettingsAllowed(void)::allowsInternalSecurityPolicies)
            return 7;
        }
        else
        {
          v12 = os_variant_allows_internal_security_policies();
          WebCore::InspectorFrontendHost::engineeringSettingsAllowed(void)::allowsInternalSecurityPolicies = v12;
          if (v12)
            return 7;
        }
      }
    }
  }
  return 6;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_logDiagnosticEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::InspectorFrontendHost *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSValue v28;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  JSC::VM *v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "InspectorFrontendHost", "logDiagnosticEvent");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSInspectorFrontendHost::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "InspectorFrontendHost", "logDiagnosticEvent");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v28);
  }
  v12 = *(WebCore::InspectorFrontendHost **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v34 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v39 = v14;
      goto LABEL_19;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v34, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v15 = v39;
    if (hasExceptionsAfterHandlingTraps)
    {
      v37 = 1;
      v39 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v30);
        else
          *(_DWORD *)v15 -= 2;
      }
      v24 = 0;
      v25 = 1;
      goto LABEL_37;
    }
  }
  else
  {
    v15 = v39;
  }
  v36 = v15;
  v37 = 0;
  v16 = *((_QWORD *)a2 + 7);
  v39 = (WTF::StringImpl *)v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v18)
        goto LABEL_26;
    }
    else if (!v18)
    {
LABEL_26:
      v38 = v18;
      goto LABEL_27;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_26;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v39, this);
LABEL_27:
  if (*((_DWORD *)v17 + 20))
  {
    v32 = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v38;
    if (v32)
    {
      v35 = 1;
      v38 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v31);
        else
          *(_DWORD *)v19 -= 2;
      }
      v24 = 0;
      v23 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v19 = v38;
  }
  v35 = 0;
  v36 = 0;
  v39 = v15;
  v34 = 0;
  v38 = v19;
  WebCore::InspectorFrontendHost::logDiagnosticEvent(v12, (const WTF::String *)&v39, (const WTF::String *)&v38);
  v21 = v38;
  v38 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v39;
  v39 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = 0;
  v24 = 10;
LABEL_36:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32A90E0[v23])(&v39, &v34);
  v25 = 0;
LABEL_37:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32A90E0[v25])(&v34, &v36);
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_getPath(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  void *v45;
  unsigned int *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  unsigned int *v58;
  char v59;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v57[0] = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v57, "InspectorFrontendHost", "getPath");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorFrontendHost::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)v57, "InspectorFrontendHost", "getPath");
  v57[1] = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v17);
  }
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) < 0x17u)
    return (_BYTE *)JSC::throwTypeError();
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = 16 * v20;
  if ((char **)(16 * v20) == &WebCore::JSFile::s_info || *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) == 0)
  {
    if ((_DWORD)v20)
    {
      v58 = (unsigned int *)v9;
LABEL_22:
      v23 = *(_QWORD *)(v19 + 24);
      if (v23)
      {
        v24 = (unint64_t *)((char *)v9 + 41968);
        v25 = *(_QWORD *)(v23 + 128);
        if (!v25)
          return (_BYTE *)*v24;
        v26 = *(_DWORD *)v25;
        v27 = *(_DWORD *)(v25 + 4);
        *(_DWORD *)v25 += 2;
        if (v27)
        {
          if (v27 != 1)
          {
LABEL_26:
            v28 = *((_QWORD *)v9 + 8095);
            if (!v28 || v25 != *(_QWORD *)(v28 + 8))
            {
              v28 = JSC::jsStringWithCacheSlowCase();
              v26 = *(_DWORD *)v25 - 2;
            }
            goto LABEL_29;
          }
          v47 = *(unsigned __int8 **)(v25 + 8);
          if ((*(_BYTE *)(v25 + 16) & 4) != 0)
          {
            v48 = *v47;
          }
          else
          {
            v49 = *(unsigned __int16 *)v47;
            if (v49 > 0xFF)
              goto LABEL_26;
            v48 = v49;
          }
          v28 = *((_QWORD *)v9 + v48 + 5277);
        }
        else
        {
          v28 = *v24;
        }
LABEL_29:
        if (v26)
          *(_DWORD *)v25 = v26;
        else
          WTF::StringImpl::destroy((WTF::StringImpl *)v25, a2);
        return (_BYTE *)v28;
      }
LABEL_45:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v58, 0, "file", 5, "InspectorFrontendHost", 22, a8, "getPath", 8, "File", 5);
      return 0;
    }
    return (_BYTE *)JSC::throwTypeError();
  }
  v29 = 16 * v20;
  do
    v29 = *(_QWORD *)(v29 + 16);
  while ((char **)v29 != &WebCore::JSFile::s_info && v29 != 0);
  if (v29)
  {
    v58 = (unsigned int *)v9;
    do
      v21 = *(_QWORD *)(v21 + 16);
    while ((char **)v21 != &WebCore::JSFile::s_info && v21 != 0);
    if (!v21)
      goto LABEL_45;
    goto LABEL_22;
  }
  if ((char **)v21 == &WebCore::JSCanvasRenderingContext2D::s_info)
    goto LABEL_54;
  v32 = v21;
  do
    v32 = *(_QWORD *)(v32 + 16);
  while ((char **)v32 != &WebCore::JSCanvasRenderingContext2D::s_info && v32 != 0);
  if (v32)
  {
LABEL_54:
    v58 = (unsigned int *)v9;
    v34 = JSC::jsDynamicCast<WebCore::JSCanvasRenderingContext2D *>(v19);
    if (!v34 || (v36 = *(_QWORD *)(v34 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v58, 0, "context", 8, "InspectorFrontendHost", 22, v35, "getPath", 8, "CanvasRenderingContext2D", 25);
      return 0;
    }
    v37 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v38 = WTF::fastMalloc((WTF *)0x58);
    v39 = (unsigned int *)v38;
    *(_DWORD *)(v38 + 80) = 1;
    *(_QWORD *)v38 = off_1E32CDB50;
    *(_DWORD *)(v38 + 72) = 0;
    v40 = *(unsigned int *)(v36 + 112);
    if ((_DWORD)v40 == -1)
    {
      *(_DWORD *)(v38 + 72) = -1;
    }
    else
    {
      v58 = (unsigned int *)(v38 + 16);
      ((void (*)(unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v40])(&v58);
    }
    *(_QWORD *)v39 = &unk_1E33DDF78;
    v58 = v39;
    v28 = WebCore::toJSNewlyCreated((uint64_t)this, v37, &v58);
    v46 = v58;
    v58 = 0;
    if (v46)
    {
      if (v46[20] != 1)
      {
        --v46[20];
        return (_BYTE *)v28;
      }
      *(_QWORD *)v46 = off_1E32CDB50;
      v50 = v46[18];
      if ((_DWORD)v50 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v50])(&v59, v46 + 4);
      goto LABEL_93;
    }
    return (_BYTE *)v28;
  }
  if ((char **)v21 == &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
  {
    v58 = (unsigned int *)v9;
  }
  else
  {
    v41 = v21;
    do
      v41 = *(_QWORD *)(v41 + 16);
    while ((char **)v41 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v41 != 0);
    if (!v41)
      return (_BYTE *)JSC::throwTypeError();
    v58 = (unsigned int *)v9;
    if ((char **)v21 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
    {
      do
        v21 = *(_QWORD *)(v21 + 16);
      while ((char **)v21 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v21 != 0);
      if (!v21)
      {
LABEL_73:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v58, 0, "context", 8, "InspectorFrontendHost", 22, a8, "getPath", 8, "OffscreenCanvasRenderingContext2D", 34);
        return 0;
      }
    }
  }
  v51 = *(_QWORD *)(v19 + 24);
  if (!v51)
    goto LABEL_73;
  v52 = *(_QWORD *)(v11 + 40);
  v53 = WTF::fastMalloc((WTF *)0x58);
  v54 = (unsigned int *)v53;
  *(_DWORD *)(v53 + 80) = 1;
  *(_QWORD *)v53 = off_1E32CDB50;
  *(_DWORD *)(v53 + 72) = 0;
  v55 = *(unsigned int *)(v51 + 112);
  if ((_DWORD)v55 == -1)
  {
    *(_DWORD *)(v53 + 72) = -1;
  }
  else
  {
    v58 = (unsigned int *)(v53 + 16);
    ((void (*)(unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v55])(&v58);
  }
  *(_QWORD *)v54 = &unk_1E33DDF78;
  v58 = v54;
  v28 = WebCore::toJSNewlyCreated((uint64_t)this, v52, &v58);
  v46 = v58;
  v58 = 0;
  if (v46)
  {
    if (v46[20] != 1)
    {
      --v46[20];
      return (_BYTE *)v28;
    }
    *(_QWORD *)v46 = off_1E32CDB50;
    v56 = v46[18];
    if ((_DWORD)v56 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v56])(&v59, v46 + 4);
LABEL_93:
    v46[18] = -1;
    WTF::fastFree((WTF *)v46, v45);
  }
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_getCurrentX(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char **v34;
  uint64_t v37;
  int v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  WebCore *v44;
  JSC::JSGlobalObject *v45;
  JSC::CallFrame *v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  JSC::VM *v50;
  uint64_t *v51;
  JSC::VM **v52;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47[0] = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v47, "InspectorFrontendHost", "getCurrentX");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 76);
  v13 = *(_DWORD *)(v11 + 76) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSInspectorFrontendHost::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)v47, "InspectorFrontendHost", "getCurrentX");
  v47[1] = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v17);
  }
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) < 0x17u)
    return (_BYTE *)JSC::throwTypeError();
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v22 = v21 == &WebCore::JSCanvasRenderingContext2D::s_info;
  else
    v22 = 1;
  if (v22)
  {
    if ((_DWORD)v20)
    {
LABEL_29:
      v50 = v9;
      v25 = JSC::jsDynamicCast<WebCore::JSCanvasRenderingContext2D *>(v19);
      if (!v25 || (v27 = *(_QWORD *)(v25 + 24)) == 0)
      {
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v50, 0, "context", 8, "InspectorFrontendHost", 22, v26, "getCurrentX", 12, "CanvasRenderingContext2D", 25);
        return 0;
      }
      v28 = *(_DWORD *)(v27 + 112);
      v29 = 0.0;
      if (v28 == 2)
      {
        v31 = *(_QWORD *)(v27 + 56);
        if (v31)
          v29 = (*(float (**)(uint64_t, float))(*(_QWORD *)v31 + 224))(v31, 0.0);
        goto LABEL_38;
      }
      if (v28 != 1)
      {
LABEL_38:
        v32 = v29;
        if (COERCE__INT64(fabs(v29)) <= 0x7FEFFFFFFFFFFFFFLL
          && (v33 = (int)v29, (double)(int)v33 == v32)
          && ((_DWORD)v33 || (LODWORD(v29) & 0x80000000) == 0))
        {
          return (_BYTE *)(v33 | 0xFFFE000000000000);
        }
        else
        {
          return (_BYTE *)(*(_QWORD *)&v32 + 0x2000000000000);
        }
      }
      v48 = 0;
      v49 = 0;
      v50 = (JSC::VM *)&v48;
      v51 = &v49;
      v30 = *(unsigned int *)(v27 + 108);
      if ((_DWORD)v30 != -1)
      {
        v52 = &v50;
        ((void (*)(JSC::VM ***, uint64_t, float))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v30])(&v52, v27 + 56, 0.0);
        goto LABEL_38;
      }
LABEL_75:
      v44 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_BYTE *)WebCore::jsInspectorFrontendHostPrototypeFunction_getCurrentY(v44, v45, v46);
    }
    return (_BYTE *)JSC::throwTypeError();
  }
  v23 = 16 * v20;
  do
    v23 = *(_QWORD *)(v23 + 16);
  while ((char **)v23 != &WebCore::JSCanvasRenderingContext2D::s_info && v23 != 0);
  if (v23)
    goto LABEL_29;
  if (v21 == &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
  {
    v50 = v9;
    goto LABEL_62;
  }
  v34 = v21;
  do
    v34 = (char **)v34[2];
  while (v34 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v34 != 0);
  if (!v34)
    return (_BYTE *)JSC::throwTypeError();
  v50 = v9;
  if (v21 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
  {
    do
      v21 = (char **)v21[2];
    while (v21 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v21 != 0);
    if (!v21)
      goto LABEL_59;
  }
LABEL_62:
  v37 = *(_QWORD *)(v19 + 24);
  if (!v37)
  {
LABEL_59:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v50, 0, "context", 8, "InspectorFrontendHost", 22, a8, "getCurrentX", 12, "OffscreenCanvasRenderingContext2D", 34);
    return 0;
  }
  v38 = *(_DWORD *)(v37 + 112);
  v39 = 0.0;
  if (v38 == 2)
  {
    v41 = *(_QWORD *)(v37 + 56);
    if (v41)
      v39 = (*(float (**)(uint64_t, float))(*(_QWORD *)v41 + 224))(v41, 0.0);
  }
  else if (v38 == 1)
  {
    v48 = 0;
    v49 = 0;
    v50 = (JSC::VM *)&v48;
    v51 = &v49;
    v40 = *(unsigned int *)(v37 + 108);
    if ((_DWORD)v40 == -1)
      goto LABEL_75;
    v52 = &v50;
    ((void (*)(JSC::VM ***, uint64_t, JSC::CallFrame *, float))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v40])(&v52, v37 + 56, a3, 0.0);
  }
  v42 = v39;
  if (COERCE__INT64(fabs(v39)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v43 = (int)v39, (double)(int)v43 == v42)
    && ((_DWORD)v43 || (LODWORD(v39) & 0x80000000) == 0))
  {
    return (_BYTE *)(v43 | 0xFFFE000000000000);
  }
  else
  {
    return (_BYTE *)(*(_QWORD *)&v42 + 0x2000000000000);
  }
}

_BYTE *WebCore::jsInspectorFrontendHostPrototypeFunction_getCurrentY(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  JSValue v18;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char **v35;
  uint64_t v38;
  int v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  JSC::VM *v51;
  uint64_t *v52;
  JSC::VM **v53;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v48[0] = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v48, "InspectorFrontendHost", "getCurrentY");
  v12 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
  v13 = *(unsigned int *)(v12 + 76);
  v14 = *(_DWORD *)(v12 + 76) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSInspectorFrontendHost::s_info && v15 != 0);
  }
  if (!v14)
    return WebCore::throwThisTypeError((int)this, (int)v48, "InspectorFrontendHost", "getCurrentY");
  v48[1] = v10;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v10, this, v18);
  }
  v20 = *((_QWORD *)a2 + 6);
  if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
    return (_BYTE *)JSC::throwTypeError();
  v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
  v22 = (char **)(16 * v21);
  if ((_DWORD)v21)
    v23 = v22 == &WebCore::JSCanvasRenderingContext2D::s_info;
  else
    v23 = 1;
  if (v23)
  {
    if ((_DWORD)v21)
    {
LABEL_29:
      v51 = v10;
      v26 = JSC::jsDynamicCast<WebCore::JSCanvasRenderingContext2D *>(v20);
      if (!v26 || (v28 = *(_QWORD *)(v26 + 24)) == 0)
      {
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v51, 0, "context", 8, "InspectorFrontendHost", 22, v27, "getCurrentY", 12, "CanvasRenderingContext2D", 25);
        return 0;
      }
      v29 = *(_DWORD *)(v28 + 112);
      v30 = 0.0;
      if (v29 == 2)
      {
        v32 = *(_QWORD *)(v28 + 56);
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 224))(v32);
        goto LABEL_38;
      }
      if (v29 != 1)
      {
LABEL_38:
        v33 = v30;
        if (COERCE__INT64(fabs(v30)) <= 0x7FEFFFFFFFFFFFFFLL
          && (v34 = (int)v30, (double)(int)v34 == v33)
          && ((_DWORD)v34 || (LODWORD(v30) & 0x80000000) == 0))
        {
          return (_BYTE *)(v34 | 0xFFFE000000000000);
        }
        else
        {
          return (_BYTE *)(*(_QWORD *)&v33 + 0x2000000000000);
        }
      }
      v49 = 0;
      v50 = 0;
      v51 = (JSC::VM *)&v49;
      v52 = &v50;
      v31 = *(unsigned int *)(v28 + 108);
      if ((_DWORD)v31 != -1)
      {
        v53 = &v51;
        ((void (*)(JSC::VM ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v53, v28 + 56);
        goto LABEL_38;
      }
LABEL_75:
      v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_BYTE *)WebCore::jsInspectorFrontendHostPrototypeFunction_setPath(v45, v46, v47);
    }
    return (_BYTE *)JSC::throwTypeError();
  }
  v24 = 16 * v21;
  do
    v24 = *(_QWORD *)(v24 + 16);
  while ((char **)v24 != &WebCore::JSCanvasRenderingContext2D::s_info && v24 != 0);
  if (v24)
    goto LABEL_29;
  if (v22 == &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
  {
    v51 = v10;
    goto LABEL_62;
  }
  v35 = v22;
  do
    v35 = (char **)v35[2];
  while (v35 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v35 != 0);
  if (!v35)
    return (_BYTE *)JSC::throwTypeError();
  v51 = v10;
  if (v22 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
  {
    do
      v22 = (char **)v22[2];
    while (v22 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v22 != 0);
    if (!v22)
      goto LABEL_59;
  }
LABEL_62:
  v38 = *(_QWORD *)(v20 + 24);
  if (!v38)
  {
LABEL_59:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v51, 0, "context", 8, "InspectorFrontendHost", 22, a9, "getCurrentY", 12, "OffscreenCanvasRenderingContext2D", 34);
    return 0;
  }
  v39 = *(_DWORD *)(v38 + 112);
  v40 = 0.0;
  if (v39 == 2)
  {
    v42 = *(_QWORD *)(v38 + 56);
    if (v42)
      (*(void (**)(uint64_t, __n128, float))(*(_QWORD *)v42 + 224))(v42, a4, 0.0);
  }
  else if (v39 == 1)
  {
    v49 = 0;
    v50 = 0;
    v51 = (JSC::VM *)&v49;
    v52 = &v50;
    v41 = *(unsigned int *)(v38 + 108);
    if ((_DWORD)v41 == -1)
      goto LABEL_75;
    v53 = &v51;
    ((void (*)(JSC::VM ***, uint64_t, JSC::CallFrame *, __n128, float))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v41])(&v53, v38 + 56, a3, a4, 0.0);
  }
  v43 = v40;
  if (COERCE__INT64(fabs(v40)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v44 = (int)v40, (double)(int)v44 == v43)
    && ((_DWORD)v44 || (LODWORD(v40) & 0x80000000) == 0))
  {
    return (_BYTE *)(v44 | 0xFFFE000000000000);
  }
  else
  {
    return (_BYTE *)(*(_QWORD *)&v43 + 0x2000000000000);
  }
}

uint64_t WebCore::jsInspectorFrontendHostPrototypeFunction_setPath(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  BOOL v21;
  JSValue v22;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char **v32;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  char **v45;
  BOOL v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  JSC::VM *v52;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v51[0] = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v51, "InspectorFrontendHost", "setPath");
  v12 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v13 = *(unsigned int *)(v12 + 76);
  v14 = *(_DWORD *)(v12 + 76) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSInspectorFrontendHost::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSInspectorFrontendHost::s_info && v15 != 0);
  }
  if (!v14)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v51, "InspectorFrontendHost", "setPath");
  v51[1] = v9;
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v22);
  }
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
    return JSC::throwTypeError();
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v21 = v20 == &WebCore::JSCanvasRenderingContext2D::s_info;
  else
    v21 = 1;
  if (v21)
  {
    if ((_DWORD)v19)
      goto LABEL_29;
    return JSC::throwTypeError();
  }
  v24 = 16 * v19;
  do
    v24 = *(_QWORD *)(v24 + 16);
  while ((char **)v24 != &WebCore::JSCanvasRenderingContext2D::s_info && v24 != 0);
  if (v24)
  {
LABEL_29:
    v52 = v9;
    v26 = JSC::jsDynamicCast<WebCore::JSCanvasRenderingContext2D *>(v18);
    if (!v26 || (v28 = *(_QWORD *)(v26 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v52, 0, "context", 8, "InspectorFrontendHost", 22, v27, "setPath", 8, "CanvasRenderingContext2D", 25);
      return 0;
    }
    v29 = *((_QWORD *)a2 + 7);
    v52 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v29 & 0xFFFE000000000002) != 0)
      goto LABEL_42;
    v30 = *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C);
    v31 = *(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) != 0;
    v32 = (char **)(16 * v30);
    if ((_DWORD)v30)
      v33 = v32 == &WebCore::JSPath2D::s_info;
    else
      v33 = 1;
    if (!v33)
    {
      do
      {
        v32 = (char **)v32[2];
        v31 = v32 != 0;
      }
      while (v32 != &WebCore::JSPath2D::s_info && v32 != 0);
    }
    if (!v31 || (v35 = *(_QWORD *)(v29 + 24)) == 0)
    {
LABEL_42:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v52, 1, "path", 5, "InspectorFrontendHost", 22, v27, "setPath", 8, "Path2D", 7);
      return 0;
    }
    v36 = *(unsigned int *)(v28 + 112);
    v37 = *(unsigned int *)(v35 + 72);
    if ((_DWORD)v36 == -1)
    {
      if ((_DWORD)v37 == -1)
        return 10;
    }
    else if ((_DWORD)v37 == -1)
    {
      ((void (*)(JSC::VM **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v36])(&v52, v28 + 56);
      *(_DWORD *)(v28 + 112) = -1;
      return 10;
    }
    v52 = (JSC::VM *)(v28 + 56);
    ((void (*)(JSC::VM **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal[v37])(&v52);
    return 10;
  }
  if (v20 == &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
  {
    v52 = v9;
    goto LABEL_69;
  }
  v38 = v20;
  do
    v38 = (char **)v38[2];
  while (v38 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v38 != 0);
  if (!v38)
    return JSC::throwTypeError();
  v52 = v9;
  if (v20 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
  {
    do
      v20 = (char **)v20[2];
    while (v20 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v20 != 0);
    if (!v20)
      goto LABEL_63;
  }
LABEL_69:
  v41 = *(_QWORD *)(v18 + 24);
  if (!v41)
  {
LABEL_63:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v52, 0, "context", 8, "InspectorFrontendHost", 22, a8, "setPath", 8, "OffscreenCanvasRenderingContext2D", 34);
    return 0;
  }
  v42 = *((_QWORD *)a2 + 7);
  v52 = v9;
  if ((v42 & 0xFFFE000000000002) != 0)
    goto LABEL_81;
  v43 = *(unsigned int *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C);
  v44 = *(_DWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C) != 0;
  v45 = (char **)(16 * v43);
  if ((_DWORD)v43)
    v46 = v45 == &WebCore::JSPath2D::s_info;
  else
    v46 = 1;
  if (!v46)
  {
    do
    {
      v45 = (char **)v45[2];
      v44 = v45 != 0;
    }
    while (v45 != &WebCore::JSPath2D::s_info && v45 != 0);
  }
  if (!v44 || (v48 = *(_QWORD *)(v42 + 24)) == 0)
  {
LABEL_81:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v52, 1, "path", 5, "InspectorFrontendHost", 22, a8, "setPath", 8, "Path2D", 7);
    return 0;
  }
  v49 = *(unsigned int *)(v41 + 112);
  v50 = *(unsigned int *)(v48 + 72);
  if ((_DWORD)v49 == -1)
  {
    if ((_DWORD)v50 == -1)
      return 10;
LABEL_87:
    v52 = (JSC::VM *)(v41 + 56);
    ((void (*)(JSC::VM **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal[v50])(&v52);
    return 10;
  }
  if ((_DWORD)v50 != -1)
    goto LABEL_87;
  ((void (*)(JSC::VM **, uint64_t, JSC::CallFrame *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v49])(&v52, v41 + 56, a3);
  *(_DWORD *)(v41 + 112) = -1;
  return 10;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::InspectorFrontendClientSaveData>>::convert(uint64_t result, JSC::JSCell *this, uint64_t a3)
{
  BOOL v3;
  JSC::VM *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  JSC::JSGlobalObject *v9;
  uint64_t Object;
  JSC::Structure *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  BOOL v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  int *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  BOOL v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  BOOL v70;
  unsigned int v71;
  JSC::VM *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  v5 = *(JSC::VM **)(result + 56);
  v72 = v5;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
LABEL_64:
    v67 = v7;
    v68 = v8;
    v69 = v6;
    v70 = v3;
    v71 = 0;
    goto LABEL_120;
  }
  v9 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_80:
    v71 = 1;
    goto LABEL_120;
  }
  v11 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v13 = JSC::JSObject::get(v11, v9, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v12);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((_DWORD)result)
      goto LABEL_80;
  }
  if (v13 != 10)
  {
    v14 = (JSC::VM *)*((_QWORD *)v9 + 7);
    if (v13 >= 0xFFFE000000000000)
    {
      v58 = (_DWORD)v13 == 0;
    }
    else
    {
      *(_QWORD *)&v15 = v13 - 0x2000000000000;
      if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v3 = v15 > 0.0 || v15 < 0.0;
LABEL_14:
        if (*((_DWORD *)v14 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
          if ((_DWORD)result)
            goto LABEL_80;
        }
        goto LABEL_15;
      }
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v3 = v13 == 7;
        goto LABEL_14;
      }
      v59 = *(unsigned __int8 *)(v13 + 5);
      if (v59 == 3)
      {
        v62 = *(_DWORD *)(v13 + 8);
      }
      else
      {
        if (v59 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v3 = 1;
            goto LABEL_14;
          }
          v58 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)v9;
          goto LABEL_156;
        }
        v60 = *(_QWORD *)(v13 + 8);
        if ((v60 & 1) != 0)
          v61 = (int *)(v13 + 16);
        else
          v61 = (int *)(v60 + 4);
        v62 = *v61;
      }
      v58 = v62 == 0;
    }
LABEL_156:
    v3 = !v58;
    goto LABEL_14;
  }
LABEL_15:
  WTF::AtomStringImpl::addLiteral();
  v17 = JSC::JSObject::get(v11, v9, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v16);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((_DWORD)result)
      goto LABEL_80;
  }
  if (v17 == 10)
  {
    v6 = 0;
    goto LABEL_31;
  }
  v67 = (WTF::StringImpl *)v17;
  v18 = (JSC::VM *)*((_QWORD *)v9 + 7);
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 2)
  {
    v19 = *(WTF::StringImpl **)(v17 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, v9);
      if (!v19)
        goto LABEL_26;
    }
    else if (!v19)
    {
LABEL_26:
      v74 = v19;
      goto LABEL_27;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_26;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v67, v9);
LABEL_27:
  if (!*((_DWORD *)v18 + 20))
  {
    v6 = v74;
LABEL_29:
    LODWORD(v64) = 0;
    v20 = 0;
    v63 = 0;
    v21 = 1;
    goto LABEL_30;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
  v6 = v74;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_29;
  v20 = 1;
  LODWORD(v64) = 1;
  v74 = 0;
  if (!v6)
    goto LABEL_95;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_95:
    v6 = 0;
    v21 = 0;
    v71 = 1;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v6, v36);
  v20 = (int)v64;
  v71 = 1;
  v6 = 0;
  v21 = 0;
LABEL_30:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v20])(&v74, &v63);
  if (!v21)
    goto LABEL_110;
LABEL_31:
  WTF::AtomStringImpl::addLiteral();
  v22 = v63;
  v24 = JSC::JSObject::get(v11, v9, (unint64_t)v63);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((result & 1) != 0)
    {
      v7 = 0;
LABEL_88:
      v8 = 0;
      v71 = 1;
      goto LABEL_111;
    }
  }
  if (v24 == 10)
  {
    v7 = 0;
    goto LABEL_48;
  }
  v74 = (WTF::StringImpl *)v24;
  v25 = (JSC::VM *)*((_QWORD *)v9 + 7);
  if ((v24 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v24 + 5) == 2)
  {
    v26 = *(WTF::StringImpl **)(v24 + 8);
    if ((v26 & 1) != 0)
    {
      v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, v9);
      if (!v26)
        goto LABEL_42;
    }
    else if (!v26)
    {
LABEL_42:
      v73 = v26;
      goto LABEL_43;
    }
    *(_DWORD *)v26 += 2;
    goto LABEL_42;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v74, v9);
LABEL_43:
  if (!*((_DWORD *)v25 + 20))
  {
    v7 = v73;
LABEL_45:
    LODWORD(v64) = 0;
LABEL_46:
    v27 = 0;
    v63 = 0;
    v28 = 1;
    goto LABEL_47;
  }
  v37 = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
  v7 = v73;
  if ((v37 & 1) == 0)
    goto LABEL_45;
  v27 = 1;
  LODWORD(v64) = 1;
  v73 = 0;
  if (!v7)
    goto LABEL_100;
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_100:
    v7 = 0;
    v28 = 0;
    v71 = 1;
    goto LABEL_47;
  }
  result = WTF::StringImpl::destroy(v7, v38);
  v27 = (int)v64;
  if (!(_DWORD)v64)
  {
    v7 = v63;
    goto LABEL_46;
  }
  v71 = 1;
  if ((_DWORD)v64 == -1)
  {
LABEL_110:
    v8 = 0;
    v7 = 0;
    goto LABEL_111;
  }
  v7 = 0;
  v28 = 0;
LABEL_47:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v27])(&v74, &v63);
  if (!v28)
  {
    v8 = 0;
    goto LABEL_111;
  }
LABEL_48:
  WTF::AtomStringImpl::addLiteral();
  v29 = v63;
  result = JSC::JSObject::get(v11, v9, (unint64_t)v63);
  v30 = result;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      result = WTF::StringImpl::destroy(v29, this);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((result & 1) != 0)
      goto LABEL_88;
  }
  if (v30 == 10)
  {
    v8 = 0;
    goto LABEL_64;
  }
  v74 = (WTF::StringImpl *)v30;
  v31 = (JSC::VM *)*((_QWORD *)v9 + 7);
  if ((v30 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v30 + 5) == 2)
  {
    v32 = *(WTF::StringImpl **)(v30 + 8);
    if ((v32 & 1) != 0)
    {
      v32 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, v9);
      if (!v32)
        goto LABEL_59;
    }
    else if (!v32)
    {
LABEL_59:
      v73 = v32;
      goto LABEL_60;
    }
    *(_DWORD *)v32 += 2;
    goto LABEL_59;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v74, v9);
LABEL_60:
  if (!*((_DWORD *)v31 + 20))
  {
    v8 = v73;
LABEL_62:
    v33 = 0;
    LODWORD(v64) = 0;
    v63 = 0;
    v34 = 1;
    goto LABEL_63;
  }
  v39 = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
  v8 = v73;
  if (!v39)
    goto LABEL_62;
  v33 = 1;
  LODWORD(v64) = 1;
  v73 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v40);
    else
      *(_DWORD *)v8 -= 2;
  }
  v34 = 0;
  v8 = 0;
  v71 = 1;
LABEL_63:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v33])(&v74, &v63);
  if (v34)
    goto LABEL_64;
LABEL_111:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      result = WTF::StringImpl::destroy(v6, this);
      if (!v8)
        goto LABEL_117;
      goto LABEL_115;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v8)
    goto LABEL_117;
LABEL_115:
  if (*(_DWORD *)v8 == 2)
    result = WTF::StringImpl::destroy(v8, this);
  else
    *(_DWORD *)v8 -= 2;
LABEL_117:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      result = WTF::StringImpl::destroy(v7, this);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_120:
  v41 = v71;
  if (!v71)
  {
    v42 = v67;
    v43 = v68;
    v67 = 0;
    v68 = 0;
    v63 = v42;
    v64 = v43;
    v44 = v69;
    v69 = 0;
    v65 = v44;
    v45 = v70;
    v66 = v70;
    v46 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v46 == *(_DWORD *)(a3 + 8))
    {
      v47 = WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v46 + 1, (unint64_t)&v63);
      v48 = *(unsigned int *)(a3 + 12);
      v49 = *(_QWORD *)a3 + 32 * v48;
      v50 = *(_QWORD *)v47;
      *(_QWORD *)v47 = 0;
      *(_QWORD *)v49 = v50;
      v51 = *((_QWORD *)v47 + 1);
      *((_QWORD *)v47 + 1) = 0;
      *(_QWORD *)(v49 + 8) = v51;
      v52 = *((_QWORD *)v47 + 2);
      *((_QWORD *)v47 + 2) = 0;
      *(_QWORD *)(v49 + 16) = v52;
      *(_BYTE *)(v49 + 24) = v47[24];
      v53 = v65;
      *(_DWORD *)(a3 + 12) = v48 + 1;
      v65 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, this);
        else
          *(_DWORD *)v53 -= 2;
      }
    }
    else
    {
      v54 = *(_QWORD *)a3;
      v63 = 0;
      v55 = v54 + 32 * v46;
      *(_QWORD *)v55 = v42;
      v64 = 0;
      *(_QWORD *)(v55 + 8) = v43;
      *(_QWORD *)(v55 + 16) = v44;
      *(_BYTE *)(v55 + 24) = v45;
      *(_DWORD *)(a3 + 12) = v46 + 1;
      v65 = 0;
    }
    v56 = v64;
    v64 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, this);
      else
        *(_DWORD *)v56 -= 2;
    }
    v57 = v63;
    v63 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, this);
      else
        *(_DWORD *)v57 -= 2;
    }
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AB8E0[v41])(&v63, &v67);
  }
  if (v71 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AB8E0[v41])(&v63, &v67);
  return result;
}

char *WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x194CE17F4);
      }
      v18 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x194CE17FCLL);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      *(_BYTE *)(a3 + 24) = *((_BYTE *)v5 + 24);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31InspectorFrontendClientSaveDataENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore31InspectorFrontendClientSaveDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, (WTF::StringImpl *)a2);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8DocumentENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8DocumentENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8DocumentENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8DocumentENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8DocumentENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E32AB900[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8DocumentENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E32AB900[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJdSC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJdSC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJdSC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJdSC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E32AB930[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 0;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJdSC_EEEOSR_EEEDcSJ_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E32AB930[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v8;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJdN3WTF6VectorIdLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AB930[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore7ElementENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_8DocumentENSE_ISJ_EENSG_ISJ_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32AB900[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

WebCore::IntersectionObserver *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20IntersectionObserverENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::IntersectionObserver **a2)
{
  WebCore::IntersectionObserver *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IntersectionObserver::~IntersectionObserver(result);
      return (WebCore::IntersectionObserver *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20IntersectionObserverENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20IntersectionObserver4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E32AB930[v3])(&v6, a2 + 32);
  *(_DWORD *)(a2 + 48) = -1;
  result = *(WTF::StringImpl **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32AB900[v5])(&v7, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore30JSIntersectionObserverCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::jsIntersectionObserverPrototypeFunction_observe(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Element *v17;
  JSValue v20;
  JSC::VM *v21;
  JSC::VM *v22;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "IntersectionObserver", "observe");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSIntersectionObserver::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSIntersectionObserver::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "IntersectionObserver", "observe");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v20);
  }
  else
  {
    v15 = *(_QWORD *)(v10 + 24);
    v16 = *((_QWORD *)a2 + 6);
    v22 = v9;
    if ((v16 & 0xFFFE000000000002) == 0
      && *(unsigned __int8 *)(v16 + 5) == 241
      && (v17 = *(WebCore::Element **)(v16 + 24)) != 0)
    {
      WebCore::IntersectionObserver::observe(v15, v17);
      return 10;
    }
    else
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v22, 0, "target", 7, "IntersectionObserver", 21, a8, "observe", 8, "Element", 8);
      return 0;
    }
  }
}

uint64_t WebCore::jsIntersectionObserverPrototypeFunction_unobserve(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t **v15;
  uint64_t v16;
  WebCore::Element *v17;
  JSValue v20;
  JSC::VM *v21;
  JSC::VM *v22;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "IntersectionObserver", "unobserve");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSIntersectionObserver::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSIntersectionObserver::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "IntersectionObserver", "unobserve");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v20);
  }
  else
  {
    v15 = *(uint64_t ***)(v10 + 24);
    v16 = *((_QWORD *)a2 + 6);
    v22 = v9;
    if ((v16 & 0xFFFE000000000002) == 0
      && *(unsigned __int8 *)(v16 + 5) == 241
      && (v17 = *(WebCore::Element **)(v16 + 24)) != 0)
    {
      WebCore::IntersectionObserver::unobserve(v15, v17);
      return 10;
    }
    else
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v22, 0, "target", 7, "IntersectionObserver", 21, a8, "unobserve", 10, "Element", 8);
      return 0;
    }
  }
}

uint64_t WebCore::jsIntersectionObserverPrototypeFunction_disconnect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return WebCore::IDLOperation<WebCore::JSIntersectionObserver>::call<&WebCore::jsIntersectionObserverPrototypeFunction_disconnectBody,(WebCore::CastedThisErrorBehavior)0>((uint64_t)this, *((_QWORD *)a2 + 5));
}

_BYTE *WebCore::jsIntersectionObserverPrototypeFunction_takeRecords(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::IntersectionObserverEntry **v19;
  WebCore::IntersectionObserverEntry *v20;
  bmalloc::api *v21;
  void *v22;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  int v30;
  int v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v35;

  v3 = *((_QWORD *)a2 + 5);
  v28 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "IntersectionObserver", "takeRecords");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSIntersectionObserver::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSIntersectionObserver::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "IntersectionObserver", "takeRecords");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(WTF **)(v9 + 120);
  *(_QWORD *)(v9 + 120) = 0;
  v11 = *(_DWORD *)(v9 + 128);
  v12 = *(unsigned int *)(v9 + 132);
  *(_QWORD *)(v9 + 128) = 0;
  v13 = *(WTF **)(v9 + 104);
  *(_QWORD *)(v9 + 104) = 0;
  v14 = *(_DWORD *)(v9 + 112);
  v15 = *(unsigned int *)(v9 + 116);
  *(_QWORD *)(v9 + 112) = 0;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v33 = v14;
  v34 = v15;
  v17 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::IntersectionObserverEntry>>>::convert<WTF::Ref<WebCore::IntersectionObserverEntry,WTF::RawPtrTraits<WebCore::IntersectionObserverEntry>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverEntry>>,0ul>((uint64_t)this, *(JSC::VM **)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)&v29);
  if ((_DWORD)v15)
  {
    v24 = 8 * v15;
    v25 = v13;
    do
    {
      v26 = *(_QWORD *)v25;
      if (*(_QWORD *)v25)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v35 = v26;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v35))*(_QWORD *)(v26 + 16) &= ~0x4000000000000uLL;
        v27 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        if (v27)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v16);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
      }
      else
      {
        *(_QWORD *)v25 = 0;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  if (v13)
    WTF::fastFree(v13, v16);
  if ((_DWORD)v12)
  {
    v18 = 8 * v12;
    v19 = (WebCore::IntersectionObserverEntry **)v10;
    do
    {
      v20 = *v19;
      *v19 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(v20, v16);
          bmalloc::api::isoDeallocate(v21, v22);
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
      ++v19;
      v18 -= 8;
    }
    while (v18);
  }
  if (v10)
    WTF::fastFree(v10, v16);
  return (_BYTE *)v17;
}

unint64_t WebCore::IDLOperation<WebCore::JSIntersectionObserver>::cast(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSIntersectionObserver::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSIntersectionObserver::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::IDLOperation<WebCore::JSIntersectionObserver>::call<&WebCore::jsIntersectionObserverPrototypeFunction_disconnectBody,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v5;

  v2 = a1;
  v5 = *(_QWORD *)(a1 + 56);
  v3 = WebCore::IDLOperation<WebCore::JSIntersectionObserver>::cast(a2);
  if (!v3)
    return (uint64_t)WebCore::throwThisTypeError(v2, (int)&v5, "IntersectionObserver", "disconnect");
  WebCore::IntersectionObserver::disconnect(*(_QWORD *)(v3 + 24));
  return 10;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::IntersectionObserverEntry>>>::convert<WTF::Ref<WebCore::IntersectionObserverEntry,WTF::RawPtrTraits<WebCore::IntersectionObserverEntry>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverEntry>>,0ul>(uint64_t a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::VM *v5;
  unsigned int v6;
  WebCore::IntersectionObserverEntry **v7;
  uint64_t v8;
  WebCore::IntersectionObserverEntry *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::IntersectionObserverEntry *v16;
  int v17;
  uint64_t v18;
  objc_class *v19;
  void *v20;
  int v21;
  bmalloc::api *v22;
  void *v23;
  JSC::VM *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  JSValue v29;
  _QWORD *v30;
  WebCore::IntersectionObserverEntry *v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  WTF *v35;
  _OWORD v36[4];
  uint64_t v37;
  JSC::VM *v38;

  v5 = *(JSC::VM **)(a1 + 56);
  v38 = v5;
  v33 = 0;
  v34 = 0x800000000;
  v35 = (WTF *)((char *)v36 + 8);
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v6 = *((_DWORD *)a3 + 3);
  if (v6 >= 9)
  {
    v33 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v34) == 1;
    v6 = *((_DWORD *)a3 + 3);
  }
  if (v6)
  {
    v7 = *(WebCore::IntersectionObserverEntry ***)a3;
    v8 = *(_QWORD *)a3 + 8 * v6;
    while (1)
    {
      v9 = *v7;
      v10 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
      if (!v10)
        goto LABEL_13;
      v11 = *(_DWORD *)(v10 - 8);
      v12 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::IntersectionObserverEntry **)(v10 + 16 * v15);
      if (v16 != v9)
        break;
LABEL_10:
      v18 = *(_QWORD *)(v10 + 16 * v15 + 8);
      if (!v18)
        goto LABEL_13;
      if ((*(_BYTE *)(v18 + 8) & 3) != 0)
        goto LABEL_13;
      v19 = *(objc_class **)v18;
      if (!*(_QWORD *)v18)
        goto LABEL_13;
LABEL_16:
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        goto LABEL_38;
      v21 = v34;
      if ((_DWORD)v34 == HIDWORD(v34) || v35 != (WTF *)((char *)v36 + 8) && v35)
      {
        v29.super.isa = v19;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v34, v29) == 1)
          v33 = 1;
      }
      else
      {
        *((_QWORD *)v35 + v34) = v19;
        LODWORD(v34) = v21 + 1;
      }
      if (++v7 == (WebCore::IntersectionObserverEntry **)v8)
        goto LABEL_23;
    }
    v17 = 1;
    while (v16)
    {
      v15 = ((_DWORD)v15 + v17) & v11;
      v16 = *(WebCore::IntersectionObserverEntry **)(v10 + 16 * v15);
      ++v17;
      if (v16 == v9)
        goto LABEL_10;
    }
LABEL_13:
    ++*(_DWORD *)v9;
    v31 = v9;
    v19 = (objc_class *)WebCore::createWrapper<WebCore::IntersectionObserverEntry,WebCore::IntersectionObserverEntry>(a2, &v31, a3);
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(v31, v20);
        bmalloc::api::isoDeallocate(v22, v23);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
    goto LABEL_16;
  }
LABEL_23:
  if (v33)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v31 = v35;
    v32 = v34;
    v24 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (!*((_DWORD *)v24 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) == 0)
    {
      v26 = JSC::constructArray();
      goto LABEL_26;
    }
  }
LABEL_38:
  v26 = 0;
LABEL_26:
  v27 = *(uint64_t **)&v36[0];
  if (*(_QWORD *)&v36[0])
  {
    v31 = (WebCore::IntersectionObserverEntry *)&v34;
    v30 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v36[0], (uint64_t *)&v31);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v27, v30);
  }
  if (v35 != (WTF *)((char *)v36 + 8) && v35)
    WTF::fastFree(v35, v25);
  return v26;
}

uint64_t WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v10 = v8;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v10))*(_QWORD *)(v8 + 16) &= ~0x4000000000000uLL;
        v9 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
      }
      else
      {
        *(_QWORD *)v6 = 0;
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25IntersectionObserverEntry4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *result;

  result = (unsigned int *)a2[15];
  a2[15] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11InvokeEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14CryptoKeyUsageELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore18RsaOtherPrimesInfoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, (WTF::StringImpl *)a2);
}

void WebCore::JsonWebKey::~JsonWebKey(WebCore::JsonWebKey *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 168))
    WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 38, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*((_BYTE *)this + 32))
  {
    v16 = (WTF *)*((_QWORD *)this + 2);
    if (v16)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v16, a2);
    }
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13KeyboardEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v7 = (uint64_t *)*((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      if (v7)
      {
        if (*v7)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v7, a2);
        WTF::fastFree((WTF *)v7, a2);
      }
      v8 = (unsigned int *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      return (WTF::StringImpl *)WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

_BYTE *WebCore::jsKeyboardEventPrototypeFunction_getModifierState(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "KeyboardEvent", "getModifierState");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSKeyboardEvent::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSKeyboardEvent::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "KeyboardEvent", "getModifierState");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v28 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  if ((MEMORY[0x19AEA53F4](v14, "Control", 7) & 1) != 0)
  {
    v16 = 2;
    goto LABEL_30;
  }
  if ((MEMORY[0x19AEA53F4](v14, "Shift", 5) & 1) != 0)
  {
    v16 = 8;
    goto LABEL_30;
  }
  if ((MEMORY[0x19AEA53F4](v14, "Alt", 3) & 1) != 0)
  {
    v16 = 1;
    goto LABEL_30;
  }
  v16 = 4;
  if ((MEMORY[0x19AEA53F4](v14, "Meta", 4) & 1) != 0)
  {
LABEL_30:
    if ((*(_BYTE *)(v11 + 84) & v16) != 0)
      v17 = 7;
    else
      v17 = 6;
    if (!v14)
      goto LABEL_41;
    goto LABEL_34;
  }
  if (MEMORY[0x19AEA53F4](v14, "CapsLock", 8))
  {
    v16 = 16;
    goto LABEL_30;
  }
  v17 = 6;
  if (!v14)
    goto LABEL_41;
LABEL_34:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v15);
LABEL_41:
    v18 = 0;
    goto LABEL_36;
  }
  v18 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_36:
  ((void (*)(uint64_t *, uint64_t *))off_1E32A90E0[v18])(&v28, &v25);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsKeyboardEventPrototypeFunction_initKeyboardEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t (**v16)();
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  double v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  _BOOL4 i;
  unint64_t v27;
  JSC::VM *v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  _BOOL4 v32;
  uint64_t v33;
  WTF *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  JSC::VM *v41;
  double v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _BOOL4 v46;
  unint64_t v47;
  JSC::VM *v48;
  double v49;
  int v50;
  uint64_t v51;
  _DWORD *v52;
  JSC::VM *v53;
  double v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  JSC::VM *v58;
  double v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF *v68;
  WTF::StringImpl *v69;
  uint64_t *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  JSValue v78;
  _BOOL4 v79;
  char hasExceptionsAfterHandlingTraps;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  _BOOL4 v86;
  _BOOL4 v87;
  _BOOL4 v88;
  _BOOL4 v89;
  WTF *v90;
  int v91;
  int v92;
  _BOOL4 v93;
  JSC::VM *v94;
  int v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  uint64_t v99;
  int v100;
  WTF::StringImpl *v101;
  WTF *v102;
  _QWORD v103[2];

  v3 = (uint64_t)this;
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v94 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v94, "KeyboardEvent", "initKeyboardEvent");
  v6 = (unint64_t)a2;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSKeyboardEvent::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSKeyboardEvent::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v94, "KeyboardEvent", "initKeyboardEvent");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v78.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, (JSC::JSGlobalObject *)v3, v78);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, v13, (uint64_t)&v99);
  v15 = v100;
  v16 = off_1E32A9100;
  if (v100)
  {
    v36 = 0;
    goto LABEL_127;
  }
  v17 = *(int *)(v6 + 32);
  if ((unint64_t)(v17 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v19 = *(JSC::VM **)(v3 + 56);
    v18 = 10;
    v20 = 0xFFFE000000000002;
    goto LABEL_25;
  }
  v18 = *(_QWORD *)(v6 + 56);
  v19 = *(JSC::VM **)(v3 + 56);
  v20 = 0xFFFE000000000002;
  if (v18 >= 0xFFFE000000000000)
    goto LABEL_168;
  *(_QWORD *)&v21 = v18 - 0x2000000000000;
  if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v18 & 0xFFFE000000000002) == 0)
    {
      v22 = *(unsigned __int8 *)(v18 + 5);
      if (v22 == 3)
      {
        v25 = *(_DWORD *)(v18 + 8);
      }
      else
      {
        if (v22 != 2)
        {
          i = (*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0
           || *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) != v3;
          goto LABEL_209;
        }
        v23 = *(_QWORD *)(v18 + 8);
        if ((v23 & 1) != 0)
          v24 = (int *)(v18 + 16);
        else
          v24 = (int *)(v23 + 4);
        v25 = *v24;
      }
      i = v25 != 0;
LABEL_209:
      v20 = 0xFFFE000000000002;
      goto LABEL_26;
    }
LABEL_25:
    i = v18 == 7;
    goto LABEL_26;
  }
  for (i = v21 > 0.0 || v21 < 0.0; ; i = v18 != 0)
  {
LABEL_26:
    if (*((_DWORD *)v19 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
      {
        v36 = 0;
        goto LABEL_126;
      }
      v17 = *(int *)(v6 + 32);
      v20 = 0xFFFE000000000002;
    }
    if ((unint64_t)(v17 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v28 = *(JSC::VM **)(v3 + 56);
      v27 = 10;
LABEL_38:
      v32 = v27 == 7;
      goto LABEL_39;
    }
    v27 = *(_QWORD *)(v6 + 64);
    v28 = *(JSC::VM **)(v3 + 56);
    if (v27 >= 0xFFFE000000000000)
    {
      v81 = (_DWORD)v27 == 0;
      goto LABEL_211;
    }
    if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v32 = COERCE_DOUBLE(v27 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v27 - 0x2000000000000) < 0.0;
    }
    else
    {
      if ((v27 & v20) != 0)
        goto LABEL_38;
      v29 = *(unsigned __int8 *)(v27 + 5);
      if (v29 == 3)
      {
        v81 = *(_DWORD *)(v27 + 8) == 0;
LABEL_211:
        v32 = !v81;
        goto LABEL_39;
      }
      if (v29 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v32 = 1;
          goto LABEL_39;
        }
        v81 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28) == v3;
        goto LABEL_211;
      }
      v30 = *(_QWORD *)(v27 + 8);
      v31 = (_DWORD *)((v30 & 1) != 0 ? v27 + 16 : v30 + 4);
      v32 = *v31 != 0;
      v20 = 0xFFFE000000000002;
    }
LABEL_39:
    if (*((_DWORD *)v28 + 20))
    {
      v79 = v32;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
      {
        v36 = 0;
        goto LABEL_126;
      }
      v17 = *(int *)(v6 + 32);
      v20 = 0xFFFE000000000002;
      v32 = v79;
    }
    if ((unint64_t)(v17 - 5) > 0xFFFFFFFFFFFFFFFBLL)
    {
      v34 = 0;
    }
    else
    {
      v33 = *(_QWORD *)(v6 + 72);
      if ((v33 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v34 = 0;
      }
      else
      {
        v97 = *(WTF::StringImpl **)(v3 + 56);
        if ((v33 & v20) != 0
          || *(unsigned __int8 *)(v33 + 5) < 0x17u
          || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C))
          || (v75 = *(_QWORD *)(*(_QWORD *)(v33 + 16) + 3408),
              v93 = v32,
              !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 104))(v75))
          || (v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 104))(v75),
              v32 = v93,
              (v34 = *(WTF **)(v76 + 112)) == 0))
        {
          WebCore::throwArgumentTypeError(v3, (uint64_t)&v97, 3, "view", 5, "KeyboardEvent", 14, v14, "initKeyboardEvent", 18, "WindowProxy", 12);
          v36 = 0;
          goto LABEL_126;
        }
        v17 = *(int *)(v6 + 32);
      }
    }
    v92 = v32;
    v35 = (unint64_t)(v17 - 6) > 0xFFFFFFFFFFFFFFFALL ? 10 : *(_QWORD *)(v6 + 80);
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>((JSC::JSGlobalObject *)v3, v35, (uint64_t)&v97);
    v37 = v98;
    if (v98)
      break;
    if ((unint64_t)(*(int *)(v6 + 32) - 7) > 0xFFFFFFFFFFFFFFF9)
      v38 = 10;
    else
      v38 = *(_QWORD *)(v6 + 88);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)v3, v38, &v95);
    if (v96)
    {
      v36 = 0;
LABEL_123:
      v37 = v98;
      goto LABEL_124;
    }
    v91 = i;
    v39 = *(int *)(v6 + 32);
    if ((unint64_t)(v39 - 8) >= 0xFFFFFFFFFFFFFFF9)
    {
      v41 = *(JSC::VM **)(v3 + 56);
      v40 = 10;
LABEL_67:
      v46 = v40 == 7;
      goto LABEL_68;
    }
    v40 = *(_QWORD *)(v6 + 96);
    v41 = *(JSC::VM **)(v3 + 56);
    if (v40 >= 0xFFFE000000000000)
    {
      v85 = (_DWORD)v40 == 0;
      goto LABEL_215;
    }
    *(_QWORD *)&v42 = v40 - 0x2000000000000;
    if (v40 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v42 <= 0.0)
      {
        v46 = v42 < 0.0;
        goto LABEL_68;
      }
LABEL_197:
      v46 = 1;
      goto LABEL_68;
    }
    if ((v40 & 0xFFFE000000000002) != 0)
      goto LABEL_67;
    v43 = *(unsigned __int8 *)(v40 + 5);
    if (v43 == 3)
    {
      v85 = *(_DWORD *)(v40 + 8) == 0;
LABEL_215:
      v46 = !v85;
      goto LABEL_68;
    }
    if (v43 != 2)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        goto LABEL_197;
      v85 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28) == v3;
      goto LABEL_215;
    }
    v44 = *(_QWORD *)(v40 + 8);
    if ((v44 & 1) != 0)
      v45 = (_DWORD *)(v40 + 16);
    else
      v45 = (_DWORD *)(v44 + 4);
    v46 = *v45 != 0;
LABEL_68:
    if (!*((_DWORD *)v41 + 20))
      goto LABEL_69;
    v86 = v46;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
    {
      v36 = 0;
      goto LABEL_123;
    }
    v39 = *(int *)(v6 + 32);
    v46 = v86;
LABEL_69:
    v90 = (WTF *)v12;
    if ((unint64_t)(v39 - 9) >= 0xFFFFFFFFFFFFFFF8)
    {
      v48 = *(JSC::VM **)(v3 + 56);
      v47 = 10;
LABEL_80:
      v12 = v47 == 7;
      goto LABEL_81;
    }
    v47 = *(_QWORD *)(v6 + 104);
    v48 = *(JSC::VM **)(v3 + 56);
    if (v47 >= 0xFFFE000000000000)
    {
      v82 = (_DWORD)v47 == 0;
      goto LABEL_219;
    }
    *(_QWORD *)&v49 = v47 - 0x2000000000000;
    if (v47 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v49 <= 0.0)
      {
        v12 = v49 < 0.0;
        goto LABEL_81;
      }
LABEL_200:
      v12 = 1;
      goto LABEL_81;
    }
    if ((v47 & 0xFFFE000000000002) != 0)
      goto LABEL_80;
    v50 = *(unsigned __int8 *)(v47 + 5);
    if (v50 == 3)
    {
      v82 = *(_DWORD *)(v47 + 8) == 0;
LABEL_219:
      v12 = !v82;
      goto LABEL_81;
    }
    if (v50 != 2)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        goto LABEL_200;
      v82 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x28) == v3;
      goto LABEL_219;
    }
    v51 = *(_QWORD *)(v47 + 8);
    if ((v51 & 1) != 0)
      v52 = (_DWORD *)(v47 + 16);
    else
      v52 = (_DWORD *)(v51 + 4);
    v12 = *v52 != 0;
LABEL_81:
    if (!*((_DWORD *)v48 + 20))
      goto LABEL_82;
    v87 = v46;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) != 0)
    {
      v36 = 0;
      goto LABEL_123;
    }
    v39 = *(int *)(v6 + 32);
    v46 = v87;
LABEL_82:
    if ((unint64_t)(v39 - 10) >= 0xFFFFFFFFFFFFFFF7)
    {
      v16 = (uint64_t (**)())v13;
      v53 = *(JSC::VM **)(v3 + 56);
      v18 = 10;
LABEL_93:
      v13 = v18 == 7;
      goto LABEL_94;
    }
    v18 = *(_QWORD *)(v6 + 112);
    v53 = *(JSC::VM **)(v3 + 56);
    if (v18 >= 0xFFFE000000000000)
    {
      v16 = (uint64_t (**)())v13;
      v83 = (_DWORD)v18 == 0;
      goto LABEL_223;
    }
    *(_QWORD *)&v54 = v18 - 0x2000000000000;
    v16 = (uint64_t (**)())v13;
    if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v54 <= 0.0)
      {
        v13 = v54 < 0.0;
        goto LABEL_94;
      }
LABEL_203:
      v13 = 1;
      goto LABEL_94;
    }
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_93;
    v55 = *(unsigned __int8 *)(v18 + 5);
    if (v55 == 3)
    {
      v83 = *(_DWORD *)(v18 + 8) == 0;
LABEL_223:
      v13 = !v83;
      goto LABEL_94;
    }
    if (v55 != 2)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        goto LABEL_203;
      v83 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == v3;
      goto LABEL_223;
    }
    v56 = *(_QWORD *)(v18 + 8);
    if ((v56 & 1) != 0)
      v57 = (_DWORD *)(v18 + 16);
    else
      v57 = (_DWORD *)(v56 + 4);
    v13 = *v57 != 0;
LABEL_94:
    if (!*((_DWORD *)v53 + 20))
      goto LABEL_95;
    v88 = v46;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) != 0)
    {
      v36 = 0;
      v16 = off_1E32A9100;
      goto LABEL_123;
    }
    v39 = *(int *)(v6 + 32);
    v46 = v88;
LABEL_95:
    if ((unint64_t)(v39 - 11) >= 0xFFFFFFFFFFFFFFF6)
    {
      v58 = *(JSC::VM **)(v3 + 56);
      v6 = 10;
LABEL_106:
      v3 = v6 == 7;
      goto LABEL_107;
    }
    v6 = *(_QWORD *)(v6 + 120);
    v58 = *(JSC::VM **)(v3 + 56);
    if (v6 >= 0xFFFE000000000000)
    {
      v84 = (_DWORD)v6 == 0;
      goto LABEL_227;
    }
    *(_QWORD *)&v59 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v6 & 0xFFFE000000000002) != 0)
        goto LABEL_106;
      v60 = *(unsigned __int8 *)(v6 + 5);
      if (v60 == 3)
      {
        v63 = *(_DWORD *)(v6 + 8);
      }
      else
      {
        if (v60 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_207:
            v3 = 1;
            goto LABEL_107;
          }
          v84 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28) == v3;
          goto LABEL_227;
        }
        v61 = *(_QWORD *)(v6 + 8);
        if ((v61 & 1) != 0)
          v62 = (int *)(v6 + 16);
        else
          v62 = (int *)(v61 + 4);
        v63 = *v62;
      }
      v84 = v63 == 0;
LABEL_227:
      v3 = !v84;
      goto LABEL_107;
    }
    if (v59 > 0.0)
      goto LABEL_207;
    v3 = v59 < 0.0;
LABEL_107:
    if (*((_DWORD *)v58 + 20))
    {
      v89 = v46;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v58);
      v46 = v89;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      {
        v36 = 0;
        v16 = off_1E32A9100;
        goto LABEL_123;
      }
    }
    if (!v100)
    {
      v64 = v99;
      v99 = 0;
      v103[0] = v64;
      if (v34)
        ++*(_DWORD *)v34;
      v102 = v34;
      if (!v98)
      {
        v65 = v97;
        v97 = 0;
        v101 = v65;
        if (!v96)
        {
          WebCore::KeyboardEvent::initKeyboardEvent(v90, (const WTF::AtomString *)v103, v91, v92, (_DWORD **)&v102, (_DWORD **)&v101, v95, v46, v12, v13, v3);
          v67 = v101;
          v101 = 0;
          v16 = off_1E32A9100;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v66);
            else
              *(_DWORD *)v67 -= 2;
          }
          v68 = v102;
          v102 = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 1)
            {
              v71 = (uint64_t *)*((_QWORD *)v68 + 2);
              *((_QWORD *)v68 + 2) = 0;
              if (v71)
              {
                if (*v71)
                  WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v71, v66);
                WTF::fastFree((WTF *)v71, v66);
              }
              v72 = (unsigned int *)*((_QWORD *)v68 + 1);
              *((_QWORD *)v68 + 1) = 0;
              if (v72)
              {
                do
                {
                  v73 = __ldaxr(v72);
                  v74 = v73 - 1;
                }
                while (__stlxr(v74, v72));
                if (!v74)
                {
                  atomic_store(1u, v72);
                  WTF::fastFree((WTF *)v72, v66);
                }
              }
              WTF::fastFree(v68, v66);
            }
            else
            {
              --*(_DWORD *)v68;
            }
          }
          v69 = (WTF::StringImpl *)v103[0];
          v103[0] = 0;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, v66);
            else
              *(_DWORD *)v69 -= 2;
          }
          v36 = 10;
          goto LABEL_123;
        }
      }
    }
    v19 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_168:
    ;
  }
  v36 = 0;
LABEL_124:
  if (v37 != -1)
    ((void (*)(_QWORD *, WTF::StringImpl **))v16[v37])(v103, &v97);
LABEL_126:
  v15 = v100;
LABEL_127:
  if (v15 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))v16[v15])(&v97, &v99);
  return (_BYTE *)v36;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSE_SB_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEEOST_EEEDcSL_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E32AC0F8[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_QWORD *)(v4 + 12) = v8;
    return result;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESB_EEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSE_SB_EEEOST_EEEDcSL_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AC0F8[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSD_SA_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSD_SA_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEEOSS_EEEDcSK_DpT0_(unsigned int **a1, WTF::StringImpl *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*a1, a2, a3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEESA_EEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSD_SA_EEEOSS_EEEDcSK_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32AC128[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, WTF::StringImpl *a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  v4 = result;
  v5 = result[4];
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E32AC128[v5])(&v13, result);
LABEL_8:
    v4[4] = -1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    v4[2] = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_QWORD *)(v4 + 3) = v9;
    return result;
  }
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v10 = *(WTF::StringImpl ***)a2;
    v11 = 8 * v7;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  result = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v8;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJDnSE_dEEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEEOST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AC158[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEEOST_EEEDcSL_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E32AC158[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v8;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v7;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJDnSE_dEEEOST_EEEDcSL_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E32AC158[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJDnN3WTF6VectorINS_8optionalIdEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEdEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AC158[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorINS9_6StringELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEESB_EEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AC128[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEESC_EEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AC0F8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSKeyframeEffect>(WebCore::JSAnimationEffect *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t result;
  JSC::JSCell *v14;
  unint64_t v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSKeyframeEffect::s_info + ~((_QWORD)&WebCore::JSKeyframeEffect::s_info << 32)) ^ (((unint64_t)&WebCore::JSKeyframeEffect::s_info + ~((_QWORD)&WebCore::JSKeyframeEffect::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSKeyframeEffect::s_info)
    {
LABEL_6:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSKeyframeEffect::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (JSC::JSCell *)WebCore::JSAnimationEffect::prototype(this, a2, a3);
  v15 = JSC::Structure::create((uint64_t *)this, (int)a2, v14);
  *(_DWORD *)(v15 + 16) |= 0x80000u;
  v17 = (JSC::JSCell *)WebCore::JSKeyframeEffectPrototype::create(this, a2, v15, v16);
  v18 = JSC::Structure::create((uint64_t *)this, (int)a2, v17);
  return WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSKeyframeEffect::s_info);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  char v6;

  v3 = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32AC0B8[v5])(&v6, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN7WebCore21KeyframeEffectOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E32AC0C8[v5])(&v10, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  result = *(__n128 *)(a3 + 16);
  v7 = *(_OWORD *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  *(_WORD *)(a2 + 58) = *(_WORD *)(a3 + 58);
  v9 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 64) = v9;
  return result;
}

WTF::StringImpl *WebCore::Detail::ConversionResultStorage<std::variant<double,WebCore::KeyframeEffectOptions>>::ConversionResultStorage<WebCore::KeyframeEffectOptions>(WebCore::Detail::ConversionResultStorage<WebCore::KeyframeEffectOptions> &&)::{lambda(void)#1}::operator()(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v4;
  __int128 v5;
  WTF::StringImpl *v6;
  __int16 v7;
  __int16 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  __int128 v12;
  WTF::StringImpl *v13;
  _BYTE v14[8];
  int v15;
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  __int16 v19;
  __int16 v20;
  WTF::StringImpl *v21;
  char v22;
  _BYTE v23[8];
  _BYTE v24[8];
  int v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  __int16 v29;
  __int16 v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;

  v2 = result;
  v33 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 80))
  {
    *((_DWORD *)result + 24) = 1;
  }
  else
  {
    v14[0] = 0;
    v15 = -1;
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E32AC0C8[v4])(v23, v14, a2 + 8);
      v15 = v4;
    }
    v5 = *(_OWORD *)(a2 + 40);
    v16 = *(_OWORD *)(a2 + 24);
    v17 = v5;
    v6 = *(WTF::StringImpl **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    v18 = v6;
    v7 = *(_WORD *)(a2 + 64);
    v19 = v7;
    v8 = *(_WORD *)(a2 + 66);
    v20 = v8;
    v9 = *(WTF::StringImpl **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    v21 = v9;
    v24[0] = 0;
    v25 = -1;
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_1E32AC0C8[v4])(&v22, v24, v14);
      v25 = v4;
      v6 = v18;
      v7 = v19;
      v8 = v20;
      v9 = v21;
    }
    v26 = v16;
    v27 = v17;
    v28 = v6;
    v29 = v7;
    v30 = v8;
    v18 = 0;
    v21 = 0;
    v31 = v9;
    v32 = 1;
    *((_BYTE *)v2 + 16) = 0;
    v10 = (WTF::StringImpl *)((char *)v2 + 16);
    *((_DWORD *)v2 + 22) = -1;
    *((_DWORD *)v2 + 6) = -1;
    if ((_DWORD)v4 == -1)
    {
      v11 = 1;
    }
    else
    {
      ((void (*)(char *))off_1E32AC0C8[v4])(&v22);
      *((_DWORD *)v2 + 6) = v4;
      v6 = v28;
      v7 = v29;
      v8 = v30;
      v9 = v31;
      v11 = v32;
    }
    v12 = v27;
    *((_OWORD *)v2 + 2) = v26;
    *((_OWORD *)v2 + 3) = v12;
    *((_QWORD *)v2 + 8) = v6;
    *((_WORD *)v2 + 36) = v7;
    *((_WORD *)v2 + 37) = v8;
    v28 = 0;
    v31 = 0;
    *((_QWORD *)v2 + 10) = v9;
    *((_DWORD *)v2 + 22) = 1;
    *((_DWORD *)v2 + 24) = 0;
    if (v11 != -1)
      ((void (*)(char *, _BYTE *))off_1E32AC1E0[v11])(&v22, v24);
    v32 = -1;
    v13 = v21;
    v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    if (v15 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E32AC0B8[v15])(&v22, v14);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21KeyframeEffectOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  char v6;

  v3 = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32AC0B8[v5])(&v6, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJdN7WebCore21KeyframeEffectOptionsEEEENS9_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AC1E0[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 80) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14KeyframeEffectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14KeyframeEffectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJdN7WebCore21KeyframeEffectOptionsEEEEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 88))
  {
    v3 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32AC1E0[v3])(&v5, a2 + 8);
    *(_DWORD *)(a2 + 80) = -1;
  }
  return result;
}

void WebCore::jsKeyframeEffectPrototypeFunction_getKeyframes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::KeyframeEffect **v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;

  v10 = *((_QWORD *)this + 7);
  v4 = (WebCore::KeyframeEffect **)*((_QWORD *)a2 + 5);
  if (((unint64_t)v4 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSKeyframeEffect::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSKeyframeEffect::s_info && v7 != 0);
  }
  if (!v6)
LABEL_13:
    WebCore::throwThisTypeError((int)this, (int)&v10, "KeyframeEffect", "getKeyframes");
  else
    WebCore::JSKeyframeEffect::getKeyframes(v4, (JSC::VM **)this, a2);
}

uint64_t WebCore::jsKeyframeEffectPrototypeFunction_setKeyframes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::JSCell **v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSCell **v20;
  JSC::JSCell *v21;
  int v22;
  uint64_t v23;
  _WORD *v24;
  JSC::JSCell **v25;
  uint64_t v26;
  JSC::JSCell **v27;
  JSC::JSCell *v28;
  uint64_t v29;
  JSC::JSCell *v32;
  JSC::JSCell *v33;
  JSValue v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  JSValue v37;
  _QWORD *v38;
  JSC::VM *v39;
  JSC::JSCell **v40;
  int v41;
  JSC::JSCell **v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  unsigned __int8 v46;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "KeyframeEffect", "setKeyframes");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSKeyframeEffect::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSKeyframeEffect::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "KeyframeEffect", "setKeyframes");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v34);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CE4C60);
  }
  v15 = *((_QWORD *)a2 + 6);
  if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    goto LABEL_27;
  }
  WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)this, v15, (uint64_t)&v44);
  LOBYTE(v40) = 0;
  v41 = -1;
  v16 = (int)v45;
  if ((_DWORD)v45 == -1)
    return 0;
  ((void (*)(JSC::JSCell ***, JSC::JSCell ***, int *))off_1E32AC1D0[v45])(&v42, &v40, &v44);
  v41 = v16;
  if ((_DWORD)v45 != -1)
  {
    ((void (*)(JSC::JSCell ***, int *))off_1E32AA870[v45])(&v42, &v44);
    v16 = v41;
  }
  if (!v16)
  {
    v17 = v40;
    v42 = 0;
    if (!v40)
      goto LABEL_27;
    v18 = *(_QWORD *)(((unint64_t)(v40 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v19 = *(_QWORD *)(v18 + 40);
    if (v19)
    {
      *(_QWORD *)(v18 + 40) = *(_QWORD *)v19;
      *(_QWORD *)(v19 + 16) = 0;
      v20 = (JSC::JSCell **)(v19 + 16);
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      v42 = (JSC::JSCell **)(v19 + 16);
    }
    else
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v40 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
      v38 = *(_QWORD **)(v18 + 40);
      v17 = v40;
      *(_QWORD *)(v18 + 40) = *v38;
      *v38 = 0;
      v38[1] = 0;
      v38[2] = 0;
      v20 = (JSC::JSCell **)(v38 + 2);
      v42 = v20;
      if (!v17)
      {
        v21 = 0;
LABEL_26:
        *v20 = v21;
LABEL_27:
        WebCore::KeyframeEffect::setKeyframes(v12, this, (WebCore::Node *)(v14 - 192), &v42, (uint64_t)&v44);
        v22 = v46;
        if (!v46)
        {
          v23 = *(_QWORD *)(v12 + 96);
          if (v23)
          {
            v24 = *(_WORD **)(v23 + 8);
            if (v24)
            {
              if ((*(unsigned int (**)(_WORD *))(*(_QWORD *)v24 + 112))(v24))
                v24[120] |= 0x104u;
            }
          }
        }
        if (v42)
        {
          v25 = v42 - 2;
          v26 = *(_QWORD *)(((unint64_t)(v42 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v27 = (JSC::JSCell **)*(v42 - 1);
          if (v27)
          {
            v28 = *v25;
            *v27 = *v25;
            *((_QWORD *)v28 + 1) = v27;
            *v25 = 0;
            v25[1] = 0;
          }
          *v25 = *(JSC::JSCell **)(v26 + 40);
          *(_QWORD *)(v26 + 40) = v25;
        }
        if (v22)
        {
          v35 = (WTF::StringImpl *)v44;
          LOBYTE(v42) = v44;
          v36 = v45;
          v43 = v45;
          if (!*((_QWORD *)v4 + 2))
          {
            v37.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v44, (JSC::JSGlobalObject *)&v43);
            JSC::VM::throwException(v4, this, v37);
            v36 = v43;
          }
          v43 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v35);
            else
              *(_DWORD *)v36 -= 2;
          }
          v29 = 0;
        }
        else
        {
          v29 = 10;
        }
        v16 = v41;
        goto LABEL_39;
      }
    }
    v21 = *v17;
    if (*v17)
    {
      v32 = *(JSC::JSCell **)(((unint64_t)(v20 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v33 = (JSC::JSCell *)*((_QWORD *)v32 + 3);
      v32 = (JSC::JSCell *)((char *)v32 + 24);
      *(v20 - 2) = v33;
      *(v20 - 1) = v32;
      *(_QWORD *)v32 = v20 - 2;
      *((_QWORD *)v33 + 1) = v20 - 2;
    }
    goto LABEL_26;
  }
  v29 = 0;
LABEL_39:
  if (v16 != -1)
    ((void (*)(int *, JSC::JSCell ***))off_1E32AA870[v16])(&v44, &v40);
  return v29;
}

uint64_t WebCore::jsHTMLTextAreaElement_defaultValueGetter(uint64_t a1, WebCore::HTMLTextAreaElement *this)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 56);
  WebCore::HTMLTextAreaElement::defaultValue((uint64_t *)&v7, this);
  v4 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>(a1, (uint64_t)&v8, (uint64_t *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WebCore::JSHTMLTextAreaElement::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 4720);
  *(_QWORD *)(a1 + 4720) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSHashChangeEvent>(WebCore::JSEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v8;
  JSC::Structure *v9;
  JSC::JSCell *v10;
  uint64_t v11;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSHashChangeEvent::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSEvent::prototype(a1, a2, v5);
    Structure = WebCore::JSHashChangeEventPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v10 = (JSC::JSCell *)WebCore::JSHashChangeEventPrototype::create(a1, Structure, v8, v9);
    v11 = WebCore::JSHashChangeEvent::createStructure((uint64_t *)a1, (uint64_t)a2, v10);
    return WebCore::cacheDOMStructure((JSCell *)a2, v11, (uint64_t)&WebCore::JSHashChangeEvent::s_info);
  }
  return result;
}

uint64_t WebCore::JSHashChangeEvent::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3704);
  *(_QWORD *)(a1 + 3704) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  WebCore::HighlightRange **v6;
  uint64_t v7;
  WebCore::HighlightRange *v8;
  WTF *v9;
  void *v10;
  WTF *v11;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v5)
      {
        v6 = *(WebCore::HighlightRange ***)(v3 + 8);
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::HighlightRange::~HighlightRange(v8, a2);
              WTF::fastFree(v9, v10);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      v11 = *(WTF **)(v3 + 8);
      if (v11)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v11, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::HighlightRange::~HighlightRange(WebCore::HighlightRange *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::JSHighlight::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::HighlightRegistry::~HighlightRegistry(WebCore::HighlightRegistry *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (uint64_t *)(v5 + 8);
      do
      {
        if (*(v7 - 1) != -1)
        {
          WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref(v7, a2);
          v8 = (WTF::StringImpl *)*(v7 - 1);
          *(v7 - 1) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
}

uint64_t WebCore::JSHighlightRegistry::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::RefCounted<WebCore::History>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  bmalloc::api *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  bmalloc::api *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(_QWORD *)(result + 32);
    if (v3)
    {
      *(_QWORD *)(v3 + 8) = 3;
      *(_QWORD *)(result + 32) = 0;
    }
    v4 = (bmalloc::api *)(result - 8);
    v5 = *(unsigned int **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        v15 = v2;
        v16 = (WTF *)(v2 - 8);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v5 + 2), a2);
        WTF::fastFree((WTF *)v5, v11);
        v2 = v15;
        v4 = v16;
      }
    }
    v8 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        v12 = v4;
        atomic_store(1u, (unsigned int *)v8);
        v17 = (WTF *)v8;
        v13 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v13)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v13));
        v14 = (WTF *)*((_QWORD *)v17 + 2);
        if (v14)
        {
          *((_QWORD *)v17 + 2) = 0;
          *((_DWORD *)v17 + 6) = 0;
          WTF::fastFree(v14, a2);
        }
        WTF::fastFree(v17, a2);
        v4 = v12;
      }
    }
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(*(_QWORD *)v4 + 8) = 3;
      *(_QWORD *)v4 = 0;
    }
    return bmalloc::api::isoDeallocate(v4, a2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSHistory::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore7History17ScrollRestorationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::setJSHistory_scrollRestorationSetter(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v7;
  JSC::VM *v8;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v7 = WebCore::parseEnumeration<WebCore::History::ScrollRestoration>(a1, a3);
  if (!*((_DWORD *)v8 + 20))
  {
    if (!BYTE4(v7))
      return 0;
    goto LABEL_3;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v8);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && BYTE4(v7))
  {
LABEL_3:
    WebCore::invokeFunctorPropagatingExceptionIfNecessary<WebCore::setJSHistory_scrollRestorationSetter(JSC::JSGlobalObject &,WebCore::JSHistory &,JSC::JSValue)::{lambda(void)#1}>(a1, &v8, a2, (uint64_t)&v7);
    return 1;
  }
  return result;
}

uint64_t WebCore::invokeFunctorPropagatingExceptionIfNecessary<WebCore::setJSHistory_scrollRestorationSetter(JSC::JSGlobalObject &,WebCore::JSHistory &,JSC::JSValue)::{lambda(void)#1}>(JSC *a1, JSC::VM **a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  WebCore::setJSHistory_scrollRestorationSetter(JSC::JSGlobalObject &,WebCore::JSHistory &,JSC::JSValue)::{lambda(void)#1}::operator()(&v11, a3, a4);
  if (v13)
  {
    v9[0] = v11;
    v8 = v12;
    v12 = 0;
    v10 = v8;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v9);
      v8 = v10;
    }
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v11, v6);
}

unsigned int *WebCore::setJSHistory_scrollRestorationSetter(JSC::JSGlobalObject &,WebCore::JSHistory &,JSC::JSValue)::{lambda(void)#1}::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  WebCore::JSIDBCursor *v4;
  JSC::JSCell **v5;

  if (*(_BYTE *)(a3 + 4))
    return WebCore::History::setScrollRestoration(a2, *(_DWORD *)a3, a1);
  v4 = (WebCore::JSIDBCursor *)std::__throw_bad_optional_access[abi:sn180100]();
  return (unsigned int *)WebCore::getDOMStructure<WebCore::JSIDBCursor>(v4, v5);
}

uint64_t WebCore::getDOMStructure<WebCore::JSIDBCursor>(WebCore::JSIDBCursor *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSIDBCursor::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSIDBCursor::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSIDBCursor::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBCursor>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSIDBCursorWithValue::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSIDBDatabase>(WebCore::JSIDBDatabase *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSIDBDatabase::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSIDBDatabase::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSIDBDatabase::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBDatabase>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSIDBFactory::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSIDBIndex>(WebCore::JSIDBIndex *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSIDBIndex::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSIDBIndex::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSIDBIndex::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBIndex>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSG_6VectorISH_Lm0ENSG_15CrashOnOverflowELm16ENSG_10FastMallocEEEEEEEUlTyvE_JNSE_17integral_constantIlLl0EEENSQ_IlLl1EEEEEET_ST_@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  JSC::JSCell *v18;

  v2 = result;
  v4 = **(_QWORD **)result;
  if (!v4)
  {
    v5 = *(uint64_t **)(result + 32);
    if (*((_DWORD *)v5 + 4))
      goto LABEL_24;
    result = *(_QWORD *)(*(_QWORD *)(result + 16) + 56);
    v6 = *v5;
    if (*v5 && (v7 = *(_DWORD *)(v6 + 4)) != 0)
    {
      if (v7 != 1)
      {
LABEL_6:
        v8 = *(_QWORD *)(result + 64760);
        if (!v8 || v6 != *(_QWORD *)(v8 + 8))
        {
          result = JSC::jsStringWithCacheSlowCase();
          v8 = result;
        }
        goto LABEL_9;
      }
      v13 = *(unsigned __int8 **)(v6 + 8);
      if ((*(_BYTE *)(v6 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v15 = *(unsigned __int16 *)v13;
        if (v15 > 0xFF)
          goto LABEL_6;
        v14 = v15;
      }
      v8 = *(_QWORD *)(result + 8 * v14 + 42216);
    }
    else
    {
      v8 = *(_QWORD *)(result + 41968);
    }
LABEL_9:
    v9 = *(_QWORD *)(v2 + 8);
    if (!*(_BYTE *)(v9 + 8))
      *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v9 = v8;
    v4 = **(_QWORD **)v2;
  }
  if (v4 != 1)
  {
LABEL_17:
    v12 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 32);
    return result;
  }
  v10 = *(_QWORD *)(v2 + 32);
  if (*(_DWORD *)(v10 + 16) == 1)
  {
    result = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v10);
    v11 = *(_QWORD *)(v2 + 8);
    if (!*(_BYTE *)(v11 + 8))
      *(_BYTE *)(v11 + 8) = 1;
    *(_QWORD *)v11 = result;
    goto LABEL_17;
  }
LABEL_24:
  v16 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSIDBKeyRange::createStructure(v16, v17, v18);
}

uint64_t WebCore::JSIDBKeyRange::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSIDBObjectStore::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD ***)a3;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          if (*v8)
            *v10 += 2;
          *v6++ = v10;
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
  }
}

uint64_t WebCore::getDOMStructure<WebCore::JSIDBOpenDBRequest>(WebCore::JSIDBOpenDBRequest *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSIDBOpenDBRequest::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSIDBOpenDBRequest::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSIDBOpenDBRequest::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBOpenDBRequest>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSIDBOpenDBRequest::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 41456);
  v7 = *(_QWORD *)(v6 + 23536);
  v8 = *(_QWORD **)(v7 + 936);
  if (!v8)
  {
    v9 = *(_QWORD *)(v6 + 22648);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_6:
    v11 = *(_QWORD *)(v9 + 2824);
    v26 = *(_QWORD *)(v11 + 936);
    if (!v26)
    {
      v12 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v28, "IsoSpace T");
      v27 = 0;
      MEMORY[0x19AEA3204](v12, &v28, v5 + 192, v5 + 1872, 32, 8, &v27);
      v14 = v27;
      v27 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v28;
      v28 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v13);
        else
          --*(_DWORD *)v15;
      }
      v26 = v12;
      v16 = *(_QWORD *)(v11 + 936);
      *(_QWORD *)(v11 + 936) = v12;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = *(unsigned int *)(v9 + 2844);
      if ((_DWORD)v17 == *(_DWORD *)(v9 + 2840))
      {
        WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v9 + 2832, (unint64_t)&v26);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v9 + 2832) + 8 * v17) = v12;
        *(_DWORD *)(v9 + 2844) = v17 + 1;
      }
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v18 = *(_QWORD *)(v7 + 936);
    *(_QWORD *)(v7 + 936) = v8;
    if (v18)
    {
      v19 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v19, v20);
    }
    v21 = __ldxr((unsigned __int8 *)v9);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_23:
  SlowCase = v8[3];
  if (SlowCase < v8[4])
  {
LABEL_24:
    v8[3] = SlowCase + 32;
    goto LABEL_25;
  }
  SlowCase = v8[5];
  if ((SlowCase & 1) == 0)
  {
    v25 = *(_QWORD *)(SlowCase + 8) ^ v8[6];
    v8[4] = SlowCase + HIDWORD(v25);
    v8[5] = SlowCase + (int)v25;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)SlowCase = 0;
  v23 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v23;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::IDBOpenDBRequest,WebCore::JSIDBOpenDBRequest>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE335DA0 & 1) == 0)
  {
    qword_1EE335D98 = (uint64_t)&off_1E32A80B0;
    byte_1EE335DA0 = 1;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE335D98;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE335D98;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSIDBRequest>(WebCore::JSIDBRequest *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSIDBRequest::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSIDBRequest::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSIDBRequest::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBRequest>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore12DOMExceptionENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEENS9_INSA_9IDBCursorENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int **)(v2 + 152);
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEENS9_INSA_9IDBCursorENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int **)(*(_QWORD *)(v2 + 144) + 152);
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEENS9_INSA_9IDBCursorENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEENS9_INSA_9IDBCursorENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  if (*a3)
  {
    v4 = (unsigned int *)(*(_QWORD *)(v3 + 152) + 24);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEENS9_INSA_9IDBCursorENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  if (*a3)
  {
    v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 152) + 24);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEENS9_INSA_9IDBCursorENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

uint64_t WebCore::JSIDBRequest::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 41456);
  v7 = *(_QWORD *)(v6 + 23536);
  v8 = *(_QWORD **)(v7 + 944);
  if (!v8)
  {
    v9 = *(_QWORD *)(v6 + 22648);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_6:
    v11 = *(_QWORD *)(v9 + 2824);
    v26 = *(_QWORD *)(v11 + 944);
    if (!v26)
    {
      v12 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v28, "IsoSpace T");
      v27 = 0;
      MEMORY[0x19AEA3204](v12, &v28, v5 + 192, v5 + 1872, 32, 8, &v27);
      v14 = v27;
      v27 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v28;
      v28 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v13);
        else
          --*(_DWORD *)v15;
      }
      v26 = v12;
      v16 = *(_QWORD *)(v11 + 944);
      *(_QWORD *)(v11 + 944) = v12;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = *(unsigned int *)(v9 + 2844);
      if ((_DWORD)v17 == *(_DWORD *)(v9 + 2840))
      {
        WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v9 + 2832, (unint64_t)&v26);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v9 + 2832) + 8 * v17) = v12;
        *(_DWORD *)(v9 + 2844) = v17 + 1;
      }
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v18 = *(_QWORD *)(v7 + 944);
    *(_QWORD *)(v7 + 944) = v8;
    if (v18)
    {
      v19 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v19, v20);
    }
    v21 = __ldxr((unsigned __int8 *)v9);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_23:
  SlowCase = v8[3];
  if (SlowCase < v8[4])
  {
LABEL_24:
    v8[3] = SlowCase + 32;
    goto LABEL_25;
  }
  SlowCase = v8[5];
  if ((SlowCase & 1) == 0)
  {
    v25 = *(_QWORD *)(SlowCase + 8) ^ v8[6];
    v8[4] = SlowCase + HIDWORD(v25);
    v8[5] = SlowCase + (int)v25;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)SlowCase = 0;
  v23 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v23;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::IDBRequest,WebCore::JSIDBRequest>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE335DB0 & 1) == 0)
  {
    qword_1EE335DA8 = (uint64_t)&off_1E32A80E0;
    byte_1EE335DB0 = 1;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE335DA8;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE335DA8;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSIDBTransaction>(WebCore::JSIDBTransaction *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSIDBTransaction::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSIDBTransaction::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSIDBTransaction::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSIDBTransaction>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSIDBTransaction::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 41456);
  v7 = *(_QWORD *)(v6 + 23536);
  v8 = *(_QWORD **)(v7 + 952);
  if (!v8)
  {
    v9 = *(_QWORD *)(v6 + 22648);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_6:
    v11 = *(_QWORD *)(v9 + 2824);
    v26 = *(_QWORD *)(v11 + 952);
    if (!v26)
    {
      v12 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v28, "IsoSpace T");
      v27 = 0;
      MEMORY[0x19AEA3204](v12, &v28, v5 + 192, v5 + 1872, 32, 8, &v27);
      v14 = v27;
      v27 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v28;
      v28 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v13);
        else
          --*(_DWORD *)v15;
      }
      v26 = v12;
      v16 = *(_QWORD *)(v11 + 952);
      *(_QWORD *)(v11 + 952) = v12;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = *(unsigned int *)(v9 + 2844);
      if ((_DWORD)v17 == *(_DWORD *)(v9 + 2840))
      {
        WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v9 + 2832, (unint64_t)&v26);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v9 + 2832) + 8 * v17) = v12;
        *(_DWORD *)(v9 + 2844) = v17 + 1;
      }
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v18 = *(_QWORD *)(v7 + 952);
    *(_QWORD *)(v7 + 952) = v8;
    if (v18)
    {
      v19 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v19, v20);
    }
    v21 = __ldxr((unsigned __int8 *)v9);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_23:
  SlowCase = v8[3];
  if (SlowCase < v8[4])
  {
LABEL_24:
    v8[3] = SlowCase + 32;
    goto LABEL_25;
  }
  SlowCase = v8[5];
  if ((SlowCase & 1) == 0)
  {
    v25 = *(_QWORD *)(SlowCase + 8) ^ v8[6];
    v8[4] = SlowCase + HIDWORD(v25);
    v8[5] = SlowCase + (int)v25;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)SlowCase = 0;
  v23 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v23;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::IDBTransaction,WebCore::JSIDBTransaction>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE335DC0 & 1) == 0)
  {
    qword_1EE335DB8 = (uint64_t)&off_1E32A8110;
    byte_1EE335DC0 = 1;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE335DB8;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE335DB8;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSIIRFilterNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSIIRFilterNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSIIRFilterNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSIIRFilterNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSIIRFilterNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSIdleDeadline::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSImageBitmap::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSImageBitmapRenderingContext::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSImageCapture::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSInputDeviceInfo>(WebCore::JSMediaDeviceInfo *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t result;
  JSC::JSCell *v14;
  unint64_t v15;
  unint64_t SlowCase;
  int v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::Structure *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26[6];
  int v27;
  int v28;
  JSC::Structure *v29;
  int v30;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSInputDeviceInfo::s_info + ~((_QWORD)&WebCore::JSInputDeviceInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSInputDeviceInfo::s_info + ~((_QWORD)&WebCore::JSInputDeviceInfo::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSInputDeviceInfo::s_info)
    {
LABEL_6:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSInputDeviceInfo::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (JSC::JSCell *)WebCore::JSMediaDeviceInfo::prototype(this, a2, a3);
  LODWORD(v26[0]) = 23;
  v15 = JSC::Structure::create((uint64_t *)this, (int)a2, v14);
  *(_DWORD *)(v15 + 16) |= 0x80000u;
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase >= *((_QWORD *)this + 4864))
  {
    SlowCase = *((_QWORD *)this + 4865);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_9;
    }
    v25 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v25);
    *((_QWORD *)this + 4865) = SlowCase + (int)v25;
  }
  *((_QWORD *)this + 4863) = SlowCase + 16;
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  v17 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)SlowCase = v15 >> 4;
  *(_DWORD *)(SlowCase + 4) = v17;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSInputDeviceInfo::s_info, (uint64_t)&WebCore::JSInputDeviceInfoPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v18 = *(_QWORD *)(*((_QWORD *)this + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = JSC::JSString::create((uint64_t)this, v26);
  v21 = v26[0];
  v26[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v30 = *(_DWORD *)SlowCase;
  v29 = v22;
  v23 = JSC::Structure::outOfLineCapacity(v22);
  v27 = 0;
  v28 = v23;
  v26[0] = (WTF::StringImpl *)&v28;
  v26[1] = (WTF::StringImpl *)SlowCase;
  v26[2] = this;
  v26[3] = (WTF::StringImpl *)&v30;
  v26[4] = (WTF::StringImpl *)&v29;
  v26[5] = (WTF::StringImpl *)&v27;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v22, this, v18, 6, (uint64_t)v26);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v27, v20);
  *((_DWORD *)v22 + 4) |= 0x10u;
  LODWORD(v26[0]) = 23;
  v24 = JSC::Structure::create((uint64_t *)this, (int)a2, (JSC::JSCell *)SlowCase);
  return WebCore::cacheDOMStructure((JSCell *)a2, v24, (uint64_t)&WebCore::JSInputDeviceInfo::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSInputEvent>(WebCore::JSUIEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t result;
  JSC::JSCell *v14;
  unint64_t v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSInputEvent::s_info + ~((_QWORD)&WebCore::JSInputEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSInputEvent::s_info + ~((_QWORD)&WebCore::JSInputEvent::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSInputEvent::s_info)
    {
LABEL_6:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSInputEvent::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(this, a2, a3);
  v15 = JSC::Structure::create((uint64_t *)this, (int)a2, v14);
  *(_DWORD *)(v15 + 16) |= 0x80000u;
  v17 = (JSC::JSCell *)WebCore::JSInputEventPrototype::create(this, a2, v15, v16);
  v18 = JSC::Structure::create((uint64_t *)this, (int)a2, v17);
  return WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSInputEvent::s_info);
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::InspectorFrontendHost::ContextMenuItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::InspectorFrontendHost::ContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  JSC::JSCell *IndexQuickly;
  JSC::JSCell *v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::InspectorFrontendHost::ContextMenuItem>>::convert((uint64_t)a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::InspectorFrontendHost::ContextMenuItem>>::convert((uint64_t)a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::InspectorFrontendHost::ContextMenuItem>>::convert(uint64_t result, JSC::JSCell *this, uint64_t a3)
{
  int v3;
  unsigned int v4;
  JSC::VM *v6;
  int v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSC::JSGlobalObject *v14;
  uint64_t Object;
  JSC::Structure *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  int v19;
  JSC::VM *v20;
  double v21;
  _BOOL4 v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  JSC::VM *v25;
  double v26;
  _BOOL4 v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  JSC::VM *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  JSC::VM *v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  int *v64;
  int v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  int *v69;
  int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  char v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  int v105;
  WTF *v106;
  int v107;
  unsigned int v108;
  char v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  int v113;
  WTF *v114;
  unint64_t v115;
  unsigned __int8 v116;
  int v117;
  __int16 v118;
  char v119;
  JSC::VM *v120;
  JSC::VM *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl **v124;

  v6 = *(JSC::VM **)(result + 56);
  v120 = v6;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v7 = 0;
    v8 = 0;
    LODWORD(v9) = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_89;
  }
  v14 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    v55 = 1;
    v117 = 1;
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AC3D8[v55])(&v102, &v110);
  }
  v16 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v18 = JSC::JSObject::get(v16, v14, (unint64_t)v110);
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v17);
    else
      *(_DWORD *)v110 -= 2;
  }
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
      goto LABEL_142;
  }
  if (v18 == 10)
  {
    v19 = 0;
    goto LABEL_19;
  }
  v20 = (JSC::VM *)*((_QWORD *)v14 + 7);
  if (v18 >= 0xFFFE000000000000)
  {
    v61 = (_DWORD)v18 == 0;
    goto LABEL_181;
  }
  *(_QWORD *)&v21 = v18 - 0x2000000000000;
  if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v22 = v21 > 0.0 || v21 < 0.0;
    goto LABEL_15;
  }
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    v22 = v18 == 7;
    goto LABEL_15;
  }
  v62 = *(unsigned __int8 *)(v18 + 5);
  if (v62 == 3)
  {
    v65 = *(_DWORD *)(v18 + 8);
LABEL_180:
    v61 = v65 == 0;
    goto LABEL_181;
  }
  if (v62 == 2)
  {
    v63 = *(_QWORD *)(v18 + 8);
    if ((v63 & 1) != 0)
      v64 = (int *)(v18 + 16);
    else
      v64 = (int *)(v63 + 4);
    v65 = *v64;
    goto LABEL_180;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) != 0)
  {
    v61 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == (_QWORD)v14;
LABEL_181:
    v22 = !v61;
    goto LABEL_15;
  }
  v22 = 1;
LABEL_15:
  if (*((_DWORD *)v20 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
    if ((_DWORD)result)
      goto LABEL_142;
  }
  if (v22)
    v19 = 16842752;
  else
    v19 = 0x1000000;
LABEL_19:
  WTF::AtomStringImpl::addLiteral();
  v24 = JSC::JSObject::get(v16, v14, (unint64_t)v110);
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v23);
    else
      *(_DWORD *)v110 -= 2;
  }
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
      goto LABEL_142;
  }
  if (v24 == 10)
    goto LABEL_30;
  v25 = (JSC::VM *)*((_QWORD *)v14 + 7);
  if (v24 >= 0xFFFE000000000000)
  {
    v66 = (_DWORD)v24 == 0;
    goto LABEL_188;
  }
  *(_QWORD *)&v26 = v24 - 0x2000000000000;
  if (v24 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v26 <= 0.0)
    {
      v27 = v26 < 0.0;
      goto LABEL_28;
    }
  }
  else
  {
    if ((v24 & 0xFFFE000000000002) != 0)
    {
      v27 = v24 == 7;
      goto LABEL_28;
    }
    v67 = *(unsigned __int8 *)(v24 + 5);
    if (v67 == 3)
    {
      v70 = *(_DWORD *)(v24 + 8);
LABEL_187:
      v66 = v70 == 0;
      goto LABEL_188;
    }
    if (v67 == 2)
    {
      v68 = *(_QWORD *)(v24 + 8);
      if ((v68 & 1) != 0)
        v69 = (int *)(v24 + 16);
      else
        v69 = (int *)(v68 + 4);
      v70 = *v69;
      goto LABEL_187;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v66 = *(_QWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x28) == (_QWORD)v14;
LABEL_188:
      v27 = !v66;
      goto LABEL_28;
    }
  }
  v27 = 1;
LABEL_28:
  if (*((_DWORD *)v25 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
    if ((_DWORD)result)
      goto LABEL_142;
  }
  v19 |= v27 | 0x100;
LABEL_30:
  WTF::AtomStringImpl::addLiteral();
  v9 = (WTF::StringImpl *)JSC::JSObject::get(v16, v14, (unint64_t)v110);
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v28);
    else
      *(_DWORD *)v110 -= 2;
  }
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
      goto LABEL_142;
  }
  if (v9 == (WTF::StringImpl *)10)
  {
    v101 = 0;
    LODWORD(v9) = 0;
  }
  else
  {
    v110 = v9;
    v29 = (JSC::VM *)*((_QWORD *)v14 + 7);
    if ((unint64_t)v9 < 0xFFFE000000000000)
    {
      v51 = (unint64_t)v9 - 0x2000000000000;
      if ((unint64_t)v9 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v110, v14);
        v51 = v60;
      }
      v52 = (v51 >> 52) & 0x7FF;
      if ((v52 - 1023) <= 0x53)
      {
        v53 = v51 >> (51 - (v51 >> 52));
        if (v52 > 0x433)
          LODWORD(v53) = v51 << ((v51 >> 52) - 51);
        if (v52 >= 0x41F)
          v54 = v53;
        else
          v54 = (((1 << ((v51 >> 52) + 1)) - 1) & v53) + (1 << ((v51 >> 52) + 1));
        if ((v51 & 0x8000000000000000) == 0)
          LODWORD(v9) = v54;
        else
          LODWORD(v9) = -v54;
      }
      else
      {
        LODWORD(v9) = 0;
      }
    }
    if (*((_DWORD *)v29 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
      if ((_DWORD)result)
        goto LABEL_142;
    }
    v101 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v30 = v110;
  v32 = JSC::JSObject::get(v16, v14, (unint64_t)v110);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
    {
LABEL_142:
      v117 = 1;
      goto LABEL_204;
    }
  }
  if (v32 == 10)
  {
    v100 = v19;
    v10 = 0;
    goto LABEL_56;
  }
  v110 = (WTF::StringImpl *)v32;
  v33 = (JSC::VM *)*((_QWORD *)v14 + 7);
  if ((v32 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v32 + 5) == 2)
  {
    v34 = *(WTF::StringImpl **)(v32 + 8);
    if ((v34 & 1) != 0)
    {
      v34 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v32, v14);
      if (!v34)
        goto LABEL_50;
    }
    else if (!v34)
    {
LABEL_50:
      v122 = v34;
      goto LABEL_51;
    }
    *(_DWORD *)v34 += 2;
    goto LABEL_50;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v110, v14);
LABEL_51:
  if (!*((_DWORD *)v33 + 20))
  {
    v10 = v122;
LABEL_53:
    LODWORD(v103) = 0;
    v35 = 0;
    v102 = 0;
    v36 = 1;
    goto LABEL_54;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
  v10 = v122;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_53;
  v35 = 1;
  LODWORD(v103) = 1;
  v122 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v57);
      v35 = (int)v103;
      v117 = 1;
      v10 = 0;
      v36 = 0;
      goto LABEL_54;
    }
    *(_DWORD *)v10 -= 2;
  }
  v10 = 0;
  v36 = 0;
  v117 = 1;
LABEL_54:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v35])(&v122, &v102);
  if (!v36)
    goto LABEL_197;
  v100 = v19;
LABEL_56:
  WTF::AtomStringImpl::addLiteral();
  v37 = v102;
  v39 = JSC::JSObject::get(v16, v14, (unint64_t)v102);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
    {
      v13 = 0;
      v117 = 1;
      goto LABEL_198;
    }
  }
  if (v39 == 10)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_73;
  }
  v40 = (JSC::VM *)*((_QWORD *)v14 + 7);
  v121 = v40;
  if ((v39 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v39 + 5) > 0x16u)
  {
    v122 = 0;
    v123 = 0;
    v124 = &v122;
    result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::InspectorFrontendHost::ContextMenuItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::InspectorFrontendHost::ContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(v14, v39, &v124);
    if (*((_DWORD *)v40 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v40), (result & 1) != 0))
    {
      LODWORD(v104) = 1;
      result = (uint64_t)v122;
      if (HIDWORD(v123))
      {
        WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(v122, (WTF::StringImpl *)((char *)v122 + 56 * HIDWORD(v123)));
        result = (uint64_t)v122;
      }
      if (result)
      {
        v122 = 0;
        LODWORD(v123) = 0;
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    else
    {
      v102 = v122;
      v103 = v123;
      LODWORD(v104) = 0;
    }
    v41 = v104;
    if (!(_DWORD)v104)
    {
      v12 = v102;
      v4 = HIDWORD(v103);
      v99 = (int)v103;
      v11 = 1;
      v102 = 0;
      v103 = 0;
      goto LABEL_72;
    }
    v3 = 1;
    v117 = 1;
    if ((_DWORD)v104 != -1)
    {
      v12 = 0;
      v11 = 0;
      goto LABEL_72;
    }
LABEL_197:
    v13 = 0;
    goto LABEL_198;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  JSC::throwTypeError();
  v43 = v122;
  v122 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v12 = 0;
  v11 = 0;
  v41 = 1;
  LODWORD(v104) = 1;
  v117 = 1;
LABEL_72:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AAFC0[v41])(&v122, &v102);
  if ((v11 & 1) == 0)
  {
    v13 = 0;
    if (!v11)
      goto LABEL_198;
    goto LABEL_93;
  }
LABEL_73:
  WTF::AtomStringImpl::addLiteral();
  v44 = v102;
  result = JSC::JSObject::get(v16, v14, (unint64_t)v102);
  v45 = result;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      result = WTF::StringImpl::destroy(v44, this);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (!*((_DWORD *)v6 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v6), (result & 1) == 0))
  {
    v7 = v100;
    if (v45 == 10)
    {
      v13 = 0;
      v8 = v101;
      v3 = v99;
LABEL_89:
      v110 = v13;
      v111 = v10;
      LODWORD(v112) = (_DWORD)v9;
      BYTE4(v112) = v8;
      *(_WORD *)((char *)&v112 + 5) = v118;
      HIBYTE(v112) = v119;
      v113 = v7;
      LOBYTE(v114) = 0;
      v116 = 0;
      v50 = 0;
      v10 = 0;
      if (v11)
      {
        v114 = v12;
        v115 = __PAIR64__(v4, v3);
        v11 = 1;
        v116 = 1;
        v4 = 0;
        v12 = 0;
      }
      goto LABEL_91;
    }
    v122 = (WTF::StringImpl *)v45;
    v46 = (JSC::VM *)*((_QWORD *)v14 + 7);
    if ((v45 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v45 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v122, v14);
LABEL_85:
      if (*((_DWORD *)v46 + 20))
      {
        v58 = JSC::VM::hasExceptionsAfterHandlingTraps(v46);
        v13 = (WTF::StringImpl *)v124;
        if (v58)
        {
          v48 = 1;
          LODWORD(v103) = 1;
          v124 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v59);
            else
              *(_DWORD *)v13 -= 2;
          }
          v49 = 0;
          v13 = 0;
          v117 = 1;
LABEL_88:
          result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32A90E0[v48])(&v122, &v102);
          v8 = v101;
          v3 = v99;
          if (!v49)
            goto LABEL_92;
          goto LABEL_89;
        }
      }
      else
      {
        v13 = (WTF::StringImpl *)v124;
      }
      v48 = 0;
      LODWORD(v103) = 0;
      v102 = 0;
      v49 = 1;
      goto LABEL_88;
    }
    v47 = *(WTF::StringImpl ***)(v45 + 8);
    if ((v47 & 1) != 0)
    {
      v47 = *(WTF::StringImpl ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v45, v14);
      if (!v47)
        goto LABEL_84;
    }
    else if (!v47)
    {
LABEL_84:
      v124 = v47;
      goto LABEL_85;
    }
    *(_DWORD *)v47 += 2;
    goto LABEL_84;
  }
  v50 = 1;
LABEL_91:
  v13 = 0;
  v117 = v50;
LABEL_92:
  if (!v11)
    goto LABEL_198;
LABEL_93:
  if (v4)
    result = (uint64_t)WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(v12, (WTF::StringImpl *)((char *)v12 + 56 * v4));
  if (v12)
    result = WTF::fastFree(v12, this);
LABEL_198:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      result = WTF::StringImpl::destroy(v10, this);
      if (!v13)
        goto LABEL_204;
      goto LABEL_202;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v13)
    goto LABEL_204;
LABEL_202:
  if (*(_DWORD *)v13 == 2)
    result = WTF::StringImpl::destroy(v13, this);
  else
    *(_DWORD *)v13 -= 2;
LABEL_204:
  v55 = v117;
  if (!v117)
  {
    v71 = v110;
    v72 = v111;
    v110 = 0;
    v111 = 0;
    v102 = v71;
    v103 = v72;
    v104 = v112;
    v73 = v113;
    v105 = v113;
    LOBYTE(v106) = 0;
    v109 = 0;
    v74 = v116;
    if (v116)
    {
      v106 = v114;
      v3 = v115;
      v73 = HIDWORD(v115);
      v114 = 0;
      v115 = 0;
      v107 = v3;
      v108 = v73;
      v109 = 1;
    }
    v75 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v75 == *(_DWORD *)(a3 + 8))
    {
      v76 = WTF::Vector<WebCore::InspectorFrontendHost::ContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v75 + 1, (unint64_t)&v102);
      v77 = *(_DWORD *)(a3 + 12);
      v78 = *(_QWORD *)a3;
      v79 = *(_QWORD *)a3 + 56 * v77;
      v80 = *(_QWORD *)v76;
      *(_QWORD *)v76 = 0;
      *(_QWORD *)v79 = v80;
      v81 = *((_QWORD *)v76 + 1);
      *((_QWORD *)v76 + 1) = 0;
      *(_QWORD *)(v79 + 8) = v81;
      LODWORD(v81) = *((_DWORD *)v76 + 6);
      v82 = *((_QWORD *)v76 + 2);
      *(_BYTE *)(v79 + 32) = 0;
      v83 = v79 + 32;
      *(_QWORD *)(v83 - 16) = v82;
      *(_DWORD *)(v83 - 8) = v81;
      *(_BYTE *)(v83 + 16) = 0;
      v84 = (_BYTE *)(v83 + 16);
      if (v76[48])
      {
        *(_QWORD *)v83 = 0;
        *(_QWORD *)(v83 + 8) = 0;
        v85 = *((_QWORD *)v76 + 4);
        *((_QWORD *)v76 + 4) = 0;
        *(_QWORD *)v83 = v85;
        v86 = *((_DWORD *)v76 + 10);
        *((_DWORD *)v76 + 10) = 0;
        v87 = v78 + 56 * v77;
        *(_DWORD *)(v87 + 40) = v86;
        v88 = *((_DWORD *)v76 + 11);
        *((_DWORD *)v76 + 11) = 0;
        *(_DWORD *)(v87 + 44) = v88;
LABEL_212:
        *v84 = 1;
      }
    }
    else
    {
      v89 = *(_QWORD *)a3;
      v90 = *(_QWORD *)a3 + 56 * v75;
      v102 = 0;
      *(_QWORD *)v90 = v71;
      v103 = 0;
      *(_QWORD *)(v90 + 8) = v72;
      v91 = v104;
      v92 = v105;
      *(_BYTE *)(v90 + 32) = 0;
      v93 = v90 + 32;
      *(_DWORD *)(v93 - 8) = v92;
      *(_QWORD *)(v93 - 16) = v91;
      *(_BYTE *)(v93 + 16) = 0;
      v84 = (_BYTE *)(v93 + 16);
      if (v74)
      {
        *(_QWORD *)(v93 + 8) = 0;
        v94 = v106;
        v106 = 0;
        *(_QWORD *)v93 = v94;
        v107 = 0;
        v95 = v89 + 56 * v75;
        *(_DWORD *)(v95 + 40) = v3;
        v108 = 0;
        *(_DWORD *)(v95 + 44) = v73;
        goto LABEL_212;
      }
    }
    ++*(_DWORD *)(a3 + 12);
    if (v109)
    {
      v96 = v106;
      if (v108)
      {
        WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(v106, (WTF *)((char *)v106 + 56 * v108));
        v96 = v106;
      }
      if (v96)
      {
        v106 = 0;
        v107 = 0;
        WTF::fastFree(v96, this);
      }
    }
    v97 = v103;
    v103 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, this);
      else
        *(_DWORD *)v97 -= 2;
    }
    v98 = v102;
    v102 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
        WTF::StringImpl::destroy(v98, this);
      else
        *(_DWORD *)v98 -= 2;
    }
    v55 = 0;
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AC3D8[v55])(&v102, &v110);
  }
  if (v117 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E32AC3D8[v55])(&v102, &v110);
  return result;
}

