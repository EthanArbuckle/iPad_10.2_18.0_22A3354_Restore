WTF::StringImpl *WebCore::FetchBodyConsumer::resolve(WTF::StringImpl *result, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  void *v17;
  int *v18;
  uint64_t v19;
  WebCore::UserGestureToken *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  WTF::StringImpl *v36;
  char *v37;
  void *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  int v45;
  _DWORD *v46;
  WTF::StringImpl *v47;

  v6 = a2;
  v7 = result;
  if (a5)
  {
    v25 = (WTF::StringImpl *)*a2;
    *a2 = 0;
    v44[0] = v25;
    v44[1] = 0;
    v45 = *(_DWORD *)result;
    v26 = (_DWORD *)*a3;
    if (*a3)
      *v26 += 2;
    v46 = v26;
    WTF::Function<void ()(WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&)>::Function<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0,void>((uint64_t *)&v47, (uint64_t *)v44);
    v28 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v28 + 8) = 1;
    *(_QWORD *)v28 = off_1E3367688;
    v29 = v47;
    v47 = 0;
    *(_QWORD *)(v28 + 16) = v29;
    v30 = (_DWORD *)*((_QWORD *)v7 + 3);
    *((_QWORD *)v7 + 3) = v28;
    if (v30)
    {
      if (v30[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        v42 = v47;
        v47 = 0;
        if (v42)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
        goto LABEL_36;
      }
      --v30[2];
    }
    v47 = 0;
LABEL_36:
    WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0::~$_0((uint64_t)v44, v27);
    return (WTF::StringImpl *)WebCore::InternalReadableStream::pipeTo(*(_QWORD *)(a5 + 8), *((WTF::StringImpl **)v7 + 3));
  }
  if (*((_BYTE *)result + 40))
  {
    if (a4)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4);
    if (WTF::isMainThread(result))
    {
      v18 = &dword_1ECE90000;
      {
        v19 = WebCore::currentToken(void)::token;
        if (WebCore::currentToken(void)::token)
          ++*(_DWORD *)WebCore::currentToken(void)::token;
      }
      else
      {
LABEL_72:
        v19 = 0;
        WebCore::currentToken(void)::token = 0;
        *((_BYTE *)v18 + 1392) = 1;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = (WebCore::UserGestureToken *)*((_QWORD *)v7 + 6);
    *((_QWORD *)v7 + 6) = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::UserGestureToken::~UserGestureToken(v20, v17);
        WTF::fastFree(v22, v23);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
    v21 = *v6;
    *v6 = 0;
    result = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = v21;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
      else
        --*((_DWORD *)result + 4);
    }
  }
  else
  {
    switch(*(_DWORD *)result)
    {
      case 1:
        WebCore::SharedBufferBuilder::takeAsArrayBuffer((WTF::StringImpl *)((char *)result + 8), v44);
        WebCore::fulfillPromiseWithArrayBuffer(v6, v44[0]);
        goto LABEL_38;
      case 2:
        v15 = *a2;
        v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v16 = &unk_1E3355C30;
        *((_QWORD *)v16 + 1) = v7;
        *((_QWORD *)v16 + 2) = a3;
        v44[0] = v16;
        WebCore::DeferredPromise::resolveCallbackValueWithNewlyCreated<WebCore::IDLInterface<WebCore::Blob>>(v15, v44);
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
      case 3:
        WebCore::SharedBufferBuilder::takeAsArrayBuffer((WTF::StringImpl *)((char *)result + 8), v44);
        if (v44[0])
        {
          v43 = v44[0];
          v44[0] = 0;
          JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(&v43, (uint64_t *)&v47);
          v31 = v47;
          v47 = 0;
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v43);
          WebCore::fulfillPromiseWithUint8Array(v6, v31);
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
              JSC::ArrayBufferView::operator delete();
            else
              --*(_DWORD *)v31;
          }
        }
        else
        {
          WebCore::fulfillPromiseWithUint8Array(v6, 0);
        }
LABEL_38:
        result = v44[0];
        v44[0] = 0;
        if (result)
          return (WTF::StringImpl *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
        return result;
      case 4:
        WebCore::FetchBodyConsumer::takeAsText((uint64_t *)v44, (uint64_t)result);
        WebCore::fulfillPromiseWithJSON(v6);
        goto LABEL_10;
      case 5:
        v6 = (uint64_t *)*a2;
        v8 = (WTF::StringImpl *)*((_QWORD *)result + 1);
        if (v8)
        {
          *((_QWORD *)v7 + 1) = 0;
          v44[0] = v8;
          WebCore::FragmentedSharedBuffer::makeContiguous(v8, &v47);
          WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v44, v9);
          v7 = v47;
          if (*((_DWORD *)v47 + 5))
          {
            v10 = *(_QWORD *)(*((_QWORD *)v47 + 1) + 8);
            v11 = *(unsigned int *)(v10 + 24);
            if ((_DWORD)v11 == -1)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_72;
            }
            v44[0] = (WTF::StringImpl *)&v43;
            v12 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v11])(v44, v10 + 8);
          }
          else
          {
            v12 = 0;
          }
          WebCore::TextResourceDecoder::textFromUTF8(v12, *((_QWORD *)v7 + 6), v44);
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v47, v13);
        }
        else
        {
          v44[0] = 0;
        }
        WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>((uint64_t)v6, (uint64_t *)v44);
LABEL_10:
        result = v44[0];
        v44[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
          else
            *(_DWORD *)result -= 2;
        }
        break;
      case 6:
        v32 = (WTF *)*((_QWORD *)result + 1);
        if (v32)
        {
          *((_QWORD *)result + 1) = 0;
          v44[0] = 0;
          WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v44, a2);
        }
        v33 = *(_QWORD *)(*v6 + 8);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
            v35 = (char *)(v34 - 96);
          else
            v35 = 0;
        }
        else
        {
          v35 = 0;
        }
        if (v32)
        {
          WebCore::FragmentedSharedBuffer::makeContiguous(v32, &v47);
          v36 = v47;
          v37 = (char *)WebCore::SharedBuffer::data(v47);
          WebCore::FetchBodyConsumer::packageFormData((uint64_t *)v44, v35, (uint64_t)a3, v37, *((_QWORD *)v36 + 6));
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v47, v38);
        }
        else
        {
          WebCore::FetchBodyConsumer::packageFormData((uint64_t *)v44, v35, (uint64_t)a3, 0, 0);
        }
        v39 = v44[0];
        v40 = *v6;
        if (v44[0])
        {
          result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::DOMFormData>>(v40, v44[0]);
          if (*((_DWORD *)v39 + 4) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39);
          else
            --*((_DWORD *)v39 + 4);
        }
        else
        {
          v47 = 0;
          WebCore::DeferredPromise::reject(v40, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v47, 0);
          result = v47;
          v47 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v41);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if (v32)
          return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v32, v41);
        return result;
      default:
        return result;
    }
  }
  return result;
}

uint64_t WebCore::FetchBodySource::enqueue(uint64_t a1, _QWORD *a2)
{
  JSC::ArrayBuffer *v3;

  if (*(_BYTE *)(a1 + 24))
    return WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(a1 + 16), a2);
  v3 = (JSC::ArrayBuffer *)std::__throw_bad_optional_access[abi:sn180100]();
  return JSC::ArrayBuffer::span(v3);
}

uint64_t JSC::ArrayBuffer::span(JSC::ArrayBuffer *this)
{
  uint64_t result;
  uint64_t v2;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    v2 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v2)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        return (result & 0x3FFFFFFFFLL) + v2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::FetchBodyOwner::loadBlob(WebCore::FetchBodyOwner *this, const WebCore::Blob *a2, WebCore::FetchBodyConsumer *a3)
{
  const WebCore::Blob *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ScriptExecutionContext *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[2];
  __int128 v21;

  v6 = *((_QWORD *)this + 1);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    v3 = a2;
    if (*((_BYTE *)this + 184))
    {
      v8 = *((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
    }
    *((_QWORD *)this + 20) = &off_1E3355898;
    *((_QWORD *)this + 21) = this;
    *((_QWORD *)this + 22) = 0;
    *((_BYTE *)this + 184) = 1;
    v4 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &off_1E3355930;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 24) = (char *)this + 160;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = a3;
    *(_BYTE *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    WTF::URL::invalidate((WTF::URL *)(v4 + 56));
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    if (!*((_BYTE *)this + 184))
      goto LABEL_37;
    v9 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v4;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
      if (!*((_BYTE *)this + 184))
        goto LABEL_37;
      v4 = *((_QWORD *)this + 22);
    }
    v10 = *((_QWORD *)this + 1);
    if (!v10)
      goto LABEL_38;
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v12 = (WebCore::ScriptExecutionContext *)(v11 - 96);
    else
      v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl *)*((_QWORD *)v3 + 10);
      if (v13)
        *(_DWORD *)v13 += 2;
      v19 = v13;
      v14 = *(_OWORD *)((char *)v3 + 104);
      *(_OWORD *)v20 = *(_OWORD *)((char *)v3 + 88);
      v21 = v14;
      WebCore::FetchLoader::startLoadingBlobURL((WebCore::FetchLoader *)v4, v12, (const WTF::URL *)&v19);
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
      if (*((_BYTE *)this + 184))
      {
        if (*(_BYTE *)(*((_QWORD *)this + 22) + 48))
          return result;
        if (*((_BYTE *)this + 128))
          break;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      v12 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v19) = 33;
    WebCore::FetchBodyConsumer::loadingFailed((uint64_t)this + 56, (uint64_t)&v19);
    result = v20[0];
    v20[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
    if (*((_BYTE *)this + 184))
    {
      result = (WTF::StringImpl *)*((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 64))(result);
      *((_BYTE *)this + 184) = 0;
    }
  }
  else
  {
    if (!*((_BYTE *)this + 128))
      goto LABEL_37;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v19) = 33;
    WebCore::FetchBodyConsumer::loadingFailed((uint64_t)this + 56, (uint64_t)&v19);
    result = v20[0];
    v20[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::FetchBodySource::close(WebCore::FetchBodySource *this)
{
  JSC::Structure *v2;
  void *v3;
  WTF *v4;
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  _OWORD v13[4];
  uint64_t v14;

  if (*((_BYTE *)this + 24))
  {
    v12 = (WTF *)((char *)v13 + 8);
    memset(v13, 0, sizeof(v13));
    v14 = 0;
    *((_QWORD *)&v13[0] + 1) = *((_QWORD *)this + 2);
    v11 = 0x800000001;
    v2 = *(JSC::Structure **)(16 * (**((_DWORD **)&v13[0] + 1) & 0xFFFFFFFE) + 0x28);
    WebCore::invokeReadableStreamDefaultControllerFunction(v2, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v2 + 7) + 41456) + 4008));
    v4 = (WTF *)*((_QWORD *)this + 1);
    if (v4)
    {
      *((_QWORD *)this + 1) = 0;
      v5 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v5)
      {
        if (v5[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
        else
          --v5[4];
      }
      WTF::fastFree(v4, v3);
      (*(void (**)(WebCore::FetchBodySource *))(*(_QWORD *)this + 40))(this);
    }
    result = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (result)
    {
      do
      {
        v7 = __ldaxr(result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, result));
      if (!v8)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v3);
      }
    }
  }
  else
  {
    v9 = std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned int *)WebCore::FetchBodyConsumer::loadingFailed(v9, v10);
  }
  return result;
}

WebCore::UserGestureToken *WebCore::FetchBodyConsumer::loadingFailed(uint64_t a1, uint64_t a2)
{
  WebCore::UserGestureToken *result;
  unsigned __int8 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  WebCore::FetchBodyConsumer *v19;
  const WTF::String *v20;
  unsigned __int8 v21[8];
  WTF::StringImpl *v22;
  objc_class *v23;

  *(_BYTE *)(a1 + 40) = 0;
  result = *(WebCore::UserGestureToken **)(a1 + 16);
  if (!result)
    goto LABEL_16;
  v5 = *(_BYTE *)a2;
  v6 = *(WTF::StringImpl **)(a2 + 8);
  if (v6)
    *(_DWORD *)v6 += 4;
  v22 = v6;
  v23 = 0;
  v21[0] = v5;
  WebCore::DeferredPromise::reject((uint64_t)result, v21, 0, &v23);
  v8 = v22;
  v22 = 0;
  if (!v8)
  {
LABEL_7:
    if (v6)
      goto LABEL_8;
    goto LABEL_10;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(v8, v7);
  if (v6)
  {
LABEL_8:
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v7);
    else
      *(_DWORD *)v6 -= 2;
  }
LABEL_10:
  v9 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  result = *(WebCore::UserGestureToken **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(result, v7);
      result = (WebCore::UserGestureToken *)WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
LABEL_16:
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    if (*(_BYTE *)(v10 + 24))
    {
      WebCore::ReadableStreamDefaultController::error((_DWORD **)(v10 + 16), (unsigned __int8 *)a2);
      v12 = *(WTF **)(v10 + 8);
      if (v12)
      {
        *(_QWORD *)(v10 + 8) = 0;
        v13 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        if (v13)
        {
          if (v13[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
          else
            --v13[4];
        }
        WTF::fastFree(v12, v11);
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      }
      v14 = *(unsigned int **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v11);
        }
      }
      result = *(WebCore::UserGestureToken **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      if (result)
      {
        if (*((_DWORD *)result + 8) == 1)
          return (WebCore::UserGestureToken *)(*(uint64_t (**)(WebCore::UserGestureToken *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 8);
      }
    }
    else
    {
      v19 = (WebCore::FetchBodyConsumer *)std::__throw_bad_optional_access[abi:sn180100]();
      return (WebCore::UserGestureToken *)WebCore::FetchBodyConsumer::loadingSucceeded(v19, v20);
    }
  }
  return result;
}

WebCore::FetchBodySource *WebCore::FetchBodyConsumer::loadingSucceeded(WebCore::FetchBodyConsumer *this, const WTF::String *a2)
{
  WebCore::FetchBodySource *result;
  uint64_t v5;
  _DWORD *v6;
  WTF::MonotonicTime *v7;
  double v8;
  double v9;
  uint64_t v10;
  void *v11;
  WebCore::UserGestureToken *v12;
  _DWORD *v13;
  _DWORD *v14;
  WebCore::UserGestureToken *v15;
  _DWORD *v16;

  *((_BYTE *)this + 40) = 0;
  if (*((_QWORD *)this + 2))
  {
    v5 = *((_QWORD *)this + 6);
    if (v5
      && (v7 = (WTF::MonotonicTime *)WebCore::UserGestureToken::maximumIntervalForUserGestureForwardingForFetch(this),
          v8 = *(double *)v7 + *(double *)(v5 + 72),
          WTF::MonotonicTime::now(v7),
          v8 >= v9)
      && (v10 = *((_QWORD *)this + 6), !*(_DWORD *)(v10 + 68))
      && *(_BYTE *)(v10 + 16) == 1)
    {
      ++*(_DWORD *)v10;
      v15 = (WebCore::UserGestureToken *)v10;
      WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)&v16, (uint64_t *)&v15, 1, 1);
      v12 = v15;
      v15 = 0;
      if (v12)
        WTF::RefCounted<WebCore::UserGestureToken>::deref(v12, v11);
      v14 = (_DWORD *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      WebCore::FetchBodyConsumer::resolve(this, (uint64_t *)&v14, a2, 0, 0);
      v13 = v14;
      v14 = 0;
      if (v13)
      {
        if (v13[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
        else
          --v13[4];
      }
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v16);
    }
    else
    {
      v16 = (_DWORD *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      WebCore::FetchBodyConsumer::resolve(this, (uint64_t *)&v16, a2, 0, 0);
      v6 = v16;
      v16 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
    }
  }
  result = (WebCore::FetchBodySource *)*((_QWORD *)this + 4);
  if (result)
  {
    WebCore::FetchBodySource::close(result);
    result = (WebCore::FetchBodySource *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (result)
    {
      if (*((_DWORD *)result + 8) == 1)
        return (WebCore::FetchBodySource *)(*(uint64_t (**)(WebCore::FetchBodySource *))(*(_QWORD *)result
                                                                                                 + 8))(result);
      else
        --*((_DWORD *)result + 8);
    }
  }
  return result;
}

uint64_t *WebCore::FetchBody::bodyAsFormData@<X0>(uint64_t *this@<X0>, void *a2@<X1>, WebCore::FormData **a3@<X8>)
{
  _DWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WebCore::FormData *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  WebCore::FormData *v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  _BYTE *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WebCore::FormData *v29;
  _BYTE *v30;
  WTF::StringImpl *v31;
  void *v32;
  void *v33;
  WebCore::FormData *v34;
  WebCore::FormData **v35;
  void *v36;
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  WTF::StringImpl *v40;
  WebCore::FormData *v41;

  v3 = this;
  v5 = *((_DWORD *)this + 2);
  if (v5 == 6)
  {
    v6 = *this;
    if (*this)
    {
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v7 = 0;
      v8 = 0x100000000;
    }
    PAL::TextCodecUTF8::encodeUTF8(v7, v8, (uint64_t)&v37);
    WebCore::FormData::create((uint64_t *)&v37, (uint64_t *)&v41);
    v9 = v41;
    v41 = 0;
    *a3 = v9;
    WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::~Ref(&v41, v10);
    this = (uint64_t *)v37;
    if (v37)
    {
      v37 = 0;
      LODWORD(v38) = 0;
      return (uint64_t *)WTF::fastFree((WTF *)this, v11);
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        v18 = bmalloc::api::isoAllocate();
        *(_DWORD *)v18 = 1;
        *(_BYTE *)(v18 + 64) = 0;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 8) = 0;
        *(_BYTE *)(v18 + 32) = 0;
        *(_QWORD *)(v18 + 40) = 0;
        *(_QWORD *)(v18 + 48) = 0;
        *(_BYTE *)(v18 + 56) = 0;
        v41 = (WebCore::FormData *)v18;
        if (v3[2] == 1)
        {
          v19 = v18;
          v20 = *(_QWORD *)v3;
          v21 = *(WTF::StringImpl **)(*(_QWORD *)v3 + 80);
          if (v21)
            *(_DWORD *)v21 += 2;
          v37 = v21;
          v22 = *(_OWORD *)(v20 + 104);
          v38 = *(_OWORD *)(v20 + 88);
          v39 = v22;
          WebCore::FormData::appendBlob((WebCore::FormData *)v18, (const WTF::URL *)&v37);
          v24 = v37;
          v37 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v41 = 0;
          *a3 = (WebCore::FormData *)v19;
          v25 = &v41;
          goto LABEL_22;
        }
        v35 = (WebCore::FormData **)std::__throw_bad_variant_access[abi:sn180100]();
        this = (uint64_t *)WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::~Ref(v35, v36);
        break;
      case 2:
        v34 = (WebCore::FormData *)*this;
        *(_DWORD *)v34 = *(_DWORD *)*this + 1;
        *a3 = v34;
        break;
      case 3:
        v26 = (_BYTE *)JSC::ArrayBuffer::span((JSC::ArrayBuffer *)*this);
        goto LABEL_25;
      case 4:
        v26 = (_BYTE *)JSC::ArrayBufferView::span((JSC::ArrayBufferView *)*this);
LABEL_25:
        WebCore::FormData::create(v26, v27, (uint64_t *)&v37);
        v28 = v37;
        v37 = 0;
        *a3 = v28;
        v25 = &v37;
LABEL_22:
        this = (uint64_t *)WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::~Ref(v25, v23);
        break;
      case 5:
        WTF::URLParser::serialize();
        if (v40)
        {
          v12 = *((_QWORD *)v40 + 1);
          v13 = *((unsigned int *)v40 + 1) | ((unint64_t)((*((_DWORD *)v40 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v12 = 0;
          v13 = 0x100000000;
        }
        PAL::TextCodecUTF8::encodeUTF8(v12, v13, (uint64_t)&v37);
        WebCore::FormData::create((uint64_t *)&v37, (uint64_t *)&v41);
        v14 = v41;
        v41 = 0;
        *a3 = v14;
        WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::~Ref(&v41, v15);
        v17 = v37;
        if (v37)
        {
          v37 = 0;
          LODWORD(v38) = 0;
          WTF::fastFree(v17, v16);
        }
        this = (uint64_t *)v40;
        v40 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v16);
          else
            *(_DWORD *)this -= 2;
        }
        break;
      default:
        this = (uint64_t *)WebCore::FetchBodyConsumer::data((WebCore::FetchBodyConsumer *)this[3], a2);
        if (this)
        {
          WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)this, &v41);
          v29 = v41;
          v30 = (_BYTE *)WebCore::SharedBuffer::data(v41);
          WebCore::FormData::create(v30, *((_QWORD *)v29 + 6), (uint64_t *)&v37);
          v31 = v37;
          v37 = 0;
          *a3 = v31;
          WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::~Ref(&v37, v32);
          this = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v41, v33);
        }
        else
        {
          *a3 = 0;
        }
        break;
    }
  }
  return this;
}

WebCore::FormData **WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::~Ref(WebCore::FormData **a1, void *a2)
{
  WebCore::FormData *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FormData::~FormData(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WebCore::FetchBodyConsumer *WebCore::FetchBodyConsumer::data(WebCore::FetchBodyConsumer *this, void *a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  char v19;

  if (this)
  {
    do
      v3 = __ldaxr((unsigned int *)this);
    while (__stlxr(v3 + 1, (unsigned int *)this));
    do
    {
      v4 = __ldaxr((unsigned int *)this);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)this));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)this);
      v7 = *((unsigned int *)this + 5);
      if ((_DWORD)v7)
      {
        v8 = *((_QWORD *)this + 1);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              atomic_store(1u, v10);
              v18 = (WTF *)v10;
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))off_1E3355A48[v13])(&v19, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = (WTF *)*((_QWORD *)this + 1);
      if ((WebCore::FetchBodyConsumer *)((char *)this + 24) != v14 && v14 != 0)
      {
        *((_QWORD *)this + 1) = 0;
        *((_DWORD *)this + 4) = 0;
        WTF::fastFree(v14, a2);
      }
      WTF::fastFree(this, a2);
    }
  }
  return this;
}

uint64_t *WebCore::FetchBody::take@<X0>(uint64_t *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  void *v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v3 = this;
  v5 = this[3];
  if (v5)
  {
    this[3] = 0;
    v52 = 0;
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v52, a2);
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v5, &v52);
    v6 = v52;
    v52 = 0;
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 8) = 2;
    this = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v52, v7);
    do
    {
      v9 = __ldaxr((unsigned int *)v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v5));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v5);
      v40 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v40)
      {
        v41 = *(_QWORD *)(v5 + 8);
        v42 = v41 + 16 * v40;
        do
        {
          v43 = *(unsigned int **)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
          if (v43)
          {
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              v50 = v42;
              atomic_store(1u, v43);
              v46 = v43[6];
              if ((_DWORD)v46 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E3355A48[v46])(&v52, v43 + 2);
              v43[6] = -1;
              WTF::fastFree((WTF *)v43, v8);
              v42 = v50;
            }
          }
          v41 += 16;
        }
        while (v41 != v42);
      }
      v47 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v47 && v47 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v47, v8);
      }
      this = (uint64_t *)v5;
      return (uint64_t *)WTF::fastFree((WTF *)this, v8);
    }
  }
  else
  {
    switch(*((_DWORD *)this + 2))
    {
      case 1:
        v11 = bmalloc::api::isoAllocate();
        *(_DWORD *)v11 = 1;
        *(_BYTE *)(v11 + 64) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_BYTE *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_BYTE *)(v11 + 56) = 0;
        if (v3[2] != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_60;
        }
        v12 = v11;
        v13 = *(_QWORD *)v3;
        v14 = *(WTF::StringImpl **)(*(_QWORD *)v3 + 80);
        if (v14)
          *(_DWORD *)v14 += 2;
        v52 = v14;
        v53 = *(_OWORD *)(v13 + 88);
        v54 = *(_OWORD *)(v13 + 104);
        WebCore::FormData::appendBlob((WebCore::FormData *)v11, (const WTF::URL *)&v52);
        this = (uint64_t *)v52;
        v52 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
          else
            *(_DWORD *)this -= 2;
        }
        *(_QWORD *)a3 = v12;
        goto LABEL_16;
      case 2:
        v16 = (_DWORD *)*this;
        *v16 = *(_DWORD *)*this + 1;
        *(_QWORD *)a3 = v16;
LABEL_16:
        *(_DWORD *)(a3 + 8) = 1;
        return this;
      case 3:
        v17 = *this;
        v5 = *(_QWORD *)(*this + 16);
        if (!v5)
          goto LABEL_21;
        v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v18)
          goto LABEL_21;
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
          goto LABEL_20;
LABEL_60:
        if (!*MEMORY[0x1E0CC10F0])
LABEL_20:
          v5 = (v5 & 0x3FFFFFFFFLL) + v18;
LABEL_21:
        if (*(_BYTE *)(v17 + 64) && (v49 = *(_QWORD *)(v17 + 32)) != 0)
          v19 = *(WTF **)(v49 + 32);
        else
          v19 = *(WTF **)(v17 + 48);
LABEL_24:
        v21 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = v21 + 24;
        *(_QWORD *)(v21 + 16) = 1;
        *(_BYTE *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        WebCore::FragmentedSharedBuffer::append(v21, (WTF *)v5, v19);
        v52 = (WTF::StringImpl *)v21;
        v22 = WTF::fastMalloc((WTF *)0x38);
        WebCore::SharedBuffer::SharedBuffer(v22, (uint64_t *)&v52);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v52, v23);
        v52 = 0;
        *(_QWORD *)a3 = v22;
        *(_DWORD *)(a3 + 8) = 2;
        this = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v52, v24);
        break;
      case 4:
        v5 = JSC::ArrayBufferView::span((JSC::ArrayBufferView *)*this);
        v19 = v20;
        goto LABEL_24;
      case 5:
        WTF::URLParser::serialize();
        if (v51)
        {
          v25 = *((_QWORD *)v51 + 1);
          v26 = *((unsigned int *)v51 + 1) | ((unint64_t)((*((_DWORD *)v51 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v25 = 0;
          v26 = 0x100000000;
        }
        PAL::TextCodecUTF8::encodeUTF8(v25, v26, (uint64_t)&v52);
        WebCore::FragmentedSharedBuffer::create(&v52, &v55);
        v27 = WTF::fastMalloc((WTF *)0x38);
        WebCore::SharedBuffer::SharedBuffer(v27, &v55);
        v29 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v55, v28);
        v55 = 0;
        *(_QWORD *)a3 = v27;
        *(_DWORD *)(a3 + 8) = 2;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v29, v30);
        v32 = v52;
        if (v52)
        {
          v52 = 0;
          LODWORD(v53) = 0;
          WTF::fastFree(v32, v31);
        }
        this = (uint64_t *)v51;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            return (uint64_t *)WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v31);
          else
            *(_DWORD *)v51 -= 2;
        }
        return this;
      case 6:
        v33 = *this;
        if (*this)
        {
          v34 = *(_QWORD *)(v33 + 8);
          v35 = *(unsigned int *)(v33 + 4) | ((unint64_t)((*(_DWORD *)(v33 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v34 = 0;
          v35 = 0x100000000;
        }
        PAL::TextCodecUTF8::encodeUTF8(v34, v35, (uint64_t)&v52);
        WebCore::FragmentedSharedBuffer::create(&v52, &v55);
        v36 = WTF::fastMalloc((WTF *)0x38);
        WebCore::SharedBuffer::SharedBuffer(v36, &v55);
        v38 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v55, v37);
        v55 = 0;
        *(_QWORD *)a3 = v36;
        *(_DWORD *)(a3 + 8) = 2;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v38, v39);
        this = (uint64_t *)v52;
        if (!v52)
          return this;
        v52 = 0;
        LODWORD(v53) = 0;
        return (uint64_t *)WTF::fastFree((WTF *)this, v8);
      default:
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        return this;
    }
  }
  return this;
}

uint64_t WebCore::FetchBodyConsumer::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WebCore::UserGestureToken *v12;
  uint64_t v13;
  WebCore::FormDataConsumer *v14;
  WTF *v15;
  void *v16;
  WTF *v18;
  void *v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  WebCore::SharedBufferBuilder::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v8 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v10 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v10)
  {
    if (v10[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[8];
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v12 = *(WebCore::UserGestureToken **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v12, v4);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v14 = *(WebCore::FormDataConsumer **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  if (v14)
  {
    WebCore::FormDataConsumer::~FormDataConsumer(v14);
    WTF::fastFree(v15, v16);
  }
  return a1;
}

uint64_t *WebCore::SharedBufferBuilder::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v4 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v10;
              v18 = v9;
              v19 = (WTF *)v11;
              v20 = v4;
              atomic_store(1u, v11);
              v14 = v11[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))off_1E3355A48[v14])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              v4 = v20;
              v10 = v17;
              v9 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v15 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v21 = v4;
        WTF::fastFree(v15, a2);
        v4 = v21;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

void WebCore::FetchBodyConsumer::packageFormData(uint64_t *a1, char *a2, uint64_t a3, char *a4, size_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  const char *v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int16x8_t *v38;
  int16x8_t v39;
  int16x8_t *v40;
  int8x16_t v41;
  int16x8_t *v42;
  char *v43;
  int16x8_t v44;
  __int16 *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  int i;
  int v66;
  uint64_t v67;
  char v68;
  int v69;
  WTF::StringImpl *v70;
  size_t v71;
  WTF::StringImpl *v72;
  int16x8_t *v73;
  unint64_t v74;
  unint64_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int16x8_t *v78;
  __int8 *v79;
  const void *v80;
  char *v81;
  const void *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  size_t v87;
  char *v88;
  char *v89;
  size_t v90;
  const void *v91;
  char *v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  int j;
  uint64_t v98;
  WTF::StringImpl *v99;
  int k;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  char v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unsigned __int8 *v108;
  unsigned int v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  unsigned int v118;
  unsigned __int8 *v119;
  unsigned int v120;
  WTF::StringImpl *v121;
  _DWORD *v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  unsigned int *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  int v140;
  int16x8_t *v141;
  unint64_t v142;
  unint64_t v143;
  int16x8_t v144;
  int8x16_t v145;
  int16x8_t *v146;
  __int8 *v147;
  WTF::StringImpl *v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  int16x8_t v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  BOOL v165;
  uint64_t v166;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v172;
  WTF::StringImpl *v173;
  unsigned int v174;
  uint64_t v175;
  unint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v181;
  WTF::StringImpl *v182;
  unint64_t v183;
  __int16 v184;
  int16x8_t v185;
  WTF::StringImpl *v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int *v190;
  unsigned int *v191;
  unint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t IgnoringASCIICase;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  _DWORD *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  unsigned int *v218;
  uint64_t v219;

  {
    v5 = (unint64_t)&PAL::UTF8Encoding(void)::globalUTF8Encoding;
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v183;
    v206 = (WTF::StringImpl *)xmmword_1ECE86C80;
    v207 = v183;
    if (v183 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v206))
      {
        v184 = 165;
      }
      else
      {
        v184 = 92;
      }
    }
    else
    {
      v184 = 92;
    }
    word_1ECE86C90 = v184;
  }
  v11 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v11 + 16) = 1;
  *(_QWORD *)v11 = &off_1E33A18C0;
  *(_QWORD *)(v11 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v11, (WebCore::ScriptExecutionContext *)a2);
  *(_QWORD *)v11 = &off_1E33B0880;
  *(_QWORD *)(v11 + 24) = &off_1E31F4A18;
  *(_OWORD *)(v11 + 32) = xmmword_1ECE86C80;
  *(_WORD *)(v11 + 48) = word_1ECE86C90;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  WTF::String::trim();
  v14 = (WTF::StringImpl *)v219;
  if (!v219)
    goto LABEL_73;
  v15 = *(_QWORD *)(v219 + 8);
  v5 = *(unsigned int *)(v219 + 4);
  if ((*(_BYTE *)(v219 + 16) & 4) != 0)
  {
    if (!(_DWORD)v5)
      goto LABEL_73;
    v16 = 16;
    if (v5 < 0x10)
      v16 = *(unsigned int *)(v219 + 4);
    v17 = v16;
    v18 = *(_BYTE **)(v219 + 8);
    do
    {
      if (*v18 == 47)
        goto LABEL_12;
      ++v18;
      --v17;
    }
    while (v17);
    if (v5 < 0x11)
      goto LABEL_73;
    v18 = memchr((void *)(v15 + v16), 47, v5 - v16);
    if (!v18)
      goto LABEL_73;
LABEL_12:
    v19 = (uint64_t)&v18[-v15];
  }
  else
  {
    if (!(_DWORD)v5)
      goto LABEL_73;
    v38 = (int16x8_t *)(v15 + 2 * v5);
    if (v5 <= 0x1F)
    {
      v46 = 2 * v5;
      v45 = *(__int16 **)(v219 + 8);
      while (*v45 != 47)
      {
        ++v45;
        v46 -= 2;
        if (!v46)
          goto LABEL_73;
      }
    }
    else
    {
      v39.i64[0] = 0x2F002F002F002FLL;
      v39.i64[1] = 0x2F002F002F002FLL;
      v40 = *(int16x8_t **)(v219 + 8);
      do
      {
        v41 = (int8x16_t)vceqq_s16(*v40, v39);
        LOWORD(v13) = vmaxvq_u16((uint16x8_t)v41);
        if (v13)
          goto LABEL_67;
        v42 = v40 + 1;
        v43 = &v40[1].i8[14];
        ++v40;
      }
      while (v43 < (char *)v38);
      if (v42 >= v38)
        goto LABEL_73;
      v44.i64[0] = 0x2F002F002F002FLL;
      v44.i64[1] = 0x2F002F002F002FLL;
      v41 = (int8x16_t)vceqq_s16(v38[-1], v44);
      v44.i16[0] = vmaxvq_u16((uint16x8_t)v41);
      if (!v44.i32[0])
        goto LABEL_73;
      v40 = v38 - 1;
LABEL_67:
      v45 = &v40->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v41))];
    }
    if (v45 == (__int16 *)v38)
    {
LABEL_73:
      v34 = 0;
      LOBYTE(v206) = 0;
      v209 = 0;
      goto LABEL_74;
    }
    v19 = ((uint64_t)v45 - v15) >> 1;
  }
  if (v19 == -1)
    goto LABEL_73;
  if (v5 > v19)
  {
    WTF::StringImpl::substring(v14);
    if (!v218)
      goto LABEL_49;
    v5 = v218[1];
    if (!(_DWORD)v5)
      goto LABEL_49;
  }
  else
  {
    *(_DWORD *)v14 += 2;
    v218 = (unsigned int *)v14;
  }
  if ((WebCore::isValidHTTPToken((WebCore *)&v218, v12) & 1) != 0)
  {
    v21 = (WTF::StringImpl *)v219;
    if (!v219)
    {
      v206 = 0;
      v26 = -1;
LABEL_34:
      WTF::String::trim();
      v28 = v206;
      v206 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v12);
        else
          *(_DWORD *)v28 -= 2;
      }
      if (v217 && *((_DWORD *)v217 + 1) && (WebCore::isValidHTTPToken((WebCore *)&v217, v12) & 1) != 0)
      {
        v30 = v217;
        v29 = (WTF::StringImpl *)v218;
        v217 = 0;
        v218 = 0;
        v210 = v29;
        v211 = v30;
        if (v219)
        {
          v31 = *(const char **)(v219 + 8);
          v32 = *(unsigned int *)(v219 + 4) | ((unint64_t)((*(_DWORD *)(v219 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v31 = 0;
          v32 = 0x100000000;
        }
        WebCore::parseParameters((uint64_t)&v212, v31, v32, v26 + 1);
        v33 = v210;
        v5 = (unint64_t)v211;
        v210 = 0;
        v211 = 0;
        v206 = v33;
        v207 = v5;
        v6 = v212;
        v212 = 0;
        v208 = v6;
        v34 = 1;
        v209 = 1;
        WebCore::MimeType::~MimeType((WebCore::MimeType *)&v210, v35);
      }
      else
      {
        v34 = 0;
        LOBYTE(v206) = 0;
        v209 = 0;
      }
      v36 = v217;
      v217 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v12);
        else
          *(_DWORD *)v36 -= 2;
      }
      goto LABEL_50;
    }
    v6 = *(_QWORD *)(v219 + 8);
    v5 = *(unsigned int *)(v219 + 4);
    if ((*(_BYTE *)(v219 + 16) & 4) != 0)
    {
      if (v5 > v19)
      {
        v22 = v5 - v19;
        v23 = 16;
        if (v22 < 0x10)
          v23 = v5 - v19;
        if (v23)
        {
          v24 = v23;
          v25 = (_BYTE *)(v6 + v19);
          while (*v25 != 59)
          {
            ++v25;
            if (!--v24)
              goto LABEL_26;
          }
          goto LABEL_28;
        }
LABEL_26:
        if (v22 >= 0x11)
        {
          v25 = memchr((void *)(v6 + v19 + v23), 59, v22 - v23);
          if (v25)
          {
LABEL_28:
            v26 = (uint64_t)&v25[-v6];
LABEL_29:
            v27 = v26 + ~(_DWORD)v19;
LABEL_30:
            if ((_DWORD)v19 == -1 && v5 <= v27)
            {
              *(_DWORD *)v21 += 2;
              v206 = v21;
            }
            else
            {
              WTF::StringImpl::substring(v21);
            }
            goto LABEL_34;
          }
        }
LABEL_470:
        v26 = -1;
        goto LABEL_29;
      }
    }
    else if (v5 > v19)
    {
      v73 = (int16x8_t *)(v6 + 2 * v19);
      v74 = v6 + 2 * v5;
      v75 = v74 - (_QWORD)v73;
      if ((uint64_t)(v74 - (_QWORD)v73) <= -2)
      {
LABEL_433:
        __break(1u);
LABEL_434:
        *a1 = 0;
        goto LABEL_435;
      }
      if (v75 <= 0x3E)
      {
        v26 = -1;
        while (v73->i16[0] != 59)
        {
          v73 = (int16x8_t *)((char *)v73 + 2);
          v75 -= 2;
          if (!v75)
            goto LABEL_29;
        }
      }
      else
      {
        if ((unint64_t)&v73->u64[1] + 6 >= v74)
        {
          v78 = (int16x8_t *)(v6 + 2 * v19);
LABEL_464:
          if ((unint64_t)v78 >= v74)
            goto LABEL_470;
          v73 = (int16x8_t *)(v74 - 16);
          v185.i64[0] = 0x3B003B003B003BLL;
          v185.i64[1] = 0x3B003B003B003BLL;
          v77 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v74 - 16), v185);
          v185.i16[0] = vmaxvq_u16((uint16x8_t)v77);
          if (!v185.i32[0])
            goto LABEL_470;
        }
        else
        {
          v76.i64[0] = 0x3B003B003B003BLL;
          v76.i64[1] = 0x3B003B003B003BLL;
          while (1)
          {
            v77 = (int8x16_t)vceqq_s16(*v73, v76);
            LOWORD(v20) = vmaxvq_u16((uint16x8_t)v77);
            if (v20)
              break;
            v78 = v73 + 1;
            v79 = &v73[1].i8[14];
            ++v73;
            if ((unint64_t)v79 >= v74)
              goto LABEL_464;
          }
        }
        v73 = (int16x8_t *)((char *)v73
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v77)));
      }
      if (v73 == (int16x8_t *)v74)
        v26 = -1;
      else
        v26 = ((uint64_t)v73->i64 - v6) >> 1;
      goto LABEL_29;
    }
    v27 = -2 - v19;
    v26 = -1;
    goto LABEL_30;
  }
LABEL_49:
  v34 = 0;
  LOBYTE(v206) = 0;
  v209 = 0;
LABEL_50:
  v37 = (WTF::StringImpl *)v218;
  v218 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v12);
    else
      *(_DWORD *)v37 -= 2;
  }
  v14 = (WTF::StringImpl *)v219;
LABEL_74:
  v219 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v12);
      if (!v34)
        goto LABEL_79;
      goto LABEL_78;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v34)
    goto LABEL_79;
LABEL_78:
  v47 = v206;
  if (!v206)
    goto LABEL_79;
  v48 = *((_DWORD *)v206 + 1);
  if (v48 != 9)
  {
LABEL_89:
    if (v48 == 11)
    {
      v49 = *((_QWORD *)v47 + 1);
      if ((*((_BYTE *)v47 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v49 & 0xDF) != 0x41
          || (*(_BYTE *)(v49 + 1) & 0xDF) != 0x50
          || (*(_BYTE *)(v49 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v49 + 3) & 0xDF) != 0x4C
          || (*(_BYTE *)(v49 + 4) & 0xDF) != 0x49
          || (*(_BYTE *)(v49 + 5) & 0xDF) != 0x43
          || (*(_BYTE *)(v49 + 6) & 0xDF) != 0x41
          || (*(_BYTE *)(v49 + 7) & 0xDF) != 0x54
          || (*(_BYTE *)(v49 + 8) & 0xDF) != 0x49
          || (*(_BYTE *)(v49 + 9) & 0xDF) != 0x4F)
        {
          goto LABEL_79;
        }
        v50 = *(unsigned __int8 *)(v49 + 10);
      }
      else
      {
        if ((*(_WORD *)v49 & 0xFFDF) != 0x41
          || (*(_WORD *)(v49 + 2) & 0xFFDF) != 0x50
          || (*(_WORD *)(v49 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v49 + 6) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v49 + 8) & 0xFFDF) != 0x49
          || (*(_WORD *)(v49 + 10) & 0xFFDF) != 0x43
          || (*(_WORD *)(v49 + 12) & 0xFFDF) != 0x41
          || (*(_WORD *)(v49 + 14) & 0xFFDF) != 0x54
          || (*(_WORD *)(v49 + 16) & 0xFFDF) != 0x49
          || (*(_WORD *)(v49 + 18) & 0xFFDF) != 0x4F)
        {
          goto LABEL_79;
        }
        v50 = *(unsigned __int16 *)(v49 + 20);
      }
      if ((v50 & 0xFFFFFFDF) == 0x4E && v5 && *(_DWORD *)(v5 + 4) == 21)
      {
        v51 = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v51 & 0xDF) != 0x58
            || (*(_BYTE *)(v51 + 1) & 0xDF) != 0xD
            || (*(_BYTE *)(v51 + 2) & 0xDF) != 0x57
            || (*(_BYTE *)(v51 + 3) & 0xDF) != 0x57
            || (*(_BYTE *)(v51 + 4) & 0xDF) != 0x57
            || (*(_BYTE *)(v51 + 5) & 0xDF) != 0xD
            || (*(_BYTE *)(v51 + 6) & 0xDF) != 0x46
            || (*(_BYTE *)(v51 + 7) & 0xDF) != 0x4F
            || (*(_BYTE *)(v51 + 8) & 0xDF) != 0x52
            || (*(_BYTE *)(v51 + 9) & 0xDF) != 0x4D
            || (*(_BYTE *)(v51 + 10) & 0xDF) != 0xD
            || (*(_BYTE *)(v51 + 11) & 0xDF) != 0x55
            || (*(_BYTE *)(v51 + 12) & 0xDF) != 0x52
            || (*(_BYTE *)(v51 + 13) & 0xDF) != 0x4C
            || (*(_BYTE *)(v51 + 14) & 0xDF) != 0x45
            || (*(_BYTE *)(v51 + 15) & 0xDF) != 0x4E
            || (*(_BYTE *)(v51 + 16) & 0xDF) != 0x43
            || (*(_BYTE *)(v51 + 17) & 0xDF) != 0x4F
            || (*(_BYTE *)(v51 + 18) & 0xDF) != 0x44
            || (*(_BYTE *)(v51 + 19) & 0xDF) != 0x45)
          {
            goto LABEL_79;
          }
          v52 = *(unsigned __int8 *)(v51 + 20);
        }
        else
        {
          if ((*(_WORD *)v51 & 0xFFDF) != 0x58
            || (*(_WORD *)(v51 + 2) & 0xFFDF) != 0xD
            || (*(_WORD *)(v51 + 4) & 0xFFDF) != 0x57
            || (*(_WORD *)(v51 + 6) & 0xFFDF) != 0x57
            || (*(_WORD *)(v51 + 8) & 0xFFDF) != 0x57
            || (*(_WORD *)(v51 + 10) & 0xFFDF) != 0xD
            || (*(_WORD *)(v51 + 12) & 0xFFDF) != 0x46
            || (*(_WORD *)(v51 + 14) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v51 + 16) & 0xFFDF) != 0x52
            || (*(_WORD *)(v51 + 18) & 0xFFDF) != 0x4D
            || (*(_WORD *)(v51 + 20) & 0xFFDF) != 0xD
            || (*(_WORD *)(v51 + 22) & 0xFFDF) != 0x55
            || (*(_WORD *)(v51 + 24) & 0xFFDF) != 0x52
            || (*(_WORD *)(v51 + 26) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v51 + 28) & 0xFFDF) != 0x45
            || (*(_WORD *)(v51 + 30) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v51 + 32) & 0xFFDF) != 0x43
            || (*(_WORD *)(v51 + 34) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v51 + 36) & 0xFFDF) != 0x44
            || (*(_WORD *)(v51 + 38) & 0xFFDF) != 0x45)
          {
            goto LABEL_79;
          }
          v52 = *(unsigned __int16 *)(v51 + 40);
        }
        if ((v52 & 0xFFFFFFDF) == 0x44)
        {
          WTF::String::fromUTF8();
          WTF::URLParser::parseURLEncodedForm();
          v53 = (WTF::StringImpl **)v210;
          if (HIDWORD(v211))
          {
            v54 = (WTF::StringImpl **)((char *)v210 + 16 * HIDWORD(v211));
            do
            {
              WebCore::DOMFormData::append((WebCore::DOMFormData *)v11, v53, v53 + 1);
              v53 += 2;
            }
            while (v53 != v54);
            v53 = (WTF::StringImpl **)v210;
            if (HIDWORD(v211))
            {
              v55 = 16 * HIDWORD(v211);
              v56 = (WTF::StringImpl **)((char *)v210 + 8);
              do
              {
                v57 = *v56;
                *v56 = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, v12);
                  else
                    *(_DWORD *)v57 -= 2;
                }
                v58 = *(v56 - 1);
                *(v56 - 1) = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, v12);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v56 += 2;
                v55 -= 16;
              }
              while (v55);
              v53 = (WTF::StringImpl **)v210;
            }
          }
          if (v53)
          {
            v210 = 0;
            LODWORD(v211) = 0;
            WTF::fastFree((WTF *)v53, v12);
          }
          v72 = (WTF::StringImpl *)v219;
          v219 = 0;
          if (!v72)
            goto LABEL_473;
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_473:
            *a1 = v11;
            v11 = 0;
            goto LABEL_80;
          }
LABEL_472:
          WTF::StringImpl::destroy(v72, v12);
          goto LABEL_473;
        }
      }
    }
LABEL_79:
    *a1 = 0;
    goto LABEL_80;
  }
  v59 = *((_QWORD *)v206 + 1);
  if ((*((_BYTE *)v206 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v59 & 0xDF) != 0x4D
      || (*(_BYTE *)(v59 + 1) & 0xDF) != 0x55
      || (*(_BYTE *)(v59 + 2) & 0xDF) != 0x4C
      || (*(_BYTE *)(v59 + 3) & 0xDF) != 0x54
      || (*(_BYTE *)(v59 + 4) & 0xDF) != 0x49
      || (*(_BYTE *)(v59 + 5) & 0xDF) != 0x50
      || (*(_BYTE *)(v59 + 6) & 0xDF) != 0x41
      || (*(_BYTE *)(v59 + 7) & 0xDF) != 0x52)
    {
      goto LABEL_79;
    }
    v60 = *(unsigned __int8 *)(v59 + 8);
  }
  else
  {
    if ((*(_WORD *)v59 & 0xFFDF) != 0x4D
      || (*(_WORD *)(v59 + 2) & 0xFFDF) != 0x55
      || (*(_WORD *)(v59 + 4) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v59 + 6) & 0xFFDF) != 0x54
      || (*(_WORD *)(v59 + 8) & 0xFFDF) != 0x49
      || (*(_WORD *)(v59 + 10) & 0xFFDF) != 0x50
      || (*(_WORD *)(v59 + 12) & 0xFFDF) != 0x41
      || (*(_WORD *)(v59 + 14) & 0xFFDF) != 0x52)
    {
      goto LABEL_79;
    }
    v60 = *(unsigned __int16 *)(v59 + 16);
  }
  if ((v60 & 0xFFFFFFDF) != 0x54 || !v5 || *(_DWORD *)(v5 + 4) != 9)
    goto LABEL_79;
  v61 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v61 & 0xDF) != 0x46
      || (*(_BYTE *)(v61 + 1) & 0xDF) != 0x4F
      || (*(_BYTE *)(v61 + 2) & 0xDF) != 0x52
      || (*(_BYTE *)(v61 + 3) & 0xDF) != 0x4D
      || (*(_BYTE *)(v61 + 4) & 0xDF) != 0xD
      || (*(_BYTE *)(v61 + 5) & 0xDF) != 0x44
      || (*(_BYTE *)(v61 + 6) & 0xDF) != 0x41
      || (*(_BYTE *)(v61 + 7) & 0xDF) != 0x54)
    {
      goto LABEL_79;
    }
    v62 = *(unsigned __int8 *)(v61 + 8);
  }
  else
  {
    if ((*(_WORD *)v61 & 0xFFDF) != 0x46
      || (*(_WORD *)(v61 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v61 + 4) & 0xFFDF) != 0x52
      || (*(_WORD *)(v61 + 6) & 0xFFDF) != 0x4D
      || (*(_WORD *)(v61 + 8) & 0xFFDF) != 0xD
      || (*(_WORD *)(v61 + 10) & 0xFFDF) != 0x44
      || (*(_WORD *)(v61 + 12) & 0xFFDF) != 0x41
      || (*(_WORD *)(v61 + 14) & 0xFFDF) != 0x54)
    {
      goto LABEL_79;
    }
    v62 = *(unsigned __int16 *)(v61 + 16);
  }
  if ((v62 & 0xFFFFFFDF) != 0x41 || !v6)
    goto LABEL_79;
  v63 = 0;
  v64 = *(_DWORD *)(v6 - 8);
  for (i = 8113195; ; i = v63 + v66)
  {
    v66 = i & v64;
    v67 = *(_QWORD *)(v6 + 16 * (i & v64));
    if (v67 != -1)
    {
      v203 = (WTF::StringImpl *)(i & v64);
      if (!v67)
        goto LABEL_195;
      v68 = MEMORY[0x19AEA53F4](v67, "boundary", 8);
      v66 = (int)v203;
      if ((v68 & 1) != 0)
        break;
    }
    ++v63;
  }
  if ((_DWORD)v203 == *(_DWORD *)(v6 - 4))
  {
LABEL_195:
    v48 = *((_DWORD *)v47 + 1);
    goto LABEL_89;
  }
  v202 = *(WTF::StringImpl **)(v6 + 16 * (_QWORD)v203 + 8);
  if (v202)
  {
    v69 = *((_DWORD *)v202 + 1);
    *(_DWORD *)v202 += 4;
    if ((v69 & 0x80000000) == 0 && !__OFADD__(v69, 2))
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v69 + 2), (*((_DWORD *)v202 + 4) >> 2) & 1, (int8x16_t *)"--", 2u, (uint64_t)v202, &v205);
      if (v205)
      {
        if (*(_DWORD *)v202 == 2)
          WTF::StringImpl::destroy(v202, v70);
        else
          *(_DWORD *)v202 -= 2;
        goto LABEL_202;
      }
LABEL_508:
      __break(0xC471u);
      JUMPOUT(0x1953265D0);
    }
LABEL_507:
    v205 = 0;
    goto LABEL_508;
  }
  WTF::tryFastCompactMalloc((WTF *)0x16);
  v186 = v210;
  if (!v210)
    goto LABEL_507;
  *(_QWORD *)v210 = 0x200000002;
  *((_WORD *)v186 + 10) = 11565;
  *((_QWORD *)v186 + 1) = (char *)v186 + 20;
  *((_DWORD *)v186 + 4) = 4;
  v205 = v186;
LABEL_202:
  WTF::String::utf8();
  if (v204)
    v71 = *((_QWORD *)v204 + 1);
  else
    v71 = 0;
  if (v204)
    v80 = (char *)v204 + 16;
  else
    v80 = 0;
  v201 = (char *)memmem(a4, a5, v80, v71);
  if (!v201)
    goto LABEL_434;
  v81 = &a4[a5];
  if (v204)
    v82 = (char *)v204 + 16;
  else
    v82 = 0;
  v83 = (char *)memmem(&v201[v71], v81 - &v201[v71], v82, v71);
  if (v83)
  {
    v84 = v83;
    v85 = v201;
    while (1)
    {
      v86 = &v85[v71];
      v87 = v84 - &v85[v71] - 2;
      v88 = (char *)memmem(&v85[v71], v87, "\r\n\r\n", 4uLL);
      if (!v88)
        goto LABEL_232;
      v12 = (WTF::StringImpl *)(v88 - v86);
      if (v87 < v88 - v86)
        goto LABEL_433;
      v89 = (char *)v12 + 4;
      v90 = v87 - ((_QWORD)v12 + 4);
      if (v87 < (unint64_t)v12 + 4)
        goto LABEL_433;
      WTF::String::fromUTF8();
      if (!v219)
        goto LABEL_232;
      IgnoringASCIICase = WTF::StringImpl::findIgnoringASCIICase();
      if (IgnoringASCIICase == -1)
        goto LABEL_315;
      if (!v219 || (v189 = WTF::StringImpl::find(), !v219))
      {
LABEL_239:
        v94 = 0x100000000;
        v95 = "";
LABEL_240:
        v197 = v95;
LABEL_241:
        WebCore::parseParameters((uint64_t)&v218, v197, v94, 0);
        goto LABEL_242;
      }
      v111 = (IgnoringASCIICase + 20);
      v195 = *(unsigned int *)(v219 + 4);
      v197 = *(const char **)(v219 + 8);
      v192 = *(unsigned int *)(v219 + 16);
      if ((v192 & 4) != 0)
        break;
      if (v195 > v111)
      {
        v141 = (int16x8_t *)&v197[2 * v111];
        v142 = (unint64_t)&v197[2 * v195];
        v143 = v142 - (_QWORD)v141;
        if ((uint64_t)(v142 - (_QWORD)v141) <= -2)
          goto LABEL_433;
        if (v143 <= 0x3E)
        {
          while (v141->i16[0] != 59)
          {
            v141 = (int16x8_t *)((char *)v141 + 2);
            v143 -= 2;
            if (!v143)
              goto LABEL_370;
          }
        }
        else
        {
          if ((unint64_t)&v141->u64[1] + 6 >= v142)
          {
            v146 = v141;
LABEL_365:
            if ((unint64_t)v146 >= v142)
              goto LABEL_370;
            v141 = (int16x8_t *)(v142 - 16);
            v158.i64[0] = 0x3B003B003B003BLL;
            v158.i64[1] = 0x3B003B003B003BLL;
            v145 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v142 - 16), v158);
            v158.i16[0] = vmaxvq_u16((uint16x8_t)v145);
            if (!v158.i32[0])
              goto LABEL_370;
          }
          else
          {
            while (1)
            {
              v144.i64[0] = 0x3B003B003B003BLL;
              v144.i64[1] = 0x3B003B003B003BLL;
              v145 = (int8x16_t)vceqq_s16(*v141, v144);
              v144.i16[0] = vmaxvq_u16((uint16x8_t)v145);
              if (v144.i32[0])
                break;
              v146 = v141 + 1;
              v147 = &v141[1].i8[14];
              ++v141;
              if ((unint64_t)v147 >= v142)
                goto LABEL_365;
            }
          }
          v141 = (int16x8_t *)((char *)v141
                             + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v145)));
        }
        if (v141 != (int16x8_t *)v142)
        {
          v117 = ((char *)v141 - v197) >> 1;
LABEL_283:
          if (v117 != -1)
          {
            v118 = v117 + 1;
            goto LABEL_371;
          }
        }
      }
LABEL_370:
      v118 = -1;
LABEL_371:
      if (v195 <= v118)
        goto LABEL_239;
      v159 = v189 - v118;
      if (v195 - v118 <= v189 - v118)
      {
        if (!v118)
        {
          v94 = v195 & 0xFFFFFFFEFFFFFFFFLL | (((v192 >> 2) & 1) << 32);
          goto LABEL_241;
        }
        v159 = v195 - v118;
      }
      v160 = v118;
      v94 = v159;
      v161 = v195 - v118;
      if (((v192 >> 2) & 1) == 0)
      {
        if (v161 < v159)
          goto LABEL_433;
        v95 = &v197[2 * v160];
        goto LABEL_240;
      }
      if (v161 < v159)
        goto LABEL_433;
      WebCore::parseParameters((uint64_t)&v218, &v197[v160], v159 | 0x100000000, 0);
LABEL_242:
      v190 = v218;
      if (v218)
      {
        v193 = 0;
        v96 = &v89[(_QWORD)v86];
        v187 = *(v218 - 2);
        for (j = 8774809; ; j = v193 + v198)
        {
          v198 = j & v187;
          v98 = *(_QWORD *)&v190[4 * v198];
          if (v98 != -1)
          {
            if (!v98)
              goto LABEL_314;
            if ((MEMORY[0x19AEA53F4](v98, "name", 4) & 1) != 0)
              break;
          }
          ++v193;
        }
        v99 = *(WTF::StringImpl **)&v190[4 * v198 + 2];
        if (!v99)
          goto LABEL_314;
        *(_DWORD *)v99 += 2;
        v217 = v99;
        v191 = v218;
        if (!v218)
          goto LABEL_269;
        v194 = 0;
        v188 = *(v218 - 2);
        for (k = 9650350; ; k = ++v194 + v199)
        {
          v199 = k & v188;
          v101 = *(_QWORD *)&v191[4 * v199];
          if (v101 != -1)
          {
            if (!v101)
              goto LABEL_269;
            if ((MEMORY[0x19AEA53F4](v101, "filename", 8) & 1) != 0)
              break;
          }
        }
        v102 = *(WTF::StringImpl **)&v191[4 * v199 + 2];
        if (!v102)
        {
LABEL_269:
          v216 = 0;
          WTF::String::fromUTF8();
          WebCore::DOMFormData::append((WebCore::DOMFormData *)v11, &v217, &v210);
          v110 = v210;
          v210 = 0;
          if (v110)
            goto LABEL_306;
          goto LABEL_308;
        }
        *(_DWORD *)v102 += 2;
        v216 = v102;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v215 = v210;
        if (v219)
        {
          v200 = WTF::StringImpl::findIgnoringASCIICase();
          if (v200 != -1)
          {
            if (!v219)
              goto LABEL_341;
            v149 = WTF::StringImpl::find();
            if (!v219)
              goto LABEL_341;
            v150 = *(unsigned int *)(v219 + 4);
            v151 = v200 + 13;
            if (v150 <= (int)v200 + 13)
              goto LABEL_341;
            v152 = *(unsigned int *)(v219 + 16);
            v12 = *(WTF::StringImpl **)(v219 + 8);
            v153 = v149 - v151;
            if (v150 - v151 <= v149 - v151)
            {
              if ((_DWORD)v200 != -13)
              {
                v153 = v150 - v151;
                goto LABEL_361;
              }
              v156 = v150 & 0xFFFFFFFEFFFFFFFFLL | (((v152 >> 2) & 1) << 32);
            }
            else
            {
LABEL_361:
              v154 = (v152 >> 2) & 1;
              v155 = (v200 + 13);
              v156 = v153;
              v157 = v150 - v151;
              if ((_DWORD)v154)
              {
                if (v157 < v153)
                  goto LABEL_433;
                v12 = (WTF::StringImpl *)((char *)v12 + v155);
                v156 = v153 | 0x100000000;
              }
              else
              {
                if (v157 < v153)
                  goto LABEL_433;
                v12 = (WTF::StringImpl *)((char *)v12 + 2 * v155);
              }
            }
            v162 = v156;
            if ((v156 & 0x100000000) != 0)
            {
              if ((_DWORD)v156)
              {
                v163 = 0;
                while (1)
                {
                  v164 = *((unsigned __int8 *)v12 + v163);
                  v165 = v164 > 0x20;
                  v166 = (1 << v164) & 0x100002600;
                  if (v165 || v166 == 0)
                    break;
                  if (v156 == ++v163)
                    goto LABEL_341;
                }
                if ((_DWORD)v156 == 1)
                {
                  if ((_DWORD)v163)
                  {
                    LODWORD(v168) = 0;
                    goto LABEL_428;
                  }
                }
                else
                {
                  v168 = (v156 - 1);
                  do
                  {
                    if (v168 >= v156)
                      goto LABEL_433;
                    v169 = *((unsigned __int8 *)v12 + v168);
                    v165 = v169 > 0x20;
                    v170 = (1 << v169) & 0x100002600;
                    if (v165 || v170 == 0)
                      break;
                    --v168;
                  }
                  while ((_DWORD)v168);
                  if ((_DWORD)v163 || (_DWORD)v168 != (_DWORD)v156 - 1)
                  {
LABEL_428:
                    v181 = (v168 - v163 + 1);
                    if (v162 - v163 < v181)
                      goto LABEL_433;
                    v156 = v181 | 0x100000000;
                  }
                }
              }
            }
            else
            {
              if (!(_DWORD)v156)
                goto LABEL_423;
              v172 = 0;
              v173 = v12;
              while (1)
              {
                v174 = *(unsigned __int16 *)v173;
                v165 = v174 > 0x20;
                v175 = (1 << v174) & 0x100002600;
                if (v165 || v175 == 0)
                  break;
                ++v172;
                v173 = (WTF::StringImpl *)((char *)v173 + 2);
                if (v156 == v172)
                  goto LABEL_341;
              }
              if ((_DWORD)v156 == 1)
              {
                if (!(_DWORD)v172)
                  goto LABEL_423;
                LODWORD(v177) = 0;
              }
              else
              {
                v177 = (v156 - 1);
                do
                {
                  if (v177 >= v156)
                    goto LABEL_433;
                  v178 = *((unsigned __int16 *)v12 + v177);
                  v165 = v178 > 0x20;
                  v179 = (1 << v178) & 0x100002600;
                  if (v165 || v179 == 0)
                    break;
                  --v177;
                }
                while ((_DWORD)v177);
                if (!(_DWORD)v172 && (_DWORD)v177 == (_DWORD)v156 - 1)
                  goto LABEL_423;
              }
              v156 = (v177 - v172 + 1);
              v12 = v173;
              if (v162 - v172 < v156)
                goto LABEL_433;
            }
LABEL_423:
            if ((v156 & 0x100000000) == 0)
              WTF::String::String();
            else
LABEL_341:
              WTF::String::String();
            v138 = v210;
            v210 = 0;
            v139 = v215;
            v215 = v138;
            if (v139)
            {
              v140 = *(_DWORD *)v139 - 2;
              if (*(_DWORD *)v139 != 2)
                goto LABEL_344;
              WTF::StringImpl::destroy(v139, v137);
              v139 = v210;
              v210 = 0;
              if (v139)
              {
                v140 = *(_DWORD *)v139 - 2;
                if (*(_DWORD *)v139 == 2)
                  WTF::StringImpl::destroy(v139, v148);
                else
LABEL_344:
                  *(_DWORD *)v139 = v140;
              }
            }
          }
        }
        v210 = 0;
        LODWORD(v211) = 0;
        HIDWORD(v211) = v90;
        if ((char *)v87 != v89)
        {
          if (HIDWORD(v90))
            goto LABEL_508;
          v103 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v90);
          LODWORD(v211) = v90;
          v210 = v103;
          do
          {
            v104 = *v96++;
            *(_BYTE *)v103 = v104;
            v103 = (WTF::StringImpl *)((char *)v103 + 1);
            --v90;
          }
          while (v90);
        }
        if (v215)
        {
          v105 = *((unsigned int *)v215 + 1);
          if ((_DWORD)v105)
          {
            v106 = (unsigned __int8 *)*((_QWORD *)v215 + 1);
            if ((*((_BYTE *)v215 + 16) & 4) != 0)
            {
              if (*v106 - 127 >= 0xFFFFFFA1)
              {
                v107 = 0;
                v108 = v106 + 1;
                while (v105 - 1 != v107)
                {
                  v109 = v108[v107++] - 127;
                  if (v109 < 0xFFFFFFA1)
                    goto LABEL_289;
                }
                goto LABEL_293;
              }
LABEL_290:
              v121 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *(_DWORD *)v121 += 2;
              v213 = v121;
LABEL_294:
              WebCore::Blob::create((uint64_t *)&v214, (WebCore::ScriptExecutionContext *)a2, (uint64_t)&v210, &v213);
              v122 = v214;
              v123 = bmalloc::api::isoAllocate();
              v125 = (_QWORD *)WebCore::Blob::Blob(v123, v124, (WebCore::ScriptExecutionContext *)a2, (uint64_t)v122);
              *v125 = off_1E33AE6D8;
              v125[3] = &unk_1E33AE718;
              v126 = v125 + 3;
              *(_QWORD *)(v123 + 128) = 0;
              *(_QWORD *)(v123 + 136) = 0;
              v127 = v216;
              if (v216)
                *(_DWORD *)v216 += 2;
              *(_QWORD *)(v123 + 144) = v127;
              *(_BYTE *)(v123 + 152) = 0;
              *(_BYTE *)(v123 + 160) = 0;
              *(_BYTE *)(v123 + 168) = 0;
              *(_BYTE *)(v123 + 176) = 0;
              *(_WORD *)(v123 + 184) = 0;
              WebCore::ActiveDOMObject::suspendIfNeeded(v126);
              WebCore::DOMFormData::append((WebCore::DOMFormData *)v11, &v217, (WebCore::Blob *)v123, (const WTF::String *)&v216);
              if (*(_DWORD *)(v123 + 16) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
              else
                --*(_DWORD *)(v123 + 16);
              if (v122[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v122 + 8))(v122);
              else
                --v122[4];
              v128 = v213;
              v213 = 0;
              if (v128)
              {
                if (*(_DWORD *)v128 == 2)
                  WTF::StringImpl::destroy(v128, v93);
                else
                  *(_DWORD *)v128 -= 2;
              }
              if (v210)
                WTF::fastFree(v210, v93);
              v110 = v215;
              v215 = 0;
              if (v110)
              {
LABEL_306:
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, v93);
                else
                  *(_DWORD *)v110 -= 2;
              }
LABEL_308:
              v129 = v216;
              v216 = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 2)
                  WTF::StringImpl::destroy(v129, v93);
                else
                  *(_DWORD *)v129 -= 2;
              }
              v130 = v217;
              v217 = 0;
              if (v130)
              {
                if (*(_DWORD *)v130 == 2)
                  WTF::StringImpl::destroy(v130, v93);
                else
                  *(_DWORD *)v130 -= 2;
              }
LABEL_314:
              v131 = v218;
              if (v218)
              {
                v133 = *(v218 - 1);
                if ((_DWORD)v133)
                {
                  v134 = (WTF::StringImpl **)v218;
                  do
                  {
                    v135 = *v134;
                    if (*v134 != (WTF::StringImpl *)-1)
                    {
                      v136 = v134[1];
                      v134[1] = 0;
                      if (v136)
                      {
                        if (*(_DWORD *)v136 == 2)
                        {
                          WTF::StringImpl::destroy(v136, v93);
                          v135 = *v134;
                        }
                        else
                        {
                          *(_DWORD *)v136 -= 2;
                        }
                      }
                      *v134 = 0;
                      if (v135)
                      {
                        if (*(_DWORD *)v135 == 2)
                          WTF::StringImpl::destroy(v135, v93);
                        else
                          *(_DWORD *)v135 -= 2;
                      }
                    }
                    v134 += 2;
                    --v133;
                  }
                  while (v133);
                }
                WTF::fastFree((WTF *)(v131 - 4), v93);
              }
              goto LABEL_315;
            }
            if (*(unsigned __int16 *)v106 - 127 < 0xFFFFFFA1)
              goto LABEL_290;
            v107 = 0;
            v119 = v106 + 2;
            while (v105 - 1 != v107)
            {
              v120 = *(unsigned __int16 *)&v119[2 * v107++] - 127;
              if (v120 < 0xFFFFFFA1)
              {
LABEL_289:
                if (v107 >= v105)
                  break;
                goto LABEL_290;
              }
            }
          }
        }
LABEL_293:
        WTF::String::convertToASCIILowercase((WTF::String *)&v215);
        goto LABEL_294;
      }
LABEL_315:
      v132 = (WTF::StringImpl *)v219;
      v219 = 0;
      if (v132)
      {
        if (*(_DWORD *)v132 == 2)
          WTF::StringImpl::destroy(v132, v93);
        else
          *(_DWORD *)v132 -= 2;
      }
LABEL_232:
      if (v204)
        v91 = (char *)v204 + 16;
      else
        v91 = 0;
      v92 = (char *)memmem(&v84[v71], v81 - &v84[v71], v91, v71);
      v85 = v84;
      v84 = v92;
      if (!v92)
        goto LABEL_435;
    }
    if (v195 <= v111)
      goto LABEL_370;
    v112 = &v197[v111];
    v113 = v195 - v111;
    v114 = 16;
    if (v113 < 0x10)
      v114 = v113;
    if (v114)
    {
      v115 = v114;
      v116 = v112;
      while (*v116 != 59)
      {
        ++v116;
        if (!--v115)
          goto LABEL_280;
      }
    }
    else
    {
LABEL_280:
      if (v113 < 0x11)
        goto LABEL_370;
      v116 = memchr((void *)&v112[v114], 59, v113 - v114);
      if (!v116)
        goto LABEL_370;
    }
    v117 = v116 - v197;
    goto LABEL_283;
  }
LABEL_435:
  if (v204)
  {
    if (*(_DWORD *)v204 == 1)
      WTF::fastFree(v204, v12);
    else
      --*(_DWORD *)v204;
  }
  v182 = v205;
  v205 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, v12);
    else
      *(_DWORD *)v182 -= 2;
  }
  if (v201)
  {
    if (!v202)
      goto LABEL_473;
    if (*(_DWORD *)v202 != 2)
    {
      *(_DWORD *)v202 -= 2;
      goto LABEL_473;
    }
    v72 = v202;
    goto LABEL_472;
  }
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
      WTF::StringImpl::destroy(v202, v12);
    else
      *(_DWORD *)v202 -= 2;
  }
LABEL_80:
  if (v209)
    WebCore::MimeType::~MimeType((WebCore::MimeType *)&v206, v12);
  if (v11)
  {
    if (*(_DWORD *)(v11 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      --*(_DWORD *)(v11 + 16);
  }
}

WebCore::UserGestureToken *WebCore::FetchBodyConsumer::clean(WebCore::FetchBodyConsumer *this, void *a2)
{
  void *v3;
  WebCore::FormDataConsumer *v4;
  _DWORD *v5;
  WebCore::UserGestureToken *result;
  uint64_t v7;
  WTF *v8;
  void *v9;

  WebCore::SharedBufferBuilder::reset((WebCore::FetchBodyConsumer *)((char *)this + 8), a2);
  v4 = (WebCore::FormDataConsumer *)*((_QWORD *)this + 7);
  if (v4)
    WebCore::FormDataConsumer::cancel(v4);
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  result = (WebCore::UserGestureToken *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(result, v3);
      result = (WebCore::UserGestureToken *)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    result = *(WebCore::UserGestureToken **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = 0;
    if (result)
      return (WebCore::UserGestureToken *)(*(uint64_t (**)(WebCore::UserGestureToken *))(*(_QWORD *)result
                                                                                                 + 8))(result);
  }
  return result;
}

uint64_t *WebCore::resolveWithTypeAndData(uint64_t *result, WTF::StringImpl *a2, uint64_t a3, void *a4, size_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  WTF::StringImpl *v20;

  v8 = result;
  v9 = *result;
  v10 = *(_QWORD *)(*result + 8);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    v12 = v11 - 96;
    v13 = *(unsigned __int8 *)(v11 + 178);
    if (*(_BYTE *)(v11 + 178))
    {
      if (v13 == 1 || v13 == 2)
      {
        v14 = 0;
        ++*(_DWORD *)(v11 + 216);
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = 0;
      *(_DWORD *)(v11 - 264) += 2;
    }
  }
  else
  {
    v12 = 0;
    v14 = 1;
  }
  switch((int)a2)
  {
    case 1:
      result = (uint64_t *)WebCore::fulfillPromiseWithArrayBufferFromSpan(result);
      goto LABEL_21;
    case 2:
      v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v15 = off_1E3355A78;
      *((_QWORD *)v15 + 1) = a4;
      *((_QWORD *)v15 + 2) = a5;
      *((_QWORD *)v15 + 3) = a3;
      v20 = v15;
      WebCore::DeferredPromise::resolveCallbackValueWithNewlyCreated<WebCore::IDLInterface<WebCore::Blob>>(v9, &v20);
      result = (uint64_t *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
      goto LABEL_21;
    case 3:
      result = (uint64_t *)WebCore::fulfillPromiseWithUint8ArrayFromSpan(result, a4, a5);
      goto LABEL_21;
    case 4:
      WebCore::TextResourceDecoder::textFromUTF8((const char *)a4, a5, &v20);
      WebCore::fulfillPromiseWithJSON(v8);
      goto LABEL_12;
    case 5:
      WebCore::TextResourceDecoder::textFromUTF8((const char *)a4, a5, &v20);
      WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(v9, (uint64_t *)&v20);
LABEL_12:
      result = (uint64_t *)v20;
      v20 = 0;
      if (result)
        goto LABEL_13;
      goto LABEL_21;
    case 6:
      WebCore::FetchBodyConsumer::packageFormData((uint64_t *)&v20, (char *)v12, a3, (char *)a4, a5);
      v16 = v20;
      v17 = *v8;
      if (v20)
      {
        result = (uint64_t *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::DOMFormData>>(v17, v20);
        if (*((_DWORD *)v16 + 4) == 1)
          result = (uint64_t *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 16))(v16);
        else
          --*((_DWORD *)v16 + 4);
      }
      else
      {
        v19 = 0;
        WebCore::DeferredPromise::reject(v17, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v19, 0);
        result = v19;
        v19 = 0;
        if (result)
        {
LABEL_13:
          if (*(_DWORD *)result == 2)
            result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *(_DWORD *)result -= 2;
        }
      }
LABEL_21:
      if ((v14 & 1) == 0)
      {
        v18 = *(unsigned __int8 *)(v12 + 274);
        if (*(_BYTE *)(v12 + 274))
        {
          if (v18 == 1)
          {
            if (*(_DWORD *)(v12 + 312) == 1)
              return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
            else
              --*(_DWORD *)(v12 + 312);
          }
          else if (v18 == 2)
          {
            return (uint64_t *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v12 + 312));
          }
        }
        else if (*(_DWORD *)(v12 - 168) == 2)
        {
          if ((*(_WORD *)(v12 - 162) & 0x400) == 0)
            return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)(v12 - 192), a2);
        }
        else
        {
          *(_DWORD *)(v12 - 168) -= 2;
        }
      }
      return result;
    default:
      goto LABEL_21;
  }
}

_QWORD *WebCore::FetchBodyConsumer::resolveWithFormData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FormData const&,WebCore::ScriptExecutionContext *)::$_0::~$_0(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v3 + 8);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v18 = v11;
              v19 = v10;
              v20 = (WTF *)v12;
              v21 = v3;
              atomic_store(1u, v12);
              v15 = v12[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E3355A48[v15])(&v23, v12 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              v3 = v21;
              v11 = v18;
              v10 = v19;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v16 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v16 && v16 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v22 = v3;
        WTF::fastFree(v16, a2);
        v3 = v22;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  return a1;
}

uint64_t *WTF::Function<void ()(WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&)>::Function<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v4 = WTF::fastMalloc((WTF *)0x28);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = off_1E3355C08;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a2 + 4);
  v7 = (_DWORD *)a2[3];
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v4 + 32) = v7;
  *a1 = v4;
  return a1;
}

uint64_t WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v4 + 8);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v18 = v11;
              v19 = v10;
              v20 = (WTF *)v12;
              v21 = v4;
              atomic_store(1u, v12);
              v15 = v12[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E3355A48[v15])(&v23, v12 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              v4 = v21;
              v11 = v18;
              v10 = v19;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v16 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v16 && v16 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v22 = v4;
        WTF::fastFree(v16, a2);
        v4 = v22;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  return a1;
}

uint64_t WebCore::DeferredPromise::resolveCallbackValueWithNewlyCreated<WebCore::IDLInterface<WebCore::Blob>>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::JSDOMGlobalObject *v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  unint64_t v12;
  objc_class *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _BYTE v17[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(WebCore::JSDOMGlobalObject **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](v17, v7);
    v16 = v7;
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
      v9 = 0;
    else
      v9 = *(WebCore::JSDOMGlobalObject **)v8;
    v10 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9);
    (*(void (**)(_DWORD **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(&v15, *a2, v10);
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v15 + 24))(v15))
      v12 = WebCore::createWrapper<WebCore::File,WebCore::Blob>((uint64_t)v9, (uint64_t *)&v15);
    else
      v12 = WebCore::createWrapper<WebCore::Blob,WebCore::Blob>((WebCore::JSBlob **)v9, (uint64_t *)&v15, v11);
    v13 = (objc_class *)v12;
    v14 = v15;
    v15 = 0;
    if (v14)
    {
      if (v14[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[4];
    }
    if (*(_QWORD *)(v7 + 16))
      WebCore::DeferredPromise::handleUncaughtException(v4, &v16, v6);
    else
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v13);
    return MEMORY[0x19AEA32A0](v17);
  }
  return result;
}

uint64_t *WebCore::FetchBodyConsumer::takeAsText(uint64_t *this, uint64_t a2)
{
  uint64_t *v2;
  WebCore::SharedBufferBuilder *v3;
  uint64_t v4;
  WebCore::SharedBuffer *v5;
  const char *v6;
  void *v7;
  WebCore::SharedBuffer *v8;

  v2 = this;
  v4 = *(_QWORD *)(a2 + 8);
  v3 = (WebCore::SharedBufferBuilder *)(a2 + 8);
  if (v4)
  {
    WebCore::SharedBufferBuilder::takeAsContiguous(v3, &v8);
    v5 = v8;
    v6 = (const char *)WebCore::SharedBuffer::data(v8);
    WebCore::TextResourceDecoder::textFromUTF8(v6, *((_QWORD *)v5 + 6), v2);
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v8, v7);
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::DOMFormData>>(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::DOMFormData>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebCore::FetchBodyConsumer::append(WebCore::FetchBodyConsumer *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v3;
  WTF::DeferrableRefCountedBase *result;
  WTF::DeferrableRefCountedBase *v6;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(a2, &v6);
    WebCore::FetchBodySource::enqueue(v3, &v6);
    result = v6;
    v6 = 0;
    if (result)
      return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  else
  {
    WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)this + 1);
    return (WTF::DeferrableRefCountedBase *)WebCore::FragmentedSharedBuffer::append(*((WebCore::FragmentedSharedBuffer **)this + 1), a2);
  }
  return result;
}

_QWORD *WebCore::Blob::create(uint64_t *a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = bmalloc::api::isoAllocate();
  v9 = WebCore::Blob::Blob(v8, a2, a3, a4);
  *a1 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v9 + 24));
}

unsigned int **WebCore::SharedBufferBuilder::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unsigned int *v21;
  unsigned int *v22;
  char v23;

  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *a1;
  *a1 = v3;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = v5[5];
      if ((_DWORD)v9)
      {
        v10 = *((_QWORD *)v5 + 1);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v18 = v11;
              v19 = v10;
              v20 = (WTF *)v12;
              v21 = v5;
              atomic_store(1u, v12);
              v15 = v12[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E3355A48[v15])(&v23, v12 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              v5 = v21;
              v11 = v18;
              v10 = v19;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v16 = (WTF *)*((_QWORD *)v5 + 1);
      if (v5 + 6 != (unsigned int *)v16 && v16 != 0)
      {
        *((_QWORD *)v5 + 1) = 0;
        v5[4] = 0;
        v22 = v5;
        WTF::fastFree(v16, a2);
        v5 = v22;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

WebCore::ContextDestructionObserver *WebCore::FetchBodyOwner::FetchBodyOwner(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, uint64_t a3, uint64_t *a4)
{
  WebCore::ScriptExecutionContext *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  char *v20;
  _BYTE v21[24];
  WebCore::ContextDestructionObserver *v22;

  v6 = a2;
  *((_DWORD *)this + 6) = 1;
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v18 = (char *)a2 - 192;
    v19 = *((_QWORD *)a2 + 64);
    if (v19)
    {
      v20 = *(char **)(v19 + 8);
      if (v20)
        v18 = v20;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v18 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*((_BYTE *)v6 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195327360);
    }
    v22 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v22, (uint64_t)v21);
  }
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &off_1E3355820;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 128) = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    *((_DWORD *)this + 12) = -1;
    v8 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(_BYTE *, char *, uint64_t))off_1E33559F8[v8])(v21, (char *)this + 40, a3);
      *((_DWORD *)this + 12) = v8;
    }
    *((_DWORD *)this + 14) = *(_DWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *((_QWORD *)this + 8) = v9;
    v10 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = 0;
    *((_QWORD *)this + 9) = v10;
    v11 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0;
    *((_QWORD *)this + 10) = v11;
    v12 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 48) = 0;
    *((_QWORD *)this + 11) = v12;
    *((_BYTE *)this + 96) = *(_BYTE *)(a3 + 56);
    v13 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *((_QWORD *)this + 13) = v13;
    v14 = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 72) = 0;
    *((_QWORD *)this + 14) = v14;
    v15 = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 80) = 0;
    *((_QWORD *)this + 15) = v15;
    *((_BYTE *)this + 128) = 1;
  }
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = 0;
  v16 = *a4;
  *a4 = 0;
  *((_QWORD *)this + 19) = v16;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 70) = 0;
  return this;
}

WebCore::UserGestureToken *WebCore::FetchBodyOwner::stop(WebCore::FetchBodyOwner *this, void *a2)
{
  WebCore::UserGestureToken *result;

  result = (WebCore::UserGestureToken *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 8) == 1)
      result = (WebCore::UserGestureToken *)(*(uint64_t (**)(WebCore::UserGestureToken *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 8);
  }
  if (*((_BYTE *)this + 128))
    result = WebCore::FetchBodyConsumer::clean((WebCore::FetchBodyOwner *)((char *)this + 56), a2);
  if (*((_BYTE *)this + 184))
  {
    result = (WebCore::UserGestureToken *)*((_QWORD *)this + 22);
    if (result)
      return (WebCore::UserGestureToken *)WebCore::FetchLoader::stop(result, a2);
  }
  return result;
}

uint64_t WebCore::FetchLoader::stop(WebCore::FetchLoader *this, void *a2)
{
  WebCore::FetchBodyConsumer *v3;
  uint64_t result;

  v3 = (WebCore::FetchBodyConsumer *)*((_QWORD *)this + 5);
  if (v3)
    WebCore::FetchBodyConsumer::clean(v3, a2);
  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *WebCore::FetchBodyOwner::arrayBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *result;
  uint64_t v10;
  WTF::StringImpl *isDisturbed;
  uint64_t v12;
  int v13;
  WebCore::FetchBodyOwner *v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  objc_class **v20;
  WTF::StringImpl *v21;
  objc_class *v22;

  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 == -1)
  {
    v14 = (WebCore::FetchBodyOwner *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)WebCore::FetchBodyOwner::loadingException(v15, v14);
  }
  v20 = &v22;
  ((void (*)(uint64_t *__return_ptr, objc_class ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v17, &v20, a1 + 200);
  if (!v19)
  {
    if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 192))
      return (WTF *)WebCore::fulfillPromiseWithArrayBufferFromSpan(a2);
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_30;
    v10 = *(_QWORD *)(a1 + 120);
    if (!v10)
    {
      *(_BYTE *)(a1 + 136) = 1;
LABEL_21:
      *(_DWORD *)(a1 + 56) = 1;
      return WebCore::FetchBody::consume(a1 + 40, (uint64_t *)a1, a2);
    }
    isDisturbed = (WTF::StringImpl *)WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v10 + 8));
    if ((isDisturbed & 1) != 0)
      goto LABEL_30;
    if (*(_BYTE *)(a1 + 128))
    {
      isDisturbed = (WTF::StringImpl *)WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(a1 + 120) + 8));
      if ((_DWORD)isDisturbed)
      {
LABEL_30:
        v12 = *a2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v20 = 0;
        LOBYTE(v17) = 33;
        if (v16)
          *(_DWORD *)v16 += 2;
        v18 = v16;
        WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v17, 0, (objc_class **)&v20);
        isDisturbed = v18;
        v18 = 0;
        if (!isDisturbed)
        {
LABEL_35:
          result = v16;
          if (!v16)
            return result;
          goto LABEL_13;
        }
        if (*(_DWORD *)isDisturbed != 2)
        {
          *(_DWORD *)isDisturbed -= 2;
          goto LABEL_35;
        }
LABEL_39:
        WTF::StringImpl::destroy(isDisturbed, v8);
        goto LABEL_35;
      }
      v13 = *(unsigned __int8 *)(a1 + 128);
      *(_BYTE *)(a1 + 136) = 1;
      if (v13)
        goto LABEL_21;
    }
    __break(1u);
    goto LABEL_39;
  }
  v5 = *a2;
  v6 = v17;
  v7 = v18;
  if (v18)
    *(_DWORD *)v18 += 4;
  v22 = 0;
  LOBYTE(v20) = v6;
  v21 = v7;
  WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v20, 0, &v22);
  result = v21;
  v21 = 0;
  if (!result)
  {
LABEL_8:
    if (!v7)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_8;
  }
  result = (WTF *)WTF::StringImpl::destroy(result, v8);
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v7 == 2)
    result = (WTF *)WTF::StringImpl::destroy(v7, v8);
  else
    *(_DWORD *)v7 -= 2;
LABEL_11:
  if (v19)
  {
    result = v18;
    v18 = 0;
    if (result)
    {
LABEL_13:
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::FetchBodyOwner::loadingException(WebCore::FetchBodyOwner *this)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 70);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FetchBodyOwner::blob(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, (char *)this + 200);
  }
}

WTF::StringImpl *WebCore::FetchBodyOwner::blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16[8];
  WTF::StringImpl *v17;
  char v18[8];
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  char v23;
  char *v24;

  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::FetchBodyOwner::bytes(v15);
  }
  v24 = &v23;
  ((void (*)(WTF::StringImpl **__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v20, &v24, a1 + 200);
  if (!v22)
  {
    if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 192))
    {
      v10 = *a2;
      v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v11 = off_1E3355C58;
      *((_QWORD *)v11 + 1) = a1;
      v20 = v11;
      WebCore::DeferredPromise::resolveCallbackValueWithNewlyCreated<WebCore::IDLInterface<WebCore::Blob>>(v10, &v20);
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
    }
    if (!*(_BYTE *)(a1 + 136))
    {
      v5 = *(_QWORD *)(a1 + 120);
      if (!v5)
      {
        *(_BYTE *)(a1 + 136) = 1;
LABEL_8:
        *(_DWORD *)(a1 + 56) = 2;
        return WebCore::FetchBody::consume(a1 + 40, (uint64_t *)a1, a2);
      }
      if (!WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v5 + 8)))
      {
        if (*(_BYTE *)(a1 + 128))
        {
          if (WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(a1 + 120)
                                                                                             + 8)))
            goto LABEL_23;
          v12 = *(unsigned __int8 *)(a1 + 128);
          *(_BYTE *)(a1 + 136) = 1;
          if (v12)
            goto LABEL_8;
        }
        __break(1u);
      }
    }
LABEL_23:
    v13 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v20;
    v16[0] = 33;
    v17 = v20;
    result = WebCore::DeferredPromise::reject(v13, (uint64_t)v16, 0);
    if (v14)
    {
      if (*(_DWORD *)v14 != 2)
      {
        *(_DWORD *)v14 -= 2;
        return result;
      }
      result = v14;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    return result;
  }
  v7 = *a2;
  v18[0] = (char)v20;
  v8 = v21;
  if (v21)
  {
    *(_DWORD *)v21 += 2;
    v19 = v8;
    result = WebCore::DeferredPromise::reject(v7, (uint64_t)v18, 0);
    if (*(_DWORD *)v8 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v9);
    else
      *(_DWORD *)v8 -= 2;
  }
  else
  {
    v19 = 0;
    result = WebCore::DeferredPromise::reject(v7, (uint64_t)v18, 0);
  }
  if (v22)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
  }
  return result;
}

void WebCore::FetchBodyOwner::bytes(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *isDisturbed;
  uint64_t v13;
  int v14;
  WebCore::FetchBodyOwner *v15;
  WebCore::FetchBodyOwner *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  objc_class **v21;
  WTF::StringImpl *v22;
  objc_class *v23;

  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 == -1)
  {
    v15 = (WebCore::FetchBodyOwner *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::FetchBodyOwner::cloneBody(v15, v16);
    return;
  }
  v21 = &v23;
  ((void (*)(uint64_t *__return_ptr, objc_class ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v18, &v21, a1 + 200);
  if (!v20)
  {
    if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 192))
    {
      WebCore::fulfillPromiseWithUint8ArrayFromSpan(a2, 0, 0);
      return;
    }
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_30;
    v11 = *(_QWORD *)(a1 + 120);
    if (!v11)
    {
      *(_BYTE *)(a1 + 136) = 1;
LABEL_21:
      *(_DWORD *)(a1 + 56) = 3;
      WebCore::FetchBody::consume(a1 + 40, (uint64_t *)a1, a2);
      return;
    }
    isDisturbed = (WTF::StringImpl *)WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v11 + 8));
    if ((isDisturbed & 1) != 0)
      goto LABEL_30;
    if (*(_BYTE *)(a1 + 128))
    {
      isDisturbed = (WTF::StringImpl *)WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(a1 + 120) + 8));
      if ((_DWORD)isDisturbed)
      {
LABEL_30:
        v13 = *a2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v21 = 0;
        LOBYTE(v18) = 33;
        if (v17)
          *(_DWORD *)v17 += 2;
        v19 = v17;
        WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)&v18, 0, (objc_class **)&v21);
        isDisturbed = v19;
        v19 = 0;
        if (!isDisturbed)
        {
LABEL_35:
          v10 = v17;
          if (!v17)
            return;
          goto LABEL_13;
        }
        if (*(_DWORD *)isDisturbed != 2)
        {
          *(_DWORD *)isDisturbed -= 2;
          goto LABEL_35;
        }
LABEL_39:
        WTF::StringImpl::destroy(isDisturbed, v8);
        goto LABEL_35;
      }
      v14 = *(unsigned __int8 *)(a1 + 128);
      *(_BYTE *)(a1 + 136) = 1;
      if (v14)
        goto LABEL_21;
    }
    __break(1u);
    goto LABEL_39;
  }
  v5 = *a2;
  v6 = v18;
  v7 = v19;
  if (v19)
    *(_DWORD *)v19 += 4;
  v23 = 0;
  LOBYTE(v21) = v6;
  v22 = v7;
  WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v21, 0, &v23);
  v9 = v22;
  v22 = 0;
  if (!v9)
  {
LABEL_8:
    if (!v7)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v9, v8);
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v8);
  else
    *(_DWORD *)v7 -= 2;
LABEL_11:
  if (v20)
  {
    v10 = v19;
    v19 = 0;
    if (v10)
    {
LABEL_13:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

void WebCore::FetchBodyOwner::cloneBody(WebCore::FetchBodyOwner *this, WebCore::FetchBodyOwner *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  WTF *v17;
  WTF *v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl **v23;
  void *v24;
  int v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF *v37;
  char *v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  char v43;
  __int128 v44;
  WTF *v45;
  WTF *v46;
  __int128 v47;
  __int128 v48;
  char v49;
  __int128 v50;
  char v51;

  v4 = *((unsigned int *)this + 70);
  v5 = *((unsigned int *)a2 + 70);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(char **, char *))off_1E3355AE0[v4])(&v38, (char *)this + 200);
    *((_DWORD *)this + 70) = -1;
    goto LABEL_6;
  }
  v38 = (char *)this + 200;
  ((void (*)(char **))off_1E3355AF8[v5])(&v38);
LABEL_6:
  if (*((_BYTE *)a2 + 128))
  {
    LODWORD(v46) = *((_DWORD *)a2 + 14);
    v47 = 0u;
    v48 = 0u;
    v49 = 0;
    v50 = 0u;
    WebCore::SharedBufferBuilder::operator=((unsigned int **)&v47, (unsigned int **)a2 + 8);
    v38 = 0;
    v39 = 0;
    v40 = (int)v46;
    v41 = v47;
    v6 = v48;
    v47 = 0u;
    v48 = 0u;
    v42 = v6;
    v43 = v49;
    v7 = v50;
    v50 = 0u;
    v44 = v7;
    v45 = 0;
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v46, v8);
    switch(*((_DWORD *)a2 + 12))
    {
      case 1:
        v9 = (char *)*((_QWORD *)a2 + 5);
        ++*((_DWORD *)v9 + 4);
        v38 = v9;
        v10 = 1;
        goto LABEL_16;
      case 2:
        v14 = (char *)*((_QWORD *)a2 + 5);
        ++*(_DWORD *)v14;
        v38 = v14;
        v10 = 2;
        goto LABEL_16;
      case 3:
        v12 = (char *)*((_QWORD *)a2 + 5);
        *(_DWORD *)v12 += 2;
        v38 = v12;
        v10 = 3;
        goto LABEL_16;
      case 4:
        v13 = (char *)*((_QWORD *)a2 + 5);
        ++*(_DWORD *)v13;
        v38 = v13;
        v10 = 4;
        goto LABEL_16;
      case 5:
        v11 = (char *)*((_QWORD *)a2 + 5);
        ++*(_DWORD *)v11;
        v38 = v11;
        v10 = 5;
        goto LABEL_16;
      case 6:
        v15 = (char *)*((_QWORD *)a2 + 5);
        if (v15)
          *(_DWORD *)v15 += 2;
        v38 = v15;
        v10 = 6;
LABEL_16:
        v39 = v10;
        break;
      default:
        v23 = (WTF::StringImpl **)*((_QWORD *)a2 + 15);
        if (v23)
        {
          WebCore::ReadableStream::tee(v23, 1, (uint64_t)&v46);
          v25 = DWORD2(v47);
          if (!DWORD2(v47))
          {
            v26 = v46;
            v27 = DWORD1(v47);
            v46 = 0;
            *(_QWORD *)&v47 = 0;
            if (!(_DWORD)v27)
            {
              __break(0xC471u);
              JUMPOUT(0x195327F2CLL);
            }
            v28 = *(_QWORD *)v26;
            *(_QWORD *)v26 = 0;
            v29 = (WTF *)*((_QWORD *)a2 + 15);
            *((_QWORD *)a2 + 15) = v28;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
              {
                v36 = (_DWORD *)*((_QWORD *)v29 + 1);
                *((_QWORD *)v29 + 1) = 0;
                if (v36)
                {
                  if (v36[4] == 1)
                  {
                    v37 = v29;
                    (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
                    v29 = v37;
                  }
                  else
                  {
                    --v36[4];
                  }
                }
                WTF::fastFree(v29, v24);
              }
              else
              {
                --*(_DWORD *)v29;
              }
            }
            if (v27 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195327F34);
            }
            v30 = 0;
            v31 = (WTF *)*((_QWORD *)v26 + 1);
            *((_QWORD *)v26 + 1) = 0;
            v45 = v31;
            v32 = 8 * v27;
            do
            {
              v33 = *(WTF **)((char *)v26 + v30);
              *(_QWORD *)((char *)v26 + v30) = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 1)
                {
                  v34 = (_DWORD *)*((_QWORD *)v33 + 1);
                  *((_QWORD *)v33 + 1) = 0;
                  if (v34)
                  {
                    if (v34[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
                    else
                      --v34[4];
                  }
                  WTF::fastFree(v33, v24);
                }
                else
                {
                  --*(_DWORD *)v33;
                }
              }
              v30 += 8;
            }
            while (v32 != v30);
            WTF::fastFree(v26, v24);
            v25 = DWORD2(v47);
          }
          if (v25 != -1)
            ((void (*)(char *, WTF **))off_1E3355A38[v25])(&v51, &v46);
        }
        v10 = 0;
        break;
    }
    if (*((_BYTE *)this + 128))
    {
      WebCore::FetchBody::operator=((uint64_t)this + 40, (uint64_t)&v38);
      v17 = v45;
      v45 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          v35 = (_DWORD *)*((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = 0;
          if (v35)
          {
            if (v35[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
            else
              --v35[4];
          }
          WTF::fastFree(v17, v16);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    else
    {
      *((_BYTE *)this + 40) = 0;
      *((_DWORD *)this + 12) = -1;
      ((void (*)(WTF **, char *, char **))off_1E33559F8[v10])(&v46, (char *)this + 40, &v38);
      *((_DWORD *)this + 12) = v10;
      v18 = v45;
      v19 = v43;
      *((_DWORD *)this + 14) = v40;
      v20 = v41;
      v41 = 0u;
      v21 = v42;
      v42 = 0u;
      *((_OWORD *)this + 4) = v20;
      *((_OWORD *)this + 5) = v21;
      *((_BYTE *)this + 96) = v19;
      v22 = v44;
      v44 = 0u;
      *(_OWORD *)((char *)this + 104) = v22;
      *((_QWORD *)this + 15) = v18;
      *((_BYTE *)this + 128) = 1;
      v45 = 0;
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v40, v16);
    if (v39 != -1)
      ((void (*)(WTF **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v39])(&v46, &v38);
  }
}

uint64_t std::optional<WebCore::FetchBody>::operator=[abi:sn180100]<WebCore::FetchBody,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  if (*(_BYTE *)(a1 + 88))
  {
    WebCore::FetchBody::operator=(a1, a2);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E33559F8[v4])(&v13, a1, a2);
      *(_DWORD *)(a1 + 8) = v4;
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v9;
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a1 + 72) = v10;
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

WTF::StringImpl *WebCore::FetchBodyOwner::extractBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  BOOL v7;
  void *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *result;
  uint64_t v12;
  _BYTE v13[88];
  _BYTE v14[8];
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;

  WebCore::HTTPHeaderMap::get((unsigned int *)(*(_QWORD *)(a2 + 152) + 8), 26, &v17);
  v6 = v17;
  WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_6>((uint64_t)v14, a3, (uint64_t)&v17, (uint64_t)&v17, (uint64_t)&v17, (uint64_t)&v17);
  if (v6)
    v7 = 1;
  else
    v7 = v17 == 0;
  if (!v7)
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(*(_QWORD *)(a2 + 152) + 8), (WTF::StringImpl *)0x1A, &v17);
  if (v16)
  {
    if (v16 != 1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    v12 = v15;
    v15 = 0;
    *(_BYTE *)a1 = v14[0];
    *(_QWORD *)(a1 + 8) = v12;
    v10 = 1;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    WebCore::ExceptionOr<WebCore::FetchBody>::releaseReturnValue((uint64_t)v14, (uint64_t)v13);
    std::optional<WebCore::FetchBody>::operator=[abi:sn180100]<WebCore::FetchBody,void>(a2 + 40, (uint64_t)v13);
    WebCore::FetchBody::~FetchBody((WebCore::FetchBody *)v13, v8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v10 = v16;
    if (v16 == -1)
      goto LABEL_9;
  }
  ((void (*)(_BYTE *, _BYTE *))off_1E3355B50[v10])(v13, v14);
LABEL_9:
  result = v17;
  v17 = 0;
  if (!result)
    return result;
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WebCore::FetchBodyOwner::formData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  objc_class *v31;

  v4 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v4 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_60:
    v16 = 0;
    goto LABEL_42;
  }
  v2 = a2;
  v3 = a1;
  v29 = (WTF::StringImpl *)&v31;
  result = (uint64_t)((uint64_t (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v26, &v29, a1 + 200);
  if (v28)
  {
    v6 = *v2;
    v7 = (char)v26;
    v8 = v27;
    if (v27)
      *(_DWORD *)v27 += 4;
    v31 = 0;
    LOBYTE(v29) = v7;
    v30 = v8;
    WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)&v29, 0, &v31);
    result = (uint64_t)v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        if (!v8)
          goto LABEL_11;
LABEL_9:
        if (*(_DWORD *)v8 == 2)
          result = WTF::StringImpl::destroy(v8, v9);
        else
          *(_DWORD *)v8 -= 2;
LABEL_11:
        if (!v28)
          return result;
        result = (uint64_t)v27;
        v27 = 0;
        if (!result)
          return result;
LABEL_19:
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        *(_DWORD *)result -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v8)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_BYTE *)(v3 + 128))
  {
    if (*(_BYTE *)(v3 + 136))
      goto LABEL_30;
    v10 = *(_QWORD *)(v3 + 120);
    if (!v10)
      goto LABEL_17;
    result = WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v10 + 8));
    if ((result & 1) != 0)
      goto LABEL_30;
    if (!*(_BYTE *)(v3 + 128))
    {
      __break(1u);
      goto LABEL_62;
    }
    result = WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(v3 + 120) + 8));
    if ((_DWORD)result)
    {
LABEL_30:
      v12 = *v2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = 0;
      LOBYTE(v26) = 33;
      if (v25)
        *(_DWORD *)v25 += 2;
      v27 = v25;
      WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v26, 0, &v29);
      v13 = v27;
      v27 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = (uint64_t)v25;
      if (v25)
        goto LABEL_19;
      return result;
    }
    if (*(_BYTE *)(v3 + 128))
    {
LABEL_17:
      if (!*(_BYTE *)(v3 + 192))
      {
        *(_BYTE *)(v3 + 136) = 1;
        *(_DWORD *)(v3 + 56) = 6;
        return (uint64_t)WebCore::FetchBody::consume(v3 + 40, (uint64_t *)v3, v2);
      }
LABEL_18:
      v11 = *v2;
      v26 = 0;
      WebCore::DeferredPromise::reject(v11, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v26, 0);
      result = (uint64_t)v26;
      v26 = 0;
      if (!result)
        return result;
      goto LABEL_19;
    }
  }
  v14 = *(_QWORD *)(*v2 + 8);
  if (!v14)
    goto LABEL_60;
  v15 = *(_QWORD *)(v14 + 8);
  if (v15)
    v16 = (char *)(v15 - 96);
  else
    v16 = 0;
LABEL_42:
  v17 = *(_QWORD *)(v3 + 152);
  v18 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = (WTF::StringImpl **)(*(_QWORD *)(v17 + 8) + 8);
    while (*((_WORD *)v20 - 4) != 26)
    {
      ++v19;
      v20 += 2;
      if (v18 == v19)
        goto LABEL_46;
    }
    if (v19 < v18)
    {
      v21 = *v20;
      if (*v20)
        *(_DWORD *)v21 += 2;
      goto LABEL_50;
    }
LABEL_62:
    __break(0xC471u);
    return result;
  }
LABEL_46:
  v21 = 0;
LABEL_50:
  v29 = v21;
  WebCore::FetchBodyConsumer::packageFormData((uint64_t *)&v26, v16, (uint64_t)&v29, 0, 0);
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v26;
  if (!v26)
    goto LABEL_18;
  result = WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::DOMFormData>>(*v2, v26);
  if (*((_DWORD *)v24 + 4) == 1)
    return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 16))(v24);
  --*((_DWORD *)v24 + 4);
  return result;
}

WTF *WebCore::FetchBodyOwner::json(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *result;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *isDisturbed;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;
  objc_class **v20;
  WTF::StringImpl *v21;
  objc_class *v22;

  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)WebCore::FetchBodyOwner::text(v15);
  }
  v20 = &v22;
  ((void (*)(WTF::StringImpl **__return_ptr, objc_class ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v17, &v20, a1 + 200);
  if (v19)
  {
    v5 = *a2;
    v6 = (char)v17;
    v7 = v18;
    if (v18)
      *(_DWORD *)v18 += 4;
    v22 = 0;
    LOBYTE(v20) = v6;
    v21 = v7;
    WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v20, 0, &v22);
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF *)WTF::StringImpl::destroy(result, v8);
        if (!v7)
          goto LABEL_11;
LABEL_9:
        if (*(_DWORD *)v7 == 2)
          result = (WTF *)WTF::StringImpl::destroy(v7, v8);
        else
          *(_DWORD *)v7 -= 2;
LABEL_11:
        if (!v19)
          return result;
        result = v18;
        v18 = 0;
        if (!result)
          return result;
LABEL_17:
        if (*(_DWORD *)result == 2)
          return (WTF *)WTF::StringImpl::destroy(result, v8);
        *(_DWORD *)result -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v7)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 192))
  {
    v10 = *a2;
    v17 = 0;
    WebCore::DeferredPromise::reject(v10, (JSC::JSGlobalObject *)9, (JSC::JSGlobalObject *)&v17, 0);
    result = v17;
    v17 = 0;
    if (!result)
      return result;
    goto LABEL_17;
  }
  if (*(_BYTE *)(a1 + 136))
    goto LABEL_33;
  v11 = *(_QWORD *)(a1 + 120);
  if (!v11)
  {
    *(_BYTE *)(a1 + 136) = 1;
    goto LABEL_23;
  }
  isDisturbed = (WTF::StringImpl *)WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v11 + 8));
  if ((isDisturbed & 1) != 0)
    goto LABEL_33;
  if (!*(_BYTE *)(a1 + 128))
    goto LABEL_41;
  isDisturbed = (WTF::StringImpl *)WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(a1 + 120) + 8));
  if ((_DWORD)isDisturbed)
  {
LABEL_33:
    v13 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = 0;
    LOBYTE(v17) = 33;
    if (v16)
      *(_DWORD *)v16 += 2;
    v18 = v16;
    WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)&v17, 0, (objc_class **)&v20);
    isDisturbed = v18;
    v18 = 0;
    if (!isDisturbed)
    {
LABEL_38:
      result = v16;
      if (!v16)
        return result;
      goto LABEL_17;
    }
    if (*(_DWORD *)isDisturbed != 2)
    {
      *(_DWORD *)isDisturbed -= 2;
      goto LABEL_38;
    }
LABEL_42:
    WTF::StringImpl::destroy(isDisturbed, v8);
    goto LABEL_38;
  }
  v14 = *(unsigned __int8 *)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 1;
  if (!v14)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_23:
  if (*(_DWORD *)(a1 + 48) == 6)
    return WebCore::fulfillPromiseWithJSON(a2);
  *(_DWORD *)(a1 + 56) = 4;
  return WebCore::FetchBody::consume(a1 + 40, (uint64_t *)a1, a2);
}

WTF::StringImpl *WebCore::FetchBodyOwner::text(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::FetchLoader *v14;
  WebCore::ScriptExecutionContext *v15;
  const WebCore::Blob *v16;
  char v17[8];
  uint64_t v18;
  char v19[8];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  char v24;
  char *v25;

  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 == -1)
  {
    v14 = (WebCore::FetchLoader *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::FetchLoader::start(v14, v15, v16);
  }
  v25 = &v24;
  ((void (*)(WTF::StringImpl **__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v21, &v25, a1 + 200);
  if (!v23)
  {
    if (*(_BYTE *)(a1 + 128) && !*(_BYTE *)(a1 + 192))
    {
      if (*(_BYTE *)(a1 + 136))
        goto LABEL_26;
      v5 = *(_QWORD *)(a1 + 120);
      if (!v5)
      {
        *(_BYTE *)(a1 + 136) = 1;
        goto LABEL_8;
      }
      if (WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v5 + 8)))
        goto LABEL_26;
      if (*(_BYTE *)(a1 + 128))
      {
        if (WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(a1 + 120) + 8)))
        {
LABEL_26:
          v12 = *a2;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v13 = v21;
          v17[0] = 33;
          v18 = (uint64_t)v21;
          result = WebCore::DeferredPromise::reject(v12, (uint64_t)v17, 0);
          if (!v13)
            return result;
          if (*(_DWORD *)v13 != 2)
          {
            *(_DWORD *)v13 -= 2;
            return result;
          }
          result = v13;
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        }
        v11 = *(unsigned __int8 *)(a1 + 128);
        *(_BYTE *)(a1 + 136) = 1;
        if (v11)
        {
LABEL_8:
          if (*(_DWORD *)(a1 + 48) == 6)
            return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(*a2, (uint64_t *)(a1 + 40));
          *(_DWORD *)(a1 + 56) = 5;
          return WebCore::FetchBody::consume(a1 + 40, (uint64_t *)a1, a2);
        }
      }
      __break(1u);
      goto LABEL_26;
    }
    v10 = *a2;
    v21 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(v10, (uint64_t *)&v21);
    result = v21;
    v21 = 0;
    if (!result)
      return result;
LABEL_18:
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  }
  v7 = *a2;
  v19[0] = (char)v21;
  v8 = v22;
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v20 = v8;
    result = WebCore::DeferredPromise::reject(v7, (uint64_t)v19, 0);
    if (*(_DWORD *)v8 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v9);
    else
      *(_DWORD *)v8 -= 2;
  }
  else
  {
    v20 = 0;
    result = WebCore::DeferredPromise::reject(v7, (uint64_t)v19, 0);
  }
  if (v23)
  {
    result = v22;
    v22 = 0;
    if (result)
      goto LABEL_18;
  }
  return result;
}

WTF::StringImpl *WebCore::FetchLoader::start(WebCore::FetchLoader *this, WebCore::ScriptExecutionContext *a2, const WebCore::Blob *a3)
{
  WTF::StringImpl *v3;
  __int128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)a3 + 10);
  if (v3)
    *(_DWORD *)v3 += 2;
  v7 = v3;
  v4 = *(_OWORD *)((char *)a3 + 104);
  v8 = *(_OWORD *)((char *)a3 + 88);
  v9 = v4;
  WebCore::FetchLoader::startLoadingBlobURL(this, a2, (const WTF::URL *)&v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FetchBodyOwner::blobLoadingFailed(uint64_t this, void *a2)
{
  uint64_t v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  WebCore::FetchBodyOwner::BlobLoader *v9;
  const WebCore::ResourceResponse *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;

  v2 = this;
  v3 = *(_DWORD **)(this + 144);
  if (!v3)
  {
    if (*(_BYTE *)(this + 128))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11[0] = 33;
      WebCore::FetchBodyConsumer::loadingFailed(v2 + 56, (uint64_t)v11);
      this = (uint64_t)v12;
      v12 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v4);
        else
          *(_DWORD *)this -= 2;
      }
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_33;
  }
  if (!*((_BYTE *)v3 + 48))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11[0] = 33;
    if (!*((_BYTE *)v3 + 24))
    {
      v9 = (WebCore::FetchBodyOwner::BlobLoader *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebCore::FetchBodyOwner::BlobLoader::didReceiveResponse(v9, v10);
    }
    WebCore::ReadableStreamDefaultController::error((_DWORD **)v3 + 2, v11);
    v5 = (WTF *)*((_QWORD *)v3 + 1);
    if (v5)
    {
      *((_QWORD *)v3 + 1) = 0;
      v6 = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      WTF::fastFree(v5, a2);
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 40))(v3);
    }
    this = *((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = 0;
    if (!this)
      goto LABEL_17;
    do
    {
      v7 = __ldaxr((unsigned int *)this);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)this));
    if (v8)
    {
LABEL_17:
      this = (uint64_t)v12;
      v12 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)this -= 2;
      }
      v3 = *(_DWORD **)(v2 + 144);
      *(_QWORD *)(v2 + 144) = 0;
      if (!v3)
        goto LABEL_23;
      goto LABEL_21;
    }
LABEL_33:
    atomic_store(1u, (unsigned int *)this);
    WTF::fastFree((WTF *)this, a2);
    goto LABEL_17;
  }
  *(_QWORD *)(this + 144) = 0;
LABEL_21:
  if (v3[8] == 1)
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[8];
LABEL_23:
  if (*(_BYTE *)(v2 + 184))
  {
    this = *(_QWORD *)(v2 + 176);
    *(_QWORD *)(v2 + 176) = 0;
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 64))(this);
    *(_BYTE *)(v2 + 184) = 0;
  }
  return this;
}

void WebCore::FetchBodyOwner::BlobLoader::didReceiveResponse(WebCore::FetchBodyOwner::BlobLoader *this, const WebCore::ResourceResponse *a2)
{
  void *v4;
  CFTypeRef v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD v9[2];
  CFTypeRef cf;
  char v11;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  if (*((_WORD *)a2 + 68) != 200)
  {
    v8 = 0;
    WTF::URL::invalidate((WTF::URL *)&v8);
    cf = 0;
    v9[0] = 0;
    *(_QWORD *)((char *)v9 + 6) = 0;
    v11 = 1;
    if (*(_BYTE *)(*((_QWORD *)this + 2) + 48))
    {
      WebCore::FetchBodyOwner::blobLoadingFailed(*((_QWORD *)this + 1), v4);
      v5 = cf;
      cf = 0;
      if (v5)
        CFRelease(v5);
    }
    v6 = (WTF::StringImpl *)v9[0];
    v9[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WebCore::FetchBodyOwner::BlobLoader::didFail(uint64_t this, const WebCore::ResourceError *a2)
{
  if (*(_BYTE *)(*(_QWORD *)(this + 16) + 48))
    return WebCore::FetchBodyOwner::blobLoadingFailed(*(_QWORD *)(this + 8), a2);
  return this;
}

void WebCore::ResourceError::~ResourceError(WebCore::ResourceError *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

WTF::StringImpl *WebCore::FetchBodyOwner::BlobLoader::didSucceed(WTF::StringImpl *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v2;
  uint64_t v3;
  JSC::Structure *v4;
  WTF *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[12];

  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 144);
  if (!v3)
    goto LABEL_14;
  if (!*(_BYTE *)(v3 + 24))
  {
    this = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_39;
  }
  LOBYTE(v15[0]) = 0;
  v15[2] = (WTF::StringImpl *)&v15[4];
  memset(&v15[3], 0, 72);
  v15[4] = *(WTF::StringImpl **)(v3 + 16);
  v15[1] = (WTF::StringImpl *)0x800000001;
  v4 = *(JSC::Structure **)(16 * (*(_DWORD *)v15[4] & 0xFFFFFFFE) + 0x28);
  WebCore::invokeReadableStreamDefaultControllerFunction(v4, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v4 + 7) + 41456) + 4008));
  v5 = *(WTF **)(v3 + 8);
  if (v5)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v6 = *(_DWORD **)v5;
    *(_QWORD *)v5 = 0;
    if (v6)
    {
      if (v6[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      else
        --v6[4];
    }
    WTF::fastFree(v5, a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  this = *(WTF::StringImpl **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  if (this)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)this);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)this));
    if (!v8)
      goto LABEL_37;
  }
  while (1)
  {
    this = *(WTF::StringImpl **)(v2 + 144);
    *(_QWORD *)(v2 + 144) = 0;
    if (this)
    {
      if (*((_DWORD *)this + 8) == 1)
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      else
        --*((_DWORD *)this + 8);
    }
LABEL_14:
    if (*(_BYTE *)(v2 + 128))
      break;
    __break(1u);
LABEL_37:
    atomic_store(1u, (unsigned int *)this);
    WTF::fastFree(this, a2);
  }
  v9 = *(_QWORD *)(v2 + 152);
  v10 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 8) + 8);
    while (*((_WORD *)v12 - 4) != 26)
    {
      ++v11;
      v12 += 2;
      if (v10 == v11)
        goto LABEL_19;
    }
    if (v11 < v10)
    {
      v13 = *v12;
      if (*v12)
        *(_DWORD *)v13 += 2;
      goto LABEL_23;
    }
LABEL_39:
    __break(0xC471u);
    return this;
  }
LABEL_19:
  v13 = 0;
LABEL_23:
  v15[0] = v13;
  WebCore::FetchBodyConsumer::loadingSucceeded((WebCore::FetchBodyConsumer *)(v2 + 56), (const WTF::String *)v15);
  this = v15[0];
  v15[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
    else
      *(_DWORD *)this -= 2;
  }
  if (*(_BYTE *)(v2 + 184))
  {
    this = *(WTF::StringImpl **)(v2 + 176);
    *(_QWORD *)(v2 + 176) = 0;
    if (this)
      this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 64))(this);
    *(_BYTE *)(v2 + 184) = 0;
  }
  if (*(_DWORD *)(v2 + 24) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  --*(_DWORD *)(v2 + 24);
  return this;
}

uint64_t WebCore::FetchBodyOwner::createReadableStream@<X0>(WebCore::FetchBodyOwner *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  if (*((_BYTE *)this + 128)
    && (*((_BYTE *)this + 136)
     || (v11 = *((_QWORD *)this + 15)) != 0
     && WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v11 + 8))))
  {
    WebCore::ReadableStream::createFromJSValues((WebCore::JSDOMGlobalObject *)a2, 10, 0xAuLL, (uint64_t)&v28);
    v7 = v30;
    if (v30)
    {
      if (v30 != 1)
        goto LABEL_52;
      v26 = v29;
      v29 = 0;
      *(_BYTE *)a3 = v28;
      *(_QWORD *)(a3 + 8) = v26;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      v8 = (unsigned int *)*((unsigned __int8 *)this + 128);
      if (!*((_BYTE *)this + 128))
        goto LABEL_43;
      v9 = v28;
      v28 = 0;
      a2 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v9;
      if (a2)
      {
        if (*(_DWORD *)a2 == 1)
        {
          v23 = *(_DWORD **)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          if (v23)
          {
            if (v23[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[4];
          }
          WTF::fastFree((WTF *)a2, v6);
          v8 = (unsigned int *)*((unsigned __int8 *)this + 128);
          if (!*((_BYTE *)this + 128))
            goto LABEL_43;
          v9 = *((_QWORD *)this + 15);
        }
        else
        {
          --*(_DWORD *)a2;
        }
      }
      WebCore::InternalReadableStream::lock(*(WTF **)(v9 + 8));
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3355B60[v7])(&v27, &v28);
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x40);
    *(_BYTE *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = 1;
    *(_QWORD *)v7 = off_1E33558D8;
    *(_QWORD *)(v7 + 8) = 0;
    v12 = *((_QWORD *)this + 4);
    if (v12)
      goto LABEL_17;
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = this;
    v8 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (!v8)
      goto LABEL_17;
    do
    {
      v13 = __ldaxr(v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v8));
    if (!v14)
      goto LABEL_44;
    while (1)
    {
      v12 = *((_QWORD *)this + 4);
      if (v12)
      {
        do
LABEL_17:
          v15 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v15 + 1, (unsigned int *)v12));
      }
      *(_QWORD *)(v7 + 40) = v12;
      *(_BYTE *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      v16 = (_DWORD *)*((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = v7;
      if (v16)
      {
        if (v16[8] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          v7 = *((_QWORD *)this + 18);
        }
        else
        {
          --v16[8];
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      v27 = (WTF::StringImpl *)v7;
      v17 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>(a2, &v27);
      WebCore::ReadableStream::createFromJSValues((WebCore::JSDOMGlobalObject *)a2, v17, 0xAuLL, (uint64_t)&v28);
      v18 = v27;
      v27 = 0;
      if (v18)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 24))(v18);
      a2 = v30;
      if (v30)
        break;
      v8 = (unsigned int *)*((unsigned __int8 *)this + 128);
      if (*((_BYTE *)this + 128))
      {
        v19 = v28;
        v28 = 0;
        v20 = (WTF *)*((_QWORD *)this + 15);
        *((_QWORD *)this + 15) = v19;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
          {
            v22 = (_DWORD *)*((_QWORD *)v20 + 1);
            *((_QWORD *)v20 + 1) = 0;
            if (v22)
            {
              if (v22[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
              else
                --v22[4];
            }
            WTF::fastFree(v20, v6);
          }
          else
          {
            --*(_DWORD *)v20;
          }
        }
        v21 = 0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3355B60[v21])(&v27, &v28);
      }
LABEL_43:
      __break(1u);
LABEL_44:
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
    v24 = (_DWORD *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v24)
    {
      if (v24[8] == 1)
        goto LABEL_53;
      --v24[8];
    }
    while ((_DWORD)a2 != 1)
    {
LABEL_52:
      v24 = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    }
    v25 = v29;
    v29 = 0;
    *(_BYTE *)a3 = v28;
    *(_QWORD *)(a3 + 8) = v25;
    v21 = 1;
    *(_BYTE *)(a3 + 16) = 1;
    return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3355B60[v21])(&v27, &v28);
  }
}

uint64_t WebCore::FetchBodyOwner::consumeBodyAsStream(WebCore::FetchBodyOwner *this)
{
  WebCore::FetchBodyOwner *v1;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  WTF **v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  void *v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _BOOL4 v29;
  WTF *v30;
  void *v31;
  JSC::Structure *v32;
  uint64_t *v33;
  WTF *v34;
  _DWORD *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  JSC::Structure *v52;
  uint64_t *v53;
  WTF *v54;
  _DWORD *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v58;
  BOOL v59;
  _QWORD *v60;
  WTF *v61;
  WebCore::FormDataConsumer *v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  WTF *v66;
  uint64_t v67;
  void *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  void *v72;
  WTF *v73;
  _QWORD *v74;
  WTF *v75;
  WTF *v76;
  char v77;
  WTF *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  WTF **v86;

  v7 = *((unsigned int *)this + 70);
  if ((_DWORD)v7 != -1)
  {
    v1 = this;
    v86 = &v76;
    v8 = (unsigned int *)((unsigned int *(*)(WTF **__return_ptr, WTF ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner16loadingExceptionEvE3__0JZNKS9_16loadingExceptionEvE3__1ZNKS9_16loadingExceptionEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v78, &v86, (char *)this + 200);
    if (!(_BYTE)v80)
    {
      if (*((_BYTE *)v1 + 128))
      {
        v2 = *((_QWORD *)v1 + 18);
        switch(*((_DWORD *)v1 + 12))
        {
          case 1:
            WebCore::FetchBodyOwner::loadBlob(v1, *((const WebCore::Blob **)v1 + 5), 0);
            goto LABEL_106;
          case 2:
            v3 = *((_QWORD *)v1 + 5);
            v24 = *((_QWORD *)v1 + 1);
            if (v24)
            {
              v25 = *(_QWORD *)(v24 + 8);
              if (v25)
                v4 = (WTF *)(v25 - 96);
              else
                v4 = 0;
            }
            else
            {
              v4 = 0;
            }
            WebCore::FormData::asSharedBuffer(*((_QWORD **)v1 + 5), (uint64_t *)&v76);
            v5 = (WTF **)v76;
            if (!v76)
              goto LABEL_131;
            WebCore::FragmentedSharedBuffer::makeContiguous(v76, &v86);
            v6 = (WTF *)v86;
            if (*((_DWORD *)v86 + 5))
            {
              v26 = *((_QWORD *)v86[1] + 1);
              v27 = *(unsigned int *)(v26 + 24);
              if ((_DWORD)v27 == -1)
                goto LABEL_171;
              v78 = (WTF *)&v77;
              ((void (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v27])(&v78, v26 + 8);
            }
            JSC::ArrayBuffer::tryCreate();
            if (!*(_BYTE *)(v2 + 24))
              goto LABEL_170;
            v6 = (WTF *)(v2 + 16);
            v29 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v2 + 16), &v78);
            v30 = v78;
            v78 = 0;
            if (v30)
            {
              v59 = *(_DWORD *)v30 == 2;
              *(_DWORD *)v30 -= 2;
              if (v59)
              {
                v75 = v30;
                v67 = *((_QWORD *)v30 + 10);
                if (v67)
                {
                  *(_QWORD *)(v67 + 8) = 3;
                  *((_QWORD *)v75 + 10) = 0;
                }
                if ((*((_BYTE *)v75 + 72) & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v75 + 72));
                JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v75 + 16));
                v69 = (WTF *)*((_QWORD *)v75 + 1);
                if ((v69 & 1) == 0 && v69)
                {
                  v70 = *(WTF **)v69;
                  if (*(_QWORD *)v69)
                  {
                    *(_QWORD *)v69 = 0;
                    *((_DWORD *)v69 + 2) = 0;
                    WTF::fastFree(v70, v68);
                  }
                  WTF::fastFree(v69, v68);
                }
                WTF::fastFree(v75, v68);
              }
            }
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v86, v28);
            if (v29)
            {
              if (!*(_BYTE *)(v2 + 24))
                goto LABEL_170;
              LOBYTE(v78) = 0;
              v80 = (WTF *)((char *)&v81 + 8);
              v85 = 0;
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              *((_QWORD *)&v81 + 1) = *(_QWORD *)v6;
              v79 = (WTF::StringImpl *)0x800000001;
              v32 = *(JSC::Structure **)(16 * (**((_DWORD **)&v81 + 1) & 0xFFFFFFFE) + 0x28);
              WebCore::invokeReadableStreamDefaultControllerFunction(v32, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v32 + 7) + 41456) + 4008));
              v33 = (uint64_t *)v81;
              if ((_QWORD)v81)
              {
                v86 = &v79;
                v74 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v81, (uint64_t *)&v86);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v33, v74);
              }
              if (v80 != (WTF *)((char *)&v81 + 8) && v80)
                WTF::fastFree(v80, v31);
              v34 = *(WTF **)(v2 + 8);
              if (v34)
              {
                *(_QWORD *)(v2 + 8) = 0;
                v35 = *(_DWORD **)v34;
                *(_QWORD *)v34 = 0;
                if (v35)
                {
                  if (v35[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
                  else
                    --v35[4];
                }
                WTF::fastFree(v34, v31);
                (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
              }
              v36 = *(unsigned int **)(v2 + 40);
              *(_QWORD *)(v2 + 40) = 0;
              if (v36)
              {
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  atomic_store(1u, v36);
                  WTF::fastFree((WTF *)v36, v31);
                }
              }
            }
            v6 = v76;
            v76 = 0;
            if (v6)
            {
              do
              {
                v39 = __ldaxr((unsigned int *)v6);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, (unsigned int *)v6));
              if (!v40)
              {
                atomic_store(1u, (unsigned int *)v6);
                v41 = *((unsigned int *)v6 + 5);
                if ((_DWORD)v41)
                {
                  v42 = *((_QWORD *)v6 + 1);
                  v43 = v42 + 16 * v41;
                  do
                  {
                    v44 = *(unsigned int **)(v42 + 8);
                    *(_QWORD *)(v42 + 8) = 0;
                    if (v44)
                    {
                      do
                      {
                        v45 = __ldaxr(v44);
                        v46 = v45 - 1;
                      }
                      while (__stlxr(v46, v44));
                      if (!v46)
                      {
                        atomic_store(1u, v44);
                        v47 = v44[6];
                        if ((_DWORD)v47 != -1)
                          ((void (*)(WTF **, unsigned int *))off_1E3355A48[v47])(&v78, v44 + 2);
                        v44[6] = -1;
                        WTF::fastFree((WTF *)v44, v31);
                      }
                    }
                    v42 += 16;
                  }
                  while (v42 != v43);
                }
                v58 = (WTF *)*((_QWORD *)v6 + 1);
                v59 = (WTF *)((char *)v6 + 24) == v58 || v58 == 0;
                if (v59)
                  goto LABEL_130;
                goto LABEL_172;
              }
            }
            goto LABEL_106;
          case 3:
            goto LABEL_26;
          case 4:
            JSC::ArrayBufferView::span(*((JSC::ArrayBufferView **)v1 + 5));
LABEL_26:
            JSC::ArrayBuffer::tryCreate();
            if (!*(_BYTE *)(v2 + 24))
              goto LABEL_170;
            v3 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v2 + 16), &v78);
            v4 = v78;
            v78 = 0;
            if (!v4)
              goto LABEL_93;
            v59 = *(_DWORD *)v4 == 2;
            *(_DWORD *)v4 -= 2;
            if (!v59)
              goto LABEL_93;
            v20 = *((_QWORD *)v4 + 10);
            if (v20)
            {
              *(_QWORD *)(v20 + 8) = 3;
              *((_QWORD *)v4 + 10) = 0;
            }
            if ((*((_BYTE *)v4 + 72) & 1) == 0)
              JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v4 + 72));
            JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v4 + 16));
            v5 = (WTF **)*((_QWORD *)v4 + 1);
            if ((v5 & 1) == 0 && v5)
            {
              v22 = *v5;
              if (*v5)
              {
                *v5 = 0;
                *((_DWORD *)v5 + 2) = 0;
                WTF::fastFree(v22, v21);
              }
              WTF::fastFree((WTF *)v5, v21);
            }
            v23 = v4;
            goto LABEL_92;
          case 5:
            WTF::URLParser::serialize();
            if (v86)
            {
              v16 = (uint64_t)v86[1];
              v17 = *((unsigned int *)v86 + 1) | ((unint64_t)((*((_DWORD *)v86 + 4) >> 2) & 1) << 32);
            }
            else
            {
              v16 = 0;
              v17 = 0x100000000;
            }
            PAL::TextCodecUTF8::encodeUTF8(v16, v17, (uint64_t)&v78);
            v19 = (WTF::StringImpl *)v86;
            v86 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v18);
              else
                *(_DWORD *)v19 -= 2;
            }
            goto LABEL_87;
          case 6:
            v49 = *((_QWORD *)v1 + 5);
            if (v49)
            {
              v50 = *(_QWORD *)(v49 + 8);
              v51 = *(unsigned int *)(v49 + 4) | ((unint64_t)((*(_DWORD *)(v49 + 16) >> 2) & 1) << 32);
            }
            else
            {
              v50 = 0;
              v51 = 0x100000000;
            }
            PAL::TextCodecUTF8::encodeUTF8(v50, v51, (uint64_t)&v78);
LABEL_87:
            JSC::ArrayBuffer::tryCreate();
            if (!*(_BYTE *)(v2 + 24))
              goto LABEL_170;
            v3 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v2 + 16), &v86);
            v4 = (WTF *)v86;
            v86 = 0;
            if (v4)
            {
              v59 = *(_DWORD *)v4 == 2;
              *(_DWORD *)v4 -= 2;
              if (v59)
              {
                v64 = *((_QWORD *)v4 + 10);
                if (v64)
                {
                  *(_QWORD *)(v64 + 8) = 3;
                  *((_QWORD *)v4 + 10) = 0;
                }
                if ((*((_BYTE *)v4 + 72) & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v4 + 72));
                JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v4 + 16));
                v5 = (WTF **)*((_QWORD *)v4 + 1);
                if ((v5 & 1) == 0 && v5)
                {
                  v66 = *v5;
                  if (*v5)
                  {
                    *v5 = 0;
                    *((_DWORD *)v5 + 2) = 0;
                    WTF::fastFree(v66, v65);
                  }
                  WTF::fastFree((WTF *)v5, v65);
                }
                WTF::fastFree(v4, v65);
              }
            }
            v23 = v78;
            if (!v78)
              goto LABEL_93;
            v78 = 0;
            LODWORD(v79) = 0;
LABEL_92:
            WTF::fastFree(v23, v21);
LABEL_93:
            if ((v3 & 1) != 0)
              goto LABEL_94;
            goto LABEL_106;
          default:
            if (!*((_QWORD *)v1 + 8))
              goto LABEL_94;
            WebCore::SharedBufferBuilder::takeAsArrayBuffer((WebCore::FetchBodyOwner *)((char *)v1 + 64), &v78);
            if (!*(_BYTE *)(v2 + 24))
              goto LABEL_170;
            v48 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v2 + 16), &v78);
            v3 = v48;
            v4 = v78;
            v78 = 0;
            if (v4 && (v59 = *(_DWORD *)v4 == 2, *(_DWORD *)v4 -= 2, v59))
            {
              v71 = *((_QWORD *)v4 + 10);
              if (v71)
              {
                *(_QWORD *)(v71 + 8) = 3;
                *((_QWORD *)v4 + 10) = 0;
              }
              if ((*((_BYTE *)v4 + 72) & 1) == 0)
                JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v4 + 72));
              JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v4 + 16));
              v5 = (WTF **)*((_QWORD *)v4 + 1);
              if ((v5 & 1) == 0 && v5)
              {
                v73 = *v5;
                if (*v5)
                {
                  *v5 = 0;
                  *((_DWORD *)v5 + 2) = 0;
                  WTF::fastFree(v73, v72);
                }
                WTF::fastFree((WTF *)v5, v72);
              }
              WTF::fastFree(v4, v72);
              if (!(_DWORD)v3)
                goto LABEL_106;
            }
            else if (!v48)
            {
              goto LABEL_106;
            }
LABEL_94:
            if (!*(_BYTE *)(v2 + 24))
              goto LABEL_170;
            LOBYTE(v78) = 0;
            v80 = (WTF *)((char *)&v81 + 8);
            v85 = 0;
            v83 = 0u;
            v84 = 0u;
            v81 = 0u;
            v82 = 0u;
            *((_QWORD *)&v81 + 1) = *(_QWORD *)(v2 + 16);
            v79 = (WTF::StringImpl *)0x800000001;
            v52 = *(JSC::Structure **)(16 * (**((_DWORD **)&v81 + 1) & 0xFFFFFFFE) + 0x28);
            WebCore::invokeReadableStreamDefaultControllerFunction(v52, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v52 + 7) + 41456) + 4008));
            v53 = (uint64_t *)v81;
            if ((_QWORD)v81)
            {
              v86 = &v79;
              v63 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v81, (uint64_t *)&v86);
              WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v53, v63);
            }
            if (v80 != (WTF *)((char *)&v81 + 8) && v80)
              WTF::fastFree(v80, v9);
            v54 = *(WTF **)(v2 + 8);
            if (v54)
            {
              *(_QWORD *)(v2 + 8) = 0;
              v55 = *(_DWORD **)v54;
              *(_QWORD *)v54 = 0;
              if (v55)
              {
                if (v55[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 16))(v55);
                else
                  --v55[4];
              }
              WTF::fastFree(v54, v9);
              (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
            }
            v8 = *(unsigned int **)(v2 + 40);
            *(_QWORD *)(v2 + 40) = 0;
            if (!v8)
              goto LABEL_106;
            do
            {
              v56 = __ldaxr(v8);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v8));
            if (v57)
              goto LABEL_106;
            goto LABEL_121;
        }
      }
      __break(1u);
LABEL_121:
      atomic_store(1u, v8);
      goto LABEL_137;
    }
    v1 = (WebCore::FetchBodyOwner *)*((_QWORD *)v1 + 18);
    if (*((_BYTE *)v1 + 24))
    {
      WebCore::ReadableStreamDefaultController::error((_DWORD **)v1 + 2, (unsigned __int8 *)&v78);
      v11 = (WTF *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        *((_QWORD *)v1 + 1) = 0;
        v12 = *(_DWORD **)v11;
        *(_QWORD *)v11 = 0;
        if (v12)
        {
          if (v12[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
          else
            --v12[4];
        }
        WTF::fastFree(v11, v10);
        (*(void (**)(WebCore::FetchBodyOwner *))(*(_QWORD *)v1 + 40))(v1);
      }
      result = *((_QWORD *)v1 + 5);
      *((_QWORD *)v1 + 5) = 0;
      if (result)
      {
        do
        {
          v14 = __ldaxr((unsigned int *)result);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)result));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v10);
        }
      }
      if ((_BYTE)v80)
      {
        result = (uint64_t)v79;
        v79 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
LABEL_170:
    std::__throw_bad_optional_access[abi:sn180100]();
  }
LABEL_171:
  v58 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_172:
  *((_QWORD *)v6 + 1) = 0;
  *((_DWORD *)v6 + 4) = 0;
  WTF::fastFree(v58, v31);
LABEL_130:
  WTF::fastFree(v6, v31);
LABEL_131:
  if (!v4 || v5)
    goto LABEL_106;
  ++*(_DWORD *)(v2 + 32);
  v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v61 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v61 = &off_1E3355AC8;
  *((_QWORD *)v61 + 1) = (char *)v1 + 56;
  *((_QWORD *)v61 + 2) = v2;
  v78 = v61;
  WebCore::FormDataConsumer::FormDataConsumer(v60, v3, (uint64_t)v4, (uint64_t *)&v78);
  if (v78)
    (*(void (**)(WTF *))(*(_QWORD *)v78 + 8))(v78);
  v62 = (WebCore::FormDataConsumer *)*((_QWORD *)v1 + 14);
  *((_QWORD *)v1 + 14) = v60;
  if (!v62)
    goto LABEL_106;
  WebCore::FormDataConsumer::~FormDataConsumer(v62);
LABEL_137:
  WTF::fastFree((WTF *)v8, v9);
LABEL_106:
  result = *((_QWORD *)v1 + 18);
  if (!*(_QWORD *)(result + 8))
  {
    *((_QWORD *)v1 + 18) = 0;
    if (*(_DWORD *)(result + 32) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 32);
  }
  return result;
}

uint64_t WebCore::FetchBodyOwner::virtualHasPendingActivity(WebCore::FetchBodyOwner *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t WebCore::FetchBodySource::setActive(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(this + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)this = 1;
      ++*(_DWORD *)(v2 + 24);
      *(_QWORD *)(this + 8) = v2;
      ++*(_QWORD *)(v2 + 16);
      v5 = *(WTF **)(v3 + 56);
      *(_QWORD *)(v3 + 56) = this;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          v6 = *((_QWORD *)v5 + 1);
          --*(_QWORD *)(v6 + 16);
          *((_QWORD *)v5 + 1) = 0;
          if (*(_DWORD *)(v6 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          else
            --*(_DWORD *)(v6 + 24);
          return WTF::fastFree(v5, v4);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::FetchBodySource::setInactive(uint64_t this, void *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *(WTF **)(this + 56);
  *(_QWORD *)(this + 56) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      --*(_QWORD *)(v3 + 16);
      *((_QWORD *)v2 + 1) = 0;
      if (*(_DWORD *)(v3 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      else
        --*(_DWORD *)(v3 + 24);
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

_QWORD *WebCore::FetchBodySource::doStart(_QWORD *this)
{
  uint64_t v1;

  v1 = this[5];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 72))(this);
  }
  return this;
}

_QWORD *WebCore::FetchBodySource::doPull(_QWORD *this)
{
  uint64_t v1;

  v1 = this[5];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 80))(this);
  }
  return this;
}

unsigned int *WebCore::FetchBodySource::doCancel(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;

  *((_BYTE *)this + 48) = 1;
  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = this;
    this = *(unsigned int **)(v1 + 8);
    if (this)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)this + 88))(this);
      this = (unsigned int *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (this)
      {
        do
        {
          v4 = __ldaxr(this);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, this));
        if (!v5)
        {
          atomic_store(1u, this);
          return (unsigned int *)WTF::fastFree((WTF *)this, v3);
        }
      }
    }
  }
  return this;
}

void WebCore::FetchHeaders::create(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _BYTE v14[8];
  uint64_t v15;
  char v16;
  WTF *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v19 = 0u;
  v20 = 0u;
  v17 = 0;
  v18 = 0;
  if (!*(_BYTE *)(a1 + 24)
    || (WebCore::fillHeaderMap((WTF::StringImpl *)v14, (uint64_t)&v19, (uint64_t)&v17, a1, 0), !v16))
  {
    v6 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v6 = 1;
    *(_BYTE *)(v6 + 4) = 0;
    v7 = v19;
    *(_QWORD *)&v19 = 0;
    *(_QWORD *)(v6 + 8) = v7;
    v8 = *((_QWORD *)&v19 + 1);
    *((_QWORD *)&v19 + 1) = 0;
    *(_QWORD *)(v6 + 16) = v8;
    v9 = v20;
    *(_QWORD *)&v20 = 0;
    *(_QWORD *)(v6 + 24) = v9;
    v10 = *((_QWORD *)&v20 + 1);
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)(v6 + 32) = v10;
    v11 = v17;
    v17 = 0;
    *(_QWORD *)(v6 + 40) = v11;
    *(_QWORD *)(v6 + 48) = v18;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 16) = 0;
    goto LABEL_7;
  }
  v4 = v15;
  *(_BYTE *)a2 = v14[0];
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 1;
  v5 = v17;
  if (HIDWORD(v18))
  {
    v12 = 8 * HIDWORD(v18);
    do
    {
      v13 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v3);
        else
          *(_DWORD *)v13 -= 2;
      }
      v5 = (WTF *)((char *)v5 + 8);
      v12 -= 8;
    }
    while (v12);
    v5 = v17;
    if (v17)
      goto LABEL_5;
  }
  else if (v17)
  {
LABEL_5:
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v5, v3);
  }
LABEL_7:
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v19, v3);
}

WTF::StringImpl *WebCore::fillHeaderMap(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  const WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl **v14;
  uint64_t v15;
  const WTF::StringImpl **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  _QWORD v23[2];
  char v24;

  v8 = result;
  v9 = *(_DWORD *)(a4 + 16);
  if (v9 == 1)
  {
    v13 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v13)
    {
      v14 = *(const WTF::StringImpl ***)a4;
      v15 = *(_QWORD *)a4 + 16 * v13;
      while (1)
      {
        v16 = v14 + 1;
        result = (WTF::StringImpl *)WebCore::appendToHeaderMap(v23, v14, (uint64_t)(v14 + 1), a2, a3, a5);
        if (v24)
          break;
        v14 = v16 + 1;
        if (v16 + 1 == (const WTF::StringImpl **)v15)
          goto LABEL_13;
      }
LABEL_14:
      v17 = v23[1];
      *(_BYTE *)v8 = v23[0];
      *((_QWORD *)v8 + 1) = v17;
      goto LABEL_16;
    }
LABEL_13:
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    return result;
  }
  if (!v9)
  {
    v10 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v10)
    {
      v11 = *(const WTF::StringImpl ***)a4;
      v12 = 16 * v10;
      while (*((_DWORD *)v11 + 3) == 2)
      {
        result = (WTF::StringImpl *)WebCore::appendToHeaderMap(v23, (const WTF::StringImpl **)*v11, (uint64_t)*v11 + 8, a2, a3, a5);
        if (v24)
          goto LABEL_14;
        v11 += 2;
        v12 -= 16;
        if (!v12)
          goto LABEL_13;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = v23[0];
      *(_BYTE *)v8 = 33;
      *((_QWORD *)v8 + 1) = v18;
LABEL_16:
      *((_BYTE *)v8 + 16) = 1;
      return result;
    }
    goto LABEL_13;
  }
  v19 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::appendSetCookie(v19, v20, v21, v22);
}

WTF::StringImpl *WebCore::appendSetCookie(WTF::StringImpl *result, uint64_t *a2, uint64_t a3, int a4)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _QWORD v28[2];

  v4 = result;
  v5 = *a2;
  if (*a2 && (v6 = *(unsigned int *)(v5 + 4), (_DWORD)v6))
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = *(unsigned __int8 **)(v5 + 8);
    if ((v7 & 4) != 0)
      v9 = *v8;
    else
      v9 = *(unsigned __int16 *)v8;
    if (v9 != 9 && v9 != 32)
    {
      v10 = (v6 - 1);
      v11 = (v7 & 4) != 0 ? v8[v10] : *(unsigned __int16 *)&v8[2 * v10];
      if (v11 != 9 && v11 != 32)
      {
        if ((v7 & 4) != 0)
        {
          while (1)
          {
            v14 = *v8;
            v15 = v14 > 0xD;
            v16 = (1 << v14) & 0x2401;
            if (!v15 && v16 != 0)
              break;
            ++v8;
            if (!--v6)
              goto LABEL_23;
          }
        }
        else
        {
          while (1)
          {
            v19 = *(unsigned __int16 *)v8;
            v15 = v19 > 0xD;
            v20 = (1 << v19) & 0x2401;
            if (!v15 && v20 != 0)
              break;
            v8 += 2;
            if (!--v6)
              goto LABEL_23;
          }
        }
      }
    }
    *(_DWORD *)v5 += 2;
    v27 = (WTF::StringImpl *)v5;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Header 'Set-Cookie' has invalid value: '", 41, (uint64_t *)&v27, 39, v28);
    result = v27;
    v13 = v28[0];
    *(_BYTE *)v4 = 33;
    *((_QWORD *)v4 + 1) = v13;
    *((_BYTE *)v4 + 16) = 1;
    v27 = 0;
    v28[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_23:
    if (a4)
    {
      if (a4 == 1)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = v28[1];
        *(_BYTE *)v4 = 33;
        *((_QWORD *)v4 + 1) = v18;
        *((_BYTE *)v4 + 16) = 1;
        return result;
      }
    }
    else
    {
      v22 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v22 == *(_DWORD *)(a3 + 8))
      {
        v26 = a3;
        result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v22 + 1, (unint64_t)a2);
        a3 = v26;
        v22 = *(unsigned int *)(v26 + 12);
        v24 = *(_QWORD *)v26;
        v25 = *(_DWORD **)result;
        if (*(_QWORD *)result)
          *v25 += 2;
        *(_QWORD *)(v24 + 8 * v22) = v25;
      }
      else
      {
        v23 = *(_QWORD *)a3;
        if (v5)
          *(_DWORD *)v5 += 2;
        *(_QWORD *)(v23 + 8 * v22) = v5;
      }
      *(_DWORD *)(a3 + 12) = v22 + 1;
    }
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
  }
  return result;
}

uint64_t WebCore::appendToHeaderMap(_QWORD *a1, const WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::HTTPHeaderNamesHash *v13;
  unint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  const WTF::StringImpl *v21;
  unint64_t v22;
  WebCore::HTTPHeaderNamesHash *v23;
  uint64_t v24;
  uint64_t result;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  char v32;
  unsigned int v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  const WTF::StringImpl *v39;
  WebCore::HTTPHeaderNamesHash *v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  int v47;
  unsigned __int16 *v48;
  WTF::StringImpl *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unsigned __int16 v66;

  WTF::String::trim();
  v11 = *a2;
  if (!*a2 || *((_DWORD *)v11 + 1) != 10)
  {
LABEL_3:
    v12 = v65;
    if (v65)
      *(_DWORD *)v65 += 2;
    v64 = v12;
    if (v11)
    {
      v13 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v11 + 1);
      v14 = *((unsigned int *)v11 + 1) | ((unint64_t)((*((_DWORD *)v11 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    LOWORD(v60) = 0;
    if (WebCore::findHTTPHeaderName(v13, (char *)v14, &v60))
    {
      v16 = *(unsigned int *)(a4 + 12);
      if (!(_DWORD)v16)
        goto LABEL_45;
      v17 = *(unsigned __int16 **)a4;
      while (1)
      {
        v18 = *v17;
        v17 += 8;
        if (v18 == (unsigned __int16)v60)
          break;
        if (!--v16)
          goto LABEL_45;
      }
    }
    else
    {
      if (!*(_DWORD *)(a4 + 28))
        goto LABEL_45;
      v19 = 0;
      v20 = 0;
      while ((WTF::equalIgnoringASCIICase(*(WTF **)(*(_QWORD *)(a4 + 16) + v19), *a2, v15) & 1) == 0)
      {
        ++v20;
        v19 += 16;
        if (v20 >= *(unsigned int *)(a4 + 28))
          goto LABEL_45;
      }
    }
    v21 = *a2;
    if (*a2)
    {
      v22 = *((unsigned int *)v21 + 4);
      v23 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v21 + 1);
      LODWORD(v21) = *((_DWORD *)v21 + 1);
      v24 = (v22 >> 2) & 1;
    }
    else
    {
      v23 = 0;
      v24 = 1;
    }
    result = WebCore::HTTPHeaderMap::get(a4, v23, (char *)(v21 | (unint64_t)(v24 << 32)), &v63);
    v26 = v65;
    if (v65)
      *(_DWORD *)v65 += 2;
    v27 = v63;
    if (v63)
    {
      v28 = *((_DWORD *)v63 + 1);
      if (v26)
        goto LABEL_24;
    }
    else
    {
      v28 = 0;
      if (v26)
      {
LABEL_24:
        v29 = *((_DWORD *)v26 + 1);
        if (v29 < 0)
          goto LABEL_117;
        goto LABEL_25;
      }
    }
    v29 = 0;
LABEL_25:
    v30 = __OFADD__(v29, 2);
    v31 = v29 + 2;
    v32 = v30;
    if ((v28 & 0x80000000) == 0 && (v32 & 1) == 0)
    {
      result = (v28 + v31);
      if (!__OFADD__(v28, v31))
      {
        if (v63)
        {
          v33 = *((_DWORD *)v63 + 4);
          v34 = (v33 >> 2) & 1;
          if (v26 && (v33 & 4) != 0)
            goto LABEL_34;
        }
        else
        {
          if (v26)
          {
LABEL_34:
            v34 = (*((unsigned __int8 *)v26 + 16) >> 2) & 1;
            goto LABEL_35;
          }
          v34 = 1;
        }
LABEL_35:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v34, (uint64_t)v63, (int8x16_t *)", ", 2u, (uint64_t)v26, &v60);
        v36 = v60;
        if (!v60)
        {
LABEL_118:
          __break(0xC471u);
          return result;
        }
        v60 = 0;
        v64 = v36;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::destroy(v12, v35);
            v58 = v60;
            v60 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
                WTF::StringImpl::destroy(v58, v35);
              else
                *(_DWORD *)v58 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v12 -= 2;
            v60 = 0;
          }
        }
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::destroy(v26, v35);
            if (v27)
            {
LABEL_43:
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v35);
              else
                *(_DWORD *)v27 -= 2;
            }
LABEL_45:
            WebCore::canWriteHeader((uint64_t)&v60, (WebCore *)a2, (uint64_t *)&v65, &v64, a6);
            v37 = v62;
            if (!v62)
            {
              if ((_BYTE)v60)
              {
                v39 = *a2;
                if (*a2)
                {
                  v40 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v39 + 1);
                  v41 = *((unsigned int *)v39 + 1) | ((unint64_t)((*((_DWORD *)v39 + 4) >> 2) & 1) << 32);
                }
                else
                {
                  v40 = 0;
                  v41 = 0x100000000;
                }
                v66 = 0;
                if (WebCore::findHTTPHeaderName(v40, (char *)v41, &v66))
                  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)a4, (WTF::StringImpl *)v66, &v64);
                else
                  WebCore::HTTPHeaderMap::setUncommonHeader((WebCore::HTTPHeaderMap *)a4, a2, (const WTF::String *)&v64);
                if (a6 == 3)
                {
                  v43 = *(unsigned int *)(a4 + 12);
                  if ((_DWORD)v43)
                  {
                    v44 = *(unsigned __int16 **)a4;
                    if (**(_WORD **)a4 == 59)
                    {
                      v45 = 0;
LABEL_62:
                      v48 = &v44[8 * v45];
                      v49 = (WTF::StringImpl *)*((_QWORD *)v48 + 1);
                      *((_QWORD *)v48 + 1) = 0;
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2)
                        {
                          WTF::StringImpl::destroy(v49, v42);
                          v43 = *(unsigned int *)(a4 + 12);
                        }
                        else
                        {
                          *(_DWORD *)v49 -= 2;
                        }
                      }
                      v50 = v48 + 8;
                      v51 = *(_QWORD *)a4 + 16 * v43;
                      while (v50 != (unsigned __int16 *)v51)
                      {
                        *(v50 - 8) = *v50;
                        *((_QWORD *)v50 - 1) = *((_QWORD *)v50 + 1);
                        *((_QWORD *)v50 + 1) = 0;
                        v50 += 8;
                      }
                      *(_DWORD *)(a4 + 12) = v43 - 1;
                    }
                    else
                    {
                      v45 = 0;
                      v46 = v44 + 8;
                      while (v43 - 1 != v45)
                      {
                        v47 = *v46;
                        v46 += 8;
                        ++v45;
                        if (v47 == 59)
                          goto LABEL_62;
                      }
                    }
                  }
                }
              }
              *a1 = 0;
              a1[1] = 0;
              a1[2] = 0;
              goto LABEL_70;
            }
            if (v62 == 1)
            {
              v38 = v61;
              v61 = 0;
              *(_BYTE *)a1 = (_BYTE)v60;
              a1[1] = v38;
              *((_BYTE *)a1 + 16) = 1;
LABEL_70:
              off_1E3355B70[v37](&v66, &v60);
              v53 = v64;
              v64 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v52);
                else
                  *(_DWORD *)v53 -= 2;
              }
              goto LABEL_73;
            }
            result = std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_117;
          }
          *(_DWORD *)v26 -= 2;
        }
        if (v27)
          goto LABEL_43;
        goto LABEL_45;
      }
    }
LABEL_117:
    v60 = 0;
    goto LABEL_118;
  }
  v54 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v54) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
      goto LABEL_3;
    v55 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[1]);
    if (v55 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
      goto LABEL_3;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
      goto LABEL_3;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
      goto LABEL_3;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
      goto LABEL_3;
    v56 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[5]);
    if (v56 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[6]) != v56
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
    {
      goto LABEL_3;
    }
    v57 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v54[9]);
  }
  else
  {
    if ((*(unsigned __int16 *)v54 | (32 * (*(unsigned __int16 *)v54 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
      goto LABEL_3;
    v55 = *((unsigned __int16 *)v54 + 1) | (32 * (*((unsigned __int16 *)v54 + 1) - 65 < 0x1A));
    if (v55 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
      goto LABEL_3;
    if ((*((unsigned __int16 *)v54 + 2) | (32 * (*((unsigned __int16 *)v54 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
      goto LABEL_3;
    if ((*((unsigned __int16 *)v54 + 3) | (32 * (*((unsigned __int16 *)v54 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
      goto LABEL_3;
    if ((*((unsigned __int16 *)v54 + 4) | (32 * (*((unsigned __int16 *)v54 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
      goto LABEL_3;
    v59 = *((unsigned __int16 *)v54 + 5) | (32 * (*((unsigned __int16 *)v54 + 5) - 65 < 0x1A));
    if (v59 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || (*((unsigned __int16 *)v54 + 6) | (32 * (*((unsigned __int16 *)v54 + 6) - 65 < 0x1A))) != v59
      || (*((unsigned __int16 *)v54 + 7) | (32 * (*((unsigned __int16 *)v54 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
      || (*((unsigned __int16 *)v54 + 8) | (32 * (*((unsigned __int16 *)v54 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
    {
      goto LABEL_3;
    }
    v57 = *((unsigned __int16 *)v54 + 9) | (32 * (*((unsigned __int16 *)v54 + 9) - 65 < 0x1A));
  }
  if (v57 != v55)
    goto LABEL_3;
  WebCore::appendSetCookie((WTF::StringImpl *)a1, (uint64_t *)&v65, a5, a6);
LABEL_73:
  result = (uint64_t)v65;
  v65 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v52);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FetchHeaders::remove@<X0>(WebCore::FetchHeaders *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  const WTF::String *v7;
  int v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::HTTPHeaderNamesHash *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned __int16 v38;

  result = WebCore::isValidHTTPToken(a2, a2);
  if ((result & 1) != 0)
  {
    v8 = *((unsigned __int8 *)this + 4);
    if (v8 == 2)
    {
      result = WebCore::isForbiddenHeaderName(a2, v7);
      if ((_DWORD)result)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)this + 4);
    }
    else if (v8 == 1)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 33;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    if (v8 != 3)
      goto LABEL_92;
    v12 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(WebCore::HTTPHeaderNamesHash **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    v38 = 0;
    result = WebCore::findHTTPHeaderName(v13, (char *)v14, &v38);
    if ((_DWORD)result)
    {
      if (v38 <= 0x1Au && ((1 << v38) & 0x4100009) != 0)
        goto LABEL_92;
    }
    v19 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2 || *(_DWORD *)(v19 + 4) != 5)
      goto LABEL_48;
    v20 = *(_QWORD *)(v19 + 8);
    if ((*(_BYTE *)(v19 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v20 & 0xDF) != 0x52
        || (*(_BYTE *)(v20 + 1) & 0xDF) != 0x41
        || (*(_BYTE *)(v20 + 2) & 0xDF) != 0x4E
        || (*(_BYTE *)(v20 + 3) & 0xDF) != 0x47)
      {
        goto LABEL_48;
      }
      v21 = *(unsigned __int8 *)(v20 + 4);
    }
    else
    {
      if ((*(_WORD *)v20 & 0xFFDF) != 0x52
        || (*(_WORD *)(v20 + 2) & 0xFFDF) != 0x41
        || (*(_WORD *)(v20 + 4) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v20 + 6) & 0xFFDF) != 0x47)
      {
        goto LABEL_48;
      }
      v21 = *(unsigned __int16 *)(v20 + 8);
    }
    if ((v21 & 0xFFFFFFDF) == 0x45)
    {
LABEL_92:
      if (*((_BYTE *)this + 4) != 4 || (result = WebCore::isForbiddenResponseHeaderName(a2, v7), !(_DWORD)result))
      {
        ++*((_QWORD *)this + 7);
        v15 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2 || *(_DWORD *)(v15 + 4) != 10)
          goto LABEL_22;
        v27 = *(unsigned __int8 **)(v15 + 8);
        if ((*(_BYTE *)(v15 + 16) & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v27) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
            goto LABEL_22;
          v28 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[1]);
          if (v28 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
            goto LABEL_22;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
            goto LABEL_22;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
            goto LABEL_22;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
            goto LABEL_22;
          v29 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[5]);
          if (v29 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[6]) != v29
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
          {
            goto LABEL_22;
          }
          v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[9]);
        }
        else
        {
          if ((*(unsigned __int16 *)v27 | (32 * (*(unsigned __int16 *)v27 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
            goto LABEL_22;
          v28 = *((unsigned __int16 *)v27 + 1) | (32 * (*((unsigned __int16 *)v27 + 1) - 65 < 0x1A));
          if (v28 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
            goto LABEL_22;
          if ((*((unsigned __int16 *)v27 + 2) | (32 * (*((unsigned __int16 *)v27 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
            goto LABEL_22;
          if ((*((unsigned __int16 *)v27 + 3) | (32 * (*((unsigned __int16 *)v27 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
            goto LABEL_22;
          if ((*((unsigned __int16 *)v27 + 4) | (32 * (*((unsigned __int16 *)v27 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
            goto LABEL_22;
          v35 = *((unsigned __int16 *)v27 + 5) | (32 * (*((unsigned __int16 *)v27 + 5) - 65 < 0x1A));
          if (v35 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
            || (*((unsigned __int16 *)v27 + 6) | (32 * (*((unsigned __int16 *)v27 + 6) - 65 < 0x1A))) != v35
            || (*((unsigned __int16 *)v27 + 7) | (32 * (*((unsigned __int16 *)v27 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
            || (*((unsigned __int16 *)v27 + 8) | (32 * (*((unsigned __int16 *)v27 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
          {
            goto LABEL_22;
          }
          v30 = *((unsigned __int16 *)v27 + 9) | (32 * (*((unsigned __int16 *)v27 + 9) - 65 < 0x1A));
        }
        if (v30 == v28)
        {
          if (*((_DWORD *)this + 12))
          {
            v31 = *((unsigned int *)this + 13);
            if ((_DWORD)v31)
            {
              v32 = (WTF::StringImpl **)*((_QWORD *)this + 5);
              v33 = 8 * v31;
              do
              {
                v34 = *v32;
                *v32 = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, v7);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                ++v32;
                v33 -= 8;
              }
              while (v33);
              *((_DWORD *)this + 13) = 0;
            }
            result = *((_QWORD *)this + 5);
            if (result)
            {
              *((_QWORD *)this + 5) = 0;
              *((_DWORD *)this + 12) = 0;
              result = WTF::fastFree((WTF *)result, v7);
            }
          }
LABEL_23:
          if (*((_BYTE *)this + 4) == 3)
          {
            v16 = *((unsigned int *)this + 5);
            if ((_DWORD)v16)
            {
              v17 = (_WORD *)*((_QWORD *)this + 1);
              if (*v17 == 59)
              {
                v18 = 0;
LABEL_41:
                v24 = &v17[8 * v18];
                result = *((_QWORD *)v24 + 1);
                *((_QWORD *)v24 + 1) = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                  {
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
                    v16 = *((unsigned int *)this + 5);
                  }
                  else
                  {
                    *(_DWORD *)result -= 2;
                  }
                }
                v25 = v24 + 8;
                v26 = *((_QWORD *)this + 1) + 16 * v16;
                while (v25 != (_WORD *)v26)
                {
                  *(v25 - 8) = *v25;
                  *((_QWORD *)v25 - 1) = *((_QWORD *)v25 + 1);
                  *((_QWORD *)v25 + 1) = 0;
                  v25 += 8;
                }
                *((_DWORD *)this + 5) = v16 - 1;
              }
              else
              {
                v18 = 0;
                v22 = v17 + 8;
                while (v16 - 1 != v18)
                {
                  v23 = *v22;
                  v22 += 8;
                  ++v18;
                  if (v23 == 59)
                    goto LABEL_41;
                }
              }
            }
          }
          goto LABEL_48;
        }
LABEL_22:
        result = WebCore::HTTPHeaderMap::remove((WebCore::FetchHeaders *)((char *)this + 8), (const WTF::StringImpl **)a2);
        goto LABEL_23;
      }
    }
LABEL_48:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return result;
  }
  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v9 += 2;
  v36 = v9;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Invalid header name: '", 23, (uint64_t *)&v36, 39, &v37);
  result = (uint64_t)v36;
  v11 = v37;
  *(_BYTE *)a3 = 33;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = 1;
  v36 = 0;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  char v7;
  uint64_t v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a4;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char>(v8, a3, &v7, a5);
  if (!*a5)
    __break(0xC471u);
  return result;
}

uint64_t WebCore::FetchHeaders::get@<X0>(WebCore::FetchHeaders *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WebCore::HTTPHeaderNamesHash *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  _QWORD v21[2];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  char v28;

  result = WebCore::isValidHTTPToken(a2, a2);
  v7 = *(_QWORD *)a2;
  if ((result & 1) != 0)
  {
    if (!v7)
    {
      v10 = 0;
      v11 = 0x100000000;
      goto LABEL_6;
    }
    v8 = *(unsigned int *)(v7 + 4);
    v9 = *(_DWORD *)(v7 + 16);
    if ((_DWORD)v8 != 10)
    {
      v10 = *(WebCore::HTTPHeaderNamesHash **)(v7 + 8);
      goto LABEL_5;
    }
    v10 = *(WebCore::HTTPHeaderNamesHash **)(v7 + 8);
    if ((v9 & 4) != 0)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v10) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_5;
      v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 1));
      if (v14 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_5;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 2)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        goto LABEL_5;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 3)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
        goto LABEL_5;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 4)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_5;
      v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 5));
      if (v15 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 6)) != v15
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 7)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 8)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
      {
        goto LABEL_5;
      }
      v16 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v10 + 9));
    }
    else
    {
      if ((*(unsigned __int16 *)v10 | (32 * (*(unsigned __int16 *)v10 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_5;
      v14 = *((unsigned __int16 *)v10 + 1) | (32 * (*((unsigned __int16 *)v10 + 1) - 65 < 0x1A));
      if (v14 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_5;
      if ((*((unsigned __int16 *)v10 + 2) | (32 * (*((unsigned __int16 *)v10 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        goto LABEL_5;
      if ((*((unsigned __int16 *)v10 + 3) | (32 * (*((unsigned __int16 *)v10 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
        goto LABEL_5;
      if ((*((unsigned __int16 *)v10 + 4) | (32 * (*((unsigned __int16 *)v10 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_5;
      v20 = *((unsigned __int16 *)v10 + 5) | (32 * (*((unsigned __int16 *)v10 + 5) - 65 < 0x1A));
      if (v20 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || (*((unsigned __int16 *)v10 + 6) | (32 * (*((unsigned __int16 *)v10 + 6) - 65 < 0x1A))) != v20
        || (*((unsigned __int16 *)v10 + 7) | (32 * (*((unsigned __int16 *)v10 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
        || (*((unsigned __int16 *)v10 + 8) | (32 * (*((unsigned __int16 *)v10 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
      {
        goto LABEL_5;
      }
      v16 = *((unsigned __int16 *)v10 + 9) | (32 * (*((unsigned __int16 *)v10 + 9) - 65 < 0x1A));
    }
    if (v16 != v14)
    {
LABEL_5:
      v11 = v8 | ((unint64_t)((v9 >> 2) & 1) << 32);
LABEL_6:
      result = WebCore::HTTPHeaderMap::get((uint64_t)this + 8, v10, (char *)v11, (_QWORD *)a3);
LABEL_7:
      *(_DWORD *)(a3 + 16) = 0;
      return result;
    }
    if (!*((_DWORD *)this + 13))
    {
      *(_QWORD *)a3 = 0;
      goto LABEL_7;
    }
    v21[0] = ", ";
    v21[1] = 3;
    v22[0] = (char *)this + 40;
    v22[2] = v21;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
    _ZNK3WTF10InterleaveINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEZNS_10interleaveIS5_NS_12ASCIILiteralEEEDcRKT_RKT0_EUlTyTyRS9_SE_E_S7_E10writeUsingINS_13StringBuilderEEEvSF_((WTF::StringImpl *)v22, (uint64_t)&v25);
    v18 = v25;
    if (v25
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v25),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v25),
          (v18 = v25) != 0))
    {
      *(_DWORD *)v18 += 2;
    }
    v19 = v26;
    v26 = 0;
    result = (uint64_t)v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v17);
        result = (uint64_t)v25;
      }
      else
      {
        *(_DWORD *)v19 -= 2;
        result = (uint64_t)v18;
      }
    }
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
        if (v18)
          goto LABEL_38;
        goto LABEL_42;
      }
      *(_DWORD *)result -= 2;
    }
    if (v18)
    {
LABEL_38:
      *(_QWORD *)a3 = v18;
      goto LABEL_7;
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x19532B1FCLL);
  }
  if (v7)
    *(_DWORD *)v7 += 2;
  v23 = v7;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Invalid header name: '", 23, &v23, 39, &v24);
  result = v23;
  v13 = v24;
  *(_BYTE *)a3 = 33;
  *(_QWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 16) = 1;
  v23 = 0;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FetchHeaders::has@<X0>(WebCore::FetchHeaders *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  char isValidHTTPToken;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  unint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;

  isValidHTTPToken = WebCore::isValidHTTPToken(a2, a2);
  v7 = *(_QWORD *)a2;
  if ((isValidHTTPToken & 1) != 0)
  {
    if (!v7)
    {
      result = 0;
      v11 = 0x100000000;
LABEL_6:
      v28 = 0;
      if (WebCore::findHTTPHeaderName((WebCore::HTTPHeaderNamesHash *)result, (char *)v11, &v28))
      {
        v13 = *((unsigned int *)this + 5);
        if ((_DWORD)v13)
        {
          v14 = (unsigned __int16 *)*((_QWORD *)this + 1);
          v15 = v13 - 1;
          do
          {
            v16 = *v14;
            v14 += 8;
            result = v16 == v28;
          }
          while (v16 != v28 && v15-- != 0);
          goto LABEL_26;
        }
      }
      else if (*((_DWORD *)this + 9))
      {
        v20 = 0;
        v21 = 0;
        do
        {
          result = WTF::equalIgnoringASCIICase(*(WTF **)(*((_QWORD *)this + 3) + v20), *(const WTF::StringImpl **)a2, v12);
          if ((result & 1) != 0)
            break;
          ++v21;
          v20 += 16;
        }
        while (v21 < *((unsigned int *)this + 9));
        goto LABEL_26;
      }
      result = 0;
LABEL_26:
      *(_BYTE *)a3 = result;
LABEL_27:
      *(_DWORD *)(a3 + 16) = 0;
      return result;
    }
    v8 = *(unsigned int *)(v7 + 4);
    v9 = *(_DWORD *)(v7 + 16);
    if ((_DWORD)v8 != 10)
    {
      result = *(_QWORD *)(v7 + 8);
LABEL_5:
      v11 = v8 | ((unint64_t)((v9 >> 2) & 1) << 32);
      goto LABEL_6;
    }
    result = *(_QWORD *)(v7 + 8);
    if ((v9 & 4) != 0)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)result) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_5;
      v22 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 1));
      if (v22 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_5;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 2)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        goto LABEL_5;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 3)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
        goto LABEL_5;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 4)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_5;
      v23 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 5));
      if (v23 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 6)) != v23
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 7)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 8)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
      {
        goto LABEL_5;
      }
      v24 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + 9));
    }
    else
    {
      if ((*(unsigned __int16 *)result | (32 * (*(unsigned __int16 *)result - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_5;
      v22 = *(unsigned __int16 *)(result + 2) | (32 * (*(unsigned __int16 *)(result + 2) - 65 < 0x1A));
      if (v22 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_5;
      if ((*(unsigned __int16 *)(result + 4) | (32 * (*(unsigned __int16 *)(result + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        goto LABEL_5;
      if ((*(unsigned __int16 *)(result + 6) | (32 * (*(unsigned __int16 *)(result + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
        goto LABEL_5;
      if ((*(unsigned __int16 *)(result + 8) | (32 * (*(unsigned __int16 *)(result + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_5;
      v25 = *(unsigned __int16 *)(result + 10) | (32 * (*(unsigned __int16 *)(result + 10) - 65 < 0x1A));
      if (v25 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || (*(unsigned __int16 *)(result + 12) | (32 * (*(unsigned __int16 *)(result + 12) - 65 < 0x1A))) != v25
        || (*(unsigned __int16 *)(result + 14) | (32 * (*(unsigned __int16 *)(result + 14) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
        || (*(unsigned __int16 *)(result + 16) | (32 * (*(unsigned __int16 *)(result + 16) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
      {
        goto LABEL_5;
      }
      v24 = *(unsigned __int16 *)(result + 18) | (32 * (*(unsigned __int16 *)(result + 18) - 65 < 0x1A));
    }
    if (v24 == v22)
    {
      *(_BYTE *)a3 = *((_DWORD *)this + 13) != 0;
      goto LABEL_27;
    }
    goto LABEL_5;
  }
  if (v7)
    *(_DWORD *)v7 += 2;
  v26 = v7;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Invalid header name: '", 23, &v26, 39, &v27);
  result = v26;
  v19 = v27;
  *(_BYTE *)a3 = 33;
  *(_QWORD *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 16) = 1;
  v26 = 0;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::FetchHeaders::set@<X0>(WebCore::FetchHeaders *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WebCore::HTTPHeaderNamesHash *v13;
  unint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  _WORD *v20;
  WTF::StringImpl *v21;
  _WORD *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD **v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  unsigned __int16 v46;

  WTF::String::trim();
  WebCore::canWriteHeader((uint64_t)&v42, a2, (uint64_t *)&v45, &v45, *((unsigned __int8 *)this + 4));
  v8 = v44;
  if (v44)
  {
    if (v44 == 1)
    {
      v9 = v43;
      v43 = 0;
      *(_BYTE *)a3 = (_BYTE)v42;
      *(_QWORD *)(a3 + 8) = v9;
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_27;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_73;
  }
  if ((_BYTE)v42)
  {
    ++*((_QWORD *)this + 7);
    v10 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
      v13 = 0;
      v14 = 0x100000000;
LABEL_9:
      v46 = 0;
      if (WebCore::findHTTPHeaderName(v13, (char *)v14, &v46))
        WebCore::HTTPHeaderMap::set((WebCore::FetchHeaders *)((char *)this + 8), (WTF::StringImpl *)v46, &v45);
      else
        WebCore::HTTPHeaderMap::setUncommonHeader((WebCore::FetchHeaders *)((char *)this + 8), (const WTF::StringImpl **)a2, (const WTF::String *)&v45);
      goto LABEL_12;
    }
    v11 = *(unsigned int *)(v10 + 4);
    v12 = *(_DWORD *)(v10 + 16);
    if ((_DWORD)v11 != 10)
    {
      v13 = *(WebCore::HTTPHeaderNamesHash **)(v10 + 8);
LABEL_8:
      v14 = v11 | ((unint64_t)((v12 >> 2) & 1) << 32);
      goto LABEL_9;
    }
    v13 = *(WebCore::HTTPHeaderNamesHash **)(v10 + 8);
    if ((v12 & 4) != 0)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v13) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_8;
      v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 1));
      if (v26 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_8;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 2)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        goto LABEL_8;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 3)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
        goto LABEL_8;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 4)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_8;
      v27 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 5));
      if (v27 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 6)) != v27
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 7)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 8)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
      {
        goto LABEL_8;
      }
      v28 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v13 + 9));
    }
    else
    {
      if ((*(unsigned __int16 *)v13 | (32 * (*(unsigned __int16 *)v13 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_8;
      v26 = *((unsigned __int16 *)v13 + 1) | (32 * (*((unsigned __int16 *)v13 + 1) - 65 < 0x1A));
      if (v26 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_8;
      if ((*((unsigned __int16 *)v13 + 2) | (32 * (*((unsigned __int16 *)v13 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        goto LABEL_8;
      if ((*((unsigned __int16 *)v13 + 3) | (32 * (*((unsigned __int16 *)v13 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 45))
        goto LABEL_8;
      if ((*((unsigned __int16 *)v13 + 4) | (32 * (*((unsigned __int16 *)v13 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_8;
      v36 = *((unsigned __int16 *)v13 + 5) | (32 * (*((unsigned __int16 *)v13 + 5) - 65 < 0x1A));
      if (v36 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || (*((unsigned __int16 *)v13 + 6) | (32 * (*((unsigned __int16 *)v13 + 6) - 65 < 0x1A))) != v36
        || (*((unsigned __int16 *)v13 + 7) | (32 * (*((unsigned __int16 *)v13 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107)
        || (*((unsigned __int16 *)v13 + 8) | (32 * (*((unsigned __int16 *)v13 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
      {
        goto LABEL_8;
      }
      v28 = *((unsigned __int16 *)v13 + 9) | (32 * (*((unsigned __int16 *)v13 + 9) - 65 < 0x1A));
    }
    if (v28 == v26)
    {
      a2 = (WebCore::FetchHeaders *)((char *)this + 40);
      if (!*((_DWORD *)this + 12))
      {
LABEL_45:
        v29 = *((unsigned int *)this + 13);
        if ((_DWORD)v29 == *((_DWORD *)this + 12))
        {
          v30 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v29 + 1, (unint64_t)&v45);
          v31 = *((unsigned int *)this + 13);
          v32 = *((_QWORD *)this + 5);
          v33 = *v30;
          if (*v30)
            *v33 += 2;
          *(_QWORD *)(v32 + 8 * v31) = v33;
          *((_DWORD *)this + 13) = v31 + 1;
        }
        else
        {
          v34 = *(_QWORD *)a2;
          v35 = v45;
          if (v45)
            *(_DWORD *)v45 += 2;
          *(_QWORD *)(v34 + 8 * v29) = v35;
          *((_DWORD *)this + 13) = v29 + 1;
        }
LABEL_12:
        if (*((_BYTE *)this + 4) == 3)
        {
          v15 = *((unsigned int *)this + 5);
          if ((_DWORD)v15)
          {
            v16 = (_WORD *)*((_QWORD *)this + 1);
            if (*v16 == 59)
            {
              v17 = 0;
LABEL_19:
              v20 = &v16[8 * v17];
              v21 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
              *((_QWORD *)v20 + 1) = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                {
                  WTF::StringImpl::destroy(v21, v7);
                  v15 = *((unsigned int *)this + 5);
                }
                else
                {
                  *(_DWORD *)v21 -= 2;
                }
              }
              v22 = v20 + 8;
              v23 = *((_QWORD *)this + 1) + 16 * v15;
              while (v22 != (_WORD *)v23)
              {
                *(v22 - 8) = *v22;
                *((_QWORD *)v22 - 1) = *((_QWORD *)v22 + 1);
                *((_QWORD *)v22 + 1) = 0;
                v22 += 8;
              }
              *((_DWORD *)this + 5) = v15 - 1;
            }
            else
            {
              v17 = 0;
              v18 = v16 + 8;
              while (v15 - 1 != v17)
              {
                v19 = *v18;
                v18 += 8;
                ++v17;
                if (v19 == 59)
                  goto LABEL_19;
              }
            }
          }
        }
        goto LABEL_26;
      }
      v37 = *((unsigned int *)this + 13);
      if (!(_DWORD)v37)
      {
LABEL_74:
        v41 = *(WTF **)a2;
        if (*(_QWORD *)a2)
        {
          *((_QWORD *)this + 5) = 0;
          *((_DWORD *)this + 12) = 0;
          WTF::fastFree(v41, v7);
        }
        goto LABEL_45;
      }
      v38 = *(WTF::StringImpl ***)a2;
      v39 = 8 * v37;
      do
      {
        v40 = *v38;
        *v38 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v7);
          else
            *(_DWORD *)v40 -= 2;
        }
        ++v38;
        v39 -= 8;
      }
      while (v39);
LABEL_73:
      *((_DWORD *)this + 13) = 0;
      goto LABEL_74;
    }
    goto LABEL_8;
  }
LABEL_26:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
LABEL_27:
  off_1E3355B70[v8](&v46, &v42);
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::canWriteHeader(uint64_t a1, WebCore *this, uint64_t *a3, WTF::StringImpl **a4, int a5)
{
  uint64_t result;
  const WTF::String *v11;
  const WTF::String *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  unsigned int v28;
  int v29;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const WTF::String *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  _DWORD *v39;
  _QWORD v40[2];

  result = WebCore::isValidHTTPToken(this, this);
  if ((result & 1) != 0)
  {
    v13 = *a3;
    if (*a3)
    {
      v14 = *(unsigned int *)(v13 + 4);
      if ((_DWORD)v14)
      {
        v15 = *(_DWORD *)(v13 + 16);
        v16 = *(unsigned __int8 **)(v13 + 8);
        if ((v15 & 4) != 0)
          v17 = *v16;
        else
          v17 = *(unsigned __int16 *)v16;
        if (v17 != 9 && v17 != 32)
        {
          v22 = (v14 - 1);
          v23 = (v15 & 4) != 0 ? v16[v22] : *(unsigned __int16 *)&v16[2 * v22];
          if (v23 != 9 && v23 != 32)
          {
            if ((v15 & 4) != 0)
            {
              while (1)
              {
                v24 = *v16;
                v25 = v24 > 0xD;
                v26 = (1 << v24) & 0x2401;
                if (!v25 && v26 != 0)
                  break;
                ++v16;
                if (!--v14)
                  goto LABEL_28;
              }
            }
            else
            {
              while (1)
              {
                v28 = *(unsigned __int16 *)v16;
                v25 = v28 > 0xD;
                v29 = (1 << v28) & 0x2401;
                if (!v25 && v29 != 0)
                  break;
                v16 += 2;
                if (!--v14)
                  goto LABEL_28;
              }
            }
          }
        }
        v18 = *(WTF::StringImpl **)this;
        if (*(_QWORD *)this)
          *(_DWORD *)v18 += 2;
        v37 = v18;
        *(_DWORD *)v13 += 2;
        v36 = (WTF::StringImpl *)v13;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Header '", 9, (uint64_t *)&v37, (uint64_t)"' has invalid value: '", 23, (uint64_t *)&v36, 39, &v38);
        v20 = v38;
        *(_BYTE *)a1 = 33;
        *(_QWORD *)(a1 + 8) = v20;
        *(_DWORD *)(a1 + 16) = 1;
        v38 = 0;
        v21 = v36;
        v36 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v19);
          else
            *(_DWORD *)v21 -= 2;
        }
        result = (uint64_t)v37;
        v37 = 0;
        if (result)
          goto LABEL_14;
        return result;
      }
    }
LABEL_28:
    switch(a5)
    {
      case 4:
        result = WebCore::isForbiddenResponseHeaderName(this, v11);
        if (!(_DWORD)result)
        {
LABEL_30:
          *(_BYTE *)a1 = 1;
LABEL_31:
          *(_DWORD *)(a1 + 16) = 0;
          return result;
        }
        break;
      case 1:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v33 = v40[1];
        *(_BYTE *)a1 = 33;
        *(_QWORD *)(a1 + 8) = v33;
        *(_DWORD *)(a1 + 16) = 1;
        return result;
      case 2:
        if (v13)
        {
          v34 = *(const WTF::String **)(v13 + 8);
          v35 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v34 = 0;
          v35 = 0x100000000;
        }
        result = WebCore::isForbiddenHeader(this, v34, v35);
        if (!(_DWORD)result)
          goto LABEL_30;
        break;
      case 3:
        result = WebCore::isSimpleHeader(this, a4, v12);
        if ((result & 1) != 0)
          goto LABEL_30;
        break;
      default:
        goto LABEL_30;
    }
    *(_BYTE *)a1 = 0;
    goto LABEL_31;
  }
  v31 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v31 += 2;
  v39 = v31;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Invalid header name: '", 23, (uint64_t *)&v39, 39, v40);
  result = (uint64_t)v39;
  v32 = v40[0];
  *(_BYTE *)a1 = 33;
  *(_QWORD *)(a1 + 8) = v32;
  *(_DWORD *)(a1 + 16) = 1;
  v39 = 0;
  v40[0] = 0;
  if (result)
  {
LABEL_14:
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl ***WebCore::FetchHeaders::Iterator::next@<X0>(WTF::StringImpl ***this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl ***v5;
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl **v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl **v22;
  void *v23;
  void *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  const WTF::String *v42;
  WTF **v43;
  unint64_t v44;
  WTF **v45;
  WTF **v46;
  uint64_t v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  WTF::StringImpl **v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  char v59[8];
  WTF::StringImpl *v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  char v68;
  WTF::StringImpl *v69;

  v3 = (uint64_t)this;
  v5 = this + 3;
  v6 = *((unsigned int *)this + 9);
  if (!(_DWORD)v6)
  {
    v8 = *this;
    v9 = *((_DWORD *)*this + 13);
    goto LABEL_12;
  }
  if (this[5] != (WTF::StringImpl **)(*this)[7])
  {
    v9 = *((_DWORD *)*this + 13);
    v10 = *v5;
    v11 = 8 * v6;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(WTF::StringImpl ***)v3;
LABEL_12:
    *(_DWORD *)(v3 + 36) = 0;
    v13 = *((_DWORD *)v8 + 5);
    v14 = *((_DWORD *)v8 + 9);
    if (v9)
      ++v13;
    v15 = v13 + v14;
    if (*(unsigned int *)(v3 + 32) >= (unint64_t)(v13 + v14))
    {
      v15 = *(_DWORD *)(v3 + 32);
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_109;
      v16 = (WTF *)*v5;
      v17 = WTF::fastMalloc((WTF *)(8 * (int)v15));
      *(_DWORD *)(v3 + 32) = v15;
      *(_QWORD *)(v3 + 24) = v17;
      if (v16)
      {
        if ((WTF *)v17 == v16)
        {
          *(_QWORD *)(v3 + 24) = 0;
          *(_DWORD *)(v3 + 32) = 0;
        }
        WTF::fastFree(v16, v18);
        v15 = *(_DWORD *)(v3 + 32);
      }
    }
    v19 = *(WTF::StringImpl ***)v3;
    v20 = *(unsigned int *)(v3 + 36);
    v21 = v20 + *(_DWORD *)(*(_QWORD *)v3 + 36) + *(_DWORD *)(*(_QWORD *)v3 + 20);
    if (v21 <= v15)
    {
LABEL_20:
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v64, (uint64_t)(v19 + 1), v19[1], (uint64_t)v19[3]);
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v59, (uint64_t)(v19 + 1), (WTF::StringImpl *)((char *)v19[1] + 16 * *((unsigned int *)v19 + 5)), (uint64_t)v19[3] + 16 * *((unsigned int *)v19 + 9));
      while (1)
      {
        if (v65 == v60 && v66 == v61)
        {
          v33 = v63;
          v63 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v25);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = v62;
          v62 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v25);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = v69;
          v69 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v25);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = v67;
          v67 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v25);
            else
              *(_DWORD *)v36 -= 2;
          }
          v37 = *(unsigned int *)(v3 + 36);
          if (v9)
          {
            v64 = 0;
            if ((_DWORD)v37 == *(_DWORD *)(v3 + 32))
            {
              v54 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v37 + 1, (unint64_t)&v64);
              v37 = *(unsigned int *)(v3 + 36);
              v55 = *(_QWORD *)(v3 + 24);
              v56 = *v54;
              *v54 = 0;
              *(_QWORD *)(v55 + 8 * v37) = v56;
            }
            else
            {
              (*v5)[v37] = 0;
            }
            LODWORD(v37) = v37 + 1;
            *(_DWORD *)(v3 + 36) = v37;
            v38 = v64;
            v64 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
              {
                WTF::StringImpl::destroy(v38, v25);
                LODWORD(v37) = *(_DWORD *)(v3 + 36);
              }
              else
              {
                *(_DWORD *)v38 -= 2;
              }
            }
          }
          v39 = *(_QWORD *)(v3 + 24);
          v64 = (WTF::StringImpl *)WebCore::compareIteratorKeys;
          v40 = 126 - 2 * __clz(v37);
          if ((_DWORD)v37)
            v41 = v40;
          else
            v41 = 0;
          this = (WTF::StringImpl ***)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v39, (WTF::StringImpl *)(v39 + 8 * v37), (uint64_t (**)(uint64_t *, uint64_t *))&v64, v41, 1);
          v7 = *(_QWORD *)(v3 + 8) + *(_QWORD *)(v3 + 16);
          *(_QWORD *)(v3 + 8) = v7;
          if (!v9)
            goto LABEL_75;
          v43 = *(WTF ***)(v3 + 24);
          v44 = *(unsigned int *)(v3 + 36);
          v64 = 0;
          if ((_DWORD)v44)
          {
            v45 = v43;
            do
            {
              v46 = &v45[v44 >> 1];
              this = (WTF::StringImpl ***)WebCore::compareIteratorKeys(v46, &v64, v42);
              if ((_DWORD)this)
                v44 += ~(v44 >> 1);
              else
                v44 >>= 1;
              if ((_DWORD)this)
                v45 = v46 + 1;
            }
            while (v44);
            v43 = *(WTF ***)(v3 + 24);
            v7 = *(_QWORD *)(v3 + 8);
          }
          else
          {
            v45 = &v43[v44];
          }
          v47 = (char *)v45 - (char *)v43;
          if (v7 >= v47 >> 3)
          {
            v48 = v7 - (v47 >> 3);
            if (v48 >= *(unsigned int *)(*(_QWORD *)v3 + 52))
              v48 = *(unsigned int *)(*(_QWORD *)v3 + 52);
            v7 -= v48;
            *(_QWORD *)(v3 + 8) = v7;
            *(_QWORD *)(v3 + 16) = v48;
          }
          else
          {
LABEL_75:
            *(_QWORD *)(v3 + 16) = 0;
          }
          *(_QWORD *)(v3 + 40) = *(_QWORD *)(*(_QWORD *)v3 + 56);
          LODWORD(v6) = *(_DWORD *)(v3 + 36);
          goto LABEL_80;
        }
        WTF::String::convertToASCIILowercase((WTF::String *)&v67);
        v26 = *(unsigned int *)(v3 + 36);
        *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v26) = v58;
        *(_DWORD *)(v3 + 36) = v26 + 1;
        v58 = 0;
        v27 = v64;
        if (v65 == (WTF::StringImpl *)(*(_QWORD *)v64 + 16 * *((unsigned int *)v64 + 3)))
          break;
        v65 = (WTF::StringImpl *)((char *)v65 + 16);
        if (!WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue((uint64_t)&v64, v65))
        {
          v28 = v66;
          v27 = v64;
LABEL_27:
          if ((WTF::StringImpl **)(*((_QWORD *)v27 + 2) + 16 * *((unsigned int *)v27 + 7)) != v28)
          {
            v29 = *v28;
            if (*v28)
              *(_DWORD *)v29 += 2;
            v30 = v67;
            v67 = v29;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v25);
              else
                *(_DWORD *)v30 -= 2;
            }
            if (v68)
              v68 = 0;
            v31 = v28[1];
            if (v31)
              *(_DWORD *)v31 += 2;
            v32 = v69;
            v69 = v31;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v25);
              else
                *(_DWORD *)v32 -= 2;
            }
          }
        }
      }
      v28 = v66 + 2;
      v66 += 2;
      goto LABEL_27;
    }
    if (!(v21 >> 29))
    {
      v22 = *v5;
      v23 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
      *(_DWORD *)(v3 + 32) = v21;
      *(_QWORD *)(v3 + 24) = v23;
      memcpy(v23, v22, 8 * v20);
      if (v22)
      {
        if (*v5 == v22)
        {
          *(_QWORD *)(v3 + 24) = 0;
          *(_DWORD *)(v3 + 32) = 0;
        }
        WTF::fastFree((WTF *)v22, v24);
      }
      goto LABEL_20;
    }
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x19532C4B4);
  }
  v7 = (unint64_t)this[1];
LABEL_80:
  if (v7 >= v6)
  {
LABEL_90:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  while (1)
  {
    v49 = (*v5)[v7];
    if (!v49)
      break;
    *(_DWORD *)v49 += 2;
    *(_QWORD *)(v3 + 8) = v7 + 1;
    this = (WTF::StringImpl ***)WebCore::HTTPHeaderMap::get(*(_QWORD *)v3 + 8, *((WebCore::HTTPHeaderNamesHash **)v49 + 1), (char *)(*((unsigned int *)v49 + 1) | ((unint64_t)((*((_DWORD *)v49 + 4) >> 2) & 1) << 32)), &v64);
    v51 = v64;
    if (v64)
    {
      *(_QWORD *)a3 = v49;
      *(_QWORD *)(a3 + 8) = v51;
      goto LABEL_92;
    }
    if (*(_DWORD *)v49 == 2)
      this = (WTF::StringImpl ***)WTF::StringImpl::destroy(v49, v50);
    else
      *(_DWORD *)v49 -= 2;
LABEL_85:
    v7 = *(_QWORD *)(v3 + 8);
    if (v7 >= *(unsigned int *)(v3 + 36))
      goto LABEL_90;
  }
  v52 = *(_QWORD *)(v3 + 16);
  v53 = *(WTF::StringImpl ***)v3;
  if (v52 >= *(unsigned int *)(*(_QWORD *)v3 + 52))
  {
    *(_QWORD *)(v3 + 8) = v7 + 1;
    goto LABEL_85;
  }
  *(_QWORD *)(v3 + 16) = v52 + 1;
  v57 = (_DWORD *)*((_QWORD *)v53[5] + v52);
  if (v57)
    *v57 += 2;
  this = (WTF::StringImpl ***)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a3 + 8) = v57;
LABEL_92:
  *(_BYTE *)(a3 + 16) = 1;
  return this;
}

uint64_t WebCore::compareIteratorKeys(WTF **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v4 = *this;
  if (*this)
  {
    *(_DWORD *)v4 += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = v10;
  }
  v5 = *a2;
  if (*a2)
  {
    *(_DWORD *)v5 += 2;
    v7 = WTF::codePointCompare(v4, v5, a3) >> 31;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v10;
    v7 = WTF::codePointCompare(v4, v10, v8) >> 31;
    if (!v10)
      goto LABEL_9;
  }
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
LABEL_9:
    if (!v4)
      return v7;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v5, v6);
  if (!v4)
    return v7;
LABEL_10:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v6);
  else
    *(_DWORD *)v4 -= 2;
  return v7;
}

void WebCore::FetchLoader::startLoadingBlobURL(WebCore::FetchLoader *this, WebCore::ScriptExecutionContext *a2, const WTF::URL *a3)
{
  WebCore::BlobURL *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  char v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t (*v44)();
  WTF::StringImpl *v45;
  void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  char v55;
  char v56;
  char v57;
  __int16 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  _BYTE v66[40];
  WTF::StringImpl *v67;
  _DWORD *v68;
  CFTypeRef cf;
  char v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  char v77;
  WTF::StringImpl *v78;
  _DWORD *v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85[3];
  int v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityContext::securityOrigin(a2, a2);
  WebCore::BlobURL::createPublicURL(v6, (uint64_t)&v49);
  v7 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  LOBYTE(v85[0]) = 0;
  v86 = -1;
  v8 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *, uint64_t))off_1E3355B90[v8])(&v65, v85, v7 + 8);
    v86 = v8;
  }
  v87 = 1;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)&v65, (uint64_t)&v49, (uint64_t)v85);
  v9 = (char *)this + 56;
  WebCore::URLKeepingBlobAlive::operator=((uint64_t)this + 56, &v65);
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)&v65);
  if (v87 && v86 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3355B80[v86])(&v48, v85);
  v11 = v49;
  v49 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (!*(_QWORD *)v9 || !*(_DWORD *)(*(_QWORD *)v9 + 4))
  {
    v12 = *((_QWORD *)this + 3);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v65;
    v49 = 0;
    WTF::URL::invalidate((WTF::URL *)&v49);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v65;
    if (v13)
      *(_DWORD *)v13 += 2;
    v65 = v13;
    v15 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    *(_QWORD *)v66 = v15;
    *(_OWORD *)&v66[8] = v50;
    *(_OWORD *)&v66[24] = v51;
    if (v14)
      *(_DWORD *)v14 += 2;
    v67 = v14;
    LODWORD(v68) = 0;
    WORD2(v68) = 1;
    cf = 0;
    v70 = 1;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 40))(v12, &v65);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(WTF::StringImpl **)v66;
    *(_QWORD *)v66 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v65;
    v65 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v16);
        if (!v14)
          goto LABEL_30;
        goto LABEL_28;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (!v14)
      goto LABEL_30;
LABEL_28:
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v16);
    else
      *(_DWORD *)v14 -= 2;
LABEL_30:
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v16);
        if (!v13)
          return;
        goto LABEL_34;
      }
      *(_DWORD *)v21 -= 2;
    }
    if (!v13)
      return;
LABEL_34:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v16);
    else
      *(_DWORD *)v13 -= 2;
    return;
  }
  WebCore::SecurityContext::securityOrigin(a2, v10);
  v23 = v22;
  WebCore::ContentSecurityPolicy::responseHeaders(*((_QWORD *)a2 + 2), v24, (uint64_t)&v65);
  *(_WORD *)&v66[16] = *((_WORD *)a2 + 12);
  v25 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v25)
    *v25 += 2;
  *(_QWORD *)&v66[24] = v25;
  v26 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v26)
    *v26 += 2;
  *(_QWORD *)&v66[32] = v26;
  v27 = (**(uint64_t (***)(WebCore::ScriptExecutionContext *))a2)(a2);
  LOWORD(v67) = *(_WORD *)v27;
  v28 = *(_DWORD **)(v27 + 8);
  if (v28)
    *v28 += 2;
  v68 = v28;
  v29 = *(_DWORD **)(v27 + 16);
  if (v29)
    *v29 += 2;
  cf = v29;
  v70 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 8))(a2);
  WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)this + 24, (uint64_t)&v49);
  WebCore::ThreadableBlobRegistry::registerBlobURL(v23, (unint64_t *)&v65, (WebCore::FetchLoader *)((char *)this + 56), (uint64_t)a3, (uint64_t)&v49);
  if (BYTE8(v51) && (_DWORD)v51 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v51])(v85, &v49);
  WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)&v65, v30);
  v31 = *(WTF::StringImpl **)v9;
  if (*(_QWORD *)v9)
    *(_DWORD *)v31 += 2;
  v32 = *((_OWORD *)this + 5);
  *(_OWORD *)v66 = *((_OWORD *)this + 4);
  *(_OWORD *)&v66[16] = v32;
  v65 = v31;
  *(_QWORD *)&v66[32] = 0;
  WTF::URL::invalidate((WTF::URL *)&v66[32]);
  v71 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v72 = v49;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0x10000;
  v33 = v77 & 0x80 | 4;
  v77 = v33;
  v78 = 0;
  v34 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v34 += 2;
    v33 = v77;
  }
  v79 = v34;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = v83 & 0xE0 | 5;
  v77 = v33 | 2;
  v84 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 232))(&v49, a2);
  v36 = v49;
  if (v49)
    *(_DWORD *)v49 += 2;
  v37 = v78;
  v78 = v36;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::destroy(v37, v35);
      v36 = v49;
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v49 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceRequestBase::setHTTPMethod(&v65, &v49);
  v39 = v49;
  v49 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  LOWORD(v49) = 256;
  *(_DWORD *)((char *)&v49 + 2) = 2;
  BYTE6(v49) = 0;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  v55 = 1;
  v56 = 0;
  v57 = 0;
  v58 = 20;
  v60 = 0;
  v61 = 0;
  v63 = 0;
  v64 = 1;
  v59 = 201329098;
  v62 = 0;
  v47 = 0;
  v48 = 0;
  WebCore::ThreadableLoader::create(a2, (uint64_t)this, (WebCore::ResourceRequest *)&v65, (uint64_t)&v49, &v48, (uint64_t)&v47, v85);
  v41 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v85[0];
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
  v42 = v47;
  v47 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v48;
  v48 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v40);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (*((_QWORD *)this + 4))
    v44 = WTF::RefPtr<WebCore::ThreadableLoader,WTF::RawPtrTraits<WebCore::ThreadableLoader>,WTF::DefaultRefDerefTraits<WebCore::ThreadableLoader>>::unspecifiedBoolTypeInstance;
  else
    v44 = 0;
  *((_BYTE *)this + 48) = v44 != 0;
  v45 = v63;
  v63 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v40);
    else
      *(_DWORD *)v45 -= 2;
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v49, v40);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v65, v46);
}

uint64_t WebCore::FetchLoader::FetchLoader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E3355930;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 56));
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

{
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E3355930;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 56));
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

uint64_t *WebCore::FetchLoader::startStreaming@<X0>(uint64_t *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v5 = this[5];
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v7 = 0;
    this = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v7, a2);
  }
  *a3 = v6;
  v3[5] = 0;
  return this;
}

uint64_t WebCore::FetchLoader::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a4);
}

WTF::DeferrableRefCountedBase *WebCore::FetchLoader::didReceiveData(WebCore::FetchLoader *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::DeferrableRefCountedBase *result;
  WTF::DeferrableRefCountedBase *v6;

  v3 = *((_QWORD *)this + 5);
  if (!v3)
    return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(_QWORD, const WebCore::SharedBuffer *))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), a2);
  v4 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(a2, &v6);
    WebCore::FetchBodySource::enqueue(v4, &v6);
    result = v6;
    v6 = 0;
    if (result)
      return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  else
  {
    WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)(v3 + 8));
    return (WTF::DeferrableRefCountedBase *)WebCore::FragmentedSharedBuffer::append(*(WebCore::FragmentedSharedBuffer **)(v3 + 8), a2);
  }
  return result;
}

uint64_t WebCore::FetchLoader::didFinishLoading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a4);
}

uint64_t WebCore::FetchLoader::didFail(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
}

WebCore::AbortSignal **WTF::Ref<WebCore::AbortSignal,WTF::RawPtrTraits<WebCore::AbortSignal>,WTF::DefaultRefDerefTraits<WebCore::AbortSignal>>::~Ref(WebCore::AbortSignal **a1, void *a2)
{
  WebCore::AbortSignal *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

unsigned int *WebCore::processInvalidSignal(WebCore *this, WebCore::ScriptExecutionContext *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  unsigned int *result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[2];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(WebCore::ScriptExecutionContext *, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 248))(a2, 1, 1, v12, 0);
  v5 = v12[0];
  v12[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned __int8 *)a2 + 274);
  if (!*((_BYTE *)a2 + 274))
  {
    *((_DWORD *)a2 - 42) += 2;
    result = (unsigned int *)*((_QWORD *)a2 + 62);
    if (!result)
      result = (unsigned int *)WebCore::Document::ensureQuirks((WebCore::ScriptExecutionContext *)((char *)a2 - 192));
    if (*(_QWORD *)result)
    {
      v8 = *(_QWORD *)(*(_QWORD *)result + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 680);
        if (!*(_BYTE *)(v9 + 243))
        {
          if ((*(_QWORD *)(v9 + 688) & 0x80000) == 0)
            goto LABEL_11;
LABEL_17:
          *(_BYTE *)this = 0;
          *((_BYTE *)this + 16) = 0;
LABEL_18:
          if (*((_DWORD *)a2 - 42) == 2)
          {
            if ((*((_WORD *)a2 - 81) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)a2 - 192), v4);
          }
          else
          {
            *((_DWORD *)a2 - 42) -= 2;
          }
          return result;
        }
        if (*(_BYTE *)(v9 + 242))
          goto LABEL_17;
      }
    }
  }
LABEL_11:
  v10 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v12[0]) = 0;
    _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "FetchRequestInit.signal should be undefined, null or an AbortSignal object.", (uint8_t *)v12, 2u);
  }
  result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = v12[0];
  *(_BYTE *)this = 33;
  *((_QWORD *)this + 1) = v11;
  *((_BYTE *)this + 16) = 1;
  if (!v6)
    goto LABEL_18;
  return result;
}

WTF::StringImpl *WebCore::FetchRequest::setBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::ResourceRequest *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  char v13[8];
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  _QWORD v17[2];

  v6 = (WebCore::ResourceRequest *)(a2 + 288);
  if ((WebCore::methodCanHaveBody((WebCore *)(a2 + 288), (const WebCore::ResourceRequest *)a2) & 1) != 0)
  {
    WebCore::FetchBodyOwner::extractBody((uint64_t)v13, a2, a3);
    if (v15)
    {
      *(_BYTE *)a1 = v13[0];
      v12 = v14;
      v14 = 0;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 566) || !*(_BYTE *)(a2 + 128) || !*(_QWORD *)(a2 + 120))
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        return (WTF::StringImpl *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v13, v7);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v12 = v17[1];
      *(_BYTE *)a1 = 33;
    }
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = 1;
    return (WTF::StringImpl *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v13, v7);
  }
  if ((*(_BYTE *)(a2 + 472) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v6);
    *(_BYTE *)(a2 + 472) |= 1u;
  }
  v9 = *(WTF::StringImpl **)(a2 + 376);
  if (v9)
    *(_DWORD *)v9 += 2;
  v16 = v9;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Request has method '", 21, (uint64_t *)&v16, (int8x16_t *)"' and cannot have a body", 25, v17);
  result = v16;
  v11 = v17[0];
  *(_BYTE *)a1 = 33;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = 1;
  v16 = 0;
  v17[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FetchRequest::initializeWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore::ResourceRequest *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::AbortSignal *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  WTF::StringImpl *v33;
  const WebCore::ResourceRequest *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  int v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  int v70;
  uint64_t v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  WTF::StringImpl *v83;
  bmalloc::api *v84;
  void *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  int v98;
  _BOOL4 v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WebCore::HTTPHeaderMap *v111;
  _BYTE v112[8];
  uint64_t v113;
  char v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  unsigned int v117;
  WTF::StringImpl *v118;
  char v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  unsigned __int16 v124;
  char v125;
  WTF::StringImpl *v126[4];
  _QWORD v127[3];
  WTF::StringImpl *v128;
  char v129;
  WTF::StringImpl *v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v8 = (WebCore::ResourceRequest *)(a2 + 288);
  WebCore::ResourceRequestBase::operator=(a2 + 288, a3 + 288);
  v9 = *(_QWORD *)(a3 + 480);
  if (v9)
    CFRetain(*(CFTypeRef *)(a3 + 480));
  v10 = *(const void **)(a2 + 480);
  *(_QWORD *)(a2 + 480) = v9;
  if (v10)
    CFRelease(v10);
  if ((*(_BYTE *)(a2 + 472) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 288));
    *(_BYTE *)(a2 + 472) |= 1u;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (v11)
    v12 = v11 - 96;
  else
    v12 = 0;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 256))(v12);
  LOBYTE(v127[0]) = 0;
  LODWORD(v128) = -1;
  v14 = *(unsigned int *)(v13 + 32);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(WTF::StringImpl **, _QWORD *, uint64_t))off_1E3355B90[v14])(&v120, v127, v13 + 8);
    LODWORD(v128) = v14;
  }
  v129 = 1;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)&v120, a2 + 288, (uint64_t)v127);
  WebCore::URLKeepingBlobAlive::operator=(a2 + 488, &v120);
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)&v120);
  if (v129 && (_DWORD)v128 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3355B80[v128])(&v115, v127);
  v16 = *(_DWORD *)(a3 + 560);
  *(_DWORD *)(a2 + 563) = *(_DWORD *)(a3 + 563);
  *(_DWORD *)(a2 + 560) = v16;
  v17 = *(_DWORD **)(a3 + 568);
  if (v17)
    *v17 += 2;
  v18 = *(WTF::StringImpl **)(a2 + 568);
  *(_QWORD *)(a2 + 568) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(_OWORD *)(a3 + 592);
  *(_OWORD *)(a2 + 576) = *(_OWORD *)(a3 + 576);
  *(_OWORD *)(a2 + 592) = v19;
  v20 = *(_DWORD **)(a3 + 616);
  if (v20)
    *v20 += 2;
  v21 = *(WTF::StringImpl **)(a2 + 616);
  *(_QWORD *)(a2 + 616) = v20;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  *(_BYTE *)(a2 + 608) = *(_BYTE *)(a3 + 608);
  *(_BYTE *)(a2 + 640) = *(_BYTE *)(a3 + 640);
  WebCore::FetchRequest::initializeOptions((uint64_t)v112, (const WebCore::FetchRequestInit *)a2, (const WTF::String *)a4);
  if (v114)
  {
    v22 = v112[0];
    v23 = v113;
LABEL_27:
    *(_BYTE *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v23;
LABEL_28:
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  v24 = *(_QWORD *)(a4 + 104);
  if (!v24 || v24 == 10)
  {
    v25 = *(_QWORD *)(a2 + 624);
    ++*(_DWORD *)(v25 + 24);
    v26 = *(WebCore::AbortSignal **)(a3 + 624);
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (v27)
    v28 = v27 - 96;
  else
    v28 = 0;
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 344))(v28);
  v30 = *(_QWORD *)(a4 + 104);
  v31 = WebCore::JSAbortSignal::toWrapped(v29, v30);
  if (v31)
  {
    v26 = (WebCore::AbortSignal *)v31;
    v25 = *(_QWORD *)(a2 + 624);
    ++*(_DWORD *)(v25 + 24);
LABEL_38:
    WebCore::AbortSignal::signalFollow((_BYTE *)v25, v26);
    if (*(_DWORD *)(v25 + 24) == 1)
    {
      WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v25, v32);
      bmalloc::api::isoDeallocate(v84, v85);
    }
    else
    {
      --*(_DWORD *)(v25 + 24);
    }
    goto LABEL_40;
  }
  if (v30 != 2)
  {
    v71 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    v72 = v71 ? (WebCore::ScriptExecutionContext *)(v71 - 96) : 0;
    WebCore::processInvalidSignal((WebCore *)&v120, v72);
    if ((_BYTE)v122)
    {
      v22 = (char)v120;
      v23 = v121;
      goto LABEL_27;
    }
  }
LABEL_40:
  if (!WebCore::FetchRequestInit::hasMembers((WebCore::FetchRequestInit *)a4))
  {
    v110 = a1;
    v35 = *(_QWORD *)(a2 + 152);
    v36 = *(_QWORD *)(a3 + 152);
    v37 = *(unsigned int *)(v36 + 20);
    v120 = 0;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v37;
    if ((_DWORD)v37)
    {
      if (v37 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x19532DCC4);
      }
      v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v37));
      v39 = v38;
      LODWORD(v121) = v37;
      v120 = v38;
      v40 = *(unsigned int *)(v36 + 20);
      if ((_DWORD)v40)
      {
        v41 = 0;
        v42 = *(_QWORD *)(v36 + 8);
        v43 = v42 + 16 * v40;
        do
        {
          v44 = v42 + v41;
          *(_WORD *)((char *)v38 + v41) = *(_WORD *)(v42 + v41);
          v45 = *(_DWORD **)(v42 + v41 + 8);
          if (v45)
            *v45 += 2;
          *(_QWORD *)((char *)v38 + v41 + 8) = v45;
          v41 += 16;
        }
        while (v44 + 16 != v43);
      }
    }
    else
    {
      v39 = 0;
    }
    v64 = 0;
    v65 = *(unsigned int *)(v36 + 36);
    v122 = 0;
    LODWORD(v123) = 0;
    HIDWORD(v123) = v65;
    if ((_DWORD)v65)
    {
      if (v65 >> 28)
      {
        __break(0xC471u);
        goto LABEL_196;
      }
      v73 = WTF::fastMalloc((WTF *)(16 * v65));
      v64 = v73;
      LODWORD(v123) = v65;
      v122 = v73;
      v74 = *(unsigned int *)(v36 + 36);
      if ((_DWORD)v74)
      {
        v75 = 0;
        v76 = *(_QWORD *)(v36 + 24);
        v77 = v76 + 16 * v74;
        do
        {
          v78 = v76 + v75;
          v79 = *(_DWORD **)(v76 + v75);
          if (v79)
            *v79 += 2;
          *(_QWORD *)(v73 + v75) = v79;
          v80 = *(_DWORD **)(v78 + 8);
          if (v80)
            *v80 += 2;
          *(_QWORD *)(v73 + v75 + 8) = v80;
          v75 += 16;
        }
        while (v78 + 16 != v77);
      }
    }
    v66 = *(unsigned int *)(v35 + 20);
    if ((_DWORD)v66)
    {
      v81 = 16 * v66;
      v82 = (WTF::StringImpl **)(*(_QWORD *)(v35 + 8) + 8);
      do
      {
        v83 = *v82;
        *v82 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v33);
          else
            *(_DWORD *)v83 -= 2;
        }
        v82 += 2;
        v81 -= 16;
      }
      while (v81);
    }
    v67 = *(WTF **)(v35 + 8);
    if (v67)
    {
      *(_QWORD *)(v35 + 8) = 0;
      *(_DWORD *)(v35 + 16) = 0;
      WTF::fastFree(v67, v33);
    }
    *(_QWORD *)(v35 + 8) = v39;
    v120 = 0;
    v121 = 0;
    *(_DWORD *)(v35 + 16) = v37;
    *(_DWORD *)(v35 + 20) = v37;
    v68 = *(unsigned int *)(v35 + 36);
    v8 = (WebCore::ResourceRequest *)(a2 + 288);
    if ((_DWORD)v68)
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)(v35 + 24), (WTF::StringImpl *)(*(_QWORD *)(v35 + 24) + 16 * v68));
    v69 = *(WTF **)(v35 + 24);
    a1 = v110;
    if (v69)
    {
      *(_QWORD *)(v35 + 24) = 0;
      *(_DWORD *)(v35 + 32) = 0;
      WTF::fastFree(v69, v33);
    }
    *(_QWORD *)(v35 + 24) = v64;
    v122 = 0;
    v123 = 0;
    *(_DWORD *)(v35 + 32) = v65;
    *(_DWORD *)(v35 + 36) = v65;
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v120, v33);
    *(_QWORD *)(a2 + 632) = *(_QWORD *)(a3 + 632);
LABEL_143:
    if (*(_BYTE *)(a4 + 56))
    {
      WebCore::FetchRequest::setBody((uint64_t)&v120, a2, a4 + 40);
LABEL_175:
      if (!(_BYTE)v122)
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        return;
      }
      *(_BYTE *)a1 = (_BYTE)v120;
      *(_QWORD *)(a1 + 8) = v121;
      goto LABEL_28;
    }
    if (!*(_BYTE *)(a3 + 128))
      goto LABEL_170;
    if (!*(_BYTE *)(a3 + 136))
    {
      v94 = *(_QWORD *)(a3 + 120);
      if (!v94)
      {
LABEL_148:
        if ((WebCore::methodCanHaveBody(v8, v34) & 1) == 0)
        {
          if ((*(_BYTE *)(a2 + 472) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(v8);
            *(_BYTE *)(a2 + 472) |= 1u;
          }
          v95 = *(_QWORD *)(a2 + 376);
          if (v95)
          {
            v96 = *(_DWORD *)(v95 + 4);
            *(_DWORD *)v95 += 2;
            if (v96 < 0)
              goto LABEL_192;
          }
          else
          {
            v96 = 0;
          }
          v97 = __OFADD__(v96, 24);
          v98 = v96 + 24;
          if (v97 || __OFADD__(v98, 20))
          {
LABEL_192:
            v127[0] = 0;
          }
          else
          {
            v99 = !v95 || (*(_BYTE *)(v95 + 16) & 4) != 0;
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v98 + 20), v99, (int8x16_t *)"Request has method '", 0x14u, v95, (int8x16_t *)"' and cannot have a body", 0x18u, v127);
            if (v127[0])
            {
              LOBYTE(v120) = 33;
              v121 = v127[0];
              LOBYTE(v122) = 1;
              v127[0] = 0;
              if (v95)
              {
                if (*(_DWORD *)v95 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v95, v100);
                else
                  *(_DWORD *)v95 -= 2;
              }
              goto LABEL_175;
            }
          }
          __break(0xC471u);
LABEL_197:
          JUMPOUT(0x19532DCBCLL);
        }
        if (*(_BYTE *)(a3 + 128))
        {
          if (*(_BYTE *)(a2 + 128))
          {
            WebCore::FetchBody::operator=(a2 + 40, a3 + 40);
          }
          else
          {
            *(_BYTE *)(a2 + 40) = 0;
            *(_DWORD *)(a2 + 48) = -1;
            v101 = *(unsigned int *)(a3 + 48);
            if ((_DWORD)v101 != -1)
            {
              ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E33559F8[v101])(&v120, a2 + 40, a3 + 40);
              *(_DWORD *)(a2 + 48) = v101;
            }
            *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
            v102 = *(_QWORD *)(a3 + 64);
            *(_QWORD *)(a3 + 64) = 0;
            *(_QWORD *)(a2 + 64) = v102;
            v103 = *(_QWORD *)(a3 + 72);
            *(_QWORD *)(a3 + 72) = 0;
            *(_QWORD *)(a2 + 72) = v103;
            v104 = *(_QWORD *)(a3 + 80);
            *(_QWORD *)(a3 + 80) = 0;
            *(_QWORD *)(a2 + 80) = v104;
            v105 = *(_QWORD *)(a3 + 88);
            *(_QWORD *)(a3 + 88) = 0;
            *(_QWORD *)(a2 + 88) = v105;
            *(_BYTE *)(a2 + 96) = *(_BYTE *)(a3 + 96);
            v106 = *(_QWORD *)(a3 + 104);
            *(_QWORD *)(a3 + 104) = 0;
            *(_QWORD *)(a2 + 104) = v106;
            v107 = *(_QWORD *)(a3 + 112);
            *(_QWORD *)(a3 + 112) = 0;
            *(_QWORD *)(a2 + 112) = v107;
            v108 = *(_QWORD *)(a3 + 120);
            *(_QWORD *)(a3 + 120) = 0;
            *(_QWORD *)(a2 + 120) = v108;
            *(_BYTE *)(a2 + 128) = 1;
          }
          *(_BYTE *)(a3 + 136) = 1;
LABEL_170:
          if (!*(_BYTE *)(a2 + 566) || !*(_BYTE *)(a2 + 128) || !*(_QWORD *)(a2 + 120))
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            goto LABEL_175;
          }
          goto LABEL_173;
        }
LABEL_196:
        __break(1u);
        goto LABEL_197;
      }
      if (!WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v94 + 8)))
      {
        if (!*(_BYTE *)(a3 + 128))
          goto LABEL_196;
        if (!WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(a3 + 120) + 8)))
        {
          if (!*(_BYTE *)(a3 + 128))
            goto LABEL_170;
          goto LABEL_148;
        }
      }
    }
LABEL_173:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v120) = 33;
    LOBYTE(v122) = 1;
    goto LABEL_175;
  }
  if (*(_BYTE *)(a4 + 32))
  {
    WebCore::fillHeaderMap((WTF::StringImpl *)a1, *(_QWORD *)(a2 + 152) + 8, *(_QWORD *)(a2 + 152) + 40, a4 + 8, *(unsigned __int8 *)(*(_QWORD *)(a2 + 152) + 4));
    goto LABEL_141;
  }
  v46 = *(_QWORD *)(a2 + 152);
  v47 = *(_QWORD *)(a3 + 152);
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v120, v47 + 8, *(WTF::StringImpl **)(v47 + 8), *(_QWORD *)(v47 + 24));
  v109 = v47;
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v127, v47 + 8, (WTF::StringImpl *)(*(_QWORD *)(v47 + 8) + 16 * *(unsigned int *)(v47 + 20)), *(_QWORD *)(v47 + 24) + 16 * *(unsigned int *)(v47 + 36));
  v111 = (WebCore::HTTPHeaderMap *)(v46 + 8);
  while (v121 != v127[1] || v122 != v127[2])
  {
    v48 = *(unsigned __int8 *)(v46 + 4);
    WTF::String::trim();
    WebCore::canWriteHeader((uint64_t)&v115, (WebCore *)&v123, (uint64_t *)&v118, v126, v48);
    v49 = v117;
    if (!v117)
    {
      if ((_BYTE)v115)
      {
        if (v125)
          WebCore::HTTPHeaderMap::add(v111, v124, (uint64_t *)v126);
        else
          WebCore::HTTPHeaderMap::addUncommonHeader(v111, &v123, v126);
        if (v48 == 3)
        {
          v54 = *(unsigned int *)(v46 + 20);
          if ((_DWORD)v54)
          {
            v55 = *(_QWORD *)v111;
            if (**(_WORD **)v111 == 59)
            {
              v56 = 0;
LABEL_70:
              v59 = v55 + 16 * v56;
              v60 = *(WTF::StringImpl **)(v59 + 8);
              *(_QWORD *)(v59 + 8) = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                {
                  WTF::StringImpl::destroy(v60, v53);
                  v54 = *(unsigned int *)(v46 + 20);
                }
                else
                {
                  *(_DWORD *)v60 -= 2;
                }
              }
              v61 = v59 + 16;
              v62 = *(_QWORD *)v111 + 16 * v54;
              while (v61 != v62)
              {
                *(_WORD *)(v61 - 16) = *(_WORD *)v61;
                *(_QWORD *)(v61 - 8) = *(_QWORD *)(v61 + 8);
                *(_QWORD *)(v61 + 8) = 0;
                v61 += 16;
              }
              v52 = 0;
              v51 = 0;
              *(_DWORD *)(v46 + 20) = v54 - 1;
              goto LABEL_77;
            }
            v56 = 0;
            v57 = (unsigned __int16 *)(v55 + 16);
            while (v54 - 1 != v56)
            {
              v58 = *v57;
              v57 += 8;
              ++v56;
              if (v58 == 59)
                goto LABEL_70;
            }
          }
        }
      }
      v52 = 0;
      v51 = 0;
LABEL_77:
      v50 = 1;
      goto LABEL_78;
    }
    if (v117 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_192;
    }
    v50 = 0;
    v51 = (char)v115;
    v52 = v116;
    v116 = 0;
LABEL_78:
    off_1E3355B70[v49]((unsigned __int16 *)&v119, &v115);
    v63 = v118;
    v118 = 0;
    if (!v63)
      goto LABEL_81;
    if (*(_DWORD *)v63 != 2)
    {
      *(_DWORD *)v63 -= 2;
LABEL_81:
      if ((v50 & 1) == 0)
        goto LABEL_97;
      goto LABEL_82;
    }
    WTF::StringImpl::destroy(v63, v34);
    if ((v50 & 1) == 0)
    {
LABEL_97:
      v70 = 0;
      *(_BYTE *)a1 = v51;
      *(_QWORD *)(a1 + 8) = v52;
      *(_BYTE *)(a1 + 16) = 1;
      goto LABEL_122;
    }
LABEL_82:
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)&v120, v34);
  }
  v70 = 1;
LABEL_122:
  v86 = v130;
  v130 = 0;
  v8 = (WebCore::ResourceRequest *)(a2 + 288);
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v34);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = v128;
  v128 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v34);
    else
      *(_DWORD *)v87 -= 2;
  }
  v88 = v126[0];
  v126[0] = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v34);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = v123;
  v123 = 0;
  if (!v89)
  {
LABEL_134:
    if (!v70)
      goto LABEL_141;
    goto LABEL_135;
  }
  if (*(_DWORD *)v89 != 2)
  {
    *(_DWORD *)v89 -= 2;
    goto LABEL_134;
  }
  WTF::StringImpl::destroy(v89, v34);
  if (v70)
  {
LABEL_135:
    v90 = *(unsigned int *)(v109 + 52);
    if ((_DWORD)v90)
    {
      v91 = *(uint64_t **)(v109 + 40);
      v92 = 8 * v90;
      while (1)
      {
        WebCore::appendSetCookie((WTF::StringImpl *)&v120, v91, v46 + 40, *(unsigned __int8 *)(v46 + 4));
        if ((_BYTE)v122)
          break;
        ++v91;
        v92 -= 8;
        if (!v92)
          goto LABEL_139;
      }
      v93 = v121;
      *(_BYTE *)a1 = (_BYTE)v120;
      *(_QWORD *)(a1 + 8) = v93;
      *(_BYTE *)(a1 + 16) = 1;
    }
    else
    {
LABEL_139:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
LABEL_141:
  if (!*(_BYTE *)(a1 + 16))
  {
    *(_QWORD *)(a2 + 632) = 0;
    goto LABEL_143;
  }
}

BOOL WebCore::FetchRequestInit::hasMembers(WebCore::FetchRequestInit *this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    return 1;
  if (*((_BYTE *)this + 32))
    return 1;
  if (*((_BYTE *)this + 56))
    return 1;
  v1 = *((_QWORD *)this + 8);
  if (v1)
  {
    if (*(_DWORD *)(v1 + 4))
      return 1;
  }
  if (*((_BYTE *)this + 73))
    return 1;
  if (*((_BYTE *)this + 75))
    return 1;
  if (*((_BYTE *)this + 77))
    return 1;
  if (*((_BYTE *)this + 79))
    return 1;
  if (*((_BYTE *)this + 81))
    return 1;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 4))
      return 1;
  }
  return *((_BYTE *)this + 97) || *((_QWORD *)this + 15) != 10 || *((_QWORD *)this + 13) != 10;
}

uint64_t WebCore::methodCanHaveBody(WebCore *this, const WebCore::ResourceRequest *a2)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((MEMORY[0x19AEA53F4](*((_QWORD *)this + 11), "GET", 3) & 1) != 0)
    return 0;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return MEMORY[0x19AEA53F4](*((_QWORD *)this + 11), "HEAD", 4) ^ 1;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int8x16_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  uint64_t result;

  if (a2)
  {
    v9 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19532DEC0);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  if (a5)
  {
    v11 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
      goto LABEL_21;
  }
  else
  {
    v11 = 0;
  }
  if (v10)
  {
    v12 = *(_DWORD *)(v10 + 4);
    if (v12 < 0)
    {
LABEL_16:
      *a6 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (v13 || __OFADD__(v9, v14))
    goto LABEL_16;
  v15 = !v10 || (*(_BYTE *)(v10 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v9 + v14, v15, a1, v9, v10, a4, v11, a6);
  if (!*a6)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x19532DE94);
  }
  return result;
}

uint64_t WebCore::FetchRequest::clone@<X0>(WebCore::FetchRequest *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  const void *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t result;
  void *v27;
  int v28;
  bmalloc::api *v29;
  void *v30;
  _DWORD *v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40[2];
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[152];
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  char v49;
  const void *v50;
  uint64_t Headers;
  char v52[8];
  int v53;
  uint64_t v54;
  WTF *v55;
  char v56;

  if (!*((_BYTE *)this + 128))
  {
LABEL_4:
    v5 = WTF::fastMalloc((WTF *)0x290);
    v6 = *((_QWORD *)this + 1);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = (WebCore::ScriptExecutionContext *)(v7 - 96);
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v52[0] = 0;
    v56 = 0;
    v9 = *((_QWORD *)this + 19);
    v10 = WTF::fastMalloc((WTF *)0x40);
    Headers = WebCore::FetchHeaders::FetchHeaders(v10, v9);
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v44, (WebCore::FetchRequest *)((char *)this + 288));
    v11 = (_DWORD *)*((_QWORD *)this + 55);
    if (v11)
      *v11 += 2;
    v45 = v11;
    v12 = (_DWORD *)*((_QWORD *)this + 56);
    if (v12)
      *v12 += 2;
    v46 = v12;
    v13 = (_DWORD *)*((_QWORD *)this + 57);
    if (v13)
      ++*v13;
    v14 = *((_QWORD *)this + 58);
    v47 = v13;
    v48 = v14;
    v49 = *((_BYTE *)this + 472);
    v15 = (const void *)*((_QWORD *)this + 60);
    v50 = v15;
    if (v15)
      CFRetain(v15);
    v40[0] = *((_DWORD *)this + 140);
    *(int *)((char *)v40 + 3) = *(_DWORD *)((char *)this + 563);
    v16 = (WTF::StringImpl *)*((_QWORD *)this + 71);
    if (v16)
      *(_DWORD *)v16 += 2;
    v41 = v16;
    v17 = *((_OWORD *)this + 37);
    v42 = *((_OWORD *)this + 36);
    v43 = v17;
    v18 = (WTF::StringImpl *)*((_QWORD *)this + 77);
    if (v18)
      *(_DWORD *)v18 += 2;
    v39 = v18;
    WebCore::FetchRequest::FetchRequest(v5, v8, (uint64_t)v52, &Headers, (uint64_t)v44, v40, (uint64_t *)&v39);
    v20 = v39;
    v39 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v41;
    v41 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v44, v19);
    v23 = Headers;
    Headers = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        v32 = *(unsigned int *)(v23 + 52);
        if ((_DWORD)v32)
        {
          v35 = *(WTF::StringImpl ***)(v23 + 40);
          v36 = 8 * v32;
          do
          {
            v37 = *v35;
            *v35 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
              {
                v38 = v36;
                WTF::StringImpl::destroy(v37, v22);
                v36 = v38;
              }
              else
              {
                *(_DWORD *)v37 -= 2;
              }
            }
            ++v35;
            v36 -= 8;
          }
          while (v36);
        }
        v33 = *(WTF **)(v23 + 40);
        if (v33)
        {
          *(_QWORD *)(v23 + 40) = 0;
          *(_DWORD *)(v23 + 48) = 0;
          WTF::fastFree(v33, v22);
        }
        WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v23 + 8), v22);
        WTF::fastFree((WTF *)v23, v34);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    if (v56)
    {
      v24 = v55;
      v55 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
        {
          v31 = (_DWORD *)*((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = 0;
          if (v31)
          {
            if (v31[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
            else
              --v31[4];
          }
          WTF::fastFree(v24, v22);
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
      WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v54, v22);
      if (v53 != -1)
        ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v53])(v44, v52);
    }
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v5);
    WebCore::FetchBodyOwner::cloneBody((WebCore::FetchBodyOwner *)v5, this);
    *(_QWORD *)(v5 + 632) = *((_QWORD *)this + 79);
    *(_BYTE *)(v5 + 640) = *((_BYTE *)this + 640);
    v25 = *(_QWORD *)(v5 + 624);
    ++*(_DWORD *)(v25 + 24);
    result = (uint64_t)WebCore::AbortSignal::signalFollow((_BYTE *)v25, *((WebCore::AbortSignal **)this + 78));
    if (*(_DWORD *)(v25 + 24) == 1)
    {
      WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v25, v27);
      result = bmalloc::api::isoDeallocate(v29, v30);
    }
    else
    {
      --*(_DWORD *)(v25 + 24);
    }
    v28 = 0;
    *(_QWORD *)a2 = v5;
    goto LABEL_38;
  }
  if (*((_BYTE *)this + 136))
    goto LABEL_54;
  v4 = *((_QWORD *)this + 15);
  if (!v4)
    goto LABEL_4;
  result = WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v4 + 8));
  if ((result & 1) != 0)
  {
LABEL_54:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 33;
    v28 = 1;
LABEL_38:
    *(_DWORD *)(a2 + 16) = v28;
    return result;
  }
  if (*((_BYTE *)this + 128))
  {
    if (!WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*((_QWORD *)this + 15) + 8)))
      goto LABEL_4;
    goto LABEL_54;
  }
  __break(1u);
  return result;
}

WebCore::UserGestureToken *WebCore::FetchRequest::stop(WebCore::FetchRequest *this)
{
  void *v2;
  WebCore::UserGestureToken *result;
  uint64_t v4;
  WebCore::FetchBodyConsumer *v5;

  WebCore::URLKeepingBlobAlive::clear((WebCore::FetchRequest *)((char *)this + 488));
  result = (WebCore::UserGestureToken *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 8) == 1)
      result = (WebCore::UserGestureToken *)(*(uint64_t (**)(WebCore::UserGestureToken *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 8);
  }
  if (*((_BYTE *)this + 128))
    result = WebCore::FetchBodyConsumer::clean((WebCore::FetchRequest *)((char *)this + 56), v2);
  if (*((_BYTE *)this + 184))
  {
    v4 = *((_QWORD *)this + 22);
    if (v4)
    {
      v5 = *(WebCore::FetchBodyConsumer **)(v4 + 40);
      if (v5)
        WebCore::FetchBodyConsumer::clean(v5, v2);
      result = *(WebCore::UserGestureToken **)(v4 + 32);
      if (result)
        return (WebCore::UserGestureToken *)(*(uint64_t (**)(WebCore::UserGestureToken *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::FetchResponse::create(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WebCore::ContextDestructionObserver *BodyOwner;
  WebCore::ResourceResponseBase *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  CFTypeRef v34;
  const void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  CFTypeRef v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[19];
  CFTypeRef cf;
  char v82;
  uint64_t v83;

  v10 = *(_BYTE *)(a4 + 234);
  v11 = *(_WORD *)(a4 + 232) & 0x300;
  if (v11 == 512)
  {
    v12 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v12 = 1;
    *(_BYTE *)(v12 + 4) = a3;
    v62 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    v63 = 0u;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)&v64 = 0;
    *(_QWORD *)(v12 + 52) = 0;
    *(_QWORD *)(v12 + 44) = 0;
    *(_DWORD *)(v12 + 60) = 0;
    *(_QWORD *)(v12 + 36) = 0;
    v83 = v12;
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v62, v13);
    goto LABEL_15;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 2);
  v14 = *(unsigned int *)(a4 + 92);
  if ((_DWORD)v14)
  {
    if (v14 >> 28)
      goto LABEL_52;
    v15 = WTF::fastMalloc((WTF *)(16 * v14));
    v16 = v15;
    v17 = *(unsigned int *)(a4 + 92);
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = *(_QWORD *)(a4 + 80);
      v20 = v19 + 16 * v17;
      do
      {
        v21 = v19 + v18;
        *(_WORD *)(v15 + v18) = *(_WORD *)(v19 + v18);
        v22 = *(_DWORD **)(v19 + v18 + 8);
        if (v22)
          *v22 += 2;
        *(_QWORD *)(v15 + v18 + 8) = v22;
        v18 += 16;
      }
      while (v21 + 16 != v20);
    }
  }
  else
  {
    v16 = 0;
  }
  v61 = v11;
  v23 = *(unsigned int *)(a4 + 108);
  if ((_DWORD)v23)
  {
    if (!(v23 >> 28))
    {
      v24 = a5;
      v46 = WTF::fastMalloc((WTF *)(16 * v23));
      v25 = v46;
      v47 = *(unsigned int *)(a4 + 108);
      if ((_DWORD)v47)
      {
        v48 = 0;
        v49 = *(_QWORD *)(a4 + 96);
        v50 = v49 + 16 * v47;
        do
        {
          v51 = v49 + v48;
          v52 = *(_DWORD **)(v49 + v48);
          if (v52)
            *v52 += 2;
          *(_QWORD *)(v46 + v48) = v52;
          v53 = *(_DWORD **)(v51 + 8);
          if (v53)
            *v53 += 2;
          *(_QWORD *)(v46 + v48 + 8) = v53;
          v48 += 16;
        }
        while (v51 + 16 != v50);
      }
      goto LABEL_14;
    }
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x19532E7F0);
  }
  v24 = a5;
  v25 = 0;
LABEL_14:
  v26 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v26 = 1;
  *(_BYTE *)(v26 + 4) = a3;
  v62 = 0;
  *(_QWORD *)(v26 + 8) = v16;
  *(_QWORD *)&v63 = 0;
  *(_DWORD *)(v26 + 16) = v14;
  *(_DWORD *)(v26 + 20) = v14;
  *((_QWORD *)&v63 + 1) = 0;
  *(_QWORD *)(v26 + 24) = v25;
  *(_QWORD *)&v64 = 0;
  *(_DWORD *)(v26 + 32) = v23;
  *(_DWORD *)(v26 + 36) = v23;
  *(_QWORD *)(v26 + 48) = 0;
  *(_QWORD *)(v26 + 56) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  v83 = v26;
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v62, v27);
  a5 = v24;
  v11 = v61;
LABEL_15:
  v28 = WTF::fastMalloc((WTF *)0x3E0);
  BodyOwner = WebCore::FetchBodyOwner::FetchBodyOwner((WebCore::ContextDestructionObserver *)v28, a1, a2, &v83);
  *(_QWORD *)BodyOwner = &off_1E3355D80;
  *((_BYTE *)BodyOwner + 288) = 0;
  *((_BYTE *)BodyOwner + 544) = 0;
  v30 = (WebCore::ContextDestructionObserver *)((char *)BodyOwner + 552);
  WebCore::ResourceResponseBase::ResourceResponseBase((uint64_t)BodyOwner + 552, (uint64_t *)a4);
  v31 = *(_QWORD *)(a4 + 240);
  *(_QWORD *)(a4 + 240) = 0;
  *(_QWORD *)(v28 + 792) = v31;
  *(_BYTE *)(v28 + 800) = *(_BYTE *)(a4 + 248);
  *(_DWORD *)(v28 + 952) = 0;
  *(_OWORD *)(v28 + 920) = 0u;
  *(_OWORD *)(v28 + 936) = 0u;
  *(_OWORD *)(v28 + 888) = 0u;
  *(_OWORD *)(v28 + 904) = 0u;
  *(_OWORD *)(v28 + 856) = 0u;
  *(_OWORD *)(v28 + 872) = 0u;
  *(_OWORD *)(v28 + 824) = 0u;
  *(_OWORD *)(v28 + 840) = 0u;
  *(_OWORD *)(v28 + 808) = 0u;
  *(_QWORD *)(v28 + 968) = -1;
  *(_QWORD *)(v28 + 960) = -1;
  *(_DWORD *)(v28 + 983) = 0;
  *(_QWORD *)(v28 + 976) = 0;
  *(_QWORD *)a5 = v28;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v28);
  if ((v10 & 6) == 2)
    goto LABEL_24;
  WebCore::ResourceResponseBase::filter(v30, 1, (uint64_t)&v62);
  if (*(_BYTE *)(v28 + 544))
  {
    WebCore::ResourceResponseBase::operator=(v28 + 288, &v62);
    v34 = cf;
    cf = 0;
    v35 = *(const void **)(v28 + 528);
    *(_QWORD *)(v28 + 528) = v34;
    if (v35)
    {
      CFRelease(v35);
      v60 = cf;
      *(_BYTE *)(v28 + 536) = v82;
      cf = 0;
      if (v60)
        CFRelease(v60);
      goto LABEL_23;
    }
    *(_BYTE *)(v28 + 536) = v82;
  }
  else
  {
    v36 = v62;
    v62 = 0;
    *(_QWORD *)(v28 + 288) = v36;
    v37 = v63;
    *(_OWORD *)(v28 + 296) = v63;
    *(_OWORD *)(v28 + 312) = v64;
    LODWORD(v63) = v37 & 0xFFFFFFFE;
    v38 = v65;
    v39 = v66;
    v65 = 0;
    *(_QWORD *)(v28 + 328) = v38;
    *(_QWORD *)(v28 + 336) = v39;
    v40 = v67;
    v67 = 0u;
    *(_OWORD *)(v28 + 344) = v40;
    v41 = v68;
    v68 = 0u;
    *(_OWORD *)(v28 + 360) = v41;
    *(_QWORD *)&v41 = v69;
    v69 = 0;
    *(_QWORD *)(v28 + 376) = v41;
    v42 = v70;
    v70 = 0;
    *(_QWORD *)(v28 + 384) = v42;
    *(_QWORD *)&v41 = v71;
    v71 = 0;
    *(_QWORD *)(v28 + 392) = v41;
    v43 = v72;
    v72 = 0;
    *(_QWORD *)(v28 + 400) = v43;
    *(_BYTE *)(v28 + 408) = 0;
    *(_BYTE *)(v28 + 416) = 0;
    if (v74)
    {
      v44 = v73;
      v73 = 0;
      *(_QWORD *)(v28 + 408) = v44;
      *(_BYTE *)(v28 + 416) = 1;
    }
    *(_OWORD *)(v28 + 472) = v78;
    *(_OWORD *)(v28 + 488) = v79;
    *(_OWORD *)(v28 + 504) = *(_OWORD *)v80;
    *(_DWORD *)(v28 + 519) = *(_DWORD *)&v80[15];
    *(_OWORD *)(v28 + 424) = v75;
    *(_OWORD *)(v28 + 440) = v76;
    *(_OWORD *)(v28 + 456) = v77;
    *(_QWORD *)(v28 + 528) = cf;
    *(_BYTE *)(v28 + 536) = v82;
    *(_BYTE *)(v28 + 544) = 1;
  }
  cf = 0;
LABEL_23:
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v62, v33);
LABEL_24:
  if (v11 == 512)
    *(_BYTE *)(*(_QWORD *)a5 + 192) = 1;
  v45 = v83;
  if (v83)
  {
    if (*(_DWORD *)v83 == 1)
    {
      v54 = *(unsigned int *)(v83 + 52);
      if ((_DWORD)v54)
      {
        v57 = *(WTF::StringImpl ***)(v83 + 40);
        v58 = 8 * v54;
        do
        {
          v59 = *v57;
          *v57 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v32);
            else
              *(_DWORD *)v59 -= 2;
          }
          ++v57;
          v58 -= 8;
        }
        while (v58);
      }
      v55 = *(WTF **)(v45 + 40);
      if (v55)
      {
        *(_QWORD *)(v45 + 40) = 0;
        *(_DWORD *)(v45 + 48) = 0;
        WTF::fastFree(v55, v32);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v45 + 8), v32);
      WTF::fastFree((WTF *)v45, v56);
    }
    else
    {
      --*(_DWORD *)v83;
    }
  }
}

void WebCore::FetchResponse::create(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, unsigned __int16 *a4)
{
  char v5;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD **v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  char v74;
  __int16 v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  void *v83;
  _DWORD *v84;
  WTF::StringImpl **v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char v98;
  _BYTE v99[64];
  __int128 v100;
  _BYTE v101[19];
  uint64_t v102;
  char v103;
  _DWORD *v104;
  _BYTE v105[8];
  int v106;
  int v107;
  __int128 v108;
  __int128 v109;
  char v110;
  __int128 v111;
  uint64_t *v112;
  char v113;
  uint64_t v114;

  if (*a4 - 600 <= 0xFFFFFE6F)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 32;
LABEL_24:
    *(_BYTE *)a1 = v5;
    *(_DWORD *)(a1 + 16) = 1;
    return;
  }
  v9 = *((_QWORD *)a4 + 1);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 4);
    if ((_DWORD)v10)
    {
      v11 = *(unsigned __int16 **)(v9 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      {
        while (1)
        {
          v13 = *(unsigned __int8 *)v11;
          v11 = (unsigned __int16 *)((char *)v11 + 1);
          v12 = v13;
          if (v13 == 127)
            break;
          if (v12 <= 0x1F && v12 != 9)
            break;
          if (!--v10)
            goto LABEL_13;
        }
      }
      else
      {
        while (1)
        {
          v24 = *v11++;
          v23 = v24;
          if (v24 == 127 || v23 > 0xFF)
            break;
          if (v23 <= 0x1F && v23 != 9)
            break;
          if (!--v10)
            goto LABEL_13;
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5 = 33;
      goto LABEL_24;
    }
  }
LABEL_13:
  v90 = 0uLL;
  *(_QWORD *)&v91 = 0;
  v15 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = 0;
  v16 = (WTF::StringImpl *)(v15 + 8);
  *(_BYTE *)(v15 + 4) = 4;
  v89 = 0;
  v17 = v90;
  *(_QWORD *)&v90 = 0;
  *(_QWORD *)(v15 + 16) = v17;
  v18 = *((_QWORD *)&v90 + 1);
  *((_QWORD *)&v90 + 1) = 0;
  *(_QWORD *)(v15 + 24) = v18;
  v19 = v91;
  *(_QWORD *)&v91 = 0;
  *(_QWORD *)(v15 + 32) = v19;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  v114 = v15;
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v89, v20);
  if (*((_BYTE *)a4 + 40))
  {
    WebCore::fillHeaderMap((WTF::StringImpl *)&v89, (uint64_t)v16, v15 + 40, (uint64_t)(a4 + 8), *(unsigned __int8 *)(v15 + 4));
    if (BYTE8(v90))
    {
      v22 = v90;
      *(_BYTE *)a1 = (_BYTE)v89;
      *(_QWORD *)(a1 + 8) = v22;
      *(_DWORD *)(a1 + 16) = 1;
      v114 = 0;
LABEL_96:
      if (*(_DWORD *)v15 == 1)
      {
        v81 = *(unsigned int *)(v15 + 52);
        if ((_DWORD)v81)
        {
          v85 = *(WTF::StringImpl ***)(v15 + 40);
          v86 = 8 * v81;
          do
          {
            v87 = *v85;
            *v85 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 2)
                WTF::StringImpl::destroy(v87, v21);
              else
                *(_DWORD *)v87 -= 2;
            }
            ++v85;
            v86 -= 8;
          }
          while (v86);
        }
        v82 = *(WTF **)(v15 + 40);
        if (v82)
        {
          *(_QWORD *)(v15 + 40) = 0;
          *(_DWORD *)(v15 + 48) = 0;
          WTF::fastFree(v82, v21);
        }
        WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v15 + 8), v21);
        WTF::fastFree((WTF *)v15, v83);
      }
      else
      {
        --*(_DWORD *)v15;
      }
      return;
    }
  }
  v105[0] = 0;
  v113 = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    v26 = *a4;
    if ((v26 - 204) < 2 || v26 == 304 || v26 == 101)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a1 = 33;
      *(_DWORD *)(a1 + 16) = 1;
      goto LABEL_89;
    }
    v106 = -1;
    v27 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v27 == -1)
    {
      v28 = 1;
    }
    else
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33559F8[v27])(&v89, v105, a3);
      v106 = v27;
      v28 = *(unsigned __int8 *)(a3 + 96);
    }
    v107 = *(_DWORD *)(a3 + 16);
    v29 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a3 + 24) = 0u;
    v108 = v29;
    v30 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a3 + 40) = 0u;
    v109 = v30;
    v110 = *(_BYTE *)(a3 + 56);
    v31 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a3 + 64) = 0u;
    v111 = v31;
    v32 = *(uint64_t **)(a3 + 80);
    *(_QWORD *)(a3 + 80) = 0;
    v112 = v32;
    v113 = 1;
    if (!v28)
    {
      __break(1u);
      goto LABEL_126;
    }
    v34 = *(_QWORD *)(a3 + 88);
    v33 = (WTF::StringImpl **)(a3 + 88);
    if (v34)
    {
      v35 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v35)
      {
        v36 = *(unsigned __int16 **)v16;
        while (1)
        {
          v37 = *v36;
          v36 += 8;
          if (v37 == 26)
            break;
          if (!--v35)
            goto LABEL_40;
        }
      }
      else
      {
LABEL_40:
        WebCore::HTTPHeaderMap::set(v16, (WTF::StringImpl *)0x1A, v33);
      }
    }
  }
  v38 = *(unsigned int *)(v15 + 20);
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = (_DWORD **)(*(_QWORD *)v16 + 8);
    while (*((_WORD *)v40 - 4) != 26)
    {
      ++v39;
      v40 += 2;
      if (v38 == v39)
        goto LABEL_45;
    }
    if (v39 >= v38)
      goto LABEL_127;
    v41 = *v40;
    if (*v40)
      *v41 += 2;
  }
  else
  {
LABEL_45:
    v41 = 0;
  }
  v104 = v41;
  v15 = WTF::fastMalloc((WTF *)0x3E0);
  v89 = 0;
  WTF::URL::invalidate((WTF::URL *)&v89);
  v98 = 0;
  *(_WORD *)v99 = 0;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  LOBYTE(v97) = 0;
  *(int64x2_t *)&v99[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v99[24] = *(_OWORD *)&v99[8];
  *(_OWORD *)&v99[40] = 0u;
  v100 = *(_OWORD *)&v99[8];
  *(_QWORD *)&v99[56] = 0x8000000000000000;
  *(_QWORD *)v101 = 0x7FF8000000000000;
  v101[8] &= 0xF0u;
  *(_WORD *)&v101[16] &= 0xC000u;
  v101[18] = v101[18] & 0xF8 | 2;
  v102 = 0;
  v103 = 0;
  v99[2] = v99[2] & 0xC0 | 5;
  WebCore::FetchBodyOwner::FetchBodyOwner((WebCore::ContextDestructionObserver *)v15, a2, (uint64_t)v105, &v114);
  *(_QWORD *)v15 = &off_1E3355D80;
  *(_BYTE *)(v15 + 288) = 0;
  *(_BYTE *)(v15 + 544) = 0;
  *(_QWORD *)(v15 + 552) = v89;
  v43 = v90;
  LODWORD(v90) = v90 & 0xFFFFFFFE;
  v44 = *((_QWORD *)&v92 + 1);
  *(_QWORD *)(v15 + 592) = v92;
  a2 = (WebCore::ScriptExecutionContext *)(v15 + 552);
  v89 = 0;
  v45 = v91;
  *(_OWORD *)(v15 + 560) = v43;
  *(_OWORD *)(v15 + 576) = v45;
  *(_QWORD *)&v92 = 0;
  *(_QWORD *)(v15 + 600) = v44;
  v46 = v93;
  v93 = 0u;
  v47 = v94;
  v94 = 0u;
  *(_OWORD *)(v15 + 608) = v46;
  *(_OWORD *)(v15 + 624) = v47;
  *(_QWORD *)&v47 = v95;
  *(_QWORD *)&v95 = 0;
  *(_QWORD *)(v15 + 640) = v47;
  v48 = *((_QWORD *)&v95 + 1);
  *((_QWORD *)&v95 + 1) = 0;
  *(_QWORD *)(v15 + 648) = v48;
  *(_QWORD *)&v47 = v96;
  *(_QWORD *)&v96 = 0;
  *(_QWORD *)(v15 + 656) = v47;
  v49 = *((_QWORD *)&v96 + 1);
  *((_QWORD *)&v96 + 1) = 0;
  *(_QWORD *)(v15 + 664) = v49;
  *(_BYTE *)(v15 + 672) = 0;
  *(_BYTE *)(v15 + 680) = 0;
  if (v98)
  {
    v50 = v97;
    v97 = 0;
    *(_QWORD *)(v15 + 672) = v50;
    *(_BYTE *)(v15 + 680) = 1;
  }
  v51 = *(_OWORD *)v101;
  *(_OWORD *)(v15 + 752) = v100;
  *(_OWORD *)(v15 + 768) = v51;
  *(_DWORD *)(v15 + 783) = *(_DWORD *)&v101[15];
  v52 = *(_OWORD *)&v99[16];
  *(_OWORD *)(v15 + 688) = *(_OWORD *)v99;
  *(_OWORD *)(v15 + 704) = v52;
  v53 = *(_OWORD *)&v99[48];
  *(_OWORD *)(v15 + 720) = *(_OWORD *)&v99[32];
  *(_OWORD *)(v15 + 736) = v53;
  *(_QWORD *)(v15 + 792) = v102;
  *(_BYTE *)(v15 + 800) = v103;
  *(_OWORD *)(v15 + 808) = 0uLL;
  *(_OWORD *)(v15 + 824) = 0uLL;
  *(_OWORD *)(v15 + 840) = 0uLL;
  *(_OWORD *)(v15 + 856) = 0uLL;
  *(_OWORD *)(v15 + 872) = 0uLL;
  *(_OWORD *)(v15 + 888) = 0uLL;
  *(_OWORD *)(v15 + 904) = 0uLL;
  *(_OWORD *)(v15 + 920) = 0uLL;
  *(_OWORD *)(v15 + 936) = 0uLL;
  *(_DWORD *)(v15 + 952) = 0;
  *(_QWORD *)(v15 + 960) = -1;
  *(_QWORD *)(v15 + 968) = -1;
  *(_QWORD *)(v15 + 976) = 0;
  *(_DWORD *)(v15 + 983) = 0;
  v102 = 0;
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v89, v42);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v15);
  WebCore::extractMIMETypeFromMediaType((WebCore *)&v104, &v89);
  v54 = v89;
  if (!v89 || !*((_DWORD *)v89 + 1))
  {
    v32 = &qword_1EE2F8000;
    {
      v54 = (WTF::StringImpl *)WebCore::defaultMIMEType(void)::defaultMIMEType;
      if (!WebCore::defaultMIMEType(void)::defaultMIMEType)
        goto LABEL_56;
      v55 = *(_DWORD *)WebCore::defaultMIMEType(void)::defaultMIMEType;
      goto LABEL_55;
    }
LABEL_126:
    v54 = (WTF::StringImpl *)&WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl;
    v55 = WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::defaultMIMEType(void)::defaultMIMEType = (uint64_t)&WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl;
    *((_BYTE *)v32 + 1272) = 1;
LABEL_55:
    *(_DWORD *)v54 = v55 + 2;
    goto LABEL_56;
  }
  v89 = 0;
LABEL_56:
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  *(_BYTE *)(v15 + 690) &= ~1u;
  v57 = *(WTF::StringImpl **)(v15 + 592);
  *(_QWORD *)(v15 + 592) = v54;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v104;
  if (v104)
  {
    v59 = *((_QWORD *)v104 + 1);
    v58 = v104[1];
    v60 = ((unint64_t)v104[4] >> 2) & 1;
  }
  else
  {
    v59 = 0;
    v60 = 1;
  }
  WebCore::extractCharsetFromMediaType(v59, v58 | (v60 << 32));
  if ((v61 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  *(_BYTE *)(v15 + 690) &= ~1u;
  v63 = *(WTF::StringImpl **)(v15 + 608);
  *(_QWORD *)(v15 + 608) = v88;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v62);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = *(_QWORD *)(v15 + 152);
  v65 = *(unsigned int *)(v64 + 20);
  if ((_DWORD)v65)
  {
    v66 = 0;
    v67 = (_QWORD *)(*(_QWORD *)(v64 + 8) + 8);
    while (*((_WORD *)v67 - 4) != 21)
    {
      ++v66;
      v67 += 2;
      if (v65 == v66)
      {
        v68 = 0;
        goto LABEL_71;
      }
    }
    if (v66 < v65)
    {
      v68 = *v67;
      if (*v67)
      {
        v71 = 0;
        LODWORD(v65) = *(_DWORD *)(v68 + 4);
        *(_DWORD *)v68 += 2;
        v69 = *(_QWORD *)(v68 + 8);
        v70 = ((unint64_t)*(unsigned int *)(v68 + 16) >> 2) & 1;
      }
      else
      {
LABEL_71:
        v69 = 0;
        LODWORD(v65) = 0;
        v70 = 1;
        v71 = 1;
      }
      goto LABEL_75;
    }
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x19532F144);
  }
  v68 = 0;
  v69 = 0;
  v71 = 1;
  v70 = 1;
LABEL_75:
  v73 = WebCore::parseContentLength(v69, v65 | (v70 << 32));
  v74 = (char)v72;
  if ((v71 & 1) == 0)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v68, v72);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (v74)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
    *(_BYTE *)(v15 + 690) &= ~1u;
    *(_QWORD *)(v15 + 600) = v73;
  }
  v75 = *a4;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  *(_WORD *)(v15 + 688) = v75;
  *(_BYTE *)(v15 + 690) &= ~1u;
  v76 = *((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = 0;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 2);
  v77 = *(WTF::StringImpl **)(v15 + 616);
  *(_QWORD *)(v15 + 616) = v76;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v21);
    else
      *(_DWORD *)v77 -= 2;
  }
  *(_QWORD *)a1 = v15;
  *(_DWORD *)(a1 + 16) = 0;
  v78 = v89;
  v89 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v21);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = (WTF::StringImpl *)v104;
  v104 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v21);
    else
      *(_DWORD *)v79 -= 2;
  }
LABEL_89:
  if (v113)
  {
    v80 = (WTF *)v112;
    v112 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
      {
        v84 = (_DWORD *)*((_QWORD *)v80 + 1);
        *((_QWORD *)v80 + 1) = 0;
        if (v84)
        {
          if (v84[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 16))(v84);
          else
            --v84[4];
        }
        WTF::fastFree(v80, v21);
      }
      else
      {
        --*(_DWORD *)v80;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v107, v21);
    if (v106 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v106])(&v89, v105);
  }
  v15 = v114;
  v114 = 0;
  if (v15)
    goto LABEL_96;
}

uint64_t WebCore::FetchResponse::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  WTF *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WebCore::FetchResponse *v24;
  WebCore::ScriptExecutionContext *v25;
  char v26[8];
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  WTF *v33;
  WTF::StringImpl *v34;
  char v35[8];
  uint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  char v39[8];
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  char v44;
  __int128 v45;
  WTF *v46;
  WTF::StringImpl *v47;
  char v48;
  char v49;

  v39[0] = 0;
  v48 = 0;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_24;
  v38 = 0;
  WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>&&)::$_6>((uint64_t)v35, a2, (uint64_t)&v38, (uint64_t)&v38, (uint64_t)&v38, (uint64_t)&v38);
  v7 = v37;
  if (!v37)
  {
    WebCore::ExceptionOr<WebCore::FetchBody>::releaseReturnValue((uint64_t)v35, (uint64_t)v26);
    v11 = v38;
    v38 = 0;
    v34 = v11;
    if (v48)
    {
      WebCore::FetchBody::operator=((uint64_t)v39, (uint64_t)v26);
      v12 = v34;
      v34 = 0;
      v13 = v47;
      v47 = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v10);
          v23 = v34;
          v34 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
LABEL_13:
          v18 = v33;
          v33 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 1)
            {
              v22 = (_DWORD *)*((_QWORD *)v18 + 1);
              *((_QWORD *)v18 + 1) = 0;
              if (v22)
              {
                if (v22[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
                else
                  --v22[4];
              }
              WTF::fastFree(v18, v10);
            }
            else
            {
              --*(_DWORD *)v18;
            }
          }
          WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v28, v10);
          if (v27 != -1)
            ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v27])(&v49, v26);
          v9 = v37;
          if (v37 == -1)
            goto LABEL_20;
          goto LABEL_19;
        }
        *(_DWORD *)v13 -= 2;
      }
    }
    else
    {
      v39[0] = 0;
      v40 = -1;
      v14 = v27;
      if (v27 != -1)
      {
        ((void (*)(char *, char *, char *))off_1E33559F8[v27])(&v49, v39, v26);
        v40 = v14;
        v11 = v34;
      }
      v41 = v28;
      v42 = v29;
      v15 = v30;
      v29 = 0u;
      v30 = 0u;
      v43 = v15;
      v44 = v31;
      v16 = v32;
      v32 = 0u;
      v45 = v16;
      v17 = v33;
      v33 = 0;
      v46 = v17;
      v47 = v11;
      v48 = 1;
    }
    v34 = 0;
    goto LABEL_13;
  }
  if (v37 == 1)
  {
    v8 = v36;
    v36 = 0;
    *(_BYTE *)a4 = v35[0];
    *(_QWORD *)(a4 + 8) = v8;
    v9 = 1;
    *(_DWORD *)(a4 + 16) = 1;
LABEL_19:
    ((void (*)(char *, char *))off_1E3355B50[v9])(v26, v35);
LABEL_20:
    v20 = v38;
    v38 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v19);
        if (v7)
          return std::__optional_destruct_base<WebCore::FetchBodyWithType,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v19);
        goto LABEL_24;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v7)
      return std::__optional_destruct_base<WebCore::FetchBodyWithType,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v19);
LABEL_24:
    WebCore::FetchResponse::create(a4, a1, (uint64_t)v39, a3);
    return std::__optional_destruct_base<WebCore::FetchBodyWithType,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v19);
  }
  v24 = (WebCore::FetchResponse *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::FetchResponse::error(v24, v25);
}

_QWORD *WebCore::FetchResponse::error@<X0>(WebCore::FetchResponse *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  _QWORD *result;
  _DWORD *v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  _BYTE v41[64];
  __int128 v42;
  _BYTE v43[19];
  uint64_t v44;
  char v45;
  _QWORD v46[4];
  uint64_t v47;
  char v48[8];
  int v49;
  uint64_t v50;
  WTF *v51;
  char v52;

  v5 = WTF::fastMalloc((WTF *)0x3E0);
  v48[0] = 0;
  v52 = 0;
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 4) = 1;
  v46[0] = 0;
  *(_OWORD *)(v6 + 8) = 0u;
  v46[1] = 0;
  v46[2] = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  v46[3] = 0;
  *(_OWORD *)(v6 + 44) = 0u;
  *(_DWORD *)(v6 + 60) = 0;
  *(_QWORD *)(v6 + 36) = 0;
  v47 = v6;
  v31 = 0;
  WTF::URL::invalidate((WTF::URL *)&v31);
  v40 = 0;
  *(_WORD *)v41 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  LOBYTE(v39) = 0;
  *(int64x2_t *)&v41[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v41[24] = *(_OWORD *)&v41[8];
  *(_OWORD *)&v41[40] = 0u;
  *(_QWORD *)&v41[56] = 0x8000000000000000;
  v42 = *(_OWORD *)&v41[8];
  *(_QWORD *)v43 = 0x7FF8000000000000;
  v43[8] &= 0xF0u;
  *(_WORD *)&v43[16] &= 0xC000u;
  v43[18] = v43[18] & 0xF8 | 2;
  v44 = 0;
  v45 = 0;
  v41[2] = v41[2] & 0xC0 | 5;
  WebCore::FetchBodyOwner::FetchBodyOwner((WebCore::ContextDestructionObserver *)v5, this, (uint64_t)v48, &v47);
  *(_QWORD *)v5 = &off_1E3355D80;
  *(_QWORD *)(v5 + 552) = v31;
  v8 = v32;
  v9 = v33;
  LODWORD(v32) = v32 & 0xFFFFFFFE;
  v10 = *((_QWORD *)&v34 + 1);
  *(_QWORD *)(v5 + 592) = v34;
  *(_BYTE *)(v5 + 288) = 0;
  *(_BYTE *)(v5 + 544) = 0;
  v31 = 0;
  *(_OWORD *)(v5 + 560) = v8;
  *(_OWORD *)(v5 + 576) = v9;
  *(_QWORD *)&v34 = 0;
  *(_QWORD *)(v5 + 600) = v10;
  v11 = v35;
  v12 = v36;
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)(v5 + 608) = v11;
  *(_OWORD *)(v5 + 624) = v12;
  *(_QWORD *)&v11 = v37;
  *(_QWORD *)&v37 = 0;
  *(_QWORD *)(v5 + 640) = v11;
  v13 = *((_QWORD *)&v37 + 1);
  *((_QWORD *)&v37 + 1) = 0;
  *(_QWORD *)(v5 + 648) = v13;
  *(_QWORD *)&v11 = v38;
  *(_QWORD *)&v38 = 0;
  *(_QWORD *)(v5 + 656) = v11;
  v14 = *((_QWORD *)&v38 + 1);
  *((_QWORD *)&v38 + 1) = 0;
  *(_QWORD *)(v5 + 664) = v14;
  *(_BYTE *)(v5 + 672) = 0;
  *(_BYTE *)(v5 + 680) = 0;
  if (v40)
  {
    v15 = v39;
    v39 = 0;
    *(_QWORD *)(v5 + 672) = v15;
    *(_BYTE *)(v5 + 680) = 1;
  }
  v16 = *(_OWORD *)v43;
  *(_OWORD *)(v5 + 752) = v42;
  *(_OWORD *)(v5 + 768) = v16;
  *(_DWORD *)(v5 + 783) = *(_DWORD *)&v43[15];
  v17 = *(_OWORD *)&v41[16];
  *(_OWORD *)(v5 + 688) = *(_OWORD *)v41;
  *(_OWORD *)(v5 + 704) = v17;
  v18 = *(_OWORD *)&v41[48];
  *(_OWORD *)(v5 + 720) = *(_OWORD *)&v41[32];
  *(_OWORD *)(v5 + 736) = v18;
  *(_QWORD *)(v5 + 792) = v44;
  *(_BYTE *)(v5 + 800) = v45;
  *(_OWORD *)(v5 + 808) = 0uLL;
  *(_OWORD *)(v5 + 824) = 0uLL;
  *(_OWORD *)(v5 + 840) = 0uLL;
  *(_OWORD *)(v5 + 856) = 0uLL;
  *(_OWORD *)(v5 + 872) = 0uLL;
  *(_OWORD *)(v5 + 888) = 0uLL;
  *(_OWORD *)(v5 + 904) = 0uLL;
  *(_OWORD *)(v5 + 920) = 0uLL;
  *(_OWORD *)(v5 + 936) = 0uLL;
  *(_DWORD *)(v5 + 952) = 0;
  *(_QWORD *)(v5 + 960) = -1;
  *(_QWORD *)(v5 + 968) = -1;
  *(_QWORD *)(v5 + 976) = 0;
  *(_DWORD *)(v5 + 983) = 0;
  *a2 = v5;
  v44 = 0;
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v31, v7);
  v20 = v47;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
    {
      v25 = *(unsigned int *)(v47 + 52);
      if ((_DWORD)v25)
      {
        v28 = *(WTF::StringImpl ***)(v47 + 40);
        v29 = 8 * v25;
        do
        {
          v30 = *v28;
          *v28 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v19);
            else
              *(_DWORD *)v30 -= 2;
          }
          ++v28;
          v29 -= 8;
        }
        while (v29);
      }
      v26 = *(WTF **)(v20 + 40);
      if (v26)
      {
        *(_QWORD *)(v20 + 40) = 0;
        *(_DWORD *)(v20 + 48) = 0;
        WTF::fastFree(v26, v19);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v20 + 8), v19);
      WTF::fastFree((WTF *)v20, v27);
    }
    else
    {
      --*(_DWORD *)v47;
    }
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v46, v19);
  if (v52)
  {
    v22 = v51;
    v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        v24 = (_DWORD *)*((_QWORD *)v22 + 1);
        *((_QWORD *)v22 + 1) = 0;
        if (v24)
        {
          if (v24[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
          else
            --v24[4];
        }
        WTF::fastFree(v22, v21);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v50, v21);
    if (v49 != -1)
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v49])(&v31, v48);
  }
  result = WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v5);
  *(_BYTE *)(v5 + 690) &= ~1u;
  *(_BYTE *)(v5 + 786) = *(_BYTE *)(v5 + 786) & 0xF8 | 3;
  return result;
}

WTF::StringImpl *WebCore::FetchResponse::redirect@<X0>(WebCore::FetchResponse *this@<X0>, const WTF::String *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  WTF::StringImpl *v7;
  int v8;
  BOOL v9;
  int v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  WTF::StringImpl *result;
  int v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  BOOL v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  _BYTE v58[64];
  __int128 v59;
  _BYTE v60[19];
  uint64_t v61;
  char v62;
  _QWORD v63[4];
  uint64_t v64;
  char v65[8];
  int v66;
  uint64_t v67;
  WTF *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  char v73;
  unsigned int v74;
  unsigned int v75;

  v4 = a2;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 120))(&v72);
  if ((v73 & 1) == 0)
  {
    v7 = v72;
    if (v72)
    {
      v8 = *((_DWORD *)v72 + 1);
      *(_DWORD *)v72 += 2;
      if (v8 < 0)
        goto LABEL_64;
    }
    else
    {
      v8 = 0;
    }
    v9 = __OFADD__(v8, 12);
    v10 = v8 + 12;
    if (!v9 && !__OFADD__(v10, 17))
    {
      v11 = !v7 || (*((_BYTE *)v7 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v10 + 17), v11, (int8x16_t *)"Redirection URL '", 0x11u, (uint64_t)v7, (int8x16_t *)"' is invalid", 0xCu, &v71);
      v13 = v71;
      if (v71)
      {
        *(_BYTE *)a3 = 33;
        *(_QWORD *)(a3 + 8) = v13;
        *(_DWORD *)(a3 + 16) = 1;
        v71 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v12);
          else
            *(_DWORD *)v7 -= 2;
        }
        goto LABEL_30;
      }
      goto LABEL_65;
    }
LABEL_64:
    v71 = 0;
LABEL_65:
    __break(0xC471u);
    goto LABEL_68;
  }
  if (v75 > v74)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_30;
  }
  if (v4 - 301 > 7 || ((1 << (v4 - 45)) & 0xC7) == 0)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v45 = -v4;
      v33 = 1;
      do
      {
        ++v33;
        v46 = v45 >= 0xA;
        v45 /= 0xAu;
      }
      while (v46);
    }
    else
    {
      v33 = 0;
      v34 = v4;
      do
      {
        ++v33;
        v35 = v34 > 9;
        v34 /= 0xAu;
      }
      while (v35);
    }
    if (v33 < 0 || (v9 = __OFADD__(v33, 32), v36 = v33 + 32, v9) || __OFADD__(v36, 12))
    {
      v70 = 0;
    }
    else
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 12), 1, (int8x16_t *)"Status code ", 0xCu, v4, (int8x16_t *)"is not a redirection status code", 0x20u, &v70);
      v37 = v70;
      if (v70)
      {
        *(_BYTE *)a3 = 32;
        *(_QWORD *)(a3 + 8) = v37;
        *(_DWORD *)(a3 + 16) = 1;
        v70 = 0;
        goto LABEL_30;
      }
    }
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x19532FD98);
  }
  v14 = WTF::fastMalloc((WTF *)0x3E0);
  v65[0] = 0;
  v69 = 0;
  v15 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v15 = 1;
  *(_BYTE *)(v15 + 4) = 1;
  v63[0] = 0;
  *(_OWORD *)(v15 + 8) = 0u;
  v63[1] = 0;
  v63[2] = 0;
  *(_OWORD *)(v15 + 24) = 0u;
  v63[3] = 0;
  *(_OWORD *)(v15 + 44) = 0u;
  *(_DWORD *)(v15 + 60) = 0;
  *(_QWORD *)(v15 + 36) = 0;
  v64 = v15;
  v48 = 0;
  WTF::URL::invalidate((WTF::URL *)&v48);
  v57 = 0;
  *(_WORD *)v58 = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  LOBYTE(v56) = 0;
  *(int64x2_t *)&v58[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v58[24] = *(_OWORD *)&v58[8];
  *(_OWORD *)&v58[40] = 0u;
  *(_QWORD *)&v58[56] = 0x8000000000000000;
  v59 = *(_OWORD *)&v58[8];
  *(_QWORD *)v60 = 0x7FF8000000000000;
  v60[8] &= 0xF0u;
  *(_WORD *)&v60[16] &= 0xC000u;
  v60[18] = v60[18] & 0xF8 | 2;
  v61 = 0;
  v62 = 0;
  v58[2] = v58[2] & 0xC0 | 5;
  WebCore::FetchBodyOwner::FetchBodyOwner((WebCore::ContextDestructionObserver *)v14, this, (uint64_t)v65, &v64);
  *(_QWORD *)v14 = &off_1E3355D80;
  *(_QWORD *)(v14 + 552) = v48;
  v17 = v49;
  LODWORD(v49) = v49 & 0xFFFFFFFE;
  v18 = *((_QWORD *)&v51 + 1);
  *(_QWORD *)(v14 + 592) = v51;
  *(_BYTE *)(v14 + 288) = 0;
  *(_BYTE *)(v14 + 544) = 0;
  v48 = 0;
  v19 = v50;
  *(_OWORD *)(v14 + 560) = v17;
  *(_OWORD *)(v14 + 576) = v19;
  *(_QWORD *)&v51 = 0;
  *(_QWORD *)(v14 + 600) = v18;
  v20 = v52;
  v52 = 0u;
  v21 = v53;
  v53 = 0u;
  *(_OWORD *)(v14 + 608) = v20;
  *(_OWORD *)(v14 + 624) = v21;
  *(_QWORD *)&v20 = v54;
  *(_QWORD *)&v54 = 0;
  *(_QWORD *)(v14 + 640) = v20;
  v22 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v54 + 1) = 0;
  *(_QWORD *)(v14 + 648) = v22;
  *(_QWORD *)&v20 = v55;
  *(_QWORD *)&v55 = 0;
  *(_QWORD *)(v14 + 656) = v20;
  v23 = *((_QWORD *)&v55 + 1);
  *((_QWORD *)&v55 + 1) = 0;
  *(_QWORD *)(v14 + 664) = v23;
  *(_BYTE *)(v14 + 672) = 0;
  *(_BYTE *)(v14 + 680) = 0;
  if (v57)
  {
    v24 = v56;
    v56 = 0;
    *(_QWORD *)(v14 + 672) = v24;
    *(_BYTE *)(v14 + 680) = 1;
  }
  v25 = *(_OWORD *)v60;
  *(_OWORD *)(v14 + 752) = v59;
  *(_OWORD *)(v14 + 768) = v25;
  *(_DWORD *)(v14 + 783) = *(_DWORD *)&v60[15];
  v26 = *(_OWORD *)&v58[16];
  *(_OWORD *)(v14 + 688) = *(_OWORD *)v58;
  *(_OWORD *)(v14 + 704) = v26;
  v27 = *(_OWORD *)&v58[48];
  *(_OWORD *)(v14 + 720) = *(_OWORD *)&v58[32];
  *(_OWORD *)(v14 + 736) = v27;
  *(_QWORD *)(v14 + 792) = v61;
  *(_BYTE *)(v14 + 800) = v62;
  *(_OWORD *)(v14 + 808) = 0uLL;
  *(_OWORD *)(v14 + 824) = 0uLL;
  *(_OWORD *)(v14 + 840) = 0uLL;
  *(_OWORD *)(v14 + 856) = 0uLL;
  *(_OWORD *)(v14 + 872) = 0uLL;
  *(_OWORD *)(v14 + 888) = 0uLL;
  *(_OWORD *)(v14 + 904) = 0uLL;
  *(_OWORD *)(v14 + 920) = 0uLL;
  *(_OWORD *)(v14 + 936) = 0uLL;
  *(_DWORD *)(v14 + 952) = 0;
  *(_QWORD *)(v14 + 960) = -1;
  *(_QWORD *)(v14 + 968) = -1;
  *(_QWORD *)(v14 + 976) = 0;
  *(_DWORD *)(v14 + 983) = 0;
  v61 = 0;
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v48, v16);
  v29 = v64;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
    {
      v39 = *(unsigned int *)(v64 + 52);
      if ((_DWORD)v39)
      {
        v42 = *(WTF::StringImpl ***)(v64 + 40);
        v43 = 8 * v39;
        do
        {
          v44 = *v42;
          *v42 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              v47 = v42;
              WTF::StringImpl::destroy(v44, v28);
              v42 = v47;
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          ++v42;
          v43 -= 8;
        }
        while (v43);
      }
      v40 = *(WTF **)(v29 + 40);
      if (v40)
      {
        *(_QWORD *)(v29 + 40) = 0;
        *(_DWORD *)(v29 + 48) = 0;
        WTF::fastFree(v40, v28);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v29 + 8), v28);
      WTF::fastFree((WTF *)v29, v41);
    }
    else
    {
      --*(_DWORD *)v64;
    }
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v63, v28);
  if (v69)
  {
    v31 = v68;
    v68 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        v38 = (_DWORD *)*((_QWORD *)v31 + 1);
        *((_QWORD *)v31 + 1) = 0;
        if (v38)
        {
          if (v38[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
          else
            --v38[4];
        }
        WTF::fastFree(v31, v30);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v67, v30);
    if (v66 != -1)
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v66])(&v48, v65);
  }
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v14);
  WebCore::ResourceResponse::platformLazyInit(v14 + 552, 1);
  *(_WORD *)(v14 + 688) = v4;
  *(_BYTE *)(v14 + 690) &= ~1u;
  WebCore::ResourceResponse::platformLazyInit(v14 + 552, 2);
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(v14 + 632), (WTF::StringImpl *)0x34, &v72);
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(*(_QWORD *)(v14 + 152) + 8), (WTF::StringImpl *)0x34, &v72);
  *(_QWORD *)a3 = v14;
  *(_DWORD *)(a3 + 16) = 0;
LABEL_30:
  result = v72;
  v72 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::FetchResponse::jsonForBindings@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, unsigned __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _DWORD *v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  char v31;
  _OWORD v32[2];
  WTF::StringImpl *v33;

  if (WebCore::ScriptExecutionContext::globalObject(a1))
  {
    JSC::JSONStringify();
    v6 = v33;
    if (v33)
    {
      v33 = 0;
      v26 = v6;
      v27 = 6;
      v28 = 0;
      v31 = 0;
      memset(v32, 0, 24);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = 0u;
      v20 = 0u;
      v30 = 0u;
      v21 = 0u;
      v7 = v32[0];
      v8 = v32[1];
      memset(v32, 0, sizeof(v32));
      v9 = v26;
      v26 = 0;
      v17 = v9;
      v18 = 6;
      v19 = 0;
      v22 = 0;
      v23 = v7;
      v24 = v8;
      v25 = 1;
      WebCore::FetchResponse::create(a3, a1, (uint64_t)&v17, a2);
      std::__optional_destruct_base<WebCore::FetchBodyWithType,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v10);
      v12 = (WTF::StringImpl *)*((_QWORD *)&v32[1] + 1);
      *((_QWORD *)&v32[1] + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(WTF **)&v32[1];
      *(_QWORD *)&v32[1] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          v16 = (_DWORD *)*((_QWORD *)v13 + 1);
          *((_QWORD *)v13 + 1) = 0;
          if (v16)
          {
            if (v16[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
            else
              --v16[4];
          }
          WTF::fastFree(v13, v11);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v28, v11);
      if (v27 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v27])(&v17, &v26);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 33;
      *(_DWORD *)(a3 + 16) = 1;
    }
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::FetchResponse::clone@<X0>(WebCore::FetchResponse *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::ScriptExecutionContext *v30;
  char v31;
  const void *v32;
  WTF::StringImpl *v33;
  CFTypeRef v34;
  void *v35;
  WTF *v36;
  WebCore::FetchBodyOwner *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  char v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  CFTypeRef cf;
  char v67;
  char v68[8];
  int v69;
  uint64_t v70;
  WTF *v71;
  char v72;
  WebCore::FetchBodyOwner *v73;

  if (*((_BYTE *)this + 128))
  {
    if (*((_BYTE *)this + 136))
      goto LABEL_87;
    v5 = *((_QWORD *)this + 15);
    if (v5)
    {
      result = WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v5 + 8));
      if ((result & 1) != 0)
        goto LABEL_87;
      v51 = *((unsigned __int8 *)this + 128);
      if (!*((_BYTE *)this + 128))
      {
        __break(1u);
        goto LABEL_114;
      }
      if (WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*((_QWORD *)this + 15) + 8)))
      {
LABEL_87:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v56 = 33;
LABEL_88:
        *(_BYTE *)a2 = v56;
        *(_DWORD *)(a2 + 16) = 1;
        return result;
      }
    }
  }
  if (!*((_QWORD *)this + 101) || *((_QWORD *)this + 18))
    goto LABEL_15;
  v6 = *((_QWORD *)this + 1);
  if (!v6 || (v2 = *(_QWORD *)(v6 + 8)) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v56 = 8;
    goto LABEL_88;
  }
  v7 = v2 - 96;
  v8 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v8 == 1 || v8 == 2)
      ++*(_DWORD *)(v2 + 216);
  }
  else
  {
    *(_DWORD *)(v2 - 264) += 2;
  }
  v9 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v2 - 96));
  if (v9)
  {
    result = WebCore::FetchBodyOwner::createReadableStream(this, v9, (uint64_t)&v62);
    if (!(_BYTE)v64)
    {
      v12 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v12 == 1)
        {
          if (*(_DWORD *)(v2 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v2 - 96);
          else
            --*(_DWORD *)(v2 + 216);
        }
        else if (v12 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
        }
      }
      else if (*(_DWORD *)(v2 - 264) == 2)
      {
        if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v11);
      }
      else
      {
        *(_DWORD *)(v2 - 264) -= 2;
      }
LABEL_15:
      if ((*((_BYTE *)this + 786) & 7) != 2)
      {
LABEL_32:
        v28 = *((_QWORD *)this + 1);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
            v30 = (WebCore::ScriptExecutionContext *)(v29 - 96);
          else
            v30 = 0;
        }
        else
        {
          v30 = 0;
        }
        v68[0] = 0;
        v72 = 0;
        v31 = *(_BYTE *)(*((_QWORD *)this + 19) + 4);
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v62, (WebCore::FetchResponse *)((char *)this + 552));
        v32 = (const void *)*((_QWORD *)this + 99);
        cf = v32;
        if (v32)
          CFRetain(v32);
        v67 = *((_BYTE *)this + 800);
        WebCore::FetchResponse::create(v30, (uint64_t)v68, v31, (uint64_t)&v62, (uint64_t)&v73);
        v34 = cf;
        cf = 0;
        if (v34)
          CFRelease(v34);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v62, v33);
        if (v72)
        {
          v36 = v71;
          v71 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
            {
              v52 = (_DWORD *)*((_QWORD *)v36 + 1);
              *((_QWORD *)v36 + 1) = 0;
              if (v52)
              {
                if (v52[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 16))(v52);
                else
                  --v52[4];
              }
              WTF::fastFree(v36, v35);
            }
            else
            {
              --*(_DWORD *)v36;
            }
          }
          WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v70, v35);
          if (v69 != -1)
            ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v69])(&v62, v68);
        }
        v37 = v73;
        WebCore::FetchBodyOwner::cloneBody(v73, this);
        v38 = *((_QWORD *)this + 19);
        v39 = WTF::fastMalloc((WTF *)0x40);
        result = WebCore::FetchHeaders::FetchHeaders(v39, v38);
        v41 = *((_QWORD *)v37 + 19);
        *((_QWORD *)v37 + 19) = result;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1)
          {
            v53 = *(unsigned int *)(v41 + 52);
            if ((_DWORD)v53)
            {
              v57 = *(WTF::StringImpl ***)(v41 + 40);
              v58 = 8 * v53;
              do
              {
                v59 = *v57;
                *v57 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                  {
                    v61 = v58;
                    WTF::StringImpl::destroy(v59, v40);
                    v58 = v61;
                  }
                  else
                  {
                    *(_DWORD *)v59 -= 2;
                  }
                }
                ++v57;
                v58 -= 8;
              }
              while (v58);
            }
            v54 = *(WTF **)(v41 + 40);
            if (v54)
            {
              *(_QWORD *)(v41 + 40) = 0;
              *(_DWORD *)(v41 + 48) = 0;
              WTF::fastFree(v54, v40);
            }
            WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v41 + 8), v40);
            result = WTF::fastFree((WTF *)v41, v55);
          }
          else
          {
            --*(_DWORD *)v41;
          }
        }
        *((_OWORD *)v37 + 52) = *((_OWORD *)this + 52);
        *(_QWORD *)a2 = v37;
        *(_DWORD *)(a2 + 16) = 0;
        return result;
      }
      v13 = *((_QWORD *)this + 19);
      v14 = *(unsigned int *)(v13 + 20);
      v62 = 0;
      LODWORD(v63) = 0;
      HIDWORD(v63) = v14;
      if ((_DWORD)v14)
      {
        if (v14 >> 28)
          goto LABEL_116;
        v15 = WTF::fastMalloc((WTF *)(16 * v14));
        LODWORD(v63) = v14;
        v62 = v15;
        v16 = *(unsigned int *)(v13 + 20);
        if ((_DWORD)v16)
        {
          v17 = *(_QWORD *)(v13 + 8);
          v18 = v17 + 16 * v16;
          do
          {
            *(_WORD *)v15 = *(_WORD *)v17;
            v19 = *(_DWORD **)(v17 + 8);
            if (v19)
              *v19 += 2;
            *(_QWORD *)(v15 + 8) = v19;
            v17 += 16;
            v15 += 16;
          }
          while (v17 != v18);
        }
      }
      v20 = *(unsigned int *)(v13 + 36);
      v64 = 0;
      LODWORD(v65) = 0;
      HIDWORD(v65) = v20;
      if (!(_DWORD)v20)
      {
LABEL_24:
        WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 552, 2);
        v22 = *((unsigned int *)this + 161);
        if ((_DWORD)v22)
        {
          v48 = 16 * v22;
          v49 = (WTF::StringImpl **)(*((_QWORD *)this + 79) + 8);
          do
          {
            v50 = *v49;
            *v49 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v21);
              else
                *(_DWORD *)v50 -= 2;
            }
            v49 += 2;
            v48 -= 16;
          }
          while (v48);
        }
        v23 = (WTF *)*((_QWORD *)this + 79);
        if (v23)
        {
          *((_QWORD *)this + 79) = 0;
          *((_DWORD *)this + 160) = 0;
          WTF::fastFree(v23, v21);
        }
        *((_QWORD *)this + 79) = v62;
        v24 = v63;
        v62 = 0;
        v63 = 0;
        *((_QWORD *)this + 80) = v24;
        v25 = *((unsigned int *)this + 165);
        if ((_DWORD)v25)
          WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*((WTF::StringImpl **)this + 81), (WTF::StringImpl *)(*((_QWORD *)this + 81) + 16 * v25));
        v26 = (WTF *)*((_QWORD *)this + 81);
        if (v26)
        {
          *((_QWORD *)this + 81) = 0;
          *((_DWORD *)this + 164) = 0;
          WTF::fastFree(v26, v21);
        }
        *((_QWORD *)this + 81) = v64;
        v27 = v65;
        v64 = 0;
        v65 = 0;
        *((_QWORD *)this + 82) = v27;
        WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v62, v21);
        goto LABEL_32;
      }
      if (!(v20 >> 28))
      {
        v42 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v20));
        LODWORD(v65) = v20;
        v64 = v42;
        v43 = *(unsigned int *)(v13 + 36);
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(v13 + 24);
          v45 = v44 + 16 * v43;
          do
          {
            v46 = *(_DWORD **)v44;
            if (*(_QWORD *)v44)
              *v46 += 2;
            *v42 = v46;
            v47 = *(_DWORD **)(v44 + 8);
            if (v47)
              *v47 += 2;
            v42[1] = v47;
            v44 += 16;
            v42 += 2;
          }
          while (v44 != v45);
        }
        goto LABEL_24;
      }
LABEL_116:
      __break(0xC471u);
      JUMPOUT(0x195330624);
    }
    v60 = v63;
    *(_BYTE *)a2 = v62;
    *(_QWORD *)(a2 + 8) = v60;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 8;
  }
  *(_DWORD *)(a2 + 16) = 1;
  v51 = *(unsigned __int8 *)(v2 + 178);
  if (!*(_BYTE *)(v2 + 178))
  {
    if (*(_DWORD *)(v2 - 264) == 2)
    {
      if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v11);
    }
    else
    {
      *(_DWORD *)(v2 - 264) -= 2;
    }
    return result;
  }
  if (v51 == 1)
  {
    if (*(_DWORD *)(v2 + 216) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v2 - 96);
    --*(_DWORD *)(v2 + 216);
    return result;
  }
LABEL_114:
  if (v51 == 2)
    return (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
  return result;
}

void WebCore::FetchResponse::createFetchResponse(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _DWORD *v24;
  void *v25;
  WTF *v26;
  WTF *v27;
  unsigned int *v28;
  void *v29;
  WebCore::AbortSignal *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  _DWORD *v48;
  bmalloc::api *v49;
  void *v50;
  _DWORD *v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  _BYTE v69[64];
  __int128 v70;
  _BYTE v71[19];
  uint64_t v72;
  char v73;
  _QWORD v74[4];
  uint64_t v75;
  __int128 v76;
  _BYTE v77[64];
  WTF *v78;
  uint64_t v79;
  int v80;
  int v81;
  __int128 v82;
  __int128 v83;
  char v84;
  __int128 v85;
  WTF *v86;
  char v87;

  v8 = WTF::fastMalloc((WTF *)0x3E0);
  v76 = 0u;
  memset(v77, 0, sizeof(v77));
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0;
  v85 = 0u;
  v78 = 0;
  v86 = 0;
  v87 = 1;
  v9 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v9 = 1;
  *(_BYTE *)(v9 + 4) = 1;
  v74[0] = 0;
  *(_QWORD *)(v9 + 8) = 0;
  v74[1] = 0;
  *(_QWORD *)(v9 + 16) = 0;
  v74[2] = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 0;
  v74[3] = 0;
  *(_QWORD *)(v9 + 36) = 0;
  *(_OWORD *)(v9 + 44) = 0u;
  *(_DWORD *)(v9 + 60) = 0;
  v75 = v9;
  v59 = 0;
  WTF::URL::invalidate((WTF::URL *)&v59);
  v68 = 0;
  *(_WORD *)v69 = 0;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  LOBYTE(v67) = 0;
  *(int64x2_t *)&v69[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v69[24] = *(_OWORD *)&v69[8];
  *(_OWORD *)&v69[40] = 0u;
  *(_QWORD *)&v69[56] = 0x8000000000000000;
  v70 = *(_OWORD *)&v69[8];
  *(_QWORD *)v71 = 0x7FF8000000000000;
  v71[8] &= 0xF0u;
  *(_WORD *)&v71[16] &= 0xC000u;
  v71[18] = v71[18] & 0xF8 | 2;
  v72 = 0;
  v73 = 0;
  v69[2] = v69[2] & 0xC0 | 5;
  WebCore::FetchBodyOwner::FetchBodyOwner((WebCore::ContextDestructionObserver *)v8, a1, (uint64_t)&v79, &v75);
  *(_QWORD *)v8 = &off_1E3355D80;
  *(_QWORD *)(v8 + 552) = v59;
  v11 = v60;
  v12 = v61;
  LODWORD(v60) = v60 & 0xFFFFFFFE;
  v13 = *((_QWORD *)&v62 + 1);
  *(_QWORD *)(v8 + 592) = v62;
  *(_BYTE *)(v8 + 288) = 0;
  *(_BYTE *)(v8 + 544) = 0;
  v59 = 0;
  *(_OWORD *)(v8 + 560) = v11;
  *(_OWORD *)(v8 + 576) = v12;
  *(_QWORD *)&v62 = 0;
  *(_QWORD *)(v8 + 600) = v13;
  v14 = v63;
  v15 = v64;
  v63 = 0u;
  v64 = 0u;
  *(_OWORD *)(v8 + 608) = v14;
  *(_OWORD *)(v8 + 624) = v15;
  *(_QWORD *)&v14 = v65;
  *(_QWORD *)&v65 = 0;
  *(_QWORD *)(v8 + 640) = v14;
  v16 = *((_QWORD *)&v65 + 1);
  *((_QWORD *)&v65 + 1) = 0;
  *(_QWORD *)(v8 + 648) = v16;
  *(_QWORD *)&v14 = v66;
  *(_QWORD *)&v66 = 0;
  *(_QWORD *)(v8 + 656) = v14;
  v17 = *((_QWORD *)&v66 + 1);
  *((_QWORD *)&v66 + 1) = 0;
  *(_QWORD *)(v8 + 664) = v17;
  *(_BYTE *)(v8 + 672) = 0;
  *(_BYTE *)(v8 + 680) = 0;
  if (v68)
  {
    v18 = v67;
    v67 = 0;
    *(_QWORD *)(v8 + 672) = v18;
    *(_BYTE *)(v8 + 680) = 1;
  }
  v19 = *(_OWORD *)v71;
  *(_OWORD *)(v8 + 752) = v70;
  *(_OWORD *)(v8 + 768) = v19;
  *(_DWORD *)(v8 + 783) = *(_DWORD *)&v71[15];
  v20 = *(_OWORD *)&v69[16];
  *(_OWORD *)(v8 + 688) = *(_OWORD *)v69;
  *(_OWORD *)(v8 + 704) = v20;
  v21 = *(_OWORD *)&v69[48];
  *(_OWORD *)(v8 + 720) = *(_OWORD *)&v69[32];
  *(_OWORD *)(v8 + 736) = v21;
  *(_QWORD *)(v8 + 792) = v72;
  *(_BYTE *)(v8 + 800) = v73;
  *(_OWORD *)(v8 + 808) = 0uLL;
  *(_OWORD *)(v8 + 824) = 0uLL;
  *(_OWORD *)(v8 + 840) = 0uLL;
  *(_OWORD *)(v8 + 856) = 0uLL;
  *(_OWORD *)(v8 + 872) = 0uLL;
  *(_OWORD *)(v8 + 888) = 0uLL;
  *(_OWORD *)(v8 + 904) = 0uLL;
  *(_OWORD *)(v8 + 920) = 0uLL;
  *(_OWORD *)(v8 + 936) = 0uLL;
  *(_DWORD *)(v8 + 952) = 0;
  *(_QWORD *)(v8 + 960) = -1;
  *(_QWORD *)(v8 + 968) = -1;
  *(_QWORD *)(v8 + 976) = 0;
  *(_DWORD *)(v8 + 983) = 0;
  *a4 = v8;
  v72 = 0;
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v59, v10);
  v23 = v75;
  if (v75)
  {
    if (*(_DWORD *)v75 == 1)
    {
      v52 = *(unsigned int *)(v75 + 52);
      if ((_DWORD)v52)
      {
        v56 = *(WTF::StringImpl ***)(v75 + 40);
        v57 = 8 * v52;
        do
        {
          v58 = *v56;
          *v56 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v22);
            else
              *(_DWORD *)v58 -= 2;
          }
          ++v56;
          v57 -= 8;
        }
        while (v57);
      }
      v53 = *(WTF **)(v23 + 40);
      if (v53)
      {
        *(_QWORD *)(v23 + 40) = 0;
        *(_DWORD *)(v23 + 48) = 0;
        WTF::fastFree(v53, v22);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v23 + 8), v22);
      WTF::fastFree((WTF *)v23, v54);
    }
    else
    {
      --*(_DWORD *)v75;
    }
  }
  v24 = v77;
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v74, v22);
  if (v87)
  {
    v26 = v86;
    v86 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        v51 = (_DWORD *)*((_QWORD *)v26 + 1);
        *((_QWORD *)v26 + 1) = 0;
        if (v51)
        {
          if (v51[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51);
          else
            --v51[4];
        }
        WTF::fastFree(v26, v25);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v81, v25);
    if (v80 != -1)
      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v80])(&v59, &v79);
    v80 = -1;
  }
  v27 = v78;
  v78 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
    {
      v48 = (_DWORD *)*((_QWORD *)v27 + 1);
      *((_QWORD *)v27 + 1) = 0;
      if (v48)
      {
        if (v48[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
        else
          --v48[4];
      }
      WTF::fastFree(v27, v25);
    }
    else
    {
      --*(_DWORD *)v27;
    }
  }
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)v77, v25);
  if (DWORD2(v76) != -1)
    ((void (*)(uint64_t *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[DWORD2(v76)])(&v59, &v76);
  v28 = (unsigned int *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8);
  if (!*(_BYTE *)(v8 + 128))
  {
    __break(1u);
    goto LABEL_51;
  }
  *(_BYTE *)(v8 + 96) = 1;
  v24 = *(_DWORD **)(a2 + 624);
  ++v24[6];
  v30 = *(WebCore::AbortSignal **)(v8 + 848);
  *(_QWORD *)(v8 + 848) = v24;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v30, v29);
      bmalloc::api::isoDeallocate(v49, v50);
      v24 = *(_DWORD **)(v8 + 848);
    }
    else
    {
      --*((_DWORD *)v30 + 6);
    }
  }
  v31 = *(_QWORD *)(v8 + 32);
  if (!v31)
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = v8;
    v28 = *(unsigned int **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = v31;
    if (v28)
    {
      do
      {
        v32 = __ldaxr(v28);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v28));
      if (v33)
      {
LABEL_24:
        v31 = *(_QWORD *)(v8 + 32);
        if (!v31)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_51:
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v29);
      goto LABEL_24;
    }
  }
  do
LABEL_25:
    v34 = __ldaxr((unsigned int *)v31);
  while (__stlxr(v34 + 1, (unsigned int *)v31));
LABEL_26:
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v35 = &off_1E3355CC8;
  v35[1] = v8;
  v35[2] = v31;
  v36 = v24[38] + 1;
  v24[38] = v36;
  LODWORD(v59) = v36;
  *(_QWORD *)&v60 = v35;
  v37 = v24[15];
  if ((_DWORD)v37 == v24[14])
  {
    v38 = WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 12, v37 + 1, (unint64_t)&v59);
    v39 = v24[15];
    v40 = *((_QWORD *)v24 + 6) + 16 * v39;
    *(_DWORD *)v40 = *v38;
    v41 = *((_QWORD *)v38 + 1);
    *((_QWORD *)v38 + 1) = 0;
    *(_QWORD *)(v40 + 8) = v41;
    v42 = v60;
    v24[15] = v39 + 1;
    *(_QWORD *)&v60 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  else
  {
    v55 = *((_QWORD *)v24 + 6) + 16 * v37;
    *(_DWORD *)v55 = v36;
    *(_QWORD *)(v55 + 8) = v35;
    v24[15] = v37 + 1;
  }
  v43 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v43 = off_1E3355988;
  *(_QWORD *)(v43 + 8) = v8;
  v44 = *a3;
  *a3 = 0;
  *(_QWORD *)(v43 + 24) = 0;
  *(_QWORD *)(v43 + 32) = 0;
  *(_QWORD *)(v43 + 16) = v44;
  v45 = *(_QWORD *)(v43 + 8);
  v46 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v46 = 1;
  ++*(_DWORD *)(v45 + 24);
  *(_QWORD *)(v46 + 8) = v45;
  ++*(_QWORD *)(v45 + 16);
  *(_QWORD *)(v43 + 40) = v46;
  *(_BYTE *)(v43 + 49) = 0;
  v47 = *(WTF **)(v8 + 808);
  *(_QWORD *)(v8 + 808) = v43;
  if (v47)
    std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100](v8 + 808, v47);
}

uint64_t WebCore::FetchResponse::fetch(WebCore::ScriptExecutionContext *a1, uint64_t a2, uint64_t *a3, WTF::StringImpl **a4)
{
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  WebCore::FetchResponse::Loader *v11;
  uint64_t result;
  WTF *v13;
  uint64_t v14;
  uint64_t v15[2];
  int v16;
  char v17;

  if (*(_BYTE *)(a2 + 128) && *(_DWORD *)(a2 + 48) == 7)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v15[0]) = 6;
    v16 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)*a3 + 16))(*a3, v15);
    if (v16 != -1)
      return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v16])(&v17, v15);
  }
  else
  {
    WebCore::FetchResponse::createFetchResponse(a1, a2, a3, v15);
    v9 = v15[0];
    if ((*(_BYTE *)(a2 + 472) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 288));
      *(_BYTE *)(a2 + 472) |= 1u;
    }
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v14 = WebCore::InspectorInstrumentation::instrumentingAgents(a1, v8);
      if (v14)
        WebCore::InspectorInstrumentation::willSendXMLHttpRequestImpl(v14, (const WTF::String *)(a2 + 288));
    }
    v11 = *(WebCore::FetchResponse::Loader **)(v9 + 808);
    if (v11)
    {
      if (!WebCore::FetchResponse::Loader::start(v11, a1, (const WebCore::FetchRequest *)a2, a4))
      {
        v13 = *(WTF **)(v9 + 808);
        *(_QWORD *)(v9 + 808) = 0;
        if (v13)
          std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100](v9 + 808, v13);
      }
    }
    result = v15[0];
    if (v15[0])
    {
      if (*(_DWORD *)(v15[0] + 24) == 1)
        return (*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 16))();
      else
        --*(_DWORD *)(v15[0] + 24);
    }
  }
  return result;
}

void WebCore::FetchResponse::startLoader(WebCore::FetchResponse *this, WebCore::ScriptExecutionContext *a2, WebCore::FetchRequest *a3, WTF::StringImpl **a4)
{
  const WTF::String *v8;
  WebCore::FetchResponse::Loader *v10;
  WTF *v11;
  uint64_t v12;

  v8 = (WebCore::FetchRequest *)((char *)a3 + 288);
  if ((*((_BYTE *)a3 + 472) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::FetchRequest *)((char *)a3 + 288));
    *((_BYTE *)a3 + 472) |= 1u;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v12 = WebCore::InspectorInstrumentation::instrumentingAgents(a2, a2);
    if (v12)
      WebCore::InspectorInstrumentation::willSendXMLHttpRequestImpl(v12, v8);
  }
  v10 = (WebCore::FetchResponse::Loader *)*((_QWORD *)this + 101);
  if (v10 && !WebCore::FetchResponse::Loader::start(v10, a2, a3, a4))
  {
    v11 = (WTF *)*((_QWORD *)this + 101);
    *((_QWORD *)this + 101) = 0;
    if (v11)
      std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100]((_DWORD)this + 808, v11);
  }
}

WTF::StringImpl **WebCore::FetchResponse::url(WebCore::FetchResponse *this)
{
  WTF::StringImpl **v1;
  char *v2;
  WTF::StringImpl *v3;
  __int128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;

  v1 = (WTF::StringImpl **)((char *)this + 824);
  if (!*((_QWORD *)this + 103))
  {
    if (*((_BYTE *)this + 544))
      v2 = (char *)this + 288;
    else
      v2 = (char *)this + 552;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v2, 1);
    v3 = *(WTF::StringImpl **)v2;
    if (*(_QWORD *)v2)
      *(_DWORD *)v3 += 2;
    v9 = v3;
    v4 = *(_OWORD *)(v2 + 24);
    v10 = *(_OWORD *)(v2 + 8);
    v11 = v4;
    WTF::URL::removeFragmentIdentifier((WTF::URL *)&v9);
    v6 = v9;
    if (v9)
      *(_DWORD *)v9 += 2;
    v7 = *v1;
    *v1 = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v5);
        v6 = v9;
      }
      else
      {
        *(_DWORD *)v7 -= 2;
      }
    }
    v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return v1;
}

void WebCore::FetchResponse::Loader::didSucceed(WebCore::FetchResponse **this, const WebCore::NetworkLoadMetrics *a2)
{
  WebCore::FetchResponse *v3;
  int v4;
  WTF *v5;

  WebCore::FetchResponse::didSucceed(this[1], a2);
  if (*((_BYTE *)this[4] + 48))
  {
    v3 = this[1];
    v4 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = v4 + 1;
    v5 = (WTF *)*((_QWORD *)v3 + 101);
    *((_QWORD *)v3 + 101) = 0;
    if (v5)
    {
      std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100]((_DWORD)v3 + 808, v5);
      v4 = *((_DWORD *)v3 + 6) - 1;
    }
    if (v4)
      *((_DWORD *)v3 + 6) = v4;
    else
      (*(void (**)(WebCore::FetchResponse *))(*(_QWORD *)v3 + 16))(v3);
  }
}

WTF::StringImpl *WebCore::FetchResponse::didSucceed(WebCore::FetchResponse *this, const WebCore::NetworkLoadMetrics *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  _DWORD *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::DeferrableRefCountedBase *v22;
  WTF::StringImpl *v23[2];
  int v24;
  char v25;

  v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 856) = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 872) = v4;
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 117) = *((_QWORD *)a2 + 10);
  *(_OWORD *)((char *)this + 904) = v6;
  *(_OWORD *)((char *)this + 920) = v7;
  *(_OWORD *)((char *)this + 888) = v5;
  v8 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v8)
    *v8 += 2;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_OWORD *)a2 + 6);
  *((_QWORD *)this + 121) = *((_QWORD *)a2 + 14);
  *(_OWORD *)((char *)this + 952) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v11)
    ++*v11;
  result = (WTF::StringImpl *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = v11;
  if (result)
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(result, a2);
  v13 = *((_QWORD *)this + 101);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    if (v14)
    {
      v23[0] = 0;
      v24 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, v23);
      if (v24 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3355BB0[v24])(&v25, v23);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  v15 = *((_QWORD *)this + 18);
  if (v15)
  {
    if (!*((_BYTE *)this + 128))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (*((_QWORD *)this + 8))
    {
      WebCore::SharedBufferBuilder::takeAsArrayBuffer((WebCore::FetchResponse *)((char *)this + 64), v23);
      WebCore::FetchBodySource::enqueue(v15, v23);
      v22 = v23[0];
      v23[0] = 0;
      if (v22)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v22);
    }
    result = (WTF::StringImpl *)WebCore::FetchResponse::closeStream(this);
  }
  if (!*((_BYTE *)this + 128))
    return result;
  v16 = *((_QWORD *)this + 19);
  v17 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = (WTF::StringImpl **)(*(_QWORD *)(v16 + 8) + 8);
    while (*((_WORD *)v19 - 4) != 26)
    {
      ++v18;
      v19 += 2;
      if (v17 == v18)
        goto LABEL_18;
    }
    if (v18 < v17)
    {
      v20 = *v19;
      if (*v19)
        *(_DWORD *)v20 += 2;
      goto LABEL_19;
    }
LABEL_37:
    __break(0xC471u);
    return result;
  }
LABEL_18:
  v20 = 0;
LABEL_19:
  v23[0] = v20;
  WebCore::FetchBodyConsumer::loadingSucceeded((WebCore::FetchResponse *)((char *)this + 56), (const WTF::String *)v23);
  result = v23[0];
  v23[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FetchResponse::Loader::didFail(WebCore::FetchResponse::Loader *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const void *v15;
  int v16;
  __int128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  int v31;
  __int16 v32;
  WTF::StringImpl *v33;
  char v34;
  char v35;
  char *v36;

  v4 = *((_QWORD *)this + 1);
  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v26 = v5;
  v6 = a2[1];
  if (v6)
    *(_DWORD *)v6 += 2;
  v27 = v6;
  v7 = *((_OWORD *)a2 + 2);
  v28 = *((_OWORD *)a2 + 1);
  v29 = v7;
  v8 = a2[6];
  if (v8)
    *(_DWORD *)v8 += 2;
  v30 = v8;
  v31 = *((_DWORD *)a2 + 14);
  v32 = *((_WORD *)a2 + 30);
  v9 = a2[8];
  v33 = v9;
  if (v9)
    CFRetain(v9);
  v10 = *((_BYTE *)a2 + 72);
  v34 = v10;
  v11 = *(unsigned int *)(v4 + 280);
  if ((_DWORD)v11 == -1)
  {
    v25 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::FetchResponse::processReceivedError(v25);
    return;
  }
  v36 = &v35;
  if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner15hasLoadingErrorEvE3__0JZNKS9_15hasLoadingErrorEvE3__1ZNKS9_15hasLoadingErrorEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v36, v4 + 200) & 1) != 0)goto LABEL_16;
  v13 = *(unsigned int *)(v4 + 280);
  if ((_DWORD)v13 != -1)
  {
    if ((_DWORD)v13 == 2)
    {
      WebCore::ResourceErrorBase::operator=(v4 + 200, (uint64_t *)&v26);
      v9 = 0;
      v14 = v33;
      v33 = 0;
      v15 = *(const void **)(v4 + 264);
      *(_QWORD *)(v4 + 264) = v14;
      if (v15)
      {
        CFRelease(v15);
        v9 = v33;
      }
      *(_BYTE *)(v4 + 272) = v34;
LABEL_16:
      v33 = 0;
      if (v9)
        CFRelease(v9);
      goto LABEL_20;
    }
    ((void (*)(char **, uint64_t))off_1E3355AE0[v13])(&v36, v4 + 200);
  }
  v26 = 0;
  v27 = 0;
  *(_QWORD *)(v4 + 200) = v5;
  *(_QWORD *)(v4 + 208) = v6;
  v16 = v28;
  v17 = v29;
  *(_OWORD *)(v4 + 216) = v28;
  *(_OWORD *)(v4 + 232) = v17;
  LODWORD(v28) = v16 & 0xFFFFFFFE;
  *(_QWORD *)(v4 + 248) = v8;
  *(_DWORD *)(v4 + 256) = v31;
  *(_WORD *)(v4 + 260) = v32;
  *(_QWORD *)(v4 + 264) = v9;
  *(_BYTE *)(v4 + 272) = v10;
  *(_DWORD *)(v4 + 280) = 2;
  v30 = 0;
  v33 = 0;
LABEL_20:
  v18 = v30;
  v30 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v12);
    else
      *(_DWORD *)v20 -= 2;
  }
  WebCore::FetchResponse::processReceivedError(*((uint64_t **)this + 1));
  v21 = *((_QWORD *)this + 4);
  if (v21 && *(_BYTE *)(v21 + 48))
  {
    v22 = *((_QWORD *)this + 1);
    v23 = *(_DWORD *)(v22 + 24);
    *(_DWORD *)(v22 + 24) = v23 + 1;
    v24 = *(WTF **)(v22 + 808);
    *(_QWORD *)(v22 + 808) = 0;
    if (v24)
    {
      std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100](v22 + 808, v24);
      v23 = *(_DWORD *)(v22 + 24) - 1;
    }
    if (v23)
      *(_DWORD *)(v22 + 24) = v23;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  }
}

uint64_t *WebCore::FetchResponse::processReceivedError(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  int v18;
  WebCore::ResourceResponseBase *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  char v26;

  v1 = (uint64_t)this;
  v2 = this[101];
  if (!v2)
    goto LABEL_16;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v3)
  {
    this = WebCore::FetchBodyOwner::loadingException(&v20, (WebCore::FetchBodyOwner *)this);
    if (!v22)
      goto LABEL_48;
    v5 = v21;
    v21 = 0;
    LOBYTE(v23) = v20;
    v24 = v5;
    v25 = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v23);
    v7 = v25;
    if (v25 == -1)
      goto LABEL_11;
    v8 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix;
  }
  else
  {
    v9 = this[101];
    v3 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    if (!v3)
      goto LABEL_16;
    this = WebCore::FetchBodyOwner::loadingException(&v20, (WebCore::FetchBodyOwner *)this);
    if (!v22)
      goto LABEL_48;
    v10 = v21;
    v21 = 0;
    LOBYTE(v23) = v20;
    v24 = v10;
    v25 = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v23);
    v7 = v25;
    if (v25 == -1)
      goto LABEL_11;
    v8 = off_1E3355BB0;
  }
  ((void (*)(char *, uint64_t *))v8[v7])(&v26, &v23);
LABEL_11:
  v25 = -1;
  if (v22)
  {
    v11 = v21;
    v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_16:
  v12 = *(_QWORD *)(v1 + 144);
  if (!v12)
    goto LABEL_36;
  if (*(_BYTE *)(v12 + 48))
  {
    *(_QWORD *)(v1 + 144) = 0;
LABEL_34:
    if (*(_DWORD *)(v12 + 32) == 1)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 32);
LABEL_36:
    while (*(_BYTE *)(v1 + 128))
    {
      this = WebCore::FetchBodyOwner::loadingException(&v23, (WebCore::FetchBodyOwner *)v1);
      if ((_BYTE)v25)
      {
        this = (uint64_t *)WebCore::FetchBodyConsumer::loadingFailed(v1 + 56, (uint64_t)&v23);
        if ((_BYTE)v25)
        {
          this = (uint64_t *)v24;
          v24 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
            else
              *(_DWORD *)this -= 2;
          }
        }
        return this;
      }
LABEL_48:
      __break(1u);
LABEL_49:
      atomic_store(1u, (unsigned int *)this);
      this = (uint64_t *)WTF::fastFree((WTF *)this, v4);
LABEL_29:
      if ((_BYTE)v25)
      {
        this = (uint64_t *)v24;
        v24 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)this -= 2;
        }
      }
      v12 = *(_QWORD *)(v1 + 144);
      *(_QWORD *)(v1 + 144) = 0;
      if (v12)
        goto LABEL_34;
    }
  }
  else
  {
    this = WebCore::FetchBodyOwner::loadingException(&v23, (WebCore::FetchBodyOwner *)v1);
    if (!(_BYTE)v25)
      goto LABEL_48;
    if (*(_BYTE *)(v12 + 24))
    {
      WebCore::ReadableStreamDefaultController::error((_DWORD **)(v12 + 16), (unsigned __int8 *)&v23);
      v13 = *(WTF **)(v12 + 8);
      if (v13)
      {
        *(_QWORD *)(v12 + 8) = 0;
        v14 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          if (v14[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          else
            --v14[4];
        }
        WTF::fastFree(v13, v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      }
      this = *(uint64_t **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = 0;
      if (!this)
        goto LABEL_29;
      do
      {
        v15 = __ldaxr((unsigned int *)this);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)this));
      if (v16)
        goto LABEL_29;
      goto LABEL_49;
    }
    v18 = std::__throw_bad_optional_access[abi:sn180100]();
    return (uint64_t *)WebCore::FetchResponse::setReceivedInternalResponse(v18, v19);
  }
  return this;
}

WTF::StringImpl *WebCore::FetchResponse::setReceivedInternalResponse(WTF::StringImpl *result, WebCore::ResourceResponseBase *a2, int a3)
{
  uint64_t v3;
  void (**v4)(unsigned __int16 *, WTF::StringImpl **);
  WebCore::ResourceResponseBase *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  unint64_t v34;
  CFTypeRef v35;
  uint64_t v36;
  __int128 v37;
  WTF::StringImpl *v38[2];
  WTF::StringImpl *v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[19];
  CFTypeRef cf;
  char v55;
  _BYTE v56[16];
  unsigned int v57;
  WTF::StringImpl *v58;
  char v59[8];
  __int128 v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;

  if (*((_BYTE *)result + 984))
    return result;
  v5 = a2;
  v6 = (WTF::StringImpl **)result;
  *((_BYTE *)result + 984) = 1;
  WebCore::ResourceResponseBase::filter(a2, a3 != 2, (uint64_t)&v36);
  v8 = v6 + 36;
  if (*((_BYTE *)v6 + 544))
  {
    WebCore::ResourceResponseBase::operator=((uint64_t)(v6 + 36), &v36);
    v9 = (WTF::StringImpl *)cf;
    cf = 0;
    v10 = v6[66];
    v6[66] = v9;
    if (v10)
    {
      CFRelease(v10);
      v35 = cf;
      *((_BYTE *)v6 + 536) = v55;
      cf = 0;
      if (v35)
        CFRelease(v35);
      goto LABEL_6;
    }
    *((_BYTE *)v6 + 536) = v55;
  }
  else
  {
    v22 = v37;
    v23 = *(_OWORD *)v38;
    *(_OWORD *)(v6 + 37) = v37;
    *(_OWORD *)(v6 + 39) = v23;
    v24 = v22;
    v25 = v40;
    v26 = v41;
    v40 = 0u;
    v41 = 0u;
    v27 = v36;
    v36 = 0;
    v6[36] = (WTF::StringImpl *)v27;
    LODWORD(v37) = v24 & 0xFFFFFFFE;
    v28 = v39[0];
    v29 = v39[1];
    v39[0] = 0;
    v6[41] = v28;
    v6[42] = v29;
    *(_OWORD *)(v6 + 43) = v25;
    *(_OWORD *)(v6 + 45) = v26;
    *(_QWORD *)&v25 = v42;
    v42 = 0;
    v6[47] = (WTF::StringImpl *)v25;
    v30 = v43;
    v43 = 0;
    v6[48] = v30;
    *(_QWORD *)&v25 = v44;
    v44 = 0;
    v6[49] = (WTF::StringImpl *)v25;
    v31 = v45;
    v45 = 0;
    v6[50] = v31;
    *((_BYTE *)v6 + 408) = 0;
    *((_BYTE *)v6 + 416) = 0;
    if (v47)
    {
      v32 = v46;
      v46 = 0;
      v6[51] = v32;
      *((_BYTE *)v6 + 416) = 1;
    }
    *(_OWORD *)(v6 + 59) = v51;
    *(_OWORD *)(v6 + 61) = v52;
    *(_OWORD *)(v6 + 63) = *(_OWORD *)v53;
    *(_DWORD *)((char *)v6 + 519) = *(_DWORD *)&v53[15];
    *(_OWORD *)(v6 + 53) = v48;
    *(_OWORD *)(v6 + 55) = v49;
    *(_OWORD *)(v6 + 57) = v50;
    v6[66] = (WTF::StringImpl *)cf;
    *((_BYTE *)v6 + 536) = v55;
    *((_BYTE *)v6 + 544) = 1;
  }
  cf = 0;
LABEL_6:
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v36, v7);
  WebCore::ResourceResponseBase::operator=((uint64_t)(v6 + 69), (uint64_t)v5);
  v11 = (WTF::StringImpl *)*((_QWORD *)v5 + 30);
  if (v11)
    CFRetain(*((CFTypeRef *)v5 + 30));
  v12 = v6[99];
  v6[99] = v11;
  if (v12)
    CFRelease(v12);
  *((_BYTE *)v6 + 800) = *((_BYTE *)v5 + 248);
  if (*((_BYTE *)v6 + 544))
  {
    v13 = *((_BYTE *)v6 + 522);
    *((_BYTE *)v6 + 690) &= ~1u;
    *((_BYTE *)v6 + 786) = *((_BYTE *)v6 + 786) & 0xF8 | v13 & 7;
    if ((*((_WORD *)v5 + 116) & 0x300) != 0x200)
      goto LABEL_12;
    do
    {
      v33 = __ldaxr(&WebCore::nextOpaqueLoadIdentifier);
      v34 = v33 + 1;
    }
    while (__stlxr(v34, &WebCore::nextOpaqueLoadIdentifier));
    v6[105] = (WTF::StringImpl *)v34;
    *((_BYTE *)v6 + 192) = 1;
    if (*((_BYTE *)v6 + 544))
    {
LABEL_12:
      v14 = v6[19];
      WebCore::ResourceResponse::platformLazyInit((uint64_t)(v6 + 36), 2);
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v36, (uint64_t)(v6 + 46), v6[46], (uint64_t)v6[48]);
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v59, (uint64_t)(v6 + 46), (WTF::StringImpl *)((char *)v6[46] + 16 * *((unsigned int *)v6 + 95)), (uint64_t)v6[48] + 16 * *((unsigned int *)v6 + 99));
      v6 = v38;
      v8 = v39;
      v5 = (WTF::StringImpl *)((char *)v14 + 8);
      v3 = 0xFFFFFFFFLL;
      v4 = off_1E3355B70;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_51:
  v17 = 0;
LABEL_20:
  v4[v17]((unsigned __int16 *)&v63, (WTF::StringImpl **)v56);
  while (1)
  {
    v18 = v58;
    v58 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)&v36, v16);
LABEL_13:
    if (v37 == v60)
      break;
    WTF::String::trim();
    WebCore::canWriteHeader((uint64_t)v56, (WebCore *)v6, (uint64_t *)&v58, v8, 4);
    v17 = v57;
    if (!v57)
    {
      if (!v56[0])
        goto LABEL_51;
      if (BYTE2(v38[1]))
        WebCore::HTTPHeaderMap::add(v5, LOWORD(v38[1]), (uint64_t *)v8);
      else
        WebCore::HTTPHeaderMap::addUncommonHeader(v5, v6, v8);
      v17 = v57;
    }
    if (v17 != v3)
      goto LABEL_20;
  }
  v19 = v62;
  v62 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v61;
  v61 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v39[0];
  v39[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v38[0];
  v38[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::FetchResponse::Loader::~Loader(WebCore::FetchResponse::Loader *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::FetchResponse::Loader::didReceiveResponse(WTF::StringImpl **this, const WebCore::ResourceResponse *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _QWORD v6[2];
  int v7;
  char v8;

  result = WebCore::FetchResponse::setReceivedInternalResponse(this[1], a2, *((unsigned __int8 *)this + 48));
  v4 = this[2];
  this[2] = 0;
  if (v4)
  {
    v5 = this[1];
    ++*((_DWORD *)v5 + 6);
    v6[0] = v5;
    v7 = 0;
    (*(void (**)(WTF::StringImpl *, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v6);
    if (v7 != -1)
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v7])(&v8, v6);
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebCore::FetchResponse::Loader::didReceiveData(WebCore::FetchResponse::Loader *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v2;
  const WebCore::SharedBuffer *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::DeferrableRefCountedBase *result;
  uint64_t v11;
  WTF *v12;
  WebCore::SharedBufferBuilder *v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  WTF *v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  WebCore::FetchBodyConsumer *v29;
  BOOL v30;
  WTF *v31;
  _QWORD v32[2];
  int v33;
  _QWORD v34[2];
  char v35;

  v3 = a2;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    if (!*((_DWORD *)a2 + 5))
    {
      v8 = 0;
LABEL_5:
      v9 = *((_QWORD *)v3 + 6);
      v34[0] = v8;
      v34[1] = v9;
      v32[0] = v34;
      v33 = 0;
      result = (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v32);
      if (v33 != -1)
        return (WTF::DeferrableRefCountedBase *)((uint64_t (*)(char *, _QWORD *))off_1E3355BB0[v33])(&v35, v32);
      return result;
    }
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v7 = *(unsigned int *)(v6 + 24);
    if ((_DWORD)v7 != -1)
    {
      v32[0] = v34;
      v8 = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v7])(v32, v6 + 8);
      v5 = *((_QWORD *)this + 3);
      goto LABEL_5;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_52;
  }
  v11 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v11 + 144);
  v12 = (WTF *)*(unsigned __int8 *)(v11 + 128);
  if (!*(_QWORD *)(v2 + 8))
  {
    if (*(_BYTE *)(v11 + 128))
      return WebCore::FetchBodyConsumer::append((WebCore::FetchBodyConsumer *)(v11 + 56), a2);
    goto LABEL_23;
  }
  if (!*(_BYTE *)(v11 + 128))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(v11 + 64);
  v13 = (WebCore::SharedBufferBuilder *)(v11 + 64);
  if (v14)
  {
    WebCore::SharedBufferBuilder::takeAsArrayBuffer(v13, v32);
    if (!*(_BYTE *)(v2 + 24))
    {
LABEL_52:
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_53:
      *(_QWORD *)(v20 + 8) = 3;
      *((_QWORD *)v31 + 10) = 0;
LABEL_25:
      if ((*((_BYTE *)v31 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v31 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v31 + 16));
      v22 = (WTF *)*((_QWORD *)v31 + 1);
      if ((v22 & 1) == 0 && v22)
      {
        v23 = *(WTF **)v22;
        if (*(_QWORD *)v22)
        {
          *(_QWORD *)v22 = 0;
          *((_DWORD *)v22 + 2) = 0;
          WTF::fastFree(v23, v21);
        }
        WTF::fastFree(v22, v21);
      }
      WTF::fastFree(v31, v21);
      if ((v3 & 1) == 0)
        goto LABEL_44;
      return (WTF::DeferrableRefCountedBase *)WebCore::ReadableStreamSource::startFinished((WebCore::ReadableStreamSource *)v2, v16);
    }
    v15 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v2 + 16), v32);
    v17 = (WTF *)v32[0];
    v32[0] = 0;
    if (v17 && (v18 = *(_DWORD *)v17 == 2, *(_DWORD *)v17 -= 2, v18))
    {
      v30 = v15;
      v31 = v17;
      v24 = *((_QWORD *)v17 + 10);
      if (v24)
      {
        *(_QWORD *)(v24 + 8) = 3;
        *((_QWORD *)v31 + 10) = 0;
      }
      if ((*((_BYTE *)v31 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v31 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v31 + 16));
      v26 = (WTF *)*((_QWORD *)v31 + 1);
      if ((v26 & 1) == 0 && v26)
      {
        v27 = *(WTF **)v26;
        if (*(_QWORD *)v26)
        {
          *(_QWORD *)v26 = 0;
          *((_DWORD *)v26 + 2) = 0;
          WTF::fastFree(v27, v25);
        }
        WTF::fastFree(v26, v25);
      }
      WTF::fastFree(v31, v25);
      if (!v30)
        goto LABEL_44;
    }
    else if (!v15)
    {
      goto LABEL_44;
    }
  }
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(v3, v32);
  if (!*(_BYTE *)(v2 + 24))
    goto LABEL_52;
  v19 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v2 + 16), v32);
  LOBYTE(v3) = v19;
  v12 = (WTF *)v32[0];
  v32[0] = 0;
  if (v12)
  {
    v18 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v18)
    {
LABEL_24:
      v31 = v12;
      v20 = *((_QWORD *)v12 + 10);
      if (!v20)
        goto LABEL_25;
      goto LABEL_53;
    }
  }
  if (v19)
    return (WTF::DeferrableRefCountedBase *)WebCore::ReadableStreamSource::startFinished((WebCore::ReadableStreamSource *)v2, v16);
LABEL_44:
  result = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    result = (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(WTF::DeferrableRefCountedBase *))(*(_QWORD *)result + 8))(result);
  v28 = *((_QWORD *)this + 4);
  if (v28)
  {
    v29 = *(WebCore::FetchBodyConsumer **)(v28 + 40);
    if (v29)
      WebCore::FetchBodyConsumer::clean(v29, v16);
    result = *(WTF::DeferrableRefCountedBase **)(v28 + 32);
    if (result)
      return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(WTF::DeferrableRefCountedBase *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FetchResponse::Loader::stop(WebCore::FetchResponse::Loader *this, void *a2)
{
  uint64_t result;
  uint64_t v4;
  WebCore::FetchBodyConsumer *v5;

  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(WebCore::FetchBodyConsumer **)(v4 + 40);
    if (v5)
      WebCore::FetchBodyConsumer::clean(v5, a2);
    result = *(_QWORD *)(v4 + 32);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t *WebCore::FetchResponse::Loader::consumeDataByChunk(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (**v27)();
  uint64_t v28;
  WTF *v29;
  WebCore::FetchResponse *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  int v35;
  _QWORD v36[2];
  uint64_t v37;
  WTF *v38;
  char v39;

  v3 = *a2;
  *a2 = 0;
  result = *(uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v8 = *(_QWORD *)(v5 + 40);
    v7 = (WTF **)(v5 + 40);
    v6 = v8;
    v9 = *(WTF **)(v8 + 8);
    if (v9)
    {
      *(_QWORD *)(v6 + 8) = 0;
      v34[0] = 0;
      result = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v34, a2);
    }
    v38 = v9;
  }
  else
  {
    *(_BYTE *)(a1 + 49) = 1;
    v7 = &v38;
  }
  *v7 = 0;
  v10 = v38;
  if (v38)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(v38, &v37);
    v11 = v37;
    if (*(_DWORD *)(v37 + 20))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8);
      v13 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v13 == -1)
      {
        v31 = (WebCore::FetchResponse *)std::__throw_bad_variant_access[abi:sn180100]();
        return (uint64_t *)WebCore::FetchResponse::consumeBodyAsStream(v31);
      }
      v34[0] = (uint64_t)v36;
      v14 = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(v34, v12 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = *(_QWORD *)(v11 + 48);
    v36[0] = v14;
    v36[1] = v15;
    v34[0] = (uint64_t)v36;
    v35 = 0;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v34);
    if (v35 != -1)
      ((void (*)(char *, uint64_t *))off_1E3355BB0[v35])(&v39, v34);
    result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v37, v16);
    v38 = 0;
    do
    {
      v18 = __ldaxr((unsigned int *)v10);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v10));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v10);
      v20 = *((unsigned int *)v10 + 5);
      if ((_DWORD)v20)
      {
        v21 = *((_QWORD *)v10 + 1);
        v22 = v21 + 16 * v20;
        v23 = off_1E3355A48;
        do
        {
          v24 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = v23;
              v32 = v21;
              v33 = v22;
              atomic_store(1u, v24);
              v28 = v24[6];
              if ((_DWORD)v28 != -1)
                ((void (*)(uint64_t *, unsigned int *))v23[v28])(v34, v24 + 2);
              v24[6] = -1;
              WTF::fastFree((WTF *)v24, v17);
              v21 = v32;
              v22 = v33;
              v23 = v27;
            }
          }
          v21 += 16;
        }
        while (v21 != v22);
      }
      v29 = (WTF *)*((_QWORD *)v10 + 1);
      if ((WTF *)((char *)v10 + 24) != v29 && v29 != 0)
      {
        *((_QWORD *)v10 + 1) = 0;
        *((_DWORD *)v10 + 4) = 0;
        WTF::fastFree(v29, v17);
      }
      return (uint64_t *)WTF::fastFree(v10, v17);
    }
  }
  return result;
}

void WebCore::FetchResponse::consumeBodyAsStream(WebCore::FetchResponse *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::FragmentedSharedBuffer **v6;
  uint64_t v7;
  WebCore::FragmentedSharedBuffer *v8;
  WebCore::FragmentedSharedBuffer *v9;
  uint64_t v10;
  BOOL v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::FragmentedSharedBuffer *v32;

  v3 = *((_QWORD *)this + 101);
  if (!v3)
  {
    WebCore::FetchBodyOwner::consumeBodyAsStream(this);
    return;
  }
  v4 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    v7 = *(_QWORD *)(v4 + 40);
    v6 = (WebCore::FragmentedSharedBuffer **)(v4 + 40);
    v5 = v7;
    v8 = *(WebCore::FragmentedSharedBuffer **)(v7 + 8);
    if (v8)
    {
      *(_QWORD *)(v5 + 8) = 0;
      v32 = 0;
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v32, a2);
    }
    v32 = v8;
  }
  else
  {
    *(_BYTE *)(v3 + 49) = 1;
    v6 = &v32;
  }
  *v6 = 0;
  v9 = v32;
  if (v32)
  {
    v10 = *((_QWORD *)this + 18);
    WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(v32, &v31);
    if (*(_BYTE *)(v10 + 24))
    {
      v11 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v10 + 16), &v31);
      v10 = v31;
      v31 = 0;
      if (!v10 || (v28 = *(_DWORD *)v10 == 2, *(_DWORD *)v10 -= 2, !v28))
      {
        if (v11)
        {
LABEL_13:
          WebCore::ReadableStreamSource::startFinished(*((WebCore::ReadableStreamSource **)this + 18), v12);
LABEL_24:
          v32 = 0;
          do
          {
            v18 = __ldaxr((unsigned int *)v9);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, (unsigned int *)v9));
          if (!v19)
          {
            atomic_store(1u, (unsigned int *)v9);
            v20 = *((unsigned int *)v9 + 5);
            if ((_DWORD)v20)
            {
              v21 = *((_QWORD *)v9 + 1);
              v22 = v21 + 16 * v20;
              do
              {
                v23 = *(unsigned int **)(v21 + 8);
                *(_QWORD *)(v21 + 8) = 0;
                if (v23)
                {
                  do
                  {
                    v24 = __ldaxr(v23);
                    v25 = v24 - 1;
                  }
                  while (__stlxr(v25, v23));
                  if (!v25)
                  {
                    v30 = v22;
                    atomic_store(1u, v23);
                    v26 = v23[6];
                    if ((_DWORD)v26 != -1)
                      ((void (*)(uint64_t *, unsigned int *))off_1E3355A48[v26])(&v31, v23 + 2);
                    v23[6] = -1;
                    WTF::fastFree((WTF *)v23, v13);
                    v22 = v30;
                  }
                }
                v21 += 16;
              }
              while (v21 != v22);
            }
            v27 = (WTF *)*((_QWORD *)v9 + 1);
            v28 = (WebCore::FragmentedSharedBuffer *)((char *)v9 + 24) == v27 || v27 == 0;
            if (!v28)
            {
              *((_QWORD *)v9 + 1) = 0;
              *((_DWORD *)v9 + 4) = 0;
              WTF::fastFree(v27, v13);
            }
            WTF::fastFree(v9, v13);
          }
          return;
        }
LABEL_23:
        WebCore::FetchResponse::stop(this, v12);
        goto LABEL_24;
      }
      v29 = v11;
      v14 = *(_QWORD *)(v10 + 80);
      if (!v14)
      {
LABEL_15:
        if ((*(_BYTE *)(v10 + 72) & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v10 + 72));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v10 + 16));
        v16 = *(WTF **)(v10 + 8);
        if ((v16 & 1) == 0 && v16)
        {
          v17 = *(WTF **)v16;
          if (*(_QWORD *)v16)
          {
            *(_QWORD *)v16 = 0;
            *((_DWORD *)v16 + 2) = 0;
            WTF::fastFree(v17, v15);
          }
          WTF::fastFree(v16, v15);
        }
        WTF::fastFree((WTF *)v10, v15);
        if (v29)
          goto LABEL_13;
        goto LABEL_23;
      }
    }
    else
    {
      std::__throw_bad_optional_access[abi:sn180100]();
    }
    *(_QWORD *)(v14 + 8) = 3;
    *(_QWORD *)(v10 + 80) = 0;
    goto LABEL_15;
  }
}

void WebCore::FetchResponse::stop(WebCore::FetchResponse *this, void *a2)
{
  _DWORD *v3;
  WebCore::FetchResponse::Loader *v4;
  uint64_t v5;
  WebCore::FetchLoader *v6;
  uint64_t v7;

  if (this)
    ++*((_DWORD *)this + 6);
  v3 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (v3[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[8];
  }
  if (*((_BYTE *)this + 128))
    WebCore::FetchBodyConsumer::clean((WebCore::FetchResponse *)((char *)this + 56), a2);
  if (*((_BYTE *)this + 184))
  {
    v6 = (WebCore::FetchLoader *)*((_QWORD *)this + 22);
    if (v6)
      WebCore::FetchLoader::stop(v6, a2);
  }
  v4 = (WebCore::FetchResponse::Loader *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
  {
    WebCore::FetchResponse::Loader::stop(v4, a2);
    v7 = 0;
    std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100]((int)&v7, v4);
  }
  v5 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::FetchResponse *))(*(_QWORD *)this + 16))(this);
  else
    --*((_DWORD *)this + 6);
}

_DWORD *WebCore::FetchResponse::closeStream(WebCore::FetchResponse *this)
{
  uint64_t v1;
  JSC::Structure *v3;
  void *v4;
  WTF *v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *result;
  WebCore::FetchResponse *v11;
  uint64_t v12;
  WTF *v13;
  _OWORD v14[4];
  uint64_t v15;

  v1 = *((_QWORD *)this + 18);
  if (*(_BYTE *)(v1 + 24))
  {
    v13 = (WTF *)((char *)v14 + 8);
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    *((_QWORD *)&v14[0] + 1) = *(_QWORD *)(v1 + 16);
    v12 = 0x800000001;
    v3 = *(JSC::Structure **)(16 * (**((_DWORD **)&v14[0] + 1) & 0xFFFFFFFE) + 0x28);
    WebCore::invokeReadableStreamDefaultControllerFunction(v3, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v3 + 7) + 41456) + 4008));
    v5 = *(WTF **)(v1 + 8);
    if (v5)
    {
      *(_QWORD *)(v1 + 8) = 0;
      v6 = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      WTF::fastFree(v5, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
    }
    v7 = *(unsigned int **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v4);
      }
    }
    result = (_DWORD *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (result)
    {
      if (result[8] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[8];
    }
  }
  else
  {
    v11 = (WebCore::FetchResponse *)std::__throw_bad_optional_access[abi:sn180100]();
    return (_DWORD *)WebCore::FetchResponse::cancelStream(v11);
  }
  return result;
}

void WebCore::FetchResponse::cancelStream(WebCore::FetchResponse *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 v7[8];
  WTF::StringImpl *v8;

  v2 = *((_QWORD *)this + 1);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && !*(_BYTE *)(v3 + 180)
    && !*(_BYTE *)(v3 + 179)
    && *((_BYTE *)this + 128)
    && (v4 = *((_QWORD *)this + 15)) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7[0] = 16;
    WebCore::InternalReadableStream::cancel(*(_QWORD *)(v4 + 8), v7);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    *((_BYTE *)this + 136) = 1;
    WebCore::FetchResponse::stop(this, a2);
  }
}

void WebCore::FetchResponse::cancel(WebCore::FetchResponse *this, void *a2)
{
  *((_BYTE *)this + 136) = 1;
  WebCore::FetchResponse::stop(this, a2);
}

void WebCore::FetchResponse::feedStream(WebCore::FetchResponse *this, void *a2)
{
  WebCore::ReadableStreamSource **v2;
  _QWORD *v3;
  uint64_t v4;
  WebCore::SharedBufferBuilder *v5;
  uint64_t v6;
  WebCore::ReadableStreamSource *v7;
  BOOL v8;
  void *v9;
  BOOL v10;
  JSC::Structure *v11;
  uint64_t *v12;
  WTF *v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::ReadableStreamSource *v17;
  uint64_t v18;
  void *v19;
  WTF **v20;
  WTF *v21;
  _QWORD *v22;
  WTF *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF *v26;
  _OWORD v27[4];
  uint64_t v28;
  uint64_t *v29;

  if (!*((_BYTE *)this + 128))
  {
    __break(1u);
LABEL_30:
    atomic_store(1u, (unsigned int *)this);
    WTF::fastFree(this, a2);
LABEL_22:
    v17 = v2[18];
    v2[18] = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 8) == 1)
        (*(void (**)(WebCore::ReadableStreamSource *))(*(_QWORD *)v17 + 8))(v17);
      else
        --*((_DWORD *)v17 + 8);
    }
    return;
  }
  v2 = (WebCore::ReadableStreamSource **)this;
  v4 = *((_QWORD *)this + 101);
  v6 = *((_QWORD *)this + 8);
  v5 = (WebCore::FetchResponse *)((char *)this + 64);
  if (v6)
  {
    v7 = v2[18];
    WebCore::SharedBufferBuilder::takeAsArrayBuffer(v5, &v24);
    if (!*((_BYTE *)v7 + 24))
      goto LABEL_42;
    v8 = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)v7 + 2, &v24);
    LOBYTE(v7) = v8;
    v3 = v24;
    v24 = 0;
    if (v3)
    {
      v10 = *(_DWORD *)v3 == 2;
      *(_DWORD *)v3 -= 2;
      if (v10)
      {
        v18 = v3[10];
        if (!v18)
          goto LABEL_32;
        goto LABEL_43;
      }
    }
    if (!v8)
    {
LABEL_40:
      WebCore::FetchResponse::stop((WebCore::FetchResponse *)v2, v9);
      return;
    }
    while (1)
    {
      if (v4)
      {
        WebCore::ReadableStreamSource::startFinished(v2[18], v9);
        return;
      }
LABEL_10:
      v7 = v2[18];
      if (*((_BYTE *)v7 + 24))
        break;
LABEL_42:
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_43:
      *(_QWORD *)(v18 + 8) = 3;
      v3[10] = 0;
LABEL_32:
      if ((v3[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 2));
      v20 = (WTF **)v3[1];
      if ((v20 & 1) == 0 && v20)
      {
        v23 = (WTF *)v3[1];
        v21 = *v20;
        if (*v20)
        {
          *(_QWORD *)v23 = 0;
          *((_DWORD *)v23 + 2) = 0;
          WTF::fastFree(v21, v19);
        }
        WTF::fastFree(v23, v19);
      }
      WTF::fastFree((WTF *)v3, v19);
      if ((v7 & 1) == 0)
        goto LABEL_40;
    }
    LOBYTE(v24) = 0;
    v26 = (WTF *)((char *)v27 + 8);
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    *((_QWORD *)&v27[0] + 1) = *((_QWORD *)v7 + 2);
    v25 = 0x800000001;
    v11 = *(JSC::Structure **)(16 * (**((_DWORD **)&v27[0] + 1) & 0xFFFFFFFE) + 0x28);
    WebCore::invokeReadableStreamDefaultControllerFunction(v11, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v11 + 7) + 41456) + 4008));
    v12 = *(uint64_t **)&v27[0];
    if (*(_QWORD *)&v27[0])
    {
      v29 = &v25;
      v22 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v27[0], (uint64_t *)&v29);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v22);
    }
    if (v26 != (WTF *)((char *)v27 + 8) && v26)
      WTF::fastFree(v26, a2);
    v13 = (WTF *)*((_QWORD *)v7 + 1);
    if (v13)
    {
      *((_QWORD *)v7 + 1) = 0;
      v14 = *(_DWORD **)v13;
      *(_QWORD *)v13 = 0;
      if (v14)
      {
        if (v14[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
        else
          --v14[4];
      }
      WTF::fastFree(v13, a2);
      (*(void (**)(WebCore::ReadableStreamSource *))(*(_QWORD *)v7 + 40))(v7);
    }
    this = (WebCore::FetchResponse *)*((_QWORD *)v7 + 5);
    *((_QWORD *)v7 + 5) = 0;
    if (!this)
      goto LABEL_22;
    do
    {
      v15 = __ldaxr((unsigned int *)this);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)this));
    if (v16)
      goto LABEL_22;
    goto LABEL_30;
  }
  if (!v4)
    goto LABEL_10;
}

uint64_t WebCore::FetchResponse::loadBody(WebCore::FetchResponse *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 102);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void WebCore::FetchResponse::setBodyLoader(uint64_t a1, uint64_t *a2)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  _OWORD v9[3];
  __int128 v10;
  WTF *v11;
  char v12;

  v11 = 0;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  v8 = 0u;
  if (*(_BYTE *)(a1 + 128))
  {
    WebCore::FetchBody::operator=(a1 + 40, (uint64_t)&v8);
    v4 = v11;
    v11 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v7 = (_DWORD *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v7)
        {
          if (v7[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
          else
            --v7[4];
        }
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(_OWORD *)((char *)v9 + 8) = 0uLL;
    *(_OWORD *)((char *)&v9[1] + 8) = 0uLL;
    *(_OWORD *)(a1 + 64) = 0uLL;
    *(_OWORD *)(a1 + 80) = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    v10 = 0uLL;
    *(_OWORD *)(a1 + 112) = 0uLL;
    *(_BYTE *)(a1 + 128) = 1;
    v11 = 0;
  }
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)v9, a2);
  if (DWORD2(v8) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[DWORD2(v8)])(&v12, &v8);
  if (*(_BYTE *)(a1 + 128))
  {
    *(_BYTE *)(a1 + 96) = 1;
    v5 = *a2;
    *a2 = 0;
    v6 = *(_QWORD *)(a1 + 816);
    *(_QWORD *)(a1 + 816) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t *WebCore::FetchResponse::receivedError(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  WebCore::FetchResponse *v9;
  uint64_t v10;
  char v11;
  char *v12;

  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 == -1)
  {
    v9 = (WebCore::FetchResponse *)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebCore::FetchResponse::resourceResponse(v9, v10);
  }
  else
  {
    v5 = a1 + 200;
    v12 = &v11;
    if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner15hasLoadingErrorEvE3__0JZNKS9_15hasLoadingErrorEvE3__1ZNKS9_15hasLoadingErrorEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v12, a1 + 200) & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 280) == 2)
      {
        WebCore::ResourceErrorBase::operator=(v5, (uint64_t *)a2);
        v6 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a2 + 64) = 0;
        v7 = *(const void **)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v6;
        if (v7)
          CFRelease(v7);
        *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 72);
      }
      else
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::Exception,WebCore::ResourceError>>::__emplace[abi:sn180100]<2ul,WebCore::ResourceError>(v5, (uint64_t *)a2);
      }
    }
    return WebCore::FetchResponse::processReceivedError((uint64_t *)a1);
  }
}

_DWORD *WebCore::FetchResponse::resourceResponse@<X0>(WebCore::FetchResponse *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int16 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _QWORD v15[3];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned __int16 v22;
  char v23;
  WTF::StringImpl *v24;

  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)a2, (WebCore::FetchResponse *)((char *)this + 552));
  result = (_DWORD *)*((_QWORD *)this + 99);
  *(_QWORD *)(a2 + 240) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(a2 + 248) = *((_BYTE *)this + 800);
  v5 = *((_QWORD *)this + 19);
  if (*(_BYTE *)(v5 + 4) != 1)
  {
    v7 = *(WTF::StringImpl **)(v5 + 8);
    v6 = v5 + 8;
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v18, v6, v7, *(_QWORD *)(v6 + 16));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v15, v6, (WTF::StringImpl *)(*(_QWORD *)v6 + 16 * *(unsigned int *)(v6 + 12)), *(_QWORD *)(v6 + 16) + 16 * *(unsigned int *)(v6 + 28));
    while (1)
    {
      if (v19 == v15[1] && v20 == v15[2])
      {
        v12 = v17;
        v17 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v8);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v16;
        v16 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v8);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v24;
        v24 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v8);
          else
            *(_DWORD *)v14 -= 2;
        }
        result = v21;
        v21 = 0;
        if (result)
        {
          if (*result == 2)
            return (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
          else
            *result -= 2;
        }
        return result;
      }
      if (v23)
        break;
      WebCore::ResourceResponse::platformLazyInit(a2, 2);
      WebCore::HTTPHeaderMap::setUncommonHeader((WebCore::HTTPHeaderMap *)(a2 + 80), &v21, (const WTF::String *)&v24);
LABEL_13:
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)v18, v11);
    }
    v9 = (WTF::StringImpl *)v22;
    WebCore::ResourceResponse::platformLazyInit(a2, 2);
    if ((_DWORD)v9 == 35)
    {
      v10 = -5;
      goto LABEL_10;
    }
    if ((int)v9 > 38)
    {
      if ((_DWORD)v9 == 39)
      {
        v10 = -9;
        goto LABEL_10;
      }
      if ((_DWORD)v9 == 50)
      {
        v10 = -17;
        goto LABEL_10;
      }
      if ((_DWORD)v9 != 56)
        goto LABEL_11;
    }
    else
    {
      if ((_DWORD)v9 == 13)
      {
        v10 = -3;
        goto LABEL_10;
      }
      if ((_DWORD)v9 != 15)
      {
        if ((_DWORD)v9 != 23)
          goto LABEL_11;
        v10 = -33;
LABEL_10:
        *(_WORD *)(a2 + 232) &= v10;
LABEL_11:
        WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a2 + 80), v9, &v24);
        goto LABEL_13;
      }
    }
    v10 = -2;
    goto LABEL_10;
  }
  return result;
}

void WebCore::FetchLoader::~FetchLoader(WebCore::FetchLoader *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::FetchLoader *)((char *)this + 56));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::FetchLoader *)((char *)this + 56));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  if (atomic_load((unsigned int *)this + 4))
  {
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    WTF::fastFree(this, v2);
  }
}

void WebCore::FetchBodyOwner::BlobLoader::~BlobLoader(WebCore::FetchBodyOwner::BlobLoader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::FetchBodyOwner::BlobLoader::didReceiveData(WebCore::FetchBodyOwner::BlobLoader *this, const WebCore::SharedBuffer *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  void *v7;
  WTF **v8;
  WTF *v9;
  WTF *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = v2[18];
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(a2, &v12);
  if (!*(_BYTE *)(v3 + 24))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_18:
    *(_QWORD *)(v6 + 8) = 3;
    *(_QWORD *)(v3 + 80) = 0;
    goto LABEL_8;
  }
  result = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v3 + 16), &v12);
  v3 = v12;
  v12 = 0;
  if (!v3 || (v5 = *(_DWORD *)v3 == 2, *(_DWORD *)v3 -= 2, !v5))
  {
    if ((result & 1) != 0)
      return result;
    return (*(uint64_t (**)(_QWORD *))(*v2 + 56))(v2);
  }
  v11 = result;
  v6 = *(_QWORD *)(v3 + 80);
  if (v6)
    goto LABEL_18;
LABEL_8:
  if ((*(_BYTE *)(v3 + 72) & 1) == 0)
    JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 72));
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 16));
  v8 = *(WTF ***)(v3 + 8);
  if ((v8 & 1) == 0 && v8)
  {
    v10 = *(WTF **)(v3 + 8);
    v9 = *v8;
    if (*v8)
    {
      *(_QWORD *)v10 = 0;
      *((_DWORD *)v10 + 2) = 0;
      WTF::fastFree(v9, v7);
    }
    WTF::fastFree(v10, v7);
  }
  WTF::fastFree((WTF *)v3, v7);
  result = v11;
  if ((v11 & 1) == 0)
    return (*(uint64_t (**)(_QWORD *))(*v2 + 56))(v2);
  return result;
}

uint64_t WebCore::FetchBodyOwner::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::FetchBodyOwner::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

void WebCore::FetchBodySource::~FetchBodySource(WebCore::FetchBodySource *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;

  v3 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v9 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      else
        --*(_DWORD *)(v9 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = *(_DWORD **)v7;
    *(_QWORD *)v7 = 0;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[4];
    }
    WTF::fastFree(v7, a2);
  }
}

{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;

  v3 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v9 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      else
        --*(_DWORD *)(v9 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = *(_DWORD **)v7;
    *(_QWORD *)v7 = 0;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[4];
    }
    WTF::fastFree(v7, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::RefCountedReadableStreamSource::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

_DWORD *WebCore::RefCountedReadableStreamSource::deref(_DWORD *this)
{
  if (this[8] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[8];
  return this;
}

void WebCore::FetchResponse::~FetchResponse(WebCore::FetchResponse *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::FetchResponse::~FetchResponse(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WebCore::AbortSignal *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WebCore::ResourceResponseBase *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WebCore::ResourceResponseBase *v12;
  const void *v13;
  bmalloc::api *v14;
  void *v15;

  v3 = (_DWORD *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebCore::AbortSignal *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v5, a2);
      bmalloc::api::isoDeallocate(v14, v15);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (WTF *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v8)
    std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100]((_DWORD)this + 808, v8);
  v9 = (WebCore::FetchResponse *)((char *)this + 552);
  v10 = (const void *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v10)
  {
    CFRelease(v10);
    v9 = (WebCore::FetchResponse *)((char *)this + 552);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v9, v8);
  if (*((_BYTE *)this + 544))
  {
    v12 = (WebCore::FetchResponse *)((char *)this + 288);
    v13 = (const void *)*((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (v13)
    {
      CFRelease(v13);
      v12 = (WebCore::FetchResponse *)((char *)this + 288);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase(v12, v11);
  }
  WebCore::FetchBodyOwner::~FetchBodyOwner(this, v11);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS18_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEEEEDcS1A_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::FormData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS18_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEEEEDcS1A_DpT0_(uint64_t a1, WebCore::FormData **a2)
{
  WebCore::FormData *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData(result, a2);
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS18_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEEEEDcS1A_DpT0_(uint64_t a1, _QWORD **a2)
{
  return WTF::Ref<JSC::ArrayBuffer const,WTF::RawPtrTraits<JSC::ArrayBuffer const>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer const>>::~Ref(a2);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS18_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEEEEDcS1A_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

WebCore::URLSearchParams *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS18_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEEEEDcS1A_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::URLSearchParams *result;
  WTF *v3;
  void *v4;

  result = *(WebCore::URLSearchParams **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(result, a2);
      return (WebCore::URLSearchParams *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS18_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEEEEDcS1A_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS18_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEEEEDcS1A_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
        else
          --v3[4];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

_QWORD **WTF::Ref<JSC::ArrayBuffer const,WTF::RawPtrTraits<JSC::ArrayBuffer const>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer const>>::~Ref(_QWORD **result)
{
  _QWORD *v1;
  BOOL v2;
  uint64_t v3;
  void *v4;
  WTF **v5;
  WTF *v6;
  WTF *v7;
  _QWORD **v8;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_DWORD *)v1 == 2;
    *(_DWORD *)v1 -= 2;
    if (v2)
    {
      v8 = result;
      v3 = v1[10];
      if (v3)
      {
        *(_QWORD *)(v3 + 8) = 3;
        v1[10] = 0;
      }
      if ((v1[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v1 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v1 + 2));
      v5 = (WTF **)v1[1];
      if ((v5 & 1) == 0 && v5)
      {
        v7 = (WTF *)v1[1];
        v6 = *v5;
        if (*v5)
        {
          *(_QWORD *)v7 = 0;
          *((_DWORD *)v7 + 2) = 0;
          WTF::fastFree(v6, v4);
        }
        WTF::fastFree(v7, v4);
      }
      WTF::fastFree((WTF *)v1, v4);
      return v8;
    }
  }
  return result;
}

uint64_t WebCore::parseParameters(uint64_t result, const char *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v56;
  const char *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  const char *v61;
  int v62;
  BOOL v63;
  WTF::StringImpl *v64;
  const WTF::StringImpl *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  WTF **v70;
  int i;
  unsigned int v72;
  WTF **v73;
  WTF *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;

  *(_QWORD *)result = 0;
  v4 = a3;
  if (a3 <= a4)
    return result;
  v5 = a4;
  v8 = (uint64_t *)result;
  v9 = a3 & 0xFF00000000;
  v10 = a3 - 2;
  v11 = -(uint64_t)a3;
  do
  {
    if (v9)
    {
      if (a3 <= v5)
        goto LABEL_208;
      v12 = a2[v5];
    }
    else
    {
      if (a3 <= v5)
        goto LABEL_208;
      v12 = *(unsigned __int16 *)&a2[2 * v5];
    }
    if (v12 == 32 || v12 == 9)
    {
      ++v5;
      continue;
    }
    if (v5 >= v4)
      return result;
    v14 = 0;
    while (1)
    {
      v15 = v5 + v14;
      if (v9)
      {
        if (a3 <= (int)v5 + (int)v14)
          goto LABEL_208;
        v16 = a2[v15];
      }
      else
      {
        if (a3 <= (int)v5 + (int)v14)
          goto LABEL_208;
        v16 = *(unsigned __int16 *)&a2[2 * v15];
      }
      if (v16 == 59 || v16 == 61)
        break;
      ++v14;
      if (!(v11 + v5 + v14))
        return result;
    }
    if (v16 == 59)
    {
      v5 += v14 + 1;
      continue;
    }
    v17 = a3 - v5;
    if (a3 <= v5)
    {
      v18 = 0x100000000;
      result = (uint64_t)"";
    }
    else
    {
      if (v17 > v14)
      {
        v17 = v14;
LABEL_32:
        v18 = v17;
        v19 = v4 - v5;
        if (v9)
        {
          if (v19 < v18)
            goto LABEL_208;
          v20 = v5 + v14 + 1;
          if (v20 >= v4)
            return result;
          if (a3 <= (int)v5 + (int)v14 + 1)
            goto LABEL_208;
          result = (uint64_t)&a2[v5];
          v18 |= 0x100000000uLL;
          goto LABEL_47;
        }
        if (v19 < v18)
          goto LABEL_208;
        v20 = v5 + v14 + 1;
        if (v20 >= v4)
          return result;
        if (a3 <= (int)v5 + (int)v14 + 1)
        {
LABEL_208:
          __break(1u);
          return result;
        }
        result = (uint64_t)&a2[2 * v5];
LABEL_45:
        v22 = *(unsigned __int16 *)&a2[2 * v20];
        goto LABEL_48;
      }
      result = (uint64_t)a2;
      v18 = a3;
      if ((_DWORD)v5)
        goto LABEL_32;
    }
    v20 = v5 + v14 + 1;
    if (v20 >= v4)
      return result;
    v21 = v5 + v14 + 1;
    if (!v9)
    {
      if (a3 <= v21)
        goto LABEL_208;
      goto LABEL_45;
    }
    if (a3 <= v21)
      goto LABEL_208;
LABEL_47:
    v22 = a2[v20];
LABEL_48:
    if (v22 == 34)
    {
      v23 = v5 + v14 + 2;
      v24 = v23;
      if (v23 < v4)
      {
        v24 = v5 + v14 + 2;
        while (1)
        {
          if (v9)
          {
            if (a3 <= v24)
              goto LABEL_208;
            v25 = a2[v24];
          }
          else
          {
            if (a3 <= v24)
              goto LABEL_208;
            v25 = *(unsigned __int16 *)&a2[2 * v24];
          }
          if (v25 == 34)
            break;
          if (v4 == ++v24)
          {
            v24 = v4;
            break;
          }
        }
      }
      if (a3 <= (int)v5 + (int)v14 + 2)
      {
        v26 = 0x100000000;
        v29 = "";
      }
      else
      {
        if (v10 - (int)v5 - (int)v14 > (v24 + -2 - v5 - v14))
        {
          v26 = (v24 + -2 - v5 - v14);
          goto LABEL_62;
        }
        v29 = a2;
        v26 = a3;
        if (-2 - (_DWORD)v5 != (_DWORD)v14)
        {
          v26 = (v10 - v5 - v14);
LABEL_62:
          v27 = (v5 + v14 + 2);
          v28 = v4 - v23;
          if (v9)
          {
            if (v28 < v26)
              goto LABEL_208;
            v29 = &a2[v27];
            v26 |= 0x100000000uLL;
          }
          else
          {
            if (v28 < v26)
              goto LABEL_208;
            v29 = &a2[2 * v27];
          }
        }
      }
      v35 = v8;
      v5 = v24 + 1;
      goto LABEL_127;
    }
    v5 = v20;
    if (v20 < v4)
    {
      while (1)
      {
        if (v9)
        {
          if (a3 <= v5)
            goto LABEL_208;
          v30 = a2[v5];
        }
        else
        {
          if (a3 <= v5)
            goto LABEL_208;
          v30 = *(unsigned __int16 *)&a2[2 * v5];
        }
        if (v30 == 59)
          break;
        if (v4 == ++v5)
        {
          v5 = v4;
          break;
        }
      }
    }
    if (a3 <= v20)
    {
LABEL_115:
      v35 = v8;
      v26 = 0x100000000;
      v29 = "";
      goto LABEL_127;
    }
    v31 = v5 - v20;
    if ((int)a3 - (int)v20 <= (v5 - v20))
    {
      v34 = a2;
      v26 = a3;
      if (!(_DWORD)v20)
        goto LABEL_86;
      v31 = a3 - v20;
    }
    v32 = v20;
    v26 = v31;
    v33 = v4 - v20;
    if (v9)
    {
      if (v33 < v31)
        goto LABEL_208;
      v34 = &a2[v32];
      v26 = v31 | 0x100000000;
    }
    else
    {
      if (v33 < v31)
        goto LABEL_208;
      v34 = &a2[2 * v32];
    }
LABEL_86:
    v36 = v26;
    if ((v26 & 0xFF00000000) == 0)
    {
      if ((_DWORD)v26)
      {
        v47 = 0;
        v29 = v34;
        while (1)
        {
          v48 = *(unsigned __int16 *)v29;
          v39 = v48 > 0x20;
          v49 = (1 << v48) & 0x100002600;
          if (v39 || v49 == 0)
            break;
          ++v47;
          v29 += 2;
          if (v26 == v47)
            goto LABEL_115;
        }
        if ((_DWORD)v26 == 1)
        {
          if ((_DWORD)v47)
          {
            LODWORD(v51) = 0;
            v35 = v8;
LABEL_204:
            v26 = (v51 - v47 + 1);
            if (v36 - v47 < v26)
              goto LABEL_208;
            goto LABEL_127;
          }
          v29 = v34;
          v35 = v8;
          goto LABEL_127;
        }
        v51 = (v26 - 1);
        do
        {
          if (v51 >= v26)
            goto LABEL_208;
          v52 = *(unsigned __int16 *)&v34[2 * v51];
          v39 = v52 > 0x20;
          v53 = (1 << v52) & 0x100002600;
          if (v39 || v53 == 0)
            break;
          --v51;
        }
        while ((_DWORD)v51);
        v35 = v8;
        if ((_DWORD)v47 || (_DWORD)v51 != (_DWORD)v26 - 1)
          goto LABEL_204;
      }
      else
      {
LABEL_88:
        v35 = v8;
      }
LABEL_126:
      v29 = v34;
      goto LABEL_127;
    }
    if (!(_DWORD)v26)
      goto LABEL_88;
    v37 = 0;
    while (1)
    {
      v38 = v34[v37];
      v39 = v38 > 0x20;
      v40 = (1 << v38) & 0x100002600;
      if (v39 || v40 == 0)
        break;
      if (v26 == ++v37)
        goto LABEL_115;
    }
    if ((_DWORD)v26 != 1)
    {
      v42 = (v26 - 1);
      do
      {
        if (v42 >= v26)
          goto LABEL_208;
        v43 = v34[v42];
        v39 = v43 > 0x20;
        v44 = (1 << v43) & 0x100002600;
        if (v39 || v44 == 0)
          break;
        --v42;
      }
      while ((_DWORD)v42);
      v35 = v8;
      if ((_DWORD)v37 || (_DWORD)v42 != (_DWORD)v26 - 1)
        goto LABEL_106;
      goto LABEL_126;
    }
    v35 = v8;
    if ((_DWORD)v37)
    {
      LODWORD(v42) = 0;
LABEL_106:
      v46 = (v42 - v37 + 1);
      if ((unint64_t)v26 - v37 < v46)
        goto LABEL_208;
      v29 = &v34[v37];
      v26 = v46 | 0x100000000;
      goto LABEL_127;
    }
    v29 = v34;
LABEL_127:
    if (!(_DWORD)v18)
      goto LABEL_137;
    v91 = v11;
    v55 = v18;
    result = WebCore::isValidHTTPToken((unsigned __int16 *)result, v18);
    if (!(_DWORD)result)
    {
      v11 = v91;
LABEL_137:
      v8 = v35;
      continue;
    }
    result = v26 & 0xFF00000000;
    if ((v26 & 0xFF00000000) != 0)
    {
      v56 = v26;
      v57 = v29;
      v11 = v91;
      v58 = v55;
      v8 = v35;
      if ((_DWORD)v26)
      {
        do
        {
          v59 = *v57;
          if ((v59 & 0x80000000) == 0 && v59 != 9 && *(unsigned __int8 *)v57 - 32 >= 0x5F)
            goto LABEL_14;
          ++v57;
          --v56;
        }
        while (v56);
      }
    }
    else
    {
      v11 = v91;
      v58 = v55;
      v8 = v35;
      if ((_DWORD)v26)
      {
        v60 = 2 * v26;
        v61 = v29;
        do
        {
          v62 = *(unsigned __int16 *)v61;
          v63 = (v62 & 0xFF80) == 0x80 || v62 == 9;
          if (!v63 && (v62 - 32) >= 0x5F)
            goto LABEL_14;
          v61 += 2;
          v60 -= 2;
        }
        while (v60);
      }
    }
    v86 = v26 & 0xFF00000000;
    if ((v58 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v90 = v9;
    v66 = *v8;
    if (*v8
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v8, 8u, 0), (v66 = *v8) != 0))
    {
      v67 = *(_DWORD *)(v66 - 8);
    }
    else
    {
      v67 = 0;
    }
    v68 = *((_DWORD *)v92 + 4);
    v88 = v4;
    v89 = v8;
    v87 = v10;
    if (v68 < 0x100)
      v69 = WTF::StringImpl::hashSlowCase(v92);
    else
      v69 = v68 >> 8;
    v70 = 0;
    for (i = 1; ; ++i)
    {
      v72 = v69 & v67;
      v73 = (WTF **)(v66 + 16 * (v69 & v67));
      v74 = *v73;
      if (*v73 == (WTF *)-1)
      {
        v70 = (WTF **)(v66 + 16 * v72);
        goto LABEL_160;
      }
      if (!v74)
        break;
      if ((WTF::equal(v74, v92, v65) & 1) != 0)
        goto LABEL_182;
LABEL_160:
      v69 = i + v72;
    }
    if (v70)
    {
      *v70 = 0;
      v70[1] = 0;
      --*(_DWORD *)(*v89 - 16);
      v73 = v70;
    }
    v75 = v92;
    v92 = 0;
    v76 = *v73;
    *v73 = v75;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v64);
      else
        *(_DWORD *)v76 -= 2;
    }
    if (v86)
      WTF::String::String();
    else
      WTF::String::String();
    v77 = v93;
    v93 = 0;
    v78 = v73[1];
    v73[1] = v77;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
      {
        WTF::StringImpl::destroy(v78, v64);
        v93 = 0;
      }
      else
      {
        *(_DWORD *)v78 -= 2;
      }
    }
    v79 = *v89;
    if (*v89)
      v80 = *(_DWORD *)(v79 - 12) + 1;
    else
      v80 = 1;
    *(_DWORD *)(v79 - 12) = v80;
    v81 = *v89;
    if (*v89)
      v82 = *(_DWORD *)(v81 - 12);
    else
      v82 = 0;
    v83 = (*(_DWORD *)(v81 - 16) + v82);
    v84 = *(unsigned int *)(v81 - 4);
    if (v84 > 0x400)
    {
      if (v84 <= 2 * v83)
      {
LABEL_178:
        v85 = (_DWORD)v84 << (6 * *(_DWORD *)(v81 - 12) >= (2 * v84));
        goto LABEL_181;
      }
    }
    else if (3 * v84 <= 4 * v83)
    {
      if ((_DWORD)v84)
        goto LABEL_178;
      v85 = 8;
LABEL_181:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v89, v85, v73);
    }
LABEL_182:
    result = (uint64_t)v92;
    v92 = 0;
    v4 = v88;
    v9 = v90;
    v10 = v87;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v64);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = v89;
    v11 = v91;
LABEL_14:
    ;
  }
  while (v5 < v4);
  return result;
}

void WebCore::MimeType::~MimeType(WebCore::MimeType *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v6 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          v9 = v7[1];
          v7[1] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              WTF::StringImpl::destroy(v9, a2);
              v8 = *v7;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

WTF *WTF::Detail::CallableWrapper<WebCore::resolveWithTypeAndData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::FetchBodyConsumer::Type,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>)::$_0,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::resolveWithTypeAndData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::FetchBodyConsumer::Type,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>)::$_0>,WTF::DefaultRefDerefTraits<WebCore::resolveWithTypeAndData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::FetchBodyConsumer::Type,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>)::$_0>>,WebCore::ScriptExecutionContext &>::call@<X0>(WTF *result@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF *v4;
  WTF *v6;
  char *v7;
  WTF *v8;
  char v9;
  WTF::String *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;

  v4 = result;
  v7 = (char *)*((_QWORD *)result + 1);
  v6 = (WTF *)*((_QWORD *)result + 2);
  v24 = 0;
  v25 = 0;
  v26 = (int)v6;
  if (v6)
  {
    if ((unint64_t)v6 >> 32)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc(v6);
    v25 = (int)v6;
    v24 = v8;
    do
    {
      v9 = *v7++;
      *(_BYTE *)v8 = v9;
      v8 = (WTF *)((char *)v8 + 1);
      v6 = (WTF *)((char *)v6 - 1);
    }
    while (v6);
  }
  v10 = (WTF::String *)*((_QWORD *)v4 + 3);
  v11 = *(_QWORD *)v10;
  if (!*(_QWORD *)v10)
    goto LABEL_21;
  v12 = *(unsigned int *)(v11 + 4);
  if (!(_DWORD)v12)
    goto LABEL_21;
  v13 = *(unsigned __int16 **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 16) & 4) == 0)
  {
    if (*v13 - 127 >= 0xFFFFFFA1)
    {
      v14 = 0;
      v17 = v13 + 1;
      while (v12 - 1 != v14)
      {
        v18 = v17[v14++] - 127;
        if (v18 < 0xFFFFFFA1)
        {
LABEL_17:
          if (v14 >= v12)
            goto LABEL_21;
          goto LABEL_18;
        }
      }
      goto LABEL_21;
    }
LABEL_18:
    v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v19 += 2;
    v27 = v19;
    goto LABEL_22;
  }
  if (*(unsigned __int8 *)v13 - 127 < 0xFFFFFFA1)
    goto LABEL_18;
  v14 = 0;
  v15 = (char *)v13 + 1;
  while (v12 - 1 != v14)
  {
    v16 = v15[v14++] - 127;
    if (v16 < 0xFFFFFFA1)
      goto LABEL_17;
  }
LABEL_21:
  WTF::String::convertToASCIILowercase(v10);
LABEL_22:
  v20 = bmalloc::api::isoAllocate();
  v21 = WebCore::Blob::Blob(v20, a2, (uint64_t)&v24, &v27);
  *a3 = v21;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v21 + 24));
  v23 = v27;
  v27 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v24;
  if (v24)
    return (WTF *)WTF::fastFree(v24, v22);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::resolveWithFormData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FormData const&,WebCore::ScriptExecutionContext *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3355AA0;
  WebCore::FetchBodyConsumer::resolveWithFormData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FormData const&,WebCore::ScriptExecutionContext *)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::resolveWithFormData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FormData const&,WebCore::ScriptExecutionContext *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul>>>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3355AA0;
  WebCore::FetchBodyConsumer::resolveWithFormData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FormData const&,WebCore::ScriptExecutionContext *)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::resolveWithFormData(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FormData const&,WebCore::ScriptExecutionContext *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul>>>::call(_QWORD *a1, char *a2)
{
  int v4;
  objc_class *v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  WTF::StringImpl *v19;
  objc_class *v20;
  char v21;

  v4 = *((_DWORD *)a2 + 4);
  if (!v4)
  {
    if (*((_QWORD *)a2 + 1))
    {
      WebCore::SharedBufferBuilder::ensureBuffer(a1 + 4);
      return (WTF::StringImpl *)WebCore::FragmentedSharedBuffer::append(a1[4], *(WTF **)a2, *((WTF **)a2 + 1));
    }
    v10 = (unsigned int *)a1[1];
    v5 = (objc_class *)a1[2];
    a1[2] = 0;
    v20 = v5;
    WebCore::SharedBufferBuilder::takeAsContiguous((WebCore::SharedBufferBuilder *)(a1 + 4), &v17);
    v11 = v17;
    if (*(_DWORD *)(v17 + 20))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8);
      v13 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v13 == -1)
        goto LABEL_26;
      v18 = &v21;
      v14 = (void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v18, v12 + 8);
    }
    else
    {
      v14 = 0;
    }
    WebCore::resolveWithTypeAndData((uint64_t *)&v20, (WTF::StringImpl *)*v10, (uint64_t)(a1 + 3), v14, *(_QWORD *)(v11 + 48));
    result = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v17, v15);
    goto LABEL_11;
  }
  v5 = (objc_class *)a1[2];
  a1[2] = 0;
  if (v4 != 1)
  {
LABEL_26:
    v16 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::consumeFormDataAsStream(WebCore::FormData const&,WebCore::FetchBodySource &,WebCore::ScriptExecutionContext *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul>>>::~CallableWrapper(v16);
  }
  v6 = *a2;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v20 = 0;
  LOBYTE(v18) = v6;
  if (v7)
    *(_DWORD *)v7 += 2;
  v19 = v7;
  WebCore::DeferredPromise::reject((uint64_t)v5, (unsigned __int8 *)&v18, 0, &v20);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      if (!v7)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v7 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v8);
  else
    *(_DWORD *)v7 -= 2;
LABEL_11:
  if (v5)
  {
    if (*((_DWORD *)v5 + 4) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(objc_class *))(*(_QWORD *)v5 + 16))(v5);
    else
      --*((_DWORD *)v5 + 4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::consumeFormDataAsStream(WebCore::FormData const&,WebCore::FetchBodySource &,WebCore::ScriptExecutionContext *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul>>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3355AC8;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[8];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::consumeFormDataAsStream(WebCore::FormData const&,WebCore::FetchBodySource &,WebCore::ScriptExecutionContext *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul>>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3355AC8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[8];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::consumeFormDataAsStream(WebCore::FormData const&,WebCore::FetchBodySource &,WebCore::ScriptExecutionContext *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul>>>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  WTF *v13;
  BOOL v14;
  JSC::Structure *v15;
  void *v16;
  WTF *v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  _OWORD v31[4];
  uint64_t v32;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD **)(a1 + 16);
  ++v2[8];
  v4 = *(_DWORD *)(a2 + 16);
  if (!v4)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      JSC::ArrayBuffer::tryCreate();
      if (*((_BYTE *)v2 + 24))
      {
        result = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)v2 + 2, &v28);
        v13 = v28;
        v28 = 0;
        if (!v13 || (v14 = *(_DWORD *)v13 == 2, *(_DWORD *)v13 -= 2, !v14))
        {
          if ((result & 1) != 0)
            goto LABEL_16;
          goto LABEL_23;
        }
        v26 = v3;
        v27 = v13;
        v25 = result;
        v21 = *((_QWORD *)v13 + 10);
        if (!v21)
          goto LABEL_39;
        goto LABEL_50;
      }
    }
    else if (*((_BYTE *)v2 + 24))
    {
      LOBYTE(v28) = 0;
      v30 = (WTF *)((char *)v31 + 8);
      v32 = 0;
      memset(v31, 0, sizeof(v31));
      *((_QWORD *)&v31[0] + 1) = *((_QWORD *)v2 + 2);
      v29 = (WTF::StringImpl *)0x800000001;
      v15 = *(JSC::Structure **)(16 * (**((_DWORD **)&v31[0] + 1) & 0xFFFFFFFE) + 0x28);
      WebCore::invokeReadableStreamDefaultControllerFunction(v15, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v15 + 7) + 41456) + 4008));
      v17 = (WTF *)*((_QWORD *)v2 + 1);
      if (v17)
      {
        *((_QWORD *)v2 + 1) = 0;
        v18 = *(_DWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v18)
        {
          if (v18[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
          else
            --v18[4];
        }
        WTF::fastFree(v17, v16);
        (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 40))(v2);
      }
      result = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (result)
      {
        do
        {
          v19 = __ldaxr((unsigned int *)result);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)result));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v16);
        }
      }
      goto LABEL_16;
    }
    goto LABEL_48;
  }
  if (v4 == 1)
  {
    LOBYTE(v28) = *(_BYTE *)a2;
    v5 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v29 = v5;
    if (*((_BYTE *)v2 + 24))
    {
      WebCore::ReadableStreamDefaultController::error((_DWORD **)v2 + 2, (unsigned __int8 *)&v28);
      v7 = (WTF *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        *((_QWORD *)v2 + 1) = 0;
        v8 = *(_DWORD **)v7;
        *(_QWORD *)v7 = 0;
        if (v8)
        {
          if (v8[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
          else
            --v8[4];
        }
        WTF::fastFree(v7, v6);
        (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 40))(v2);
      }
      v9 = (unsigned int *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v6);
        }
      }
      result = (uint64_t)v29;
      v29 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_16;
    }
LABEL_48:
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_50:
  *(_QWORD *)(v21 + 8) = 3;
  *((_QWORD *)v27 + 10) = 0;
LABEL_39:
  if ((*((_BYTE *)v27 + 72) & 1) == 0)
    JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v27 + 72));
  JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v27 + 16));
  v23 = (WTF *)*((_QWORD *)v27 + 1);
  if ((v23 & 1) == 0 && v23)
  {
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23)
    {
      *(_QWORD *)v23 = 0;
      *((_DWORD *)v23 + 2) = 0;
      WTF::fastFree(v24, v22);
    }
    WTF::fastFree(v23, v22);
  }
  WTF::fastFree(v27, v22);
  result = v25;
  v3 = v26;
  if ((v25 & 1) == 0)
LABEL_23:
    result = (uint64_t)WebCore::FormDataConsumer::cancel(*(WebCore::FormDataConsumer **)(v3 + 56));
LABEL_16:
  if (v2[8] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[8];
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore9ExceptionENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJDnS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore9ExceptionENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJDnS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore9ExceptionENS8_13ResourceErrorEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJDnS9_SA_EEERKSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3355AE0[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 80) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore9ExceptionENS8_13ResourceErrorEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJDnS9_SA_EEERKSR_EEEDcSJ_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *(_BYTE *)a2 = *(_BYTE *)a3;
      v6 = *(_DWORD **)(a3 + 8);
      if (v6)
        *v6 += 2;
      result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3355AE0[v5])(&v8, v4);
  }
  *(_BYTE *)v4 = *(_BYTE *)a3;
  v7 = *(_DWORD **)(a3 + 8);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v4 + 8) = v7;
  *(_DWORD *)(v4 + 80) = 1;
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore9ExceptionENS8_13ResourceErrorEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJDnS9_SA_EEERKSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef result;
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  _DWORD *v10;
  int v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
      return (CFTypeRef)WebCore::ResourceError::operator=(a2, a3);
    ((void (*)(char *, uint64_t))off_1E3355AE0[v5])(&v12, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  v7 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  v8 = *(_DWORD **)(a3 + 8);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v4 + 8) = v8;
  v9 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 32) = v9;
  v10 = *(_DWORD **)(a3 + 48);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v4 + 48) = v10;
  v11 = *(_DWORD *)(a3 + 56);
  *(_WORD *)(v4 + 60) = *(_WORD *)(a3 + 60);
  *(_DWORD *)(v4 + 56) = v11;
  result = *(CFTypeRef *)(a3 + 64);
  *(_QWORD *)(v4 + 64) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(v4 + 72) = *(_BYTE *)(a3 + 72);
  *(_DWORD *)(v4 + 80) = 2;
  return result;
}

uint64_t WebCore::ResourceError::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  int v11;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = *(_DWORD **)(a2 + 48);
  if (v9)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v11;
  WTF::RetainPtr<NSError>::operator=((const void **)(a1 + 64), (CFTypeRef *)(a2 + 64));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

{
  uint64_t v4;
  const void *v5;

  WebCore::ResourceErrorBase::operator=(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v5 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

const void **WTF::RetainPtr<NSError>::operator=(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  const void *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  if (v4)
    CFRelease(v4);
  return a1;
}

uint64_t WebCore::FetchBody::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  _DWORD *v10;
  uint64_t v11;
  char v12;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v4])(&v12, a1);
    *(_DWORD *)(a1 + 8) = -1;
    goto LABEL_6;
  }
  v11 = a1;
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3355B10[v5])(&v11, a1, a2);
LABEL_6:
  WebCore::FetchBodyConsumer::operator=(a1 + 16, a2 + 16);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v8 = *(WTF **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v10 = (_DWORD *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[4];
      }
      WTF::fastFree(v8, v6);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::FormData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(WebCore::FormData *result, WebCore::FormData **a2, WebCore::FormData **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::FormData *v6;
  WebCore::FormData *v7;
  bmalloc::api *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (WebCore::FormData *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData(result, a2);
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(unsigned int **result, _QWORD **a2, _QWORD *a3)
{
  unsigned int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;

  v4 = *result;
  v5 = (*result)[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = (_QWORD *)*a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;
      v9 = v7;
      return (unsigned int **)WTF::Ref<JSC::ArrayBuffer const,WTF::RawPtrTraits<JSC::ArrayBuffer const>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer const>>::~Ref(&v9);
    }
    result = (unsigned int **)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v10, v4);
  }
  v8 = (_QWORD *)*a3;
  *a3 = 0;
  *(_QWORD *)v4 = v8;
  v4[2] = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 4)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 4;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::URLSearchParams *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(WebCore::URLSearchParams *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    result = (WebCore::URLSearchParams *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WebCore::URLSearchParams **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(result, a2);
      return (WebCore::URLSearchParams *)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 6)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 6;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSA_8FormDataENSD_ISI_EENSF_ISI_EEEENS9_IKN3JSC11ArrayBufferENSD_ISO_EENSF_ISO_EEEENS9_IKNSM_15ArrayBufferViewENSD_IST_EENSF_IST_EEEENS9_IKNSA_15URLSearchParamsENSD_ISY_EENSF_ISY_EEEENS8_6StringENS9_INSA_14ReadableStreamENSD_IS13_EENSF_IS13_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS17_LNS0_6_TraitE1EEEEEvOT_EUlRS1D_OT0_E_JRNS0_6__baseILS1B_1EJDnSH_SL_SR_SW_S11_S12_S16_EEEOS1L_EEEDcS1D_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 7)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 7;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        if (v9[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[4];
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  unsigned __int128 *v21;
  unsigned __int128 *v22;
  unsigned __int128 v23;
  size_t v24;
  uint64_t v25;
  unsigned __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v29;
        if (v29)
        {
          v14 = (_BYTE *)(v29 + 20);
          *(_DWORD *)v29 = 2;
          *(_DWORD *)(v29 + 4) = v11;
          *(_QWORD *)(v29 + 8) = v29 + 20;
          *(_DWORD *)(v29 + 16) = 4;
          if (a3)
          {
            v15 = *(_BYTE **)(a3 + 8);
            v16 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v16)
              {
                if ((_DWORD)v16 == 1)
                  *v14 = *v15;
                else
                  result = (uint64_t)memcpy((void *)(v29 + 20), v15, v16);
              }
            }
            else
            {
              if (v16 < 0x10)
              {
                v21 = (unsigned __int128 *)(v29 + 20);
              }
              else
              {
                v21 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
                v22 = (unsigned __int128 *)(v29 + 20);
                do
                {
                  v23 = (unsigned __int128)vld2q_s8(v15);
                  v15 += 32;
                  *v22++ = v23;
                }
                while (v22 != v21);
              }
              while (v21 != (unsigned __int128 *)&v14[v16])
              {
                v28 = *v15;
                v15 += 2;
                *(_BYTE *)v21 = v28;
                v21 = (unsigned __int128 *)((char *)v21 + 1);
              }
            }
            v17 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v14[v17];
          if (a5)
          {
            if (a5 == 1)
              *v18 = a4->i8[0];
            else
              result = (uint64_t)memcpy(&v14[v17], a4, a5);
          }
          if (a6)
          {
            result = (uint64_t)&v18[a5];
            v19 = *(_BYTE **)(a6 + 8);
            v20 = *(unsigned int *)(a6 + 4);
            if ((*(_BYTE *)(a6 + 16) & 4) != 0)
            {
              if ((_DWORD)v20)
              {
                if ((_DWORD)v20 == 1)
                  *(_BYTE *)result = *v19;
                else
                  result = (uint64_t)memcpy((void *)result, v19, v20);
              }
            }
            else
            {
              v24 = result + v20;
              if (v20 >= 0x10)
              {
                v25 = result + (v20 & 0xFFFFFFF0);
                do
                {
                  v26 = (unsigned __int128)vld2q_s8(v19);
                  v19 += 32;
                  *(_OWORD *)result = v26;
                  result += 16;
                }
                while (result != v25);
                result = v25;
              }
              while (result != v24)
              {
                v27 = *v19;
                v19 += 2;
                *(_BYTE *)result++ = v27;
              }
            }
          }
        }
        goto LABEL_19;
      }
LABEL_29:
      v13 = 0;
      goto LABEL_19;
    }
LABEL_28:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_19;
  }
  if (!(_DWORD)result)
    goto LABEL_28;
  if (result > 0x7FFFFFEF)
    goto LABEL_29;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v29;
  if (v29)
  {
    *(_DWORD *)v29 = 2;
    *(_DWORD *)(v29 + 4) = v11;
    *(_QWORD *)(v29 + 8) = v29 + 20;
    *(_DWORD *)(v29 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v29 + 20), a3, a4, a5, a6);
  }
LABEL_19:
  *a7 = v13;
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, char a7@<W6>, _QWORD *a8@<X8>)
{
  uint64_t result;
  char v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a4;
  v11[1] = a5;
  v10 = a7;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>((uint64_t)v12, a3, (uint64_t)v11, a6, &v10, a8);
  if (!*a8)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  int8x16_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  _BOOL4 v25;

  v9 = *(int8x16_t **)result;
  v10 = *(_QWORD *)(result + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
      goto LABEL_30;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a2;
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_5;
  }
  v15 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x19533551CLL);
  }
LABEL_5:
  v16 = *a4;
  if (v12)
    v17 = *(_DWORD *)(v12 + 4);
  else
    v17 = 0;
  v18 = *a5;
  if (v16)
  {
    v19 = *(_DWORD *)(v16 + 4);
    if (v19 < 0)
    {
LABEL_26:
      *a6 = 0;
      return result;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    goto LABEL_26;
  v20 = __OFADD__(v15, v21);
  v22 = v15 + v21;
  v23 = v20;
  if (v17 < 0)
    goto LABEL_26;
  if (v23)
    goto LABEL_26;
  v20 = __OFADD__(v17, v22);
  v24 = v17 + v22;
  if (v20)
    goto LABEL_26;
  result = v11 + v24;
  if (__OFADD__(v11, v24))
    goto LABEL_26;
  v25 = (!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0) && (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0);
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v25, v9, v11, v12, v13, v15, v16, a6, v18);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10)
{
  int v16;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;

  v16 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = v30;
        if (v30)
        {
          *(_DWORD *)v30 = 2;
          *(_DWORD *)(v30 + 4) = v16;
          *(_QWORD *)(v30 + 8) = v30 + 20;
          *(_DWORD *)(v30 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)(v30 + 20), a3, a4, a5, a6, a7, a8, a10);
        }
        goto LABEL_16;
      }
LABEL_18:
      v18 = 0;
      goto LABEL_16;
    }
LABEL_17:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_18;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = v30;
  if (v30)
  {
    v19 = (char *)(v30 + 20);
    *(_DWORD *)v30 = 2;
    *(_DWORD *)(v30 + 4) = v16;
    *(_QWORD *)(v30 + 8) = v30 + 20;
    *(_DWORD *)(v30 + 16) = 0;
    v20 = (char *)(v30 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v21 = &v19[2 * (a4 & 0xFFFFFFC0)];
      v22 = 0uLL;
      do
      {
        v31.val[0] = *a3;
        v23 = a3[1];
        v32.val[0] = a3[2];
        v24 = a3[3];
        a3 += 4;
        v25 = v24;
        v32.val[1] = 0uLL;
        v33.val[0] = v23;
        v31.val[1] = 0uLL;
        v26 = v19;
        vst2q_s8(v26, v31);
        v26 += 32;
        v33.val[1] = 0uLL;
        vst2q_s8(v26, v33);
        v27 = v19 + 64;
        vst2q_s8(v27, v32);
        v28 = v19 + 96;
        vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
        v19 += 128;
      }
      while (v19 != v21);
      v19 = v21;
    }
    while (v19 != v20)
    {
      v29 = a3->u8[0];
      a3 = (int8x16_t *)((char *)a3 + 1);
      *(_WORD *)v19 = v29;
      v19 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v20, a5, a6, a7, a8, a10);
  }
LABEL_16:
  *a9 = v18;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4, _BYTE *__src, unsigned int a6, uint64_t a7, char a8)
{
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  unsigned __int128 *v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  unsigned __int128 *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  char v30;
  char v31;

  v14 = __dst;
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  v15 = &v14[a3];
  if (a4)
  {
    v16 = *(_BYTE **)(a4 + 8);
    v17 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 == 1)
          *v15 = *v16;
        else
          __dst = memcpy(v15, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v24 = (unsigned __int128 *)v15;
      }
      else
      {
        v24 = (unsigned __int128 *)&v15[v17 & 0xFFFFFFF0];
        v25 = (unsigned __int128 *)v15;
        do
        {
          v26 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v25++ = v26;
        }
        while (v25 != v24);
      }
      while (v24 != (unsigned __int128 *)&v15[v17])
      {
        v30 = *v16;
        v16 += 2;
        *(_BYTE *)v24 = v30;
        v24 = (unsigned __int128 *)((char *)v24 + 1);
      }
    }
    v18 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v15[v18];
  if (a6)
  {
    if (a6 == 1)
      *v19 = *__src;
    else
      __dst = memcpy(&v15[v18], __src, a6);
  }
  v20 = &v19[a6];
  if (a7)
  {
    v21 = *(_BYTE **)(a7 + 8);
    v22 = *(unsigned int *)(a7 + 4);
    if ((*(_BYTE *)(a7 + 16) & 4) != 0)
    {
      if ((_DWORD)v22)
      {
        if ((_DWORD)v22 == 1)
          *v20 = *v21;
        else
          __dst = memcpy(v20, v21, v22);
      }
    }
    else
    {
      if (v22 < 0x10)
      {
        v27 = (unsigned __int128 *)v20;
      }
      else
      {
        v27 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
        v28 = (unsigned __int128 *)v20;
        do
        {
          v29 = (unsigned __int128)vld2q_s8(v21);
          v21 += 32;
          *v28++ = v29;
        }
        while (v28 != v27);
      }
      while (v27 != (unsigned __int128 *)&v20[v22])
      {
        v31 = *v21;
        v21 += 2;
        *(_BYTE *)v27 = v31;
        v27 = (unsigned __int128 *)((char *)v27 + 1);
      }
    }
    v23 = *(unsigned int *)(a7 + 4);
  }
  else
  {
    v23 = 0;
  }
  v20[v23] = a8;
  return __dst;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4, char a5)
{
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  unsigned __int128 *v13;
  unsigned __int128 *v14;
  unsigned __int128 v15;
  char v16;

  v8 = __dst;
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  v9 = &v8[a3];
  if (a4)
  {
    v10 = *(_BYTE **)(a4 + 8);
    v11 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        if ((_DWORD)v11 == 1)
          *v9 = *v10;
        else
          __dst = memcpy(v9, v10, v11);
      }
    }
    else
    {
      if (v11 < 0x10)
      {
        v13 = (unsigned __int128 *)v9;
      }
      else
      {
        v13 = (unsigned __int128 *)&v9[v11 & 0xFFFFFFF0];
        v14 = (unsigned __int128 *)v9;
        do
        {
          v15 = (unsigned __int128)vld2q_s8(v10);
          v10 += 32;
          *v14++ = v15;
        }
        while (v14 != v13);
      }
      while (v13 != (unsigned __int128 *)&v9[v11])
      {
        v16 = *v10;
        v10 += 2;
        *(_BYTE *)v13 = v16;
        v13 = (unsigned __int128 *)((char *)v13 + 1);
      }
    }
    v12 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v12 = 0;
  }
  v9[v12] = a5;
  return __dst;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_WORD *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, char a6)
{
  _WORD *v10;
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  int8x16_t *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v10 = __dst;
  if (a2)
  {
    v12 = *(int8x16_t **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v14 = (char *)&__dst[v13];
      if (v13 >= 0x40)
      {
        v15 = (char *)&__dst[v13 & 0xFFFFFFC0];
        v17 = 0uLL;
        v18 = (char *)__dst;
        do
        {
          v51.val[0] = *v12;
          v19 = v12[1];
          v54.val[0] = v12[2];
          v20 = v12[3];
          v12 += 4;
          v21 = v20;
          v54.val[1] = 0uLL;
          v57.val[0] = v19;
          v51.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v51);
          v22 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v22, v57);
          v23 = v18 + 64;
          vst2q_s8(v23, v54);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != v15);
      }
      else
      {
        v15 = (char *)__dst;
      }
      while (v15 != v14)
      {
        v25 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v15 = v25;
        v15 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *__dst = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      __dst = memcpy(__dst, v12, 2 * v13);
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v26 = (char *)&v10[v16];
  v27 = &v26[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v28 = &v26[2 * (a4 & 0xFFFFFFC0)];
    v29 = 0uLL;
    do
    {
      v52.val[0] = *a3;
      v30 = a3[1];
      v55.val[0] = a3[2];
      v31 = a3[3];
      a3 += 4;
      v32 = v31;
      v55.val[1] = 0uLL;
      v58.val[0] = v30;
      v52.val[1] = 0uLL;
      v33 = v26;
      vst2q_s8(v33, v52);
      v33 += 32;
      v58.val[1] = 0uLL;
      vst2q_s8(v33, v58);
      v34 = v26 + 64;
      vst2q_s8(v34, v55);
      v35 = v26 + 96;
      vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
      v26 += 128;
    }
    while (v26 != v28);
    v26 = v28;
  }
  while (v26 != v27)
  {
    v36 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v26 = v36;
    v26 += 2;
  }
  if (a5)
  {
    v37 = *(int8x16_t **)(a5 + 8);
    v38 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v39 = &v27[2 * v38];
      if (v38 >= 0x40)
      {
        v40 = &v27[2 * (v38 & 0xFFFFFFC0)];
        v42 = 0uLL;
        v43 = v27;
        do
        {
          v53.val[0] = *v37;
          v44 = v37[1];
          v56.val[0] = v37[2];
          v45 = v37[3];
          v37 += 4;
          v46 = v45;
          v56.val[1] = 0uLL;
          v59.val[0] = v44;
          v53.val[1] = 0uLL;
          v47 = v43;
          vst2q_s8(v47, v53);
          v47 += 32;
          v59.val[1] = 0uLL;
          vst2q_s8(v47, v59);
          v48 = v43 + 64;
          vst2q_s8(v48, v56);
          v49 = v43 + 96;
          vst2q_s8(v49, *(int8x16x2_t *)(&v42 - 1));
          v43 += 128;
        }
        while (v43 != v40);
      }
      else
      {
        v40 = v27;
      }
      while (v40 != v39)
      {
        v50 = v37->u8[0];
        v37 = (int8x16_t *)((char *)v37 + 1);
        *(_WORD *)v40 = v50;
        v40 += 2;
      }
    }
    else if ((_DWORD)v38 == 1)
    {
      *(_WORD *)v27 = v37->i16[0];
    }
    else if ((_DWORD)v38)
    {
      __dst = memcpy(v27, v37, 2 * v38);
    }
    v41 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v41 = 0;
  }
  *(_WORD *)&v27[2 * v41] = a6;
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, char a5)
{
  char *v7;
  char *v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int16 v16;
  int8x16_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  v7 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v8 = &result[2 * (a3 & 0xFFFFFFC0)];
    v9 = 0uLL;
    do
    {
      v31.val[0] = *a2;
      v10 = a2[1];
      v33.val[0] = a2[2];
      v11 = a2[3];
      a2 += 4;
      v12 = v11;
      v33.val[1] = 0uLL;
      v35.val[0] = v10;
      v31.val[1] = 0uLL;
      v13 = result;
      vst2q_s8(v13, v31);
      v13 += 32;
      v35.val[1] = 0uLL;
      vst2q_s8(v13, v35);
      v14 = result + 64;
      vst2q_s8(v14, v33);
      v15 = result + 96;
      vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
      result += 128;
    }
    while (result != v8);
    result = v8;
  }
  while (result != v7)
  {
    v16 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v16;
    result += 2;
  }
  if (a4)
  {
    v17 = *(int8x16_t **)(a4 + 8);
    v18 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v19 = &v7[2 * v18];
      if (v18 >= 0x40)
      {
        v20 = &v7[2 * (v18 & 0xFFFFFFC0)];
        v22 = 0uLL;
        v23 = v7;
        do
        {
          v32.val[0] = *v17;
          v24 = v17[1];
          v34.val[0] = v17[2];
          v25 = v17[3];
          v17 += 4;
          v26 = v25;
          v34.val[1] = 0uLL;
          v36.val[0] = v24;
          v32.val[1] = 0uLL;
          v27 = v23;
          vst2q_s8(v27, v32);
          v27 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v27, v36);
          v28 = v23 + 64;
          vst2q_s8(v28, v34);
          v29 = v23 + 96;
          vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
          v23 += 128;
        }
        while (v23 != v20);
      }
      else
      {
        v20 = v7;
      }
      while (v20 != v19)
      {
        v30 = v17->u8[0];
        v17 = (int8x16_t *)((char *)v17 + 1);
        *(_WORD *)v20 = v30;
        v20 += 2;
      }
    }
    else if ((_DWORD)v18 == 1)
    {
      *(_WORD *)v7 = v17->i16[0];
    }
    else if ((_DWORD)v18)
    {
      result = (char *)memcpy(v7, v17, 2 * v18);
    }
    v21 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v21 = 0;
  }
  *(_WORD *)&v7[2 * v21] = a5;
  return result;
}

WTF::StringImpl *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t (**a3)(WTF::StringImpl **, uint64_t))
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t i;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[11];

  if (result == a2)
    return result;
  v20[9] = v3;
  v20[10] = v4;
  v6 = (WTF::StringImpl **)result;
  v7 = (WTF::StringImpl **)((char *)result + 8);
  if ((WTF::StringImpl *)((char *)result + 8) == a2)
    return result;
  v9 = 0;
  v10 = (WTF::StringImpl **)result;
  do
  {
    v11 = v10;
    v10 = v7;
    result = (WTF::StringImpl *)(*a3)(v7, (uint64_t)v11);
    if (!(_DWORD)result)
      goto LABEL_20;
    v13 = 0;
    v14 = *v10;
    *v10 = 0;
    v20[0] = v14;
    for (i = v9; ; i -= 8)
    {
      v16 = (WTF::StringImpl **)((char *)v6 + i);
      v17 = *(WTF::StringImpl **)((char *)v6 + i);
      *v16 = 0;
      v16[1] = v17;
      if (!v13)
        goto LABEL_9;
      if (*(_DWORD *)v13 == 2)
        break;
      *(_DWORD *)v13 -= 2;
LABEL_9:
      if (!i)
        goto LABEL_13;
LABEL_10:
      v18 = (WTF::StringImpl **)((char *)v6 + i);
      if (((*a3)(v20, (uint64_t)v6 + i - 8) & 1) == 0)
        goto LABEL_14;
      v13 = *v16;
    }
    WTF::StringImpl::destroy(v13, v12);
    if (i)
      goto LABEL_10;
LABEL_13:
    v18 = v6;
LABEL_14:
    v19 = v20[0];
    v20[0] = 0;
    result = *v18;
    *v18 = v19;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
      result = v20[0];
      v20[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
LABEL_20:
    v7 = v10 + 1;
    v9 += 8;
  }
  while (v10 + 1 != (WTF::StringImpl **)a2);
  return result;
}

WTF::StringImpl *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t (**a3)(WTF::StringImpl **, char *))
{
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *i;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if (result == a2)
    return result;
  v4 = result;
  v5 = (WTF::StringImpl **)((char *)result + 8);
  if ((WTF::StringImpl *)((char *)result + 8) == a2)
    return result;
  v7 = 0;
  v8 = (char *)result - 8;
  v9 = -1;
  v10 = 1;
  do
  {
    v11 = (char *)v4 + 8 * v7;
    v7 = v10;
    result = (WTF::StringImpl *)(*a3)(v5, v11);
    if (!(_DWORD)result)
      goto LABEL_17;
    result = 0;
    v13 = *v5;
    *v5 = 0;
    v20 = v13;
    v14 = v9;
    for (i = v8; ; i -= 8)
    {
      v16 = *((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = 0;
      *((_QWORD *)i + 2) = v16;
      if (!result)
        goto LABEL_9;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
LABEL_9:
        if (!v14)
          goto LABEL_23;
        goto LABEL_10;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      if (!v14)
      {
LABEL_23:
        __break(1u);
        return result;
      }
LABEL_10:
      if (((*a3)(&v20, i) & 1) == 0)
        break;
      result = (WTF::StringImpl *)*((_QWORD *)i + 1);
      ++v14;
    }
    v17 = v20;
    v20 = 0;
    result = (WTF::StringImpl *)*((_QWORD *)i + 1);
    *((_QWORD *)i + 1) = v17;
    if (!result)
      goto LABEL_17;
    v18 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
      goto LABEL_16;
    WTF::StringImpl::destroy(result, v12);
    result = v20;
    v20 = 0;
    if (result)
    {
      v18 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_16:
        *(_DWORD *)result = v18;
        goto LABEL_17;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    }
LABEL_17:
    v10 = v7 + 1;
    v5 = (WTF::StringImpl **)((char *)v4 + 8 * v7 + 8);
    v8 += 8;
    --v9;
  }
  while (v5 != (WTF::StringImpl **)a2);
  return result;
}

WTF::StringImpl **std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(WTF::StringImpl **a1, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, WTF::StringImpl **))
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;

  v6 = *a1;
  *a1 = 0;
  v19 = v6;
  v7 = (*a3)(&v19, a2 - 1);
  if ((v7 & 1) != 0)
  {
    v9 = a1;
    while (1)
    {
      if (++v9 == a2)
        goto LABEL_31;
      v7 = (*a3)(&v19, v9);
      if ((v7 & 1) != 0)
        goto LABEL_9;
    }
  }
  v10 = a1 + 1;
  do
  {
    v9 = v10;
    if (v10 >= a2)
      break;
    v7 = (*a3)(&v19, v10);
    v10 = v9 + 1;
  }
  while (!(_DWORD)v7);
LABEL_9:
  v11 = a2;
  if (v9 < a2)
  {
    v11 = a2;
    while (v11 != a1)
    {
      v7 = (*a3)(&v19, --v11);
      if ((v7 & 1) == 0)
        goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_19:
  if (v9 < v11)
  {
    v12 = *v9;
    *v9 = *v11;
    *v11 = v12;
    while (++v9 != a2)
    {
      v7 = (*a3)(&v19, v9);
      if ((_DWORD)v7)
      {
        while (v11 != a1)
        {
          v7 = (*a3)(&v19, --v11);
          if ((v7 & 1) == 0)
            goto LABEL_19;
        }
        break;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v8);
    goto LABEL_27;
  }
  v13 = (uint64_t *)(v9 - 1);
  if (v9 - 1 != a1)
  {
    v14 = (WTF::StringImpl *)*v13;
    *v13 = 0;
    v15 = *a1;
    *a1 = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v16 = v19;
  v19 = 0;
  v7 = *v13;
  *v13 = (uint64_t)v16;
  if (v7)
  {
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_27:
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v8);
    else
      *(_DWORD *)v17 -= 2;
  }
  return v9;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(WTF::StringImpl **a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;

  v6 = 0;
  v7 = *a1;
  *a1 = 0;
  v19 = v7;
  do
  {
    v8 = (uint64_t)&a1[v6 + 1];
    if ((WTF::StringImpl *)v8 == a2)
      goto LABEL_33;
    v8 = ((uint64_t (*)(uint64_t, WTF::StringImpl **))*a3)(v8, &v19);
    ++v6;
  }
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  if (v6 != 1)
  {
    v10 = (WTF::StringImpl **)a2;
    while (v10 != a1)
    {
      v8 = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))*a3)(--v10, &v19);
      if ((_DWORD)v8)
        goto LABEL_12;
    }
    goto LABEL_33;
  }
  v10 = (WTF::StringImpl **)a2;
  do
  {
    if (v9 >= v10)
      break;
    v8 = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))*a3)(--v10, &v19);
  }
  while ((v8 & 1) == 0);
LABEL_12:
  if (v9 < v10)
  {
    v11 = v9;
    v12 = v10;
LABEL_14:
    v13 = *v11;
    *v11 = *v12;
    *v12 = v13;
    while (++v11 != (WTF::StringImpl **)a2)
    {
      v8 = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))*a3)(v11, &v19);
      if ((v8 & 1) == 0)
      {
        while (v12 != a1)
        {
          v8 = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))*a3)(--v12, &v19);
          if ((_DWORD)v8)
          {
            if (v11 < v12)
              goto LABEL_14;
            a3 = (uint64_t *)(v11 - 1);
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_33:
    __break(1u);
LABEL_34:
    WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
    goto LABEL_29;
  }
  a3 = (uint64_t *)(v9 - 1);
LABEL_22:
  if (a3 != (uint64_t *)a1)
  {
    v14 = (WTF::StringImpl *)*a3;
    *a3 = 0;
    v15 = *a1;
    *a1 = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v16 = v19;
  v19 = 0;
  v8 = *a3;
  *a3 = (uint64_t)v16;
  if (v8)
  {
    if (*(_DWORD *)v8 != 2)
    {
      *(_DWORD *)v8 -= 2;
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_29:
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  return a3;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, WTF::StringImpl **a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = (uint64_t *)(a2 - 1);
      if ((*a3)((uint64_t *)a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      v10 = a1 + 1;
      v11 = (uint64_t *)(a2 - 1);
      v12 = (*a3)(a1 + 1, a1);
      v13 = (*a3)(v11, a1 + 1);
      if ((v12 & 1) != 0)
      {
        v14 = *a1;
        if (v13)
        {
          *a1 = *v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v14;
          if (!(*a3)(v11, a1 + 1))
            return 1;
          v14 = *v10;
          *v10 = *v11;
        }
        *v11 = v14;
      }
      else if (v13)
      {
        v22 = a1[1];
        a1[1] = *v11;
        *v11 = v22;
LABEL_17:
        if ((*a3)(v10, a1))
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, (uint64_t *)a2 - 1, a3);
      return 1;
    case 5:
      v10 = a1 + 1;
      v15 = a1 + 3;
      v16 = (uint64_t *)(a2 - 1);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!(*a3)(v16, a1 + 3))
        return 1;
      v17 = *v15;
      *v15 = *v16;
      *v16 = v17;
      if (!(*a3)(a1 + 3, a1 + 2))
        return 1;
      *((int8x16_t *)a1 + 1) = vextq_s8(*((int8x16_t *)a1 + 1), *((int8x16_t *)a1 + 1), 8uLL);
      if (!(*a3)(a1 + 2, a1 + 1))
        return 1;
      *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
      goto LABEL_17;
    default:
      v18 = a1 + 2;
      v19 = (*a3)(a1 + 1, a1);
      v20 = (*a3)(a1 + 2, a1 + 1);
      if ((v19 & 1) != 0)
      {
        v21 = *a1;
        if (v20)
        {
          *a1 = a1[2];
          a1[2] = v21;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v21;
          if ((*a3)(a1 + 2, a1 + 1))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v20)
      {
        *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        if ((*a3)(a1 + 1, a1))
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v23 = (WTF::StringImpl **)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v23, v18))
    {
      v27 = 0;
      v28 = *v23;
      *v23 = 0;
      v36 = v28;
      for (i = v24; ; i -= 8)
      {
        v30 = (uint64_t)a1 + i;
        v31 = *(uint64_t *)((char *)a1 + i + 16);
        *(_QWORD *)(v30 + 16) = 0;
        *(_QWORD *)(v30 + 24) = v31;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v26);
          else
            *(_DWORD *)v27 -= 2;
        }
        if (i == -16)
        {
          v32 = (WTF::StringImpl **)a1;
          goto LABEL_40;
        }
        if (((*a3)((uint64_t *)&v36, (uint64_t *)((char *)a1 + i + 8)) & 1) == 0)
          break;
        v27 = *(WTF::StringImpl **)(v30 + 16);
      }
      v32 = (WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_40:
      v33 = v36;
      v36 = 0;
      v34 = *v32;
      *v32 = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v26);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = v36;
      v36 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v26);
        else
          *(_DWORD *)v35 -= 2;
      }
      if (++v25 == 8)
        return v23 + 1 == a2;
    }
    v18 = (uint64_t *)v23;
    v24 += 8;
    if (++v23 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
LABEL_9:
      *a3 = v12;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v12;
    if ((*a5)(a3, a2))
    {
      v12 = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if ((*a5)(a2, a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
LABEL_10:
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v18 = *a1;
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t result, uint64_t (**a2)(WTF::StringImpl **, WTF::StringImpl **), uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v25[11] = v4;
    v25[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (WTF::StringImpl **)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = (*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v17 = *v7;
        *v7 = 0;
        v25[0] = v17;
        do
        {
          v18 = v14;
          v19 = *v14;
          *v14 = 0;
          v20 = *v7;
          *v7 = v19;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v16);
            else
              *(_DWORD *)v20 -= 2;
          }
          if (v9 < v13)
            break;
          v21 = (2 * v13) | 1;
          v14 = (WTF::StringImpl **)(v8 + 8 * v21);
          v22 = 2 * v13 + 2;
          if (v22 < a3 && (*a2)((WTF::StringImpl **)(v8 + 8 * v21), v14 + 1))
          {
            ++v14;
            v21 = v22;
          }
          v7 = v18;
          v13 = v21;
        }
        while (!(*a2)(v14, v25));
        v23 = v25[0];
        v25[0] = 0;
        v24 = *v18;
        *v18 = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v16);
          else
            *(_DWORD *)v24 -= 2;
        }
        result = (uint64_t)v25[0];
        v25[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t (**a3)(WTF::StringImpl **, uint64_t), uint64_t a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  int64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if (a4 <= 0)
  {
    __break(1u);
  }
  else if (a4 != 1)
  {
    v7 = result;
    v8 = 0;
    v21 = *(WTF::StringImpl **)result;
    *(_QWORD *)result = 0;
    v9 = (unint64_t)(a4 - 2) >> 1;
    v10 = (WTF::StringImpl **)result;
    do
    {
      v11 = v10;
      v10 += v8 + 1;
      v12 = 2 * v8;
      v8 = (2 * v8) | 1;
      v13 = v12 + 2;
      if (v12 + 2 < a4 && (*a3)(v10, (uint64_t)(v10 + 1)))
      {
        ++v10;
        v8 = v13;
      }
      v14 = *v10;
      *v10 = 0;
      v15 = *v11;
      *v11 = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    while (v8 <= v9);
    v16 = (WTF::StringImpl **)((char *)a2 - 8);
    if (v10 == (WTF::StringImpl **)((char *)a2 - 8))
    {
      result = *v10;
      *v10 = v21;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v17 = *v16;
      *v16 = 0;
      v18 = *v10;
      *v10 = v17;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = (uint64_t)(v10 + 1);
      v20 = *v16;
      *v16 = v21;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      return std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v7, v19, a3, (v19 - (uint64_t)v7) >> 3);
    }
  }
  return result;
}

WTF::StringImpl *std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, uint64_t a2, uint64_t (**a3)(WTF::StringImpl **, uint64_t), uint64_t a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[9];

  v6 = a4 - 2;
  if (a4 < 2)
    return result;
  v20[7] = v4;
  v20[8] = v5;
  v8 = result;
  v9 = v6 >> 1;
  v10 = (WTF::StringImpl **)((char *)result + 8 * (v6 >> 1));
  v11 = (WTF::StringImpl **)(a2 - 8);
  result = (WTF::StringImpl *)(*a3)(v10, a2 - 8);
  if (!(_DWORD)result)
    return result;
  v13 = *v11;
  *v11 = 0;
  v20[0] = v13;
  do
  {
    v14 = v10;
    v15 = *v10;
    *v10 = 0;
    v16 = *v11;
    *v11 = v15;
    if (!v16)
      goto LABEL_7;
    if (*(_DWORD *)v16 != 2)
    {
      *(_DWORD *)v16 -= 2;
LABEL_7:
      if (!v9)
        break;
      goto LABEL_8;
    }
    WTF::StringImpl::destroy(v16, v12);
    if (!v9)
      break;
LABEL_8:
    v9 = (v9 - 1) >> 1;
    v10 = (WTF::StringImpl **)((char *)v8 + 8 * v9);
    v11 = v14;
  }
  while (((*a3)(v10, (uint64_t)v20) & 1) != 0);
  v17 = v20[0];
  v20[0] = 0;
  result = *v14;
  *v14 = v17;
  if (result)
  {
    v18 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
      goto LABEL_13;
    WTF::StringImpl::destroy(result, v12);
    result = v20[0];
    v20[0] = 0;
    if (result)
    {
      v18 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
LABEL_13:
        *(_DWORD *)result = v18;
    }
  }
  return result;
}

uint64_t WebCore::ResourceErrorBase::ResourceErrorBase(uint64_t result, _DWORD **a2, int a3, uint64_t a4, _DWORD **a5, char a6, char a7)
{
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  _DWORD *v10;

  v7 = *a2;
  if (*a2)
    *v7 += 2;
  *(_QWORD *)result = v7;
  v8 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v8 += 2;
  *(_QWORD *)(result + 8) = v8;
  v9 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(result + 16) = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(result + 32) = v9;
  v10 = *a5;
  if (*a5)
    *v10 += 2;
  *(_QWORD *)(result + 48) = v10;
  *(_DWORD *)(result + 56) = a3;
  *(_BYTE *)(result + 60) = a6;
  *(_BYTE *)(result + 61) = a7;
  return result;
}

WTF::StringImpl *WebCore::computeReferrer(WebCore *this, WebCore::ScriptExecutionContext *a2, const WTF::String *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;

  if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)this = v15;
    *((_DWORD *)this + 4) = 0;
    return result;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::ScriptExecutionContext *, const WTF::String *, uint64_t))(*(_QWORD *)a2 + 120))(&v15, a2, a3, 1);
  if ((v16 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v17;
    *(_BYTE *)this = 33;
    *((_QWORD *)this + 1) = v7;
    v8 = 1;
    goto LABEL_29;
  }
  if (WTF::URL::protocolIs())
  {
    v10 = WTF::URL::path((WTF::URL *)&v15);
    if ((char *)v10 == "client" || v9 != 6)
    {
      if ((char *)v10 == "client" && v9 == 6)
        goto LABEL_27;
    }
    else if (((unint64_t)v9 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v10 == 99 && *(_DWORD *)(v10 + 1) == 1852139884 && *(_DWORD *)(v10 + 2) == 1953391977)
        goto LABEL_27;
    }
    else if (*(_WORD *)v10 == 99
           && *(_QWORD *)(v10 + 2) == 0x6E00650069006CLL
           && *(_QWORD *)(v10 + 4) == 0x74006E00650069)
    {
      goto LABEL_27;
    }
  }
  WebCore::SecurityContext::securityOrigin(a2, v9);
  if (v12)
  {
    WebCore::SecurityContext::securityOrigin(a2, v11);
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    if ((WebCore::SecurityOrigin::canRequest(v13, (WebCore::ThreadableBlobRegistry *)&v15, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) != 0)
    {
      v14 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      v8 = 0;
      goto LABEL_28;
    }
  }
LABEL_27:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = 0;
  v14 = v17;
LABEL_28:
  *(_QWORD *)this = v14;
LABEL_29:
  *((_DWORD *)this + 4) = v8;
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::setMethod(WebCore *this, WTF **a2, const WTF::String *a3)
{
  uint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if ((WebCore::isValidHTTPToken(a3, (const WTF::String *)a2) & 1) == 0
    || ((v6 = *(_QWORD *)a3) == 0
      ? (v7 = 0, v8 = 0x100000000)
      : (v7 = *(unsigned __int16 **)(v6 + 8),
         v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32)),
        WebCore::isForbiddenMethod(v7, v8)))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v13;
    *(_BYTE *)this = 33;
    *((_QWORD *)this + 1) = v12;
    v11 = 1;
  }
  else
  {
    WebCore::normalizeHTTPMethod((uint64_t)a3, &v13);
    WebCore::ResourceRequestBase::setHTTPMethod(a2, &v13);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    v11 = 0;
    *(_BYTE *)this = 0;
  }
  *((_BYTE *)this + 16) = v11;
  return result;
}

unsigned int *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int **v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = 16 * v4 - 16 * (_QWORD)a2;
    v6 = (unsigned int **)(*(_QWORD *)result + 16 * (_QWORD)a2 + 8);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v3[3] = v2;
  return result;
}

uint64_t WebCore::FetchRequest::FetchRequest(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int *a6, uint64_t *a7)
{
  WebCore::ContextDestructionObserver *BodyOwner;
  WebCore::ResourceRequest *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  _BYTE v29[24];
  int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  BodyOwner = WebCore::FetchBodyOwner::FetchBodyOwner((WebCore::ContextDestructionObserver *)a1, a2, a3, a4);
  *(_QWORD *)BodyOwner = &off_1E3355D08;
  v13 = (WebCore::ContextDestructionObserver *)((char *)BodyOwner + 288);
  v14.n128_f64[0] = WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)BodyOwner + 288, (uint64_t *)a5);
  v15 = *(_QWORD *)(a5 + 152);
  *(_QWORD *)(a5 + 152) = 0;
  *(_QWORD *)(a1 + 440) = v15;
  v16 = *(_QWORD *)(a5 + 160);
  *(_QWORD *)(a5 + 160) = 0;
  *(_QWORD *)(a1 + 448) = v16;
  v17 = *(_QWORD *)(a5 + 168);
  *(_QWORD *)(a5 + 168) = 0;
  *(_QWORD *)(a1 + 456) = v17;
  v18 = *(_QWORD *)(a5 + 176);
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a5 + 184);
  *(_QWORD *)(a1 + 464) = v18;
  v19 = *(_QWORD *)(a5 + 192);
  *(_QWORD *)(a5 + 192) = 0;
  *(_QWORD *)(a1 + 480) = v19;
  if ((*(_BYTE *)(a1 + 472) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v13);
    *(_BYTE *)(a1 + 472) |= 1u;
  }
  v20 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *, __n128))(*(_QWORD *)a2 + 256))(a2, v14);
  v29[0] = 0;
  v30 = -1;
  v21 = *(unsigned int *)(v20 + 32);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E3355B90[v21])(&v28, v29, v20 + 8);
    v30 = v21;
  }
  v31 = 1;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(a1 + 488, (uint64_t)v13, (uint64_t)v29);
  if (v31 && v30 != -1)
    ((void (*)(char *, _BYTE *))off_1E3355B80[v30])(&v28, v29);
  v22 = *a6;
  *(_DWORD *)(a1 + 563) = *(int *)((char *)a6 + 3);
  *(_DWORD *)(a1 + 560) = v22;
  v23 = *((_QWORD *)a6 + 1);
  *((_QWORD *)a6 + 1) = 0;
  *(_QWORD *)(a1 + 568) = v23;
  v24 = *((_OWORD *)a6 + 2);
  *(_OWORD *)(a1 + 576) = *((_OWORD *)a6 + 1);
  *(_OWORD *)(a1 + 592) = v24;
  *(_BYTE *)(a1 + 608) = 2;
  v25 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 616) = v25;
  v26 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v26 + 24) = 1;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)v26 = &unk_1E33A4FC0;
  *(_QWORD *)(v26 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v26 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v26 + 32), a2);
  *(_QWORD *)v26 = off_1E33A0468;
  *(_QWORD *)(v26 + 32) = &unk_1E33A04E0;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 112) = 0u;
  *(_OWORD *)(v26 + 128) = 0u;
  *(_QWORD *)(v26 + 144) = 0;
  *(_QWORD *)(v26 + 152) = 0;
  *(_QWORD *)(v26 + 136) = 10;
  *(_QWORD *)(a1 + 624) = v26;
  *(_QWORD *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 640) = 1;
  *(_BYTE *)(a1 + 435) = 3;
  return a1;
}

uint64_t WebCore::FetchHeaders::FetchHeaders(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v4 = *(unsigned int *)(a2 + 20);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
      goto LABEL_29;
    v5 = WTF::fastMalloc((WTF *)(16 * v4));
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = v7 + 16 * v6;
      do
      {
        *(_WORD *)v5 = *(_WORD *)v7;
        v9 = *(_DWORD **)(v7 + 8);
        if (v9)
          *v9 += 2;
        *(_QWORD *)(v5 + 8) = v9;
        v7 += 16;
        v5 += 16;
      }
      while (v7 != v8);
    }
  }
  v10 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19533750CLL);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
    *(_DWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 24) = v13;
    v14 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(a2 + 24);
      v16 = v15 + 16 * v14;
      do
      {
        v17 = *(_DWORD **)v15;
        if (*(_QWORD *)v15)
          *v17 += 2;
        *v13 = v17;
        v18 = *(_DWORD **)(v15 + 8);
        if (v18)
          *v18 += 2;
        v13[1] = v18;
        v15 += 16;
        v13 += 2;
      }
      while (v15 != v16);
    }
  }
  v11 = *(unsigned int *)(a2 + 52);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v11;
  if ((_DWORD)v11)
  {
    if (!(v11 >> 29))
    {
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 48) = v11;
      *(_QWORD *)(a1 + 40) = v19;
      v20 = *(unsigned int *)(a2 + 52);
      if ((_DWORD)v20)
      {
        v21 = *(_DWORD ***)(a2 + 40);
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          if (*v21)
            *v23 += 2;
          *v19++ = v23;
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      goto LABEL_10;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x195337504);
  }
LABEL_10:
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::FetchBodyWithType,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v7;
  char v8;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(WTF::StringImpl **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v7 = (_DWORD *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v7)
        {
          if (v7[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
          else
            --v7[4];
        }
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)(a1 + 16), a2);
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v5])(&v8, a1);
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

void std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (this)
  {
    v3 = (WTF *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v7 = *((_QWORD *)v3 + 1);
        --*(_QWORD *)(v7 + 16);
        *((_QWORD *)v3 + 1) = 0;
        if (*(_DWORD *)(v7 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        else
          --*(_DWORD *)(v7 + 24);
        WTF::fastFree(v3, this);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    v4 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    WTF::fastFree(this, this);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPNS_4spanIKhLm18446744073709551615EEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::FormData *WTF::RefCounted<WebCore::FormData>::deref(WebCore::FormData *result, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::FormData::~FormData(result, a2);
    return (WebCore::FormData *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &>(WTF::StringImpl ****a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v4 = **a1;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(WTF::StringImpl **)(v5 + 48);
  if (v6)
  {
    if (*((_DWORD *)v6 + 1))
    {
      *(_DWORD *)v6 += 2;
      v7 = *v4;
      *v4 = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  v9 = 1;
  v10 = 0;
  v13 = 0;
  v8 = 0;
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 16) = 0;
  v11 = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  v12 = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v14 = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_DWORD *)(a3 + 88) = 0;
  v15 = 0;
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v10, a2);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v9])(&v16, &v8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  v2 = *a1;
  *a1 = 0;
  v4 = 4;
  v5 = 0;
  v8 = 0;
  v3 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 4;
  *(_DWORD *)(a2 + 16) = 0;
  v6 = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v7 = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v9 = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 88) = 0;
  v10 = 0;
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v5, a1);
  if (v4 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v4])(&v11, &v3);
}

_QWORD **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;

  v3 = *a1;
  *a1 = 0;
  v6 = 0;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v6);
  v14 = 0;
  v7 = 3;
  v8 = 0;
  v11 = 0;
  v6 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = 3;
  *(_DWORD *)(a2 + 16) = 0;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v12 = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 88) = 0;
  v13 = 0;
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v8, v4);
  if (v7 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v7])(&v15, &v6);
  return WTF::Ref<JSC::ArrayBuffer const,WTF::RawPtrTraits<JSC::ArrayBuffer const>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer const>>::~Ref(&v14);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &>(uint64_t *a1@<X0>, const WebCore::DOMFormData **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const WebCore::DOMFormData *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;

  v4 = *a1;
  v5 = *a2;
  *a2 = 0;
  v6 = bmalloc::api::isoAllocate();
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  WebCore::FormData::appendMultiPartKeyValuePairItems((WebCore::FormData *)v6, v5);
  v7 = (WTF *)*(unsigned int *)(v6 + 52);
  v22 = 0;
  v23 = 0;
  v24 = (int)v7;
  if ((_DWORD)v7)
  {
    v23 = (int)v7;
    v22 = (void *)WTF::fastMalloc(v7);
    memcpy(v22, *(const void **)(v6 + 40), *(unsigned int *)(v6 + 52));
  }
  v14 = "multipart/form-data; boundary=";
  v15 = 31;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v14, (uint64_t)&v22, &v25);
  v9 = v25;
  if (v25)
  {
    v10 = *(WTF::StringImpl ***)(v4 + 8);
    v25 = 0;
    v11 = *v10;
    *v10 = v9;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v25;
    v25 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = (WTF *)v22;
    if (v22)
    {
      v22 = 0;
      v23 = 0;
      WTF::fastFree(v13, v8);
    }
    LODWORD(v15) = 2;
    v16 = 0;
    v19 = 0;
    v14 = 0;
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 8) = 2;
    *(_DWORD *)(a3 + 16) = 0;
    v17 = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    v18 = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_BYTE *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    v20 = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_DWORD *)(a3 + 88) = 0;
    v21 = 0;
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v16, v8);
    if ((_DWORD)v15 != -1)
      ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v15])(&v25, &v14);
    if (*((_DWORD *)v5 + 4) == 1)
      (*(void (**)(const WebCore::DOMFormData *))(*(_QWORD *)v5 + 16))(v5);
    else
      --*((_DWORD *)v5 + 4);
  }
  else
  {
    __break(0xC471u);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  WTF::StringImpl **v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v4 = *a1;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  {
    v6 = (int *)WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::contentType;
    v7 = *(WTF::StringImpl ***)(v4 + 16);
    if (!WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::contentType)
      goto LABEL_5;
    v8 = *(_DWORD *)WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::contentType;
  }
  else
  {
    v6 = &WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::$_0::operator() const(void)::impl;
    v8 = WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::contentType = (uint64_t)&WebCore::HTTPHeaderValues::formURLEncodedContentType(void)::$_0::operator() const(void)::impl;
    v7 = *(WTF::StringImpl ***)(v4 + 16);
  }
  *v6 = v8 + 2;
LABEL_5:
  v9 = *v7;
  *v7 = (WTF::StringImpl *)v6;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = 5;
  v12 = 0;
  v15 = 0;
  v10 = 0;
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = 5;
  *(_DWORD *)(a3 + 16) = 0;
  v13 = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  v14 = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v16 = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_DWORD *)(a3 + 88) = 0;
  v17 = 0;
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v12, a2);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v11])(&v18, &v10);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  if (WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(*(_QWORD *)a1 + 8))
    || WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)a1 + 8)))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 33;
    *(_DWORD *)(a2 + 88) = 1;
  }
  else
  {
    v5 = *(_DWORD **)a1;
    *(_QWORD *)a1 = 0;
    ++*v5;
    v7 = 7;
    v8 = 0;
    v11 = 0;
    v6 = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 7;
    *(_DWORD *)(a2 + 16) = 0;
    v9 = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    v10 = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_BYTE *)(a2 + 56) = 0;
    v12 = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 80) = v5;
    *(_DWORD *)(a2 + 88) = 0;
    v13 = 0;
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)&v8, v4);
    if (v7 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v7])(&v14, &v6);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_0,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_1,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_2,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_3,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_4,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_5,WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &,std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &>(uint64_t a1@<X0>, uint64_t *a2@<X1>, WebCore::HTTPHeaderValues *a3@<X8>)
{
  WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_6::operator()(a3, (uint64_t **)(*(_QWORD *)a1 + 24), a2);
}

uint64_t WebCore::ExceptionOr<WebCore::FetchBody>::ExceptionOr(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33559F8[v4])(&v13, a1, a2);
    *(_DWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v11;
  *(_DWORD *)(a1 + 88) = 0;
  return a1;
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v5 = (_BYTE *)*result;
  v4 = result[1];
  if (v4)
  {
    v6 = v4 - 1;
    if ((unint64_t)(v4 - 1) >> 31)
    {
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x195338090);
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(a2 + 12);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_22;
  v8 = (v6 + v7);
  if (__OFADD__((_DWORD)v6, (_DWORD)v7))
    goto LABEL_19;
  if (!(_DWORD)v8)
  {
    v10 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if ((v8 & 0x80000000) != 0)
  {
LABEL_19:
    v10 = 0;
    goto LABEL_14;
  }
  v9 = *(_BYTE **)a2;
  result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v8 + 20));
  v10 = v12;
  if (v12)
  {
    v11 = (_BYTE *)(v12 + 20);
    *(_DWORD *)v12 = 2;
    *(_DWORD *)(v12 + 4) = v8;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 4;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1)
      {
        *v11 = *v5;
        if (!(_DWORD)v7)
          goto LABEL_14;
LABEL_12:
        result = &v11[v6];
        if ((_DWORD)v7 == 1)
          *(_BYTE *)result = *v9;
        else
          result = memcpy(result, v9, v7);
        goto LABEL_14;
      }
      result = memcpy((void *)(v12 + 20), v5, v6);
    }
    if (!(_DWORD)v7)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_14:
  *a3 = v10;
  return result;
}

void WebCore::FetchBody::extract(std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String> &&,WTF::String&)::$_6::operator()(WebCore::HTTPHeaderValues *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = WebCore::HTTPHeaderValues::textPlainContentType(a1);
  WTF::String::operator=(*a2, (WTF::StringImpl **)v6);
  v7 = *a3;
  *a3 = 0;
  v9 = v7;
  v10 = 6;
  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  WebCore::ExceptionOr<WebCore::FetchBody>::ExceptionOr((uint64_t)a1, (uint64_t)&v9);
  WebCore::FetchBody::~FetchBody((WebCore::FetchBody *)&v9, v8);
}

WebCore::UserGestureToken *WTF::RefCounted<WebCore::UserGestureToken>::deref(WebCore::UserGestureToken *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::UserGestureToken::~UserGestureToken(result, a2);
    return (WebCore::UserGestureToken *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3355C08;
  WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3355C08;
  WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_0,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::call(uint64_t a1, char *a2)
{
  int v3;
  objc_class *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF **v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  WTF::StringImpl *v20;
  objc_class *v21;
  char v22;

  v3 = *((_DWORD *)a2 + 4);
  if (!v3)
  {
    v9 = *(WTF ***)a2;
    if (*(_QWORD *)a2)
    {
      WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)(a1 + 16));
      return (WTF::StringImpl *)WebCore::FragmentedSharedBuffer::append(*(_QWORD *)(a1 + 16), *v9, v9[1]);
    }
    v4 = *(objc_class **)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    v21 = v4;
    if (v10)
    {
      *(_QWORD *)(a1 + 16) = 0;
    }
    else
    {
      v10 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v10 + 24;
      *(_QWORD *)(v10 + 16) = 1;
      *(_BYTE *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
    }
    v19 = (char *)v10;
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v10, &v18);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v19, v11);
    v12 = (WTF::StringImpl *)*(unsigned int *)(a1 + 24);
    v13 = v18;
    if (*(_DWORD *)(v18 + 20))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8);
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 == -1)
        goto LABEL_29;
      v19 = &v22;
      v16 = (void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v19, v14 + 8);
    }
    else
    {
      v16 = 0;
    }
    WebCore::resolveWithTypeAndData((uint64_t *)&v21, v12, a1 + 32, v16, *(_QWORD *)(v13 + 48));
    result = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v18, v17);
    goto LABEL_11;
  }
  v4 = *(objc_class **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3 != 1)
  {
LABEL_29:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1953383D8);
  }
  v5 = *a2;
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v21 = 0;
  LOBYTE(v19) = v5;
  if (v6)
    *(_DWORD *)v6 += 2;
  v20 = v6;
  WebCore::DeferredPromise::reject((uint64_t)v4, (unsigned __int8 *)&v19, 0, &v21);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      if (!v6)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v6)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v6 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v7);
  else
    *(_DWORD *)v6 -= 2;
LABEL_11:
  if (v4)
  {
    if (*((_DWORD *)v4 + 4) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(objc_class *))(*(_QWORD *)v4 + 16))(v4);
    else
      --*((_DWORD *)v4 + 4);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_1,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_1>,WTF::DefaultRefDerefTraits<WebCore::FetchBodyConsumer::resolve(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::String const&,WebCore::FetchBodyOwner *,WebCore::ReadableStream *)::$_1>>,WebCore::ScriptExecutionContext &>::call@<X0>(uint64_t a1@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  WTF::StringImpl *result;
  unsigned int *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  v5 = *(_QWORD *)(a1 + 8);
  WebCore::extractMIMETypeFromMediaType(*(WebCore **)(a1 + 16), &v34);
  v7 = v34;
  if (!v34 || (v8 = *((unsigned int *)v34 + 1), !(_DWORD)v8))
  {
LABEL_17:
    WTF::String::convertToASCIILowercase((WTF::String *)&v34);
    v7 = v34;
    goto LABEL_18;
  }
  v9 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
  if ((*((_BYTE *)v34 + 16) & 4) != 0)
  {
    if (*v9 - 127 >= 0xFFFFFFA1)
    {
      v10 = 0;
      v11 = v9 + 1;
      while (v8 - 1 != v10)
      {
        v12 = v11[v10++] - 127;
        if (v12 < 0xFFFFFFA1)
          goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  else if (*(unsigned __int16 *)v9 - 127 >= 0xFFFFFFA1)
  {
    v10 = 0;
    v13 = v9 + 2;
    while (v8 - 1 != v10)
    {
      v14 = *(unsigned __int16 *)&v13[2 * v10++] - 127;
      if (v14 < 0xFFFFFFA1)
      {
LABEL_13:
        if (v10 >= v8)
          goto LABEL_17;
        goto LABEL_14;
      }
    }
    goto LABEL_17;
  }
LABEL_14:
  v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v15 += 2;
  v36 = v15;
LABEL_18:
  v34 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v16 = *(unsigned int **)(v5 + 8);
  if (v16)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v33 = v16;
    v17 = atomic_load(v16);
    if (v17 == 1)
      WebCore::FragmentedSharedBuffer::takeData((WTF *)v16, &v34);
    else
      WebCore::FragmentedSharedBuffer::copyData((WTF **)v16, (uint64_t *)&v34);
    if (v36)
    {
      v18 = *((unsigned int *)v36 + 1);
      if ((_DWORD)v18)
      {
        v19 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
        if ((*((_BYTE *)v36 + 16) & 4) != 0)
        {
          if (*v19 - 127 >= 0xFFFFFFA1)
          {
            v20 = 0;
            v21 = v19 + 1;
            while (v18 - 1 != v20)
            {
              v22 = v21[v20++] - 127;
              if (v22 < 0xFFFFFFA1)
                goto LABEL_36;
            }
            goto LABEL_40;
          }
        }
        else if (*(unsigned __int16 *)v19 - 127 >= 0xFFFFFFA1)
        {
          v20 = 0;
          v23 = v19 + 2;
          while (v18 - 1 != v20)
          {
            v24 = *(unsigned __int16 *)&v23[2 * v20++] - 127;
            if (v24 < 0xFFFFFFA1)
            {
LABEL_36:
              if (v20 >= v18)
                goto LABEL_40;
              goto LABEL_37;
            }
          }
          goto LABEL_40;
        }
LABEL_37:
        v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v25 += 2;
        v37 = v25;
        goto LABEL_41;
      }
    }
LABEL_40:
    WTF::String::convertToASCIILowercase((WTF::String *)&v36);
LABEL_41:
    v26 = bmalloc::api::isoAllocate();
    v27 = WebCore::Blob::Blob(v26, a2, (uint64_t)&v34, &v37);
    *a3 = v27;
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v27 + 24));
    v29 = v37;
    v37 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v34;
    if (v34)
    {
      v34 = 0;
      LODWORD(v35) = 0;
      WTF::fastFree(v30, v28);
    }
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v33, v28);
    goto LABEL_47;
  }
  v34 = 0;
  v35 = 0;
  WebCore::Blob::create(a3, a2, (uint64_t)&v34, &v36);
  if (v34)
    WTF::fastFree(v34, v31);
LABEL_47:
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::FetchBodyOwner::blob(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::FetchBodyOwner::blob(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::FetchBodyOwner::blob(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0>>,WebCore::ScriptExecutionContext &>::call@<X0>(WTF *result@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17[2];

  v5 = *(_QWORD *)(*((_QWORD *)result + 1) + 152);
  v17[0] = 0;
  v17[1] = 0;
  v6 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (WTF::StringImpl **)(*(_QWORD *)(v5 + 8) + 8);
    while (*((_WORD *)v8 - 4) != 26)
    {
      ++v7;
      v8 += 2;
      if (v6 == v7)
        goto LABEL_5;
    }
    if (v7 >= v6)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *v8;
    if (*v8)
      *(_DWORD *)v9 += 2;
  }
  else
  {
LABEL_5:
    v9 = 0;
  }
  v14 = v9;
  WebCore::extractMIMETypeFromMediaType((WebCore *)&v14, &v15);
  WebCore::Blob::normalizedContentType((WTF::String *)&v15, &v16);
  WebCore::Blob::create(a3, a2, (uint64_t)v17, &v16);
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v17[0];
  if (v17[0])
    return (WTF *)WTF::fastFree(v17[0], v10);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::loadingError(void)::$_0,WebCore::FetchBodyOwner::loadingError(void)::$_1,WebCore::FetchBodyOwner::loadingError(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::loadingError(void)::$_0,WebCore::FetchBodyOwner::loadingError(void)::$_1,WebCore::FetchBodyOwner::loadingError(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7[5];
  WTF::StringImpl *v8;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v8, 0, (uint64_t)v7, (_DWORD **)(a1 + 8), 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::loadingError(void)::$_0,WebCore::FetchBodyOwner::loadingError(void)::$_1,WebCore::FetchBodyOwner::loadingError(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  CFTypeRef result;

  v4 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v4 += 2;
  *(_QWORD *)a2 = v4;
  v5 = *(_DWORD **)(a1 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v6;
  v7 = *(_DWORD **)(a1 + 48);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 60);
  result = *(CFTypeRef *)(a1 + 64);
  *(_QWORD *)(a2 + 64) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::loadingException(void)::$_0,WebCore::FetchBodyOwner::loadingException(void)::$_1,WebCore::FetchBodyOwner::loadingException(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::loadingException(void)::$_0,WebCore::FetchBodyOwner::loadingException(void)::$_1,WebCore::FetchBodyOwner::loadingException(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>(char *a1@<X1>, uint64_t a2@<X8>)
{
  char v2;
  _DWORD *v3;

  v2 = *a1;
  v3 = (_DWORD *)*((_QWORD *)a1 + 1);
  if (v3)
    *v3 += 2;
  *(_BYTE *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::loadingException(void)::$_0,WebCore::FetchBodyOwner::loadingException(void)::$_1,WebCore::FetchBodyOwner::loadingException(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  _DWORD *v5;

  if (*(_BYTE *)(a1 + 61))
  {
    v3 = *(_DWORD **)(a1 + 48);
    if (v3)
      *v3 += 2;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = v5;
  }
  *(_BYTE *)a2 = 33;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::hasLoadingError(void)::$_0,WebCore::FetchBodyOwner::hasLoadingError(void)::$_1,WebCore::FetchBodyOwner::hasLoadingError(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::hasLoadingError(void)::$_0,WebCore::FetchBodyOwner::hasLoadingError(void)::$_1,WebCore::FetchBodyOwner::hasLoadingError(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchBodyOwner::hasLoadingError(void)::$_0,WebCore::FetchBodyOwner::hasLoadingError(void)::$_1,WebCore::FetchBodyOwner::hasLoadingError(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::Exception,WebCore::ResourceError> const&>()
{
  return 1;
}

uint64_t WebCore::ResourceErrorBase::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFFFFE | a2[2] & 1;
  v8 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8 & 0xFFFFFFFE;
  v9 = *(_DWORD *)(a1 + 16) & 0xFFFFFFFD | (2 * ((v8 >> 1) & 1));
  *(_DWORD *)(a1 + 16) = v9;
  v10 = v9 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 4) >> 2) & 1));
  *(_DWORD *)(a1 + 16) = v10;
  v11 = v10 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 4) >> 3) & 7));
  *(_DWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 16) = a2[2] & 0xFFFFFFC0 | v11 & 0x3F;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a2 + 20);
  *(_QWORD *)(a1 + 36) = *(uint64_t *)((char *)a2 + 36);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  v12 = a2[6];
  a2[6] = 0;
  v13 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v14;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::Exception,WebCore::ResourceError>>::__emplace[abi:sn180100]<2ul,WebCore::ResourceError>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v4 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3355AE0[v4])(&v14, a1);
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_DWORD *)(a1 + 16) & 0xFFFFFFFE | a2[2] & 1;
  *(_DWORD *)(a1 + 16) = v7;
  v8 = v7 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 4) >> 1) & 1));
  *(_DWORD *)(a1 + 16) = v8;
  v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 4) >> 2) & 1));
  *(_DWORD *)(a1 + 16) = v9;
  v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 4) >> 3) & 7));
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 16) = a2[2] & 0xFFFFFFC0 | v10 & 0x3F;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a2 + 20);
  *(_QWORD *)(a1 + 36) = *(uint64_t *)((char *)a2 + 36);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 4) &= ~1u;
  v11 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v11;
  v12 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_DWORD *)(a1 + 80) = 2;
  return a1;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = a1[1];
  if (!v4)
  {
    v8 = *a1;
LABEL_3:
    v9 = v4;
    v7 = *a2;
    v6 = *a3;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v8, &v7, &v6, a4);
  }
  --v4;
  v8 = *a1;
  if (!(v4 >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  char v9;
  uint64_t v10;
  _BOOL4 v11;

  v4 = *(_DWORD *)(result + 8);
  v5 = *a2;
  if (*a2)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 0)
    {
LABEL_15:
      *a4 = 0;
      return result;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  v9 = v7;
  if (v4 < 0)
    goto LABEL_15;
  if ((v9 & 1) != 0)
    goto LABEL_15;
  v7 = __OFADD__(v4, v8);
  v10 = (v4 + v8);
  if (v7)
    goto LABEL_15;
  v11 = !v5 || (*(_BYTE *)(v5 + 16) & 4) != 0;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v10, v11, *(int8x16_t **)result, *(_QWORD *)(result + 8), v5, *a3, a4);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  uint64_t v14;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v14;
        if (v14)
        {
          *(_DWORD *)v14 = 2;
          *(_DWORD *)(v14 + 4) = v11;
          *(_QWORD *)(v14 + 8) = v14 + 20;
          *(_DWORD *)(v14 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)(v14 + 20), a3, a4, a5, a6);
        }
        goto LABEL_6;
      }
LABEL_12:
      v13 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v14;
  if (v14)
  {
    *(_DWORD *)v14 = 2;
    *(_DWORD *)(v14 + 4) = v11;
    *(_QWORD *)(v14 + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v14 + 20), a3, a4, a5, a6);
  }
LABEL_6:
  *a7 = v13;
  return result;
}

WTF::StringImpl *_ZNK3WTF10InterleaveINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEZNS_10interleaveIS5_NS_12ASCIILiteralEEEDcRKT_RKT0_EUlTyTyRS9_SE_E_S7_E10writeUsingINS_13StringBuilderEEEvSF_(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(uint64_t ***)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 12);
  if ((_DWORD)v3)
  {
    v5 = *v2;
    v6 = **v2;
    if (*(_DWORD *)(a2 + 16))
      v7 = 0;
    else
      v7 = *(_QWORD *)(a2 + 8) == 0;
    if (v7)
    {
      if (v6)
        *(_DWORD *)v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v8 = *v5;
      if (*v5)
        LODWORD(v8) = *(_DWORD *)(v8 + 4);
      *(_DWORD *)(a2 + 16) = v8;
    }
    else if (v6 && (*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    if ((_DWORD)v3 != 1)
    {
      v9 = v5 + 1;
      v10 = 8 * v3 - 8;
      do
      {
        WTF::StringBuilder::append();
        v12 = *v9;
        if (*(_DWORD *)(a2 + 16))
          v13 = 0;
        else
          v13 = *(_QWORD *)(a2 + 8) == 0;
        if (v13)
        {
          if (v12)
            *(_DWORD *)v12 += 2;
          result = *(WTF::StringImpl **)a2;
          *(_QWORD *)a2 = v12;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
          }
          v14 = *v9;
          if (*v9)
            LODWORD(v14) = *(_DWORD *)(v14 + 4);
          *(_DWORD *)(a2 + 16) = v14;
        }
        else if (v12 && (*(_BYTE *)(v12 + 16) & 4) == 0)
        {
          result = (WTF::StringImpl *)WTF::StringBuilder::append();
        }
        else
        {
          result = (WTF::StringImpl *)WTF::StringBuilder::append();
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  _BYTE *v21;
  size_t v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  _QWORD v29[3];

  v13 = result;
  v29[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v29[0];
        if (!v29[0])
          goto LABEL_24;
        v16 = (_BYTE *)(v29[0] + 20);
        *(_DWORD *)v29[0] = 2;
        *(_DWORD *)(v15 + 4) = v13;
        *(_QWORD *)(v15 + 8) = v15 + 20;
        *(_DWORD *)(v15 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v16 = a3->i8[0];
          else
            result = (uint64_t)memcpy((void *)(v15 + 20), a3, a4);
        }
        v17 = &v16[a4];
        v18 = 0;
        if ((a5 & 0x80000000) != 0)
        {
          v25 = -a5;
          do
          {
            *((_BYTE *)&v29[1] + v18-- + 4) = (v25 % 0xA) | 0x30;
            v20 = v25 > 9;
            v25 /= 0xAu;
          }
          while (v20);
          v26 = v18 + 12;
          v21 = (char *)&v29[1] + v18 + 4;
          *v21 = 45;
          if (v18 + 14 <= 14)
          {
            if (v26 <= 12)
              v26 = 12;
            v22 = v26 - v18 - 11;
            goto LABEL_13;
          }
        }
        else
        {
          v19 = a5;
          do
          {
            *((_BYTE *)&v29[1] + v18-- + 4) = (v19 % 0xA) | 0x30;
            v20 = v19 > 9;
            v19 /= 0xAu;
          }
          while (v20);
          if (v18 + 14 <= 13)
          {
            v21 = (char *)&v29[1] + v18 + 5;
            v22 = -v18;
LABEL_13:
            result = (uint64_t)memcpy(v17, v21, v22);
          }
        }
        if ((a5 & 0x80000000) != 0)
        {
          v27 = -a5;
          v23 = 1;
          do
          {
            ++v23;
            v28 = v27 >= 0xA;
            v27 /= 0xAu;
          }
          while (v28);
        }
        else
        {
          v23 = 0;
          do
          {
            ++v23;
            v20 = a5 > 9;
            a5 /= 0xAu;
          }
          while (v20);
        }
        if (a7)
        {
          result = (uint64_t)&v17[v23];
          if (a7 == 1)
            *(_BYTE *)result = a6->i8[0];
          else
            result = (uint64_t)memcpy((void *)result, a6, a7);
        }
        goto LABEL_24;
      }
LABEL_28:
      v15 = 0;
      goto LABEL_24;
    }
LABEL_27:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_24;
  }
  if (!(_DWORD)result)
    goto LABEL_27;
  if (result > 0x7FFFFFEF)
    goto LABEL_28;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v29[0];
  if (v29[0])
  {
    v24 = (char *)(v29[0] + 20);
    *(_DWORD *)v29[0] = 2;
    *(_DWORD *)(v15 + 4) = v13;
    *(_QWORD *)(v15 + 8) = v15 + 20;
    *(_DWORD *)(v15 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v24, a3, a4, a5, a6, a7);
  }
LABEL_24:
  *a8 = v15;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, int8x16_t *a2, int a3, unsigned int a4, int8x16_t *a5, int a6)
{
  char *v6;
  char *v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  char *v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  unsigned int v36;
  _BYTE v37[13];
  uint64_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v7 = &result[2 * (a3 & 0xFFFFFFC0)];
    v8 = 0uLL;
    do
    {
      v39.val[0] = *a2;
      v9 = a2[1];
      v41.val[0] = a2[2];
      v10 = a2[3];
      a2 += 4;
      v11 = v10;
      v41.val[1] = 0uLL;
      v43.val[0] = v9;
      v39.val[1] = 0uLL;
      v12 = result;
      vst2q_s8(v12, v39);
      v12 += 32;
      v43.val[1] = 0uLL;
      vst2q_s8(v12, v43);
      v13 = result + 64;
      vst2q_s8(v13, v41);
      v14 = result + 96;
      vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
      result += 128;
    }
    while (result != v7);
    result = v7;
  }
  while (result != v6)
  {
    v15 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v15;
    result += 2;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v21 = -a4;
    v22 = 12;
    do
    {
      v37[v22--] = (v21 % 0xA) | 0x30;
      v18 = v21 > 9;
      v21 /= 0xAu;
    }
    while (v18);
    v37[v22] = 45;
    if (v22 + 2 <= 14)
    {
      v23 = v6;
      do
      {
        *(_WORD *)v23 = v37[v22];
        v23 += 2;
        v18 = v22++ < 12;
      }
      while (v18);
    }
  }
  else
  {
    v16 = 0;
    v17 = a4;
    do
    {
      v37[v16-- + 12] = (v17 % 0xA) | 0x30;
      v18 = v17 > 9;
      v17 /= 0xAu;
    }
    while (v18);
    if (v16 + 14 <= 13)
    {
      v19 = v6;
      do
      {
        *(_WORD *)v19 = *((unsigned __int8 *)&v38 + v16);
        v19 += 2;
        v20 = __CFADD__(v16++, 1);
      }
      while (!v20);
    }
  }
  if ((a4 & 0x80000000) != 0)
  {
    v36 = -a4;
    v24 = 1;
    do
    {
      ++v24;
      v20 = v36 >= 0xA;
      v36 /= 0xAu;
    }
    while (v20);
  }
  else
  {
    v24 = 0;
    do
    {
      ++v24;
      v18 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v18);
  }
  v25 = &v6[2 * v24];
  v26 = &v25[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v27 = &v25[2 * (a6 & 0xFFFFFFC0)];
    v28 = 0uLL;
    do
    {
      v40.val[0] = *a5;
      v29 = a5[1];
      v42.val[0] = a5[2];
      v30 = a5[3];
      a5 += 4;
      v31 = v30;
      v42.val[1] = 0uLL;
      v44.val[0] = v29;
      v40.val[1] = 0uLL;
      v32 = v25;
      vst2q_s8(v32, v40);
      v32 += 32;
      v44.val[1] = 0uLL;
      vst2q_s8(v32, v44);
      v33 = v25 + 64;
      vst2q_s8(v33, v42);
      v34 = v25 + 96;
      vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
      v25 += 128;
    }
    while (v25 != v27);
    v25 = v27;
  }
  while (v25 != v26)
  {
    v35 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v25 = v35;
    v25 += 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FetchResponse::addAbortSteps(WTF::Ref<WebCore::AbortSignal,WTF::RawPtrTraits<WebCore::AbortSignal>,WTF::DefaultRefDerefTraits<WebCore::AbortSignal>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3355CC8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FetchResponse::addAbortSteps(WTF::Ref<WebCore::AbortSignal,WTF::RawPtrTraits<WebCore::AbortSignal>,WTF::DefaultRefDerefTraits<WebCore::AbortSignal>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3355CC8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::FetchResponse::addAbortSteps(WTF::Ref<WebCore::AbortSignal,WTF::RawPtrTraits<WebCore::AbortSignal>,WTF::DefaultRefDerefTraits<WebCore::AbortSignal>> &&)::$_0,void,JSC::JSValue>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  WebCore::AbortSignal *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int *v18;
  WTF *v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::FetchBodyConsumer *v28;
  uint64_t v29;
  uint64_t v30;
  bmalloc::api *v31;
  void *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v3 = *(_DWORD **)(v2 + 8);
  if (!v3)
    return;
  v4 = *(_QWORD *)(a1 + 8);
  ++v3[6];
  v5 = *(WebCore::AbortSignal **)(v4 + 848);
  *(_QWORD *)(v4 + 848) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v5, a2);
      bmalloc::api::isoDeallocate(v31, v32);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *(unsigned int *)(v4 + 280);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_78:
    v33 = std::__throw_bad_optional_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &&,unsigned long long)::$_0,WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &,unsigned long long)::$_1,WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &,unsigned long long)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &>(v33);
    return;
  }
  v7 = v34;
  v34 = (WTF::StringImpl *)&v37;
  if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14FetchBodyOwner15hasLoadingErrorEvE3__0JZNKS9_15hasLoadingErrorEvE3__1ZNKS9_15hasLoadingErrorEvE3__2EEEEEJRKNS0_6__implIJDnNS8_9ExceptionENS8_13ResourceErrorEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v34, v4 + 200) & 1) == 0)
  {
    v9 = *(unsigned int *)(v4 + 280);
    if ((_DWORD)v9 != -1)
    {
      if ((_DWORD)v9 == 1)
      {
        *(_BYTE *)(v4 + 200) = 16;
        v10 = *(WTF::StringImpl **)(v4 + 208);
        *(_QWORD *)(v4 + 208) = v7;
        if (!v10)
          goto LABEL_18;
        if (*(_DWORD *)v10 != 2)
        {
          *(_DWORD *)v10 -= 2;
          goto LABEL_18;
        }
        goto LABEL_71;
      }
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E3355AE0[v9])(&v34, v4 + 200);
    }
    *(_BYTE *)(v4 + 200) = 16;
    *(_QWORD *)(v4 + 208) = v7;
    *(_DWORD *)(v4 + 280) = 1;
    goto LABEL_18;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_18;
    }
    v10 = v7;
LABEL_71:
    WTF::StringImpl::destroy(v10, v8);
  }
LABEL_18:
  v11 = *(_QWORD *)(v4 + 808);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = 0;
    if (v12)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = v34;
      LOBYTE(v34) = 16;
      v35 = v13;
      v36 = 1;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v34);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v36])(&v37, &v34);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    v14 = *(_QWORD *)(v4 + 808);
    v15 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    if (v15)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = v34;
      LOBYTE(v34) = 16;
      v35 = v16;
      v36 = 1;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v34);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3355BB0[v36])(&v37, &v34);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v17 = *(_QWORD *)(v4 + 144);
  if (v17)
  {
    if (*(_BYTE *)(v17 + 48))
    {
      *(_QWORD *)(v4 + 144) = 0;
LABEL_45:
      if (*(_DWORD *)(v17 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      else
        --*(_DWORD *)(v17 + 32);
      goto LABEL_47;
    }
    v18 = (unsigned int *)WebCore::FetchBodyOwner::loadingException((uint64_t *)&v34, (WebCore::FetchBodyOwner *)v4);
    if (!(_BYTE)v36)
      goto LABEL_75;
    if (*(_BYTE *)(v17 + 24))
    {
      WebCore::ReadableStreamDefaultController::error((_DWORD **)(v17 + 16), (unsigned __int8 *)&v34);
      v19 = *(WTF **)(v17 + 8);
      if (v19)
      {
        *(_QWORD *)(v17 + 8) = 0;
        v20 = *(_DWORD **)v19;
        *(_QWORD *)v19 = 0;
        if (v20)
        {
          if (v20[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
          else
            --v20[4];
        }
        WTF::fastFree(v19, v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      }
      v18 = *(unsigned int **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = 0;
      if (!v18)
        goto LABEL_40;
      do
      {
        v21 = __ldaxr(v18);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v18));
      if (v22)
        goto LABEL_40;
      goto LABEL_76;
    }
    goto LABEL_78;
  }
LABEL_47:
  while (*(_BYTE *)(v4 + 128))
  {
    v18 = (unsigned int *)WebCore::FetchBodyOwner::loadingException((uint64_t *)&v34, (WebCore::FetchBodyOwner *)v4);
    if ((_BYTE)v36)
    {
      WebCore::FetchBodyConsumer::loadingFailed(v4 + 56, (uint64_t)&v34);
      if ((_BYTE)v36)
      {
        v24 = v35;
        v35 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v8);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      break;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v8);
LABEL_40:
    if ((_BYTE)v36)
    {
      v23 = v35;
      v35 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v8);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    v17 = *(_QWORD *)(v4 + 144);
    *(_QWORD *)(v4 + 144) = 0;
    if (v17)
      goto LABEL_45;
  }
  v25 = *(WTF **)(v4 + 808);
  *(_QWORD *)(v4 + 808) = 0;
  if (v25)
  {
    v26 = *((_QWORD *)v25 + 2);
    *((_QWORD *)v25 + 2) = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = *((_QWORD *)v25 + 4);
    if (v27)
    {
      v28 = *(WebCore::FetchBodyConsumer **)(v27 + 40);
      if (v28)
        WebCore::FetchBodyConsumer::clean(v28, v8);
      v29 = *(_QWORD *)(v27 + 32);
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    v34 = 0;
    std::default_delete<WebCore::FetchResponse::Loader>::operator()[abi:sn180100]((int)&v34, v25);
  }
  v30 = *(_QWORD *)(v4 + 816);
  *(_QWORD *)(v4 + 816) = 0;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  if (v3[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  else
    --v3[6];
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &&,unsigned long long)::$_0,WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &,unsigned long long)::$_1,WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &,unsigned long long)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::FormData **v5;
  WebCore::FormData *v6;
  WebCore::FormData *v7;
  uint64_t v8;
  bmalloc::api *v9;
  void *v10;
  __int128 v11;
  _OWORD v12[4];
  uint64_t v13;
  char v14;

  v3 = **a1;
  if (!*(_BYTE *)(v3 + 128))
  {
    v11 = 0u;
    memset(v12, 0, 48);
    *(_QWORD *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_BYTE *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 104) = 0;
    v12[3] = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_BYTE *)(v3 + 128) = 1;
    v13 = 0;
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)v12, a2);
    if (DWORD2(v11) != -1)
      ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[DWORD2(v11)])(&v14, &v11);
    if (!*(_BYTE *)(v3 + 128))
    {
      __break(1u);
      return;
    }
  }
  v4 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v4 == -1)
    goto LABEL_11;
  v5 = (WebCore::FormData **)(v3 + 40);
  if ((_DWORD)v4 != 2)
  {
    ((void (*)(__int128 *, WebCore::FormData **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v4])(&v11, v5);
LABEL_11:
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)(v3 + 40) = v8;
    *(_DWORD *)(v3 + 48) = 2;
    return;
  }
  v6 = (WebCore::FormData *)*a2;
  *a2 = 0;
  v7 = *v5;
  *v5 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::FormData::~FormData(v7, v5);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &&,unsigned long long)::$_0,WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &,unsigned long long)::$_1,WebCore::FetchResponse::setBodyData(std::variant<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &,unsigned long long)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  _OWORD v7[4];
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_BYTE *)(v3 + 128))
    goto LABEL_5;
  v6 = 0u;
  memset(v7, 0, 48);
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_BYTE *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  v7[3] = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_BYTE *)(v3 + 128) = 1;
  v8 = 0;
  WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)v7, a2);
  if (DWORD2(v6) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[DWORD2(v6)])(&v9, &v6);
  if (*(_BYTE *)(v3 + 128))
  {
LABEL_5:
    v4 = *a2;
    *a2 = 0;
    *(_QWORD *)&v6 = v4;
    WebCore::FetchBodyConsumer::setData(v3 + 56, (unsigned int **)&v6);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v6, v5);
  }
  else
  {
    __break(1u);
  }
}

void sub_195339D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19AEA7644](v1, 0x10E0C40601037C8);
  _Unwind_Resume(a1);
}

void _WKViewSetWindow(uint64_t a1, void *a2)
{
  id v4;
  const __CFArray *v5;
  _QWORD *ValueAtIndex;
  _QWORD *v7;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  CFIndex v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  const __CFArray *v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  char v25;

  if (*(void **)(a1 + 24) != a2)
  {
    v4 = a2;

    *(_QWORD *)(a1 + 24) = a2;
    v5 = *(const __CFArray **)(a1 + 40);
    if (v5)
    {
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 40)))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
        if (ValueAtIndex)
        {
          v7 = ValueAtIndex;
          _WKViewSetWindow(ValueAtIndex, a2);
          v8 = v7[4];
          if (v8)
          {
            v9 = *(const __CFArray **)(v8 + 40);
            if (v9)
            {
              Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 40));
              if (Count < 1)
              {
LABEL_11:
                WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 490, "WKViewRef WKViewNextSibling(WKViewRef)", "internal error, view is not present in superview subviews", v11, v12, v13, v14, v25);
              }
              else
              {
                v15 = Count;
                v16 = 0;
                while (CFArrayGetValueAtIndex(v9, v16) != v7)
                {
                  if (v15 == ++v16)
                    goto LABEL_11;
                }
                if (v16 + 1 < CFArrayGetCount(v9))
                {
                  v18 = CFArrayGetValueAtIndex(v9, v16 + 1);
                  if (v18)
                  {
                    v19 = v18;
                    do
                    {
                      _WKViewSetWindow(v19, a2);
                      v20 = v19[4];
                      if (!v20)
                        break;
                      v21 = *(const __CFArray **)(v20 + 40);
                      if (!v21)
                        break;
                      v22 = CFArrayGetCount(*(CFArrayRef *)(v20 + 40));
                      if (v22 < 1)
                        goto LABEL_11;
                      v23 = v22;
                      v24 = 0;
                      while (CFArrayGetValueAtIndex(v21, v24) != v19)
                      {
                        if (v23 == ++v24)
                          goto LABEL_11;
                      }
                      if (v24 + 1 >= CFArrayGetCount(v21))
                        break;
                      v19 = CFArrayGetValueAtIndex(v21, v24 + 1);
                    }
                    while (v19);
                  }
                }
              }
            }
          }
        }
      }
    }
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      if (*(_QWORD *)v17)
        (*(void (**)(uint64_t, _QWORD, _QWORD))v17)(a1, 0, *(_QWORD *)(v17 + 8));
    }
  }
}

uint64_t WKViewResignFirstResponder(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 16)) != 0)
    return v2();
  else
    return 1;
}

uint64_t WKViewAcceptsFirstResponder(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 16)) != 0)
    return v2();
  else
    return 1;
}

uint64_t WKViewBecomeFirstResponder(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 16)) != 0)
    return v2();
  else
    return 1;
}

void sub_19533A9CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19533AC0C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_19533ADF4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_19533B284(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_19533B4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19533B5CC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WKRectFill(CGContext *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGRect rects;
  uint64_t v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v18 = *MEMORY[0x1E0C80C00];
  if (a4 > 0.0 && a5 > 0.0)
  {
    CGContextSaveGState(a1);
    CGContextGetCTM(&v16, a1);
    v19.origin.x = a2;
    v19.origin.y = a3;
    v19.size.width = a4;
    v19.size.height = a5;
    v20 = CGRectApplyAffineTransform(v19, &v16);
    v21 = CGRectIntegral(v20);
    x = v21.origin.x;
    y = v21.origin.y;
    width = v21.size.width;
    height = v21.size.height;
    CGContextGetCTM(&v14, a1);
    CGAffineTransformInvert(&v15, &v14);
    v22.origin.x = x;
    v22.origin.y = y;
    v22.size.width = width;
    v22.size.height = height;
    rects = CGRectApplyAffineTransform(v22, &v15);
    CGContextGetCompositeOperation();
    CGContextSetCompositeOperation();
    CGContextFillRects(a1, &rects, 1uLL);
    CGContextSetCompositeOperation();
    CGContextRestoreGState(a1);
  }
}

void *WKSetCurrentGraphicsContext(uint64_t a1)
{
  unint64_t v2;
  pthread_key_t *v3;
  void *result;
  _QWORD *v5;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&CurrentThreadContext(void)::flag);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&CurrentThreadContext(void)::flag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CurrentThreadContext(void)::$_0 &&>>);
  }
  v3 = (pthread_key_t *)threadContext;
  result = pthread_getspecific(*(_QWORD *)threadContext);
  v5 = result;
  if (!result)
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v5[1] = v3;
    result = (void *)pthread_setspecific(*v3, v5);
    *v5 = 0;
  }
  *v5 = a1;
  return result;
}

void sub_19533BB64(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WKGetCurrentGraphicsContext()
{
  unint64_t v0;
  pthread_key_t *v1;
  void *v2;
  uint64_t result;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  v0 = atomic_load(&CurrentThreadContext(void)::flag);
  if (v0 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&CurrentThreadContext(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CurrentThreadContext(void)::$_0 &&>>);
  }
  v1 = (pthread_key_t *)threadContext;
  v2 = pthread_getspecific(*(_QWORD *)threadContext);
  if (v2)
    return *(_QWORD *)v2;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v4[1] = v1;
  pthread_setspecific(*v1, v4);
  result = 0;
  *v4 = 0;
  return result;
}

void sub_19533BC14(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void _WKViewDealloc(_WAKObject *a1)
{
  _WKClassInfo *var1;
  CFRange v3;

  var1 = a1[2].var1;
  if (var1)
  {
    v3.length = CFArrayGetCount((CFArrayRef)a1[2].var1);
    v3.location = 0;
    CFArrayApplyFunction((CFArrayRef)var1, v3, (CFArrayApplierFunction)_WKViewClearSuperview, 0);
    CFRelease(a1[2].var1);
    a1[2].var1 = 0;
  }

  a1[1].var1 = 0;
}

double *WKViewCreateWithFrame(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double *result;

  result = (double *)malloc_type_calloc(0x70uLL, 1uLL, 0x2B517A3EuLL);
  if (result)
  {
    *((_QWORD *)result + 1) = &WKViewClassInfo;
    ++*(_DWORD *)result;
    result[6] = a2;
    result[7] = a3;
    *((_OWORD *)result + 4) = *MEMORY[0x1E0C9D538];
    result[10] = a4;
    result[11] = a5;
    *((_QWORD *)result + 2) = a1;
    result[12] = 0.0078125;
  }
  return result;
}

double WKViewGetBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (a1)
  {
    v8 = a1 + 64;
  }
  else
  {
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 129, "CGRect WKViewGetBounds(WKViewRef)", "invalid parameter", a5, a6, a7, a8, vars0);
    v8 = MEMORY[0x1E0C9D648];
  }
  return *(double *)v8;
}

void WKViewGetFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGRect v17;

  if (a1)
  {
    v9 = *(double *)(a1 + 64);
    v10 = *(double *)(a1 + 72);
    v11 = *(double *)(a1 + 80);
    v12 = *(double *)(a1 + 88);
    CGAffineTransformMakeTranslation(&v13, *(CGFloat *)(a1 + 48), *(CGFloat *)(a1 + 56));
    v15 = v13;
    CGAffineTransformScale(&v16, &v15, *(float *)(a1 + 100), *(float *)(a1 + 100));
    v13 = v16;
    v14 = v16;
    CGAffineTransformTranslate(&v16, &v14, -v9, -v10);
    v13 = v16;
    v17.origin.x = v9;
    v17.origin.y = v10;
    v17.size.width = v11;
    v17.size.height = v12;
    CGRectApplyAffineTransform(v17, &v13);
  }
  else
  {
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 139, "CGRect WKViewGetFrame(WKViewRef)", "invalid parameter", a5, a6, a7, a8, SLOBYTE(v13.a));
  }
}

_WKView *WKViewSetFrameOrigin(_WKView *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, char a11)
{
  if (!result)
    return (_WKView *)WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 176, "void WKViewSetFrameOrigin(WKViewRef, CGPoint)", "invalid parameter", a5, a6, a7, a8, a11);
  if (result->var5.x != a9 || result->var5.y != a10)
  {
    result->var5.x = a9;
    result->var5.y = a10;
    return _WKViewRecursivelyInvalidateGState(result, a2, a3, a4, a5, a6, a7, a8, a11);
  }
  return result;
}

_WKView *_WKViewRecursivelyInvalidateGState(_WKView *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  _WKViewContext *var1;
  uint64_t (*invalidateGStateCallback)(_WKView *);
  const __CFArray *v12;
  _WKView *v13;
  _WKView *var3;
  const __CFArray *var4;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  const char *v19;
  const char *v20;
  int v21;

  if (result)
  {
    v9 = (uint64_t)result;
    var1 = result->var1;
    if (var1)
    {
      invalidateGStateCallback = (uint64_t (*)(_WKView *))var1->invalidateGStateCallback;
      if (invalidateGStateCallback)
        result = (_WKView *)invalidateGStateCallback(result);
    }
    v12 = *(const __CFArray **)(v9 + 40);
    if (v12)
    {
      result = (_WKView *)CFArrayGetCount(v12);
      if (result)
      {
        result = (_WKView *)CFArrayGetValueAtIndex(v12, 0);
        if (result)
        {
          v13 = result;
          while (1)
          {
            result = (_WKView *)_WKViewRecursivelyInvalidateGState(v13);
            var3 = v13->var3;
            if (!var3)
              break;
            var4 = var3->var4;
            if (!var4)
              break;
            Count = CFArrayGetCount(var3->var4);
            if (Count < 1)
            {
LABEL_20:
              v19 = "WKViewRef WKViewNextSibling(WKViewRef)";
              v20 = "internal error, view is not present in superview subviews";
              v21 = 490;
              return (_WKView *)WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", v21, v19, v20, a5, a6, a7, a8, a9);
            }
            v17 = Count;
            v18 = 0;
            while (CFArrayGetValueAtIndex(var4, v18) != v13)
            {
              if (v17 == ++v18)
                goto LABEL_20;
            }
            result = (_WKView *)CFArrayGetCount(var4);
            if (v18 + 1 < (uint64_t)result)
            {
              result = (_WKView *)CFArrayGetValueAtIndex(var4, v18 + 1);
              v13 = result;
              if (result)
                continue;
            }
            return result;
          }
        }
      }
    }
  }
  else
  {
    v19 = "void _WKViewRecursivelyInvalidateGState(WKViewRef)";
    v20 = "invalid parameter";
    v21 = 159;
    return (_WKView *)WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", v21, v19, v20, a5, a6, a7, a8, a9);
  }
  return result;
}

CGFloat _WKViewAutoresizeCoord(int a1, unsigned int a2, const CGRect *a3, const CGRect *a4, CGRect *a5)
{
  char v5;
  CGSize *p_height;
  CGSize *p_size;
  CGRect *p_y;
  CGSize *v9;
  double x;
  double width;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  float v25;
  float v26;
  CGFloat result;

  if (a1)
    v5 = a2 >> 3;
  else
    v5 = a2;
  if (a1)
    p_height = (CGSize *)&a3->size.height;
  else
    p_height = &a3->size;
  if (a1)
    p_size = (CGSize *)&a4->size.height;
  else
    p_size = &a4->size;
  if (a1)
    p_y = (CGRect *)&a5->origin.y;
  else
    p_y = a5;
  if (a1)
    v9 = (CGSize *)&a5->size.height;
  else
    v9 = &a5->size;
  x = p_y->origin.x;
  width = v9->width;
  v12 = p_size->width;
  v13 = p_height->width;
  switch(v5 & 7)
  {
    case 1:
      x = v12 - (v13 - x);
      goto LABEL_42;
    case 2:
      width = v12 - (v13 - width);
      goto LABEL_47;
    case 3:
      v14 = x + width;
      v15 = x / v14;
      if (v14 == 0.0)
        v15 = 0.5;
      v16 = v13 - v14;
      x = (v12 - v16) * v15;
      v17 = v12 - (v16 + x);
      width = 0.0;
      if (x < 0.0)
        x = 0.0;
      if (v17 >= 0.0)
        width = v17;
      break;
    case 5:
      v18 = v13 - width;
      if (x == 0.0 || v18 == 0.0)
      {
        v19 = 0.5;
        if (v18 != 0.0)
        {
          v24 = (int)v18;
          if ((int)v18 < 0)
            v24 = -v24;
          v19 = 1.0;
          if (v24 == 1)
            v19 = 0.5;
        }
      }
      else
      {
        v19 = x / v18;
      }
      x = (v12 - width) * v19;
LABEL_42:
      if (x < 0.0)
        x = 0.0;
      break;
    case 6:
      if (width == 0.0)
      {
        v21 = 1.0;
      }
      else
      {
        v20 = v13 - x;
        if (v20 == 0.0)
          v21 = 0.0;
        else
          v21 = width / v20;
      }
      width = (v12 - x) * v21;
LABEL_47:
      if (width < 0.0)
        width = 0.0;
      break;
    case 7:
      v22 = x / v13;
      if (v13 == 0.0)
        v22 = 0.333333343;
      x = v12 * v22;
      v23 = width / v13;
      if (v13 == 0.0)
        v23 = 0.333333343;
      width = v12 * v23;
      break;
    default:
      break;
  }
  v25 = x;
  p_y->origin.x = floorf(v25);
  v26 = width;
  result = floorf(v26);
  v9->width = result;
  return result;
}

_WKView *WKViewSetFrameSize(_WKView *a1, CGFloat a2, CGFloat a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGRect v24;
  CGRect v25;

  if (!a1)
    return (_WKView *)WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 325, "void WKViewSetFrameSize(WKViewRef, CGSize)", "invalid parameter", a7, a8, a9, a10, a11);
  v14 = *MEMORY[0x1E0C9D538];
  v15 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  memset(&v20, 0, sizeof(v20));
  CGAffineTransformMakeTranslation(&v19, a1->var5.x, a1->var5.y);
  v22 = v19;
  CGAffineTransformScale(&v23, &v22, a1->var8, a1->var8);
  v19 = v23;
  *(_OWORD *)&v21.a = *(_OWORD *)&v23.a;
  *(_OWORD *)&v21.c = *(_OWORD *)&v23.c;
  v16 = -a1->var6.origin.x;
  v17 = -a1->var6.origin.y;
  *(_OWORD *)&v21.tx = *(_OWORD *)&v23.tx;
  CGAffineTransformTranslate(&v23, &v21, v16, v17);
  v19 = v23;
  CGAffineTransformInvert(&v20, &v19);
  v23 = v20;
  v24.origin.x = v14;
  v24.origin.y = v15;
  v24.size.width = a2;
  v24.size.height = a3;
  v25 = CGRectApplyAffineTransform(v24, &v23);
  return WKViewSetBoundsSize(a1, v25.size.width, v25.size.height);
}

void WKViewConvertRectFromSuperview(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  CGFloat v17;
  CGFloat v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGAffineTransform v24;
  CGRect v25;

  if (a1)
  {
    memset(&v21, 0, sizeof(v21));
    CGAffineTransformMakeTranslation(&v20, *(CGFloat *)(a1 + 48), *(CGFloat *)(a1 + 56));
    v23 = v20;
    CGAffineTransformScale(&v24, &v23, *(float *)(a1 + 100), *(float *)(a1 + 100));
    v20 = v24;
    *(_OWORD *)&v22.a = *(_OWORD *)&v24.a;
    *(_OWORD *)&v22.c = *(_OWORD *)&v24.c;
    v17 = -*(double *)(a1 + 64);
    v18 = -*(double *)(a1 + 72);
    *(_OWORD *)&v22.tx = *(_OWORD *)&v24.tx;
    CGAffineTransformTranslate(&v24, &v22, v17, v18);
    v20 = v24;
    CGAffineTransformInvert(&v21, &v20);
    v19 = v21;
    v25.origin.x = a2;
    v25.origin.y = a3;
    v25.size.width = a4;
    v25.size.height = a5;
    CGRectApplyAffineTransform(v25, &v19);
  }
  else
  {
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 675, "CGRect WKViewConvertRectFromSuperview(WKViewRef, CGRect)", "invalid parameter", a9, a10, a11, a12, SLOBYTE(v19.a));
  }
}

_WKView *WKViewSetBoundsSize(_WKView *result, CGFloat a2, CGFloat a3)
{
  double width;
  double height;
  _WKView *v8;
  double x;
  double y;
  CGFloat var8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WKViewContext *var1;
  const __CFArray *var4;
  _WKView *ValueAtIndex;
  _WKView *v22;
  CGFloat *v23;
  unsigned int var7;
  double v25;
  double v26;
  CGFloat v27;
  CGFloat v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat v36;
  double v37;
  double v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  _WKView *var3;
  const __CFArray *v46;
  CFIndex Count;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CFIndex v52;
  CFIndex v53;
  CFIndex v54;
  char v55;
  CGFloat v56;
  CGFloat v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGAffineTransform v61;
  CGAffineTransform v62;
  CGAffineTransform v63;
  CGAffineTransform v64;
  CGAffineTransform v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;

  width = result->var6.size.width;
  height = result->var6.size.height;
  if (width != a2 || height != a3)
  {
    v8 = result;
    x = result->var6.origin.x;
    y = result->var6.origin.y;
    v56 = result->var5.y;
    v57 = result->var5.x;
    CGAffineTransformMakeTranslation(&v62, v57, v56);
    v64 = v62;
    var8 = v8->var8;
    CGAffineTransformScale(&v65, &v64, var8, var8);
    v62 = v65;
    v63 = v65;
    CGAffineTransformTranslate(&v65, &v63, -x, -y);
    v62 = v65;
    v66.origin.x = x;
    v66.origin.y = y;
    v66.size.width = width;
    v66.size.height = height;
    v59 = CGRectApplyAffineTransform(v66, &v62);
    v8->var6.size.width = a2;
    v8->var6.size.height = a3;
    CGAffineTransformMakeTranslation(&v62, v57, v56);
    v64 = v62;
    CGAffineTransformScale(&v65, &v64, var8, var8);
    v62 = v65;
    v63 = v65;
    CGAffineTransformTranslate(&v65, &v63, -x, -y);
    v62 = v65;
    v67.origin.x = x;
    v67.origin.y = y;
    v67.size.width = a2;
    v67.size.height = a3;
    v58 = CGRectApplyAffineTransform(v67, &v62);
    var1 = v8->var1;
    if (var1 && var1->notificationCallback)
      ((void (*)(_WKView *, uint64_t, void *))var1->notificationCallback)(v8, 1, var1->notificationUserInfo);
    var4 = v8->var4;
    if (var4)
    {
      if (CFArrayGetCount(v8->var4))
      {
        ValueAtIndex = (_WKView *)CFArrayGetValueAtIndex(var4, 0);
        if (ValueAtIndex)
        {
          v22 = ValueAtIndex;
          v23 = (CGFloat *)MEMORY[0x1E0C9D538];
          while (1)
          {
            var7 = v22->var7;
            if (var7)
            {
              v25 = v22->var6.origin.x;
              v26 = v22->var6.origin.y;
              v27 = v22->var6.size.width;
              v28 = v22->var6.size.height;
              CGAffineTransformMakeTranslation(&v62, v22->var5.x, v22->var5.y);
              v64 = v62;
              CGAffineTransformScale(&v65, &v64, v22->var8, v22->var8);
              v62 = v65;
              v63 = v65;
              CGAffineTransformTranslate(&v65, &v63, -v25, -v26);
              v62 = v65;
              v68.origin.x = v25;
              v68.origin.y = v26;
              v68.size.width = v27;
              v68.size.height = v28;
              v60 = CGRectApplyAffineTransform(v68, &v62);
              _WKViewAutoresizeCoord(0, var7, &v59, &v58, &v60);
              _WKViewAutoresizeCoord(1, v22->var7, &v59, &v58, &v60);
              v36 = v60.origin.y;
              v37 = v22->var5.x;
              if (v37 != v60.origin.x || (v38 = v22->var5.y, v38 != v60.origin.y))
              {
                v22->var5.x = v60.origin.x;
                v22->var5.y = v36;
                _WKViewRecursivelyInvalidateGState(v22, v29, v30, v31, v32, v33, v34, v35, v55);
                v37 = v22->var5.x;
                v38 = v22->var5.y;
              }
              v39 = v60.size.width;
              v40 = v60.size.height;
              v41 = *v23;
              v42 = v23[1];
              memset(&v62, 0, sizeof(v62));
              CGAffineTransformMakeTranslation(&v61, v37, v38);
              v64 = v61;
              CGAffineTransformScale(&v65, &v64, v22->var8, v22->var8);
              v61 = v65;
              *(_OWORD *)&v63.a = *(_OWORD *)&v65.a;
              *(_OWORD *)&v63.c = *(_OWORD *)&v65.c;
              v43 = -v22->var6.origin.x;
              v44 = -v22->var6.origin.y;
              *(_OWORD *)&v63.tx = *(_OWORD *)&v65.tx;
              CGAffineTransformTranslate(&v65, &v63, v43, v44);
              v61 = v65;
              CGAffineTransformInvert(&v62, &v61);
              v65 = v62;
              v69.origin.x = v41;
              v69.origin.y = v42;
              v69.size.width = v39;
              v69.size.height = v40;
              v70 = CGRectApplyAffineTransform(v69, &v65);
              WKViewSetBoundsSize(v22, v70.size.width, v70.size.height);
            }
            var3 = v22->var3;
            if (!var3)
              break;
            v46 = var3->var4;
            if (!v46)
              break;
            Count = CFArrayGetCount(var3->var4);
            if (Count < 1)
            {
LABEL_27:
              WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 490, "WKViewRef WKViewNextSibling(WKViewRef)", "internal error, view is not present in superview subviews", v48, v49, v50, v51, v55);
              return _WKViewRecursivelyInvalidateGState(v8, v12, v13, v14, v15, v16, v17, v18, v55);
            }
            v52 = Count;
            v53 = 0;
            while (CFArrayGetValueAtIndex(v46, v53) != v22)
            {
              if (v52 == ++v53)
                goto LABEL_27;
            }
            v54 = CFArrayGetCount(v46);
            v12 = v53 + 1;
            if (v53 + 1 < v54)
            {
              v22 = (_WKView *)CFArrayGetValueAtIndex(v46, v12);
              if (v22)
                continue;
            }
            return _WKViewRecursivelyInvalidateGState(v8, v12, v13, v14, v15, v16, v17, v18, v55);
          }
        }
      }
    }
    return _WKViewRecursivelyInvalidateGState(v8, v12, v13, v14, v15, v16, v17, v18, v55);
  }
  return result;
}

uint64_t WKViewSetScale(uint64_t result, float a2)
{
  uint64_t (**v2)(void);

  if (*(float *)(result + 100) != a2)
  {
    *(float *)(result + 100) = a2;
    v2 = *(uint64_t (***)(void))(result + 16);
    if (v2)
    {
      if (*v2)
        return (*v2)();
    }
  }
  return result;
}

float WKViewGetScale(uint64_t a1)
{
  return *(float *)(a1 + 100);
}

uint64_t WKViewGetWindow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (a1)
    return *(_QWORD *)(a1 + 24);
  WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 389, "WAKWindow *WKViewGetWindow(WKViewRef)", "invalid parameter", a5, a6, a7, a8, vars0);
  return 0;
}

void WKViewAddSubview(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __CFArray *Mutable;

  if (a1 && value)
  {
    Mutable = *(__CFArray **)(a1 + 40);
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable(0, 0, &WKCollectionArrayCallBacks);
      *(_QWORD *)(a1 + 40) = Mutable;
    }
    CFArrayAppendValue(Mutable, value);
    *((_QWORD *)value + 4) = a1;
    _WKViewSetWindow((uint64_t)value, *(void **)(a1 + 24));
  }
  else
  {
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 409, "void WKViewAddSubview(WKViewRef, WKViewRef)", "invalid parameter", a5, a6, a7, a8, a9);
  }
}

void WKViewRemoveFromSuperview(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const char *v15;
  int v16;
  uint64_t v17;
  void (*v18)(void);

  if (!a1)
  {
    v15 = "invalid parameter";
    v16 = 426;
    goto LABEL_11;
  }
  _WKViewSetWindow((uint64_t)a1, 0);
  v10 = a1[4];
  if (!v10)
    return;
  v11 = *(const __CFArray **)(v10 + 40);
  if (!v11)
  {
    v15 = "superview has no subviews";
    v16 = 438;
    goto LABEL_11;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(v10 + 40));
  if (Count < 1)
  {
LABEL_8:
    v15 = "view not in superview subviews";
    v16 = 444;
LABEL_11:
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", v16, "void WKViewRemoveFromSuperview(WKViewRef)", v15, a5, a6, a7, a8, a9);
    return;
  }
  v13 = Count;
  v14 = 0;
  while (CFArrayGetValueAtIndex(v11, v14) != a1)
  {
    if (v13 == ++v14)
      goto LABEL_8;
  }
  v17 = *(_QWORD *)(a1[4] + 16);
  if (v17)
  {
    v18 = *(void (**)(void))(v17 + 32);
    if (v18)
      v18();
  }
  CFArrayRemoveValueAtIndex(v11, v14);
  a1[4] = 0;
}

_QWORD *WKViewTraverseNext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  const __CFArray *v9;
  _QWORD *result;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  CFIndex v19;
  uint64_t v20;
  const __CFArray *v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  CFIndex v28;
  id v29;
  uint64_t v30;
  const __CFArray *v31;
  CFIndex v32;
  CFIndex v33;
  CFIndex v34;
  const char *v35;
  const char *v36;
  int v37;
  char v38;

  if (!a1)
  {
    v35 = "WKViewRef WKViewTraverseNext(WKViewRef)";
    v36 = "invalid parameter";
    v37 = 505;
    goto LABEL_33;
  }
  v8 = (_QWORD *)a1;
  v9 = *(const __CFArray **)(a1 + 40);
  if (v9)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 40)))
    {
      result = CFArrayGetValueAtIndex(v9, 0);
      if (result)
        return result;
    }
  }
  v11 = v8[4];
  if (v11)
  {
    v12 = *(const __CFArray **)(v11 + 40);
    if (v12)
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(v11 + 40));
      if (Count < 1)
      {
LABEL_11:
        WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 490, "WKViewRef WKViewNextSibling(WKViewRef)", "internal error, view is not present in superview subviews", v14, v15, v16, v17, v38);
        goto LABEL_12;
      }
      v18 = Count;
      v19 = 0;
      while (CFArrayGetValueAtIndex(v12, v19) != v8)
      {
        if (v18 == ++v19)
          goto LABEL_11;
      }
      if (v19 + 1 >= CFArrayGetCount(v12))
        goto LABEL_12;
      result = CFArrayGetValueAtIndex(v12, v19 + 1);
      if (!result)
        goto LABEL_12;
      return result;
    }
  }
LABEL_12:
  while (1)
  {
    v20 = v8[4];
    if (v20)
    {
      v21 = *(const __CFArray **)(v20 + 40);
      if (v21)
        break;
    }
LABEL_19:
    v29 = (id)v8[13];
    if (!v29)
      v29 = +[WAKView _wrapperForViewRef:](WAKView, "_wrapperForViewRef:", v8);
    result = (_QWORD *)objc_msgSend((id)objc_msgSend(v29, "superview"), "_viewRef");
    v8 = result;
    if (!result)
      return result;
  }
  v22 = CFArrayGetCount(*(CFArrayRef *)(v20 + 40));
  if (v22 < 1)
  {
LABEL_18:
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 490, "WKViewRef WKViewNextSibling(WKViewRef)", "internal error, view is not present in superview subviews", v23, v24, v25, v26, v38);
    goto LABEL_19;
  }
  v27 = v22;
  v28 = 0;
  while (CFArrayGetValueAtIndex(v21, v28) != v8)
  {
    if (v27 == ++v28)
      goto LABEL_18;
  }
  if (v28 + 1 >= CFArrayGetCount(v21) || !CFArrayGetValueAtIndex(v21, v28 + 1))
    goto LABEL_19;
  v30 = v8[4];
  if (!v30)
    return 0;
  v31 = *(const __CFArray **)(v30 + 40);
  if (!v31)
    return 0;
  v32 = CFArrayGetCount(*(CFArrayRef *)(v30 + 40));
  if (v32 < 1)
  {
LABEL_31:
    v35 = "WKViewRef WKViewNextSibling(WKViewRef)";
    v36 = "internal error, view is not present in superview subviews";
    v37 = 490;
LABEL_33:
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", v37, v35, v36, a5, a6, a7, a8, v38);
    return 0;
  }
  v33 = v32;
  v34 = 0;
  while (CFArrayGetValueAtIndex(v31, v34) != v8)
  {
    if (v33 == ++v34)
      goto LABEL_31;
  }
  if (v34 + 1 < CFArrayGetCount(v31))
    return CFArrayGetValueAtIndex(v31, v34 + 1);
  return 0;
}

double WKViewGetVisibleRect(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGFloat v16;
  CGFloat v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  CGAffineTransform v45;
  CGAffineTransform v46;
  CGAffineTransform v47;
  _BYTE v48[56];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;

  v78 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v36 = "CGRect WKViewGetVisibleRect(WKViewRef)";
    v37 = "invalid parameter";
    v38 = 541;
LABEL_11:
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", v38, v36, v37, a5, a6, a7, a8, SLOBYTE(v45.a));
    return *MEMORY[0x1E0C9D648];
  }
  v8 = a1;
  x = a1[8];
  y = a1[9];
  width = a1[10];
  height = a1[11];
  v13 = *((_QWORD *)a1 + 4);
  if (!v13)
    return x;
  v14 = (uint64_t)a1;
  do
  {
    v15 = v14;
    v14 = v13;
    CGAffineTransformMakeTranslation(&v45, *(CGFloat *)(v15 + 48), *(CGFloat *)(v15 + 56));
    v47 = v45;
    CGAffineTransformScale((CGAffineTransform *)v48, &v47, *(float *)(v15 + 100), *(float *)(v15 + 100));
    v45 = *(CGAffineTransform *)v48;
    *(_OWORD *)&v46.a = *(_OWORD *)v48;
    *(_OWORD *)&v46.c = *(_OWORD *)&v48[16];
    v16 = -*(double *)(v15 + 64);
    v17 = -*(double *)(v15 + 72);
    *(_OWORD *)&v46.tx = *(_OWORD *)&v48[32];
    CGAffineTransformTranslate((CGAffineTransform *)v48, &v46, v16, v17);
    v45 = *(CGAffineTransform *)v48;
    v79.origin.x = x;
    v79.origin.y = y;
    v79.size.width = width;
    v79.size.height = height;
    v81 = CGRectApplyAffineTransform(v79, &v45);
    v80 = CGRectIntersection(*(CGRect *)(v14 + 64), v81);
    x = v80.origin.x;
    y = v80.origin.y;
    width = v80.size.width;
    height = v80.size.height;
    v13 = *(_QWORD *)(v14 + 32);
  }
  while (v13);
  if ((double *)v14 == v8)
    return x;
  x = WKViewConvertRectToBase(v14, v80.origin.x, v80.origin.y, v80.size.width, v80.size.height, v18, v19, v20, v21, v22, v23, v24);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = 0;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(&v48[8], 0, 48);
  v35 = 8;
  v77 = 0;
  *(_QWORD *)v48 = v8;
  while (1)
  {
    v8 = (double *)*((_QWORD *)v8 + 4);
    if (!v8)
      break;
    *(_QWORD *)&v48[v35] = v8;
    v35 += 8;
    if (--v34 == -127)
    {
      v36 = "void _WKViewGetAncestorViewsIncludingView(WKViewRef, WKViewRef *, unsigned int, unsigned int *)";
      v37 = "Exceeded maxViews, use malloc/realloc";
      v38 = 640;
      goto LABEL_11;
    }
  }
  if (!(_DWORD)v35)
    return *MEMORY[0x1E0C9D648];
  if ((int)v34 <= 0)
  {
    v40 = v35 - 8;
    do
    {
      WKViewConvertRectFromSuperview(*(_QWORD *)&v48[v40], x, v29, v31, v33, v25, v26, v27, a5, a6, a7, a8);
      x = v41;
      v29 = v42;
      v31 = v43;
      v33 = v44;
      v40 -= 8;
    }
    while (v40 != -8);
  }
  return x;
}

CGFloat WKViewConvertRectToBase(uint64_t a1, CGFloat x, CGFloat y, CGFloat width, CGFloat height, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGRect v24;
  CGRect v25;

  if (a1)
  {
    v16 = a1;
    do
    {
      CGAffineTransformMakeTranslation(&v20, *(CGFloat *)(v16 + 48), *(CGFloat *)(v16 + 56));
      v22 = v20;
      CGAffineTransformScale(&v23, &v22, *(float *)(v16 + 100), *(float *)(v16 + 100));
      v20 = v23;
      *(_OWORD *)&v21.a = *(_OWORD *)&v23.a;
      *(_OWORD *)&v21.c = *(_OWORD *)&v23.c;
      v17 = -*(double *)(v16 + 64);
      v18 = -*(double *)(v16 + 72);
      *(_OWORD *)&v21.tx = *(_OWORD *)&v23.tx;
      CGAffineTransformTranslate(&v23, &v21, v17, v18);
      v20 = v23;
      v24.origin.x = x;
      v24.origin.y = y;
      v24.size.width = width;
      v24.size.height = height;
      v25 = CGRectApplyAffineTransform(v24, &v20);
      x = v25.origin.x;
      y = v25.origin.y;
      width = v25.size.width;
      height = v25.size.height;
      v16 = *(_QWORD *)(v16 + 32);
    }
    while (v16);
  }
  else
  {
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 577, "CGRect WKViewConvertRectToBase(WKViewRef, CGRect)", "invalid parameter", a9, a10, a11, a12, SLOBYTE(v20.a));
    return *MEMORY[0x1E0C9D648];
  }
  return x;
}

void WKViewConvertRectFromBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v12 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    v51 = 0;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v13 = 8;
    v19 = a1;
    while (1)
    {
      a1 = *(_QWORD *)(a1 + 32);
      if (!a1)
        break;
      *(uint64_t *)((char *)&v19 + v13) = a1;
      v13 += 8;
      if (--v12 == -127)
      {
        v14 = "void _WKViewGetAncestorViewsIncludingView(WKViewRef, WKViewRef *, unsigned int, unsigned int *)";
        v15 = "Exceeded maxViews, use malloc/realloc";
        v16 = 640;
        goto LABEL_7;
      }
    }
    if ((_DWORD)v13 && (int)v12 <= 0)
    {
      v17 = v13 - 8;
      do
      {
        WKViewConvertRectFromSuperview(*(uint64_t *)((char *)&v19 + v17), a9, a10, a11, a12, a2, a3, a4, a5, a6, a7, a8);
        v17 -= 8;
      }
      while (v17 != -8);
    }
  }
  else
  {
    v14 = "CGRect WKViewConvertRectFromBase(WKViewRef, CGRect)";
    v15 = "invalid parameter";
    v16 = 686;
LABEL_7:
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", v16, v14, v15, a5, a6, a7, a8, v18);
  }
}

float64x2_t WKViewConvertPointFromSuperview(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CGFloat v11;
  CGFloat v12;
  char v14;
  CGAffineTransform v17;
  CGAffineTransform v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGAffineTransform v21;

  if (a1)
  {
    memset(&v18, 0, sizeof(v18));
    CGAffineTransformMakeTranslation(&v17, *(CGFloat *)(a1 + 48), *(CGFloat *)(a1 + 56));
    v20 = v17;
    CGAffineTransformScale(&v21, &v20, *(float *)(a1 + 100), *(float *)(a1 + 100));
    v17 = v21;
    *(_OWORD *)&v19.a = *(_OWORD *)&v21.a;
    *(_OWORD *)&v19.c = *(_OWORD *)&v21.c;
    v11 = -*(double *)(a1 + 64);
    v12 = -*(double *)(a1 + 72);
    *(_OWORD *)&v19.tx = *(_OWORD *)&v21.tx;
    CGAffineTransformTranslate(&v21, &v19, v11, v12);
    v17 = v21;
    CGAffineTransformInvert(&v18, &v17);
    return vaddq_f64(*(float64x2_t *)&v18.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v18.c, a3), *(float64x2_t *)&v18.a, a2));
  }
  else
  {
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 604, "CGPoint WKViewConvertPointFromSuperview(WKViewRef, CGPoint)", "invalid parameter", a7, a8, a9, a10, v14);
    return *(float64x2_t *)MEMORY[0x1E0C9D538];
  }
}

CGAffineTransform *WKViewConvertPointToBase(uint64_t a1, CGFloat a2, CGFloat a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  CGFloat v13;
  CGFloat v14;
  CGAffineTransform *result;
  CGFloat v16;
  CGAffineTransform v17;
  CGAffineTransform v18;
  CGAffineTransform v19;
  CGAffineTransform v20;

  if (!a1)
    return (CGAffineTransform *)WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", 615, "CGPoint WKViewConvertPointToBase(WKViewRef, CGPoint)", "invalid parameter", a7, a8, a9, a10, SLOBYTE(v17.a));
  v12 = a1;
  do
  {
    CGAffineTransformMakeTranslation(&v17, *(CGFloat *)(v12 + 48), *(CGFloat *)(v12 + 56));
    v19 = v17;
    CGAffineTransformScale(&v20, &v19, *(float *)(v12 + 100), *(float *)(v12 + 100));
    v17 = v20;
    *(_OWORD *)&v18.a = *(_OWORD *)&v20.a;
    *(_OWORD *)&v18.c = *(_OWORD *)&v20.c;
    v13 = -*(double *)(v12 + 64);
    v14 = -*(double *)(v12 + 72);
    *(_OWORD *)&v18.tx = *(_OWORD *)&v20.tx;
    result = CGAffineTransformTranslate(&v20, &v18, v13, v14);
    v17 = v20;
    v16 = v20.tx + a3 * v20.c + v20.a * a2;
    a3 = v20.ty + a3 * v20.d + v20.b * a2;
    v12 = *(_QWORD *)(v12 + 32);
    a2 = v16;
  }
  while (v12);
  return result;
}

void WKViewConvertPointFromBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v49 = 0;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v11 = 8;
    v17 = a1;
    while (1)
    {
      a1 = *(_QWORD *)(a1 + 32);
      if (!a1)
        break;
      *(uint64_t *)((char *)&v17 + v11) = a1;
      v11 += 8;
      if (--v10 == -127)
      {
        v12 = "void _WKViewGetAncestorViewsIncludingView(WKViewRef, WKViewRef *, unsigned int, unsigned int *)";
        v13 = "Exceeded maxViews, use malloc/realloc";
        v14 = 640;
        goto LABEL_7;
      }
    }
    if ((_DWORD)v11 && (int)v10 <= 0)
    {
      v15 = v11 - 8;
      do
      {
        *(_QWORD *)&a9 = *(_OWORD *)&WKViewConvertPointFromSuperview(*(uint64_t *)((char *)&v17 + v15), a9, a10, a2, a3, a4, a5, a6, a7, a8);
        v15 -= 8;
      }
      while (v15 != -8);
    }
  }
  else
  {
    v12 = "CGPoint WKViewConvertPointFromBase(WKViewRef, CGPoint)";
    v13 = "invalid parameter";
    v14 = 652;
LABEL_7:
    WKReportError("/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/ios/wak/WKView.mm", v14, v12, v13, a5, a6, a7, a8, v16);
  }
}

void WebThreadRunOnMainThread(void (**a1)(_QWORD))
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  WTF::RunLoop *v4;
  WTF::ThreadGroup ***v5;
  WTF::WorkQueue *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;

  if (webThreadStarted != 1
    || (v2 = (_opaque_pthread_t *)webThread, v3 = pthread_self(),
                                             v4 = (WTF::RunLoop *)pthread_equal(v2, v3),
                                             !(_DWORD)v4))
  {
    a1[2](a1);
    return;
  }
  v5 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(v4);
    JSC::VM::create();
    v5 = (WTF::ThreadGroup ***)v13;
    WebCore::g_commonVMOrNull = v13;
    if (__ldaxr((unsigned int *)(v13 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v13 + 1096)))
    {
LABEL_9:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v13 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(*v5[73]);
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
      goto LABEL_12;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v13 + 192));
    goto LABEL_9;
  }
LABEL_12:
  MEMORY[0x19AEA3DF8](v12, v5);
  v7 = (WTF::WorkQueue *)_WebThreadUnlock();
  v8 = WTF::WorkQueue::main(v7);
  v9 = _Block_copy(a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E3355EF8;
  v10[1] = v9;
  v13 = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 24))(v8, &v13);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Block_release(v9);
  _WebThreadLock();
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v12);
}

void sub_19533D748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  uint64_t v14;

  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Block_release(v12);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&a9);
  _Unwind_Resume(a1);
}

BOOL WebThreadIsCurrent()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;

  if (webThreadStarted != 1)
    return 0;
  v0 = (_opaque_pthread_t *)webThread;
  v1 = pthread_self();
  return pthread_equal(v0, v1) != 0;
}

uint64_t _WebThreadUnlock(void)
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;
  _BOOL4 v2;
  uint64_t result;
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  int v6;

  if (webThreadStarted == 1)
  {
    v0 = (_opaque_pthread_t *)webThread;
    v1 = pthread_self();
    v2 = pthread_equal(v0, v1) == 0;
  }
  else
  {
    v2 = 1;
  }
  result = WebCore::GraphicsContextGLANGLE::releaseThreadResources(v2);
  if (webThreadStarted == 1
    && (v4 = (_opaque_pthread_t *)webThread, v5 = pthread_self(), result = pthread_equal(v4, v5), (_DWORD)result))
  {
    --webThreadLockCount;
    webThreadShouldYield = 0;
  }
  else
  {
    --mainThreadLockCount;
  }
  if (!--dword_1EE2F4FF8)
  {
    webLock = 0;
    v6 = __ldxr(byte_1EE2F4FFC);
    if (v6 == 1)
    {
      if (!__stlxr(0, byte_1EE2F4FFC))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)byte_1EE2F4FFC);
  }
  return result;
}

uint64_t _WebThreadLock(void)
{
  uint64_t result;
  int v1;
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  _QWORD *v8;

  result = pthread_main_np();
  v1 = result;
  if ((_DWORD)result)
  {
    webThreadShouldYield = 1;
  }
  else if (webThreadStarted != 1
         || (v2 = (_opaque_pthread_t *)webThread, v3 = pthread_self(), result = pthread_equal(v2, v3), !(_DWORD)result))
  {
    v7 = CurrentThreadContext();
    NSLog(CFSTR("%s, %p: Tried to obtain the web lock from a thread other than the main thread or the web thread. This may be a result of calling to UIKit from a secondary thread. Crashing now..."), "void _WebThreadLock()", v7);
    __break(0xC471u);
    goto LABEL_20;
  }
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
  {
    result = WTF::Thread::initializeCurrentTLS((WTF::Thread *)result);
    v4 = result;
  }
  if (v4 == webLock)
  {
    v6 = dword_1EE2F4FF8 + 1;
    goto LABEL_14;
  }
  if (__ldaxr(byte_1EE2F4FFC))
  {
    __clrex();
LABEL_12:
    result = MEMORY[0x19AEA534C](byte_1EE2F4FFC);
    goto LABEL_13;
  }
  if (__stxr(1u, byte_1EE2F4FFC))
    goto LABEL_12;
LABEL_13:
  webLock = v4;
  v6 = 1;
LABEL_14:
  dword_1EE2F4FF8 = v6;
  if (v1)
  {
    webThreadShouldYield = 0;
    ++mainThreadLockCount;
    return result;
  }
  if (++webThreadLockCount >= 2)
  {
    v8 = CurrentThreadContext();
    NSLog(CFSTR("%s, %p: Multiple locks on web thread not allowed! Please file a bug. Crashing now..."), "void _WebThreadLock()", v8);
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x19533DA24);
  }
  return result;
}

void WebThreadAdoptAndRelease(void *value)
{
  __CFArray *Mutable;
  const void *v4;
  __CFRunLoopSource *v5;
  int v6;

  if (__ldaxr((unsigned __int8 *)&unk_1EE33782B))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1EE33782B))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&unk_1EE33782B);
LABEL_5:
  if ((byte_1EE33782C & 1) != 0)
  {
    Mutable = (__CFArray *)qword_1EE337850;
    if (qword_1EE337850)
      goto LABEL_11;
  }
  else
  {
    qword_1EE337850 = 0;
    byte_1EE33782C = 1;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, 0);
  if ((byte_1EE33782C & 1) != 0)
  {
    v4 = (const void *)qword_1EE337850;
    qword_1EE337850 = (uint64_t)Mutable;
    if (v4)
    {
      CFRelease(v4);
      if (byte_1EE33782C == 1)
      {
        Mutable = (__CFArray *)qword_1EE337850;
      }
      else
      {
        Mutable = 0;
        qword_1EE337850 = 0;
        byte_1EE33782C = 1;
      }
    }
  }
  else
  {
    byte_1EE33782C = 1;
    qword_1EE337850 = (uint64_t)Mutable;
  }
LABEL_11:
  CFArrayAppendValue(Mutable, value);
  if (byte_1EE33782D == 1)
  {
    v5 = (__CFRunLoopSource *)qword_1EE337858;
  }
  else
  {
    v5 = 0;
    qword_1EE337858 = 0;
    byte_1EE33782D = 1;
  }
  CFRunLoopSourceSignal(v5);
  CFRunLoopWakeUp((CFRunLoopRef)webThreadRunLoop);
  v6 = __ldxr((unsigned __int8 *)&unk_1EE33782B);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1EE33782B))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE33782B);
}

void sub_19533DBC4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE33782B);
  goto LABEL_6;
}

void WebCoreObjCDeallocOnWebThread(objc_class *a1)
{
  objc_method *InstanceMethod;
  objc_method *v3;
  const char *TypeEncoding;
  void (*MethodImplementation)(void);
  const char *v6;
  objc_method *v7;

  InstanceMethod = class_getInstanceMethod(a1, sel_release);
  if (InstanceMethod)
  {
    v3 = InstanceMethod;
    TypeEncoding = method_getTypeEncoding(InstanceMethod);
    if (class_addMethod(a1, sel__webcore_releaseOnWebThread, (IMP)WebCoreObjCDeallocOnWebThreadImpl, TypeEncoding))
    {
      MethodImplementation = class_getMethodImplementation(a1, sel_release);
      v6 = method_getTypeEncoding(v3);
      if (class_addMethod(a1, sel_release, MethodImplementation, v6))
        v3 = class_getInstanceMethod(a1, sel_release);
      v7 = class_getInstanceMethod(a1, sel__webcore_releaseOnWebThread);
      method_exchangeImplementations(v3, v7);
    }
  }
}

void WebCoreObjCDeallocOnWebThreadImpl(objc_object *a1, objc_selector *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  _opaque_pthread_t *v8;
  _opaque_pthread_t *v9;

  if ((webThreadStarted & 1) == 0)
    goto LABEL_22;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3)
    v3 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
  if (v3 == webCoreReleaseLock)
  {
    v5 = dword_1EE337820 + 1;
    goto LABEL_11;
  }
  if (__ldaxr(byte_1EE337824))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C](byte_1EE337824, a2);
    goto LABEL_10;
  }
  if (__stxr(1u, byte_1EE337824))
    goto LABEL_9;
LABEL_10:
  webCoreReleaseLock = v3;
  v5 = 1;
LABEL_11:
  dword_1EE337820 = v5;
  v6 = -[objc_object retainCount](a1, "retainCount");
  if (v6 != 1)
    -[objc_object _webcore_releaseOnWebThread](a1, "_webcore_releaseOnWebThread");
  if (!--dword_1EE337820)
  {
    webCoreReleaseLock = 0;
    v7 = __ldxr(byte_1EE337824);
    if (v7 == 1)
    {
      if (!__stlxr(0, byte_1EE337824))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)byte_1EE337824);
  }
LABEL_19:
  if (v6 == 1)
  {
    if (webThreadStarted == 1)
    {
      v8 = (_opaque_pthread_t *)webThread;
      v9 = pthread_self();
      if (pthread_equal(v8, v9))
      {
LABEL_22:
        -[objc_object _webcore_releaseOnWebThread](a1, "_webcore_releaseOnWebThread");
        return;
      }
    }
    WebThreadAdoptAndRelease(a1);
  }
}

void sub_19533DE40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v3;
  int v4;

  v3 = *(_DWORD *)(v1 + 2080) - 1;
  *(_DWORD *)(v1 + 2080) = v3;
  if (!v3)
  {
    webCoreReleaseLock = 0;
    v4 = __ldxr(byte_1EE337824);
    if (v4 == 1)
    {
      if (!__stlxr(0, byte_1EE337824))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)byte_1EE337824);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void WebThreadCallDelegate(const void *a1)
{
  CFTypeRef cf;

  cf = a1;
  if (a1)
    CFRetain(a1);
  SendDelegateMessage((id *)&cf);
  if (cf)
    CFRelease(cf);
}

void sub_19533DEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void SendDelegateMessage(id *a1)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  id v5;
  void *v6;
  WTF::ThreadGroup ***v7;
  __CFRunLoopSource *v9;
  __CFRunLoop *Main;
  uint64_t v11;
  int v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  __CFRunLoop *v17;
  CFRunLoopMode v18;
  _BYTE v19[24];
  double v20;
  int v21;

  if (webThreadStarted != 1 || (v2 = (_opaque_pthread_t *)webThread, v3 = pthread_self(), !pthread_equal(v2, v3)))
  {
    SendMessage(a1);
    return;
  }
  if (__ldaxr((unsigned __int8 *)&unk_1EE33782F))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1EE33782F))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](&unk_1EE33782F);
LABEL_8:
  if ((byte_1EE337830 & 1) == 0)
  {
    qword_1EE337860 = 0;
    byte_1EE337830 = 1;
  }
  v5 = *a1;
  *a1 = 0;
  v6 = (void *)qword_1EE337860;
  qword_1EE337860 = (uint64_t)v5;
  if (v6)
    CFRelease(v6);
  byte_1EE33782E = 0;
  ++webThreadDelegateMessageScopeCount;
  v7 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)v6);
    JSC::VM::create();
    v7 = *(WTF::ThreadGroup ****)&v20;
    WebCore::g_commonVMOrNull = *(_QWORD *)&v20;
    if (__ldaxr((unsigned int *)(*(_QWORD *)&v20 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(*(_QWORD *)&v20 + 1096)))
    {
LABEL_17:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v20 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(*v7[73]);
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v7, 0);
      goto LABEL_20;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(*(_QWORD *)&v20 + 192));
    goto LABEL_17;
  }
LABEL_20:
  MEMORY[0x19AEA3DF8](v19, v7);
  _WebThreadUnlock();
  if (byte_1EE337831 == 1)
  {
    v9 = (__CFRunLoopSource *)qword_1EE337868;
  }
  else
  {
    v9 = 0;
    qword_1EE337868 = 0;
    byte_1EE337831 = 1;
  }
  CFRunLoopSourceSignal(v9);
  Main = CFRunLoopGetMain();
  CFRunLoopWakeUp(Main);
  if ((byte_1EE33782E & 1) == 0)
  {
    do
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      v20 = v13 + 10.0;
      v21 = 1;
      v11 = WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&unk_1EE337832, (unsigned __int8 *)&unk_1EE33782F, (WTF::TimeWithDynamicClockType *)&v20);
      if ((v11 & 1) == 0)
      {
        v20 = 0.0;
        if (byte_1EE337830 == 1)
        {
          v14 = (void *)qword_1EE337860;
        }
        else
        {
          v14 = 0;
          qword_1EE337860 = 0;
          byte_1EE337830 = 1;
        }
        objc_msgSend(v14, "target");
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (byte_1EE337830)
          {
            v15 = (void *)qword_1EE337860;
          }
          else
          {
            v15 = 0;
            qword_1EE337860 = 0;
            byte_1EE337830 = 1;
          }
          objc_msgSend(v15, "getArgument:atIndex:", &v20, 0);
        }
        else
        {
          if (byte_1EE337830)
          {
            v16 = (void *)qword_1EE337860;
          }
          else
          {
            v16 = 0;
            qword_1EE337860 = 0;
            byte_1EE337830 = 1;
          }
          v20 = COERCE_DOUBLE(NSStringFromSelector((SEL)objc_msgSend(v16, "selector")));
        }
        v17 = CFRunLoopGetMain();
        v18 = CFRunLoopCopyCurrentMode(v17);
        NSLog(CFSTR("%s: delegate (%@) failed to return after waiting %f seconds. main run loop mode: %@"), "void SendDelegateMessage(RetainPtr<NSInvocation> &&)", *(_QWORD *)&v20, 0x4024000000000000, v18);
        if (v18)
          CFRelease(v18);
      }
    }
    while (byte_1EE33782E != 1);
  }
  v12 = __ldxr((unsigned __int8 *)&unk_1EE33782F);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&unk_1EE33782F))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE33782F);
LABEL_45:
  _WebThreadLock();
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v19);
  --webThreadDelegateMessageScopeCount;
}

void sub_19533E270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  --webThreadDelegateMessageScopeCount;
  _Unwind_Resume(exception_object);
}

uint64_t WebThreadPostNotification(const void *a1, const void *a2, const void *a3)
{
  WTF::RunLoop *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;

  v6 = (WTF::RunLoop *)pthread_main_np();
  if ((_DWORD)v6)
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotificationName:object:userInfo:", a1, a2, a3);
  WTF::RunLoop::main(v6);
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E3355F20;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v9 = v8;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

void sub_19533E390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebThreadCallDelegateAsync(CFTypeRef cf)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  void *v4;
  CFTypeRef cfa;

  if (webThreadStarted == 1 && (v2 = (_opaque_pthread_t *)webThread, v3 = pthread_self(), pthread_equal(v2, v3)))
  {
    {
      v4 = (void *)sAsyncDelegates(void)::asyncDelegates;
    }
    else
    {
      v4 = 0;
      sAsyncDelegates(void)::asyncDelegates = 0;
    }
    objc_msgSend(v4, "addObject:", cf);
  }
  else
  {
    cfa = cf;
    if (cf)
      CFRetain(cf);
    SendDelegateMessage((id *)&cfa);
    if (cfa)
      CFRelease(cfa);
  }
}

void sub_19533E4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void *WebThreadMakeNSInvocation(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = objc_msgSend(a1, "methodSignatureForSelector:", a2);
  if (!v4)
    return 0;
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v4);
  objc_msgSend(v5, "setSelector:", a2);
  objc_msgSend(v5, "setTarget:", a1);
  objc_msgSend(v5, "retainArguments");
  return v5;
}

void WebRunLoopEnableNested()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;
  __CFRunLoop *Current;
  __CFRunLoopObserver *v3;

  if (webThreadStarted == 1)
  {
    v0 = (_opaque_pthread_t *)webThread;
    v1 = pthread_self();
    if (!pthread_equal(v0, v1))
    {
      Current = CFRunLoopGetCurrent();
      {
        v3 = (__CFRunLoopObserver *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
      }
      else
      {
        v3 = 0;
        mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = 0;
      }
      CFRunLoopRemoveObserver(Current, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    }
    _CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
    savedAutoreleasePoolMark = autoreleasePoolMark;
    autoreleasePoolMark = 0;
    WebRunLoopUnlockInternal(1);
  }
}

uint64_t WebRunLoopUnlockInternal(int a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  const void *v7;
  void *v8;
  uint64_t result;
  CFTypeRef cf;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  {
    v2 = (void *)sAsyncDelegates(void)::asyncDelegates;
  }
  else
  {
    v2 = 0;
    sAsyncDelegates(void)::asyncDelegates = 0;
  }
  if (objc_msgSend(v2, "count"))
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    {
      v3 = (void *)sAsyncDelegates(void)::asyncDelegates;
    }
    else
    {
      v3 = 0;
      sAsyncDelegates(void)::asyncDelegates = 0;
    }
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v12 != v5)
            objc_enumerationMutation(v3);
          v7 = *(const void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          cf = v7;
          if (v7)
            CFRetain(v7);
          SendDelegateMessage((id *)&cf);
          if (cf)
            CFRelease(cf);
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v4);
    }
    {
      v8 = (void *)sAsyncDelegates(void)::asyncDelegates;
    }
    else
    {
      v8 = 0;
      sAsyncDelegates(void)::asyncDelegates = 0;
    }
    objc_msgSend(v8, "removeAllObjects");
  }
  if (!a1 && !byte_1EE337833)
    objc_autoreleasePoolPop((void *)autoreleasePoolMark);
  result = _WebThreadUnlock();
  isWebThreadLocked = 0;
  return result;
}

void sub_19533E7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebRunLoopDisableNested()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;
  __CFRunLoop *Current;
  __CFRunLoopObserver *v3;

  if (webThreadStarted == 1)
  {
    v0 = (_opaque_pthread_t *)webThread;
    v1 = pthread_self();
    if (!pthread_equal(v0, v1))
    {
      Current = CFRunLoopGetCurrent();
      {
        v3 = (__CFRunLoopObserver *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
      }
      else
      {
        v3 = 0;
        mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = 0;
      }
      CFRunLoopAddObserver(Current, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    }
    _CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
    autoreleasePoolMark = savedAutoreleasePoolMark;
    savedAutoreleasePoolMark = 0;
    _WebThreadLock();
    isWebThreadLocked = 1;
  }
}

void WebThreadLockFromAnyThread()
{
  _WebThreadLockFromAnyThread(1);
}

void _WebThreadLockFromAnyThread(int a1)
{
  WTF::Thread *v2;
  __CFRunLoop *Current;
  __CFRunLoopObserver *v4;
  __CFRunLoop *Main;
  unint64_t v6;
  pthread_key_t *v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  char v12;
  char **v13;
  char *v14;

  if (webThreadStarted != 1)
    return;
  v2 = (WTF::Thread *)pthread_main_np();
  if (!(_DWORD)v2)
  {
    if (a1)
    {
      v6 = atomic_load(&CurrentThreadContext(void)::flag);
      if (v6 != -1)
      {
        v14 = &v12;
        v13 = &v14;
        std::__call_once(&CurrentThreadContext(void)::flag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CurrentThreadContext(void)::$_0 &&>>);
      }
      v7 = (pthread_key_t *)threadContext;
      v8 = pthread_getspecific(*(_QWORD *)threadContext);
      if (!v8)
      {
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        v8[1] = v7;
        pthread_setspecific(*v7, v8);
        *v8 = 0;
      }
      NSLog(CFSTR("%s, %p: Obtaining the web lock from a thread other than the main thread or the web thread. UIKit should not be called from a secondary thread."), "void _WebThreadLockFromAnyThread(BOOL)", v8);
    }
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v9)
      v9 = WTF::Thread::initializeCurrentTLS(v2);
    if (v9 == webLock)
    {
      v11 = dword_1EE2F4FF8 + 1;
LABEL_22:
      dword_1EE2F4FF8 = v11;
      ++otherThreadLockCount;
      webThreadShouldYield = 0;
      return;
    }
    if (__ldaxr(byte_1EE2F4FFC))
    {
      __clrex();
    }
    else if (!__stxr(1u, byte_1EE2F4FFC))
    {
LABEL_21:
      webLock = v9;
      v11 = 1;
      goto LABEL_22;
    }
    MEMORY[0x19AEA534C](byte_1EE2F4FFC);
    goto LABEL_21;
  }
  if (!mainThreadLockCount)
  {
    mainThreadHasPendingAutoUnlock = 1;
    Current = CFRunLoopGetCurrent();
    {
      v4 = (__CFRunLoopObserver *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
    }
    else
    {
      v4 = 0;
      mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = 0;
    }
    CFRunLoopAddObserver(Current, v4, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    _WebThreadLock();
    Main = CFRunLoopGetMain();
    CFRunLoopWakeUp(Main);
  }
}

void sub_19533EA64(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebThreadLockFromAnyThreadNoLog()
{
  _WebThreadLockFromAnyThread(0);
}

void WebThreadUnlockFromAnyThread()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;
  _BOOL4 v2;
  int v3;

  if (webThreadStarted == 1)
  {
    v0 = (_opaque_pthread_t *)webThread;
    v1 = pthread_self();
    v2 = pthread_equal(v0, v1) == 0;
    WebCore::GraphicsContextGLANGLE::releaseThreadResources(v2);
    if (!pthread_main_np())
    {
      --otherThreadLockCount;
      if (!--dword_1EE2F4FF8)
      {
        webLock = 0;
        v3 = __ldxr(byte_1EE2F4FFC);
        if (v3 == 1)
        {
          if (!__stlxr(0, byte_1EE2F4FFC))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)byte_1EE2F4FFC);
      }
    }
  }
}

void WebThreadUnlockGuardForMail()
{
  __CFRunLoopObserver *v0;
  __CFRunLoop *Main;

  v0 = CFRunLoopObserverCreate(0, 1uLL, 1u, 0, (CFRunLoopObserverCallBack)MainRunLoopUnlockGuard, 0);
  Main = CFRunLoopGetMain();
  CFRunLoopAddObserver(Main, v0, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  if (v0)
    CFRelease(v0);
}

void sub_19533EBA4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void MainRunLoopUnlockGuard(__CFRunLoopObserver *a1, uint64_t a2, void *a3)
{
  BOOL v3;
  __CFRunLoop *Current;
  __CFRunLoopObserver *v5;

  if (mainThreadLockCount)
    v3 = sMainThreadModalCount == 0;
  else
    v3 = 0;
  if (v3)
  {
    NSLog(CFSTR("WARNING: Main thread didn't release the lock at last runloop exit!"), a2, a3);
    if (!sMainThreadModalCount && mainThreadHasPendingAutoUnlock == 1)
    {
      mainThreadHasPendingAutoUnlock = 0;
      Current = CFRunLoopGetCurrent();
      {
        v5 = (__CFRunLoopObserver *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
      }
      else
      {
        v5 = 0;
        mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = 0;
      }
      CFRunLoopRemoveObserver(Current, v5, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
      _WebThreadUnlock();
    }
    if (mainThreadLockCount)
      mainThreadLockCount = 0;
  }
}

BOOL WebThreadIsLocked()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;
  int *v2;
  int v3;

  if (webThreadStarted == 1 && (v0 = (_opaque_pthread_t *)webThread, v1 = pthread_self(), pthread_equal(v0, v1)))
  {
    v2 = &webThreadLockCount;
  }
  else
  {
    v3 = pthread_main_np();
    v2 = &mainThreadLockCount;
    if (!v3)
      v2 = &otherThreadLockCount;
  }
  return *v2 != 0;
}

void WebThreadLockPushModal()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;

  if (webThreadStarted != 1 || (v0 = (_opaque_pthread_t *)webThread, v1 = pthread_self(), !pthread_equal(v0, v1)))
    ++sMainThreadModalCount;
}

void WebThreadLockPopModal()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;

  if (webThreadStarted != 1 || (v0 = (_opaque_pthread_t *)webThread, v1 = pthread_self(), !pthread_equal(v0, v1)))
    --sMainThreadModalCount;
}

CFRunLoopRef WebThreadRunLoop()
{
  if (webThreadStarted == 1)
    return (CFRunLoopRef)webThreadRunLoop;
  else
    return CFRunLoopGetCurrent();
}

_QWORD *CurrentThreadContext(void)
{
  unint64_t v0;
  pthread_key_t *v1;
  _QWORD *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&CurrentThreadContext(void)::flag);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&CurrentThreadContext(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CurrentThreadContext(void)::$_0 &&>>);
  }
  v1 = (pthread_key_t *)threadContext;
  v2 = pthread_getspecific(*(_QWORD *)threadContext);
  if (!v2)
  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v2[1] = v1;
    pthread_setspecific(*v1, v2);
    *v2 = 0;
  }
  return v2;
}

void sub_19533EE44(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebThreadEnable(WebCore::IOSApplication *a1)
{
  NSObject *v2;
  unint64_t v3;
  uint8_t *v4;
  uint8_t buf[16];

  if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
    && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0)
  {
    __break(0xC471u);
  }
  else
  {
    if (WebCore::IOSApplication::isAppleApplication(a1))
    {
      v2 = qword_1ECE7CC20;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CC20, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1940B8000, v2, OS_LOG_TYPE_FAULT, "WebThread enabled", buf, 2u);
      }
    }
    v3 = atomic_load(&WebThreadEnable::flag);
    if (v3 != -1)
    {
      v4 = buf;
      *(_QWORD *)buf = StartWebThread;
      std::__call_once(&WebThreadEnable::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<void (&)(void)>>);
    }
  }
}

uint64_t StartWebThread(WTF *a1)
{
  WebCore *v1;
  unint64_t v2;
  uint64_t v3;
  objc_class *v4;
  objc_class *v5;
  objc_method *InstanceMethod;
  objc_method *v7;
  const char *TypeEncoding;
  void (*MethodImplementation)(void);
  const char *v10;
  objc_method *v11;
  __CFRunLoop *Current;
  CFRunLoopSourceRef v13;
  __CFRunLoopSource *v14;
  const void *v15;
  id v16;
  const void *v17;
  CFRunLoopObserverRef v18;
  const void *v19;
  WTF *v20;
  WTF *v22;
  int v23;
  CFRunLoopSourceContext v25;
  uint64_t v26;
  int v27;
  pthread_attr_t __attr;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  webThreadStarted = 1;
  v1 = (WebCore *)WTF::initializeMainThread(a1);
  v2 = atomic_load(&WebCore::initializeCommonAtomStrings(void)::initializeKey);
  if (v2 != -1)
  {
    v25.version = (CFIndex)&v26;
    __attr.__sig = (uint64_t)&v25;
    std::__call_once(&WebCore::initializeCommonAtomStrings(void)::initializeKey, &__attr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::initializeCommonAtomStrings(void)::$_0 &&>>);
  }
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || !*(_QWORD *)(v3 + 96))
    WebCore::threadGlobalDataSlow(v1);
  v4 = (objc_class *)objc_opt_class();
  WebCoreObjCDeallocOnWebThread(v4);
  v5 = (objc_class *)objc_opt_class();
  InstanceMethod = class_getInstanceMethod(v5, sel_release);
  if (InstanceMethod)
  {
    v7 = InstanceMethod;
    TypeEncoding = method_getTypeEncoding(InstanceMethod);
    if (class_addMethod(v5, sel__webcore_releaseWithWebThreadLock, (IMP)WebCoreObjCDeallocWithWebThreadLockImpl, TypeEncoding))
    {
      MethodImplementation = class_getMethodImplementation(v5, sel_release);
      v10 = method_getTypeEncoding(v7);
      if (class_addMethod(v5, sel_release, MethodImplementation, v10))
        v7 = class_getInstanceMethod(v5, sel_release);
      v11 = class_getInstanceMethod(v5, sel__webcore_releaseWithWebThreadLock);
      method_exchangeImplementations(v7, v11);
    }
  }
  Current = CFRunLoopGetCurrent();
  *(_OWORD *)&v25.cancel = xmmword_1E3355E88;
  memset(&v25, 0, 64);
  v13 = CFRunLoopSourceCreate(0, 0, &v25);
  v14 = v13;
  if ((byte_1EE337831 & 1) != 0)
  {
    v15 = (const void *)qword_1EE337868;
    qword_1EE337868 = (uint64_t)v14;
    if (v15)
    {
      CFRelease(v15);
      if (byte_1EE337831 == 1)
      {
        v14 = (__CFRunLoopSource *)qword_1EE337868;
      }
      else
      {
        v14 = 0;
        qword_1EE337868 = 0;
        byte_1EE337831 = 1;
      }
    }
  }
  else
  {
    byte_1EE337831 = 1;
    qword_1EE337868 = (uint64_t)v13;
  }
  CFRunLoopAddSource(Current, v14, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  {
    v17 = (const void *)sAsyncDelegates(void)::asyncDelegates;
    sAsyncDelegates(void)::asyncDelegates = (uint64_t)v16;
    if (v17)
      CFRelease(v17);
  }
  else
  {
    sAsyncDelegates(void)::asyncDelegates = (uint64_t)v16;
  }
  v18 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 3000001, (CFRunLoopObserverCallBack)MainRunLoopAutoUnlock, 0);
  {
    v19 = (const void *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
    mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = (uint64_t)v18;
    if (v19)
      CFRelease(v19);
  }
  else
  {
    mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = (uint64_t)v18;
  }
  pthread_attr_init(&__attr);
  pthread_attr_setscope(&__attr, 1);
  pthread_attr_setstacksize(&__attr, 0xC8000uLL);
  v20 = (WTF *)pthread_attr_set_qos_class_np(&__attr, QOS_CLASS_USER_INTERACTIVE, -10);
  if (__ldaxr((unsigned __int8 *)&unk_1EE337835))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1EE337835))
  {
    goto LABEL_25;
  }
  v20 = (WTF *)MEMORY[0x19AEA534C](&unk_1EE337835);
LABEL_25:
  {
    if (byte_1ECE911D0)
    {
      __break(0xC471u);
      JUMPOUT(0x19533F2CCLL);
    }
  }
  else
  {
    byte_1ECE911D0 = 0;
  }
  if ((WTF::isUIThread(v20) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19533F2ECLL);
  }
  fegetenv(&WebCore::FloatingPointEnvironment::singleton(void)::floatingPointEnvironment);
  byte_1ECE911D0 = 1;
  pthread_create((pthread_t *)&webThread, &__attr, (void *(__cdecl *)(void *))RunWebThread, 0);
  pthread_attr_destroy(&__attr);
  v26 = 0x7FF0000000000000;
  v27 = 0;
  v22 = (WTF *)WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)byte_1EE337836, (unsigned __int8 *)&unk_1EE337835, (WTF::TimeWithDynamicClockType *)&v26);
  v23 = __ldxr((unsigned __int8 *)&unk_1EE337835);
  if (v23 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&unk_1EE337835))
      return WTF::initializeApplicationUIThread(v22);
  }
  else
  {
    __clrex();
  }
  v22 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE337835);
  return WTF::initializeApplicationUIThread(v22);
}

void sub_19533F35C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE337835);
  goto LABEL_6;
}

BOOL WebThreadNotCurrent()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;

  if (webThreadStarted != 1)
    return 0;
  v0 = (_opaque_pthread_t *)webThread;
  v1 = pthread_self();
  return pthread_equal(v0, v1) == 0;
}

uint64_t _WKViewClearSuperview(uint64_t result, void *a2)
{
  *(_QWORD *)(result + 32) = 0;
  return result;
}

WTF::RunLoop *SendMessage(id *a1)
{
  WTF::RunLoop *result;
  CFRunLoopRef Main;
  id v4;
  WTF::RunLoop *v5;
  WTF::RunLoop *v6;

  result = (WTF::RunLoop *)objc_msgSend(*a1, "invoke");
  if (webThreadStarted == 1)
  {
    Main = CFRunLoopGetMain();
    result = CFRunLoopGetCurrent();
    if (Main != result)
    {
      WTF::RunLoop::main(result);
      v4 = *a1;
      *a1 = 0;
      v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = &off_1E3355E30;
      *((_QWORD *)v5 + 1) = v4;
      v6 = v5;
      WTF::RunLoop::dispatch();
      result = v6;
      if (v6)
        return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return result;
}

void sub_19533F494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<SendMessage(WTF::RetainPtr<NSInvocation> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  *a1 = &off_1E3355E30;
  a1[1] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<SendMessage(WTF::RetainPtr<NSInvocation> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3355E30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

void MainRunLoopAutoUnlock(__CFRunLoopObserver *a1, unint64_t a2, void *a3)
{
  __CFRunLoop *Current;
  __CFRunLoopObserver *v4;

  if (!sMainThreadModalCount && mainThreadHasPendingAutoUnlock == 1)
  {
    mainThreadHasPendingAutoUnlock = 0;
    Current = CFRunLoopGetCurrent();
    {
      v4 = (__CFRunLoopObserver *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
    }
    else
    {
      v4 = 0;
      mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = 0;
    }
    CFRunLoopRemoveObserver(Current, v4, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    _WebThreadUnlock();
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<CurrentThreadContext(void)::$_0 &&>>()
{
  pthread_key_t *v0;
  uint64_t result;

  v0 = (pthread_key_t *)WTF::fastMalloc((WTF *)8);
  *v0 = 0;
  result = pthread_key_create(v0, (void (__cdecl *)(void *))WTF::ThreadSpecific<WebThreadContext,(WTF::CanBeGCThread)1>::destroy);
  if ((_DWORD)result)
    __break(0xC471u);
  else
    threadContext = (uint64_t)v0;
  return result;
}

void sub_19533F604(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSpecific<WebThreadContext,(WTF::CanBeGCThread)1>::destroy(_QWORD **a1)
{
  void *v2;

  pthread_setspecific(*a1[1], a1);
  pthread_setspecific(*a1[1], 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t HandleDelegateSource(void *a1)
{
  __CFRunLoop *Current;
  __CFRunLoopObserver *v2;
  __CFRunLoop *Main;
  uint64_t result;
  unsigned __int8 v6;
  int v7;
  _QWORD v8[2];
  char v9;
  _QWORD v10[3];

  if (!mainThreadLockCount)
  {
    mainThreadHasPendingAutoUnlock = 1;
    Current = CFRunLoopGetCurrent();
    {
      v2 = (__CFRunLoopObserver *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
    }
    else
    {
      v2 = 0;
      mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = 0;
    }
    CFRunLoopAddObserver(Current, v2, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    _WebThreadLock();
    Main = CFRunLoopGetMain();
    CFRunLoopWakeUp(Main);
  }
  if (__ldaxr((unsigned __int8 *)&unk_1EE33782F))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1EE33782F))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](&unk_1EE33782F);
LABEL_9:
  if ((byte_1EE337830 & 1) == 0)
  {
    qword_1EE337860 = 0;
    byte_1EE337830 = 1;
  }
  result = (uint64_t)SendMessage((id *)&qword_1EE337860);
  byte_1EE33782E = 1;
  v6 = atomic_load((unsigned __int8 *)&unk_1EE337832);
  if ((v6 & 1) != 0)
  {
    v9 = 0;
    v8[0] = &unk_1EE337832;
    v8[1] = &v9;
    v10[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v10[1] = v10;
    v10[2] = v8;
    result = WTF::ParkingLot::unparkOneImpl();
  }
  v7 = __ldxr((unsigned __int8 *)&unk_1EE33782F);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE33782F);
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1EE33782F))
    return WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE33782F);
  return result;
}

void sub_19533F7B4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;

  v2 = v1;
  v4 = v2;
  LODWORD(v2) = __ldxr(v2);
  if ((_DWORD)v2 == 1)
  {
    if (!__stlxr(0, v4))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE33782F);
  goto LABEL_6;
}

void RunWebThread(WTF *a1)
{
  WTF *v1;
  JSC *v2;
  unint64_t StatusReg;
  WebCore *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  pthread_key_t *v11;
  _QWORD *v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  __CFRunLoopObserver *v16;
  const __CFString *v17;
  __CFRunLoopObserver *v18;
  CFRunLoopSourceRef v19;
  __CFRunLoopSource *v20;
  const void *v21;
  __CFRunLoop *v22;
  const __CFString *v23;
  unsigned __int8 v25;
  int v26;
  CFRunLoopSourceContext v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[3];

  {
    if (byte_1ECE911D0)
    {
      if (WTF::isUIThread(a1))
      {
        __break(0xC471u);
        JUMPOUT(0x19533FB5CLL);
      }
      v1 = (WTF *)fesetenv(&WebCore::FloatingPointEnvironment::singleton(void)::floatingPointEnvironment);
      v2 = (JSC *)WTF::initializeWebThread(v1);
      JSC::initialize(v2);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v4 = *(WebCore **)(StatusReg + 736);
      if (v4 && *((_QWORD *)v4 + 12))
      {
        v5 = WebCore::sharedMainThreadStaticData;
      }
      else
      {
        WebCore::threadGlobalDataSlow(v4);
        v4 = *(WebCore **)(StatusReg + 736);
        v5 = WebCore::sharedMainThreadStaticData;
        if (!v4)
          v4 = (WebCore *)WTF::Thread::initializeCurrentTLS(0);
      }
      v6 = (unsigned int *)*((_QWORD *)v4 + 12);
      *((_QWORD *)v4 + 12) = v5;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      pthread_setname_np("WebThread");
      v10 = atomic_load(&CurrentThreadContext(void)::flag);
      if (v10 != -1)
      {
        v27.version = (CFIndex)v28;
        v30[0] = &v27;
        std::__call_once(&CurrentThreadContext(void)::flag, v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CurrentThreadContext(void)::$_0 &&>>);
      }
      v11 = (pthread_key_t *)threadContext;
      v12 = pthread_getspecific(*(_QWORD *)threadContext);
      if (!v12)
      {
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        v12[1] = v11;
        pthread_setspecific(*v11, v12);
        *v12 = 0;
      }
      *(_QWORD *)algn_1EE337878 = v12;
      webThreadRunLoop = (uint64_t)CFRunLoopGetCurrent();
      v13 = (const void *)objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop");
      v14 = (uint64_t)v13;
      if ((byte_1EE337834 & 1) != 0)
      {
        if (!v13)
          goto LABEL_21;
      }
      else
      {
        qword_1EE337870 = 0;
        byte_1EE337834 = 1;
        if (!v13)
        {
LABEL_21:
          v15 = (const void *)qword_1EE337870;
          qword_1EE337870 = v14;
          if (v15)
            CFRelease(v15);
          v16 = CFRunLoopObserverCreate(0, 0x46uLL, 1u, 0, (CFRunLoopObserverCallBack)WebRunLoopLock, 0);
          v17 = (const __CFString *)*MEMORY[0x1E0C9B270];
          CFRunLoopAddObserver((CFRunLoopRef)webThreadRunLoop, v16, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
          if (WebThreadInitRunQueue::pred != -1)
            dispatch_once(&WebThreadInitRunQueue::pred, &__block_literal_global_48);
          v18 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 2500000, (CFRunLoopObserverCallBack)WebRunLoopUnlock, 0);
          CFRunLoopAddObserver((CFRunLoopRef)webThreadRunLoop, v18, v17);
          *(_OWORD *)&v27.cancel = xmmword_1E3355ED8;
          memset(&v27, 0, 64);
          v19 = CFRunLoopSourceCreate(0, -1, &v27);
          v20 = v19;
          if ((byte_1EE33782D & 1) != 0)
          {
            v21 = (const void *)qword_1EE337858;
            qword_1EE337858 = (uint64_t)v20;
            if (v21)
            {
              CFRelease(v21);
              v22 = (__CFRunLoop *)webThreadRunLoop;
              if (byte_1EE33782D == 1)
              {
                v20 = (__CFRunLoopSource *)qword_1EE337858;
              }
              else
              {
                v20 = 0;
                qword_1EE337858 = 0;
                byte_1EE33782D = 1;
              }
LABEL_29:
              v23 = (const __CFString *)*MEMORY[0x1E0C9B280];
              CFRunLoopAddSource(v22, v20, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
              byte_1EE337833 = _CFRunLoopSetPerCalloutAutoreleasepoolEnabled() != 0;
              if (__ldaxr((unsigned __int8 *)&unk_1EE337835))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)&unk_1EE337835))
              {
LABEL_34:
                v25 = atomic_load(byte_1EE337836);
                if ((v25 & 1) != 0)
                {
                  v29 = 0;
                  v28[0] = byte_1EE337836;
                  v28[1] = &v29;
                  v30[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
                  v30[1] = v30;
                  v30[2] = v28;
                  WTF::ParkingLot::unparkOneImpl();
                }
                v26 = __ldxr((unsigned __int8 *)&unk_1EE337835);
                if (v26 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)&unk_1EE337835))
                    goto LABEL_41;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE337835);
                while (1)
LABEL_41:
                  CFRunLoopRunInMode(v23, 6.31139904e10, 1u);
              }
              MEMORY[0x19AEA534C](&unk_1EE337835);
              goto LABEL_34;
            }
          }
          else
          {
            byte_1EE33782D = 1;
            qword_1EE337858 = (uint64_t)v19;
          }
          v22 = (__CFRunLoop *)webThreadRunLoop;
          goto LABEL_29;
        }
      }
      CFRetain(v13);
      goto LABEL_21;
    }
  }
  else
  {
    byte_1ECE911D0 = 0;
  }
  __break(0xC471u);
  JUMPOUT(0x19533FBC0);
}

void sub_19533FC10(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  unsigned __int8 *v3;
  int v5;

  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (!v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE337835);
  if (!v2)
  {
LABEL_4:
    if (!v1)
      goto LABEL_10;
LABEL_9:
    CFRelease(v1);
LABEL_10:
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  CFRelease(v2);
  if (!v1)
    goto LABEL_10;
  goto LABEL_9;
}

void WebCoreObjCDeallocWithWebThreadLockImpl(objc_object *a1, objc_selector *a2)
{
  uint64_t v3;
  int v5;
  _opaque_pthread_t *v6;
  _opaque_pthread_t *v7;
  int *v8;
  int v9;
  int v10;

  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3)
    v3 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
  if (v3 != webCoreReleaseLock)
  {
    if (__ldaxr(byte_1EE337824))
    {
      __clrex();
    }
    else if (!__stxr(1u, byte_1EE337824))
    {
LABEL_9:
      webCoreReleaseLock = v3;
      v5 = 1;
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](byte_1EE337824, a2);
    goto LABEL_9;
  }
  v5 = dword_1EE337820 + 1;
LABEL_10:
  dword_1EE337820 = v5;
  if (webThreadStarted != 1)
    goto LABEL_18;
  v6 = (_opaque_pthread_t *)webThread;
  v7 = pthread_self();
  if (pthread_equal(v6, v7))
  {
    v8 = &webThreadLockCount;
  }
  else
  {
    v9 = pthread_main_np();
    v8 = &mainThreadLockCount;
    if (!v9)
      v8 = &otherThreadLockCount;
  }
  if (!*v8 && -[objc_object retainCount](a1, "retainCount") == 1)
    WebThreadAdoptAndRelease(a1);
  else
LABEL_18:
    -[objc_object _webcore_releaseWithWebThreadLock](a1, "_webcore_releaseWithWebThreadLock");
  if (!--dword_1EE337820)
  {
    webCoreReleaseLock = 0;
    v10 = __ldxr(byte_1EE337824);
    if (v10 == 1)
    {
      if (!__stlxr(0, byte_1EE337824))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)byte_1EE337824);
  }
}

void sub_19533FE0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v3;
  int v4;

  v3 = *(_DWORD *)(v1 + 2080) - 1;
  *(_DWORD *)(v1 + 2080) = v3;
  if (!v3)
  {
    webCoreReleaseLock = 0;
    v4 = __ldxr(byte_1EE337824);
    if (v4 == 1)
    {
      if (!__stlxr(0, byte_1EE337824))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)byte_1EE337824);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void WebRunLoopLock(__CFRunLoopObserver *a1, unint64_t a2, void *a3)
{
  uint64_t v4;

  if (isWebThreadLocked != 1 || mainThreadLockCount != 0)
  {
    v4 = _WebThreadLock();
    if (!byte_1EE337833)
      autoreleasePoolMark = MEMORY[0x19AEA7E30](v4);
    isWebThreadLocked = 1;
  }
}

uint64_t WebRunLoopUnlock(__CFRunLoopObserver *a1, unint64_t a2, void *a3)
{
  uint64_t result;

  if (isWebThreadLocked == 1)
    return WebRunLoopUnlockInternal(0);
  return result;
}

void HandleWebThreadReleaseSource(void *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  const __CFArray *MutableCopy;
  __CFArray *v5;
  int v6;
  uint64_t Count;
  CFIndex i;
  const void *ValueAtIndex;

  if (__ldaxr((unsigned __int8 *)&unk_1EE33782B))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1EE33782B))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&unk_1EE33782B);
LABEL_5:
  if (byte_1EE33782C == 1)
  {
    v2 = (const __CFArray *)qword_1EE337850;
  }
  else
  {
    v2 = 0;
    qword_1EE337850 = 0;
    byte_1EE33782C = 1;
  }
  if (CFArrayGetCount(v2))
  {
    if (byte_1EE33782C == 1)
    {
      v3 = (const __CFArray *)qword_1EE337850;
    }
    else
    {
      v3 = 0;
      qword_1EE337850 = 0;
      byte_1EE33782C = 1;
    }
    MutableCopy = CFArrayCreateMutableCopy(0, 0, v3);
    if (byte_1EE33782C == 1)
    {
      v5 = (__CFArray *)qword_1EE337850;
    }
    else
    {
      v5 = 0;
      qword_1EE337850 = 0;
      byte_1EE33782C = 1;
    }
    CFArrayRemoveAllValues(v5);
  }
  else
  {
    MutableCopy = 0;
  }
  v6 = __ldxr((unsigned __int8 *)&unk_1EE33782B);
  if (v6 != 1)
  {
    __clrex();
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)&unk_1EE33782B);
    if (!MutableCopy)
      return;
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1EE33782B))
    goto LABEL_24;
  if (!MutableCopy)
    return;
LABEL_17:
  Count = CFArrayGetCount(MutableCopy);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, i);
      if (ValueAtIndex)
        CFRelease(ValueAtIndex);
    }
  }
  CFRelease(MutableCopy);
}

void sub_195340050(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<void({block_pointer})(void),void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

_QWORD *WTF::Detail::CallableWrapper<WebThreadPostNotification::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *a1 = &off_1E3355F20;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebThreadPostNotification::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;

  *(_QWORD *)this = &off_1E3355F20;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebThreadPostNotification::$_0,void>::call(_QWORD *a1)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotificationName:object:userInfo:", a1[1], a1[2], a1[3]);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t WebCore::FormDataConsumer::FormDataConsumer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;

  *a1 = 0;
  result = bmalloc::api::isoAllocate();
  v8 = result;
  *(_DWORD *)result = 1;
  v9 = *(unsigned int *)(a2 + 20);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >= 0x5555556)
      goto LABEL_18;
    v10 = 48 * v9;
    v11 = WTF::fastMalloc((WTF *)(48 * v9));
    *(_DWORD *)(v8 + 16) = (v10 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)(v8 + 8) = v11;
    v12 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v12)
    {
      v13 = v11;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = 48 * v12;
      do
      {
        *(_BYTE *)v13 = 0;
        *(_DWORD *)(v13 + 40) = -1;
        v16 = *(unsigned int *)(v14 + 40);
        if ((_DWORD)v16 != -1)
        {
          ((void (*)(_QWORD **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v16])(&v25, v13, v14);
          *(_DWORD *)(v13 + 40) = v16;
        }
        v13 += 48;
        v14 += 48;
        v15 -= 48;
      }
      while (v15);
    }
  }
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  a1[1] = v8;
  v17 = *(char *)(a3 + 274);
  if (v17 <= 2)
    *(_DWORD *)(a3 + qword_1968DE0F8[v17]) += dword_1968DE110[v17];
  a1[2] = a3;
  v18 = *a4;
  *a4 = 0;
  a1[3] = v18;
  a1[4] = 0;
  WTF::WorkQueue::create();
  a1[6] = 0;
  if (!a1[2])
    return (uint64_t)a1;
  v19 = a1[4];
  v20 = a1[1];
  if (v19 >= *(unsigned int *)(v20 + 20))
  {
    v23 = a1[3];
    v25 = 0;
    v26 = 0;
    LODWORD(v27) = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v23 + 16))(v23, &v25);
    if ((_DWORD)v27 != -1)
      ((void (*)(_QWORD **, _QWORD **))off_1E33560E8[v27])(&v28, &v25);
    return (uint64_t)a1;
  }
  a1[4] = v19 + 1;
  v21 = *(_QWORD *)(v20 + 8) + 48 * v19;
  v25 = a1;
  v26 = a1;
  v27 = a1;
  v22 = *(unsigned int *)(v21 + 40);
  if ((_DWORD)v22 != -1)
  {
    v28 = &v25;
    ((void (*)(_QWORD **, uint64_t))off_1E3356310[v22])(&v28, v21);
    return (uint64_t)a1;
  }
  result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
  __break(0xC471u);
  return result;
}

void WebCore::FormDataConsumer::~FormDataConsumer(WebCore::FormDataConsumer *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::FormData *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100]((uint64_t *)this + 6, 0);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), v2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = (WebCore::FormData *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::FormData::~FormData(v7, v2);
      bmalloc::api::isoDeallocate(v11, v12);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v8 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

unsigned int *WebCore::FormDataConsumer::consume(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::FormDataConsumer *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  result = (unsigned int *)a1[3];
  if (result)
  {
    v10 = a2;
    v11 = a3;
    LODWORD(v12) = 0;
    (*(void (**)(unsigned int *, _QWORD **))(*(_QWORD *)result + 16))(result, &v10);
    if ((_DWORD)v12 != -1)
      ((void (*)(_QWORD **, _QWORD **))off_1E33560E8[v12])(&v13, &v10);
    result = (unsigned int *)a1[3];
    if (result && a1[2])
    {
      v5 = a1[4];
      v6 = a1[1];
      if (v5 >= *(unsigned int *)(v6 + 20))
      {
        v10 = 0;
        v11 = 0;
        LODWORD(v12) = 0;
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, _QWORD **))(*(_QWORD *)result + 16))(result, &v10);
        if ((_DWORD)v12 != -1)
          return (unsigned int *)((uint64_t (*)(_QWORD **, _QWORD **))off_1E33560E8[v12])(&v13, &v10);
      }
      else
      {
        a1[4] = v5 + 1;
        v7 = *(_QWORD *)(v6 + 8) + 48 * v5;
        v10 = a1;
        v11 = a1;
        v12 = a1;
        v8 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v8 == -1)
        {
          v9 = (WebCore::FormDataConsumer *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::FormDataConsumer::cancel(v9);
        }
        else
        {
          v13 = &v10;
          return (unsigned int *)((uint64_t (*)(_QWORD **, uint64_t))off_1E3356310[v8])(&v13, v7);
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::FormDataConsumer::cancel(WebCore::FormDataConsumer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  unsigned int *result;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  v11 = 0;
  v12 = v3;
  std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100]((uint64_t *)this + 6, 0);
  std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v11, 0);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      *(_WORD *)(v4 + 204) = 272;
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v4, v6);
      }
    }
    v7 = *(_QWORD *)(v3 + 24);
    if (v7)
    {
      *(_QWORD *)(v3 + 24) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v12, 0);
  result = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    v10 = *((unsigned __int8 *)result + 274);
    if (*((_BYTE *)result + 274))
    {
      if (v10 == 1)
      {
        if (result[78] == 1)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
        else
          --result[78];
      }
      else if (v10 == 2)
      {
        return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(result + 78);
      }
    }
    else if (*(result - 42) == 2)
    {
      if ((*((_WORD *)result - 81) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(result - 48), v8);
    }
    else
    {
      *(result - 42) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WindowOrWorkerGlobalScopeFetch::fetch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (*(_BYTE *)(a1 + 56))
  {
    v13 = *a4;
    v15 = 0;
    WebCore::DeferredPromise::reject(v13, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v15, 0);
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 72);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19534092CLL);
      }
      v7 = (_DWORD *)(v6 - 264);
      *(_DWORD *)(v6 - 264) += 2;
      v8 = (WTF::StringImpl *)*a4;
      *a4 = 0;
      v15 = v8;
      WebCore::doFetch((char *)(v6 - 96), a2, a3, (uint64_t *)&v15);
      result = v15;
      if (v15)
      {
        if (*((_DWORD *)v15 + 4) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 16))();
        else
          --*((_DWORD *)v15 + 4);
      }
      if (*v7 == 2)
      {
        if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v9);
      }
      else
      {
        *v7 -= 2;
      }
    }
    else
    {
      v11 = *a4;
      v15 = 0;
      WebCore::DeferredPromise::reject(v11, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v15, 0);
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (*(_DWORD *)(a1 + 24) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    else
      --*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *WebCore::FileSystemDirectoryHandle::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  WebCore::ContextDestructionObserver *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v10 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v11 = (uint64_t)v10;
  if (!*(_BYTE *)(a1 + 274))
  {
    v12 = a1 - 192;
    v13 = *(_QWORD *)(a1 + 512);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v12 = v14;
    }
    a1 = v12 + 192;
  }
  *(_QWORD *)v10 = &off_1E33A18C0;
  *((_QWORD *)v10 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v10, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v11 = &off_1E33A0540;
  *(_QWORD *)(v11 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195340A4CLL);
  }
  v19 = v11;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v19, (uint64_t)&v18);
  *(_DWORD *)(v11 + 24) = 1;
  *(_BYTE *)(v11 + 28) = 1;
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)(v11 + 32) = v15;
  *(_QWORD *)(v11 + 40) = a3;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(v11 + 48) = v16;
  *(_BYTE *)(v11 + 56) = 0;
  *(_QWORD *)v11 = &off_1E3355F48;
  *a5 = v11;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v11);
}

WTF::StringImpl *WebCore::FileSystemDirectoryHandle::getFileHandle(uint64_t a1, WTF::StringImpl **a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  objc_class *v32;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = *a4;
    v32 = 0;
    LOBYTE(v30) = 8;
    if (v29)
      *(_DWORD *)v29 += 2;
    v31 = v29;
    WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v30, 0, &v32);
    v7 = v31;
    v31 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = v29;
    if (v29)
    {
      if (*(_DWORD *)v29 != 2)
      {
        *(_DWORD *)v29 -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v13 = v12 - 96;
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    v15 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v16 = *a3;
    v17 = *(_QWORD *)(v13 + 104);
    if (v17)
      goto LABEL_40;
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = v13 + 96;
    v26 = *(unsigned int **)(v13 + 104);
    *(_QWORD *)(v13 + 104) = v17;
    if (!v26)
      goto LABEL_40;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v25);
    }
    v17 = *(_QWORD *)(v13 + 104);
    if (v17)
    {
LABEL_40:
      do
        v18 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v18 + 1, (unsigned int *)v17));
    }
    v19 = *(_QWORD *)(a1 + 48);
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = *a2;
    if (*a2)
      *(_DWORD *)v22 += 2;
    v23 = *a4;
    *a4 = 0;
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v24 = &off_1E3356398;
    *((_QWORD *)v24 + 1) = v17;
    *((_QWORD *)v24 + 2) = v19;
    if (v22)
      *(_DWORD *)v22 += 2;
    *((_QWORD *)v24 + 3) = v22;
    *((_QWORD *)v24 + 4) = v23;
    v30 = v24;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, BOOL, WTF::StringImpl **))(*(_QWORD *)v14 + 48))(v14, v15, a2, v16 != 0, &v30);
    result = v30;
    v30 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        result = v22;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      *(_DWORD *)v22 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  unsigned __int8 v6[8];
  WTF::StringImpl *v7;
  objc_class *v8;

  v2 = *(_BYTE *)a2;
  v3 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = 0;
  v6[0] = v2;
  if (v3)
    *(_DWORD *)v3 += 2;
  v7 = v3;
  WebCore::DeferredPromise::reject(a1, v6, 0, &v8);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      if (!v3)
        return result;
      goto LABEL_7;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v3)
    return result;
LABEL_7:
  if (*(_DWORD *)v3 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v4);
  *(_DWORD *)v3 -= 2;
  return result;
}

WTF::StringImpl *WebCore::FileSystemDirectoryHandle::getDirectoryHandle(uint64_t a1, WTF::StringImpl **a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  objc_class *v32;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = *a4;
    v32 = 0;
    LOBYTE(v30) = 8;
    if (v29)
      *(_DWORD *)v29 += 2;
    v31 = v29;
    WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v30, 0, &v32);
    v7 = v31;
    v31 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = v29;
    if (v29)
    {
      if (*(_DWORD *)v29 != 2)
      {
        *(_DWORD *)v29 -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v13 = v12 - 96;
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
    v15 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v16 = *a3;
    v17 = *(_QWORD *)(v13 + 104);
    if (v17)
      goto LABEL_40;
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = v13 + 96;
    v26 = *(unsigned int **)(v13 + 104);
    *(_QWORD *)(v13 + 104) = v17;
    if (!v26)
      goto LABEL_40;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v25);
    }
    v17 = *(_QWORD *)(v13 + 104);
    if (v17)
    {
LABEL_40:
      do
        v18 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v18 + 1, (unsigned int *)v17));
    }
    v19 = *(_QWORD *)(a1 + 48);
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = *a2;
    if (*a2)
      *(_DWORD *)v22 += 2;
    v23 = *a4;
    *a4 = 0;
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v24 = &off_1E33563D0;
    *((_QWORD *)v24 + 1) = v17;
    *((_QWORD *)v24 + 2) = v19;
    if (v22)
      *(_DWORD *)v22 += 2;
    *((_QWORD *)v24 + 3) = v22;
    *((_QWORD *)v24 + 4) = v23;
    v30 = v24;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, BOOL, WTF::StringImpl **))(*(_QWORD *)v14 + 56))(v14, v15, a2, v16 != 0, &v30);
    result = v30;
    v30 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        result = v22;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      *(_DWORD *)v22 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::FileSystemDirectoryHandle::removeEntry(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  objc_class *v18;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = *a4;
    v18 = 0;
    LOBYTE(v16) = 8;
    if (v15)
      *(_DWORD *)v15 += 2;
    v17 = v15;
    WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v16, 0, &v18);
    v7 = v17;
    v17 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = (uint64_t)v15;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        return WTF::StringImpl::destroy(v15, v6);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v12 = *a3;
    v13 = *a4;
    *a4 = 0;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = &off_1E33563F8;
    v14[1] = v13;
    v16 = v14;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v10 + 64))(v10, v11, a2, v12, &v16);
    result = (uint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FileSystemDirectoryHandle::resolve(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  objc_class *v16;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = *a3;
    v16 = 0;
    LOBYTE(v14) = 8;
    if (v13)
      *(_DWORD *)v13 += 2;
    v15 = v13;
    WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v14, 0, &v16);
    v6 = v15;
    v15 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = (uint64_t)v13;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return WTF::StringImpl::destroy(v13, v5);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *a3;
    *a3 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E3356420;
    v12[1] = v11;
    v14 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v8 + 72))(v8, v9, v10, &v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FileSystemDirectoryHandle::Iterator::next(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11[2];
  int v12;
  char v13;

  *(_BYTE *)(a1 + 41) = 1;
  v3 = (*(_DWORD *)a1)++;
  v4 = *a2;
  *a2 = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v5 = &off_1E33564A8;
    v5[1] = a1;
    v5[2] = a1;
    v5[3] = v4;
    v11[0] = (uint64_t)v5;
    WebCore::FileSystemDirectoryHandle::Iterator::advance(a1, v11);
    result = v11[0];
    if (!v11[0])
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v7 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)a1 = v3 + 2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v8 = &off_1E3356480;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a1;
  v8[4] = a1;
  v8[5] = v4;
  v10 = v8;
  if (*(_BYTE *)(v7 + 56))
  {
    v9 = v8;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v11[0]) = 8;
    v12 = 1;
    (*(void (**)(_QWORD *, uint64_t *))(*v9 + 16))(v9, v11);
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
    if (v12 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33561A0[v12])(&v13, v11);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD **))(**(_QWORD **)(v7 + 48) + 136))(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 40), &v10);
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FileSystemDirectoryHandle::Iterator::advance(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  char v28;
  _QWORD *v29;
  _BYTE v30[8];
  int v31;
  char v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= *(unsigned int *)(a1 + 36))
  {
    v30[0] = 0;
    v32 = 0;
    v33 = 0;
    v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 16))(v10, &v29);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v33 != -1)
      return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33561C0[v33])(&v27, v30);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v2 + 1;
    v4 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 8 * v2);
    if (v4)
      *(_DWORD *)v4 += 2;
    v27 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    ++*(_DWORD *)a1;
    v6 = *a2;
    *a2 = 0;
    if (v4)
      *(_DWORD *)v4 += 2;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v7 = &off_1E33564E0;
    v7[1] = a1;
    v7[2] = a1;
    v7[3] = v6;
    v7[4] = v4;
    if (*(_BYTE *)(v5 + 56))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v29) = 8;
      v31 = 1;
      (*(void (**)(_QWORD *, _QWORD **))(*v7 + 16))(v7, &v29);
      result = (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
      if (v31 != -1)
        result = ((uint64_t (*)(char *, _QWORD **))off_1E33561B0[v31])(&v28, &v29);
    }
    else
    {
      v11 = *(_QWORD *)(v5 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v13 = v12 - 96;
        else
          v13 = 0;
      }
      else
      {
        v13 = 0;
      }
      v15 = *(_QWORD *)(v5 + 40);
      v14 = *(_QWORD *)(v5 + 48);
      v16 = *(_QWORD *)(v13 + 104);
      if (v16)
        goto LABEL_44;
      v16 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = v13 + 96;
      v24 = *(unsigned int **)(v13 + 104);
      *(_QWORD *)(v13 + 104) = v16;
      if (!v24)
        goto LABEL_44;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v23);
      }
      v16 = *(_QWORD *)(v13 + 104);
      if (v16)
      {
LABEL_44:
        do
          v17 = __ldaxr((unsigned int *)v16);
        while (__stlxr(v17 + 1, (unsigned int *)v16));
      }
      v18 = v27;
      if (v27)
        *(_DWORD *)v27 += 2;
      v19 = *(_QWORD *)(v5 + 48);
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v22 = &off_1E3356458;
      v22[1] = v16;
      if (v18)
        *(_DWORD *)v18 += 2;
      v22[2] = v18;
      v22[3] = v19;
      v22[4] = v7;
      v29 = v22;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v14 + 144))(v14, v15, &v27, &v29);
      result = (uint64_t)v29;
      v29 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          result = WTF::StringImpl::destroy(v18, v9);
        else
          *(_DWORD *)v18 -= 2;
      }
      v4 = v27;
    }
    v27 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        return WTF::StringImpl::destroy(v4, v9);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::FileSystemFileHandle::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  WebCore::ContextDestructionObserver *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v10 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v11 = (uint64_t)v10;
  if (!*(_BYTE *)(a1 + 274))
  {
    v12 = a1 - 192;
    v13 = *(_QWORD *)(a1 + 512);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v12 = v14;
    }
    a1 = v12 + 192;
  }
  *(_QWORD *)v10 = &off_1E33A18C0;
  *((_QWORD *)v10 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v10, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v11 = &off_1E33A0540;
  *(_QWORD *)(v11 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195341798);
  }
  v19 = v11;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v19, (uint64_t)&v18);
  *(_DWORD *)(v11 + 24) = 1;
  *(_BYTE *)(v11 + 28) = 0;
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)(v11 + 32) = v15;
  *(_QWORD *)(v11 + 40) = a3;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(v11 + 48) = v16;
  *(_BYTE *)(v11 + 56) = 0;
  *(_QWORD *)v11 = &off_1E3355FA0;
  *a5 = v11;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v11);
}

uint64_t WebCore::FileSystemFileHandle::getFile(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  objc_class *v15;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = *a2;
    v15 = 0;
    LOBYTE(v13) = 8;
    if (v12)
      *(_DWORD *)v12 += 2;
    v14 = v12;
    WebCore::DeferredPromise::reject(v3, (unsigned __int8 *)&v13, 0, &v15);
    v5 = v14;
    v14 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = (uint64_t)v12;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        return WTF::StringImpl::destroy(v12, v4);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    ++*(_DWORD *)(a1 + 24);
    v10 = *a2;
    *a2 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E3356528;
    v11[1] = a1;
    v11[2] = v10;
    v13 = v11;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v8 + 80))(v8, v9, &v13);
    result = (uint64_t)v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FileSystemFileHandle::createSyncAccessHandle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  objc_class *v15;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = *a2;
    v15 = 0;
    LOBYTE(v13) = 8;
    if (v12)
      *(_DWORD *)v12 += 2;
    v14 = v12;
    WebCore::DeferredPromise::reject(v3, (unsigned __int8 *)&v13, 0, &v15);
    v5 = v14;
    v14 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = (uint64_t)v12;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        return WTF::StringImpl::destroy(v12, v4);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    ++*(_DWORD *)(a1 + 24);
    v10 = *a2;
    *a2 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E3356560;
    v11[1] = a1;
    v11[2] = v10;
    v13 = v11;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v8 + 88))(v8, v9, &v13);
    result = (uint64_t)v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::FileSystemFileHandle::closeSyncAccessHandle(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  int v15;

  if (!*(_BYTE *)(result + 56))
  {
    v3 = result;
    v4 = *(_QWORD **)(result + 48);
    result = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    if ((result & 1) != 0)
    {
      v5 = v4[3];
      if (v5 && *(_QWORD *)(v5 + 8))
      {
        v6 = *(_QWORD *)(v3 + 40);
        v12 = 0;
        v13 = 0;
        v7 = v4[4];
        if (v7)
        {
          v8 = (unsigned int *)(v7 + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v10 = &off_1E3356990;
        v10[1] = v7;
        v10[2] = v6;
        v10[3] = a2;
        v10[4] = &v12;
        v14 = (uint64_t)v10;
        WTF::callOnMainThread();
        v11 = v14;
        v14 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v14 = 0x7FF0000000000000;
        v15 = 0;
        return WTF::BinarySemaphore::waitUntil();
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::FileSystemHandle::~FileSystemHandle(WebCore::FileSystemHandle *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = &off_1E3355FF8;
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
  }
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E3355FF8;
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
  }
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

uint64_t WebCore::FileSystemHandle::isSameEntry(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  objc_class *v19;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = *a3;
    v19 = 0;
    LOBYTE(v17) = 8;
    if (v16)
      *(_DWORD *)v16 += 2;
    v18 = v16;
    WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v17, 0, &v19);
    v6 = v18;
    v18 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = (uint64_t)v16;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        return WTF::StringImpl::destroy(v16, v5);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else if (*(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
         && (WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)(a2 + 32), (const WTF::StringImpl *)a3) & 1) != 0)
  {
    v12 = a1 + 40;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(v12 + 8);
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *a3;
    *a3 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E3356598;
    v15[1] = v14;
    v17 = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v11 + 32))(v11, v10, v13, &v17);
    result = (uint64_t)v17;
    v17 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*a3, 0);
  }
  return result;
}

WTF::StringImpl *WebCore::FileSystemHandle::move(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  objc_class *v19;
  WTF::StringImpl *v20;
  objc_class *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = *a4;
    LOBYTE(v19) = 8;
    v21 = 0;
    LOBYTE(v22) = 8;
    v6 = v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    v23 = v6;
    WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v22, 0, &v21);
    v8 = v23;
    v23 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v20;
    v20 = 0;
    if (!result)
      return result;
    goto LABEL_20;
  }
  if (*(_BYTE *)(a2 + 28) != 1)
  {
    v18 = *a4;
    v19 = 0;
    LOBYTE(v22) = 13;
    v23 = 0;
    WebCore::DeferredPromise::reject(v18, (unsigned __int8 *)&v22, 0, &v19);
    result = v23;
    v23 = 0;
    if (!result)
      return result;
LABEL_20:
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
  v13 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a2 + 40);
  ++*(_DWORD *)(a1 + 24);
  v15 = *a3;
  if (*a3)
    *(_DWORD *)v15 += 2;
  v16 = *a4;
  *a4 = 0;
  v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v17 = &off_1E33565D0;
  *((_QWORD *)v17 + 1) = a1;
  *((_QWORD *)v17 + 2) = a1;
  if (v15)
    *(_DWORD *)v15 += 2;
  *((_QWORD *)v17 + 3) = v15;
  *((_QWORD *)v17 + 4) = v16;
  v22 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v12 + 40))(v12, v13, v14, a3, &v22);
  result = v22;
  v22 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if (v15)
  {
    if (*(_DWORD *)v15 != 2)
    {
      *(_DWORD *)v15 -= 2;
      return result;
    }
    result = v15;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
  return result;
}

uint64_t WebCore::FileSystemHandle::stop(uint64_t this)
{
  if (!*(_BYTE *)(this + 56))
  {
    *(_BYTE *)(this + 56) = 1;
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(this + 48) + 24))(*(_QWORD *)(this + 48), *(_QWORD *)(this + 40));
  }
  return this;
}

void WebCore::FileSystemSyncAccessHandle::~FileSystemSyncAccessHandle(WebCore::FileSystemSyncAccessHandle *this, int *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E3356C58;
  v3 = *((_QWORD *)this + 5);
  if (!*(_BYTE *)(v3 + 56))
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 48) + 120))(*(_QWORD *)(v3 + 48), *((_QWORD *)this + 6));
  if (!*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 1;
    v13 = 0;
    v14 = 0;
    WebCore::FileHandle::close((WebCore::FileSystemSyncAccessHandle *)((char *)this + 56), a2);
    v12 = 0;
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    HIDWORD(v13) = -1;
    *((_QWORD *)this + 8) = 0xFFFFFFFF00000000;
    *((_BYTE *)this + 76) = 0;
    *((_DWORD *)this + 18) = 0;
    WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v12, (int *)v4);
    WebCore::FileSystemFileHandle::closeSyncAccessHandle(*((_QWORD *)this + 5), *((_QWORD *)this + 6));
  }
  WebCore::FileHandle::~FileHandle((WebCore::FileSystemSyncAccessHandle *)((char *)this + 56), a2);
  v7 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[6];
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v6);
}

{
  WTF *v2;
  void *v3;

  WebCore::FileSystemSyncAccessHandle::~FileSystemSyncAccessHandle(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::FileSystemSyncAccessHandle::read@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  char v10;
  char *v11;

  if (*(_BYTE *)(a1 + 80) || a3 && WTF::FileSystemImpl::seekFile() == -1)
    goto LABEL_7;
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 != -1)
  {
    v11 = &v10;
    ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore12BufferSource11mutableSpanEvEUlRT_E_EEJRNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v6])(&v11, a2);
    result = WTF::FileSystemImpl::readFromFile();
    if ((_DWORD)result != -1)
    {
      v8 = 0;
      *(_QWORD *)a4 = (int)result;
LABEL_8:
      *(_DWORD *)(a4 + 16) = v8;
      return result;
    }
LABEL_7:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 8;
    v8 = 1;
    goto LABEL_8;
  }
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::FileSystemSyncAccessHandle::write(v9);
}

uint64_t WebCore::FileSystemSyncAccessHandle::write@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::FileSystemSyncAccessHandle *v25;
  __int16 v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  int v31;

  if (*(_BYTE *)(a1 + 80))
    goto LABEL_2;
  if (a4)
  {
    if (WTF::FileSystemImpl::seekFile() == -1)
    {
LABEL_2:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 8;
LABEL_3:
      v7 = 1;
LABEL_4:
      *(_DWORD *)(a5 + 16) = v7;
      return result;
    }
  }
  else
  {
    a3 = WTF::FileSystemImpl::seekFile();
    if (a3 == -1)
      goto LABEL_2;
  }
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v11 != -1)
  {
    v30 = (uint64_t)&v28;
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E33561E0[v11])(&v30, a2);
    v12 = a3 + result;
    if (__CFADD__(a3, result))
      goto LABEL_28;
    v13 = *(_QWORD *)(a1 + 88);
    if (v12 > v13)
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (!*(_BYTE *)(v14 + 56))
      {
        v15 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD **)(v14 + 48);
        result = (*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
        if ((result & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195342520);
        }
        v17 = v16[3];
        if (v17 && *(_QWORD *)(v17 + 8) && (v18 = v16[4]) != 0)
        {
          v19 = *(_QWORD *)(v14 + 40);
          v26 = 0;
          v27 = 0;
          LOBYTE(v28) = 0;
          v20 = (unsigned int *)(v18 + 8);
          v29 = 0;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
          v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
          *v22 = &off_1E3356B98;
          v22[1] = v18;
          v22[2] = v19;
          v22[3] = v15;
          v22[4] = v12;
          v22[5] = &v28;
          v22[6] = &v26;
          v30 = (uint64_t)v22;
          WTF::callOnMainThread();
          v23 = v30;
          v30 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v30 = 0x7FF0000000000000;
          v31 = 0;
          result = WTF::BinarySemaphore::waitUntil();
        }
        else
        {
          LOBYTE(v28) = 0;
          v29 = 0;
        }
        if (v29)
        {
          v13 = v28;
          *(_QWORD *)(a1 + 88) = v28;
        }
        else
        {
          v13 = *(_QWORD *)(a1 + 88);
        }
      }
      if (v12 > v13)
      {
LABEL_28:
        *(_BYTE *)a5 = 18;
        *(_QWORD *)(a5 + 8) = 0;
        goto LABEL_3;
      }
    }
    v24 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v24 != -1)
    {
      v30 = (uint64_t)&v28;
      ((void (*)(uint64_t *, uint64_t))off_1E33561F0[v24])(&v30, a2);
      result = WTF::FileSystemImpl::writeToFile();
      if ((_DWORD)result != -1)
      {
        v7 = 0;
        *(_QWORD *)a5 = (int)result;
        goto LABEL_4;
      }
      goto LABEL_2;
    }
  }
  v25 = (WebCore::FileSystemSyncAccessHandle *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::FileSystemSyncAccessHandle::stop(v25);
}

uint64_t WebCore::FileSystemSyncAccessHandle::stop(uint64_t this, int *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(this + 80))
  {
    v2 = this;
    *(_BYTE *)(this + 80) = 1;
    v6 = 0;
    v7 = 0;
    WebCore::FileHandle::close((WebCore::FileHandle *)(this + 56), a2);
    v5 = 0;
    v4 = *(WTF::StringImpl **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    HIDWORD(v6) = -1;
    *(_QWORD *)(v2 + 64) = 0xFFFFFFFF00000000;
    *(_BYTE *)(v2 + 76) = 0;
    *(_DWORD *)(v2 + 72) = 0;
    WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v5, (int *)v3);
    return WebCore::FileSystemFileHandle::closeSyncAccessHandle(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return this;
}

void WebCore::WorkerFileSystemStorageConnection::~WorkerFileSystemStorageConnection(WebCore::WorkerFileSystemStorageConnection *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E33565F8;
    v4[1] = v3;
    v59 = v4;
    WTF::callOnMainThread();
    if (v59)
      (*(void (**)(_QWORD *))(*v59 + 8))(v59);
  }
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)(v5 + 16 * i) != -1)
        {
          v8 = v5 + 16 * i;
          v9 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              WTF::fastFree((WTF *)v9, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v12 = *((_QWORD *)this + 12);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (uint64_t *)(v12 + 8);
      do
      {
        if (*(v14 - 1) != -1)
        {
          v15 = *v14;
          *v14 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v16 = *((_QWORD *)this + 11);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)(v16 + 8);
      do
      {
        if (*(v18 - 1) != -1)
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v20 = *((_QWORD *)this + 10);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)(v20 + 8);
      do
      {
        if (*(v22 - 1) != -1)
        {
          v23 = *v22;
          *v22 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), a2);
  }
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    if ((_DWORD)v25)
    {
      v26 = (uint64_t *)(v24 + 8);
      do
      {
        if (*(v26 - 1) != -1)
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v24 - 16), a2);
  }
  v28 = *((_QWORD *)this + 8);
  if (v28)
  {
    v29 = *(unsigned int *)(v28 - 4);
    if ((_DWORD)v29)
    {
      v30 = (uint64_t *)(v28 + 8);
      do
      {
        if (*(v30 - 1) != -1)
        {
          v31 = *v30;
          *v30 = 0;
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        }
        v30 += 2;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree((WTF *)(v28 - 16), a2);
  }
  v32 = *((_QWORD *)this + 7);
  if (v32)
  {
    v33 = *(unsigned int *)(v32 - 4);
    if ((_DWORD)v33)
    {
      v34 = (uint64_t *)(v32 + 8);
      do
      {
        if (*(v34 - 1) != -1)
        {
          v35 = *v34;
          *v34 = 0;
          if (v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        }
        v34 += 2;
        --v33;
      }
      while (v33);
    }
    WTF::fastFree((WTF *)(v32 - 16), a2);
  }
  v36 = *((_QWORD *)this + 6);
  if (v36)
  {
    v37 = *(unsigned int *)(v36 - 4);
    if ((_DWORD)v37)
    {
      v38 = (uint64_t *)(v36 + 8);
      do
      {
        if (*(v38 - 1) != -1)
        {
          v39 = *v38;
          *v38 = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        }
        v38 += 2;
        --v37;
      }
      while (v37);
    }
    WTF::fastFree((WTF *)(v36 - 16), a2);
  }
  v40 = *((_QWORD *)this + 5);
  if (v40)
  {
    v41 = *(unsigned int *)(v40 - 4);
    if ((_DWORD)v41)
    {
      v42 = (uint64_t *)(v40 + 8);
      do
      {
        if (*(v42 - 1) != -1)
        {
          v43 = *v42;
          *v42 = 0;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        }
        v42 += 2;
        --v41;
      }
      while (v41);
    }
    WTF::fastFree((WTF *)(v40 - 16), a2);
  }
  v44 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v44)
  {
    v45 = v44 + 2;
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v44 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
    }
  }
  v48 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)v48));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)v48);
      v55 = *(unsigned int *)(v48 + 28);
      if ((_DWORD)v55)
      {
        v58 = v48;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v48 + 16), (WTF::StringImpl *)(*(_QWORD *)(v48 + 16) + 32 * v55));
        v48 = v58;
      }
      v56 = *(WTF **)(v48 + 16);
      if (v56)
      {
        *(_QWORD *)(v48 + 16) = 0;
        *(_DWORD *)(v48 + 24) = 0;
        v57 = v48;
        WTF::fastFree(v56, a2);
        v48 = v57;
      }
      WTF::fastFree((WTF *)v48, a2);
    }
  }
  v51 = *((_QWORD *)this + 2);
  if (v51)
  {
    *(_QWORD *)(v51 + 8) = 0;
    v52 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v52)
    {
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WorkerFileSystemStorageConnection::~WorkerFileSystemStorageConnection(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WorkerFileSystemStorageConnection::connectionClosed(WebCore::WorkerFileSystemStorageConnection *this, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (_QWORD *)*((_QWORD *)this + 13);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = (_QWORD *)*((_QWORD *)this + 13);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_8:
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    v9 = v6[1];
    if (v9)
    {
      do
        v10 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v10 + 1, (unsigned int *)v9));
      v11 = *(_QWORD *)(v9 + 8);
    }
    else
    {
      v11 = 0;
    }
    if (!*(_BYTE *)(v11 + 80))
    {
      *(_BYTE *)(v11 + 80) = 1;
      v20 = 0;
      v21 = 0xFFFFFFFF00000000;
      v22 = 0;
      WebCore::FileHandle::close((WebCore::FileHandle *)(v11 + 56), a2);
      v13 = v20;
      v20 = 0;
      v14 = *(WTF::StringImpl **)(v11 + 56);
      *(_QWORD *)(v11 + 56) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v21;
      HIDWORD(v21) = -1;
      *(_QWORD *)(v11 + 64) = v15;
      *(_BYTE *)(v11 + 76) = BYTE4(v22);
      *(_DWORD *)(v11 + 72) = v22;
      WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v20, (int *)v12);
    }
    if (v9)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v9);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v9));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
    v18 = v6 + 2;
    v6 = v5;
    if (v18 != v5)
    {
      v6 = v18;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return WebCore::WorkerFileSystemStorageConnection::scopeClosed(this, (WTF::StringImpl *)a2);
}

uint64_t WebCore::WorkerFileSystemStorageConnection::scopeClosed(WebCore::WorkerFileSystemStorageConnection *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t result;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68[8];
  WTF::StringImpl *v69;
  int v70;
  char v71;

  v3 = (_QWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_10:
    v5 = &v3[2 * v4];
    goto LABEL_11;
  }
  v4 = *((unsigned int *)v3 - 1);
  v5 = &v3[2 * v4];
  if (!*((_DWORD *)v3 - 3))
  {
    v6 = &v3[2 * v4];
    goto LABEL_10;
  }
  v6 = v3;
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = v3;
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  v67 = v3;
  if (v3)
    v8 = &v3[2 * *((unsigned int *)v3 - 1)];
  else
    v8 = 0;
  while (v6 != v8)
  {
    v68[0] = 8;
    v69 = 0;
    v70 = 1;
    v9 = v6[1];
    v6[1] = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 16))(v9, v68);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v70 != -1)
      off_1E33562A8[v70](&v71, (uint64_t)v68);
    v10 = v6 + 2;
    v6 = v5;
    if (v10 != v5)
    {
      v6 = v10;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v11 = (_QWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v11)
  {
    v14 = 0;
    v12 = 0;
LABEL_32:
    v13 = &v11[2 * v12];
    goto LABEL_33;
  }
  v12 = *((unsigned int *)v11 - 1);
  v13 = &v11[2 * v12];
  if (!*((_DWORD *)v11 - 3))
  {
    v14 = &v11[2 * v12];
    goto LABEL_32;
  }
  v14 = v11;
  if ((_DWORD)v12)
  {
    v15 = 16 * v12;
    v14 = v11;
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      v14 += 2;
      v15 -= 16;
      if (!v15)
      {
        v14 = v13;
        break;
      }
    }
  }
LABEL_33:
  v66 = v11;
  if (v11)
    v16 = &v11[2 * *((unsigned int *)v11 - 1)];
  else
    v16 = 0;
  while (v14 != v16)
  {
    v68[0] = 8;
    v69 = 0;
    v70 = 1;
    v17 = v14[1];
    v14[1] = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 16))(v17, v68);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v70 != -1)
      ((void (*)(char *, char *))off_1E33562B8[v70])(&v71, v68);
    v18 = v14 + 2;
    v14 = v13;
    if (v18 != v13)
    {
      v14 = v18;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        v14 += 2;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  v19 = (_QWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v19)
  {
    v20 = *((unsigned int *)v19 - 1);
    v21 = &v19[2 * v20];
    if (*((_DWORD *)v19 - 3))
    {
      v22 = v19;
      if ((_DWORD)v20)
      {
        v23 = 16 * v20;
        v22 = v19;
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          v22 += 2;
          v23 -= 16;
          if (!v23)
          {
            v22 = v21;
            goto LABEL_52;
          }
        }
      }
      goto LABEL_52;
    }
    v22 = &v19[2 * v20];
  }
  else
  {
    v22 = 0;
    v20 = 0;
  }
  v21 = &v19[2 * v20];
  if (v19)
  {
LABEL_52:
    v24 = &v19[2 * *((unsigned int *)v19 - 1)];
    goto LABEL_57;
  }
  v24 = 0;
LABEL_57:
  while (v22 != v24)
  {
    v68[0] = 8;
    v69 = 0;
    LOBYTE(v70) = 1;
    v25 = v22[1];
    v22[1] = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v25 + 16))(v25, v68);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    if ((_BYTE)v70)
    {
      v26 = v69;
      v69 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    v27 = v22 + 2;
    v22 = v21;
    if (v27 != v21)
    {
      v22 = v27;
      while ((unint64_t)(*v22 + 1) <= 1)
      {
        v22 += 2;
        if (v22 == v21)
        {
          v22 = v21;
          break;
        }
      }
    }
  }
  v28 = (_QWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v28)
  {
    v29 = *((unsigned int *)v28 - 1);
    v30 = &v28[2 * v29];
    if (*((_DWORD *)v28 - 3))
    {
      v31 = v28;
      if ((_DWORD)v29)
      {
        v32 = 16 * v29;
        v31 = v28;
        while ((unint64_t)(*v31 + 1) <= 1)
        {
          v31 += 2;
          v32 -= 16;
          if (!v32)
          {
            v31 = v30;
            goto LABEL_77;
          }
        }
      }
      goto LABEL_77;
    }
    v31 = &v28[2 * v29];
  }
  else
  {
    v31 = 0;
    v29 = 0;
  }
  v30 = &v28[2 * v29];
  if (v28)
  {
LABEL_77:
    v33 = &v28[2 * *((unsigned int *)v28 - 1)];
    goto LABEL_82;
  }
  v33 = 0;
LABEL_82:
  while (v31 != v33)
  {
    v68[0] = 8;
    v69 = 0;
    v70 = 1;
    v34 = v31[1];
    v31[1] = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v34 + 16))(v34, v68);
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    if (v70 != -1)
      ((void (*)(char *, char *))off_1E33561A0[v70])(&v71, v68);
    v35 = v31 + 2;
    v31 = v30;
    if (v35 != v30)
    {
      v31 = v35;
      while ((unint64_t)(*v31 + 1) <= 1)
      {
        v31 += 2;
        if (v31 == v30)
        {
          v31 = v30;
          break;
        }
      }
    }
  }
  v36 = (_QWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (!v36)
  {
    v39 = 0;
    v37 = 0;
LABEL_100:
    v38 = &v36[2 * v37];
    goto LABEL_101;
  }
  v37 = *((unsigned int *)v36 - 1);
  v38 = &v36[2 * v37];
  if (!*((_DWORD *)v36 - 3))
  {
    v39 = &v36[2 * v37];
    goto LABEL_100;
  }
  v39 = v36;
  if ((_DWORD)v37)
  {
    v40 = 16 * v37;
    v39 = v36;
    while ((unint64_t)(*v39 + 1) <= 1)
    {
      v39 += 2;
      v40 -= 16;
      if (!v40)
      {
        v39 = v38;
        break;
      }
    }
  }
LABEL_101:
  if (v36)
    v41 = &v36[2 * *((unsigned int *)v36 - 1)];
  else
    v41 = 0;
  while (v39 != v41)
  {
    v68[0] = 8;
    v69 = 0;
    v70 = 1;
    v42 = v39[1];
    v39[1] = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v42 + 16))(v42, v68);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    if (v70 != -1)
      ((void (*)(char *, char *))off_1E33562F0[v70])(&v71, v68);
    v43 = v39 + 2;
    v39 = v38;
    if (v43 != v38)
    {
      v39 = v43;
      while ((unint64_t)(*v39 + 1) <= 1)
      {
        v39 += 2;
        if (v39 == v38)
        {
          v39 = v38;
          break;
        }
      }
    }
  }
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!result)
    goto LABEL_116;
  do
  {
    v45 = __ldaxr((unsigned int *)result);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, (unsigned int *)result));
  if (v46)
  {
LABEL_116:
    if (!v36)
      goto LABEL_124;
    goto LABEL_117;
  }
  atomic_store(1u, (unsigned int *)result);
  v62 = *(unsigned int *)(result + 28);
  if ((_DWORD)v62)
  {
    v65 = result;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v62));
    result = v65;
  }
  v63 = *(WTF **)(result + 16);
  if (v63)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    v64 = result;
    WTF::fastFree(v63, a2);
    result = v64;
  }
  result = WTF::fastFree((WTF *)result, a2);
  if (v36)
  {
LABEL_117:
    v47 = *((unsigned int *)v36 - 1);
    if ((_DWORD)v47)
    {
      v48 = v36 + 1;
      do
      {
        if (*(v48 - 1) != -1)
        {
          v49 = *v48;
          *v48 = 0;
          if (v49)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        }
        v48 += 2;
        --v47;
      }
      while (v47);
    }
    result = WTF::fastFree((WTF *)(v36 - 2), a2);
  }
LABEL_124:
  if (v28)
  {
    v50 = *((unsigned int *)v28 - 1);
    if ((_DWORD)v50)
    {
      v51 = v28 + 1;
      do
      {
        if (*(v51 - 1) != -1)
        {
          v52 = *v51;
          *v51 = 0;
          if (v52)
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        }
        v51 += 2;
        --v50;
      }
      while (v50);
    }
    result = WTF::fastFree((WTF *)(v28 - 2), a2);
  }
  if (v19)
  {
    v53 = *((unsigned int *)v19 - 1);
    if ((_DWORD)v53)
    {
      v54 = v19 + 1;
      do
      {
        if (*(v54 - 1) != -1)
        {
          v55 = *v54;
          *v54 = 0;
          if (v55)
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
        }
        v54 += 2;
        --v53;
      }
      while (v53);
    }
    result = WTF::fastFree((WTF *)(v19 - 2), a2);
  }
  if (v66)
  {
    v56 = *((unsigned int *)v66 - 1);
    if ((_DWORD)v56)
    {
      v57 = v66 + 1;
      do
      {
        if (*(v57 - 1) != -1)
        {
          v58 = *v57;
          *v57 = 0;
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        }
        v57 += 2;
        --v56;
      }
      while (v56);
    }
    result = WTF::fastFree((WTF *)(v66 - 2), a2);
  }
  if (v67)
  {
    v59 = *((unsigned int *)v67 - 1);
    if ((_DWORD)v59)
    {
      v60 = v67 + 1;
      do
      {
        if (*(v60 - 1) != -1)
        {
          v61 = *v60;
          *v60 = 0;
          if (v61)
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        }
        v60 += 2;
        --v59;
      }
      while (v59);
    }
    return WTF::fastFree((WTF *)(v67 - 2), a2);
  }
  return result;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::closeHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3356620;
  v6[1] = v3;
  v6[2] = a2;
  v8 = v6;
  WTF::callOnMainThread();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::isSameEntry(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t IdentifierInternal;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  _QWORD *v41;
  _QWORD v42[2];
  int v43;
  char v44;

  v5 = a1[3];
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v11 = a1 + 5;
    v10 = a1[5];
    if (v10
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 5, 8u), (v10 = *v11) != 0))
    {
      v12 = *(_DWORD *)(v10 - 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                 + ~(IdentifierInternal << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = (uint64_t *)(v10 + 16 * v16);
    v18 = *v17;
    if (*v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != IdentifierInternal)
      {
        if (v18 == -1)
          v19 = v17;
        v16 = (v16 + v20) & v12;
        v17 = (uint64_t *)(v10 + 16 * v16);
        v18 = *v17;
        ++v20;
        if (!*v17)
        {
          if (v19)
          {
            *v19 = 0;
            v19[1] = 0;
            --*(_DWORD *)(*v11 - 16);
            v17 = v19;
          }
          goto LABEL_14;
        }
      }
LABEL_32:
      v32 = *(_QWORD *)(a1[3] + 8);
      if (v32)
        v33 = v32 - 320;
      else
        v33 = 0;
      v34 = *(_QWORD *)(v33 + 360);
      v35 = *(_QWORD *)(v34 + 8);
      if (__ldaxr((unsigned __int8 *)v35))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v35))
      {
        goto LABEL_39;
      }
      MEMORY[0x19AEA534C](v35);
LABEL_39:
      ++*(_QWORD *)(v35 + 8);
      v37 = __ldxr((unsigned __int8 *)v35);
      if (v37 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v35))
          goto LABEL_44;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_44:
      v38 = a1[4];
      if (v38)
      {
        v39 = (unsigned int *)(v38 + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
      }
      v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v41 = &off_1E3356648;
      v41[1] = IdentifierInternal;
      v41[2] = v34;
      v41[3] = v38;
      v41[4] = a2;
      v41[5] = a3;
      v42[0] = v41;
      WTF::callOnMainThread();
      result = v42[0];
      v42[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
LABEL_14:
    *v17 = IdentifierInternal;
    v21 = *a4;
    *a4 = 0;
    v22 = v17[1];
    v17[1] = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *v11;
    if (*v11)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v27 = *v11;
    if (*v11)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_32;
    }
    else
    {
      if (3 * v30 > 4 * v29)
        goto LABEL_32;
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_31:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 5, v31);
        goto LABEL_32;
      }
    }
    v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
    goto LABEL_31;
  }
  LOBYTE(v42[0]) = 8;
  v42[1] = 0;
  v43 = 1;
  v25 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v25 + 16))(v25, v42);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v43 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E33562A8[v43])(&v44, v42);
  return result;
}

unsigned int *WebCore::WorkerFileSystemStorageConnection::getFileHandle(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t IdentifierInternal;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *result;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a1[3];
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    LOBYTE(v40) = 8;
    v41 = 0;
    LODWORD(v42) = 1;
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v40);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if ((_DWORD)v42 != -1)
      return (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33562B8[v42])(&v47, &v40);
    return result;
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v47 = IdentifierInternal;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(&v40, a1 + 6, &v47, a5);
  v40 = IdentifierInternal;
  v11 = *(_QWORD *)(a1[3] + 8);
  if (v11)
    v12 = v11 - 320;
  else
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 360);
  v14 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_12:
  ++*(_QWORD *)(v14 + 8);
  v18 = __ldxr((unsigned __int8 *)v14);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v41 = v13;
  v19 = (unsigned int *)a1[4];
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v42 = v19;
  v43 = a2;
  WTF::String::isolatedCopy();
  v45 = a4;
  v22 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v22 = off_1E33566C0;
  *(_QWORD *)(v22 + 8) = v40;
  *(_QWORD *)(v22 + 16) = v41;
  v23 = v42;
  v41 = 0;
  v42 = 0;
  *(_QWORD *)(v22 + 24) = v23;
  *(_QWORD *)(v22 + 32) = v43;
  v24 = v44;
  v44 = 0;
  *(_QWORD *)(v22 + 40) = v24;
  *(_BYTE *)(v22 + 48) = v45;
  v46 = v22;
  WTF::callOnMainThread();
  v26 = v46;
  v46 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v44;
  v44 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    v28 = result + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (__ldaxr((unsigned __int8 *)v32))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v32))
    {
      goto LABEL_35;
    }
    result = (unsigned int *)MEMORY[0x19AEA534C](v32);
LABEL_35:
    v34 = *(_QWORD *)(v32 + 8);
    v35 = v34 - 1;
    *(_QWORD *)(v32 + 8) = v34 - 1;
    if (v34 == 1)
    {
      v39 = *(_QWORD *)(v32 + 16);
      v36 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = 0;
      v37 = v39 != 0;
    }
    else
    {
      v36 = 0;
      v37 = 1;
    }
    v38 = __ldxr((unsigned __int8 *)v32);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v32))
      {
        if (v35)
          return result;
LABEL_43:
        if (v36)
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        if (!v37)
          return (unsigned int *)WTF::fastFree((WTF *)v32, v25);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v32);
    if (v35)
      return result;
    goto LABEL_43;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v23;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *a4 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_30;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_31:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a2, v28, v16);
    v16 = result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
  }
  v30 = v24 + 16 * v27;
  v29 = 1;
LABEL_35:
  *v7 = (uint64_t)v16;
  v7[1] = v30;
  *((_BYTE *)v7 + 16) = v29;
  return result;
}

_QWORD *WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;

  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_14:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v17 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v17 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          return a1;
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return a1;
LABEL_22:
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      WTF::fastFree((WTF *)v9, a2);
  }
  return a1;
}

unsigned int *WebCore::WorkerFileSystemStorageConnection::getDirectoryHandle(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t IdentifierInternal;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *result;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a1[3];
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    LOBYTE(v40) = 8;
    v41 = 0;
    LODWORD(v42) = 1;
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v40);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if ((_DWORD)v42 != -1)
      return (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33562B8[v42])(&v47, &v40);
    return result;
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v47 = IdentifierInternal;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(&v40, a1 + 6, &v47, a5);
  v40 = IdentifierInternal;
  v11 = *(_QWORD *)(a1[3] + 8);
  if (v11)
    v12 = v11 - 320;
  else
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 360);
  v14 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_12:
  ++*(_QWORD *)(v14 + 8);
  v18 = __ldxr((unsigned __int8 *)v14);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v41 = v13;
  v19 = (unsigned int *)a1[4];
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v42 = v19;
  v43 = a2;
  WTF::String::isolatedCopy();
  v45 = a4;
  v22 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v22 = off_1E3356738;
  *(_QWORD *)(v22 + 8) = v40;
  *(_QWORD *)(v22 + 16) = v41;
  v23 = v42;
  v41 = 0;
  v42 = 0;
  *(_QWORD *)(v22 + 24) = v23;
  *(_QWORD *)(v22 + 32) = v43;
  v24 = v44;
  v44 = 0;
  *(_QWORD *)(v22 + 40) = v24;
  *(_BYTE *)(v22 + 48) = v45;
  v46 = v22;
  WTF::callOnMainThread();
  v26 = v46;
  v46 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v44;
  v44 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    v28 = result + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (__ldaxr((unsigned __int8 *)v32))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v32))
    {
      goto LABEL_35;
    }
    result = (unsigned int *)MEMORY[0x19AEA534C](v32);
LABEL_35:
    v34 = *(_QWORD *)(v32 + 8);
    v35 = v34 - 1;
    *(_QWORD *)(v32 + 8) = v34 - 1;
    if (v34 == 1)
    {
      v39 = *(_QWORD *)(v32 + 16);
      v36 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = 0;
      v37 = v39 != 0;
    }
    else
    {
      v36 = 0;
      v37 = 1;
    }
    v38 = __ldxr((unsigned __int8 *)v32);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v32))
      {
        if (v35)
          return result;
LABEL_43:
        if (v36)
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        if (!v37)
          return (unsigned int *)WTF::fastFree((WTF *)v32, v25);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v32);
    if (v35)
      return result;
    goto LABEL_43;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *a2;
  if (!*a2)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = (_QWORD *)(v3 + 16 * v8);
    v12 = v11[1];
    v11[1] = 0;
    *result = v12;
    v13 = (_QWORD *)*a2;
    if (!*a2 || (v13 += 2 * *((unsigned int *)v13 - 1), v13 != v11))
    {
      if (v13 != v11)
      {
        *v11 = -1;
        v11[1] = 0;
        ++*(_DWORD *)(*a2 - 16);
        v14 = *a2;
        if (*a2)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a2;
        if (*a2)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a2, v18 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *result = 0;
  }
  return result;
}

unsigned int *WebCore::WorkerFileSystemStorageConnection::removeEntry(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t IdentifierInternal;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *result;
  WTF::StringImpl *v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a1[3];
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    LOBYTE(v41) = 8;
    v42 = 0;
    LOBYTE(v43) = 1;
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v41);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if ((_BYTE)v43)
    {
      result = (unsigned int *)v42;
      v42 = 0;
      if (result)
      {
        if (*result == 2)
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
        else
          *result -= 2;
      }
    }
    return result;
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v48 = IdentifierInternal;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(&v41, a1 + 9, &v48, a5);
  v41 = IdentifierInternal;
  v11 = *(_QWORD *)(a1[3] + 8);
  if (v11)
    v12 = v11 - 320;
  else
    v12 = 0;
  v13 = *(WTF::StringImpl **)(v12 + 360);
  v14 = *((_QWORD *)v13 + 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_14:
  ++*(_QWORD *)(v14 + 8);
  v19 = __ldxr((unsigned __int8 *)v14);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v42 = v13;
  v20 = (unsigned int *)a1[4];
  if (v20)
  {
    v21 = v20 + 2;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v43 = v20;
  v44 = a2;
  WTF::String::isolatedCopy();
  v46 = a4;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v23 = off_1E33567B0;
  *(_QWORD *)(v23 + 8) = v41;
  *(_QWORD *)(v23 + 16) = v42;
  v24 = v43;
  v42 = 0;
  v43 = 0;
  *(_QWORD *)(v23 + 24) = v24;
  *(_QWORD *)(v23 + 32) = v44;
  v25 = v45;
  v45 = 0;
  *(_QWORD *)(v23 + 40) = v25;
  *(_BYTE *)(v23 + 48) = v46;
  v47 = v23;
  WTF::callOnMainThread();
  v27 = v47;
  v47 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v45;
  v45 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    v29 = result + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    v33 = *((_QWORD *)v32 + 1);
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
      goto LABEL_37;
    }
    result = (unsigned int *)MEMORY[0x19AEA534C](v33);
LABEL_37:
    v35 = *(_QWORD *)(v33 + 8);
    v36 = v35 - 1;
    *(_QWORD *)(v33 + 8) = v35 - 1;
    if (v35 == 1)
    {
      v40 = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      *(_QWORD *)(v33 + 24) = 0;
      v38 = v40 != 0;
    }
    else
    {
      v37 = 0;
      v38 = 1;
    }
    v39 = __ldxr((unsigned __int8 *)v33);
    if (v39 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
      {
        if (v36)
          return result;
LABEL_45:
        if (v37)
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (!v38)
          return (unsigned int *)WTF::fastFree((WTF *)v33, v26);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v33);
    if (v36)
      return result;
    goto LABEL_45;
  }
  return result;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::resolve(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t IdentifierInternal;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23[2];
  int v24;

  v5 = a1[3];
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v22 = IdentifierInternal;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(v23, a1 + 7, &v22, a4);
    v10 = *(_QWORD *)(a1[3] + 8);
    if (v10)
      v11 = v10 - 320;
    else
      v11 = 0;
    v12 = *(_QWORD *)(v11 + 360);
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_12:
    ++*(_QWORD *)(v13 + 8);
    v17 = __ldxr((unsigned __int8 *)v13);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_17:
    v18 = a1[4];
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v21 = &off_1E3356828;
    v21[1] = IdentifierInternal;
    v21[2] = v12;
    v21[3] = v18;
    v21[4] = a2;
    v21[5] = a3;
    v23[0] = (uint64_t)v21;
    WTF::callOnMainThread();
    result = v23[0];
    v23[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  LOBYTE(v23[0]) = 8;
  v23[1] = 0;
  v24 = 1;
  v15 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v23);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v24 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33561A0[v24])(&v22, v23);
  return result;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::getFile(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t IdentifierInternal;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD v40[2];
  int v41;
  char v42;

  v4 = a1[3];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v9 = a1 + 11;
    v8 = a1[11];
    if (v8
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 11, 8u), (v8 = *v9) != 0))
    {
      v10 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                 + ~(IdentifierInternal << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = (uint64_t *)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15)
    {
      v17 = 0;
      v18 = 1;
      while (v16 != IdentifierInternal)
      {
        if (v16 == -1)
          v17 = v15;
        v14 = (v14 + v18) & v10;
        v15 = (uint64_t *)(v8 + 16 * v14);
        v16 = *v15;
        ++v18;
        if (!*v15)
        {
          if (v17)
          {
            *v17 = 0;
            v17[1] = 0;
            --*(_DWORD *)(*v9 - 16);
            v15 = v17;
          }
          goto LABEL_14;
        }
      }
LABEL_32:
      v30 = *(_QWORD *)(a1[3] + 8);
      if (v30)
        v31 = v30 - 320;
      else
        v31 = 0;
      v32 = *(_QWORD *)(v31 + 360);
      v33 = *(_QWORD *)(v32 + 8);
      if (__ldaxr((unsigned __int8 *)v33))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v33))
      {
        goto LABEL_39;
      }
      MEMORY[0x19AEA534C](v33);
LABEL_39:
      ++*(_QWORD *)(v33 + 8);
      v35 = __ldxr((unsigned __int8 *)v33);
      if (v35 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v33))
          goto LABEL_44;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_44:
      v36 = a1[4];
      if (v36)
      {
        v37 = (unsigned int *)(v36 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
      }
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v39 = &off_1E33568A0;
      v39[1] = IdentifierInternal;
      v39[2] = v32;
      v39[3] = v36;
      v39[4] = a2;
      v40[0] = v39;
      WTF::callOnMainThread();
      result = v40[0];
      v40[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
LABEL_14:
    *v15 = IdentifierInternal;
    v19 = *a3;
    *a3 = 0;
    v20 = v15[1];
    v15[1] = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = *v9;
    if (*v9)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v25 = *v9;
    if (*v9)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_32;
    }
    else
    {
      if (3 * v28 > 4 * v27)
        goto LABEL_32;
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_31:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 11, v29);
        goto LABEL_32;
      }
    }
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
    goto LABEL_31;
  }
  LOBYTE(v40[0]) = 8;
  v40[1] = 0;
  v41 = 1;
  v23 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 16))(v23, v40);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v41 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E33562F0[v41])(&v42, v40);
  return result;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::createSyncAccessHandle(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t IdentifierInternal;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD v40[5];
  int v41;
  char v42;

  v4 = a1[3];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v9 = a1 + 8;
    v8 = a1[8];
    if (v8
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 8, 8u), (v8 = *v9) != 0))
    {
      v10 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                 + ~(IdentifierInternal << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = (uint64_t *)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15)
    {
      v17 = 0;
      v18 = 1;
      while (v16 != IdentifierInternal)
      {
        if (v16 == -1)
          v17 = v15;
        v14 = (v14 + v18) & v10;
        v15 = (uint64_t *)(v8 + 16 * v14);
        v16 = *v15;
        ++v18;
        if (!*v15)
        {
          if (v17)
          {
            *v17 = 0;
            v17[1] = 0;
            --*(_DWORD *)(*v9 - 16);
            v15 = v17;
          }
          goto LABEL_14;
        }
      }
LABEL_32:
      v30 = *(_QWORD *)(a1[3] + 8);
      if (v30)
        v31 = v30 - 320;
      else
        v31 = 0;
      v32 = *(_QWORD *)(v31 + 360);
      v33 = *(_QWORD *)(v32 + 8);
      if (__ldaxr((unsigned __int8 *)v33))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v33))
      {
        goto LABEL_39;
      }
      MEMORY[0x19AEA534C](v33);
LABEL_39:
      ++*(_QWORD *)(v33 + 8);
      v35 = __ldxr((unsigned __int8 *)v33);
      if (v35 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v33))
          goto LABEL_44;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_44:
      v36 = a1[4];
      if (v36)
      {
        v37 = (unsigned int *)(v36 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
      }
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v39 = &off_1E3356918;
      v39[1] = IdentifierInternal;
      v39[2] = v32;
      v39[3] = v36;
      v39[4] = a2;
      v40[0] = v39;
      WTF::callOnMainThread();
      result = v40[0];
      v40[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
LABEL_14:
    *v15 = IdentifierInternal;
    v19 = *a3;
    *a3 = 0;
    v20 = v15[1];
    v15[1] = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = *v9;
    if (*v9)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v25 = *v9;
    if (*v9)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_32;
    }
    else
    {
      if (3 * v28 > 4 * v27)
        goto LABEL_32;
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_31:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 8, v29);
        goto LABEL_32;
      }
    }
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
    goto LABEL_31;
  }
  LOBYTE(v40[0]) = 8;
  v40[1] = 0;
  v41 = 1;
  v23 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 16))(v23, v40);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v41 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3356300[v41])(&v42, v40);
  return result;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::unregisterSyncAccessHandle(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t result;
  _QWORD *v28;

  v5 = (uint64_t *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(void **)(v4 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(void **)(v4 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v13 = (_QWORD *)(v4 + 16 * v10);
      v14 = (unsigned int *)v13[1];
      *v13 = -1;
      v13[1] = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, a2);
        }
      }
      ++*(_DWORD *)(*v5 - 16);
      v17 = *v5;
      if (*v5)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v5;
      if (*v5)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5, v21 >> 1);
      }
    }
  }
  v23 = *(_QWORD *)(a1 + 32);
  if (v23)
  {
    v24 = (unsigned int *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v26 = &off_1E3356A08;
  v26[1] = a2;
  v26[2] = v23;
  v28 = v26;
  WTF::callOnMainThread();
  result = (uint64_t)v28;
  if (v28)
    return (*(uint64_t (**)(_QWORD *))(*v28 + 8))(v28);
  return result;
}

void WebCore::WorkerFileSystemStorageConnection::invalidateAccessHandle(uint64_t a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(int **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        do
          v11 = __ldaxr((unsigned int *)v10);
        while (__stlxr(v11 + 1, (unsigned int *)v10));
        v12 = *(_QWORD *)(v10 + 8);
        if (v12 && !*(_BYTE *)(v12 + 80))
        {
          *(_BYTE *)(v12 + 80) = 1;
          v18 = 0;
          v19 = 0;
          WebCore::FileHandle::close((WebCore::FileHandle *)(v12 + 56), a2);
          v17 = 0;
          v14 = *(WTF::StringImpl **)(v12 + 56);
          *(_QWORD *)(v12 + 56) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          HIDWORD(v18) = -1;
          *(_QWORD *)(v12 + 64) = 0xFFFFFFFF00000000;
          *(_BYTE *)(v12 + 76) = 0;
          *(_DWORD *)(v12 + 72) = 0;
          WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v17, (int *)v13);
        }
        do
        {
          v15 = __ldaxr((unsigned int *)v10);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)v10));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(int **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
}

uint64_t WebCore::WorkerFileSystemStorageConnection::getHandleNames(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t IdentifierInternal;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21[2];
  int v22;

  v4 = a1[3];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v20 = IdentifierInternal;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(v21, a1 + 10, &v20, a3);
    v8 = *(_QWORD *)(a1[3] + 8);
    if (v8)
      v9 = v8 - 320;
    else
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 360);
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_12:
    ++*(_QWORD *)(v11 + 8);
    v15 = __ldxr((unsigned __int8 *)v11);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_17:
    v16 = a1[4];
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v19 = &off_1E3356A30;
    v19[1] = IdentifierInternal;
    v19[2] = v10;
    v19[3] = v16;
    v19[4] = a2;
    v21[0] = (uint64_t)v19;
    WTF::callOnMainThread();
    result = v21[0];
    v21[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  LOBYTE(v21[0]) = 8;
  v21[1] = 0;
  v22 = 1;
  v13 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, v21);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v22 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33561A0[v22])(&v20, v21);
  return result;
}

unsigned int *WebCore::WorkerFileSystemStorageConnection::getHandle(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t IdentifierInternal;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int *result;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  _QWORD *v43;
  uint64_t v44;

  v5 = a1[3];
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    LOBYTE(v38) = 8;
    v39 = 0;
    LODWORD(v40) = 1;
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v38);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if ((_DWORD)v40 != -1)
      return (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33562B8[v40])(&v44, &v38);
    return result;
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v44 = IdentifierInternal;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(&v38, a1 + 6, &v44, a4);
  v38 = IdentifierInternal;
  v9 = *(_QWORD *)(a1[3] + 8);
  if (v9)
    v10 = v9 - 320;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 360);
  v12 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_12:
  ++*(_QWORD *)(v12 + 8);
  v16 = __ldxr((unsigned __int8 *)v12);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v39 = v11;
  v17 = (unsigned int *)a1[4];
  if (v17)
  {
    v18 = v17 + 2;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  v40 = v17;
  v41 = a2;
  WTF::String::isolatedCopy();
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v20 = off_1E3356AA8;
  v20[1] = v38;
  v20[2] = v39;
  v21 = v40;
  v39 = 0;
  v40 = 0;
  v20[3] = v21;
  v20[4] = v41;
  v22 = v42;
  v42 = 0;
  v43 = v20;
  v20[5] = v22;
  WTF::callOnMainThread();
  v24 = v43;
  v43 = 0;
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v40;
  v40 = 0;
  if (result)
  {
    v26 = result + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v29 = v39;
  v39 = 0;
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (__ldaxr((unsigned __int8 *)v30))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v30))
    {
      goto LABEL_35;
    }
    result = (unsigned int *)MEMORY[0x19AEA534C](v30);
LABEL_35:
    v32 = *(_QWORD *)(v30 + 8);
    v33 = v32 - 1;
    *(_QWORD *)(v30 + 8) = v32 - 1;
    if (v32 == 1)
    {
      v37 = *(_QWORD *)(v30 + 16);
      v34 = *(_QWORD *)(v30 + 24);
      *(_QWORD *)(v30 + 24) = 0;
      v35 = v37 != 0;
    }
    else
    {
      v34 = 0;
      v35 = 1;
    }
    v36 = __ldxr((unsigned __int8 *)v30);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v30))
      {
        if (v33)
          return result;
LABEL_43:
        if (v34)
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        if (!v35)
          return (unsigned int *)WTF::fastFree((WTF *)v30, v23);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v30);
    if (v33)
      return result;
    goto LABEL_43;
  }
  return result;
}

unsigned int *WebCore::WorkerFileSystemStorageConnection::move(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t IdentifierInternal;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *result;
  WTF::StringImpl *v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  __int128 v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a1[3];
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    LOBYTE(v41) = 8;
    v42 = 0;
    LOBYTE(v43) = 1;
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v41);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if ((_BYTE)v43)
    {
      result = (unsigned int *)v42;
      v42 = 0;
      if (result)
      {
        if (*result == 2)
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
        else
          *result -= 2;
      }
    }
    return result;
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v47 = IdentifierInternal;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::add<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>(&v41, a1 + 9, &v47, a5);
  v41 = IdentifierInternal;
  v11 = *(_QWORD *)(a1[3] + 8);
  if (v11)
    v12 = v11 - 320;
  else
    v12 = 0;
  v13 = *(WTF::StringImpl **)(v12 + 360);
  v14 = *((_QWORD *)v13 + 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_14:
  ++*(_QWORD *)(v14 + 8);
  v19 = __ldxr((unsigned __int8 *)v14);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v42 = v13;
  v20 = (unsigned int *)a1[4];
  if (v20)
  {
    v21 = v20 + 2;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v43 = v20;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = a3;
  WTF::String::isolatedCopy();
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v23 = off_1E3356B20;
  *(_QWORD *)(v23 + 8) = v41;
  *(_QWORD *)(v23 + 16) = v42;
  v24 = v43;
  v42 = 0;
  v43 = 0;
  *(_QWORD *)(v23 + 24) = v24;
  *(_OWORD *)(v23 + 32) = v44;
  v25 = v45;
  v45 = 0;
  v46 = v23;
  *(_QWORD *)(v23 + 48) = v25;
  WTF::callOnMainThread();
  v27 = v46;
  v46 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v45;
  v45 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    v29 = result + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    v33 = *((_QWORD *)v32 + 1);
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
      goto LABEL_37;
    }
    result = (unsigned int *)MEMORY[0x19AEA534C](v33);
LABEL_37:
    v35 = *(_QWORD *)(v33 + 8);
    v36 = v35 - 1;
    *(_QWORD *)(v33 + 8) = v35 - 1;
    if (v35 == 1)
    {
      v40 = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      *(_QWORD *)(v33 + 24) = 0;
      v38 = v40 != 0;
    }
    else
    {
      v37 = 0;
      v38 = 1;
    }
    v39 = __ldxr((unsigned __int8 *)v33);
    if (v39 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
      {
        if (v36)
          return result;
LABEL_45:
        if (v37)
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (!v38)
          return (unsigned int *)WTF::fastFree((WTF *)v33, v26);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v33);
    if (v36)
      return result;
    goto LABEL_45;
  }
  return result;
}

_QWORD *WebCore::WorkerFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;

  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_14:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v17 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v17 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          return a1;
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return a1;
LABEL_22:
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      WTF::fastFree((WTF *)v9, a2);
  }
  return a1;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::requestNewCapacityForSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _BYTE v7[16];

  v7[0] = 0;
  v7[8] = 0;
  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::GeoNotifier::timerFired(WebCore::GeoNotifier *this)
{
  uint64_t v2;
  WTF *v3;
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  bmalloc::api *v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  int v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;

  if ((*((_QWORD *)this + 10) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::GeoNotifier *)((char *)this + 48));
  ++*(_DWORD *)this;
  v2 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v2 + 32);
  v3 = (WTF *)*((_QWORD *)this + 13);
  if (v3)
  {
    ++*(_DWORD *)v3;
    v4 = (_DWORD *)*((_QWORD *)this + 3);
    if (v4)
    {
      ++v4[4];
      (*(void (**)(_DWORD *, WTF *))(*(_QWORD *)v4 + 40))(v4, v3);
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
    v5 = (_QWORD *)(v2 + 56);
    WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>((uint64_t *)(v2 + 56), this);
    v6 = (_QWORD *)(v2 + 64);
    result = WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::take<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>((uint64_t *)(v2 + 72), this);
    v24 = result;
    if ((_DWORD)result)
      result = WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::remove((uint64_t *)(v2 + 64), (WTF::StringImpl *)&v24);
    if ((!*v5 || !*(_DWORD *)(*v5 - 12)) && (!*v6 || !*(_DWORD *)(*v6 - 12)))
      result = WebCore::Geolocation::stopUpdating((WebCore::Geolocation *)v2);
    if (*(_DWORD *)v3 == 1)
    {
      v13 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v8);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = WTF::fastFree(v3, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  else if (*((_BYTE *)this + 112))
  {
    *((_BYTE *)this + 112) = 0;
    result = (uint64_t)WebCore::Geolocation::requestUsesCachedPosition((WebCore::Geolocation *)v2, this);
  }
  else
  {
    if (*((_QWORD *)this + 3))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = WTF::fastMalloc((WTF *)0x18);
      v16 = (WTF *)v14;
      *(_QWORD *)v14 = 0x300000001;
      if (v23)
      {
        v17 = *(_DWORD *)v23;
        *(_DWORD *)v23 += 2;
        *(_QWORD *)(v14 + 8) = v23;
        v18 = (WTF::StringImpl **)(v14 + 8);
        *(_BYTE *)(v14 + 16) = 0;
        if (v17)
          *(_DWORD *)v23 = v17;
        else
          WTF::StringImpl::destroy(v23, v15);
      }
      else
      {
        *(_QWORD *)(v14 + 8) = 0;
        v18 = (WTF::StringImpl **)(v14 + 8);
        *(_BYTE *)(v14 + 16) = 0;
      }
      (*(void (**)(_QWORD, WTF *))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v16);
      if (*(_DWORD *)v16 == 1)
      {
        v22 = *v18;
        *v18 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v19);
          else
            *(_DWORD *)v22 -= 2;
        }
        WTF::fastFree(v16, v19);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
    result = WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>((uint64_t *)(v2 + 56), this);
    v20 = *(_QWORD *)(v2 + 56);
    if (!v20 || !*(_DWORD *)(v20 - 12))
    {
      v21 = *(_QWORD *)(v2 + 64);
      if (!v21 || !*(_DWORD *)(v21 - 12))
        result = WebCore::Geolocation::stopUpdating((WebCore::Geolocation *)v2);
    }
  }
  if (*(_DWORD *)(v2 + 32) == 1)
  {
    WebCore::Geolocation::~Geolocation((WebCore::Geolocation *)v2);
    result = bmalloc::api::isoDeallocate(v9, v10);
  }
  else
  {
    --*(_DWORD *)(v2 + 32);
  }
  if (*(_DWORD *)this == 1)
  {
    WebCore::GeoNotifier::~GeoNotifier(this, v8);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return result;
}

_QWORD *WebCore::GeoNotifier::setFatalError(_QWORD *result, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF *v4;
  double v5;
  WTF::StringImpl *v6;

  if (!result[13])
  {
    v2 = result;
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v4 = (WTF *)result[13];
    result[13] = v3;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v6 = (WTF::StringImpl *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        result = (_QWORD *)WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    if ((v2[10] & 0xFFFFFFFFFFFFLL) != 0)
      result = (_QWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 6));
    v2[9] = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    return (_QWORD *)WebCore::TimerBase::setNextFireTime((uint64_t)(v2 + 6), v5 + 0.0);
  }
  return result;
}

uint64_t WebCore::FileSystemHandle::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::FileSystemHandle::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::FileSystemSyncAccessHandle::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::FileSystemSyncAccessHandle::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::WorkerFileSystemStorageConnection::isWorker(WebCore::WorkerFileSystemStorageConnection *this)
{
  return 1;
}

void WebCore::FileSystemDirectoryHandle::~FileSystemDirectoryHandle(WebCore::FileSystemDirectoryHandle *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = &off_1E3355FF8;
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
  }
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E3355FF8;
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
  }
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

void WebCore::FileSystemFileHandle::~FileSystemFileHandle(WebCore::FileSystemFileHandle *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = &off_1E3355FF8;
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
  }
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E3355FF8;
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
  }
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

uint64_t *std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *result;
  *result = (uint64_t)a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && *(_QWORD *)(v2 + 24))
    {
      *(_WORD *)(v3 + 204) = 272;
      v4 = *(_QWORD *)(v3 + 144);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v5);
      }
      v6 = *(_QWORD *)(v2 + 24);
      if (v6)
      {
        *(_QWORD *)(v2 + 24) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    v7 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
    WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
    return (uint64_t *)WTF::fastFree((WTF *)v2, v9);
  }
  return result;
}

void WebCore::BlobLoader::~BlobLoader(WebCore::BlobLoader *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *((_QWORD *)this + 3))
  {
    *(_WORD *)(v3 + 204) = 272;
    v4 = *(_QWORD *)(v3 + 144);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v5);
    }
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      *((_QWORD *)this + 3) = 0;
      (*(void (**)(uint64_t, WebCore::BlobLoader *))(*(_QWORD *)v6 + 16))(v6, this);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *((_QWORD *)this + 3))
  {
    *(_WORD *)(v3 + 204) = 272;
    v4 = *(_QWORD *)(v3 + 144);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      WebCore::FileReaderLoader::cleanup((WebCore::FileReaderLoader *)v3, v5);
    }
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      *((_QWORD *)this + 3) = 0;
      (*(void (**)(uint64_t, WebCore::BlobLoader *))(*(_QWORD *)v6 + 16))(v6, this);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v9);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4spanIKhLm18446744073709551615EEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FormDataConsumer::consumeBlob(WTF::URL const&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3356108;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FormDataConsumer::consumeBlob(WTF::URL const&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3356108;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::FormDataConsumer::consumeBlob(WTF::URL const&)::$_0,void,WebCore::BlobLoader &>::call(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  JSC::ArrayBuffer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::FormDataConsumer *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  int v27;
  char v28;

  v1 = result[1];
  if (v1)
  {
    v2 = result;
    result = *(uint64_t **)(v1 + 8);
    if (result)
    {
      v5 = result[6];
      v3 = result + 6;
      v4 = v5;
      *v3 = 0;
      v25 = v5;
      v26[0] = 0;
      std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v3, 0);
      std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v26, 0);
      if (v5)
      {
        v7 = *(_QWORD *)(v4 + 16);
        if (v7)
        {
          if (*(unsigned __int16 *)(v7 + 204) >= 0x100u)
          {
            v9 = v2[1];
            if (v9)
              v10 = *(WebCore::FormDataConsumer **)(v9 + 8);
            else
              v10 = 0;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v11 = (WTF::StringImpl *)v26[0];
            v12 = *((_QWORD *)v10 + 3);
            *((_QWORD *)v10 + 3) = 0;
            WebCore::FormDataConsumer::cancel(v10);
            if (v12)
            {
              LOBYTE(v26[0]) = 8;
              v26[1] = (uint64_t)v11;
              v27 = 1;
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, v26);
              if (v27 != -1)
                ((void (*)(char *, uint64_t *))off_1E33560E8[v27])(&v28, v26);
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            }
            else if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v13);
              else
                *(_DWORD *)v11 -= 2;
            }
            return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v25, 0);
          }
          v8 = *(_QWORD *)(v7 + 152);
          if (v8)
          {
            if (*(_DWORD *)(v7 + 196) == *(_DWORD *)(v7 + 200))
            {
              *(_DWORD *)v8 += 2;
LABEL_20:
              v14 = v2[1];
              if (v14)
                v15 = *(_QWORD **)(v14 + 8);
              else
                v15 = 0;
              v16 = *(_QWORD *)(v8 + 16);
              if (v16)
              {
                v17 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
                if (v17)
                {
                  if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
                    v16 = (v16 & 0x3FFFFFFFFLL) + v17;
                }
              }
              if (*(_BYTE *)(v8 + 64) && (v24 = *(_QWORD *)(v8 + 32)) != 0)
                v18 = *(_QWORD **)(v24 + 32);
              else
                v18 = *(_QWORD **)(v8 + 48);
              WebCore::FormDataConsumer::consume(v15, (_QWORD *)v16, v18);
              v19 = *(_DWORD *)v8 == 2;
              *(_DWORD *)v8 -= 2;
              if (v19)
              {
                v20 = *(_QWORD *)(v8 + 80);
                if (v20)
                {
                  *(_QWORD *)(v20 + 8) = 3;
                  *(_QWORD *)(v8 + 80) = 0;
                }
                if ((*(_BYTE *)(v8 + 72) & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v8 + 72));
                JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v8 + 16));
                v22 = *(WTF **)(v8 + 8);
                if ((v22 & 1) == 0 && v22)
                {
                  v23 = *(WTF **)v22;
                  if (*(_QWORD *)v22)
                  {
                    *(_QWORD *)v22 = 0;
                    *((_DWORD *)v22 + 2) = 0;
                    WTF::fastFree(v23, v21);
                  }
                  WTF::fastFree(v22, v21);
                }
                WTF::fastFree((WTF *)v8, v21);
              }
              return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v25, 0);
            }
            JSC::ArrayBuffer::create((JSC::ArrayBuffer *)v8, v6);
            v8 = v26[0];
            v26[0] = 0;
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v26);
            if (v8)
              goto LABEL_20;
          }
        }
      }
      return std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](&v25, 0);
    }
  }
  return result;
}

uint64_t WebCore::BlobLoader::didFinishLoading(WebCore::BlobLoader *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  (*(void (**)(uint64_t, WebCore::BlobLoader *))(*(_QWORD *)v1 + 16))(v1, this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebCore::BlobLoader::didFail(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebCore::DeferredPromise::reject<WebCore::IDLAny>(uint64_t result, objc_class *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  int v17;
  _BYTE v18[8];

  v3 = *(_QWORD *)(result + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 32);
    if (!v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
      v8 = 0;
    else
      v8 = *(uint64_t **)v7;
    v9 = v8[7];
    MEMORY[0x19AEA3294](v18, v9);
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
    {
      if (a3)
        v11 = 2;
      else
        v11 = 1;
      WebCore::DeferredPromise::callFunction(v6, v8, v11, a2);
      return MEMORY[0x19AEA32A0](v18);
    }
    v12 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v8);
    if (!(*(unsigned int (**)(_QWORD *))(*v12 + 64))(v12))
    {
LABEL_15:
      WebCore::reportException((JSC::JSGlobalObject *)v8, v10, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v18);
    }
    v13 = v12[43];
    if (*(_QWORD *)(v9 + 24) == v10)
    {
LABEL_29:
      *(_BYTE *)(*(_QWORD *)(v13 + 8) + 93442) = 1;
      *(_BYTE *)(v6 + 44) = 1;
      goto LABEL_15;
    }
    if (!v13)
      goto LABEL_15;
    v14 = (unsigned __int8 *)(v13 + 40);
    if (__ldaxr((unsigned __int8 *)(v13 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v13 + 40);
LABEL_23:
    v16 = *(unsigned __int8 *)(v13 + 41);
    v17 = __ldxr(v14);
    if (v17 == 1)
    {
      if (!__stlxr(0, v14))
      {
LABEL_28:
        if (!v16)
          goto LABEL_15;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 40));
    goto LABEL_28;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::doFetch(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::FetchRequestInit &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FetchResponse>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::DOMPromiseDeferred,WTF::RawPtrTraits<WebCore::DOMPromiseDeferred>,WTF::DefaultRefDerefTraits<WebCore::DOMPromiseDeferred>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::UserGestureToken *v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E3356130;
  v3 = (WebCore::UserGestureToken *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v3, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::doFetch(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::FetchRequestInit &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FetchResponse>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::DOMPromiseDeferred,WTF::RawPtrTraits<WebCore::DOMPromiseDeferred>,WTF::DefaultRefDerefTraits<WebCore::DOMPromiseDeferred>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::UserGestureToken *v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E3356130;
  v3 = (WebCore::UserGestureToken *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v3, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::doFetch(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::FetchRequest,WTF::RawPtrTraits<WebCore::FetchRequest>,WTF::DefaultRefDerefTraits<WebCore::FetchRequest>>,WTF::String> &&,WebCore::FetchRequestInit &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FetchResponse>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::DOMPromiseDeferred,WTF::RawPtrTraits<WebCore::DOMPromiseDeferred>,WTF::DefaultRefDerefTraits<WebCore::DOMPromiseDeferred>>> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::UserGestureToken *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  WebCore::UserGestureToken *v13;
  _BYTE v14[16];
  int v15;
  uint64_t v16;
  char v17;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(WebCore::UserGestureToken **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v12 = v5;
  v13 = v6;
  v14[0] = 0;
  v15 = -1;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E3356158[v7])(&v16, v14, a2);
    v15 = v7;
  }
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = &off_1E3356178;
  *(_QWORD *)(v8 + 8) = v12;
  *(_QWORD *)(v8 + 16) = v13;
  *(_BYTE *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 40) = -1;
  v9 = v15;
  if (v15 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3356158[v15])(&v16, v8 + 24, v14);
    *(_DWORD *)(v8 + 40) = v9;
  }
  v16 = v8;
  WebCore::EventLoopTaskGroup::queueTask(v4, 11, &v16);
  v10 = v16;
  v16 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v15 != -1)
    ((void (*)(char *, _BYTE *))off_1E3356148[v15])(&v17, v14);
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCoreL7doFetchERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEONS2_16FetchRequestInitEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_13FetchResponseEEEEEEN3__0clINS2_11ExceptionOrINS_3RefISL_NS9_ISL_EENSB_ISL_EEEEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::UserGestureToken *v4;
  _DWORD *v5;
  WTF *v7;
  void *v8;
  char v9;

  *(_QWORD *)a1 = &off_1E3356178;
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3356148[v3])(&v9, a1 + 24);
  *(_DWORD *)(a1 + 40) = -1;
  v4 = *(WebCore::UserGestureToken **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCoreL7doFetchERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEONS2_16FetchRequestInitEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_13FetchResponseEEEEEEN3__0clINS2_11ExceptionOrINS_3RefISL_NS9_ISL_EENSB_ISL_EEEEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  WebCore::UserGestureToken *v4;
  _DWORD *v5;
  WTF *v7;
  void *v8;
  char v9;

  *(_QWORD *)this = &off_1E3356178;
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3356148[v3])(&v9, (char *)this + 24);
  *((_DWORD *)this + 10) = -1;
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCoreL7doFetchERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_12FetchRequestENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEENS_6StringEEEEONS2_16FetchRequestInitEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_13FetchResponseEEEEEEN3__0clINS2_11ExceptionOrINS_3RefISL_NS9_ISL_EENSB_ISL_EEEEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11[8];

  v2 = a1 + 1;
  v3 = a1[2];
  if (v3
    && (v4 = *(double *)&WebCore::maxIntervalForUserGestureForwardingForFetch + *(double *)(v3 + 72),
        WTF::MonotonicTime::now((WTF::MonotonicTime *)a1),
        v4 >= v5)
    && (v6 = a1[2], !*(_DWORD *)(v6 + 68))
    && *(_BYTE *)(v6 + 16) == 1)
  {
    ++*(_DWORD *)v6;
    v10 = v6;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v11, &v10, 1, 1);
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken((WebCore::UserGestureToken *)v6, v7);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v6;
    }
    WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FetchResponse>>::settle<WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::FetchResponse>,WTF::DefaultRefDerefTraits<WebCore::FetchResponse>>>(v2, (uint64_t)(a1 + 3));
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v11);
  }
  else
  {
    WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FetchResponse>>::settle<WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::FetchResponse>,WTF::DefaultRefDerefTraits<WebCore::FetchResponse>>>(v2, (uint64_t)(a1 + 3));
  }
}

_DWORD *WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FetchResponse>>::settle<WTF::Ref<WebCore::FetchResponse,WTF::RawPtrTraits<WebCore::FetchResponse>,WTF::DefaultRefDerefTraits<WebCore::FetchResponse>>>(uint64_t *a1, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  _DWORD *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _DWORD **v8;
  _BYTE v9[8];
  WTF::StringImpl *v10;

  v2 = *(_DWORD *)(a2 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      v9[0] = *(_BYTE *)a2;
      v5 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v10 = v5;
      WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(*a1, (uint64_t)v9);
      result = v10;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          return (_DWORD *)WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16FileSystemHandleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v7, v8);
    }
  }
  else
  {
    v3 = *(_DWORD **)a2;
    *(_QWORD *)a2 = 0;
    result = (_DWORD *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FetchResponse>>(*a1, v3);
    if (v3[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16FileSystemHandleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16FileSystemHandleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN7WebCore12BufferSource11mutableSpanEvEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v5 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    result = *(_QWORD *)(v2 + 24);
    goto LABEL_13;
  }
  if (!((v4 & 0x3FFFFFFFFLL) + v5))
    return 0;
  v6 = *(_QWORD *)(v2 + 24);
  if (v6)
    result = (v6 & 0x3FFFFFFFFLL) + v5;
  else
    result = 0;
LABEL_13:
  if ((*(_BYTE *)(v2 + 6) & 3) != 0 && *(_BYTE *)(v3 + 64))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
      atomic_load((unint64_t *)(v8 + 32));
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN7WebCore12BufferSource11mutableSpanEvEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)a2)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (result)
  {
    v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v3)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        return (result & 0x3FFFFFFFFLL) + v3;
    }
  }
  return result;
}

uint64_t WebCore::FileSystemStorageConnection::isWorker(WebCore::FileSystemStorageConnection *this)
{
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E33562D8;
      v5[1] = v2;
      v6 = v5;
      WTF::ensureOnMainRunLoop();
      if (v6)
        (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::FileSystemHandleCloseScope,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  char *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(char **)(v1 + 8);
    if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 24))(*(_QWORD *)(v1 + 24));
    v3 = *(unsigned int **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
    return WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, int *a2)
{
  WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)(a2 + 2), a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataConsumer::read(void)::$_0,WebCore::FormDataConsumer::read(void)::$_1,WebCore::FormDataConsumer::read(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> const&>(_QWORD ***a1, uint64_t a2)
{
  return WebCore::FormDataConsumer::consume(**a1, *(_QWORD **)a2, (_QWORD *)*(unsigned int *)(a2 + 12));
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataConsumer::read(void)::$_0,WebCore::FormDataConsumer::read(void)::$_1,WebCore::FormDataConsumer::read(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> const&>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int *result;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  __int128 v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(*(_QWORD *)a1 + 8);
  v2 = v1[5];
  v3 = *v1;
  if (*v1)
    goto LABEL_21;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = v1;
  v5 = (unsigned int *)*v1;
  *v1 = v3;
  if (!v5)
    goto LABEL_21;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  v3 = *v1;
  if (*v1)
  {
LABEL_21:
    do
      v8 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v8 + 1, (unsigned int *)v3));
  }
  v21 = (WTF *)v3;
  v9 = v1[2];
  v10 = *(_OWORD *)(v9 + 240);
  v22 = *(_OWORD *)(v9 + 224);
  v23 = v10;
  WTF::String::isolatedCopy();
  v11 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v11 = &off_1E3356338;
  *(_QWORD *)(v11 + 16) = v21;
  v12 = v23;
  *(_OWORD *)(v11 + 32) = v22;
  *(_OWORD *)(v11 + 48) = v12;
  v13 = v24;
  v20 = v11;
  v21 = 0;
  v24 = 0;
  *(_QWORD *)(v11 + 64) = v13;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v20);
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = (unsigned int *)v21;
  v21 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr(result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, result));
    if (!v19)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v14);
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataConsumer::read(void)::$_0,WebCore::FormDataConsumer::read(void)::$_1,WebCore::FormDataConsumer::read(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> const&>(uint64_t a1, const WTF::URL *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  WebCore::ScriptExecutionContext *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28[2];
  int v29;
  char v30;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  v4 = *v3;
  if (*v3)
    goto LABEL_36;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v3;
  v6 = (unsigned int *)*v3;
  *v3 = v4;
  if (!v6)
    goto LABEL_36;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *v3;
  if (*v3)
  {
LABEL_36:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E3356108;
  v11[1] = v4;
  *v10 = off_1E3356C10;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v11;
  v12 = v3 + 6;
  v28[0] = 0;
  std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v3 + 6, v10);
  std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v28, 0);
  v13 = v3[6];
  v14 = (WebCore::ScriptExecutionContext *)v3[2];
  v15 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v15 = &off_1E33AEE88;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  if (v13)
  {
    v16 = *(_QWORD *)(v13 + 8);
    if (v16)
      goto LABEL_37;
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = v13;
    v18 = *(unsigned int **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v16;
    if (!v18)
      goto LABEL_37;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v17);
    }
    v16 = *(_QWORD *)(v13 + 8);
    if (v16)
    {
LABEL_37:
      do
        v21 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v21 + 1, (unsigned int *)v16));
    }
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 24) = v16;
  *(_QWORD *)(v15 + 32) = &off_1E31F4A18;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  WTF::URL::invalidate((WTF::URL *)(v15 + 72));
  *(_BYTE *)(v15 + 160) = 0;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  v22 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v22 += 2;
  *(_QWORD *)(v15 + 176) = 0;
  *(_QWORD *)(v15 + 184) = 0;
  *(_QWORD *)(v15 + 168) = v22;
  *(_BYTE *)(v15 + 192) = 0;
  *(_QWORD *)(v15 + 196) = 0;
  *(_WORD *)(v15 + 204) = 0;
  v23 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v13 + 16) = v15;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 64))(v23);
    v15 = *(_QWORD *)(v13 + 16);
  }
  WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v15, v14, a2);
  v24 = *v12;
  if (!*v12 || !*(_QWORD *)(v24 + 16) || !*(_QWORD *)(v24 + 24))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = (WTF::StringImpl *)v28[0];
    v26 = v3[3];
    v3[3] = 0;
    WebCore::FormDataConsumer::cancel((WebCore::FormDataConsumer *)v3);
    if (v26)
    {
      LOBYTE(v28[0]) = 8;
      v28[1] = (uint64_t)v25;
      v29 = 1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 16))(v26, v28);
      if (v29 != -1)
        ((void (*)(char *, uint64_t *))off_1E33560E8[v29])(&v30, v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    else if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v27);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FormDataConsumer::consumeFile(WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3356338;
  v3 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FormDataConsumer::consumeFile(WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3356338;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FormDataConsumer::consumeFile(WTF::String const&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  __int128 v2;
  WTF *v3;
  uint64_t v4;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 48);
  v18[0] = *(_OWORD *)(a1 + 32);
  v18[1] = v2;
  v3 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v12 = v3;
  WTF::FileSystemImpl::readEntireFile((WTF::FileSystemImpl *)(a1 + 64), a2);
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = &off_1E3356360;
  *(_QWORD *)(v4 + 8) = v12;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  if (v15)
  {
    *(_QWORD *)(v4 + 16) = v13;
    v13 = 0;
    *(_QWORD *)(v4 + 24) = v14;
    *(_BYTE *)(v4 + 32) = 1;
  }
  v16 = v4;
  v17 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v18);
  if (v6)
  {
    v8 = v6[4];
    if (v8)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 336))(v8, &v16);
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v10 = v16;
  v16 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v15 && v13)
    WTF::fastFree(v13, v7);
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16FormDataConsumer11consumeFileERKNS_6StringEEN3__0clEvEUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a1 = &off_1E3356360;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF **)(a1 + 16);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16FormDataConsumer11consumeFileERKNS_6StringEEN3__0clEvEUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3356360;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF *)*((_QWORD *)this + 2);
    if (v3)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore16FormDataConsumer11consumeFileERKNS_6StringEEN3__0clEvEUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESC_(unsigned int *result)
{
  uint64_t v1;
  WebCore::FormDataConsumer *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _QWORD v6[2];
  int v7;
  char v8;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(WebCore::FormDataConsumer **)(v1 + 8);
    if (v2)
    {
      if (*((_BYTE *)result + 32))
      {
        return WebCore::FormDataConsumer::consume(v2, *((_QWORD **)result + 2), (_QWORD *)result[7]);
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (WTF::StringImpl *)v6[0];
        v4 = *((_QWORD *)v2 + 3);
        *((_QWORD *)v2 + 3) = 0;
        result = WebCore::FormDataConsumer::cancel(v2);
        if (v4)
        {
          LOBYTE(v6[0]) = 8;
          v6[1] = v3;
          v7 = 1;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v6);
          if (v7 != -1)
            ((void (*)(char *, _QWORD *))off_1E33560E8[v7])(&v8, v6);
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        }
        else if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            return (unsigned int *)WTF::StringImpl::destroy(v3, v5);
          else
            *(_DWORD *)v3 -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getFileHandle(WTF::String const&,WebCore::FileSystemDirectoryHandle::GetFileOptions const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemFileHandle>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = &off_1E3356398;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getFileHandle(WTF::String const&,WebCore::FileSystemDirectoryHandle::GetFileOptions const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemFileHandle>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E3356398;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getFileHandle(WTF::String const&,WebCore::FileSystemDirectoryHandle::GetFileOptions const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemFileHandle>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  WebCore::ContextDestructionObserver *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  objc_class *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  objc_class *v48;
  WTF::StringImpl *v49;
  objc_class *v50;
  unsigned __int8 v51[8];
  WTF::StringImpl *v52;

  LOBYTE(v45) = 0;
  v47 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_76;
  ((void (*)(unsigned __int8 *, uint64_t *, uint64_t))off_1E33563B0[v3])(v51, &v45, a2);
  v47 = v3;
  if (!(_DWORD)v3)
  {
    v9 = a1[1];
    if (!v9 || (v2 = *(_QWORD *)(v9 + 8)) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = a1[4];
      LOBYTE(v48) = 8;
      v50 = 0;
      v51[0] = 8;
      v15 = v49;
      if (v49)
        *(_DWORD *)v49 += 2;
      v52 = v15;
      WebCore::DeferredPromise::reject(v14, v51, 0, &v50);
      v16 = v52;
      v52 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v7);
        else
          *(_DWORD *)v16 -= 2;
      }
      result = v49;
      v49 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_55;
        }
        goto LABEL_61;
      }
      goto LABEL_55;
    }
    v10 = *(unsigned __int8 *)(v2 + 178);
    if (*(_BYTE *)(v2 + 178))
    {
      if (v10 == 1 || v10 == 2)
        ++*(_DWORD *)(v2 + 216);
    }
    else
    {
      *(_DWORD *)(v2 - 264) += 2;
    }
    v11 = v45;
    v12 = (unsigned __int8 *)(v45 + 4);
    if (__ldaxr((unsigned __int8 *)(v45 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_28:
    v17 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    v18 = __ldxr(v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_33:
        v19 = v2 - 96;
        v20 = (_DWORD *)a1[3];
        if (v20)
          *v20 += 2;
        v21 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
        v22 = (uint64_t)v21;
        v23 = v2 - 96;
        if (!*(_BYTE *)(v2 + 178))
        {
          v24 = v2 - 288;
          v25 = *(_QWORD *)(v2 + 416);
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 8);
            if (v26)
              v24 = v26;
          }
          v23 = v24 + 192;
        }
        *(_QWORD *)v21 = &off_1E33A18C0;
        *((_QWORD *)v21 + 1) = 0;
        WebCore::ContextDestructionObserver::observeContext(v21, (WebCore::ScriptExecutionContext *)v23);
        *(_QWORD *)v22 = &off_1E33A0540;
        *(_QWORD *)(v22 + 16) = 0;
        if (*(_BYTE *)(v23 + 278))
        {
          __break(0xC471u);
          JUMPOUT(0x19534804CLL);
        }
        v48 = (objc_class *)v22;
        WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v23 + 128), (uint64_t *)&v48, (uint64_t)v51);
        *(_DWORD *)(v22 + 24) = 1;
        *(_BYTE *)(v22 + 28) = 0;
        *(_QWORD *)(v22 + 32) = v20;
        *(_QWORD *)(v22 + 40) = v17;
        v27 = a1[2];
        a1[2] = 0;
        *(_QWORD *)(v22 + 48) = v27;
        *(_BYTE *)(v22 + 56) = 0;
        *(_QWORD *)v22 = &off_1E3355FA0;
        result = (WTF::StringImpl *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v22);
        v29 = a1[4];
        v30 = *(_QWORD *)(v29 + 24);
        if (!v30 || !*(_QWORD *)v30 || (*(_BYTE *)(v30 + 8) & 3) != 0)
          goto LABEL_50;
        v31 = *(_QWORD *)(v29 + 32);
        if (!v31 || (*(_BYTE *)(v31 + 8) & 3) != 0)
          v32 = 0;
        else
          v32 = *(uint64_t **)v31;
        v33 = v32[7];
        MEMORY[0x19AEA3294](v51, v33);
        v34 = (objc_class *)WebCore::wrap<WebCore::FileSystemHandle>((int)v32, **(JSC::VM ***)(v29 + 32), v22);
        v35 = *(_QWORD *)(v33 + 16);
        if (!v35)
        {
          WebCore::DeferredPromise::callFunction(v29, v32, 0, v34);
          v35 = *(_QWORD *)(v33 + 16);
          if (!v35)
          {
LABEL_49:
            result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v51);
LABEL_50:
            if (*(_DWORD *)(v22 + 24) == 1)
              result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
            else
              --*(_DWORD *)(v22 + 24);
            v36 = *(unsigned __int8 *)(v2 + 178);
            if (!*(_BYTE *)(v2 + 178))
            {
              if (*(_DWORD *)(v2 - 264) == 2)
              {
                if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
                  result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v28);
              }
              else
              {
                *(_DWORD *)(v2 - 264) -= 2;
              }
              goto LABEL_55;
            }
            if (v36 == 1)
            {
              if (*(_DWORD *)(v2 + 216) == 1)
                result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
              else
                --*(_DWORD *)(v2 + 216);
              goto LABEL_55;
            }
LABEL_77:
            if (v36 == 2)
              result = (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
            goto LABEL_55;
          }
        }
        v43 = v2;
        v44 = v35;
        v37 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v32);
        if (!(*(unsigned int (**)(_QWORD *))(*v37 + 64))(v37))
        {
LABEL_68:
          WebCore::reportException((JSC::JSGlobalObject *)v32, v44, 0, 0, 0);
          v2 = v43;
          goto LABEL_49;
        }
        v38 = v37[43];
        if (*(_QWORD *)(v33 + 24) == v44)
        {
LABEL_93:
          *(_BYTE *)(*(_QWORD *)(v38 + 8) + 93442) = 1;
          *(_BYTE *)(v29 + 44) = 1;
          goto LABEL_68;
        }
        if (!v38)
          goto LABEL_68;
        v39 = (unsigned __int8 *)(v38 + 40);
        if (__ldaxr((unsigned __int8 *)(v38 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v39))
        {
          goto LABEL_87;
        }
        MEMORY[0x19AEA534C](v38 + 40);
LABEL_87:
        v41 = *(unsigned __int8 *)(v38 + 41);
        v42 = __ldxr(v39);
        if (v42 == 1)
        {
          if (!__stlxr(0, v39))
          {
LABEL_92:
            if (!v41)
              goto LABEL_68;
            goto LABEL_93;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v38 + 40));
        goto LABEL_92;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_33;
  }
  if ((_DWORD)v3 != 1)
  {
LABEL_76:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_77;
  }
  v5 = v46;
  v46 = 0;
  v6 = a1[4];
  v48 = 0;
  v51[0] = v45;
  if (v5)
    *(_DWORD *)v5 += 2;
  v52 = v5;
  WebCore::DeferredPromise::reject(v6, v51, 0, &v48);
  result = v52;
  v52 = 0;
  if (!result)
  {
LABEL_9:
    if (!v5)
      goto LABEL_55;
    goto LABEL_10;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (v5)
  {
LABEL_10:
    if (*(_DWORD *)v5 != 2)
    {
      *(_DWORD *)v5 -= 2;
      goto LABEL_55;
    }
    result = v5;
LABEL_61:
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
LABEL_55:
  if (v47 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, uint64_t *))off_1E33562B8[v47])(v51, &v45);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getDirectoryHandle(WTF::String const&,WebCore::FileSystemDirectoryHandle::GetDirectoryOptions const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = &off_1E33563D0;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getDirectoryHandle(WTF::String const&,WebCore::FileSystemDirectoryHandle::GetDirectoryOptions const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E33563D0;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getDirectoryHandle(WTF::String const&,WebCore::FileSystemDirectoryHandle::GetDirectoryOptions const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  WebCore::ContextDestructionObserver *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  objc_class *v32;
  WTF::StringImpl *v33;
  objc_class *v34;
  unsigned __int8 v35[8];
  WTF::StringImpl *v36;

  LOBYTE(v29) = 0;
  v31 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_64;
  ((void (*)(unsigned __int8 *, uint64_t *, uint64_t))off_1E33563B0[v3])(v35, &v29, a2);
  v31 = v3;
  if (!(_DWORD)v3)
  {
    v9 = a1[1];
    if (!v9 || (v2 = *(_QWORD *)(v9 + 8)) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = a1[4];
      LOBYTE(v32) = 8;
      v34 = 0;
      v35[0] = 8;
      v15 = v33;
      if (v33)
        *(_DWORD *)v33 += 2;
      v36 = v15;
      WebCore::DeferredPromise::reject(v14, v35, 0, &v34);
      v16 = v36;
      v36 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v7);
        else
          *(_DWORD *)v16 -= 2;
      }
      result = v33;
      v33 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_46;
        }
        goto LABEL_52;
      }
      goto LABEL_46;
    }
    v10 = *(unsigned __int8 *)(v2 + 178);
    if (*(_BYTE *)(v2 + 178))
    {
      if (v10 == 1 || v10 == 2)
        ++*(_DWORD *)(v2 + 216);
    }
    else
    {
      *(_DWORD *)(v2 - 264) += 2;
    }
    v11 = v29;
    v12 = (unsigned __int8 *)(v29 + 4);
    if (__ldaxr((unsigned __int8 *)(v29 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_28:
    v17 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    v18 = __ldxr(v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, v12))
        goto LABEL_33;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_33:
    v19 = (_DWORD *)a1[3];
    if (v19)
      *v19 += 2;
    v20 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v21 = (uint64_t)v20;
    v22 = v2 - 96;
    if (!*(_BYTE *)(v2 + 178))
    {
      v23 = v2 - 288;
      v24 = *(_QWORD *)(v2 + 416);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
          v23 = v25;
      }
      v22 = v23 + 192;
    }
    *(_QWORD *)v20 = &off_1E33A18C0;
    *((_QWORD *)v20 + 1) = 0;
    WebCore::ContextDestructionObserver::observeContext(v20, (WebCore::ScriptExecutionContext *)v22);
    *(_QWORD *)v21 = &off_1E33A0540;
    *(_QWORD *)(v21 + 16) = 0;
    if (*(_BYTE *)(v22 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195348720);
    }
    v32 = (objc_class *)v21;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v22 + 128), (uint64_t *)&v32, (uint64_t)v35);
    *(_DWORD *)(v21 + 24) = 1;
    *(_BYTE *)(v21 + 28) = 1;
    *(_QWORD *)(v21 + 32) = v19;
    *(_QWORD *)(v21 + 40) = v17;
    v26 = a1[2];
    a1[2] = 0;
    *(_QWORD *)(v21 + 48) = v26;
    *(_BYTE *)(v21 + 56) = 0;
    *(_QWORD *)v21 = &off_1E3355F48;
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v21);
    result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>>(a1[4], v21);
    if (*(_DWORD *)(v21 + 24) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    else
      --*(_DWORD *)(v21 + 24);
    v28 = *(unsigned __int8 *)(v2 + 178);
    if (!*(_BYTE *)(v2 + 178))
    {
      if (*(_DWORD *)(v2 - 264) == 2)
      {
        if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
          result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v27);
      }
      else
      {
        *(_DWORD *)(v2 - 264) -= 2;
      }
      goto LABEL_46;
    }
    if (v28 == 1)
    {
      if (*(_DWORD *)(v2 + 216) == 1)
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
      else
        --*(_DWORD *)(v2 + 216);
      goto LABEL_46;
    }
LABEL_65:
    if (v28 == 2)
      result = (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
    goto LABEL_46;
  }
  if ((_DWORD)v3 != 1)
  {
LABEL_64:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_65;
  }
  v5 = v30;
  v30 = 0;
  v6 = a1[4];
  v32 = 0;
  v35[0] = v29;
  if (v5)
    *(_DWORD *)v5 += 2;
  v36 = v5;
  WebCore::DeferredPromise::reject(v6, v35, 0, &v32);
  result = v36;
  v36 = 0;
  if (!result)
  {
LABEL_9:
    if (!v5)
      goto LABEL_46;
    goto LABEL_10;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (v5)
  {
LABEL_10:
    if (*(_DWORD *)v5 != 2)
    {
      *(_DWORD *)v5 -= 2;
      goto LABEL_46;
    }
    result = v5;
LABEL_52:
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
LABEL_46:
  if (v31 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, uint64_t *))off_1E33562B8[v31])(v35, &v29);
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::FileSystemHandle>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::removeEntry(WTF::String const&,WebCore::FileSystemDirectoryHandle::RemoveOptions const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<void> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33563F8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::removeEntry(WTF::String const&,WebCore::FileSystemDirectoryHandle::RemoveOptions const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<void> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33563F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::removeEntry(WTF::String const&,WebCore::FileSystemDirectoryHandle::RemoveOptions const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<void> &&>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v2 = (WTF::StringImpl *)(a1 + 8);
  v6[0] = 0;
  v8 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v6[0] = *(_BYTE *)a2;
    v3 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v7 = v3;
    v8 = 1;
  }
  result = WebCore::DOMPromiseDeferred<void>::settle(v2, (uint64_t)v6);
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::resolve(WebCore::FileSystemHandle const&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLUSVString>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3356420;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::resolve(WebCore::FileSystemHandle const&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLUSVString>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3356420;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::resolve(WebCore::FileSystemHandle const&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLUSVString>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  int v23;
  WTF *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF *v27;
  WTF::StringImpl *v28;
  objc_class *v29;

  LOBYTE(v24) = 0;
  v26 = -1;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6 == -1)
    goto LABEL_41;
  v3 = a1;
  result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF **, uint64_t))off_1E3356438[v6])(&v27, &v24, a2);
  v26 = v6;
  if (!(_DWORD)v6)
  {
    v12 = v24;
    v27 = v24;
    v14 = v25;
    v13 = HIDWORD(v25);
    v24 = 0;
    v25 = 0;
    v28 = (WTF::StringImpl *)__PAIR64__(v13, v14);
    v6 = *(_QWORD *)(v3 + 8);
    v15 = *(_QWORD *)(v6 + 24);
    if (!v15 || !*(_QWORD *)v15 || (*(_BYTE *)(v15 + 8) & 3) != 0)
    {
LABEL_21:
      if (v13)
      {
        v18 = 8 * v13;
        do
        {
          result = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
            else
              *(_DWORD *)result -= 2;
          }
          v12 = (WTF *)((char *)v12 + 8);
          v18 -= 8;
        }
        while (v18);
        v12 = v27;
        if (!v27)
          goto LABEL_23;
      }
      else if (!v12)
      {
        goto LABEL_23;
      }
      v27 = 0;
      LODWORD(v28) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(v12, v8);
      goto LABEL_23;
    }
    v16 = *(_QWORD *)(v6 + 32);
    if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
      v2 = 0;
    else
      v2 = *(uint64_t **)v16;
    v4 = v2[7];
    MEMORY[0x19AEA3294](&v29, v4);
    v17 = (objc_class *)WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLUSVString>>::convert<WTF::String,0ul>((uint64_t)v2, **(_QWORD **)(v6 + 32), (uint64_t)&v27);
    v3 = *(_QWORD *)(v4 + 16);
    if (!v3)
    {
      WebCore::DeferredPromise::callFunction(v6, v2, 0, v17);
      v3 = *(_QWORD *)(v4 + 16);
      if (!v3)
      {
LABEL_20:
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v29);
        v13 = HIDWORD(v28);
        v12 = v27;
        goto LABEL_21;
      }
    }
    v5 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v2);
    if (!(*(unsigned int (**)(_QWORD *))(*v5 + 64))(v5))
      goto LABEL_39;
LABEL_42:
    v19 = v5[43];
    if (*(_QWORD *)(v4 + 24) == v3)
    {
LABEL_54:
      *(_BYTE *)(*(_QWORD *)(v19 + 8) + 93442) = 1;
      *(_BYTE *)(v6 + 44) = 1;
      goto LABEL_39;
    }
    if (!v19)
    {
LABEL_39:
      WebCore::reportException((JSC::JSGlobalObject *)v2, v3, 0, 0, 0);
      goto LABEL_20;
    }
    v20 = (unsigned __int8 *)(v19 + 40);
    if (__ldaxr((unsigned __int8 *)(v19 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v20))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](v19 + 40);
LABEL_48:
    v22 = *(unsigned __int8 *)(v19 + 41);
    v23 = __ldxr(v20);
    if (v23 == 1)
    {
      if (!__stlxr(0, v20))
      {
LABEL_53:
        if (v22)
          goto LABEL_54;
        goto LABEL_39;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v19 + 40));
    goto LABEL_53;
  }
  if ((_DWORD)v6 != 1)
  {
LABEL_41:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_42;
  }
  v9 = v25;
  v25 = 0;
  v10 = *(_QWORD *)(v3 + 8);
  v29 = 0;
  LOBYTE(v27) = (_BYTE)v24;
  if (v9)
    *(_DWORD *)v9 += 2;
  v28 = v9;
  WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v27, 0, &v29);
  result = v28;
  v28 = 0;
  if (!result)
  {
LABEL_9:
    if (v9)
      goto LABEL_10;
    goto LABEL_23;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  if (v9)
  {
LABEL_10:
    if (*(_DWORD *)v9 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_23:
  if (v26 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF **))off_1E33561A0[v26])(&v27, &v24);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getHandle(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&>>> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = &off_1E3356458;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getHandle(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&>>> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E3356458;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::getHandle(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&)> &&>>> &&>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  WebCore::ContextDestructionObserver *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)(WebCore::ContextDestructionObserver *__hidden);
  WebCore::ContextDestructionObserver *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;

  LOBYTE(v34) = 0;
  v36 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
LABEL_58:
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_59:
    if (v33 == 2)
      result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
    goto LABEL_45;
  }
  ((void (*)(_QWORD *, uint64_t *, uint64_t))off_1E33563B0[v3])(v37, &v34, a2);
  v36 = v3;
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == 1)
    {
      v5 = v35;
      v35 = 0;
      LOBYTE(v37[0]) = v34;
      v37[1] = v5;
      goto LABEL_5;
    }
    goto LABEL_58;
  }
  v8 = v34;
  v9 = (unsigned __int8 *)(v34 + 4);
  if (__ldaxr((unsigned __int8 *)(v34 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_11:
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = 0;
  v12 = *(unsigned __int8 *)(v8 + 16);
  v13 = __ldxr(v9);
  if (v13 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_16;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_16:
  v14 = a1[1];
  if (!v14 || (v2 = *(_QWORD *)(v14 + 8)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v37[0]) = 8;
LABEL_5:
    v38 = 1;
    v6 = a1[4];
    a1[4] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v37);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v38 != -1)
      result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E33561B0[v38])(&v39, v37);
    goto LABEL_45;
  }
  v15 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v15 == 1 || v15 == 2)
      ++*(_DWORD *)(v2 + 216);
  }
  else
  {
    *(_DWORD *)(v2 - 264) += 2;
  }
  v16 = (_DWORD *)a1[2];
  if (v12)
  {
    if (v16)
      *v16 += 2;
    v17 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v18 = (uint64_t)v17;
    v19 = v2 - 96;
    if (!*(_BYTE *)(v2 + 178))
    {
      v20 = v2 - 288;
      v21 = *(_QWORD *)(v2 + 416);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
          v20 = v22;
      }
      v19 = v20 + 192;
    }
    *(_QWORD *)v17 = &off_1E33A18C0;
    *((_QWORD *)v17 + 1) = 0;
    WebCore::ContextDestructionObserver::observeContext(v17, (WebCore::ScriptExecutionContext *)v19);
    *(_QWORD *)v18 = &off_1E33A0540;
    *(_QWORD *)(v18 + 16) = 0;
    if (*(_BYTE *)(v19 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x1953493ACLL);
    }
    v39 = v18;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v19 + 128), &v39, (uint64_t)v37);
    *(_DWORD *)(v18 + 24) = 1;
    *(_BYTE *)(v18 + 28) = 1;
    *(_QWORD *)(v18 + 32) = v16;
    *(_QWORD *)(v18 + 40) = v11;
    v23 = a1[3];
    a1[3] = 0;
    *(_QWORD *)(v18 + 48) = v23;
    *(_BYTE *)(v18 + 56) = 0;
    v24 = &off_1E3355F48;
  }
  else
  {
    if (v16)
      *v16 += 2;
    v25 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v18 = (uint64_t)v25;
    v26 = v2 - 96;
    if (!*(_BYTE *)(v2 + 178))
    {
      v27 = v2 - 288;
      v28 = *(_QWORD *)(v2 + 416);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
          v27 = v29;
      }
      v26 = v27 + 192;
    }
    *(_QWORD *)v25 = &off_1E33A18C0;
    *((_QWORD *)v25 + 1) = 0;
    WebCore::ContextDestructionObserver::observeContext(v25, (WebCore::ScriptExecutionContext *)v26);
    *(_QWORD *)v18 = &off_1E33A0540;
    *(_QWORD *)(v18 + 16) = 0;
    if (*(_BYTE *)(v26 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195349408);
    }
    v39 = v18;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v26 + 128), &v39, (uint64_t)v37);
    *(_DWORD *)(v18 + 24) = 1;
    *(_BYTE *)(v18 + 28) = 0;
    *(_QWORD *)(v18 + 32) = v16;
    *(_QWORD *)(v18 + 40) = v11;
    v30 = a1[3];
    a1[3] = 0;
    *(_QWORD *)(v18 + 48) = v30;
    *(_BYTE *)(v18 + 56) = 0;
    v24 = &off_1E3355FA0;
  }
  *(_QWORD *)v18 = v24;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v18);
  v37[0] = v18;
  v38 = 0;
  v31 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v31 + 16))(v31, v37);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E33561B0[v38])(&v39, v37);
  v33 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v33 == 1)
    {
      if (*(_DWORD *)(v2 + 216) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
      else
        --*(_DWORD *)(v2 + 216);
      goto LABEL_45;
    }
    goto LABEL_59;
  }
  if (*(_DWORD *)(v2 - 264) == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v32);
  }
  else
  {
    *(_DWORD *)(v2 - 264) -= 2;
  }
LABEL_45:
  if (v36 != -1)
    return ((uint64_t (*)(_QWORD *, uint64_t *))off_1E33562B8[v36])(v37, &v34);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::next(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_1,void,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E3356480;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v4, a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::next(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_1,void,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3356480;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v4, a2);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v5, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::next(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_1,void,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  _QWORD *v24;
  _BYTE v25[8];
  uint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  LOBYTE(v20) = 0;
  v22 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    *(_BYTE *)(a1[1] + 40) = 1;
    goto LABEL_22;
  }
  ((void (*)(_QWORD **, uint64_t *, uint64_t))off_1E3356438[v3])(&v24, &v20, a2);
  v22 = v3;
  v5 = a1[1];
  *(_BYTE *)(v5 + 40) = 1;
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == 1)
    {
      v6 = v20;
      v7 = v21;
      v21 = 0;
      *(_BYTE *)(a1[3] + 41) = 0;
      v25[0] = v6;
      v26 = v7;
      v27 = 1;
      v8 = a1[5];
      a1[5] = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 16))(v8, &v24);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v27 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E33561C0[v27])(&v23, v25);
      goto LABEL_11;
    }
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v10 = v20;
  v11 = v21;
  v20 = 0;
  v21 = 0;
  v12 = *(unsigned int *)(v5 + 36);
  if ((_DWORD)v12)
  {
    v17 = *(WTF::StringImpl ***)(v5 + 24);
    v18 = 8 * v12;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v4);
        else
          *(_DWORD *)v19 -= 2;
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v13 = *(WTF **)(v5 + 24);
  if (v13)
  {
    *(_QWORD *)(v5 + 24) = 0;
    *(_DWORD *)(v5 + 32) = 0;
    WTF::fastFree(v13, v4);
  }
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = v11;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = &off_1E33564A8;
  v14[1] = a1[3];
  v15 = a1[4];
  a1[4] = 0;
  v14[2] = v15;
  v16 = a1[5];
  a1[5] = 0;
  v14[3] = v16;
  v24 = v14;
  WebCore::FileSystemDirectoryHandle::Iterator::advance(v5, (uint64_t *)&v24);
  result = (uint64_t)v24;
  if (v24)
    result = (*(uint64_t (**)(_QWORD *))(*v24 + 8))(v24);
LABEL_11:
  if (v22 != -1)
    return ((uint64_t (*)(_QWORD **, uint64_t *))off_1E33561A0[v22])(&v24, &v20);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::next(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E33564A8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::next(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33564A8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::next(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  _BYTE v7[8];
  _BYTE v8[24];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v9 = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E33564C0[v3])(&v6, v8, a2 + 8);
    v9 = v3;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + 41) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v9 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E33561C0[v9])(&v6, v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::advance(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E33564E0;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::advance(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E33564E0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v5, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemDirectoryHandle::Iterator::advance(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>>>> &&)> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandle,WTF::RawPtrTraits<WebCore::FileSystemHandle>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandle>>> &&>::call(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_13;
  ((void (*)(_BYTE *, uint64_t *, uint64_t))off_1E33564F8[v2])(v15, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v6 = v11;
    v11 = 0;
    v7 = a1[3];
    v16 = a1[4];
    v17 = v6;
    v18 = 1;
    v19 = 0;
    a1[3] = 0;
    a1[4] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v15);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v19;
    if (v19 == -1)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((_DWORD)v2 != 1)
LABEL_13:
    std::__throw_bad_variant_access[abi:sn180100]();
  v4 = a1 + 3;
  if (v11 == 5)
  {
    result = WebCore::FileSystemDirectoryHandle::Iterator::advance(a1[1], v4);
    goto LABEL_10;
  }
  v9 = v12;
  v12 = 0;
  LOBYTE(v16) = v11;
  v17 = v9;
  v19 = 1;
  v10 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 16))(v10, v15);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v8 = v19;
  if (v19 != -1)
LABEL_9:
    result = ((uint64_t (*)(char *, uint64_t *))off_1E33561C0[v8])(&v14, &v16);
LABEL_10:
  if (v13 != -1)
    return ((uint64_t (*)(_BYTE *, uint64_t *))off_1E33561B0[v13])(v15, &v11);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore16FileSystemHandleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore16FileSystemHandleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemFileHandle::getFile(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::File>> &&)::$_0,void,WebCore::ExceptionOr<WTF::String> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E3356528;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemFileHandle::getFile(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::File>> &&)::$_0,void,WebCore::ExceptionOr<WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3356528;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemFileHandle::getFile(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::File>> &&)::$_0,void,WebCore::ExceptionOr<WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  objc_class *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  objc_class *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  objc_class *v36;
  WTF::StringImpl *v37;
  unsigned __int8 v38[8];
  WTF::StringImpl *v39;
  objc_class *v40;

  LOBYTE(v32) = 0;
  v34 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
    goto LABEL_63;
  ((void (*)(unsigned __int8 *, WTF::StringImpl **, uint64_t))off_1E3356540[v3])(v38, &v32, a2);
  v34 = v3;
  if (!(_DWORD)v3)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10 || (v2 = *(_QWORD *)(v10 + 8)) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v22 = *(_QWORD *)(a1 + 16);
      LOBYTE(v36) = 8;
      v40 = 0;
      v38[0] = 8;
      v23 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      v39 = v23;
      WebCore::DeferredPromise::reject(v22, v38, 0, &v40);
      v24 = v39;
      v39 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v7);
        else
          *(_DWORD *)v24 -= 2;
      }
      result = v37;
      v37 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_46;
        }
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    v11 = *(unsigned __int8 *)(v2 + 178);
    if (*(_BYTE *)(v2 + 178))
    {
      if (v11 == 1 || v11 == 2)
        ++*(_DWORD *)(v2 + 216);
    }
    else
    {
      *(_DWORD *)(v2 - 264) += 2;
    }
    v35 = 0;
    v38[0] = 0;
    LOBYTE(v39) = 0;
    WebCore::File::create((WTF::StringImpl **)(v9 + 32), v2 - 96, &v32, &v35, (WTF::String *)v38, (uint64_t *)&v40);
    v13 = v40;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(v14 + 24);
    if (!v15 || !*(_QWORD *)v15 || (*(_BYTE *)(v15 + 8) & 3) != 0)
      goto LABEL_25;
    v16 = *(_QWORD *)(v14 + 32);
    if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
      v17 = 0;
    else
      v17 = *(uint64_t **)v16;
    v18 = v17[7];
    MEMORY[0x19AEA3294](&v36, v18);
    v19 = (objc_class *)WebCore::wrap<WebCore::File>((uint64_t)v17, **(_QWORD **)(v14 + 32), (uint64_t)v13);
    v20 = *(_QWORD *)(v18 + 16);
    if (!v20)
    {
      WebCore::DeferredPromise::callFunction(v14, v17, 0, v19);
      v20 = *(_QWORD *)(v18 + 16);
      if (!v20)
      {
LABEL_24:
        MEMORY[0x19AEA32A0](&v36);
        v13 = v40;
LABEL_25:
        v40 = 0;
        if (v13)
        {
          if (*((_DWORD *)v13 + 4) == 1)
            (*(void (**)(objc_class *))(*(_QWORD *)v13 + 8))(v13);
          else
            --*((_DWORD *)v13 + 4);
        }
        result = v35;
        v35 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          else
            *(_DWORD *)result -= 2;
        }
        v21 = *(unsigned __int8 *)(v2 + 178);
        if (!*(_BYTE *)(v2 + 178))
        {
          if (*(_DWORD *)(v2 - 264) == 2)
          {
            if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
              result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v12);
          }
          else
          {
            *(_DWORD *)(v2 - 264) -= 2;
          }
          goto LABEL_46;
        }
        if (v21 == 1)
        {
          if (*(_DWORD *)(v2 + 216) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
          else
            --*(_DWORD *)(v2 + 216);
          goto LABEL_46;
        }
LABEL_64:
        if (v21 == 2)
          result = (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
        goto LABEL_46;
      }
    }
    v31 = v20;
    v25 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v17);
    if (!(*(unsigned int (**)(_QWORD *))(*v25 + 64))(v25))
    {
LABEL_55:
      WebCore::reportException((JSC::JSGlobalObject *)v17, v31, 0, 0, 0);
      goto LABEL_24;
    }
    v26 = v25[43];
    if (*(_QWORD *)(v18 + 24) == v31)
    {
LABEL_80:
      *(_BYTE *)(*(_QWORD *)(v26 + 8) + 93442) = 1;
      *(_BYTE *)(v14 + 44) = 1;
      goto LABEL_55;
    }
    if (!v26)
      goto LABEL_55;
    v27 = (unsigned __int8 *)(v26 + 40);
    if (__ldaxr((unsigned __int8 *)(v26 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v27))
    {
      goto LABEL_74;
    }
    MEMORY[0x19AEA534C](v26 + 40);
LABEL_74:
    v29 = *(unsigned __int8 *)(v26 + 41);
    v30 = __ldxr(v27);
    if (v30 == 1)
    {
      if (!__stlxr(0, v27))
      {
LABEL_79:
        if (!v29)
          goto LABEL_55;
        goto LABEL_80;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v26 + 40));
    goto LABEL_79;
  }
  if ((_DWORD)v3 != 1)
  {
LABEL_63:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_64;
  }
  v5 = v33;
  v33 = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v36 = 0;
  v38[0] = v32;
  if (v5)
    *(_DWORD *)v5 += 2;
  v39 = v5;
  WebCore::DeferredPromise::reject(v6, v38, 0, &v36);
  result = v39;
  v39 = 0;
  if (!result)
  {
LABEL_9:
    if (!v5)
      goto LABEL_46;
    goto LABEL_10;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (v5)
  {
LABEL_10:
    if (*(_DWORD *)v5 != 2)
    {
      *(_DWORD *)v5 -= 2;
      goto LABEL_46;
    }
    result = v5;
LABEL_45:
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
LABEL_46:
  if (v34 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF::StringImpl **))off_1E33562F0[v34])(v38, &v32);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemFileHandle::createSyncAccessHandle(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemSyncAccessHandle>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E3356560;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemFileHandle::createSyncAccessHandle(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemSyncAccessHandle>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3356560;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::FileSystemFileHandle::createSyncAccessHandle(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemSyncAccessHandle>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  objc_class *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WebCore::ContextDestructionObserver *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  objc_class *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  objc_class **v52;
  objc_class *v53;
  objc_class **v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v80;
  int v81;
  objc_class *v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  int v87;
  objc_class *v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  int v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  objc_class *v96;
  _BYTE v97[40];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  LOBYTE(v82) = 0;
  v87 = -1;
  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 == -1)
LABEL_124:
    std::__throw_bad_variant_access[abi:sn180100]();
  ((void (*)(_BYTE *, objc_class **, uint64_t))off_1E3356578[v2])(v97, &v82, a2);
  v87 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v82;
    v88 = v82;
    v89 = v83;
    v9 = v85;
    v85 = -1;
    v83 = 0;
    v90 = __PAIR64__(v9, v84);
    v91 = 0;
    v92 = 0;
    v10 = v86;
    v93 = v86;
    if (v9 == -1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v32 = *(_QWORD *)(a1 + 16);
      v33 = 24;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(unsigned __int8 *)(v13 + 178);
          if (*(_BYTE *)(v13 + 178))
          {
            if (v14 == 1 || v14 == 2)
              ++*(_DWORD *)(v13 + 216);
          }
          else
          {
            *(_DWORD *)(v13 - 264) += 2;
          }
          v15 = (WebCore::ContextDestructionObserver *)WTF::fastMalloc((WTF *)0x60);
          v16 = (uint64_t)v15;
          v17 = v13 - 96;
          if (!*(_BYTE *)(v13 + 178))
          {
            v18 = v13 - 288;
            v19 = *(_QWORD *)(v13 + 416);
            if (v19)
            {
              v20 = *(_QWORD *)(v19 + 8);
              if (v20)
                v18 = v20;
            }
            v17 = v18 + 192;
          }
          *(_QWORD *)v15 = &off_1E33A18C0;
          *((_QWORD *)v15 + 1) = 0;
          WebCore::ContextDestructionObserver::observeContext(v15, (WebCore::ScriptExecutionContext *)v17);
          *(_QWORD *)v16 = &off_1E33A0540;
          *(_QWORD *)(v16 + 16) = 0;
          if (*(_BYTE *)(v17 + 278))
          {
            __break(0xC471u);
            JUMPOUT(0x19534A930);
          }
          v94 = v16;
          WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v17 + 128), &v94, (uint64_t)v97);
          *(_DWORD *)(v16 + 24) = 1;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)v16 = &off_1E3356C58;
          ++*(_DWORD *)(v11 + 24);
          *(_QWORD *)(v16 + 40) = v11;
          *(_QWORD *)(v16 + 48) = v8;
          v21 = v89;
          v89 = 0;
          *(_QWORD *)(v16 + 56) = v21;
          v22 = v90;
          HIDWORD(v90) = -1;
          *(_QWORD *)(v16 + 64) = v22;
          *(_DWORD *)(v16 + 72) = 0;
          *(_BYTE *)(v16 + 76) = 0;
          *(_BYTE *)(v16 + 80) = 0;
          *(_QWORD *)(v16 + 88) = v10;
          if (*(_BYTE *)(v11 + 56))
            goto LABEL_24;
          v37 = *(uint64_t **)(v11 + 48);
          if (((*(uint64_t (**)(uint64_t *))(*v37 + 16))(v37) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19534A9C4);
          }
          v39 = v37[3];
          if (!v39 || !*(_QWORD *)(v39 + 8))
          {
LABEL_24:
            WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v16);
            v24 = *(_QWORD *)(a1 + 16);
            v25 = *(_QWORD *)(v24 + 24);
            if (!v25 || !*(_QWORD *)v25 || (*(_BYTE *)(v25 + 8) & 3) != 0)
              goto LABEL_33;
            v26 = *(_QWORD *)(v24 + 32);
            if (!v26 || (*(_BYTE *)(v26 + 8) & 3) != 0)
              v27 = 0;
            else
              v27 = *(uint64_t **)v26;
            v28 = v27[7];
            MEMORY[0x19AEA3294](v97, v28);
            v29 = (objc_class *)WebCore::wrap<WebCore::FileSystemSyncAccessHandle>((uint64_t)v27, **(_QWORD **)(v24 + 32), (WTF *)v16);
            v30 = *(_QWORD *)(v28 + 16);
            if (!v30)
            {
              WebCore::DeferredPromise::callFunction(v24, v27, 0, v29);
              v30 = *(_QWORD *)(v28 + 16);
              if (!v30)
              {
LABEL_32:
                MEMORY[0x19AEA32A0](v97);
LABEL_33:
                if (*(_DWORD *)(v16 + 24) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
                else
                  --*(_DWORD *)(v16 + 24);
                v31 = *(unsigned __int8 *)(v13 + 178);
                if (*(_BYTE *)(v13 + 178))
                {
                  if (v31 == 1)
                  {
                    if (*(_DWORD *)(v13 + 216) == 1)
                      (*(void (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 40))(v13 - 96);
                    else
                      --*(_DWORD *)(v13 + 216);
                  }
                  else if (v31 == 2)
                  {
                    WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v13 + 216));
                  }
                }
                else if (*(_DWORD *)(v13 - 264) == 2)
                {
                  if ((*(_WORD *)(v13 - 258) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)(v13 - 288), v23);
                }
                else
                {
                  *(_DWORD *)(v13 - 264) -= 2;
                }
LABEL_48:
                WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v89, (int *)v23);
                goto LABEL_49;
              }
            }
            v76 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v27);
            if (!(*(unsigned int (**)(_QWORD *))(*v76 + 64))(v76))
            {
LABEL_115:
              WebCore::reportException((JSC::JSGlobalObject *)v27, v30, 0, 0, 0);
              goto LABEL_32;
            }
            v77 = v76[43];
            if (*(_QWORD *)(v28 + 24) == v30)
            {
LABEL_141:
              *(_BYTE *)(*(_QWORD *)(v77 + 8) + 93442) = 1;
              *(_BYTE *)(v24 + 44) = 1;
              goto LABEL_115;
            }
            if (!v77)
              goto LABEL_115;
            v78 = (unsigned __int8 *)(v77 + 40);
            if (__ldaxr((unsigned __int8 *)(v77 + 40)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v78))
            {
              goto LABEL_135;
            }
            MEMORY[0x19AEA534C](v77 + 40);
LABEL_135:
            v80 = *(unsigned __int8 *)(v77 + 41);
            v81 = __ldxr(v78);
            if (v81 == 1)
            {
              if (!__stlxr(0, v78))
              {
LABEL_140:
                if (!v80)
                  goto LABEL_115;
                goto LABEL_141;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v77 + 40));
            goto LABEL_140;
          }
          v40 = v37 + 13;
          v41 = *(_QWORD *)(v16 + 32);
          if (v41)
            goto LABEL_146;
          v41 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v41 = 1;
          *(_QWORD *)(v41 + 8) = v16;
          v42 = *(unsigned int **)(v16 + 32);
          *(_QWORD *)(v16 + 32) = v41;
          if (!v42)
            goto LABEL_146;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v42);
            WTF::fastFree((WTF *)v42, v38);
          }
          v41 = *(_QWORD *)(v16 + 32);
          if (v41)
          {
LABEL_146:
            do
              v45 = __ldaxr((unsigned int *)v41);
            while (__stlxr(v45 + 1, (unsigned int *)v41));
          }
          v46 = *v40;
          if (*v40
            || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v37 + 13, 8u), (v46 = *v40) != 0))
          {
            v47 = *(_DWORD *)(v46 - 8);
          }
          else
          {
            v47 = 0;
          }
          v48 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
          v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
          v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
          v51 = v47 & ((v50 >> 31) ^ v50);
          v52 = (objc_class **)(v46 + 16 * v51);
          v53 = *v52;
          if (*v52)
          {
            v54 = 0;
            v55 = 1;
            while (v53 != v8)
            {
              if (v53 == (objc_class *)-1)
                v54 = v52;
              v51 = (v51 + v55) & v47;
              v52 = (objc_class **)(v46 + 16 * v51);
              v53 = *v52;
              ++v55;
              if (!*v52)
              {
                if (v54)
                {
                  *v54 = 0;
                  v54[1] = 0;
                  --*(_DWORD *)(*v40 - 16);
                  v52 = v54;
                }
                goto LABEL_73;
              }
            }
            if (v41)
            {
              do
              {
                v61 = __ldaxr((unsigned int *)v41);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, (unsigned int *)v41));
              if (!v62)
              {
                atomic_store(1u, (unsigned int *)v41);
                WTF::fastFree((WTF *)v41, v38);
              }
            }
            goto LABEL_102;
          }
LABEL_73:
          v56 = (unsigned int *)v52[1];
          *v52 = v8;
          v52[1] = (objc_class *)v41;
          if (v56)
          {
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, v56);
              WTF::fastFree((WTF *)v56, v38);
            }
          }
          v59 = *v40;
          if (*v40)
            v60 = *(_DWORD *)(v59 - 12) + 1;
          else
            v60 = 1;
          *(_DWORD *)(v59 - 12) = v60;
          v63 = *v40;
          if (*v40)
            v64 = *(_DWORD *)(v63 - 12);
          else
            v64 = 0;
          v65 = (*(_DWORD *)(v63 - 16) + v64);
          v66 = *(unsigned int *)(v63 - 4);
          if (v66 > 0x400)
          {
            if (v66 > 2 * v65)
              goto LABEL_102;
          }
          else
          {
            if (3 * v66 > 4 * v65)
            {
LABEL_102:
              v68 = v37[3];
              if (v68)
              {
                v69 = *(_QWORD *)(v68 + 8);
                if (v69)
                  v68 = v69 - 320;
                else
                  v68 = 0;
              }
              v70 = *(_OWORD *)(v68 + 240);
              *(_OWORD *)&v97[8] = *(_OWORD *)(v68 + 224);
              *(_OWORD *)&v97[24] = v70;
              v71 = v37[4];
              if (v71)
              {
                v72 = (unsigned int *)(v71 + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 + 1, v72));
              }
              v74 = WTF::fastMalloc((WTF *)0x50);
              *(_QWORD *)v74 = &off_1E33569E0;
              *(_QWORD *)(v74 + 16) = v8;
              *(_OWORD *)(v74 + 24) = *(_OWORD *)v97;
              *(_OWORD *)(v74 + 40) = *(_OWORD *)&v97[16];
              *(_QWORD *)(v74 + 64) = v71;
              v94 = v74;
              WTF::callOnMainThread();
              v75 = v94;
              v94 = 0;
              if (v75)
                (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
              goto LABEL_24;
            }
            if (!(_DWORD)v66)
            {
              v67 = 8;
              goto LABEL_101;
            }
          }
          v67 = (_DWORD)v66 << (6 * *(_DWORD *)(v63 - 12) >= (2 * v66));
LABEL_101:
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v37 + 13, v67);
          goto LABEL_102;
        }
      }
      WebCore::FileSystemFileHandle::closeSyncAccessHandle(*(_QWORD *)(a1 + 8), (uint64_t)v82);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v32 = *(_QWORD *)(a1 + 16);
      v33 = 8;
    }
    LOBYTE(v94) = v33;
    v96 = 0;
    v97[0] = v33;
    v34 = v95;
    if (v95)
      *(_DWORD *)v95 += 2;
    *(_QWORD *)&v97[8] = v34;
    WebCore::DeferredPromise::reject(v32, v97, 0, &v96);
    v35 = *(WTF::StringImpl **)&v97[8];
    *(_QWORD *)&v97[8] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v95;
    v95 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
    goto LABEL_48;
  }
  if ((_DWORD)v2 != 1)
    goto LABEL_124;
  v4 = v83;
  v83 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  v88 = 0;
  v97[0] = (_BYTE)v82;
  if (v4)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)&v97[8] = v4;
  WebCore::DeferredPromise::reject(v5, v97, 0, &v88);
  v7 = *(WTF::StringImpl **)&v97[8];
  *(_QWORD *)&v97[8] = 0;
  if (!v7)
  {
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_49;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v7, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_49:
  if (v87 != -1)
    ((void (*)(_BYTE *, objc_class **))off_1E3356300[v87])(v97, &v82);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  result = *(double *)(a3 + 16);
  *(_DWORD *)(a3 + 20) = -1;
  *(double *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemHandle::isSameEntry(WebCore::FileSystemHandle&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3356598;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemHandle::isSameEntry(WebCore::FileSystemHandle&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3356598;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemHandle::isSameEntry(WebCore::FileSystemHandle&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  int v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  objc_class *v14;

  v9[0] = 0;
  v11 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, unsigned __int8 *, uint64_t))off_1E33565B0[v2])(v12, v9, a2);
  v11 = v2;
  if (!(_DWORD)v2)
  {
    result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), v9[0]);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::FileSystemHandle::move(WebCore::FileSystemHandle&,WTF::String const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<void> &&>::~CallableWrapper(v8);
  }
  v4 = v10;
  v10 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v14 = 0;
  v12[0] = v9[0];
  if (v4)
    *(_DWORD *)v4 += 2;
  v13 = v4;
  WebCore::DeferredPromise::reject(v5, v12, 0, &v14);
  result = v13;
  v13 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v11 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, unsigned __int8 *))off_1E33562A8[v11])(v12, v9);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FileSystemHandle::move(WebCore::FileSystemHandle&,WTF::String const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<void> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *a1 = &off_1E33565D0;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FileSystemHandle::move(WebCore::FileSystemHandle&,WTF::String const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<void> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E33565D0;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::FileSystemHandle::move(WebCore::FileSystemHandle&,WTF::String const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,WebCore::ExceptionOr<void> &&>::call(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _BYTE v9[8];
  WTF::StringImpl *v10;
  char v11;

  v9[0] = 0;
  v11 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v9[0] = *(_BYTE *)a2;
    v3 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v10 = v3;
    v11 = 1;
  }
  else
  {
    v4 = a1[1];
    v5 = (_DWORD *)a1[3];
    if (v5)
      *v5 += 2;
    v6 = *(WTF::StringImpl **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  result = WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)(a1 + 4), (uint64_t)v9);
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::WeakPtr<WebCore::WorkerGlobalScope,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::WorkerGlobalScope>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(a1 + 336) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v2 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = a1 + 320;
    *(_BYTE *)(v2 + 32) = 0;
    v4 = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v4 & 0xFFFF000000000000 | v2;
    v5 = v4 & 0xFFFFFFFFFFFFLL;
    if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v9 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v9)
        {
          v12 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
          v5 = v12;
        }
        v10 = *(WTF **)(v5 + 16);
        if (v10)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v11 = v5;
          WTF::fastFree(v10, v3);
          v5 = v11;
        }
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  return *(_QWORD *)(a1 + 336) & 0xFFFFFFFFFFFFLL;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::~WorkerFileSystemStorageConnection()::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E33565F8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::~WorkerFileSystemStorageConnection()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33565F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::closeHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3356620;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::closeHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3356620;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::closeHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, *(_QWORD *)(a1 + 16));
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (uint64_t *)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          *v26 = *v13;
          v28 = v4 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v16 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (!v16)
            goto LABEL_21;
LABEL_20:
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          goto LABEL_21;
        }
        v15 = v4 + 16 * v11;
        v16 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if (++v11 == v12)
        goto LABEL_24;
    }
  }
  if (v4)
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::isSameEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *a1 = &off_1E3356648;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return a1;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return a1;
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::isSameEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *(_QWORD *)this = &off_1E3356648;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return WTF::fastFree(this, a2);
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return WTF::fastFree(this, a2);
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::isSameEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v1 = a1[1];
  v2 = a1[2];
  a1[2] = 0;
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3356670;
  v6[1] = v1;
  v6[2] = v2;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, v4, v5, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::isSameEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<BOOL> &)#1},void,WebCore::ExceptionOr<BOOL> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3356670;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::isSameEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<BOOL> &)#1},void,WebCore::ExceptionOr<BOOL> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3356670;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::isSameEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0::operator()(void)::{lambda(WebCore::ExceptionOr<BOOL> &)#1},void,WebCore::ExceptionOr<BOOL> &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (v4 != 1)
    {
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection11isSameEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrIbEEEEEEN3__0clEvENUlSC_E_clESC_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(v14);
    }
    LOBYTE(v18) = *(_BYTE *)a2;
    v5 = (char)v18;
    v6 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v19 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v20) = v5;
    v15[0] = v5;
    v16 = v21;
    v17 = 1;
    v21 = 0;
    v8 = v19;
    v19 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v15[0] = *(_BYTE *)a2;
    v17 = 0;
  }
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = &off_1E3356698;
  *(_QWORD *)(v10 + 8) = v2;
  *(_BYTE *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 32) = -1;
  ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33565B0[v9])(&v20, v10 + 16, v15);
  *(_DWORD *)(v10 + 32) = v9;
  v20 = v10;
  LOBYTE(v21) = 0;
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v20, &v18);
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v17 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33562A8[v17])(&v18, v15);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection11isSameEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrIbEEEEEEN3__0clEvENUlSC_E_clESC_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3356698;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    off_1E33562A8[v2](&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection11isSameEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrIbEEEEEEN3__0clEvENUlSC_E_clESC_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3356698;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    off_1E33562A8[v3](&v5, (uint64_t)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection11isSameEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrIbEEEEEEN3__0clEvENUlSC_E_clESC_EUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESM_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) & 1) != 0)
  {
    v4 = a2[151];
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 40);
      v5 = (uint64_t *)(v4 + 40);
      v6 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_DWORD *)(v6 - 8);
        v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(_QWORD *)(v6 + 16 * v13);
        if (v14 != v8)
        {
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(_QWORD *)(v6 + 16 * v13);
            ++v15;
            if (v14 == v8)
              goto LABEL_10;
          }
          v13 = *(unsigned int *)(v6 - 4);
        }
LABEL_10:
        if (v13 != *(_DWORD *)(v6 - 4))
        {
          v16 = (_QWORD *)(v6 + 16 * v13);
          v17 = v16[1];
          v16[1] = 0;
          v18 = *v5;
          if (!*v5 || (v18 += 16 * *(unsigned int *)(v18 - 4), (_QWORD *)v18 != v16))
          {
            if ((_QWORD *)v18 != v16)
            {
              *v16 = -1;
              v16[1] = 0;
              ++*(_DWORD *)(*v5 - 16);
              v19 = *v5;
              v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
              *(_DWORD *)(v19 - 12) = v20;
              v21 = *v5;
              if (*v5)
              {
                v22 = 6 * *(_DWORD *)(v21 - 12);
                v23 = *(_DWORD *)(v21 - 4);
                if (v22 < v23 && v23 >= 9)
                  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v5, v23 >> 1);
              }
            }
          }
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a1 + 16);
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
        }
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = v29[1];
          v29[1] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          *v29 = *v16;
          v31 = v6 + 16 * v13;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v29[1] = v32;
          v33 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          if (v16 == a3)
            v14 = v29;
        }
        else
        {
          v18 = v6 + 16 * v13;
          v19 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33566C0;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33566C0;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = a1 + 40;
  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E33566E8;
  v7[1] = v1;
  v7[2] = v2;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 48))(v3, v4, v5, v6, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection13getFileHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E33566E8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection13getFileHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E33566E8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection13getFileHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection13getFileHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED1Ev(v15);
    }
    LOBYTE(v18) = *(_BYTE *)a2;
    v5 = (char)v18;
    v6 = (WTF::StringImpl *)a2[1];
    a2[1] = 0;
    v19 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v20) = v5;
    LOBYTE(v16[0]) = v5;
    v16[1] = v21;
    v17 = 1;
    v21 = 0;
    v8 = v19;
    v19 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    *a2 = 0;
    v16[0] = v10;
    v17 = 0;
  }
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E3356710;
  *(_QWORD *)(v11 + 8) = v2;
  *(_BYTE *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 32) = -1;
  ((void (*)(uint64_t *, uint64_t, _QWORD *))off_1E33563B0[v9])(&v20, v11 + 16, v16);
  *(_DWORD *)(v11 + 32) = v9;
  v20 = v11;
  LOBYTE(v21) = 0;
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v20, &v18);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v17 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33562B8[v17])(&v18, v16);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection13getFileHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3356710;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E33562B8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection13getFileHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3356710;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33562B8[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection13getFileHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEE4callESZ_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((result & 1) != 0)
  {
    v5 = a2[151];
    if (v5)
    {
      result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(&v7, (uint64_t *)(v5 + 48), *(_QWORD *)(a1 + 8));
      v6 = v7;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 16);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3356738;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3356738;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = a1 + 40;
  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E3356760;
  v7[1] = v1;
  v7[2] = v2;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 56))(v3, v4, v5, v6, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection18getDirectoryHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3356760;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection18getDirectoryHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3356760;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection18getDirectoryHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection18getDirectoryHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED1Ev(v15);
    }
    LOBYTE(v18) = *(_BYTE *)a2;
    v5 = (char)v18;
    v6 = (WTF::StringImpl *)a2[1];
    a2[1] = 0;
    v19 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v20) = v5;
    LOBYTE(v16[0]) = v5;
    v16[1] = v21;
    v17 = 1;
    v21 = 0;
    v8 = v19;
    v19 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    *a2 = 0;
    v16[0] = v10;
    v17 = 0;
  }
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E3356788;
  *(_QWORD *)(v11 + 8) = v2;
  *(_BYTE *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 32) = -1;
  ((void (*)(uint64_t *, uint64_t, _QWORD *))off_1E33563B0[v9])(&v20, v11 + 16, v16);
  *(_DWORD *)(v11 + 32) = v9;
  v20 = v11;
  LOBYTE(v21) = 0;
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v20, &v18);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v17 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33562B8[v17])(&v18, v16);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection18getDirectoryHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3356788;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E33562B8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection18getDirectoryHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3356788;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33562B8[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection18getDirectoryHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEE4callESZ_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((result & 1) != 0)
  {
    v5 = a2[151];
    if (v5)
    {
      result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(&v7, (uint64_t *)(v5 + 48), *(_QWORD *)(a1 + 8));
      v6 = v7;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 16);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33567B0;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33567B0;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = a1 + 40;
  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E33567D8;
  v7[1] = v1;
  v7[2] = v2;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 64))(v3, v4, v5, v6, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection11removeEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvEUlOT_E_vJSF_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E33567D8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection11removeEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvEUlOT_E_vJSF_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E33567D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection11removeEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvEUlOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    LOBYTE(v14) = *(_BYTE *)a2;
    v5 = (char)v14;
    v6 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v15 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v16) = v5;
    v8 = v17;
    v17 = 0;
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v8 = 0;
    v5 = 0;
  }
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = &off_1E3356800;
  *(_QWORD *)(v10 + 8) = v2;
  *(_BYTE *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 32) = 0;
  if (v4)
  {
    *(_BYTE *)(v10 + 16) = v5;
    *(_QWORD *)(v10 + 24) = v8;
    *(_BYTE *)(v10 + 32) = 1;
    v8 = 0;
  }
  v16 = v10;
  LOBYTE(v17) = 0;
  v14 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v16, &v14);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v4 && v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v11);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection11removeEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvENUlOT_E_clISE_EEDaSL_EUlRSK_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = &off_1E3356800;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection11removeEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvENUlOT_E_clISE_EEDaSL_EUlRSK_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3356800;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection11removeEntryENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvENUlOT_E_clISE_EEDaSL_EUlRSK_E_vJRNS2_22ScriptExecutionContextEEE4callESS_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((result & 1) != 0)
  {
    v5 = a2[151];
    if (v5)
    {
      result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(&v7, (uint64_t *)(v5 + 72), *(_QWORD *)(a1 + 8));
      v6 = v7;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 16);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *a1 = &off_1E3356828;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return a1;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return a1;
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *(_QWORD *)this = &off_1E3356828;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return WTF::fastFree(this, a2);
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return WTF::fastFree(this, a2);
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v1 = a1[1];
  v2 = a1[2];
  a1[2] = 0;
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3356850;
  v6[1] = v1;
  v6[2] = v2;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 72))(v3, v4, v5, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection7resolveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvEUlOT_E_vJSH_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3356850;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection7resolveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvEUlOT_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3356850;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection7resolveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvEUlOT_E_vJSH_EE4callESH_(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BYTE v10[16];
  int v11;
  uint64_t v12;
  char v13;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v9 = *(_QWORD *)(a1 + 8);
  WTF::CrossThreadCopierBase<false,false,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::copy((WTF::StringImpl *)v10, a2);
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v3 = &off_1E3356878;
  *(_QWORD *)(v3 + 8) = v9;
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 32) = -1;
  v4 = v11;
  if (v11 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3356438[v11])(&v12, v3 + 16, v10);
    *(_DWORD *)(v3 + 32) = v4;
  }
  v12 = v3;
  v13 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v2 + 32))(v2, &v12, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v11 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33561A0[v11])(&v8, v10);
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::copy(WTF::StringImpl *result, char *a2)
{
  WTF::StringImpl *v2;
  int v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v2 = result;
  v3 = *((_DWORD *)a2 + 4);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *a2;
      v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v14 = v5;
      WTF::String::isolatedCopy();
      *(_BYTE *)v2 = v4;
      *((_QWORD *)v2 + 1) = v16;
      *((_DWORD *)v2 + 4) = 1;
      result = v14;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v6);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      v13 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection7resolveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvENUlOT_E_clISG_EEDaSN_EUlRSM_E_vJRNS2_22ScriptExecutionContextEEED1Ev(v13);
    }
  }
  else
  {
    v7 = *(WTF::StringImpl ***)a2;
    v8 = *((_DWORD *)a2 + 2);
    v9 = *((unsigned int *)a2 + 3);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    if ((_DWORD)v9)
    {
      v10 = v7;
      do
      {
        WTF::String::isolatedCopy();
        v12 = v15;
        v15 = 0;
        result = *v10;
        *v10 = v12;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            WTF::StringImpl::destroy(result, v11);
            result = 0;
            v15 = 0;
          }
          else
          {
            *(_DWORD *)result -= 2;
          }
        }
        ++v10;
      }
      while (v10 < &v7[v9]);
    }
    *(_QWORD *)v2 = v7;
    *((_DWORD *)v2 + 2) = v8;
    *((_DWORD *)v2 + 3) = v9;
    *((_DWORD *)v2 + 4) = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection7resolveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvENUlOT_E_clISG_EEDaSN_EUlRSM_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3356878;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E33561A0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection7resolveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvENUlOT_E_clISG_EEDaSN_EUlRSM_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3356878;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33561A0[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection7resolveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_ONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvENUlOT_E_clISG_EEDaSN_EUlRSM_E_vJRNS2_22ScriptExecutionContextEEE4callESU_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((result & 1) != 0)
  {
    v5 = a2[151];
    if (v5)
    {
      result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(&v7, (uint64_t *)(v5 + 56), *(_QWORD *)(a1 + 8));
      v6 = v7;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 16);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *a1 = &off_1E33568A0;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return a1;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return a1;
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *(_QWORD *)this = &off_1E33568A0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return WTF::fastFree(this, a2);
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return WTF::fastFree(this, a2);
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v1 = a1[1];
  v2 = a1[2];
  a1[2] = 0;
  v3 = a1[3];
  v4 = a1[4];
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E33568C8;
  v5[1] = v1;
  v5[2] = v2;
  v7 = v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 80))(v3, v4, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection7getFileENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6StringEEEEEEEN3__0clEvEUlOT_E_vJSD_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E33568C8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection7getFileENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6StringEEEEEEEN3__0clEvEUlOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E33568C8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection7getFileENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6StringEEEEEEEN3__0clEvEUlOT_E_vJSD_EE4callESD_(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BYTE v10[16];
  int v11;
  uint64_t v12;
  char v13;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v9 = *(_QWORD *)(a1 + 8);
  WTF::CrossThreadCopierBase<false,false,WebCore::ExceptionOr<WTF::String>>::copy(a2, (uint64_t)v10);
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v3 = &off_1E33568F0;
  *(_QWORD *)(v3 + 8) = v9;
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 32) = -1;
  v4 = v11;
  if (v11 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3356540[v11])(&v12, v3 + 16, v10);
    *(_DWORD *)(v3 + 32) = v4;
  }
  v12 = v3;
  v13 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v2 + 32))(v2, &v12, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v11 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33562F0[v11])(&v8, v10);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection7getFileENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6StringEEEEEEEN3__0clEvENUlOT_E_clISC_EEDaSJ_EUlRSI_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E33568F0;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E33562F0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection7getFileENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6StringEEEEEEEN3__0clEvENUlOT_E_clISC_EEDaSJ_EUlRSI_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E33568F0;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33562F0[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection7getFileENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6StringEEEEEEEN3__0clEvENUlOT_E_clISC_EEDaSJ_EUlRSI_E_vJRNS2_22ScriptExecutionContextEEE4callESQ_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) & 1) != 0)
  {
    v4 = a2[151];
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 88);
      v5 = (uint64_t *)(v4 + 88);
      v6 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_DWORD *)(v6 - 8);
        v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(_QWORD *)(v6 + 16 * v13);
        if (v14 != v8)
        {
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(_QWORD *)(v6 + 16 * v13);
            ++v15;
            if (v14 == v8)
              goto LABEL_10;
          }
          v13 = *(unsigned int *)(v6 - 4);
        }
LABEL_10:
        if (v13 != *(_DWORD *)(v6 - 4))
        {
          v16 = (_QWORD *)(v6 + 16 * v13);
          v17 = v16[1];
          v16[1] = 0;
          v18 = *v5;
          if (!*v5 || (v18 += 16 * *(unsigned int *)(v18 - 4), (_QWORD *)v18 != v16))
          {
            if ((_QWORD *)v18 != v16)
            {
              *v16 = -1;
              v16[1] = 0;
              ++*(_DWORD *)(*v5 - 16);
              v19 = *v5;
              v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
              *(_DWORD *)(v19 - 12) = v20;
              v21 = *v5;
              if (*v5)
              {
                v22 = 6 * *(_DWORD *)(v21 - 12);
                v23 = *(_DWORD *)(v21 - 4);
                if (v22 < v23 && v23 >= 9)
                  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v5, v23 >> 1);
              }
            }
          }
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a1 + 16);
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
        }
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *a1 = &off_1E3356918;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return a1;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return a1;
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *(_QWORD *)this = &off_1E3356918;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return WTF::fastFree(this, a2);
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return WTF::fastFree(this, a2);
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v1 = a1[1];
  v2 = a1[2];
  a1[2] = 0;
  v3 = a1[3];
  v4 = a1[4];
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E3356940;
  v5[1] = v1;
  v5[2] = v2;
  v7 = v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 88))(v3, v4, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection22createSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_27FileSystemStorageConnection20SyncAccessHandleInfoEEEEEEEN3__0clEvEUlOT_E_vJSE_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3356940;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection22createSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_27FileSystemStorageConnection20SyncAccessHandleInfoEEEEEEEN3__0clEvEUlOT_E_vJSE_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3356940;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection22createSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_27FileSystemStorageConnection20SyncAccessHandleInfoEEEEEEEN3__0clEvEUlOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t result;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v4 = *(_DWORD *)(a2 + 40);
  if (v4)
  {
    if (v4 != 1)
    {
      v19 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection22createSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_27FileSystemStorageConnection20SyncAccessHandleInfoEEEEEEEN3__0clEvENUlOT_E_clISD_EEDaSK_EUlRSJ_E_vJRNS2_22ScriptExecutionContextEEED1Ev(v19);
    }
    LOBYTE(v27) = *(_BYTE *)a2;
    v5 = (char)v27;
    v6 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v28 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v33) = v5;
    LOBYTE(v20) = v5;
    v21 = v34;
    v26 = 1;
    v34 = 0;
    v8 = v28;
    v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = 1;
  }
  else
  {
    v10 = *(WTF::StringImpl **)a2;
    v11 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v31 = 0;
    v32 = *(_QWORD *)(a2 + 32);
    v12 = v32;
    v27 = v10;
    v28 = 0;
    v30 = 0xFFFFFFFFLL;
    v37 = 0;
    v38 = v32;
    v33 = (uint64_t)v10;
    v34 = 0;
    v20 = v10;
    v21 = v11;
    v36 = 0xFFFFFFFFLL;
    v13 = *(_QWORD *)(a2 + 16);
    v29 = v13;
    *(_DWORD *)(a2 + 20) = -1;
    v35 = v13;
    v22 = v13;
    v23 = 0;
    v24 = 0;
    v25 = v12;
    v26 = 0;
    WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v34, (int *)a2);
    WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v28, v14);
    v9 = 0;
  }
  v15 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v15 = &off_1E3356968;
  *(_QWORD *)(v15 + 8) = v2;
  *(_BYTE *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 56) = -1;
  ((void (*)(uint64_t *, uint64_t, WTF::StringImpl **))off_1E3356578[v9])(&v33, v15 + 16, &v20);
  *(_DWORD *)(v15 + 56) = v9;
  v33 = v15;
  LOBYTE(v34) = 0;
  v27 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v33, &v27);
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v33;
  v33 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v26 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3356300[v26])(&v27, &v20);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection22createSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_27FileSystemStorageConnection20SyncAccessHandleInfoEEEEEEEN3__0clEvENUlOT_E_clISD_EEDaSK_EUlRSJ_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3356968;
  v2 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3356300[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 56) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection22createSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_27FileSystemStorageConnection20SyncAccessHandleInfoEEEEEEEN3__0clEvENUlOT_E_clISD_EEDaSK_EUlRSJ_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3356968;
  v3 = *((unsigned int *)this + 14);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3356300[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 14) = -1;
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection22createSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_27FileSystemStorageConnection20SyncAccessHandleInfoEEEEEEEN3__0clEvENUlOT_E_clISD_EEDaSK_EUlRSJ_E_vJRNS2_22ScriptExecutionContextEEE4callESR_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) & 1) != 0)
  {
    v4 = a2[151];
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 64);
      v5 = (uint64_t *)(v4 + 64);
      v6 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_DWORD *)(v6 - 8);
        v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(_QWORD *)(v6 + 16 * v13);
        if (v14 != v8)
        {
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(_QWORD *)(v6 + 16 * v13);
            ++v15;
            if (v14 == v8)
              goto LABEL_10;
          }
          v13 = *(unsigned int *)(v6 - 4);
        }
LABEL_10:
        if (v13 != *(_DWORD *)(v6 - 4))
        {
          v16 = (_QWORD *)(v6 + 16 * v13);
          v17 = v16[1];
          v16[1] = 0;
          v18 = *v5;
          if (!*v5 || (v18 += 16 * *(unsigned int *)(v18 - 4), (_QWORD *)v18 != v16))
          {
            if ((_QWORD *)v18 != v16)
            {
              *v16 = -1;
              v16[1] = 0;
              ++*(_DWORD *)(*v5 - 16);
              v19 = *v5;
              v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
              *(_DWORD *)(v19 - 12) = v20;
              v21 = *v5;
              if (*v5)
              {
                v22 = 6 * *(_DWORD *)(v21 - 12);
                v23 = *(_DWORD *)(v21 - 4);
                if (v22 < v23 && v23 >= 9)
                  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v5, v23 >> 1);
              }
            }
          }
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a1 + 16);
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
        }
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::closeSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3356990;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::closeSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3356990;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::closeSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33569B8;
  v5[1] = v4;
  v7 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v1 + 96))(v1, v2, v3, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::closeSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 8));
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::FileSystemSyncAccessHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (uint64_t *)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v28 = (unsigned int *)v27[1];
          v27[1] = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v8);
            }
          }
          *v27 = *v12;
          v31 = v4 + 16 * v11;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v27[1] = v32;
          v15 = *(unsigned int **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (!v15)
            goto LABEL_27;
          do
          {
            v33 = __ldaxr(v15);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v15));
          if (v34)
            goto LABEL_27;
        }
        else
        {
          v14 = v4 + 16 * v11;
          v15 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (!v15)
            goto LABEL_27;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (v17)
            goto LABEL_27;
        }
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v8);
      }
LABEL_27:
      if (++v11 == v5)
        goto LABEL_30;
    }
  }
  if (v4)
LABEL_30:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::registerSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FileSystemSyncAccessHandle &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33569E0;
  v2 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::registerSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FileSystemSyncAccessHandle &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33569E0;
  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::registerSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FileSystemSyncAccessHandle &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 48);
  v5[0] = *(_OWORD *)(a1 + 32);
  v5[1] = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v1 + 112))(v1, v2, v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::unregisterSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3356A08;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::unregisterSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3356A08;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::unregisterSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *a1 = &off_1E3356A30;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return a1;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return a1;
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  *(_QWORD *)this = &off_1E3356A30;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v16 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return WTF::fastFree(this, a2);
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return WTF::fastFree(this, a2);
LABEL_19:
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      WTF::fastFree((WTF *)v8, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v1 = a1[1];
  v2 = a1[2];
  a1[2] = 0;
  v3 = a1[3];
  v4 = a1[4];
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E3356A58;
  v5[1] = v1;
  v5[2] = v2;
  v7 = v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 136))(v3, v4, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection14getHandleNamesENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvEUlOT_E_vJSH_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3356A58;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection14getHandleNamesENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvEUlOT_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3356A58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection14getHandleNamesENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvEUlOT_E_vJSH_EE4callESH_(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BYTE v10[16];
  int v11;
  uint64_t v12;
  char v13;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v9 = *(_QWORD *)(a1 + 8);
  WTF::CrossThreadCopierBase<false,false,WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::copy((WTF::StringImpl *)v10, a2);
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v3 = &off_1E3356A80;
  *(_QWORD *)(v3 + 8) = v9;
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 32) = -1;
  v4 = v11;
  if (v11 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3356438[v11])(&v12, v3 + 16, v10);
    *(_DWORD *)(v3 + 32) = v4;
  }
  v12 = v3;
  v13 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v2 + 32))(v2, &v12, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v11 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33561A0[v11])(&v8, v10);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection14getHandleNamesENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvENUlOT_E_clISG_EEDaSN_EUlRSM_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3356A80;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E33561A0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection14getHandleNamesENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvENUlOT_E_clISG_EEDaSN_EUlRSM_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3356A80;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33561A0[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection14getHandleNamesENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEN3__0clEvENUlOT_E_clISG_EEDaSN_EUlRSM_E_vJRNS2_22ScriptExecutionContextEEE4callESU_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((result & 1) != 0)
  {
    v5 = a2[151];
    if (v5)
    {
      result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(&v7, (uint64_t *)(v5 + 80), *(_QWORD *)(a1 + 8));
      v6 = v7;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 16);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3356AA8;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3356AA8;
  WebCore::WorkerFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v1 = a1[1];
  v2 = a1[2];
  a1[2] = 0;
  v3 = a1 + 5;
  v4 = a1[3];
  v5 = a1[4];
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3356AD0;
  v6[1] = v1;
  v6[2] = v2;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v4 + 144))(v4, v5, v3, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection9getHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3356AD0;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection9getHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3356AD0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection9getHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvEUlOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection9getHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED1Ev(v15);
    }
    LOBYTE(v18) = *(_BYTE *)a2;
    v5 = (char)v18;
    v6 = (WTF::StringImpl *)a2[1];
    a2[1] = 0;
    v19 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v20) = v5;
    LOBYTE(v16[0]) = v5;
    v16[1] = v21;
    v17 = 1;
    v21 = 0;
    v8 = v19;
    v19 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    *a2 = 0;
    v16[0] = v10;
    v17 = 0;
  }
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E3356AF8;
  *(_QWORD *)(v11 + 8) = v2;
  *(_BYTE *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 32) = -1;
  ((void (*)(uint64_t *, uint64_t, _QWORD *))off_1E33563B0[v9])(&v20, v11 + 16, v16);
  *(_DWORD *)(v11 + 32) = v9;
  v20 = v11;
  LOBYTE(v21) = 0;
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v20, &v18);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v17 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33562B8[v17])(&v18, v16);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection9getHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3356AF8;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E33562B8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection9getHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3356AF8;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33562B8[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection9getHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS_3RefINS2_26FileSystemHandleCloseScopeENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEEEEEN3__0clEvENUlOT_E_clISL_EEDaSS_EUlRSR_E_vJRNS2_22ScriptExecutionContextEEE4callESZ_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((result & 1) != 0)
  {
    v5 = a2[151];
    if (v5)
    {
      result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(&v7, (uint64_t *)(v5 + 48), *(_QWORD *)(a1 + 8));
      v6 = v7;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 16);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3356B20;
  WebCore::WorkerFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3356B20;
  WebCore::WorkerFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v1 = a1[1];
  v2 = a1[2];
  a1[2] = 0;
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1 + 6;
  v6 = a1[5];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E3356B48;
  v7[1] = v1;
  v7[2] = v2;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v3 + 40))(v3, v4, v6, v5, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection4moveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_RKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvEUlOT_E_vJSF_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3356B48;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection4moveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_RKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvEUlOT_E_vJSF_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3356B48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection4moveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_RKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvEUlOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    LOBYTE(v14) = *(_BYTE *)a2;
    v5 = (char)v14;
    v6 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v15 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v16) = v5;
    v8 = v17;
    v17 = 0;
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v8 = 0;
    v5 = 0;
  }
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = &off_1E3356B70;
  *(_QWORD *)(v10 + 8) = v2;
  *(_BYTE *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 32) = 0;
  if (v4)
  {
    *(_BYTE *)(v10 + 16) = v5;
    *(_QWORD *)(v10 + 24) = v8;
    *(_BYTE *)(v10 + 32) = 1;
    v8 = 0;
  }
  v16 = v10;
  LOBYTE(v17) = 0;
  v14 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v16, &v14);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v4 && v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v11);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection4moveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_RKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvENUlOT_E_clISE_EEDaSL_EUlRSK_E_vJRNS2_22ScriptExecutionContextEEED1Ev(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = &off_1E3356B70;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection4moveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_RKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvENUlOT_E_clISE_EEDaSL_EUlRSK_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3356B70;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore33WorkerFileSystemStorageConnection4moveENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEES8_RKNS_6StringEONS_17CompletionHandlerIFvONS2_11ExceptionOrIvEEEEEEN3__0clEvENUlOT_E_clISE_EEDaSL_EUlRSK_E_vJRNS2_22ScriptExecutionContextEEE4callESS_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((result & 1) != 0)
  {
    v5 = a2[151];
    if (v5)
    {
      result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)>,WTF::HashTableTraits>::take(&v7, (uint64_t *)(v5 + 72), *(_QWORD *)(a1 + 8));
      v6 = v7;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 16);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3356B98;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3356B98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerFileSystemStorageConnection::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 40);
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E3356BC0;
  *(_OWORD *)(v5 + 8) = v7;
  v8 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, v2, v3, v4, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore33WorkerFileSystemStorageConnection37requestNewCapacityForSyncAccessHandleENS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS4_INS2_40FileSystemSyncAccessHandleIdentifierTypeES7_yEEyENK3__0clEvEUlT_E_vJONSt3__18optionalIyEEEE4callESH_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = *a2;
  *(_BYTE *)(v3 + 8) = v2;
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
}

void WebCore::GeoNotifier::~GeoNotifier(WebCore::GeoNotifier *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  WebCore::Geolocation *v7;
  WTF::StringImpl *v8;
  bmalloc::api *v9;
  void *v10;

  v3 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *((_QWORD *)this + 6) = off_1E31F7378;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::GeoNotifier *)((char *)this + 48));
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  v7 = (WebCore::Geolocation *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 8) == 1)
    {
      WebCore::Geolocation::~Geolocation(v7);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v7 + 8);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::GeoNotifier::*&)(void),WebCore::GeoNotifier*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::MediaRemoteLibrary(WebCore *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  return qword_1ECE81D78;
}

uint64_t ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote", 2);
  qword_1ECE81D78 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 31;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteGetLocalOrigin(WebCore *this)
{
  if (WebCore::initMediaRemoteMRMediaRemoteGetLocalOrigin(void)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteGetLocalOrigin(void)::once, &__block_literal_global_34_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin((WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteAddAsyncCommandHandlerBlock(uint64_t a1)
{
  if (WebCore::initMediaRemoteMRMediaRemoteAddAsyncCommandHandlerBlock(void({block_pointer})(unsigned int,__CFDictionary const*,void({block_pointer})(__CFArray const*)))::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteAddAsyncCommandHandlerBlock(void({block_pointer})(unsigned int,__CFDictionary const*,void({block_pointer})(__CFArray const*)))::once, &__block_literal_global_36_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteAddAsyncCommandHandlerBlock(a1);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteRemoveCommandHandlerBlock(WebCore *this, void *a2)
{
  if (WebCore::initMediaRemoteMRMediaRemoteRemoveCommandHandlerBlock(void *)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteRemoveCommandHandlerBlock(void *)::once, &__block_literal_global_38_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteRemoveCommandHandlerBlock(this, WebCore::softLinkMediaRemoteMRMediaRemoteRemoveCommandHandlerBlock);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteSetSupportedCommands(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (WebCore::initMediaRemoteMRMediaRemoteSetSupportedCommands(__CFArray const*,void *,NSObject  {objcproto17OS_dispatch_queue}*,void({block_pointer})(MRMediaRemoteError))::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteSetSupportedCommands(__CFArray const*,void *,NSObject  {objcproto17OS_dispatch_queue}*,void({block_pointer})(MRMediaRemoteError))::once, &__block_literal_global_40_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteSetSupportedCommands(a1, a2, a3, a4);
}

BOOL WebCore::canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility(WebCore *this)
{
  _BOOL8 result;
  _QWORD block[4];
  char v3;

  if (byte_1ECE81D71 == 1)
    return _MergedGlobals_131 != 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingVisibility = dlsym((void *)qword_1ECE81D78, "MRMediaRemoteSetNowPlayingVisibility");
  result = WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingVisibility != 0;
  _MergedGlobals_131 = WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingVisibility != 0;
  byte_1ECE81D71 = 1;
  return result;
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteCommandInfoCreate(WebCore *this, const __CFAllocator *a2)
{
  if (WebCore::initMediaRemoteMRMediaRemoteCommandInfoCreate(__CFAllocator const*)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteCommandInfoCreate(__CFAllocator const*)::once, &__block_literal_global_42_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoCreate(this, (const __CFAllocator *)WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoCreate);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetCommand(WebCore *this, void *a2)
{
  if (WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetCommand(void *,unsigned int)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetCommand(void *,unsigned int)::once, &__block_literal_global_44_4);
  return WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetCommand(this, a2, WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetCommand);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetEnabled(WebCore *this, void *a2)
{
  if (WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetEnabled(void *,unsigned char)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetEnabled(void *,unsigned char)::once, &__block_literal_global_46_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetEnabled(this, a2, WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetEnabled);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetOptions(WebCore *this, void *a2, const __CFDictionary *a3)
{
  if (WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetOptions(void *,__CFDictionary const*)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteCommandInfoSetOptions(void *,__CFDictionary const*)::once, &__block_literal_global_48_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetOptions(this, a2, (const __CFDictionary *)WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetOptions);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication(WebCore *this)
{
  if (WebCore::initMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication(unsigned char)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication(unsigned char)::once, &__block_literal_global_50_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication(this, WebCore::softLinkMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingInfo(WebCore *this, const __CFDictionary *a2)
{
  if (WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingInfo(__CFDictionary const*)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingInfo(__CFDictionary const*)::once, &__block_literal_global_52_4);
  return WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfo(this, (const __CFDictionary *)WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfo);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingInfoWithMergePolicy(uint64_t a1, uint64_t a2)
{
  if (WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingInfoWithMergePolicy(__CFDictionary const*,MRMediaRemoteMergePolicy)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingInfoWithMergePolicy(__CFDictionary const*,MRMediaRemoteMergePolicy)::once, &__block_literal_global_54_5);
  return WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfoWithMergePolicy(a1, a2);
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(void *,MRPlaybackState,NSObject  {objcproto17OS_dispatch_queue}*,void({block_pointer})(MRMediaRemoteError))::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(void *,MRPlaybackState,NSObject  {objcproto17OS_dispatch_queue}*,void({block_pointer})(MRMediaRemoteError))::once, &__block_literal_global_56_4);
  return WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(a1, a2, a3, a4);
}

BOOL WebCore::canLoad_MediaRemote_MRMediaRemoteSetParentApplication(WebCore *this)
{
  _BOOL8 result;
  _QWORD block[4];
  char v3;

  if (byte_1ECE81D73 == 1)
    return byte_1ECE81D72 != 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  WebCore::softLinkMediaRemoteMRMediaRemoteSetParentApplication = dlsym((void *)qword_1ECE81D78, "MRMediaRemoteSetParentApplication");
  result = WebCore::softLinkMediaRemoteMRMediaRemoteSetParentApplication != 0;
  byte_1ECE81D72 = WebCore::softLinkMediaRemoteMRMediaRemoteSetParentApplication != 0;
  byte_1ECE81D73 = 1;
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoTitle(WebCore *this)
{
  if (qword_1ECE81D90 != -1)
    dispatch_once(&qword_1ECE81D90, &__block_literal_global_44);
  return qword_1ECE81D88;
}

uint64_t ___ZN7WebCore49get_MediaRemote_kMRMediaRemoteNowPlayingInfoTitleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoTitle");
  if (result)
  {
    qword_1ECE81D88 = *(_QWORD *)result;
  }
  else
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtist(WebCore *this)
{
  if (qword_1ECE81DA0 != -1)
    dispatch_once(&qword_1ECE81DA0, &__block_literal_global_6_14);
  return qword_1ECE81D98;
}

uint64_t ___ZN7WebCore50get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtistEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoArtist");
  if (result)
  {
    qword_1ECE81D98 = *(_QWORD *)result;
  }
  else
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoAlbum(WebCore *this)
{
  if (qword_1ECE81DB0 != -1)
    dispatch_once(&qword_1ECE81DB0, &__block_literal_global_8_11);
  return qword_1ECE81DA8;
}

uint64_t ___ZN7WebCore49get_MediaRemote_kMRMediaRemoteNowPlayingInfoAlbumEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoAlbum");
  if (result)
  {
    qword_1ECE81DA8 = *(_QWORD *)result;
  }
  else
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkData(WebCore *this)
{
  if (qword_1ECE81DC0 != -1)
    dispatch_once(&qword_1ECE81DC0, &__block_literal_global_10_11);
  return qword_1ECE81DB8;
}

uint64_t ___ZN7WebCore55get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoArtworkData");
  if (result)
  {
    qword_1ECE81DB8 = *(_QWORD *)result;
  }
  else
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataHeight(WebCore *this)
{
  if (qword_1ECE81DD0 != -1)
    dispatch_once(&qword_1ECE81DD0, &__block_literal_global_12_13);
  return qword_1ECE81DC8;
}

uint64_t ___ZN7WebCore61get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataHeightEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoArtworkDataHeight");
  if (result)
  {
    qword_1ECE81DC8 = *(_QWORD *)result;
  }
  else
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataWidth(WebCore *this)
{
  if (qword_1ECE81DE0 != -1)
    dispatch_once(&qword_1ECE81DE0, &__block_literal_global_14_10);
  return qword_1ECE81DD8;
}

uint64_t ___ZN7WebCore60get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataWidthEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoArtworkDataWidth");
  if (result)
  {
    qword_1ECE81DD8 = *(_QWORD *)result;
  }
  else
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkMIMEType(WebCore *this)
{
  if (qword_1ECE81DF0 != -1)
    dispatch_once(&qword_1ECE81DF0, &__block_literal_global_16_9);
  return qword_1ECE81DE8;
}

uint64_t ___ZN7WebCore59get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkMIMETypeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoArtworkMIMEType");
  if (result)
  {
    qword_1ECE81DE8 = *(_QWORD *)result;
  }
  else
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkIdentifier(WebCore *this)
{
  if (qword_1ECE81E00 != -1)
    dispatch_once(&qword_1ECE81E00, &__block_literal_global_18_9);
  return qword_1ECE81DF8;
}

uint64_t ___ZN7WebCore61get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkIdentifierEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoArtworkIdentifier");
  if (result)
  {
    qword_1ECE81DF8 = *(_QWORD *)result;
  }
  else
  {
    result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoDuration(WebCore *this)
{
  if (qword_1ECE81E10 != -1)
    dispatch_once(&qword_1ECE81E10, &__block_literal_global_20_6);
  return qword_1ECE81E08;
}

uint64_t ___ZN7WebCore52get_MediaRemote_kMRMediaRemoteNowPlayingInfoDurationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoDuration");
  if (result)
  {
    qword_1ECE81E08 = *(_QWORD *)result;
  }
  else
  {
    result = 55;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoElapsedTime(WebCore *this)
{
  if (qword_1ECE81E20 != -1)
    dispatch_once(&qword_1ECE81E20, &__block_literal_global_22_5);
  return qword_1ECE81E18;
}

uint64_t ___ZN7WebCore55get_MediaRemote_kMRMediaRemoteNowPlayingInfoElapsedTimeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoElapsedTime");
  if (result)
  {
    qword_1ECE81E18 = *(_QWORD *)result;
  }
  else
  {
    result = 56;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoPlaybackRate(WebCore *this)
{
  if (qword_1ECE81E30 != -1)
    dispatch_once(&qword_1ECE81E30, &__block_literal_global_24_6);
  return qword_1ECE81E28;
}

uint64_t ___ZN7WebCore56get_MediaRemote_kMRMediaRemoteNowPlayingInfoPlaybackRateEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoPlaybackRate");
  if (result)
  {
    qword_1ECE81E28 = *(_QWORD *)result;
  }
  else
  {
    result = 57;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteOptionPlaybackPosition(WebCore *this)
{
  if (qword_1ECE81E40 != -1)
    dispatch_once(&qword_1ECE81E40, &__block_literal_global_26_5);
  return qword_1ECE81E38;
}

uint64_t ___ZN7WebCore52get_MediaRemote_kMRMediaRemoteOptionPlaybackPositionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteOptionPlaybackPosition");
  if (result)
  {
    qword_1ECE81E38 = *(_QWORD *)result;
  }
  else
  {
    result = 58;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoUniqueIdentifier(WebCore *this)
{
  if (qword_1ECE81E50 != -1)
    dispatch_once(&qword_1ECE81E50, &__block_literal_global_28_4);
  return qword_1ECE81E48;
}

uint64_t ___ZN7WebCore60get_MediaRemote_kMRMediaRemoteNowPlayingInfoUniqueIdentifierEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteNowPlayingInfoUniqueIdentifier");
  if (result)
  {
    qword_1ECE81E48 = *(_QWORD *)result;
  }
  else
  {
    result = 59;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::get_MediaRemote_kMRMediaRemoteOptionSkipInterval(WebCore *this)
{
  if (qword_1ECE81E60 != -1)
    dispatch_once(&qword_1ECE81E60, &__block_literal_global_30_6);
  return qword_1ECE81E58;
}

uint64_t ___ZN7WebCore48get_MediaRemote_kMRMediaRemoteOptionSkipIntervalEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "kMRMediaRemoteOptionSkipInterval");
  if (result)
  {
    qword_1ECE81E58 = *(_QWORD *)result;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initMediaRemoteMRMediaRemoteCopyPickableRoutes(WebCore *this)
{
  if (WebCore::initMediaRemoteMRMediaRemoteCopyPickableRoutes(void)::once != -1)
    dispatch_once(&WebCore::initMediaRemoteMRMediaRemoteCopyPickableRoutes(void)::once, &__block_literal_global_58_2);
  return WebCore::softLinkMediaRemoteMRMediaRemoteCopyPickableRoutes((WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteCopyPickableRoutes);
}

uint64_t ___ZN7WebCoreL42initMediaRemoteMRMediaRemoteGetLocalOriginEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteGetLocalOrigin");
  WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin = (uint64_t (*)(WebCore *__hidden))result;
  if (!result)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL55initMediaRemoteMRMediaRemoteAddAsyncCommandHandlerBlockEU13block_pointerFvjPK14__CFDictionaryU13block_pointerFvPK9__CFArrayEE_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteAddAsyncCommandHandlerBlock");
  WebCore::softLinkMediaRemoteMRMediaRemoteAddAsyncCommandHandlerBlock = (uint64_t (*)())result;
  if (!result)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL53initMediaRemoteMRMediaRemoteRemoveCommandHandlerBlockEPv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteRemoveCommandHandlerBlock");
  WebCore::softLinkMediaRemoteMRMediaRemoteRemoveCommandHandlerBlock = (uint64_t (*)(WebCore *__hidden, void *))result;
  if (!result)
  {
    result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL48initMediaRemoteMRMediaRemoteSetSupportedCommandsEPK9__CFArrayPvPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFv18MRMediaRemoteErrorE_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteSetSupportedCommands");
  WebCore::softLinkMediaRemoteMRMediaRemoteSetSupportedCommands = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL45initMediaRemoteMRMediaRemoteCommandInfoCreateEPK13__CFAllocator_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteCommandInfoCreate");
  WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoCreate = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *))result;
  if (!result)
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL49initMediaRemoteMRMediaRemoteCommandInfoSetCommandEPvj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteCommandInfoSetCommand");
  WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetCommand = (uint64_t (*)(WebCore *__hidden, void *, unsigned int))result;
  if (!result)
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL49initMediaRemoteMRMediaRemoteCommandInfoSetEnabledEPvh_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteCommandInfoSetEnabled");
  WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetEnabled = (uint64_t (*)(WebCore *__hidden, void *, unsigned __int8))result;
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL49initMediaRemoteMRMediaRemoteCommandInfoSetOptionsEPvPK14__CFDictionary_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteCommandInfoSetOptions");
  WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetOptions = (uint64_t (*)(WebCore *__hidden, void *, const __CFDictionary *))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL57initMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplicationEh_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteSetCanBeNowPlayingApplication");
  WebCore::softLinkMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication = (uint64_t (*)(WebCore *__hidden, unsigned __int8))result;
  if (!result)
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL45initMediaRemoteMRMediaRemoteSetNowPlayingInfoEPK14__CFDictionary_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteSetNowPlayingInfo");
  WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfo = (uint64_t (*)(WebCore *__hidden, const __CFDictionary *))result;
  if (!result)
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL60initMediaRemoteMRMediaRemoteSetNowPlayingInfoWithMergePolicyEPK14__CFDictionary24MRMediaRemoteMergePolicy_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteSetNowPlayingInfoWithMergePolicy");
  WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfoWithMergePolicy[0] = (uint64_t (*)())result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL74initMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOriginEPv15MRPlaybackStatePU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFv18MRMediaRemoteErrorE_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin");
  WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL46initMediaRemoteMRMediaRemoteCopyPickableRoutesEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore18MediaRemoteLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE81D80 != -1)
    dispatch_once(&qword_1ECE81D80, block);
  result = (uint64_t)dlsym((void *)qword_1ECE81D78, "MRMediaRemoteCopyPickableRoutes");
  WebCore::softLinkMediaRemoteMRMediaRemoteCopyPickableRoutes = (uint64_t (*)(WebCore *__hidden))result;
  if (!result)
  {
    result = 64;
    __break(0xC471u);
  }
  return result;
}

void *WebCore::Geolocation::bisoHeap(WebCore::Geolocation *this)
{
  return &WebCore::Geolocation::bisoHeap(void)::heap;
}

uint64_t WebCore::Geolocation::operator new(uint64_t this)
{
  if (this == 192)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t *WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *result;
  if (!*result)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = *a2;
  v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = (v7 ^ HIWORD(v7)) & v4;
  v9 = *(_DWORD *)(v3 + 16 * v8);
  if (v9 != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_DWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == v5)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = 0;
    v12 = v3 + 16 * v8;
    v13 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    *a3 = v13;
    if (!*result || (v11 = *result + 16 * *(unsigned int *)(*result - 4), v11 != v12))
    {
      if (v11 != v12)
      {
        v14 = -1;
        *(_DWORD *)v12 = -1;
        *(_QWORD *)(v12 + 8) = 0;
        ++*(_DWORD *)(*result - 16);
        v15 = *result;
        if (*result)
          v14 = *(_DWORD *)(v15 - 12) - 1;
        *(_DWORD *)(v15 - 12) = v14;
        v16 = *result;
        if (*result)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(result, v18 >> 1);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::GeoNotifier *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v19;
  void *v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != *(_QWORD *)a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == *(_QWORD *)a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = *(WebCore::GeoNotifier **)(v2 + 16 * v8);
  *(_QWORD *)(v2 + 16 * v8) = -1;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::GeoNotifier::~GeoNotifier(v12, a2);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash(a1, v17 >> 1);
  }
  return 1;
}

uint64_t WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::take<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  WebCore::GeoNotifier *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v21;
  void *v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(WTF::StringImpl **)(v2 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(WTF::StringImpl **)(v2 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v13 = v2 + 16 * v8;
  v11 = *(unsigned int *)(v13 + 8);
  v14 = *(WebCore::GeoNotifier **)v13;
  *(_QWORD *)v13 = -1;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::GeoNotifier::~GeoNotifier(v14, a2);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash(a1, v19 >> 1);
  }
  return v11;
}

uint64_t WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  WebCore::GeoNotifier *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *(_DWORD *)a2;
  v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = (v7 ^ HIWORD(v7)) & v4;
  v9 = *(_DWORD *)(v2 + 16 * v8);
  if (v9 != *(_DWORD *)a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_DWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == v5)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = v2 + 16 * v8;
  *(_DWORD *)v12 = -1;
  v13 = *(WebCore::GeoNotifier **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::GeoNotifier::~GeoNotifier(v13, a2);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v19 = 6 * *(_DWORD *)(v16 - 12);
    v20 = *(_DWORD *)(v16 - 4);
    if (v19 < v20 && v20 >= 9)
      WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, v20 >> 1);
  }
  return 1;
}

uint64_t WebCore::Geolocation::Watchers::getNotifiersVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v11[5];
  _QWORD v12[2];

  v4 = *a1;
  v5 = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::begin((_DWORD *)*a1);
  if (v4)
  {
    v8 = *(unsigned int *)(v4 - 4);
    v7 = (uint64_t *)(v4 + 16 * v8);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v11[0] = a1;
  v11[1] = v5;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = (uint64_t *)(v4 + 16 * v8);
  v12[0] = 0;
  v12[1] = 0;
  WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::SizedIteratorRange<WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>,int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>>(WTF::SizedIteratorRange<WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>,int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>> const&)::{lambda(WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>,int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>> const&,void>::map((uint64_t)v12, v11);
  WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, v12);
  return WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>::destruct(*(WebCore::GeoNotifier **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v4));
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

_DWORD *WebCore::Geolocation::resumeTimerFired(_DWORD *this)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::MonotonicTime *v13;
  unint64_t v14;
  WTF::MonotonicTime *v15;
  WTF::MonotonicTime *v16;
  WTF::MonotonicTime *v17;
  WTF::MonotonicTime *v18;
  WTF::MonotonicTime *v19;
  uint64_t v20;
  double v21;
  double v22;
  WTF::MonotonicTime *NotifiersVector;
  void *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  _BOOL8 v31;
  const WTF::String *v32;
  WebCore::Geolocation *v33;
  uint64_t *v34;
  uint64_t v35;

  v1 = this;
  *((_BYTE *)this + 112) = 0;
  if (*((_BYTE *)this + 113))
  {
    this = (_DWORD *)WebCore::Geolocation::resetAllGeolocationPermission((uint64_t)this);
    *((_BYTE *)v1 + 113) = 0;
  }
  v2 = *((_QWORD *)v1 + 7);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v13 = (WTF::MonotonicTime *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*((_QWORD **)v1 + 7));
    v16 = v15;
  }
  else
  {
    v3 = *((_QWORD *)v1 + 8);
    if (!v3 || !*(_DWORD *)(v3 - 12))
      goto LABEL_5;
    v13 = (WTF::MonotonicTime *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*((_QWORD **)v1 + 7));
    v16 = v18;
    if (!v2)
    {
      v17 = 0;
      goto LABEL_33;
    }
  }
  v17 = (WTF::MonotonicTime *)(v2 + 8 * *(unsigned int *)(v2 - 4));
LABEL_33:
  while (v13 != v17)
  {
    v19 = (WTF::MonotonicTime *)((char *)v13 + 8);
    v20 = *(_QWORD *)v13 + 48;
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)v13 + 36);
    v21 = (double)v14 * 0.001;
    *(_QWORD *)(*(_QWORD *)v13 + 72) = 0;
    WTF::MonotonicTime::now(v13);
    WebCore::TimerBase::setNextFireTime(v20, v21 + v22);
    v13 = v16;
    if (v19 != v16)
    {
      v13 = v19;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 = (WTF::MonotonicTime *)((char *)v13 + 8);
        if (v13 == v16)
        {
          v13 = v16;
          break;
        }
      }
    }
  }
  v34 = 0;
  v35 = 0;
  NotifiersVector = (WTF::MonotonicTime *)WebCore::Geolocation::Watchers::getNotifiersVector((uint64_t *)v1 + 8, (uint64_t)&v34);
  if (HIDWORD(v35))
  {
    v26 = v34;
    v27 = 8 * HIDWORD(v35);
    do
    {
      v28 = *v26++;
      LODWORD(v25) = *(_DWORD *)(v28 + 36);
      v29 = (double)v25 * 0.001;
      *(_QWORD *)(v28 + 72) = 0;
      WTF::MonotonicTime::now(NotifiersVector);
      NotifiersVector = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v28 + 48, v29 + v30);
      v27 -= 8;
    }
    while (v27);
  }
  this = (_DWORD *)WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v24);
LABEL_5:
  v4 = v1[24];
  if ((v4 & 0xFFFFFFFE) == 2)
  {
    v5 = *((_QWORD *)v1 + 10);
    if (v5 && *(_DWORD *)(v5 - 12))
    {
      v31 = v4 == 2;
      v32 = (const WTF::String *)(v1 + 26);
      v33 = (WebCore::Geolocation *)v1;
      return WebCore::Geolocation::setIsAllowed(v33, (WTF::StringImpl *)v31, v32);
    }
    if (v4 == 3
      && ((v6 = *((_QWORD *)v1 + 7)) != 0 && *(_DWORD *)(v6 - 12)
       || (v7 = *((_QWORD *)v1 + 8)) != 0 && *(_DWORD *)(v7 - 12)))
    {
      v34 = 0;
      v32 = (const WTF::String *)&v34;
      v33 = (WebCore::Geolocation *)v1;
      v31 = 0;
      return WebCore::Geolocation::setIsAllowed(v33, (WTF::StringImpl *)v31, v32);
    }
  }
  if (*((_BYTE *)v1 + 114))
  {
    this = WebCore::Geolocation::positionChanged((WebCore::Geolocation *)v1);
    *((_BYTE *)v1 + 114) = 0;
  }
  v8 = (WTF *)*((_QWORD *)v1 + 15);
  if (v8)
  {
    *((_QWORD *)v1 + 15) = 0;
    this = (_DWORD *)WebCore::Geolocation::handleError((uint64_t *)v1, (uint64_t)v8);
    if (*(_DWORD *)v8 == 1)
    {
      v11 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      this = (_DWORD *)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v8;
    }
    v10 = (WTF *)*((_QWORD *)v1 + 15);
    *((_QWORD *)v1 + 15) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v12 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v9);
          else
            *(_DWORD *)v12 -= 2;
        }
        return (_DWORD *)WTF::fastFree(v10, v9);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  return this;
}

void WebCore::Geolocation::~Geolocation(WebCore::Geolocation *this)
{
  WTF::StringImpl *v2;
  WebCore::GeoNotifier **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF **v7;
  WebCore::GeoNotifier **v8;
  WebCore::GeoNotifier **v9;
  uint64_t v10;
  WebCore::GeoNotifier **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;

  WebCore::Geolocation::revokeAuthorizationTokenIfNecessary((uint64_t *)this);
  v3 = (WebCore::GeoNotifier **)*((_QWORD *)this + 23);
  if (v3)
    WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::deallocateTable(v3, v2);
  WebCore::Timer::~Timer((WebCore::Geolocation *)((char *)this + 128));
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
    WTF::RefCounted<WebCore::GeolocationPositionError>::deref(v5, v4);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF **)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    WTF::RefCounted<WebCore::GeolocationPosition>::deref(v7, v4);
  v8 = (WebCore::GeoNotifier **)*((_QWORD *)this + 10);
  if (v8)
    WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::deallocateTable(v8, v4);
  v9 = (WebCore::GeoNotifier **)*((_QWORD *)this + 9);
  if (v9)
    WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::deallocateTable(v9, v4);
  v10 = *((_QWORD *)this + 8);
  if (v10)
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(v10, v4);
  v11 = (WebCore::GeoNotifier **)*((_QWORD *)this + 7);
  if (v11)
    WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::deallocateTable(v11, v4);
  v12 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v4);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v4);
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v15);
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::Geolocation::~Geolocation(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t *WebCore::Geolocation::revokeAuthorizationTokenIfNecessary(uint64_t *this)
{
  WTF::StringImpl *v1;
  const char **v2;
  const char *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7[2];

  v1 = (WTF::StringImpl *)(this + 13);
  if (this[13])
  {
    this = (uint64_t *)WebCore::Geolocation::page((WebCore::Geolocation *)this);
    if (this)
    {
      v7[0] = (WTF::StringImpl *)"GeolocationController";
      v7[1] = (WTF::StringImpl *)22;
      v2 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(this + 1, (const char **)v7);
      if (v2)
        v3 = v2[2];
      else
        v3 = 0;
      v6 = 0;
      std::exchange[abi:sn180100]<WTF::String,WTF::String>(v7, v1, (uint64_t *)&v6);
      (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v3 + 4) + 24))(*((_QWORD *)v3 + 4), v7);
      v5 = v7[0];
      v7[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      this = (uint64_t *)v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          return (uint64_t *)WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::Geolocation::page(WebCore::Geolocation *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = WebCore::Geolocation::document(this);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  v3 = *(_QWORD *)(v1 + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 24)) != 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  if (v2)
  {
    *(_DWORD *)(v1 + 24) = v2;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v6;
}

uint64_t WebCore::Geolocation::document(WebCore::Geolocation *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
    return v2 - 288;
  result = 105;
  __break(0xC471u);
  return result;
}

WebCore::GeoNotifier ***WebCore::Geolocation::suspend(WebCore::GeoNotifier ***result, int a2)
{
  WebCore::GeoNotifier ***v2;
  WebCore::GeoNotifier **v3;
  WebCore::GeoNotifier **v4;

  v2 = result;
  if (a2 == 2)
  {
    result = (WebCore::GeoNotifier ***)WebCore::Geolocation::stop(result);
    *((_BYTE *)v2 + 113) = 1;
  }
  v3 = v2[7];
  if (v3 && *((_DWORD *)v3 - 3) || (v4 = v2[8]) != 0 && *((_DWORD *)v4 - 3))
    result = (WebCore::GeoNotifier ***)WebCore::Geolocation::stopTimers((WebCore::Geolocation *)v2);
  *((_BYTE *)v2 + 112) = 1;
  if (((unint64_t)v2[20] & 0xFFFFFFFFFFFFLL) != 0)
    return (WebCore::GeoNotifier ***)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 16));
  return result;
}

WebCore::GeoNotifier **WebCore::Geolocation::stop(WebCore::GeoNotifier ***this)
{
  uint64_t v2;
  WebCore::Page *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WebCore::GeoNotifier **result;
  const char **v7;
  const char *v8;
  const char *v9[2];

  v2 = WebCore::Geolocation::page((WebCore::Geolocation *)this);
  v3 = (WebCore::Page *)v2;
  if (v2)
  {
    ++*(_DWORD *)v2;
    if (*((_DWORD *)this + 24) == 1)
    {
      v9[0] = "GeolocationController";
      v9[1] = (const char *)22;
      v7 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v2 + 8), v9);
      v8 = v7 ? v7[2] : 0;
      if ((WTF::HashSet<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>((uint64_t *)v8 + 22, (uint64_t)this) & 1) == 0)(*(void (**)(_QWORD, WebCore::GeoNotifier ***))(**((_QWORD **)v8 + 4) + 56))(*((_QWORD *)v8 + 4), this);
    }
  }
  *((_DWORD *)this + 24) = 0;
  WebCore::Geolocation::revokeAuthorizationTokenIfNecessary((uint64_t *)this);
  WebCore::Geolocation::cancelAllRequests((WebCore::Geolocation *)this);
  WebCore::Geolocation::stopUpdating((WebCore::Geolocation *)this);
  *((_BYTE *)this + 114) = 0;
  v5 = this[15];
  this[15] = 0;
  if (v5)
    WTF::RefCounted<WebCore::GeolocationPositionError>::deref(v5, v4);
  result = this[10];
  if (result)
  {
    this[10] = 0;
    result = (WebCore::GeoNotifier **)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::deallocateTable(result, v4);
  }
  if (v3)
    return (WebCore::GeoNotifier **)WTF::RefCounted<WebCore::Page>::deref(v3);
  return result;
}

uint64_t WebCore::Geolocation::stopTimers(WebCore::Geolocation *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&,void>::map(&v9, (_QWORD **)this + 7);
  if (HIDWORD(v10))
  {
    v3 = v9;
    v4 = 8 * HIDWORD(v10);
    do
    {
      if ((*(_QWORD *)(*(_QWORD *)v3 + 80) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(*(_QWORD *)v3 + 48));
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v2);
  v9 = 0;
  v10 = 0;
  WebCore::Geolocation::Watchers::getNotifiersVector((uint64_t *)this + 8, (uint64_t)&v9);
  if (HIDWORD(v10))
  {
    v6 = v9;
    v7 = 8 * HIDWORD(v10);
    do
    {
      if ((*(_QWORD *)(*(_QWORD *)v6 + 80) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(*(_QWORD *)v6 + 48));
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v5);
}

double WebCore::Geolocation::resume(WebCore::Geolocation *this)
{
  char *v1;
  double v2;
  double result;

  if ((*((_QWORD *)this + 20) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 20) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 128;
    *((_QWORD *)this + 19) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

uint64_t WebCore::Geolocation::resetAllGeolocationPermission(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;
  const char **v3;
  const char *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WebCore::GeoNotifier **v7;
  WebCore::GeoNotifier **v8;
  WebCore::GeoNotifier **v9;
  WebCore::GeoNotifier **v10;
  WebCore::GeoNotifier **v11;
  WebCore::GeoNotifier *v12;
  void *v13;
  WebCore::GeoNotifier **v14;
  uint64_t v15;
  WebCore::GeoNotifier *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  WebCore::GeoNotifier **v20;
  uint64_t v21;

  v1 = this;
  if (*(_BYTE *)(this + 112))
  {
    *(_BYTE *)(this + 113) = 1;
  }
  else if (*(_DWORD *)(this + 96) == 1)
  {
    this = WebCore::Geolocation::page((WebCore::Geolocation *)this);
    if (this)
    {
      v2 = (_DWORD *)this;
      ++*(_DWORD *)this;
      v20 = (WebCore::GeoNotifier **)"GeolocationController";
      v21 = 22;
      v3 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(this + 8), (const char **)&v20);
      if (v3)
        v4 = v3[2];
      else
        v4 = 0;
      this = WTF::HashSet<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>((uint64_t *)v4 + 22, v1);
      if ((this & 1) == 0)
        this = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v4 + 4) + 56))(*((_QWORD *)v4 + 4), v1);
      if (*v2 == 1)
      {
        WebCore::Page::~Page((uint64_t)v2);
        return WTF::fastFree(v17, v18);
      }
      else
      {
        --*v2;
      }
    }
  }
  else
  {
    WebCore::Geolocation::stopUpdating((WebCore::Geolocation *)this);
    *(_DWORD *)(v1 + 96) = 0;
    WebCore::Geolocation::revokeAuthorizationTokenIfNecessary((uint64_t *)v1);
    *(_BYTE *)(v1 + 114) = 0;
    v6 = *(WTF **)(v1 + 120);
    *(_QWORD *)(v1 + 120) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        v19 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
        *((_QWORD *)v6 + 1) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v5);
          else
            *(_DWORD *)v19 -= 2;
        }
        WTF::fastFree(v6, v5);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
    WebCore::Geolocation::stopTimers((WebCore::Geolocation *)v1);
    v7 = *(WebCore::GeoNotifier ***)(v1 + 56);
    v8 = (WebCore::GeoNotifier **)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v7);
    v9 = v8;
    v11 = v10;
    if (v7)
      v7 += *((unsigned int *)v7 - 1);
    if (v7 != v8)
    {
      do
      {
        v12 = *v9++;
        WebCore::Geolocation::startRequest((WebCore::Geolocation *)v1, v12);
        while (v9 != v11)
        {
          if ((unint64_t)*v9 + 1 > 1)
            goto LABEL_22;
          ++v9;
        }
        v9 = v11;
LABEL_22:
        ;
      }
      while (v9 != v7);
    }
    v20 = 0;
    v21 = 0;
    WebCore::Geolocation::Watchers::getNotifiersVector((uint64_t *)(v1 + 64), (uint64_t)&v20);
    if (HIDWORD(v21))
    {
      v14 = v20;
      v15 = 8 * HIDWORD(v21);
      do
      {
        v16 = *v14++;
        WebCore::Geolocation::startRequest((WebCore::Geolocation *)v1, v16);
        v15 -= 8;
      }
      while (v15);
    }
    return WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v13);
  }
  return this;
}

_DWORD *WebCore::Geolocation::setIsAllowed(WebCore::Geolocation *this, WTF::StringImpl *a2, const WTF::String *a3)
{
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WebCore::GeoNotifier **v8;
  _DWORD *Position;
  uint64_t v10;
  void *v11;
  int v12;
  WTF *v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  WTF **v19;
  WebCore::GeoNotifier **v20;
  WTF *v21;
  _DWORD *result;
  WTF::StringImpl *v23;
  WTF *v24;
  WebCore::GeoNotifier **v25;
  WebCore::GeoNotifier **v26;
  WebCore::GeoNotifier **v27;
  WebCore::GeoNotifier **v28;
  WebCore::GeoNotifier *v29;
  uint64_t v30;
  const char **v31;
  WTF::MonotonicTime *v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WebCore::GeoNotifier **v42;
  WebCore::GeoNotifier *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  WebCore::GeoNotifier **v47;
  WebCore::GeoNotifier *v48;
  WTF *v49;
  void *v50;
  WTF *v51[2];

  v4 = (_DWORD *)((char *)this + 32);
  ++*((_DWORD *)this + 8);
  if ((_DWORD)a2)
    v5 = 2;
  else
    v5 = 3;
  *((_DWORD *)this + 24) = v5;
  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v6 += 2;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*((_BYTE *)this + 112))
    return WTF::RefCounted<WebCore::Geolocation>::deref(v4);
  v8 = (WebCore::GeoNotifier **)*((_QWORD *)this + 10);
  if (!v8 || !*((_DWORD *)v8 - 3))
  {
    if (*((_DWORD *)this + 24) == 2)
    {
      Position = (_DWORD *)WebCore::Geolocation::lastPosition((WTF **)this);
      if (!Position)
      {
        WebCore::Geolocation::makeCachedPositionCallbacks(this);
        return WTF::RefCounted<WebCore::Geolocation>::deref(v4);
      }
      v10 = (uint64_t)Position;
      ++*Position;
      WebCore::Geolocation::makeSuccessCallbacks(this, (uint64_t)Position);
      v12 = *(_DWORD *)v10 - 1;
      if (*(_DWORD *)v10 == 1)
      {
        v13 = *(WTF **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (!v13)
        {
LABEL_36:
          v24 = (WTF *)v10;
LABEL_37:
          WTF::fastFree(v24, v11);
          return WTF::RefCounted<WebCore::Geolocation>::deref(v4);
        }
        v14 = *(_DWORD *)v13 - 1;
        if (*(_DWORD *)v13 == 1)
        {
          WTF::fastFree(v13, v11);
          goto LABEL_36;
        }
LABEL_35:
        *(_DWORD *)v13 = v14;
        goto LABEL_36;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = v51[0];
      v16 = WTF::fastMalloc((WTF *)0x18);
      v10 = v16;
      *(_QWORD *)v16 = 0x100000001;
      if (v15)
      {
        v18 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 2;
        *(_QWORD *)(v16 + 8) = v15;
        v19 = (WTF **)(v16 + 8);
        *(_BYTE *)(v16 + 16) = 0;
        if (v18)
          *(_DWORD *)v15 = v18;
        else
          WTF::StringImpl::destroy(v15, v17);
      }
      else
      {
        *(_QWORD *)(v16 + 8) = 0;
        v19 = (WTF **)(v16 + 8);
      }
      *(_BYTE *)(v10 + 16) = 1;
      WebCore::Geolocation::handleError((uint64_t *)this, v10);
      v20 = (WebCore::GeoNotifier **)*((_QWORD *)this + 23);
      if (v20)
      {
        *((_QWORD *)this + 23) = 0;
        v41 = *((unsigned int *)v20 - 1);
        if ((_DWORD)v41)
        {
          v42 = v20;
          do
          {
            v43 = *v42;
            if (*v42 != (WebCore::GeoNotifier *)-1)
            {
              *v42 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 1)
                {
                  WebCore::GeoNotifier::~GeoNotifier(v43, (WTF::StringImpl *)v11);
                  WTF::fastFree(v44, v45);
                }
                else
                {
                  --*(_DWORD *)v43;
                }
              }
            }
            ++v42;
            --v41;
          }
          while (v41);
        }
        WTF::fastFree((WTF *)(v20 - 2), v11);
      }
      *((_BYTE *)this + 114) = 0;
      v21 = (WTF *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
        {
          v23 = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)v23 -= 2;
          }
          WTF::fastFree(v21, v11);
        }
        else
        {
          --*(_DWORD *)v21;
        }
      }
      v12 = *(_DWORD *)v10 - 1;
      if (*(_DWORD *)v10 == 1)
      {
        v13 = *v19;
        *v19 = 0;
        if (!v13)
          goto LABEL_36;
        v14 = *(_DWORD *)v13 - 2;
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }
    *(_DWORD *)v10 = v12;
    return WTF::RefCounted<WebCore::Geolocation>::deref(v4);
  }
  v25 = (WebCore::GeoNotifier **)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*((_QWORD **)this + 10));
  v26 = &v8[*((unsigned int *)v8 - 1)];
  if (v26 == v25)
    goto LABEL_81;
  v27 = v25;
  v28 = (WebCore::GeoNotifier **)v11;
  do
  {
    v29 = *v27;
    if (*((_DWORD *)this + 24) != 2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v37 = v51[0];
      v38 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v38 = 0x100000001;
      if (!v37)
        goto LABEL_49;
LABEL_48:
      *(_DWORD *)v37 += 2;
      goto LABEL_49;
    }
    v30 = WebCore::Geolocation::page(this);
    if (v30)
    {
      v51[0] = (WTF *)"GeolocationController";
      v51[1] = (WTF *)22;
      v31 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v30 + 8), (const char **)v51);
      if (v31)
        v31 = (const char **)v31[2];
      v32 = (WTF::MonotonicTime *)WebCore::GeolocationController::addObserver((WebCore::GeolocationController *)v31, this, *((unsigned __int8 *)v29 + 32));
      v33 = (uint64_t)*v27 + 48;
      LODWORD(v34) = *((_DWORD *)*v27 + 9);
      v35 = (double)v34 * 0.001;
      *((_QWORD *)*v27 + 9) = 0;
      WTF::MonotonicTime::now(v32);
      WebCore::TimerBase::setNextFireTime(v33, v35 + v36);
      goto LABEL_55;
    }
    v29 = *v27;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v37 = v51[0];
    v38 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v38 = 0x200000001;
    if (v37)
      goto LABEL_48;
LABEL_49:
    *(_QWORD *)(v38 + 8) = v37;
    *(_BYTE *)(v38 + 16) = 0;
    v51[0] = (WTF *)v38;
    WebCore::GeoNotifier::setFatalError(v29, (WTF::StringImpl *)v51);
    v39 = v51[0];
    if (!v51[0])
      goto LABEL_52;
    if (*(_DWORD *)v51[0] != 1)
    {
      --*(_DWORD *)v51[0];
LABEL_52:
      if (!v37)
        goto LABEL_55;
LABEL_53:
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v37 -= 2;
      goto LABEL_55;
    }
    v40 = (WTF::StringImpl *)*((_QWORD *)v51[0] + 1);
    *((_QWORD *)v51[0] + 1) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v40 -= 2;
    }
    WTF::fastFree(v39, v11);
    if (v37)
      goto LABEL_53;
LABEL_55:
    while (++v27 != v28)
    {
      if ((unint64_t)*v27 + 1 > 1)
        goto LABEL_59;
    }
    v27 = v28;
LABEL_59:
    ;
  }
  while (v27 != v26);
  v8 = (WebCore::GeoNotifier **)*((_QWORD *)this + 10);
  if (!v8)
    return WTF::RefCounted<WebCore::Geolocation>::deref(v4);
LABEL_81:
  *((_QWORD *)this + 10) = 0;
  v46 = *((unsigned int *)v8 - 1);
  if (!(_DWORD)v46)
  {
    v24 = (WTF *)(v8 - 2);
    goto LABEL_37;
  }
  v47 = v8;
  do
  {
    v48 = *v47;
    if (*v47 != (WebCore::GeoNotifier *)-1)
    {
      *v47 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
        {
          WebCore::GeoNotifier::~GeoNotifier(v48, (WTF::StringImpl *)v11);
          WTF::fastFree(v49, v50);
        }
        else
        {
          --*(_DWORD *)v48;
        }
      }
    }
    ++v47;
    --v46;
  }
  while (v46);
  result = (_DWORD *)WTF::fastFree((WTF *)(v8 - 2), v11);
  if (this)
    return WTF::RefCounted<WebCore::Geolocation>::deref(v4);
  return result;
}

WTF *WebCore::Geolocation::positionChanged(WebCore::Geolocation *this)
{
  WTF *result;
  WTF *v3;
  void *v4;
  WTF *v5;

  result = (WTF *)WebCore::Geolocation::stopTimers(this);
  if (*((_BYTE *)this + 112))
  {
    *((_BYTE *)this + 114) = 1;
  }
  else
  {
    result = (WTF *)WebCore::Geolocation::lastPosition((WTF **)this);
    if (result)
    {
      v3 = result;
      ++*(_DWORD *)result;
      result = (WTF *)WebCore::Geolocation::makeSuccessCallbacks(this, (uint64_t)result);
      if (*(_DWORD *)v3 == 1)
      {
        v5 = (WTF *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, v4);
          else
            --*(_DWORD *)v5;
        }
        return (WTF *)WTF::fastFree(v3, v4);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
  return result;
}

uint64_t WebCore::Geolocation::handleError(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  WebCore::GeoNotifier **v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::GeoNotifier **v10;
  WebCore::GeoNotifier *v11;
  WTF *v12;
  void *v13;
  WebCore::GeoNotifier **v14;
  uint64_t v15;
  WebCore::GeoNotifier **v16;
  WebCore::GeoNotifier *v17;
  WTF *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  _DWORD *v25;
  WebCore::GeoNotifier **v26;
  uint64_t v27;
  WebCore::GeoNotifier *v28;
  WebCore::GeoNotifier *v29;
  WTF *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  WebCore::GeoNotifier **v36;
  WebCore::GeoNotifier *v37;
  WTF *v38;
  void *v39;
  WebCore::GeoNotifier **v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _BYTE v46[24];
  WebCore::GeoNotifier *v47;

  v4 = a1 + 7;
  v44 = 0;
  v45 = 0;
  WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v44, (_QWORD **)a1 + 7);
  v42 = 0;
  v43 = 0;
  v5 = a1 + 8;
  WebCore::Geolocation::Watchers::getNotifiersVector(a1 + 8, (uint64_t)&v42);
  v40 = 0;
  v41 = 0;
  v7 = (WebCore::GeoNotifier **)a1[7];
  if (v7)
  {
    *v4 = 0;
    v35 = *((unsigned int *)v7 - 1);
    if ((_DWORD)v35)
    {
      v36 = v7;
      do
      {
        v37 = *v36;
        if (*v36 != (WebCore::GeoNotifier *)-1)
        {
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
            {
              WebCore::GeoNotifier::~GeoNotifier(v37, v6);
              WTF::fastFree(v38, v39);
            }
            else
            {
              --*(_DWORD *)v37;
            }
          }
        }
        ++v36;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v7 - 2), v6);
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = *v5;
    if (*v5)
    {
      *v5 = 0;
      v9 = *(unsigned int *)(v8 - 4);
      if ((_DWORD)v9)
      {
        v10 = (WebCore::GeoNotifier **)(v8 + 8);
        do
        {
          if (*((_DWORD *)v10 - 2) != -1)
          {
            v11 = *v10;
            *v10 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 1)
              {
                WebCore::GeoNotifier::~GeoNotifier(v11, v6);
                WTF::fastFree(v12, v13);
              }
              else
              {
                --*(_DWORD *)v11;
              }
            }
          }
          v10 += 2;
          --v9;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)(v8 - 16), v6);
    }
    v14 = (WebCore::GeoNotifier **)a1[9];
    if (v14)
    {
      a1[9] = 0;
      v15 = *((unsigned int *)v14 - 1);
      if ((_DWORD)v15)
      {
        v16 = v14;
        do
        {
          v17 = *v16;
          if (*v16 != (WebCore::GeoNotifier *)-1)
          {
            *v16 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
              {
                WebCore::GeoNotifier::~GeoNotifier(v17, v6);
                WTF::fastFree(v18, v19);
              }
              else
              {
                --*(_DWORD *)v17;
              }
            }
          }
          v16 += 2;
          --v15;
        }
        while (v15);
      }
      WTF::fastFree((WTF *)(v14 - 2), v6);
    }
  }
  else
  {
    WebCore::Geolocation::extractNotifiersWithCachedPosition(&v44, (unsigned int *)&v40);
    WebCore::Geolocation::extractNotifiersWithCachedPosition(&v42, 0);
  }
  if (HIDWORD(v45))
  {
    v20 = v44;
    v21 = 8 * HIDWORD(v45);
    do
    {
      v22 = *(_DWORD **)(*(_QWORD *)v20 + 24);
      if (v22)
      {
        ++v22[4];
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v22 + 40))(v22, a2);
        if (v22[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
        else
          --v22[4];
      }
      v20 += 8;
      v21 -= 8;
    }
    while (v21);
  }
  if (HIDWORD(v43))
  {
    v23 = v42;
    v24 = 8 * HIDWORD(v43);
    do
    {
      v25 = *(_DWORD **)(*(_QWORD *)v23 + 24);
      if (v25)
      {
        ++v25[4];
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v25 + 40))(v25, a2);
        if (v25[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
        else
          --v25[4];
      }
      v23 += 8;
      v24 -= 8;
    }
    while (v24);
  }
  if ((!*v4 || !*(_DWORD *)(*v4 - 12)) && (!*v5 || !*(_DWORD *)(*v5 - 12)))
    WebCore::Geolocation::stopUpdating((WebCore::Geolocation *)a1);
  if (HIDWORD(v41))
  {
    v26 = v40;
    v27 = 8 * HIDWORD(v41);
    do
    {
      v28 = *v26;
      if (*v26)
        ++*(_DWORD *)v28;
      v47 = v28;
      WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::add(v4, (WTF::StringImpl *)&v47, (uint64_t)v46);
      v29 = v47;
      v47 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
        {
          WebCore::GeoNotifier::~GeoNotifier(v29, v6);
          WTF::fastFree(v30, v31);
        }
        else
        {
          --*(_DWORD *)v29;
        }
      }
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v6);
  WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v32);
  return WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v33);
}

WTF **WTF::Ref<WebCore::GeolocationPositionError,WTF::RawPtrTraits<WebCore::GeolocationPositionError>,WTF::DefaultRefDerefTraits<WebCore::GeolocationPositionError>>::~Ref(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

const char **WebCore::GeolocationController::from(const char **this, WebCore::Page *a2)
{
  const char *v2[2];

  if (this)
  {
    v2[0] = "GeolocationController";
    v2[1] = (const char *)22;
    this = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 1, v2);
    if (this)
      return (const char **)this[2];
  }
  return this;
}

uint64_t WebCore::Geolocation::stopUpdating(WebCore::Geolocation *this)
{
  uint64_t result;
  const char **v3;
  const char *v4[2];

  result = WebCore::Geolocation::page(this);
  if (result)
  {
    v4[0] = "GeolocationController";
    v4[1] = (const char *)22;
    v3 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(result + 8), v4);
    if (v3)
      v3 = (const char **)v3[2];
    return WebCore::GeolocationController::removeObserver((WebCore::GeolocationController *)v3, this);
  }
  return result;
}

uint64_t *WebCore::Geolocation::resetIsAllowed(uint64_t *this)
{
  *((_DWORD *)this + 24) = 0;
  return WebCore::Geolocation::revokeAuthorizationTokenIfNecessary(this);
}

uint64_t *WebCore::Geolocation::startRequest(WebCore::Geolocation *this, WebCore::GeoNotifier *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const WTF::URL *v7;
  const WTF::URL *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::SecurityContext *v12;
  int v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::SecurityContext *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  const char *v29;
  uint64_t *result;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF *v40;
  WTF::WallTime *Position;
  WTF::WallTime *v42;
  double v43;
  uint64_t v44;
  const char **v45;
  WTF::MonotonicTime *v46;
  unint64_t v47;
  double v48;
  double v49;
  double v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebCore::GeoNotifier *v53;
  WTF *v54;
  void *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  _QWORD v64[2];
  WebCore::GeoNotifier *v65[2];

  v4 = WebCore::Geolocation::document(this);
  v5 = v4;
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v6 = 1;
  if (WebCore::PermissionsPolicy::isFeatureEnabled(5u, (_QWORD *)v4, 1))
  {
    v9 = (WebCore::SecurityOrigin::isSecure((WebCore::SecurityOrigin *)(v5 + 736), v7) & 1) != 0
       ? 1
       : WebCore::Document::isSecureContext((WebCore::Document *)v5, v8);
    v10 = *((_QWORD *)this + 1);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      v12 = v11 ? (WebCore::SecurityContext *)(v11 - 96) : 0;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(unsigned __int8 *)(v5 + 273);
    WebCore::SecurityContext::securityOrigin(v12, v8);
    v15 = *(unsigned __int8 *)(v14 + 63);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 + 192), v16);
    if (!v17 || *(_DWORD *)(v17 + 32) == 1)
      goto LABEL_17;
    v6 = 0;
    v18 = v9 ^ 1;
    if (v13)
      v18 = 1;
    if (!v15 && v18)
    {
LABEL_17:
      v19 = *((_QWORD *)this + 1);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
          v21 = (WebCore::SecurityContext *)(v20 - 96);
        else
          v21 = 0;
      }
      else
      {
        v21 = 0;
      }
      WebCore::SecurityContext::securityOrigin(v21, v7);
      v23 = v22;
      if (v22)
      {
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 + 1, v22));
      }
      v25 = v22[8];
      if ((_DWORD)v25 == 1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      else
      {
        if ((_DWORD)v25 == -1)
        {
          result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_109;
        }
        v59 = (WTF *)v65;
        v26 = (_QWORD *)((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v25])(&v59, v22 + 2);
        if (MEMORY[0x19AEA53F4](*v26, "file", 4) && *((_BYTE *)v23 + 59))
          WTF::String::String(&v61, (uint64_t)"null", 5);
        else
          WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v23 + 2), &v61);
      }
      v27 = v61;
      if (!v13 && v9 == 1)
      {
LABEL_43:
        v61 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v7);
          else
            *(_DWORD *)v27 -= 2;
        }
        do
        {
          v34 = __ldaxr(v23);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v23));
        if (!v35)
        {
          atomic_store(1u, v23);
          v56 = (WTF::StringImpl *)*((_QWORD *)v23 + 6);
          *((_QWORD *)v23 + 6) = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v7);
            else
              *(_DWORD *)v56 -= 2;
          }
          v57 = (WTF::StringImpl *)*((_QWORD *)v23 + 5);
          *((_QWORD *)v23 + 5) = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v7);
            else
              *(_DWORD *)v57 -= 2;
          }
          v58 = v23[8];
          if ((_DWORD)v58 != -1)
            ((void (*)(WTF **, unsigned int *))off_1E3357150[v58])(&v59, v23 + 2);
          v23[8] = -1;
          WTF::fastFree((WTF *)v23, v7);
        }
        v6 = 1;
        goto LABEL_49;
      }
      v28 = 25;
      if (v9)
        v28 = 42;
      v29 = " insecure connection to ";
      if (v9)
        v29 = " secure connection with mixed content to ";
      if (v61)
        *(_DWORD *)v61 += 2;
      v62 = v27;
      v59 = (WTF *)"[blocked] Access to geolocation was blocked over";
      v60 = 49;
      v65[0] = (WebCore::GeoNotifier *)v29;
      v65[1] = (WebCore::GeoNotifier *)v28;
      v64[0] = ".\n";
      v64[1] = 3;
      result = (uint64_t *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v59, (uint64_t)v65, (uint64_t *)&v62, (uint64_t)v64, &v63);
      if (v63)
      {
        v32 = v62;
        v62 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        WebCore::Document::addConsoleMessage((_QWORD *)v5, 8, 2, &v63, 0);
        v33 = v63;
        v63 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v7);
          else
            *(_DWORD *)v33 -= 2;
        }
        v27 = v61;
        goto LABEL_43;
      }
LABEL_109:
      __break(0xC471u);
      return result;
    }
  }
LABEL_49:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (v6 || (*(_BYTE *)(WebCore::Geolocation::document(this) + 275) = 1, *((_DWORD *)this + 24) == 3))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v36 = v59;
    v37 = WTF::fastMalloc((WTF *)0x18);
    v38 = 0x100000001;
    goto LABEL_54;
  }
  Position = (WTF::WallTime *)WebCore::Geolocation::lastPosition((WTF **)this);
  if (Position)
  {
    if (*((_DWORD *)a2 + 10))
    {
      v42 = Position;
      Position = (WTF::WallTime *)WTF::WallTime::now(Position);
      if (*((_QWORD *)v42 + 2) > (unint64_t)(v43 * 1000.0) - *((unsigned int *)a2 + 10))
      {
        *((_BYTE *)a2 + 112) = 1;
LABEL_73:
        *((_QWORD *)a2 + 9) = 0;
        WTF::MonotonicTime::now(Position);
        return (uint64_t *)WebCore::TimerBase::setNextFireTime((uint64_t)a2 + 48, v50 + 0.0);
      }
    }
  }
  if (!*((_DWORD *)a2 + 9))
    goto LABEL_73;
  if (*((_DWORD *)this + 24) != 2)
  {
    ++*(_DWORD *)a2;
    v65[0] = a2;
    WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::add((uint64_t *)this + 10, (WTF::StringImpl *)v65, (uint64_t)&v59);
    v53 = v65[0];
    v65[0] = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 1)
      {
        WebCore::GeoNotifier::~GeoNotifier(v53, v52);
        WTF::fastFree(v54, v55);
      }
      else
      {
        --*(_DWORD *)v53;
      }
    }
    return WebCore::Geolocation::requestPermission((uint64_t *)this);
  }
  v44 = WebCore::Geolocation::page(this);
  if (v44)
  {
    v59 = (WTF *)"GeolocationController";
    v60 = 22;
    v45 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v44 + 8), (const char **)&v59);
    if (v45)
      v45 = (const char **)v45[2];
    v46 = (WTF::MonotonicTime *)WebCore::GeolocationController::addObserver((WebCore::GeolocationController *)v45, this, *((unsigned __int8 *)a2 + 32));
    LODWORD(v47) = *((_DWORD *)a2 + 9);
    v48 = (double)v47 * 0.001;
    *((_QWORD *)a2 + 9) = 0;
    WTF::MonotonicTime::now(v46);
    return (uint64_t *)WebCore::TimerBase::setNextFireTime((uint64_t)a2 + 48, v48 + v49);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v59;
  v37 = WTF::fastMalloc((WTF *)0x18);
  v38 = 0x200000001;
LABEL_54:
  *(_QWORD *)v37 = v38;
  if (v36)
    *(_DWORD *)v36 += 2;
  *(_QWORD *)(v37 + 8) = v36;
  *(_BYTE *)(v37 + 16) = 0;
  v59 = (WTF *)v37;
  result = WebCore::GeoNotifier::setFatalError(a2, (WTF::StringImpl *)&v59);
  v40 = v59;
  if (!v59)
  {
LABEL_59:
    if (!v36)
      return result;
    goto LABEL_60;
  }
  if (*(_DWORD *)v59 != 1)
  {
    --*(_DWORD *)v59;
    goto LABEL_59;
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)v59 + 1);
  *((_QWORD *)v59 + 1) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v39);
    else
      *(_DWORD *)v51 -= 2;
  }
  result = (uint64_t *)WTF::fastFree(v40, v39);
  if (v36)
  {
LABEL_60:
    if (*(_DWORD *)v36 == 2)
      return (uint64_t *)WTF::StringImpl::destroy(v36, v39);
    else
      *(_DWORD *)v36 -= 2;
  }
  return result;
}

uint64_t WebCore::Geolocation::cancelAllRequests(WebCore::Geolocation *this)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&,void>::map(&v4, (_QWORD **)this + 7);
  WebCore::Geolocation::cancelRequests(v4, HIDWORD(v5));
  WebCore::Geolocation::Watchers::getNotifiersVector((uint64_t *)this + 8, (uint64_t)&v4);
  WebCore::Geolocation::cancelRequests(v4, HIDWORD(v5));
  return WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v4, v2);
}

uint64_t WebCore::Geolocation::lastPosition(WTF **this)
{
  uint64_t v2;
  _DWORD *v3;
  const char **v4;
  const char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  WTF *v18;
  WTF *v20;
  void *v21;
  WTF *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v2 = WebCore::Geolocation::page((WebCore::Geolocation *)this);
  if (!v2)
    return 0;
  v3 = (_DWORD *)v2;
  ++*(_DWORD *)v2;
  *(_QWORD *)&v23 = "GeolocationController";
  *((_QWORD *)&v23 + 1) = 22;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v2 + 8), (const char **)&v23);
  if (v4)
    v5 = v4[2];
  else
    v5 = 0;
  if (v5[152])
  {
    v6 = *(_OWORD *)(v5 + 104);
    v26 = *(_OWORD *)(v5 + 88);
    v27 = v6;
    v7 = *(_OWORD *)(v5 + 136);
    v28 = *(_OWORD *)(v5 + 120);
    v29 = v7;
    v8 = *(_OWORD *)(v5 + 56);
    v23 = *(_OWORD *)(v5 + 40);
    v24 = v8;
    v25 = *(_OWORD *)(v5 + 72);
    v30 = 1;
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v5 + 4) + 40))(&v23);
    if (!v30)
    {
      v17 = 0;
      goto LABEL_8;
    }
  }
  v10 = (unint64_t)(*(double *)&v23 * 1000.0);
  v11 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)v11 = 1;
  v13 = v24;
  v12 = v25;
  *(_OWORD *)(v11 + 8) = v23;
  *(_OWORD *)(v11 + 24) = v13;
  *(_OWORD *)(v11 + 40) = v12;
  v14 = v28;
  v15 = v29;
  v16 = v27;
  *(_OWORD *)(v11 + 56) = v26;
  *(_OWORD *)(v11 + 104) = v15;
  *(_OWORD *)(v11 + 88) = v14;
  *(_OWORD *)(v11 + 72) = v16;
  v17 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v11;
  *(_QWORD *)(v17 + 16) = v10;
LABEL_8:
  v18 = this[11];
  this[11] = (WTF *)v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      v22 = (WTF *)*((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, v9);
        else
          --*(_DWORD *)v22;
      }
      WTF::fastFree(v18, v9);
      v17 = (uint64_t)this[11];
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
  if (*v3 == 1)
  {
    WebCore::Page::~Page((uint64_t)v3);
    WTF::fastFree(v20, v21);
  }
  else
  {
    --*v3;
  }
  return v17;
}

uint64_t WebCore::Geolocation::getCurrentPosition(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  WTF *v23;
  void *v24;
  uint64_t v25[3];
  WebCore::GeoNotifier *v26;

  result = WebCore::Geolocation::document((WebCore::Geolocation *)a1);
  v10 = result;
  if (result)
  {
    *(_DWORD *)(result + 24) += 2;
    result = WebCore::Document::isFullyActive((WebCore::Document *)result);
    if ((result & 1) != 0)
    {
      v11 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)v11 = 1;
      ++*(_DWORD *)(a1 + 32);
      *(_QWORD *)(v11 + 8) = a1;
      v12 = *a2;
      *a2 = 0;
      *(_QWORD *)(v11 + 16) = v12;
      v13 = *a3;
      *a3 = 0;
      *(_QWORD *)(v11 + 24) = v13;
      v14 = *a4;
      *(_DWORD *)(v11 + 40) = *((_DWORD *)a4 + 2);
      *(_QWORD *)(v11 + 32) = v14;
      *(_QWORD *)(v11 + 48) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      v16 = *(unsigned int **)(StatusReg + 736);
      if (!v16)
        v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      *(_QWORD *)(v11 + 88) = v16;
      *(_QWORD *)(v11 + 48) = off_1E31F7378;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v18 = off_1E3356BE8;
      v18[1] = WebCore::GeoNotifier::timerFired;
      v18[2] = 0;
      v18[3] = v11;
      *(_QWORD *)(v11 + 96) = v18;
      *(_QWORD *)(v11 + 104) = 0;
      *(_BYTE *)(v11 + 112) = 0;
      WebCore::Geolocation::startRequest((WebCore::Geolocation *)a1, (WebCore::GeoNotifier *)v11);
      v26 = (WebCore::GeoNotifier *)v11;
      WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::add((uint64_t *)(a1 + 56), (WTF::StringImpl *)&v26, (uint64_t)v25);
      result = (uint64_t)v26;
      v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::GeoNotifier::~GeoNotifier((WebCore::GeoNotifier *)result, v9);
          result = WTF::fastFree(v23, v24);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
LABEL_17:
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      return result;
    }
  }
  if (*a3)
  {
    v19 = *(_QWORD *)(*a3 + 8);
    if (v19)
    {
      result = *(_QWORD *)(v19 + 8);
      if (result)
      {
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 96) + 104))(result - 96);
        v21 = *a3;
        if (*a3)
          ++*(_DWORD *)(v21 + 16);
        v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v22 = &off_1E3357110;
        v22[1] = v21;
        v25[0] = (uint64_t)v22;
        WebCore::EventLoopTaskGroup::queueTask(v20, 5, v25);
        result = v25[0];
        v25[0] = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  if (v10)
    goto LABEL_17;
  return result;
}

uint64_t WebCore::Geolocation::watchPosition(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t StatusReg;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  int v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  WebCore::GeoNotifier *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  WTF *v67;
  void *v68;
  WTF *v69;
  void *v70;
  WTF *v71;
  void *v72;
  _QWORD *v73;

  if (WebCore::Geolocation::document((WebCore::Geolocation *)a1))
  {
    v8 = (WebCore::Document *)WebCore::Geolocation::document((WebCore::Geolocation *)a1);
    if ((WebCore::Document::isFullyActive(v8) & 1) != 0)
    {
      v9 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)v9 = 1;
      ++*(_DWORD *)(a1 + 32);
      *(_QWORD *)(v9 + 8) = a1;
      v10 = *a2;
      *a2 = 0;
      *(_QWORD *)(v9 + 16) = v10;
      v11 = *a3;
      *a3 = 0;
      *(_QWORD *)(v9 + 24) = v11;
      v12 = *a4;
      *(_DWORD *)(v9 + 40) = *((_DWORD *)a4 + 2);
      *(_QWORD *)(v9 + 32) = v12;
      *(_QWORD *)(v9 + 48) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      v14 = *(unsigned int **)(StatusReg + 736);
      if (!v14)
        v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      *(_QWORD *)(v9 + 88) = v14;
      *(_QWORD *)(v9 + 48) = off_1E31F7378;
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v16 = off_1E3356BE8;
      v16[1] = WebCore::GeoNotifier::timerFired;
      v16[2] = 0;
      v16[3] = v9;
      *(_QWORD *)(v9 + 96) = v16;
      *(_QWORD *)(v9 + 104) = 0;
      *(_BYTE *)(v9 + 112) = 0;
      WebCore::Geolocation::startRequest((WebCore::Geolocation *)a1, (WebCore::GeoNotifier *)v9);
      v18 = (uint64_t *)(a1 + 64);
      v19 = (uint64_t *)(a1 + 72);
LABEL_7:
      v20 = *(_QWORD *)(a1 + 8);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (v21)
          v20 = v21 - 96;
        else
          v20 = 0;
      }
      v22 = *(_DWORD *)(v20 + 176);
      if (v22 >= 0)
        v23 = (v22 + 1);
      else
        v23 = 1;
      *(_DWORD *)(v20 + 176) = v23;
      ++*(_DWORD *)v9;
      v24 = *v18;
      if (*v18
        || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)(a1 + 64), 8u), (v24 = *v18) != 0))
      {
        v25 = *(_DWORD *)(v24 - 8);
      }
      else
      {
        v25 = 0;
      }
      v26 = 9 * ((v23 + ~((_DWORD)v23 << 15)) ^ ((v23 + ~((_DWORD)v23 << 15)) >> 10));
      v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
      v28 = v25 & (v27 ^ HIWORD(v27));
      v29 = (_QWORD *)(v24 + 16 * v28);
      v30 = *(_DWORD *)v29;
      if (*(_DWORD *)v29)
      {
        v31 = 0;
        v32 = 1;
        do
        {
          if (v30 == (_DWORD)v23)
          {
            if (*(_DWORD *)v9 == 1)
            {
              WebCore::GeoNotifier::~GeoNotifier((WebCore::GeoNotifier *)v9, v17);
              WTF::fastFree(v33, v34);
            }
            else
            {
              --*(_DWORD *)v9;
            }
            goto LABEL_7;
          }
          if (v30 == -1)
            v31 = v29;
          v28 = (v28 + v32) & v25;
          v29 = (_QWORD *)(v24 + 16 * v28);
          v30 = *(_DWORD *)v29;
          ++v32;
        }
        while (*(_DWORD *)v29);
        if (v31)
        {
          *v31 = 0;
          v31[1] = 0;
          --*(_DWORD *)(*v18 - 16);
          v29 = v31;
        }
      }
      *(_DWORD *)v29 = v23;
      ++*(_DWORD *)v9;
      v41 = (WebCore::GeoNotifier *)v29[1];
      v29[1] = v9;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
        {
          WebCore::GeoNotifier::~GeoNotifier(v41, v17);
          WTF::fastFree(v67, v68);
        }
        else
        {
          --*(_DWORD *)v41;
        }
      }
      v42 = *v18;
      if (*v18)
        v43 = *(_DWORD *)(v42 - 12) + 1;
      else
        v43 = 1;
      *(_DWORD *)(v42 - 12) = v43;
      v44 = *v18;
      if (*v18)
        v45 = *(_DWORD *)(v44 - 12);
      else
        v45 = 0;
      v46 = (*(_DWORD *)(v44 - 16) + v45);
      v47 = *(unsigned int *)(v44 - 4);
      if (v47 > 0x400)
      {
        if (v47 > 2 * v46)
          goto LABEL_51;
      }
      else
      {
        if (3 * v47 > 4 * v46)
        {
LABEL_51:
          v49 = *v19;
          if (*v19
            || (WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash((uint64_t *)(a1 + 72), 8u), (v49 = *v19) != 0))
          {
            v50 = *(_DWORD *)(v49 - 8);
          }
          else
          {
            v50 = 0;
          }
          v51 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
          v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
          v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
          v54 = v50 & ((v53 >> 31) ^ v53);
          v55 = (uint64_t *)(v49 + 16 * v54);
          v56 = *v55;
          if (*v55)
          {
            v57 = 0;
            v58 = 1;
            do
            {
              if (v56 == v9)
              {
                *((_DWORD *)v55 + 2) = v23;
                if (*(_DWORD *)v9 == 1)
                {
                  WebCore::GeoNotifier::~GeoNotifier((WebCore::GeoNotifier *)v9, v17);
                  WTF::fastFree(v71, v72);
                }
                else
                {
                  --*(_DWORD *)v9;
                }
                goto LABEL_79;
              }
              if (v56 == -1)
                v57 = v55;
              v54 = (v54 + v58) & v50;
              v55 = (uint64_t *)(v49 + 16 * v54);
              v56 = *v55;
              ++v58;
            }
            while (*v55);
            if (v57)
            {
              *v57 = 0;
              v57[1] = 0;
              --*(_DWORD *)(*v19 - 16);
              v55 = v57;
            }
          }
          *v55 = v9;
          *((_DWORD *)v55 + 2) = v23;
          v59 = *v19;
          if (*v19)
            v60 = *(_DWORD *)(v59 - 12) + 1;
          else
            v60 = 1;
          *(_DWORD *)(v59 - 12) = v60;
          v61 = *v19;
          if (*v19)
            v62 = *(_DWORD *)(v61 - 12);
          else
            v62 = 0;
          v63 = (*(_DWORD *)(v61 - 16) + v62);
          v64 = *(unsigned int *)(v61 - 4);
          if (v64 > 0x400)
          {
            if (v64 > 2 * v63)
            {
LABEL_79:
              if (*(_DWORD *)v9 == 1)
              {
                WebCore::GeoNotifier::~GeoNotifier((WebCore::GeoNotifier *)v9, v17);
                WTF::fastFree(v69, v70);
              }
              else
              {
                --*(_DWORD *)v9;
              }
              return v23;
            }
          }
          else
          {
            if (3 * v64 > 4 * v63)
              goto LABEL_79;
            if (!(_DWORD)v64)
            {
              v65 = 8;
              goto LABEL_78;
            }
          }
          v65 = (_DWORD)v64 << (6 * *(_DWORD *)(v61 - 12) >= (2 * v64));
LABEL_78:
          WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash((uint64_t *)(a1 + 72), v65);
          goto LABEL_79;
        }
        if (!(_DWORD)v47)
        {
          v48 = 8;
          goto LABEL_50;
        }
      }
      v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
LABEL_50:
      WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)(a1 + 64), v48);
      goto LABEL_51;
    }
  }
  if (*a3)
  {
    v35 = *(_QWORD *)(*a3 + 8);
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
      {
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 96) + 104))(v36 - 96);
        v38 = *a3;
        if (v38)
          ++*(_DWORD *)(v38 + 16);
        v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v39 = &off_1E3357138;
        v39[1] = v38;
        v73 = v39;
        WebCore::EventLoopTaskGroup::queueTask(v37, 5, (uint64_t *)&v73);
        v40 = (uint64_t)v73;
        v73 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
    }
  }
  return 0;
}

uint64_t *WebCore::Geolocation::requestPermission(uint64_t *this)
{
  uint64_t *v1;
  const char *v2;
  uint64_t v3;
  const char *v4[3];
  uint64_t *v5;

  if (*((int *)this + 24) <= 0)
  {
    v1 = this;
    this = (uint64_t *)WebCore::Geolocation::page((WebCore::Geolocation *)this);
    if (this)
    {
      *((_DWORD *)v1 + 24) = 1;
      v4[0] = "GeolocationController";
      v4[1] = (const char *)22;
      v2 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(this + 1, v4)[2];
      if ((*(_WORD *)(*((_QWORD *)v2 + 3) + 658) & 4) != 0)
      {
        return (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)v2 + 4) + 48))(*((_QWORD *)v2 + 4), v1);
      }
      else
      {
        ++*((_DWORD *)v1 + 8);
        v5 = v1;
        this = WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::add((uint64_t *)v2 + 22, (uint64_t *)&v5, (uint64_t)v4);
        v3 = (uint64_t)v5;
        v5 = 0;
        if (v3)
          return (uint64_t *)WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v3 + 32));
      }
    }
  }
  return this;
}

uint64_t WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WebCore::GeoNotifier *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(WTF::StringImpl **)(v2 + 8 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(WTF::StringImpl **)(v2 + 8 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = *(WebCore::GeoNotifier **)(v2 + 8 * v8);
  *(_QWORD *)(v2 + 8 * v8) = -1;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::GeoNotifier::~GeoNotifier(v12, a2);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v15 - 12);
    v19 = *(_DWORD *)(v15 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash(a1, v19 >> 1, 0);
  }
  return 1;
}

uint64_t *WebCore::Geolocation::requestUsesCachedPosition(WebCore::Geolocation *this, WebCore::GeoNotifier *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t *result;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t *v9;
  WTF::StringImpl *v10;
  WebCore::GeoNotifier *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  WTF *v15[3];
  WebCore::GeoNotifier *v16;

  if (*((_DWORD *)this + 24) == 3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = v15[0];
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = 0x100000001;
    if (v3)
      *(_DWORD *)v3 += 2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_BYTE *)(v4 + 16) = 0;
    v15[0] = (WTF *)v4;
    result = WebCore::GeoNotifier::setFatalError(a2, (WTF::StringImpl *)v15);
    v7 = v15[0];
    if (!v15[0])
    {
LABEL_7:
      if (!v3)
        return result;
      goto LABEL_8;
    }
    if (*(_DWORD *)v15[0] != 1)
    {
      --*(_DWORD *)v15[0];
      goto LABEL_7;
    }
    v12 = (WTF::StringImpl *)*((_QWORD *)v15[0] + 1);
    *((_QWORD *)v15[0] + 1) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = (uint64_t *)WTF::fastFree(v7, v6);
    if (v3)
    {
LABEL_8:
      if (*(_DWORD *)v3 == 2)
        return (uint64_t *)WTF::StringImpl::destroy(v3, v6);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  else
  {
    v9 = (uint64_t *)((char *)this + 184);
    if (a2)
      ++*(_DWORD *)a2;
    v16 = a2;
    WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::add(v9, (WTF::StringImpl *)&v16, (uint64_t)v15);
    v11 = v16;
    v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::GeoNotifier::~GeoNotifier(v11, v10);
        WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    if (*((_DWORD *)this + 24) == 2)
      return (uint64_t *)WebCore::Geolocation::makeCachedPositionCallbacks(this);
    else
      return WebCore::Geolocation::requestPermission((uint64_t *)this);
  }
  return result;
}

uint64_t WebCore::Geolocation::makeCachedPositionCallbacks(WebCore::Geolocation *this)
{
  WebCore::GeoNotifier **v2;
  uint64_t result;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t Position;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  const char **v22;
  double v23;
  double v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::GeoNotifier **v33;
  WebCore::GeoNotifier *v34;
  WTF *v35;
  void *v36;
  WTF *v37[2];

  v2 = (WebCore::GeoNotifier **)*((_QWORD *)this + 23);
  result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v2);
  v5 = (WTF::StringImpl **)result;
  v6 = (WTF::StringImpl **)v4;
  if (v2)
    v7 = &v2[*((unsigned int *)v2 - 1)];
  else
    v7 = 0;
  if (v7 != (WTF::StringImpl **)result)
  {
    while (1)
    {
      v8 = *v5;
      Position = WebCore::Geolocation::lastPosition((WTF **)this);
      if (*(_DWORD *)(*((_QWORD *)v8 + 1) + 96) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1953550FCLL);
      }
      v10 = (_DWORD *)*((_QWORD *)v8 + 2);
      ++v10[4];
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v10 + 40))(v10, Position);
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[4];
      result = WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>((uint64_t *)this + 7, *v5);
      if ((result & 1) == 0)
      {
        v11 = *((_QWORD *)this + 9);
        if (v11)
          break;
      }
LABEL_28:
      while (++v5 != v6)
      {
        if ((unint64_t)*v5 + 1 > 1)
          goto LABEL_32;
      }
      v5 = v6;
LABEL_32:
      if (v5 == v7)
      {
        v2 = (WebCore::GeoNotifier **)*((_QWORD *)this + 23);
        goto LABEL_41;
      }
    }
    v12 = *v5;
    v13 = *(_DWORD *)(v11 - 8);
    v14 = (unint64_t)*v5 + ~((_QWORD)*v5 << 32);
    v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
    v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
    v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
    v18 = *(WTF::StringImpl **)(v11 + 16 * v17);
    if (v18 != *v5)
    {
      v19 = 1;
      do
      {
        if (!v18)
          goto LABEL_28;
        v17 = (v17 + v19) & v13;
        v18 = *(WTF::StringImpl **)(v11 + 16 * v17);
        ++v19;
      }
      while (v18 != v12);
    }
    v20 = *((_DWORD *)v12 + 9);
    if (!v20)
    {
LABEL_18:
      v23 = (double)v20 * 0.001;
      *((_QWORD *)v12 + 9) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      result = WebCore::TimerBase::setNextFireTime((uint64_t)v12 + 48, v23 + v24);
      goto LABEL_28;
    }
    v21 = WebCore::Geolocation::page(this);
    if (v21)
    {
      v37[0] = (WTF *)"GeolocationController";
      v37[1] = (WTF *)22;
      v22 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v21 + 8), (const char **)v37);
      if (v22)
        v22 = (const char **)v22[2];
      result = (uint64_t)WebCore::GeolocationController::addObserver((WebCore::GeolocationController *)v22, this, *((unsigned __int8 *)v12 + 32));
      v12 = *v5;
      v20 = *((_DWORD *)*v5 + 9);
      goto LABEL_18;
    }
    v25 = *v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = v37[0];
    v27 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v27 = 0x200000001;
    if (v26)
      *(_DWORD *)v26 += 2;
    *(_QWORD *)(v27 + 8) = v26;
    *(_BYTE *)(v27 + 16) = 0;
    v37[0] = (WTF *)v27;
    result = (uint64_t)WebCore::GeoNotifier::setFatalError(v25, (WTF::StringImpl *)v37);
    v28 = v37[0];
    if (v37[0])
    {
      if (*(_DWORD *)v37[0] == 1)
      {
        v29 = (WTF::StringImpl *)*((_QWORD *)v37[0] + 1);
        *((_QWORD *)v37[0] + 1) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v4);
          else
            *(_DWORD *)v29 -= 2;
        }
        result = WTF::fastFree(v28, v4);
        if (!v26)
          goto LABEL_28;
LABEL_26:
        if (*(_DWORD *)v26 == 2)
          result = WTF::StringImpl::destroy(v26, v4);
        else
          *(_DWORD *)v26 -= 2;
        goto LABEL_28;
      }
      --*(_DWORD *)v37[0];
    }
    if (!v26)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_41:
  if (v2)
  {
    *((_QWORD *)this + 23) = 0;
    v32 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v32)
    {
      v33 = v2;
      do
      {
        v34 = *v33;
        if (*v33 != (WebCore::GeoNotifier *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
            {
              WebCore::GeoNotifier::~GeoNotifier(v34, v4);
              WTF::fastFree(v35, v36);
            }
            else
            {
              --*(_DWORD *)v34;
            }
          }
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    result = WTF::fastFree((WTF *)(v2 - 2), v4);
  }
  v30 = *((_QWORD *)this + 7);
  if (!v30 || !*(_DWORD *)(v30 - 12))
  {
    v31 = *((_QWORD *)this + 8);
    if (!v31 || !*(_DWORD *)(v31 - 12))
      return WebCore::Geolocation::stopUpdating(this);
  }
  return result;
}

uint64_t *WebCore::Geolocation::clearWatch(uint64_t *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WebCore::GeoNotifier *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  if (a2 >= 1)
  {
    v21 = v2;
    v22 = v3;
    v5 = this;
    v7 = this + 8;
    v6 = this[8];
    if (v6)
    {
      v8 = *(_DWORD *)(v6 - 8);
      v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
      v11 = v8 & (v10 ^ HIWORD(v10));
      v12 = *(_DWORD *)(v6 + 16 * v11);
      if (v12 == a2)
      {
LABEL_7:
        v14 = *(WTF::StringImpl **)(v6 + 16 * v11 + 8);
        if (v14)
          WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>(this + 10, v14);
      }
      else
      {
        v13 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v13) & v8;
          v12 = *(_DWORD *)(v6 + 16 * v11);
          ++v13;
          if (v12 == a2)
            goto LABEL_7;
        }
      }
    }
    v20 = a2;
    this = WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::take(v7, &v20, &v19);
    if (v19)
    {
      WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::remove(v5 + 9, (WTF::StringImpl *)&v19);
      this = (uint64_t *)v19;
      v19 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::GeoNotifier::~GeoNotifier((WebCore::GeoNotifier *)this, v15);
          this = (uint64_t *)WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    v16 = v5[7];
    if ((!v16 || !*(_DWORD *)(v16 - 12)) && (!*v7 || !*(_DWORD *)(*v7 - 12)))
      return (uint64_t *)WebCore::Geolocation::stopUpdating((WebCore::Geolocation *)v5);
  }
  return this;
}

uint64_t WebCore::Geolocation::makeSuccessCallbacks(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  WebCore::GeoNotifier **v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  void *v14;
  uint64_t v16;
  WebCore::GeoNotifier **v17;
  WebCore::GeoNotifier *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1 + 7;
  v23 = 0;
  v24 = 0;
  WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&,void>::map(&v23, (_QWORD **)a1 + 7);
  v21 = 0;
  v22 = 0;
  v5 = a1 + 8;
  WebCore::Geolocation::Watchers::getNotifiersVector(a1 + 8, (uint64_t)&v21);
  v7 = (WebCore::GeoNotifier **)a1[7];
  if (v7)
  {
    *v4 = 0;
    v16 = *((unsigned int *)v7 - 1);
    if ((_DWORD)v16)
    {
      v17 = v7;
      do
      {
        v18 = *v17;
        if (*v17 != (WebCore::GeoNotifier *)-1)
        {
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 1)
            {
              WebCore::GeoNotifier::~GeoNotifier(v18, v6);
              WTF::fastFree(v19, v20);
            }
            else
            {
              --*(_DWORD *)v18;
            }
          }
        }
        ++v17;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v7 - 2), v6);
  }
  if (HIDWORD(v24))
  {
    v8 = v23;
    v9 = 8 * HIDWORD(v24);
    while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 96) == 2)
    {
      v10 = *(_DWORD **)(*(_QWORD *)v8 + 16);
      ++v10[4];
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2);
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[4];
      v8 += 8;
      v9 -= 8;
      if (!v9)
        goto LABEL_10;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x195355440);
  }
LABEL_10:
  if (HIDWORD(v22))
  {
    v11 = v21;
    v12 = 8 * HIDWORD(v22);
    while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 96) == 2)
    {
      v13 = *(_DWORD **)(*(_QWORD *)v11 + 16);
      ++v13[4];
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v13 + 40))(v13, a2);
      if (v13[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[4];
      v11 += 8;
      v12 -= 8;
      if (!v12)
        goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_18:
  if ((!*v4 || !*(_DWORD *)(*v4 - 12)) && (!*v5 || !*(_DWORD *)(*v5 - 12)))
    WebCore::Geolocation::stopUpdating((WebCore::Geolocation *)a1);
  WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v6);
  return WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v14);
}

uint64_t WebCore::Geolocation::cancelRequests(uint64_t result, unsigned int a2)
{
  WTF *v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF *v14[11];

  if (a2)
  {
    v14[1] = v5;
    v14[2] = v4;
    v14[9] = v2;
    v14[10] = v3;
    v6 = (_QWORD **)result;
    v7 = 8 * a2;
    do
    {
      v8 = *v6;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v14[0];
      v10 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v10 = 0x200000001;
      if (v9)
        *(_DWORD *)v9 += 2;
      *(_QWORD *)(v10 + 8) = v9;
      *(_BYTE *)(v10 + 16) = 0;
      v13 = 0;
      v14[0] = (WTF *)v10;
      WebCore::GeoNotifier::setFatalError(v8, (WTF::StringImpl *)v14);
      if (v14[0])
        WTF::RefCounted<WebCore::GeolocationPositionError>::deref((WTF::StringImpl **)v14[0], v11);
      result = (uint64_t)WTF::Ref<WebCore::GeolocationPositionError,WTF::RawPtrTraits<WebCore::GeolocationPositionError>,WTF::DefaultRefDerefTraits<WebCore::GeolocationPositionError>>::~Ref(&v13, v11);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          result = WTF::StringImpl::destroy(v9, v12);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebCore::Geolocation::extractNotifiersWithCachedPosition(char **a1, unsigned int *a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  char **v34;
  char *v35;
  unint64_t v36;

  v35 = 0;
  v36 = 0;
  v2 = *a1;
  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    v4 = (char *)a2;
    v34 = a1;
    v5 = 0;
    v6 = 0;
    if (a2)
    {
      v7 = 0;
      v8 = 8 * v3;
      while (1)
      {
        v9 = *(_DWORD **)v2;
        if (*(_BYTE *)(*(_QWORD *)v2 + 112))
        {
          v10 = *((unsigned int *)v4 + 3);
          if ((_DWORD)v10 == *((_DWORD *)v4 + 2))
          {
            v11 = v10 + (v10 >> 2);
            if (v11 >= 0x10)
              v12 = v11 + 1;
            else
              v12 = 16;
            if (v12 <= v10 + 1)
              v13 = v10 + 1;
            else
              v13 = v12;
            if (v13 >> 29)
              goto LABEL_57;
            v14 = *(_QWORD **)v4;
            v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
            *((_DWORD *)v4 + 2) = v13;
            *(_QWORD *)v4 = v15;
            memcpy(v15, v14, 8 * v10);
            if (v14)
            {
              if (*(_QWORD **)v4 == v14)
              {
                *(_QWORD *)v4 = 0;
                *((_DWORD *)v4 + 2) = 0;
              }
              WTF::fastFree((WTF *)v14, a2);
            }
            v16 = *((unsigned int *)v4 + 3);
            v17 = *(_QWORD **)v4;
            ++*v9;
            v17[v16] = v9;
            *((_DWORD *)v4 + 3) = v16 + 1;
          }
          else
          {
            v23 = *(_QWORD **)v4;
            ++*v9;
            v23[v10] = v9;
            *((_DWORD *)v4 + 3) = v10 + 1;
          }
        }
        else
        {
          v18 = v6;
          if (v6 == (_DWORD)v5)
          {
            v19 = ((unint64_t)v5 >> 2) + v5;
            if (v19 >= 0x10)
              v20 = v19 + 1;
            else
              v20 = 16;
            if (v20 <= (unint64_t)v6 + 1)
              v21 = v6 + 1;
            else
              v21 = v20;
            if (v21 >> 29)
              goto LABEL_57;
            v22 = (char *)WTF::fastMalloc((WTF *)(8 * v21));
            v35 = v22;
            memcpy(v22, v7, 8 * v6);
            if (v7)
            {
              if (v22 == v7)
              {
                LODWORD(v21) = 0;
                v22 = 0;
                v35 = 0;
              }
              WTF::fastFree((WTF *)v7, a2);
            }
            ++*v9;
            v6 = v5 + 1;
            *(_QWORD *)&v22[8 * v5] = v9;
            LODWORD(v5) = v21;
            v7 = v22;
          }
          else
          {
            ++v6;
            ++*v9;
            *(_QWORD *)&v7[8 * v18] = v9;
          }
        }
        v2 += 8;
        v8 -= 8;
        if (!v8)
          goto LABEL_55;
      }
    }
    v25 = 8 * v3;
    do
    {
      v26 = *(_DWORD **)v2;
      if (!*(_BYTE *)(*(_QWORD *)v2 + 112))
      {
        if (v6 == (_DWORD)v5)
        {
          v27 = ((unint64_t)v5 >> 2) + v5;
          if (v27 >= 0x10)
            v28 = v27 + 1;
          else
            v28 = 16;
          if (v28 <= (unint64_t)v6 + 1)
            v29 = v6 + 1;
          else
            v29 = v28;
          if (v29 >> 29)
          {
LABEL_57:
            __break(0xC471u);
            JUMPOUT(0x195355838);
          }
          v30 = (char *)WTF::fastMalloc((WTF *)(8 * v29));
          v35 = v30;
          memcpy(v30, v4, 8 * v6);
          if (v4)
          {
            if (v30 == v4)
            {
              v29 = 0;
              v30 = 0;
              v35 = 0;
            }
            WTF::fastFree((WTF *)v4, a2);
          }
          ++*v26;
          v31 = (unsigned int *)&v30[8 * v5];
          v4 = v30;
        }
        else
        {
          v31 = (unsigned int *)&v4[8 * v6];
          ++*v26;
          v29 = v5;
          LODWORD(v5) = v6;
        }
        v6 = v5 + 1;
        *(_QWORD *)v31 = v26;
        v5 = v29;
      }
      v2 += 8;
      v25 -= 8;
    }
    while (v25);
LABEL_55:
    a1 = v34;
    v24 = v35;
    v2 = *v34;
    LODWORD(v3) = *((_DWORD *)v34 + 3);
  }
  else
  {
    v6 = 0;
    LODWORD(v5) = 0;
    v24 = 0;
  }
  *a1 = v24;
  v35 = v2;
  v32 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v5;
  *((_DWORD *)a1 + 3) = v6;
  v36 = __PAIR64__(v3, v32);
  return WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, a2);
}

WTF::StringImpl *std::exchange[abi:sn180100]<WTF::String,WTF::String>(WTF::StringImpl **a1, WTF::StringImpl *a2, uint64_t *a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *result;

  v3 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *a1 = v3;
  v4 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void *WebCore::GeolocationController::addObserver(WebCore::GeolocationController *this, WebCore::Geolocation *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  _BOOL4 v8;
  _QWORD **v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _BOOL8 v17;
  _BYTE v18[24];
  WebCore::Geolocation *v19;

  v7 = (uint64_t *)((char *)this + 168);
  v6 = *((_QWORD *)this + 21);
  if (v6)
    v8 = *(_DWORD *)(v6 - 12) != 0;
  else
    v8 = 0;
  v9 = (_QWORD **)((char *)this + 160);
  ++*((_DWORD *)a2 + 8);
  v19 = a2;
  result = WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::add((uint64_t *)this + 20, (uint64_t *)&v19, (uint64_t)v18);
  v11 = (uint64_t)v19;
  v19 = 0;
  if (v11)
    result = WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v11 + 32));
  if (a3)
  {
    ++*((_DWORD *)a2 + 8);
    v19 = a2;
    result = WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::add(v7, (uint64_t *)&v19, (uint64_t)v18);
    v12 = (uint64_t)v19;
    v19 = 0;
    if (v12)
      result = WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v12 + 32));
  }
  if (*((_BYTE *)this + 192))
  {
    if (((v8 | a3 ^ 1) & 1) == 0)
      return (void *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4), 1);
  }
  else if ((*(_WORD *)(*((_QWORD *)this + 3) + 658) & 4) != 0)
  {
    v13 = *v9;
    if (*v9)
    {
      if (*((_DWORD *)v13 - 3))
      {
        v14 = *((_QWORD *)this + 4);
        do
        {
          v15 = WTF::weakRandomNumber<unsigned int>();
          if (*v9)
            v16 = v13[*(_DWORD *)(*v9 - 1) & v15];
          else
            v16 = *v13;
          v13 = *v9;
        }
        while ((unint64_t)(v16 + 1) < 2);
        if (*v7)
          v17 = *(_DWORD *)(*v7 - 12) != 0;
        else
          v17 = 0;
        result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v14 + 8))(v14, v16 + 104, v17);
        *((_BYTE *)this + 192) = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::GeolocationController::removeObserver(WebCore::GeolocationController *this, WebCore::Geolocation *a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;

  v4 = (uint64_t *)((char *)this + 160);
  result = *((_QWORD *)this + 20);
  if (result)
  {
    result = WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>,WebCore::Geolocation const*>(result, (uint64_t)a2);
    if (result)
    {
      v7 = (_QWORD *)((char *)this + 168);
      v6 = *((_QWORD *)this + 21);
      v8 = v6 && *(_DWORD *)(v6 - 12) != 0;
      WTF::HashSet<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>(v4, (uint64_t)a2);
      result = WTF::HashSet<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>((uint64_t *)this + 21, (uint64_t)a2);
      if (*((_BYTE *)this + 192))
      {
        if (*v4 && *(_DWORD *)(*v4 - 12))
        {
          if (v8 && (!*v7 || !*(_DWORD *)(*v7 - 12)))
            return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4), 0);
        }
        else
        {
          result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
          *((_BYTE *)this + 192) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Geolocation::frame(WebCore::Geolocation *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 64);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (!*(_BYTE *)(v6 + 178))
  {
    v7 = *(_QWORD *)(v6 + 240);
    if (v7)
      return *(_QWORD *)(v7 + 8);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::GeolocationController::~GeolocationController(WebCore::GeolocationController *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  *(_QWORD *)this = off_1E3357068;
  *((_QWORD *)this + 1) = &unk_1E3357090;
  (***((void (****)(_QWORD))this + 4))(*((_QWORD *)this + 4));
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 22);
  if (v4)
  {
    v11 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v11)
    {
      v12 = (uint64_t *)*((_QWORD *)this + 22);
      do
      {
        v13 = *v12;
        if (*v12 != -1)
        {
          *v12 = 0;
          if (v13)
            WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v13 + 32));
        }
        ++v12;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v4 - 16), v2);
  }
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    v14 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v14)
    {
      v15 = (uint64_t *)*((_QWORD *)this + 21);
      do
      {
        v16 = *v15;
        if (*v15 != -1)
        {
          *v15 = 0;
          if (v16)
            WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v16 + 32));
        }
        ++v15;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  v6 = *((_QWORD *)this + 20);
  if (v6)
  {
    v17 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)*((_QWORD *)this + 20);
      do
      {
        v19 = *v18;
        if (*v18 != -1)
        {
          *v18 = 0;
          if (v19)
            WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v19 + 32));
        }
        ++v18;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v6 - 16), v2);
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::GeolocationController::~GeolocationController(this);
  WTF::fastFree(v1, v2);
}

uint64_t **WTF::HashSet<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTableTraits>::~HashSet(uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  if (*a1)
  {
    v5 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v5)
    {
      v6 = *a1;
      do
      {
        v7 = *v6;
        if (*v6 != -1)
        {
          *v6 = 0;
          if (v7)
            WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v7 + 32));
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

void `non-virtual thunk to'WebCore::GeolocationController::~GeolocationController(WebCore::GeolocationController *this)
{
  WebCore::GeolocationController::~GeolocationController((WebCore::GeolocationController *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebCore::GeolocationController::~GeolocationController((WebCore::GeolocationController *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::GeolocationController::startUpdatingIfNecessary(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;

  if (!*(_BYTE *)(this + 192))
  {
    v1 = this;
    if ((*(_WORD *)(*(_QWORD *)(this + 24) + 658) & 4) != 0)
    {
      v2 = *(_QWORD **)(this + 160);
      if (v2)
      {
        if (*((_DWORD *)v2 - 3))
        {
          v3 = *(_QWORD *)(this + 32);
          do
          {
            v4 = WTF::weakRandomNumber<unsigned int>();
            v5 = *(_QWORD *)(v1 + 160);
            if (v5)
              v6 = v2[*(_DWORD *)(v5 - 8) & v4];
            else
              v6 = *v2;
            v2 = *(_QWORD **)(v1 + 160);
          }
          while ((unint64_t)(v6 + 1) < 2);
          v7 = v6 + 104;
          v8 = *(_QWORD *)(v1 + 168);
          if (v8)
            v9 = *(_DWORD *)(v8 - 12) != 0;
          else
            v9 = 0;
          this = (*(uint64_t (**)(uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v3 + 8))(v3, v7, v9);
          *(_BYTE *)(v1 + 192) = 1;
        }
      }
    }
  }
  return this;
}

char *WebCore::GeolocationController::positionChanged(char *result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  char *v9;
  WTF *v10;
  char *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Geolocation **v17;
  WebCore::Geolocation *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  *(_OWORD *)(result + 88) = a2[3];
  *(_OWORD *)(result + 72) = v4;
  *(_OWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 40) = v2;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  result[152] = *((_BYTE *)a2 + 112);
  *(_OWORD *)(result + 136) = v7;
  *(_OWORD *)(result + 120) = v6;
  *(_OWORD *)(result + 104) = v5;
  v8 = (_QWORD *)*((_QWORD *)result + 20);
  if (v8)
  {
    v22 = *((unsigned int *)v8 - 3);
    if ((_DWORD)v22)
    {
      if (v22 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v23 = result;
      v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
      v8 = (_QWORD *)*((_QWORD *)v23 + 20);
      result = (char *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v8);
      if (!v8)
        goto LABEL_3;
    }
    else
    {
      result = (char *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*((_QWORD **)result + 20));
      v10 = 0;
    }
    v11 = (char *)&v8[*((unsigned int *)v8 - 1)];
    goto LABEL_4;
  }
  result = (char *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(0);
  v10 = 0;
LABEL_3:
  v11 = 0;
LABEL_4:
  if (v11 != result)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = v13;
      v15 = *(_QWORD *)result;
      result += 8;
      ++*(_DWORD *)(v15 + 32);
      *((_QWORD *)v10 + v12) = v15;
      while (result != v9)
      {
        if ((unint64_t)(*(_QWORD *)result + 1) > 1)
          goto LABEL_11;
        result += 8;
      }
      result = v9;
LABEL_11:
      ++v12;
      ++v13;
    }
    while (result != v11);
    if (v12)
    {
      v16 = 8 * v14;
      v17 = (WebCore::Geolocation **)v10;
      do
      {
        v18 = *v17++;
        result = (char *)WebCore::Geolocation::positionChanged(v18);
        v16 -= 8;
      }
      while (v16);
      v19 = 8 * v14;
      v20 = v10;
      do
      {
        v21 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (v21)
          result = (char *)WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v21 + 32));
        v20 = (WTF *)((char *)v20 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  if (v10)
    return (char *)WTF::fastFree(v10, v9);
  return result;
}

uint64_t WebCore::GeolocationController::errorOccurred(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  _QWORD *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  int v15;
  WTF::StringImpl **v16;
  _DWORD *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD **)(result + 160);
  if (!v3)
  {
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(0);
    v5 = 0;
LABEL_3:
    v6 = 0;
    goto LABEL_4;
  }
  v25 = *((unsigned int *)v3 - 3);
  if ((_DWORD)v25)
  {
    if (v25 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v26 = result;
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v25));
    v3 = *(_QWORD **)(v26 + 160);
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v3);
    if (!v3)
      goto LABEL_3;
  }
  else
  {
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*(_QWORD **)(result + 160));
    v5 = 0;
  }
  v6 = &v3[*((unsigned int *)v3 - 1)];
LABEL_4:
  if (v6 == (_QWORD *)result)
    goto LABEL_43;
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = *(_QWORD *)result;
    result += 8;
    ++*(_DWORD *)(v10 + 32);
    *((_QWORD *)v5 + v7) = v10;
    while ((WTF::StringImpl *)result != v4)
    {
      if ((unint64_t)(*(_QWORD *)result + 1) > 1)
        goto LABEL_11;
      result += 8;
    }
    result = (uint64_t)v4;
LABEL_11:
    ++v7;
    ++v8;
  }
  while ((_QWORD *)result != v6);
  if (!v7)
    goto LABEL_43;
  v11 = 8 * v9;
  v12 = (uint64_t **)v5;
  do
  {
    v13 = *v12;
    v14 = *((unsigned __int8 *)*v12 + 112);
    if (*(_DWORD *)(a2 + 4))
      v15 = 2;
    else
      v15 = 1;
    result = WTF::fastMalloc((WTF *)0x18);
    v16 = (WTF::StringImpl **)result;
    *(_DWORD *)result = 1;
    *(_DWORD *)(result + 4) = v15;
    v17 = *(_DWORD **)(a2 + 8);
    if (!v14)
    {
      if (v17)
        *v17 += 2;
      *(_QWORD *)(result + 8) = v17;
      *(_BYTE *)(result + 16) = 0;
      result = WebCore::Geolocation::handleError(v13, result);
      if (*(_DWORD *)v16 != 1)
      {
        --*(_DWORD *)v16;
        goto LABEL_27;
      }
      v21 = v16[1];
      v16[1] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v4);
        else
          *(_DWORD *)v21 -= 2;
      }
      v20 = (WTF *)v16;
      goto LABEL_37;
    }
    if (v17)
      *v17 += 2;
    *(_QWORD *)(result + 8) = v17;
    *(_BYTE *)(result + 16) = 0;
    v18 = (WTF::StringImpl **)v13[15];
    v13[15] = result;
    if (v18)
    {
      if (*(_DWORD *)v18 != 1)
      {
        --*(_DWORD *)v18;
        goto LABEL_27;
      }
      v19 = v18[1];
      v18[1] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v4);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = (WTF *)v18;
LABEL_37:
      result = WTF::fastFree(v20, v4);
    }
LABEL_27:
    ++v12;
    v11 -= 8;
  }
  while (v11);
  v22 = 8 * v9;
  v23 = v5;
  do
  {
    v24 = *(_QWORD *)v23;
    *(_QWORD *)v23 = 0;
    if (v24)
      result = (uint64_t)WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v24 + 32));
    v23 = (WTF *)((char *)v23 + 8);
    v22 -= 8;
  }
  while (v22);
LABEL_43:
  if (v5)
    return WTF::fastFree(v5, v4);
  return result;
}

void WebCore::NavigatorGeolocation::~NavigatorGeolocation(WebCore::NavigatorGeolocation *this)
{
  WebCore::Geolocation *v2;
  bmalloc::api *v3;
  void *v4;

  v2 = (WebCore::Geolocation *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33570B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 8) == 1)
    {
      WebCore::Geolocation::~Geolocation(v2);
      bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)v2 + 8);
    }
  }
}

void WebCore::NavigatorGeolocation::~NavigatorGeolocation(WebCore::NavigatorGeolocation *this, void *a2)
{
  WebCore::Geolocation *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WebCore::Geolocation *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33570B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 8) == 1)
    {
      WebCore::Geolocation::~Geolocation(v3);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 8);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t *WebCore::AppHighlightRangeData::create@<X0>(WebCore::AppHighlightRangeData *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[15];
  uint64_t v11;
  char v12;

  WebCore::FragmentedSharedBuffer::makeContiguous(this, &v11);
  if (!*(_DWORD *)(v11 + 20))
    goto LABEL_4;
  v4 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5 != -1)
  {
    v10[0] = &v12;
    ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v5])(v10, v4 + 8);
LABEL_4:
    WTF::Persistence::Decoder::Decoder();
    *a2 = 0;
    a2[64] = 0;
    WTF::Persistence::Decoder::operator>><WebCore::AppHighlightRangeData,(void *)0>((uint64_t)v10, (uint64_t)a2);
    WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v10);
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v11, v6);
  }
  v8 = std::__throw_bad_variant_access[abi:sn180100]();
  return (uint64_t *)WTF::Persistence::Decoder::operator>><WebCore::AppHighlightRangeData,(void *)0>(v8, v9);
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::AppHighlightRangeData,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int v16[6];
  unsigned int v17[6];
  unsigned __int8 v18;

  WTF::Persistence::Coder<WebCore::AppHighlightRangeData>::decodeForPersistence(&v14);
  if (*(unsigned __int8 *)(a2 + 64) == v18)
  {
    if (!*(_BYTE *)(a2 + 64))
      return a1;
    WebCore::AppHighlightRangeData::operator=(a2, (uint64_t)&v14);
  }
  else if (*(_BYTE *)(a2 + 64))
  {
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a2 + 40), v4);
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a2 + 16), v6);
    v7 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    *(_BYTE *)(a2 + 64) = 0;
  }
  else
  {
    WebCore::AppHighlightRangeData::AppHighlightRangeData(a2, (uint64_t)&v14);
    *(_BYTE *)(a2 + 64) = 1;
  }
  if (v18)
  {
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17, v5);
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, v9);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

void WebCore::AppHighlightStorage::~AppHighlightStorage(WebCore::AppHighlightStorage *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_BYTE *)this + 96))
  {
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 18, a2);
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 12, v3);
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 4, a2);
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v10)
      {
        v13 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
        v7 = v13;
      }
      v11 = *(WTF **)(v7 + 16);
      if (v11)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v12 = v7;
        WTF::fastFree(v11, v6);
        v7 = v12;
      }
      WTF::fastFree((WTF *)v7, v6);
    }
  }
}

void WebCore::AppHighlightStorage::storeAppHighlight(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  void *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[2];
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = *v2;
  WebCore::plainText((_DWORD *)(*v2 + 16), 0, 0, (const WTF::String *)&v44);
  v5 = v44;
  if (!v44)
  {
    v43 = 0;
    goto LABEL_6;
  }
  if (*((_DWORD *)v44 + 1) > 0x1F4u)
  {
    WTF::StringImpl::substring(v44);
    v5 = v44;
    v44 = 0;
    if (!v5)
      goto LABEL_6;
  }
  else
  {
    *(_DWORD *)v44 += 2;
    v43 = v5;
    v44 = 0;
  }
  if (*(_DWORD *)v5 == 2)
    v5 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v4);
  else
    *(_DWORD *)v5 -= 2;
LABEL_6:
  WTF::createVersion4UUIDString(v5);
  v6 = *(_QWORD *)(v3 + 16);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::makeNodePath((uint64_t)&v44, v6);
  v7 = *(_DWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  *(_DWORD *)(v8 + 24) += 2;
  WebCore::makeNodePath((uint64_t)&v31, v8);
  v10 = *(_DWORD *)(v3 + 40);
  v11 = v42;
  if (v42)
    *(_DWORD *)v42 += 2;
  v33[0] = v11;
  v12 = v43;
  if (v43)
    *(_DWORD *)v43 += 2;
  v13 = v45;
  v34 = 0;
  v35 = 0;
  v33[1] = v12;
  v36 = v45;
  if (v45)
  {
    if (v45 >> 27)
      goto LABEL_57;
    v14 = WTF::fastMalloc((WTF *)(32 * v45));
    v35 = v13;
    v34 = v14;
    if (v45)
    {
      v15 = v44;
      v16 = (WTF::StringImpl *)((char *)v44 + 32 * v45);
      do
      {
        v17 = *(_DWORD **)v15;
        if (*(_QWORD *)v15)
          *v17 += 2;
        *(_QWORD *)v14 = v17;
        v18 = (_DWORD *)*((_QWORD *)v15 + 1);
        if (v18)
          *v18 += 2;
        *(_QWORD *)(v14 + 8) = v18;
        v19 = (_DWORD *)*((_QWORD *)v15 + 2);
        if (v19)
          *v19 += 2;
        *(_QWORD *)(v14 + 16) = v19;
        *(_DWORD *)(v14 + 24) = *((_DWORD *)v15 + 6);
        v15 = (WTF::StringImpl *)((char *)v15 + 32);
        v14 += 32;
      }
      while (v15 != v16);
    }
  }
  v37 = v7;
  v20 = HIDWORD(v32);
  v38 = 0;
  v39 = 0;
  v40 = HIDWORD(v32);
  if (!HIDWORD(v32))
    goto LABEL_32;
  if (!(HIDWORD(v32) >> 27))
  {
    v21 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v32)));
    v39 = v20;
    v38 = v21;
    if (HIDWORD(v32))
    {
      v22 = v31;
      v23 = v31 + 32 * HIDWORD(v32);
      do
      {
        v24 = *(_DWORD **)v22;
        if (*(_QWORD *)v22)
          *v24 += 2;
        *(_QWORD *)v21 = v24;
        v25 = *(_DWORD **)(v22 + 8);
        if (v25)
          *v25 += 2;
        *(_QWORD *)(v21 + 8) = v25;
        v26 = *(_DWORD **)(v22 + 16);
        if (v26)
          *v26 += 2;
        *(_QWORD *)(v21 + 16) = v26;
        *(_DWORD *)(v21 + 24) = *(_DWORD *)(v22 + 24);
        v22 += 32;
        v21 += 32;
      }
      while (v22 != v23);
    }
LABEL_32:
    v41 = v10;
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v31, v9);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v27);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v44, (WTF::StringImpl *)v27);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v28);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    v29 = v42;
    v42 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v43;
    v43 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    if (v12)
    {
      if (*((_DWORD *)v12 + 1))
        *(_DWORD *)v12 += 2;
    }
    WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v44);
    WTF::Persistence::Coder<WebCore::AppHighlightRangeData>::encodeForPersistence((uint64_t)&v44, (uint64_t)v33);
  }
LABEL_57:
  __break(0xC471u);
  JUMPOUT(0x195356AA0);
}

unsigned int *WebCore::AppHighlightStorage::restoreAndScrollToAppHighlight(uint64_t a1, WTF **a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28[6];
  unsigned int v29[6];
  unsigned __int8 v30;
  _QWORD v31[15];
  uint64_t v32;

  WebCore::FragmentedSharedBuffer::makeContiguous(*a2, &v32);
  if (*(_DWORD *)(v32 + 20))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8);
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_38;
    }
    v31[0] = &v26;
    ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(v31, v5 + 8);
  }
  WTF::Persistence::Decoder::Decoder();
  LOBYTE(v26) = 0;
  v30 = 0;
  WTF::Persistence::Decoder::operator>><WebCore::AppHighlightRangeData,(void *)0>((uint64_t)v31, (uint64_t)&v26);
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v31);
  result = (unsigned int *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v32, v7);
  if (!v30)
    return result;
  v9 = (uint64_t)WebCore::AppHighlightStorage::attemptToRestoreHighlightAndScroll(a1, (uint64_t)&v26, a3);
  if ((v9 & 1) == 0)
  {
    if (a3)
    {
      v11 = (uint64_t *)(a1 + 32);
      if (*(unsigned __int8 *)(a1 + 96) == v30)
      {
        if (*(_BYTE *)(a1 + 96))
          v9 = WebCore::AppHighlightRangeData::operator=(a1 + 32, (uint64_t)&v26);
      }
      else if (*(_BYTE *)(a1 + 96))
      {
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 72), v10);
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 48), v15);
        v17 = *(WTF::StringImpl **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        v9 = *v11;
        *v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            v9 = WTF::StringImpl::destroy((WTF::StringImpl *)v9, v16);
          else
            *(_DWORD *)v9 -= 2;
        }
        *(_BYTE *)(a1 + 96) = 0;
      }
      else
      {
        v9 = WebCore::AppHighlightRangeData::AppHighlightRangeData(a1 + 32, (uint64_t)&v26);
        *(_BYTE *)(a1 + 96) = 1;
      }
      goto LABEL_23;
    }
    if (v30)
    {
      v12 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 24))
      {
        v13 = WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 16), v12 + 1, (unint64_t)&v26);
        v14 = *(_QWORD *)(a1 + 16) + ((unint64_t)*(unsigned int *)(a1 + 28) << 6);
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 16) + (v12 << 6);
        v13 = (uint64_t)&v26;
      }
      v9 = WebCore::AppHighlightRangeData::AppHighlightRangeData(v14, v13);
      ++*(_DWORD *)(a1 + 28);
      goto LABEL_23;
    }
LABEL_38:
    v23 = std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::AppHighlightStorage::attemptToRestoreHighlightAndScroll(v23, v24, v25);
  }
LABEL_23:
  result = (unsigned int *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  *(_QWORD *)(a1 + 8) = v19;
  if (v30)
  {
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v18);
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, v20);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    result = (unsigned int *)v26;
    v26 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
      else
        *result -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::AppHighlightStorage::attemptToRestoreHighlightAndScroll(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WebCore::Node *v11;
  int v12;
  int v13;
  uint64_t v14;
  WebCore::Node *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  WTF::StringImpl **v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int i;
  WTF *v33;
  unsigned int *v34;
  WTF::StringImpl *v35;
  int v36;
  __int16 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  WTF::StringImpl *v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  uint64_t v48;
  uint64_t v49;
  WebCore::Node *v50;
  int v51;
  int v52;
  unsigned int *result;
  WebCore::Node *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  WTF *v68;
  void *v69;
  WebCore::TextIndicator *v70;
  unint64_t v71;
  WebCore::Node *v72;
  WTF *v73;
  void *v74;
  WTF *v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  _BYTE v87[104];
  char v88;
  WebCore::Node *v89[2];
  WebCore::Node *v90[2];
  __int128 v91;
  WTF *v92;
  int v93;
  int v94;
  int v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  int v100;
  WebCore::Node *v101;
  int v102;
  unint64_t v103;
  int v104;
  char v105;
  WebCore::Node *v106;
  int v107;
  char v108;
  unint64_t v109;
  int v110;
  WebCore::Node *v111;
  WTF::StringImpl **v112[2];

  if (!*(_QWORD *)a1)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (!v4)
    return 0;
  v7 = a1;
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::findNode((unsigned int *)v112, (unsigned int *)(a2 + 16), (_QWORD *)v4);
  v10 = v112[0];
  if (v112[0])
  {
    WebCore::findNode((unsigned int *)&v111, (unsigned int *)(a2 + 40), (_QWORD *)v4);
    v11 = v111;
    if (!v111)
    {
      LOBYTE(v101) = 0;
      v105 = 0;
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
      goto LABEL_19;
    }
    v12 = *(_DWORD *)(a2 + 32);
    v111 = 0;
    v112[0] = 0;
    v89[0] = (WebCore::Node *)v10;
    LODWORD(v89[1]) = v12;
    BYTE4(v89[1]) &= 0xF0u;
    v13 = *(_DWORD *)(a2 + 56);
    v106 = v11;
    v107 = v13;
    v108 &= 0xF0u;
    if ((*((_BYTE *)v10 + 22) & 8) != 0 && (*((_BYTE *)v11 + 22) & 8) != 0)
    {
      WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)v89, (uint64_t *)&v106, (uint64_t)&v101);
      v11 = v106;
      v106 = 0;
      if (!v11)
      {
LABEL_15:
        v15 = v89[0];
        v89[0] = 0;
        if (v15)
        {
          if (*((_DWORD *)v15 + 6) == 2)
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v15, v8);
          }
          else
          {
            *((_DWORD *)v15 + 6) -= 2;
          }
        }
        v112[0] = 0;
        goto LABEL_19;
      }
    }
    else
    {
      LOBYTE(v101) = 0;
      v105 = 0;
      v106 = 0;
    }
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v8);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    goto LABEL_15;
  }
  LOBYTE(v101) = 0;
  v105 = 0;
LABEL_19:
  if (v105)
    goto LABEL_117;
  v112[0] = 0;
  v16 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v16)
  {
    v17 = *(WTF::StringImpl ***)(a2 + 16);
    v18 = 32 * v16;
    do
    {
      if (*v17 && *((_DWORD *)*v17 + 1))
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v112, v17, v9, (uint64_t)v89);
      v17 += 4;
      v18 -= 32;
    }
    while (v18);
  }
  v19 = *(_QWORD *)(v4 + 1272);
  if (v19
    && (*(_WORD *)(v19 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v10 = *(WTF::StringImpl ***)(v19 + 80);
    if (v10)
    {
      while ((*((_WORD *)v10 + 14) & 0x10) == 0
           || *((_QWORD *)v10[12] + 3) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        v10 = (WTF::StringImpl **)v10[7];
        if (!v10)
          goto LABEL_36;
      }
      *((_DWORD *)v10 + 6) += 2;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_36:
  v85 = a3;
  v86 = v7;
  v20 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(a2 + 40);
    v22 = v21 + 32 * v20;
    do
    {
      v24 = *(int **)(v22 - 32);
      v22 -= 32;
      v23 = v24;
      if (v24)
      {
        v25 = v23[1];
        v26 = *v23 + 2;
        *v23 = v26;
        if (v25)
        {
          v27 = v112[0];
          if (v112[0])
          {
            v28 = *((_DWORD *)v112[0] - 2);
            v29 = v23[4];
            if (v29 < 0x100)
              v30 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v23);
            else
              v30 = v29 >> 8;
            for (i = 0; ; v30 = i + v3)
            {
              v3 = v30 & v28;
              v33 = v27[v3];
              if (!v33)
                goto LABEL_78;
              if (v33 != (WTF *)-1 && (WTF::equal(v33, (const WTF::StringImpl *)v23, v9) & 1) != 0)
                break;
              ++i;
            }
            v34 = *(unsigned int **)(v4 + 120);
            if (v34)
            {
              if ((v23[4] & 0x10) != 0)
              {
                *v23 += 2;
                v106 = (WebCore::Node *)v23;
                v35 = (WTF::StringImpl *)v23;
LABEL_56:
                WebCore::TreeScopeOrderedMap::getElementById(v34, (const WTF::AtomString *)&v106, (const WebCore::TreeScope *)(v4 + 96), (uint64_t *)v89);
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v8);
                else
                  *(_DWORD *)v35 -= 2;
                v35 = v89[0];
              }
              else
              {
                WTF::AtomStringImpl::lookUpSlowCase((WTF::AtomStringImpl *)v23, (WTF::StringImpl *)v8);
                v35 = v89[0];
                v106 = v89[0];
                if (v89[0])
                {
                  v34 = *(unsigned int **)(v4 + 120);
                  goto LABEL_56;
                }
              }
            }
            else
            {
              v35 = 0;
            }
            v89[0] = 0;
            if (v10)
            {
              if (*((_DWORD *)v10 + 6) == 2)
              {
                if ((*((_WORD *)v10 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
                  if (v89[0])
                  {
                    if (*((_DWORD *)v89[0] + 6) == 2)
                    {
                      if ((*((_WORD *)v89[0] + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v89[0], v8);
                    }
                    else
                    {
                      *((_DWORD *)v89[0] + 6) -= 2;
                    }
                  }
                }
              }
              else
              {
                *((_DWORD *)v10 + 6) -= 2;
              }
            }
            v31 = 4 * (v35 != 0);
            goto LABEL_63;
          }
LABEL_78:
          v31 = 6;
          v35 = (WTF::StringImpl *)v10;
LABEL_63:
          v26 = *v23;
          v10 = (WTF::StringImpl **)v35;
        }
        else
        {
          v31 = 6;
        }
        v36 = v26 - 2;
        if (v36)
          *v23 = v36;
        else
          WTF::StringImpl::destroy((WTF::StringImpl *)v23, (WTF::StringImpl *)v8);
        if (v31 != 6 && v31)
          break;
      }
    }
    while (v22 != v21);
  }
  if (!v10)
  {
    LOBYTE(v101) = 0;
    v105 = 0;
    v7 = v86;
    a3 = v85;
    goto LABEL_114;
  }
  *((_DWORD *)v10 + 6) += 4;
  v37 = *((_WORD *)v10 + 14);
  v7 = v86;
  a3 = v85;
  if ((v37 & 1) != 0)
  {
    v39 = v10[10];
    if (v39)
      LODWORD(v39) = *((_DWORD *)v39 + 1);
  }
  else if ((v37 & 4) != 0 && (v38 = v10[10]) != 0)
  {
    LODWORD(v39) = 0;
    do
    {
      LODWORD(v39) = (_DWORD)v39 + 1;
      v38 = (WTF::StringImpl *)*((_QWORD *)v38 + 7);
    }
    while (v38);
  }
  else
  {
    LODWORD(v39) = 0;
  }
  v89[0] = (WebCore::Node *)v10;
  LODWORD(v89[1]) = 0;
  v90[0] = (WebCore::Node *)v10;
  LODWORD(v90[1]) = (_DWORD)v39;
  WebCore::plainText(v89, 0, 0, (const WTF::String *)&v111);
  v40 = *(_QWORD *)(a2 + 8);
  if (v40)
    v8 = *(void **)(v40 + 8);
  else
    v8 = 0;
  if (!v111
    || (v41 = WTF::StringImpl::find(), v41 == -1)
    || ((v3 = v41, (v42 = *(_QWORD *)(a2 + 8)) == 0) ? (v8 = 0) : (v8 = *(void **)(v42 + 8)),
        !v111 || v41 != WTF::StringImpl::reverseFind()))
  {
    LOBYTE(v101) = 0;
    v105 = 0;
    goto LABEL_103;
  }
  v43 = *(_QWORD *)(a2 + 8);
  if (!v43)
    goto LABEL_193;
  for (j = *(unsigned int *)(v43 + 4); ; j = 0)
  {
    WebCore::resolveCharacterRange(v89, v3, j, 0, &v106);
    v101 = v106;
    v102 = v107;
    v103 = v109;
    v104 = v110;
    v105 = 1;
LABEL_103:
    v45 = v111;
    v111 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v90[0];
    v90[0] = 0;
    if (v46)
    {
      if (*((_DWORD *)v46 + 6) == 2)
      {
        if ((*((_WORD *)v46 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v46, v8);
      }
      else
      {
        *((_DWORD *)v46 + 6) -= 2;
      }
    }
    v47 = v89[0];
    v89[0] = 0;
    if (v47)
    {
      if (*((_DWORD *)v47 + 6) == 2)
      {
        if ((*((_WORD *)v47 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v47, v8);
      }
      else
      {
        *((_DWORD *)v47 + 6) -= 2;
      }
    }
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
LABEL_114:
    if (v112[0])
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v112[0], (WTF::StringImpl *)v8);
    if (!v105)
    {
      v14 = 0;
      goto LABEL_156;
    }
LABEL_117:
    v48 = WebCore::Document::appHighlightRegistry((WebCore::Document *)v4);
    if (v105)
      break;
LABEL_192:
    __break(1u);
LABEL_193:
    ;
  }
  v49 = v48;
  v50 = v101;
  *((_DWORD *)v101 + 6) += 2;
  v51 = v102;
  v3 = v103;
  *(_DWORD *)(v103 + 24) += 2;
  v52 = v104;
  v10 = (WTF::StringImpl **)bmalloc::api::isoAllocate();
  *((_DWORD *)v10 + 2) = 1;
  v10[2] = v50;
  *((_DWORD *)v10 + 6) = v51;
  v10[4] = (WTF::StringImpl *)v3;
  *((_DWORD *)v10 + 10) = v52;
  *v10 = (WTF::StringImpl *)off_1E33A7EF0;
  v89[0] = (WebCore::Node *)v10;
  WebCore::HighlightRegistry::addAnnotationHighlightWithRange(v49, (uint64_t *)v89);
  if (*((_DWORD *)v10 + 2) == 1)
  {
    (*((void (**)(WTF::StringImpl **))*v10 + 1))(v10);
    if (!a3)
      goto LABEL_148;
  }
  else
  {
    --*((_DWORD *)v10 + 2);
    if (!a3)
      goto LABEL_148;
  }
  if (!v105)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_198:
    v82 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
    do
    {
      v83 = __ldaxr(v82);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v82));
    if (!v84)
    {
      atomic_store(1u, v82);
      WTF::fastFree((WTF *)v82, v63);
    }
    goto LABEL_131;
  }
  result = WebCore::TextIndicator::createWithRange((uint64_t)&v101, (void *)0x100, 1, (uint64_t *)&v106, 2.0, 1.0);
  v54 = v106;
  if (!v106)
    goto LABEL_142;
  v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 48)
                  + 16);
  v56 = *(_OWORD *)((char *)v106 + 8);
  v57 = *(_OWORD *)((char *)v106 + 40);
  *(_OWORD *)v90 = *(_OWORD *)((char *)v106 + 24);
  v91 = v57;
  *(_OWORD *)v89 = v56;
  v58 = *((unsigned int *)v106 + 17);
  v92 = 0;
  v93 = 0;
  v94 = v58;
  if ((_DWORD)v58)
  {
    if (v58 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v75 = (WTF *)WTF::fastMalloc((WTF *)(16 * v58));
    v93 = v58;
    v92 = v75;
    v76 = *((unsigned int *)v54 + 17);
    if ((_DWORD)v76)
    {
      v77 = (__int128 *)*((_QWORD *)v54 + 7);
      v78 = 16 * v76;
      do
      {
        v79 = *v77++;
        *(_OWORD *)v75 = v79;
        v75 = (WTF *)((char *)v75 + 16);
        v78 -= 16;
      }
      while (v78);
    }
  }
  v95 = *((_DWORD *)v54 + 18);
  v59 = (_DWORD *)*((_QWORD *)v54 + 10);
  if (v59)
    ++v59[2];
  v96 = v59;
  v60 = (_DWORD *)*((_QWORD *)v54 + 11);
  if (v60)
    ++v60[2];
  v97 = v60;
  v61 = (_DWORD *)*((_QWORD *)v54 + 12);
  if (v61)
    ++v61[2];
  v62 = *((_QWORD *)v54 + 13);
  v98 = v61;
  v99 = v62;
  if ((v62 & 0x8000000000000) != 0)
  {
    v80 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 + 1, v80));
  }
  v100 = *((_DWORD *)v54 + 28);
  (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v55 + 808))(v55, v89);
  v64 = v99;
  if ((v99 & 0x8000000000000) != 0)
    goto LABEL_198;
LABEL_131:
  v65 = v98;
  v98 = 0;
  if (v65)
  {
    if (v65[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 8))(v65);
    else
      --v65[2];
  }
  v66 = v97;
  v97 = 0;
  if (v66)
  {
    if (v66[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
    else
      --v66[2];
  }
  v67 = v96;
  v96 = 0;
  if (v67)
  {
    if (v67[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
    else
      --v67[2];
  }
  v68 = v92;
  if (v92)
  {
    v92 = 0;
    v93 = 0;
    WTF::fastFree(v68, v63);
  }
LABEL_142:
  if (!v105)
    goto LABEL_192;
  WebCore::VisibleSelection::VisibleSelection((uint64_t)v87, (uint64_t)&v101, 1, 0);
  v88 = 1;
  WebCore::TemporarySelectionChange::TemporarySelectionChange((uint64_t)v89, v4, (uint64_t)v87, 240);
  if (v88)
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v87);
  WebCore::TemporarySelectionChange::~TemporarySelectionChange((WebCore::TemporarySelectionChange *)v89, v69);
  v70 = v106;
  v106 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
    {
      WebCore::TextIndicator::~TextIndicator(v70, v8);
      WTF::fastFree(v73, v74);
    }
    else
    {
      --*(_DWORD *)v70;
    }
  }
LABEL_148:
  if (v105)
  {
    v71 = v103;
    v103 = 0;
    if (v71)
    {
      if (*(_DWORD *)(v71 + 24) == 2)
      {
        if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v71, v8);
      }
      else
      {
        *(_DWORD *)(v71 + 24) -= 2;
      }
    }
    v72 = v101;
    v101 = 0;
    if (v72)
    {
      if (*((_DWORD *)v72 + 6) == 2)
      {
        if ((*((_WORD *)v72 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v72, v8);
      }
      else
      {
        *((_DWORD *)v72 + 6) -= 2;
      }
    }
  }
  v14 = 1;
LABEL_156:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return (unsigned int *)v14;
}

WTF::StringImpl *WebCore::HighlightRegistry::addAnnotationHighlightWithRange(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  int i;
  unsigned int v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int j;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  uint64_t v29;
  uint64_t v30;
  WebCore::HighlightRange **v31;
  uint64_t v32;
  WebCore::HighlightRange *v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  unsigned int *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;

  WTF::AtomStringImpl::add();
  v6 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
LABEL_7:
    v11 = 0;
    if (!v40)
      goto LABEL_12;
    goto LABEL_10;
  }
  v7 = 0;
  for (i = *((_DWORD *)v40 + 4) >> 8; ; i = v7 + v9)
  {
    v9 = i & *(_DWORD *)(v5 - 8);
    v10 = *(WTF::StringImpl **)(v5 + 16 * v9);
    if (v10 != (WTF::StringImpl *)-1)
    {
      if (!v10)
        goto LABEL_7;
      if (v10 == v40)
        break;
    }
    ++v7;
  }
  v11 = 1;
  if (v40)
  {
LABEL_10:
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v4);
    else
      *(_DWORD *)v40 -= 2;
  }
LABEL_12:
  if (v11)
  {
    WTF::AtomStringImpl::add();
    v12 = *v6;
    if (*v6)
    {
      v13 = 0;
      for (j = *((_DWORD *)v40 + 4) >> 8; ; j = v13 + v15)
      {
        v15 = j & *(_DWORD *)(v12 - 8);
        v16 = *(WTF::StringImpl **)(v12 + 16 * v15);
        if (v16 != (WTF::StringImpl *)-1)
        {
          if (!v16)
            goto LABEL_29;
          if (v16 == v40)
            break;
        }
        ++v13;
      }
      v29 = *(_QWORD *)(v12 + 16 * v15 + 8);
    }
    else
    {
LABEL_29:
      v29 = 0;
    }
    result = (WTF::StringImpl *)WebCore::Highlight::addToSetLike(v29, *a2);
    if (v40)
    {
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
        return result;
      }
      result = v40;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    }
  }
  else
  {
    WTF::AtomStringImpl::add();
    v17 = *a2;
    v18 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    v37 = (unsigned int *)v18;
    *(_QWORD *)(v18 + 8) = v17;
    v19 = WTF::fastMalloc((WTF *)0x20);
    v38 = (WTF *)WebCore::Highlight::Highlight(v19, &v37);
    WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>((uint64_t *)(a1 + 8), &v39, (uint64_t *)&v38, (uint64_t)&v40);
    if (v41)
    {
      v21 = (_QWORD *)(a1 + 16);
      v22 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v22 == *(_DWORD *)(a1 + 24))
      {
        v24 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v39);
        v22 = *(unsigned int *)(a1 + 28);
        v23 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8 * v22);
      }
      else
      {
        v23 = (WTF::StringImpl **)(*v21 + 8 * v22);
        v24 = &v39;
      }
      v25 = *v24;
      *v24 = 0;
      *v23 = v25;
      *(_DWORD *)(a1 + 28) = v22 + 1;
    }
    v26 = v38;
    v38 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        v30 = *((unsigned int *)v26 + 5);
        if ((_DWORD)v30)
        {
          v31 = (WebCore::HighlightRange **)*((_QWORD *)v26 + 1);
          v32 = 8 * v30;
          do
          {
            v33 = *v31;
            *v31 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
              {
                WebCore::HighlightRange::~HighlightRange(v33, v20);
                WTF::fastFree(v34, v35);
              }
              else
              {
                --*(_DWORD *)v33;
              }
            }
            ++v31;
            v32 -= 8;
          }
          while (v32);
        }
        v36 = (WTF *)*((_QWORD *)v26 + 1);
        if (v36)
        {
          *((_QWORD *)v26 + 1) = 0;
          *((_DWORD *)v26 + 4) = 0;
          WTF::fastFree(v36, v20);
        }
        WTF::fastFree(v26, v20);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    WTF::fastFree((WTF *)v18, v20);
    result = v39;
    v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    }
  }
  return result;
}

unsigned int *WebCore::AppHighlightStorage::restoreUnrestoredAppHighlights(WebCore::AppHighlightStorage *this)
{
  WebCore::AppHighlightStorage *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::AppHighlightStorage **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  int v23;
  uint64_t v25;
  uint64_t v26;

  v1 = this;
  v25 = 0;
  v26 = 0;
  v2 = *((unsigned int *)this + 7);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *((_QWORD *)this + 2);
    v6 = v2 << 6;
    do
    {
      this = (WebCore::AppHighlightStorage *)WebCore::AppHighlightStorage::attemptToRestoreHighlightAndScroll((uint64_t)v1, v5, 0);
      if ((this & 1) == 0)
      {
        if (v4 == (_DWORD)v26)
        {
          v7 = WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v25, v4 + 1, v5);
          v4 = HIDWORD(v26);
          v3 = v25;
          v8 = v25 + ((unint64_t)HIDWORD(v26) << 6);
        }
        else
        {
          v8 = v3 + ((unint64_t)v4 << 6);
          v7 = v5;
        }
        this = (WebCore::AppHighlightStorage *)WebCore::AppHighlightRangeData::AppHighlightRangeData(v8, v7);
        HIDWORD(v26) = ++v4;
      }
      v5 += 64;
      v6 -= 64;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  if (*((_BYTE *)v1 + 96))
  {
    v9 = (WebCore::AppHighlightStorage **)((char *)v1 + 32);
    this = (WebCore::AppHighlightStorage *)WebCore::AppHighlightStorage::attemptToRestoreHighlightAndScroll((uint64_t)v1, (uint64_t)v1 + 32, 1);
    if ((_DWORD)this)
    {
      if (*((_BYTE *)v1 + 96))
      {
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v1 + 18, v10);
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v1 + 12, v11);
        v13 = (WTF::StringImpl *)*((_QWORD *)v1 + 5);
        *((_QWORD *)v1 + 5) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        this = *v9;
        *v9 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WebCore::AppHighlightStorage *)WTF::StringImpl::destroy(this, v12);
          else
            *(_DWORD *)this -= 2;
        }
        *((_BYTE *)v1 + 96) = 0;
      }
    }
  }
  WTF::MonotonicTime::now(this);
  *((_QWORD *)v1 + 1) = v15;
  v16 = *((unsigned int *)v1 + 7);
  if ((_DWORD)v16)
  {
    v17 = v16 << 6;
    v18 = (unsigned int *)(*((_QWORD *)v1 + 2) + 40);
    do
    {
      WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v14);
      WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 - 6, v19);
      v20 = (WTF::StringImpl *)*((_QWORD *)v18 - 4);
      *((_QWORD *)v18 - 4) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v14);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = (WTF::StringImpl *)*((_QWORD *)v18 - 5);
      *((_QWORD *)v18 - 5) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v14);
        else
          *(_DWORD *)v21 -= 2;
      }
      v18 += 16;
      v17 -= 64;
    }
    while (v17);
  }
  v22 = (WTF *)*((_QWORD *)v1 + 2);
  if (v22)
  {
    *((_QWORD *)v1 + 2) = 0;
    *((_DWORD *)v1 + 6) = 0;
    WTF::fastFree(v22, v14);
  }
  *((_QWORD *)v1 + 2) = v3;
  v23 = v26;
  v25 = 0;
  v26 = 0;
  *((_DWORD *)v1 + 6) = v23;
  *((_DWORD *)v1 + 7) = v4;
  return WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v25, v14);
}

WebCore::Node *WebCore::Highlight::repaintRange(uint64_t a1)
{
  WebCore::Node *v2;
  int v3;
  WebCore::Node *v4;
  int v5;
  char v6;
  WebCore::Node *v7;
  int v8;
  WebCore::Node *v9;
  int v10;
  int v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  int v14;
  uint64_t v15;
  int v16;
  WebCore::Node *v17;
  int v18;
  WebCore::Node *v19;
  WebCore::Node *result;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  int v24;
  WebCore::Node *v25;
  int v26;
  WebCore::Node *v27;
  int v28;
  WebCore::Node *v29;
  int v30;
  _BYTE v31[20];
  __int128 v32;
  char v33;

  v2 = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *((_DWORD *)v2 + 6) += 2;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v4 = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  *((_DWORD *)v4 + 6) += 2;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v27 = v2;
  v28 = v3;
  v29 = v4;
  v30 = v5;
  v6 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v27, (uint64_t)&v29);
  v7 = v27;
  v8 = v28;
  v9 = v29;
  if (v6 <= 0)
  {
    v11 = v30;
    v12 = v29;
  }
  else
  {
    v27 = v29;
    v10 = v30;
    v28 = v30;
    v29 = v7;
    v30 = v8;
    v11 = v8;
    v12 = v7;
    v8 = v10;
    v7 = v9;
  }
  *((_DWORD *)v7 + 6) += 2;
  v23 = v7;
  v24 = v8;
  *((_DWORD *)v12 + 6) += 2;
  v25 = v12;
  v26 = v11;
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v21, (const WebCore::SimpleRange *)&v23);
  while (1)
  {
    v13 = v21;
    if (!v21)
      break;
    v14 = *((_DWORD *)v21 + 6) + 2;
    *((_DWORD *)v21 + 6) = v14;
    v15 = *((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL;
    if (v15
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v32) = 0;
      v33 = 0;
      v31[0] = 0;
      v31[16] = 0;
      WebCore::RenderObject::issueRepaint(v15, &v32, 0, 0, (uint64_t)v31);
      v14 = *((_DWORD *)v13 + 6);
    }
    v16 = v14 - 2;
    if (v16)
    {
      *((_DWORD *)v13 + 6) = v16;
    }
    else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v13);
    }
    WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v21);
  }
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    v18 = *((_DWORD *)v17 + 6) - 2;
    if (*((_DWORD *)v17 + 6) != 2)
    {
LABEL_16:
      *((_DWORD *)v17 + 6) = v18;
      goto LABEL_17;
    }
    if ((*((_WORD *)v17 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v17);
      v17 = v21;
      v21 = 0;
      if (v17)
      {
        v18 = *((_DWORD *)v17 + 6) - 2;
        if (*((_DWORD *)v17 + 6) != 2)
          goto LABEL_16;
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17);
      }
    }
  }
LABEL_17:
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Highlight::create@<X0>(unsigned int **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = WebCore::Highlight::Highlight(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebCore::Highlight::Highlight(uint64_t result, unsigned int **a2)
{
  uint64_t v2;
  WTF **v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WebCore::HighlightRange *v19;
  WTF *v20;
  void *v21;

  v2 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  v3 = (WTF **)(result + 8);
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (!*a2)
  {
    LODWORD(v4) = 0;
    goto LABEL_15;
  }
  v4 = **a2;
  if (!(_DWORD)v4)
  {
LABEL_15:
    LODWORD(v11) = 0;
    v6 = 0;
    goto LABEL_17;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v6 = WTF::fastMalloc((WTF *)(8 * v4));
  v7 = *a2;
  if (*a2 && (v10 = *v7, v9 = v7 + 2, (v8 = v10) != 0))
  {
    v11 = 0;
    v12 = 8 * v8;
    do
    {
      v13 = v11;
      WebCore::Highlight::repaintRange(*(_QWORD *)&v9[2 * v11]);
      v14 = *(_DWORD **)&v9[2 * v11];
      ++v14[2];
      v15 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_DWORD *)(v15 + 32) = 0;
      *(_BYTE *)(v15 + 36) &= 0xF0u;
      *(_QWORD *)(v15 + 40) = 0;
      *(_DWORD *)(v15 + 48) = 0;
      *(_BYTE *)(v15 + 52) &= 0xF0u;
      ++v14[2];
      if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 56))(v14) & 1) != 0)
        *(_WORD *)((char *)v14 + 81) = 257;
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
      v11 = v13 + 1;
      *(_QWORD *)(v6 + 8 * v13) = v15;
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    LODWORD(v11) = 0;
  }
LABEL_17:
  v16 = *(unsigned int *)(v2 + 20);
  v17 = *(WTF **)(v2 + 8);
  if ((_DWORD)v16)
  {
    v18 = 8 * v16;
    do
    {
      v19 = *(WebCore::HighlightRange **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          WebCore::HighlightRange::~HighlightRange(v19, a2);
          WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
    v17 = *v3;
  }
  if (v17)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v17, a2);
  }
  *(_QWORD *)(v2 + 8) = v6;
  *(_DWORD *)(v2 + 16) = v4;
  *(_DWORD *)(v2 + 20) = v11;
  return v2;
}

uint64_t WebCore::Highlight::clearFromSetLike(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;

  v2 = this;
  v3 = *(unsigned int *)(this + 20);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(this + 8);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      this = (uint64_t)WebCore::Highlight::repaintRange(*(_QWORD *)(v6 + 16));
      v5 -= 8;
    }
    while (v5);
  }
  if (*(_DWORD *)(v2 + 16))
  {
    v7 = *(unsigned int *)(v2 + 20);
    v8 = *(WTF **)(v2 + 8);
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        this = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
          {
            WebCore::HighlightRange::~HighlightRange((WebCore::HighlightRange *)this, a2);
            this = WTF::fastFree(v10, v11);
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
      *(_DWORD *)(v2 + 20) = 0;
      v8 = *(WTF **)(v2 + 8);
    }
    if (v8)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      return WTF::fastFree(v8, a2);
    }
  }
  return this;
}

uint64_t WebCore::Highlight::addToSetLike(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::HighlightRange *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::HighlightRange *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WebCore::HighlightRange *v29;

  v3 = result;
  v4 = (char **)(result + 8);
  v5 = *(unsigned int *)(result + 20);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *v4;
    v8 = 8;
    while (1)
    {
      v9 = *(_QWORD *)&v7[v8 - 8];
      if (*(_QWORD *)(v9 + 16) == a2)
        break;
      v8 += 8;
      if (-(uint64_t)v5 == --v6)
        goto LABEL_5;
    }
    if (-v6 >= v5)
    {
      __break(0xC471u);
    }
    else
    {
      v18 = &v7[v8 - 8];
      if ((_DWORD)v5 == *(_DWORD *)(result + 16))
      {
        v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(result + 8), v5 + 1, (unint64_t)v18);
        v5 = *(unsigned int *)(v3 + 20);
        v20 = *(_QWORD *)(v3 + 8);
        v21 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)(v20 + 8 * v5) = v21;
      }
      else
      {
        *(_QWORD *)v18 = 0;
        *(_QWORD *)&v7[8 * v5] = v9;
      }
      v22 = v5 + 1;
      *(_DWORD *)(v3 + 20) = v22;
      v23 = *(_QWORD *)(v3 + 8);
      v24 = *(WebCore::HighlightRange **)(v23 + v8 - 8);
      *(_QWORD *)(v23 + v8 - 8) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
        {
          WebCore::HighlightRange::~HighlightRange(v24, (void *)a2);
          WTF::fastFree(v27, v28);
          v22 = *(_DWORD *)(v3 + 20);
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
      memmove((void *)(v23 + v8 - 8), (const void *)(v23 + v8), *(_QWORD *)(v3 + 8) + 8 * v22 - v23 - v8);
      result = 0;
      --*(_DWORD *)(v3 + 20);
    }
  }
  else
  {
LABEL_5:
    WebCore::Highlight::repaintRange(a2);
    ++*(_DWORD *)(a2 + 8);
    v10 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = a2;
    *(_QWORD *)(v10 + 24) = 0;
    *(_DWORD *)(v10 + 32) = 0;
    *(_BYTE *)(v10 + 36) &= 0xF0u;
    *(_QWORD *)(v10 + 40) = 0;
    *(_DWORD *)(v10 + 48) = 0;
    *(_BYTE *)(v10 + 52) &= 0xF0u;
    ++*(_DWORD *)(a2 + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) & 1) != 0)
      *(_WORD *)(a2 + 81) = 257;
    if (*(_DWORD *)(a2 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    else
      --*(_DWORD *)(a2 + 8);
    v29 = (WebCore::HighlightRange *)v10;
    v11 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v11 == *(_DWORD *)(v3 + 16))
    {
      v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v11 + 1, (unint64_t)&v29);
      v14 = *(unsigned int *)(v3 + 20);
      v15 = *(_QWORD *)(v3 + 8);
      v16 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v15 + 8 * v14) = v16;
      v17 = v29;
      *(_DWORD *)(v3 + 20) = v14 + 1;
      v29 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::HighlightRange::~HighlightRange(v17, v13);
          WTF::fastFree(v25, v26);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v11) = v10;
      *(_DWORD *)(v3 + 20) = v11 + 1;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::Highlight>>(uint64_t a1, uint64_t *a2, WTF *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[8];

  JSC::JSLockHolder::JSLockHolder();
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v8 = *a2;
  if (!*a2 || (v9 = *(_DWORD *)(v8 + 4)) == 0)
  {
    v10 = *(_QWORD *)(v7 + 41968);
    goto LABEL_7;
  }
  if (v9 == 1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_4;
      v14 = v15;
    }
    v10 = *(_QWORD *)(v7 + 8 * v14 + 42216);
    goto LABEL_7;
  }
LABEL_4:
  v10 = *(_QWORD *)(v7 + 64760);
  if (!v10 || v8 != *(_QWORD *)(v10 + 8))
  {
    v10 = JSC::jsStringWithCacheSlowCase();
    v6 = *(_QWORD *)a1;
  }
LABEL_7:
  v11 = WebCore::wrap<WebCore::Highlight>(v6, v6, a3);
  WebCore::setToBackingMap(*(_QWORD *)a1, *(WTF::StringImpl **)(a1 + 8), v10, v11);
  return MEMORY[0x19AEA32A0](v16);
}

uint64_t WebCore::HighlightRegistry::clear(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v2 = this;
  if (*(_DWORD *)(this + 24))
  {
    v13 = *(unsigned int *)(this + 28);
    if ((_DWORD)v13)
    {
      v14 = *(WTF::StringImpl ***)(this + 16);
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
      *(_DWORD *)(v2 + 28) = 0;
    }
    this = *(_QWORD *)(v2 + 16);
    if (this)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  v3 = *(_QWORD **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v3)
  {
    v4 = *((unsigned int *)v3 - 1);
    v5 = &v3[2 * v4];
    if (*((_DWORD *)v3 - 3))
    {
      v6 = v3;
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = v3;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v6 = &v3[2 * v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &v3[2 * v4];
  if (v3)
  {
LABEL_9:
    v8 = &v3[2 * *((unsigned int *)v3 - 1)];
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
  while (v6 != v8)
  {
    this = WebCore::Highlight::clearFromSetLike(v6[1], a2);
    v9 = v6 + 2;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  if (v3)
  {
    v10 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v10)
    {
      v11 = v3 + 1;
      do
      {
        if (*(v11 - 1) != -1)
        {
          WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref(v11, a2);
          v12 = (WTF::StringImpl *)*(v11 - 1);
          *(v11 - 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    return WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return this;
}

uint64_t WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v4;
  WTF::StringImpl *v5;
  unsigned int i;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = 0;
  v5 = *(WTF::StringImpl **)a2;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v4 + v7)
  {
    v7 = i & *(_DWORD *)(v2 - 8);
    v8 = *(WTF::StringImpl **)(v2 + 16 * v7);
    if (v8 != (WTF::StringImpl *)-1)
    {
      if (!v8)
        return 0;
      if (v8 == v5)
        break;
    }
  }
  if ((_DWORD)v7 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 16 * v7) = -1;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref((uint64_t *)(v2 + 16 * v7 + 8), a2);
  ++*(_DWORD *)(*a1 - 16);
  v10 = *a1;
  if (*a1)
    v11 = *(_DWORD *)(v10 - 12) - 1;
  else
    v11 = -1;
  *(_DWORD *)(v10 - 12) = v11;
  v12 = *a1;
  if (*a1)
  {
    v13 = 6 * *(_DWORD *)(v12 - 12);
    v14 = *(_DWORD *)(v12 - 4);
    if (v13 < v14 && v14 >= 9)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v14 >> 1, 0);
  }
  return 1;
}

WebCore::Node *WebCore::HighlightRegistry::setHighlightVisibility(WebCore::Node *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((((*((_BYTE *)result + 32) == 0) ^ a2) & 1) != 0)
    return result;
  *((_BYTE *)result + 32) = a2;
  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = (_QWORD *)(v2 + 16 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = (_QWORD *)*((_QWORD *)result + 1);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = (_QWORD *)*((_QWORD *)result + 1);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v5 = (_QWORD *)(v2 + 16 * v3);
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = (_QWORD *)(v2 + 16 * v3);
  if (v2)
  {
LABEL_9:
    v7 = (_QWORD *)(v2 + 16 * *(unsigned int *)(v2 - 4));
    goto LABEL_14;
  }
  v7 = 0;
LABEL_14:
  while (v5 != v7)
  {
    v8 = v5[1];
    v9 = *(unsigned int *)(v8 + 20);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)(v8 + 8);
      v11 = 8 * v9;
      do
      {
        v12 = *v10++;
        result = WebCore::Highlight::repaintRange(*(_QWORD *)(v12 + 16));
        v11 -= 8;
      }
      while (v11);
    }
    v13 = v5 + 2;
    v5 = v4;
    if (v13 != v4)
    {
      v5 = v13;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Geolocation::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

WebCore::Geolocation *WebCore::Geolocation::deref(WebCore::Geolocation *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 8) == 1)
  {
    WebCore::Geolocation::~Geolocation(this);
    return (WebCore::Geolocation *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 8);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::deallocateTable(WebCore::GeoNotifier **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::GeoNotifier **v4;
  WebCore::GeoNotifier *v5;
  WTF *v6;
  void *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebCore::GeoNotifier *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::GeoNotifier::~GeoNotifier(v5, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::deallocateTable(WebCore::GeoNotifier **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::GeoNotifier **v4;
  WebCore::GeoNotifier *v5;
  WTF *v6;
  void *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebCore::GeoNotifier *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::GeoNotifier::~GeoNotifier(v5, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::GeoNotifier **v4;
  WebCore::GeoNotifier *v5;
  WTF *v6;
  void *v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::GeoNotifier **)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::GeoNotifier::~GeoNotifier(v5, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF **WTF::RefCounted<WebCore::GeolocationPosition>::deref(WTF **this, void *a2)
{
  WTF *v2;
  WTF *v3;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[1];
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
        WTF::fastFree(v3, a2);
      else
        --*(_DWORD *)v3;
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int8x16_t *v7;
  uint64_t v8;
  unsigned int v9;
  int8x16_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  _BOOL4 v20;

  v7 = *(int8x16_t **)result;
  v8 = *(_QWORD *)(result + 8);
  if (v8)
  {
    v9 = v8 - 1;
    if ((unint64_t)(v8 - 1) >> 31)
      goto LABEL_23;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(int8x16_t **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195358B54);
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = *a3;
  v15 = *(int8x16_t **)a4;
  v14 = *(_QWORD *)(a4 + 8);
  if (v14)
  {
    if ((unint64_t)--v14 >> 31)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x195358B28);
    }
  }
  if (v13)
  {
    v16 = *(_DWORD *)(v13 + 4);
    if (v16 < 0)
    {
LABEL_17:
      *a5 = 0;
      return result;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = __OFADD__(v16, (_DWORD)v14);
  v18 = v16 + v14;
  if (v17)
    goto LABEL_17;
  v17 = __OFADD__(v12, v18);
  v19 = v12 + v18;
  if (v17)
    goto LABEL_17;
  result = v9 + v19;
  if (__OFADD__(v9, v19))
    goto LABEL_17;
  v20 = !v13 || (*(_BYTE *)(v13 + 16) & 4) != 0;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v20, v7, v9, v10, v12, v13, a5, v15, v14);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, int8x16_t *a9, unsigned int a10)
{
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v20;

  v15 = result;
  v16 = a8;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v20;
        if (v20)
        {
          v18 = (_BYTE *)(v20 + 20);
          *(_DWORD *)v20 = 2;
          *(_DWORD *)(v20 + 4) = v15;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v18 = a3->i8[0];
            else
              memcpy((void *)(v20 + 20), a3, a4);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v18[a4], a5, a6, a7, a9, a10);
        }
        v16 = a8;
        goto LABEL_14;
      }
LABEL_17:
      v17 = 0;
      goto LABEL_14;
    }
LABEL_16:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_16;
  if (result > 0x7FFFFFEF)
    goto LABEL_17;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v20;
  if (v20)
  {
    *(_DWORD *)v20 = 2;
    *(_DWORD *)(v20 + 4) = v15;
    *(_QWORD *)(v20 + 8) = v20 + 20;
    *(_DWORD *)(v20 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v20 + 20), a3, a4, a5, a6, a7, a9, a10);
  }
LABEL_14:
  *v16 = v17;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, int8x16_t *a2, int a3, int8x16_t *a4, int a5, uint64_t a6, int8x16_t *a7, int a8)
{
  char *v11;
  char *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  int8x16_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int16 v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;

  v11 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v12 = &result[2 * (a3 & 0xFFFFFFC0)];
    v13 = 0uLL;
    do
    {
      v56.val[0] = *a2;
      v14 = a2[1];
      v60.val[0] = a2[2];
      v15 = a2[3];
      a2 += 4;
      v16 = v15;
      v60.val[1] = 0uLL;
      v64.val[0] = v14;
      v56.val[1] = 0uLL;
      v17 = result;
      vst2q_s8(v17, v56);
      v17 += 32;
      v64.val[1] = 0uLL;
      vst2q_s8(v17, v64);
      v18 = result + 64;
      vst2q_s8(v18, v60);
      v19 = result + 96;
      vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
      result += 128;
    }
    while (result != v12);
    result = v12;
  }
  while (result != v11)
  {
    v20 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v20;
    result += 2;
  }
  v21 = &v11[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v22 = &v11[2 * (a5 & 0xFFFFFFC0)];
    v23 = 0uLL;
    do
    {
      v57.val[0] = *a4;
      v24 = a4[1];
      v61.val[0] = a4[2];
      v25 = a4[3];
      a4 += 4;
      v26 = v25;
      v61.val[1] = 0uLL;
      v65.val[0] = v24;
      v57.val[1] = 0uLL;
      v27 = v11;
      vst2q_s8(v27, v57);
      v27 += 32;
      v65.val[1] = 0uLL;
      vst2q_s8(v27, v65);
      v28 = v11 + 64;
      vst2q_s8(v28, v61);
      v29 = v11 + 96;
      vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
      v11 += 128;
    }
    while (v11 != v22);
    v11 = v22;
  }
  while (v11 != v21)
  {
    v30 = a4->u8[0];
    a4 = (int8x16_t *)((char *)a4 + 1);
    *(_WORD *)v11 = v30;
    v11 += 2;
  }
  if (a6)
  {
    v31 = *(int8x16_t **)(a6 + 8);
    v32 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      v33 = &v21[2 * v32];
      if (v32 >= 0x40)
      {
        v34 = &v21[2 * (v32 & 0xFFFFFFC0)];
        v36 = 0uLL;
        v37 = v21;
        do
        {
          v58.val[0] = *v31;
          v38 = v31[1];
          v62.val[0] = v31[2];
          v39 = v31[3];
          v31 += 4;
          v40 = v39;
          v62.val[1] = 0uLL;
          v66.val[0] = v38;
          v58.val[1] = 0uLL;
          v41 = v37;
          vst2q_s8(v41, v58);
          v41 += 32;
          v66.val[1] = 0uLL;
          vst2q_s8(v41, v66);
          v42 = v37 + 64;
          vst2q_s8(v42, v62);
          v43 = v37 + 96;
          vst2q_s8(v43, *(int8x16x2_t *)(&v36 - 1));
          v37 += 128;
        }
        while (v37 != v34);
      }
      else
      {
        v34 = v21;
      }
      while (v34 != v33)
      {
        v44 = v31->u8[0];
        v31 = (int8x16_t *)((char *)v31 + 1);
        *(_WORD *)v34 = v44;
        v34 += 2;
      }
    }
    else if ((_DWORD)v32 == 1)
    {
      *(_WORD *)v21 = v31->i16[0];
    }
    else if ((_DWORD)v32)
    {
      result = (char *)memcpy(v21, v31, 2 * v32);
    }
    v35 = *(unsigned int *)(a6 + 4);
  }
  else
  {
    v35 = 0;
  }
  v45 = &v21[2 * v35];
  v46 = &v45[2 * a8];
  if ((a8 & 0xFFFFFFC0) != 0)
  {
    v47 = &v45[2 * (a8 & 0xFFFFFFC0)];
    v48 = 0uLL;
    do
    {
      v59.val[0] = *a7;
      v49 = a7[1];
      v63.val[0] = a7[2];
      v50 = a7[3];
      a7 += 4;
      v51 = v50;
      v63.val[1] = 0uLL;
      v67.val[0] = v49;
      v59.val[1] = 0uLL;
      v52 = v45;
      vst2q_s8(v52, v59);
      v52 += 32;
      v67.val[1] = 0uLL;
      vst2q_s8(v52, v67);
      v53 = v45 + 64;
      vst2q_s8(v53, v63);
      v54 = v45 + 96;
      vst2q_s8(v54, *(int8x16x2_t *)(&v48 - 1));
      v45 += 128;
    }
    while (v45 != v47);
    v45 = v47;
  }
  while (v45 != v46)
  {
    v55 = a7->u8[0];
    a7 = (int8x16_t *)((char *)a7 + 1);
    *(_WORD *)v45 = v55;
    v45 += 2;
  }
  return result;
}

unsigned int *std::make_unique[abi:sn180100]<WebCore::GeolocationController,WebCore::Page &,WebCore::GeolocationClient &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *result;
  _BYTE v8[24];

  v6 = WTF::fastMalloc((WTF *)0xC8);
  *(_QWORD *)v6 = off_1E3357068;
  *(_QWORD *)(v6 + 8) = &unk_1E3357090;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_BYTE *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 152) = 0;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_BYTE *)(v6 + 192) = 0;
  result = WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ActivityStateChangeObserver>(a2 + 976, v6 + 8, (uint64_t)v8);
  *a1 = v6;
  return result;
}

unsigned int *WebCore::makeNodePath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  __int16 v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  int v11;
  WebCore::Node *v12;
  const WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  int v83;
  int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;

  v2 = a2;
  v89 = 0;
  v90 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 1272);
  if (v3
    && (*(_WORD *)(v3 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v4 = *(_QWORD *)(v3 + 80);
    if (v4)
    {
      do
      {
        if ((*(_WORD *)(v4 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          break;
        }
        v4 = *(_QWORD *)(v4 + 56);
      }
      while (v4);
      if (!a2)
        goto LABEL_83;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a2 + 24) += 2;
  v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
  while (v2 != v4)
  {
    v6 = v2;
    v7 = *(_WORD *)(v2 + 28);
    v8 = v5;
    if ((v7 & 8) != 0)
    {
      v9 = *(_QWORD *)(v2 + 104);
      if (v9)
      {
        v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        if (*(_QWORD *)(v9 + 24))
        {
          v36 = *(unsigned int *)(v9 + 4);
          if ((v36 & 1) != 0)
          {
            v37 = *(_QWORD **)(v9 + 40);
            v38 = *(unsigned int *)(v9 + 52);
            if (v38)
              goto LABEL_73;
LABEL_79:
            v37 = 0;
          }
          else
          {
            v37 = (_QWORD *)(v9 + 32);
            v38 = v36 >> 5;
            if (!(v36 >> 5))
              goto LABEL_79;
LABEL_73:
            while (1)
            {
              v39 = *v37;
              if (*v37 == WebCore::HTMLNames::idAttr
                || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
              {
                break;
              }
              v37 += 2;
              if (!--v38)
                goto LABEL_79;
            }
          }
          v8 = (WTF::StringImpl **)(v37 + 1);
        }
      }
      else
      {
        v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v2 + 104))(&v91, v2);
    if ((v7 & 1) != 0)
      v10 = (WTF::StringImpl **)(v2 + 80);
    else
      v10 = v5;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v2 + 104))(&v93, v2);
    v11 = 0;
    v12 = (WebCore::Node *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL);
    if (v12)
    {
      *(_DWORD *)((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
      do
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)v12 + 104))(&v92, v12);
        v14 = WTF::equal(v92, v93, v13);
        v15 = v92;
        v92 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = *((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFLL;
        if (v16)
          *(_DWORD *)((*((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, (void *)a2);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
        v11 += v14;
        v12 = (WebCore::Node *)v16;
      }
      while (v16);
    }
    v17 = v93;
    v93 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *v8;
    if (*v8)
      *(_DWORD *)v18 += 2;
    v85 = v18;
    v19 = v91;
    if (v91)
      *(_DWORD *)v91 += 2;
    v86 = v19;
    v20 = *v10;
    if (*v10)
      *(_DWORD *)v20 += 2;
    v87 = v20;
    v88 = v11;
    v91 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v21 = HIDWORD(v90);
    if (HIDWORD(v90) == (_DWORD)v90)
    {
      v22 = WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, HIDWORD(v90) + 1, (unint64_t)&v85);
      v21 = HIDWORD(v90);
      v23 = (_QWORD *)(v89 + 32 * HIDWORD(v90));
      v24 = *(_QWORD *)v22;
      *(_QWORD *)v22 = 0;
      *v23 = v24;
      v25 = *((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = 0;
      v23[1] = v25;
      v26 = *((_QWORD *)v22 + 2);
      *((_QWORD *)v22 + 2) = 0;
      v23[2] = v26;
      v27 = (int *)(v23 + 3);
      v28 = (int *)(v22 + 24);
    }
    else
    {
      v29 = (WTF::StringImpl **)(v89 + 32 * HIDWORD(v90));
      v30 = v85;
      v85 = 0;
      *v29 = v30;
      v31 = v86;
      v86 = 0;
      v29[1] = v31;
      v32 = v87;
      v87 = 0;
      v29[2] = v32;
      v27 = (int *)(v29 + 3);
      v28 = &v88;
    }
    *v27 = *v28;
    HIDWORD(v90) = v21 + 1;
    v33 = v87;
    v87 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v86;
    v86 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v85;
    v85 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v35 -= 2;
    }
    v2 = *(_QWORD *)(v6 + 32);
    if (v2)
      *(_DWORD *)(v2 + 24) += 2;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    if (!v2)
      goto LABEL_83;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, (void *)a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
LABEL_83:
  v40 = HIDWORD(v90);
  if (HIDWORD(v90) >= 2)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    while (v50 < v40)
    {
      v51 = v48 + v40 - 1;
      if (v51 >= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x1953596A4);
      }
      v52 = v89;
      v53 = v89 + v49;
      v54 = (WTF::StringImpl **)(v89 + 32 * v51);
      v56 = *(WTF::StringImpl **)(v89 + v49);
      v55 = *(WTF::StringImpl **)(v89 + v49 + 8);
      *(_QWORD *)v53 = 0;
      *(_QWORD *)(v53 + 8) = 0;
      v57 = *(WTF::StringImpl **)(v53 + 16);
      *(_QWORD *)(v53 + 16) = 0;
      v58 = *(_DWORD *)(v53 + 24);
      v59 = *v54;
      *v54 = 0;
      v60 = *(WTF::StringImpl **)v53;
      *(_QWORD *)v53 = v59;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          v82 = v58;
          v73 = v57;
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)a2);
          v57 = v73;
          v58 = v82;
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
      v62 = v54 + 1;
      v61 = v54[1];
      v54[1] = 0;
      v63 = *(WTF::StringImpl **)(v53 + 8);
      *(_QWORD *)(v53 + 8) = v61;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          v83 = v58;
          v80 = v57;
          WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
          v57 = v80;
          v58 = v83;
        }
        else
        {
          *(_DWORD *)v63 -= 2;
        }
      }
      v64 = v52 + 32 * v51;
      v66 = (WTF::StringImpl **)(v64 + 16);
      v65 = *(_QWORD *)(v64 + 16);
      *(_QWORD *)(v64 + 16) = 0;
      v67 = *(WTF::StringImpl **)(v53 + 16);
      *(_QWORD *)(v53 + 16) = v65;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
        {
          v84 = v58;
          v81 = v57;
          WTF::StringImpl::destroy(v67, (WTF::StringImpl *)a2);
          v57 = v81;
          v58 = v84;
        }
        else
        {
          *(_DWORD *)v67 -= 2;
        }
      }
      v69 = *(_DWORD *)(v64 + 24);
      v68 = (_DWORD *)(v64 + 24);
      *(_DWORD *)(v53 + 24) = v69;
      v70 = *v54;
      *v54 = v56;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          v74 = v58;
          v75 = v57;
          WTF::StringImpl::destroy(v70, (WTF::StringImpl *)a2);
          v57 = v75;
          v58 = v74;
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
      v71 = *v62;
      *v62 = v55;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          v76 = v58;
          v77 = v57;
          WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
          v57 = v77;
          v58 = v76;
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
      v72 = *v66;
      *v66 = v57;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          v78 = v58;
          WTF::StringImpl::destroy(v72, (WTF::StringImpl *)a2);
          v58 = v78;
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
      *v68 = v58;
      ++v50;
      v40 = HIDWORD(v90);
      v49 += 32;
      --v48;
      if (v50 >= (unint64_t)HIDWORD(v90) >> 1)
        goto LABEL_84;
    }
    goto LABEL_130;
  }
LABEL_84:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v40;
  if (!v40)
    return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v89, (WTF::StringImpl *)a2);
  if (v40 >> 27)
  {
LABEL_130:
    __break(0xC471u);
    JUMPOUT(0x19535969CLL);
  }
  v41 = WTF::fastMalloc((WTF *)(32 * v40));
  *(_DWORD *)(a1 + 8) = v40;
  *(_QWORD *)a1 = v41;
  if (HIDWORD(v90))
  {
    v42 = v89;
    v43 = v89 + 32 * HIDWORD(v90);
    do
    {
      v44 = *(_DWORD **)v42;
      if (*(_QWORD *)v42)
        *v44 += 2;
      *(_QWORD *)v41 = v44;
      v45 = *(_DWORD **)(v42 + 8);
      if (v45)
        *v45 += 2;
      *(_QWORD *)(v41 + 8) = v45;
      v46 = *(_DWORD **)(v42 + 16);
      if (v46)
        *v46 += 2;
      *(_QWORD *)(v41 + 16) = v46;
      *(_DWORD *)(v41 + 24) = *(_DWORD *)(v42 + 24);
      v42 += 32;
      v41 += 32;
    }
    while (v42 != v43);
  }
  return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v89, (WTF::StringImpl *)a2);
}

char *WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195359800);
      }
      v18 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::AppHighlightRangeData::NodePathComponent>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x195359808);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::AppHighlightRangeData::NodePathComponent>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::AppHighlightRangeData::NodePathComponent>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      *(_DWORD *)(a3 + 24) = *((_DWORD *)v5 + 6);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::AppHighlightRangeData::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 16), (unsigned int *)(a2 + 16));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 40), (unsigned int *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

unsigned int *WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;

  if (a2 == a1)
    return a1;
  v4 = a1[3];
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = 32 * v4 - 32 * v5;
    v7 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v5 + 16);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(v7 - 1);
      *(v7 - 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(v7 - 2);
      *(v7 - 2) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
    a1[3] = v5;
    goto LABEL_26;
  }
  if (v5 <= a1[2]
    || (result = WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0), v12 = a2[3], a1[2] >= v12))
  {
LABEL_25:
    LODWORD(v5) = a1[3];
LABEL_26:
    v16 = *(_QWORD *)a2;
    if ((_DWORD)v5)
    {
      v17 = v16 + 32 * v5;
      v18 = *(WTF::StringImpl **)a1;
      do
      {
        v19 = *(_DWORD **)v16;
        if (*(_QWORD *)v16)
          *v19 += 2;
        v20 = *(WTF::StringImpl **)v18;
        *(_QWORD *)v18 = v19;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = *(_DWORD **)(v16 + 8);
        if (v21)
          *v21 += 2;
        v22 = (WTF::StringImpl *)*((_QWORD *)v18 + 1);
        *((_QWORD *)v18 + 1) = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = *(_DWORD **)(v16 + 16);
        if (v23)
          *v23 += 2;
        v24 = (WTF::StringImpl *)*((_QWORD *)v18 + 2);
        *((_QWORD *)v18 + 2) = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v24 -= 2;
        }
        *((_DWORD *)v18 + 6) = *(_DWORD *)(v16 + 24);
        v16 += 32;
        v18 = (WTF::StringImpl *)((char *)v18 + 32);
      }
      while (v16 != v17);
      v16 = *(_QWORD *)a2;
      v25 = a1[3];
    }
    else
    {
      v25 = 0;
    }
    v26 = a2[3];
    if (v25 != (_DWORD)v26)
    {
      v27 = v25;
      v28 = *(_QWORD *)a1 + 32 * v25;
      v29 = v16 + 32 * v27;
      do
      {
        v30 = *(_DWORD **)v29;
        if (*(_QWORD *)v29)
          *v30 += 2;
        *(_QWORD *)v28 = v30;
        v31 = *(_DWORD **)(v29 + 8);
        if (v31)
          *v31 += 2;
        *(_QWORD *)(v28 + 8) = v31;
        v32 = *(_DWORD **)(v29 + 16);
        if (v32)
          *v32 += 2;
        *(_QWORD *)(v28 + 16) = v32;
        *(_DWORD *)(v28 + 24) = *(_DWORD *)(v29 + 24);
        v29 += 32;
        v28 += 32;
      }
      while (v29 != v16 + 32 * v26);
    }
    a1[3] = v26;
    return a1;
  }
  if (!(v12 >> 27))
  {
    v13 = *(WTF::StringImpl **)a1;
    v14 = (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * a1[3]);
    v15 = WTF::fastMalloc((WTF *)(32 * v12));
    a1[2] = v12;
    *(_QWORD *)a1 = v15;
    WTF::VectorMover<false,WebCore::AppHighlightRangeData::NodePathComponent>::move(v13, v14, v15);
    if (v13)
    {
      if (*(WTF::StringImpl **)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        a1[2] = 0;
      }
      WTF::fastFree(v13, a2);
    }
    goto LABEL_25;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (result[2] > (unint64_t)a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > (unint64_t)a2)
    {
      v5 = 32 * v4 - 32 * (_QWORD)a2;
      v6 = (WTF::StringImpl **)(*(_QWORD *)result + 32 * (_QWORD)a2 + 16);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *(v6 - 1);
        *(v6 - 1) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        result = (unsigned int *)*(v6 - 2);
        *(v6 - 2) = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        v6 += 4;
        v5 -= 32;
      }
      while (v5);
      v3[3] = a2;
      LODWORD(v4) = (_DWORD)a2;
    }
    v9 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if ((unint64_t)a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * (_QWORD)a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v9)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::AppHighlightRangeData::NodePathComponent>::move(v9, (WTF::StringImpl *)((char *)v9 + 32 * v4), (uint64_t)result);
    }
    if (v9)
    {
      if (*(WTF::StringImpl **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v9, a2);
    }
  }
  return result;
}

uint64_t WebCore::AppHighlightRangeData::AppHighlightRangeData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  v6 = *(unsigned int *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 28) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 27)
      goto LABEL_28;
    v7 = WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(a2 + 16);
      v10 = v9 + 32 * v8;
      do
      {
        v11 = *(_DWORD **)v9;
        if (*(_QWORD *)v9)
          *v11 += 2;
        *(_QWORD *)v7 = v11;
        v12 = *(_DWORD **)(v9 + 8);
        if (v12)
          *v12 += 2;
        *(_QWORD *)(v7 + 8) = v12;
        v13 = *(_DWORD **)(v9 + 16);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v7 + 16) = v13;
        *(_DWORD *)(v7 + 24) = *(_DWORD *)(v9 + 24);
        v9 += 32;
        v7 += 32;
      }
      while (v9 != v10);
    }
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v14 = *(unsigned int *)(a2 + 52);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v14;
  if (!(_DWORD)v14)
    goto LABEL_27;
  if (v14 >> 27)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x195359F68);
  }
  v15 = WTF::fastMalloc((WTF *)(32 * v14));
  *(_DWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  v16 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(a2 + 40);
    v18 = v17 + 32 * v16;
    do
    {
      v19 = *(_DWORD **)v17;
      if (*(_QWORD *)v17)
        *v19 += 2;
      *(_QWORD *)v15 = v19;
      v20 = *(_DWORD **)(v17 + 8);
      if (v20)
        *v20 += 2;
      *(_QWORD *)(v15 + 8) = v20;
      v21 = *(_DWORD **)(v17 + 16);
      if (v21)
        *v21 += 2;
      *(_QWORD *)(v15 + 16) = v21;
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(v17 + 24);
      v17 += 32;
      v15 += 32;
    }
    while (v17 != v18);
  }
LABEL_27:
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

unsigned int *WebCore::findNode(unsigned int *result, unsigned int *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::Node *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  const WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23[2];
  WebCore::Node *v24;
  WebCore::Node *v25;
  unint64_t v26;
  WTF::StringImpl *v27;

  v3 = result;
  if (!a2[3]
    || (v5 = a3[159]) == 0
    || (*(_WORD *)(v5 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    || (v6 = *(_QWORD *)(v5 + 80)) == 0)
  {
LABEL_10:
    *(_QWORD *)result = 0;
    return result;
  }
  v8 = *(_QWORD *)(v5 + 80);
  while (1)
  {
    if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
    {
      v9 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == v9)
        break;
    }
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      goto LABEL_10;
  }
  while ((*(_WORD *)(v6 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != v9)
    v6 = *(_QWORD *)(v6 + 56);
  result = WebCore::findNodeStartingAtPathComponentIndex((unsigned int *)&v25, a2, (WebCore::Node *)v6, 0);
  v11 = v25;
  if (v25)
  {
    v12 = *((_DWORD *)v25 + 6);
    *((_DWORD *)v25 + 6) = v12 + 2;
    *v3 = v11;
    v25 = 0;
    if (v12)
    {
LABEL_16:
      *((_DWORD *)v11 + 6) = v12;
      return result;
    }
    goto LABEL_58;
  }
  v13 = (WTF::StringImpl *)v26;
  if (v26 < a2[3])
  {
    v11 = 0;
    v14 = v26;
    while (1)
    {
      v13 = (WTF::StringImpl *)(v14 + 1);
      v15 = *(_QWORD *)a2;
      v16 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 32 * v14);
      if (!v16)
        goto LABEL_21;
      if (!*((_DWORD *)v16 + 1))
        goto LABEL_21;
      result = (unsigned int *)a3[15];
      if (!result)
        goto LABEL_21;
      if ((*((_BYTE *)v16 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v16 += 2;
        v27 = v16;
      }
      else
      {
        result = (unsigned int *)WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(*(_QWORD *)a2 + 32 * v14), v10);
        v16 = v23[0];
        v27 = v23[0];
        if (!v23[0])
          goto LABEL_21;
        result = (unsigned int *)a3[15];
      }
      result = WebCore::TreeScopeOrderedMap::getElementById(result, (const WTF::AtomString *)&v27, (const WebCore::TreeScope *)(a3 + 12), (uint64_t *)&v24);
      if (*(_DWORD *)v16 == 2)
        result = (unsigned int *)WTF::StringImpl::destroy(v16, v10);
      else
        *(_DWORD *)v16 -= 2;
      v17 = v24;
      if (!v24)
        goto LABEL_21;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)v24 + 104))(v23, v24);
      v19 = WTF::equal(v23[0], *(const WTF::StringImpl **)(v15 + 32 * v14 + 8), v18);
      v20 = v23[0];
      v23[0] = 0;
      if (!v20)
        goto LABEL_35;
      if (*(_DWORD *)v20 != 2)
        break;
      WTF::StringImpl::destroy(v20, v10);
      if (!v19)
      {
LABEL_44:
        v22 = 2;
        goto LABEL_45;
      }
LABEL_36:
      WebCore::findNodeStartingAtPathComponentIndex((unsigned int *)v23, a2, v17, (unint64_t)v13);
      v21 = v23[0];
      v23[0] = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11, v10);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      v13 = v23[1];
      if (v21)
      {
        *((_DWORD *)v21 + 6) += 2;
        *v3 = v21;
        v22 = 1;
        v11 = v21;
      }
      else
      {
        v11 = 0;
        v22 = 0;
      }
LABEL_45:
      result = (unsigned int *)v24;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef(v24, v10);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
      if ((v22 | 2) != 2)
      {
        v26 = (unint64_t)v13;
        goto LABEL_56;
      }
LABEL_21:
      v14 = (unint64_t)v13;
      if ((unint64_t)v13 >= a2[3])
        goto LABEL_55;
    }
    *(_DWORD *)v20 -= 2;
LABEL_35:
    if (!v19)
      goto LABEL_44;
    goto LABEL_36;
  }
  v11 = 0;
LABEL_55:
  v26 = (unint64_t)v13;
  *v3 = 0;
LABEL_56:
  v25 = 0;
  if (v11)
  {
    v12 = *((_DWORD *)v11 + 6) - 2;
    if (*((_DWORD *)v11 + 6) != 2)
      goto LABEL_16;
LABEL_58:
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v11, v10);
  }
  return result;
}

unsigned int *WebCore::findNodeStartingAtPathComponentIndex(unsigned int *result, unsigned int *a2, WebCore::Node *this, unint64_t a4)
{
  unint64_t v4;
  unsigned int *v5;
  WebCore::Node *v6;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF **v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  v4 = a4;
  v5 = result;
  if (a2[3] <= a4)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = a4;
    return result;
  }
  v6 = this;
  *((_DWORD *)this + 6) += 2;
  while (2)
  {
    v8 = v6;
    if ((*((_WORD *)v6 + 14) & 4) == 0 || (v9 = (WebCore::Node *)*((_QWORD *)v6 + 10)) == 0)
    {
LABEL_31:
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = v4;
      goto LABEL_32;
    }
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)a2 + 32 * v4;
    v12 = *(_DWORD *)(v11 + 24);
    v13 = (WTF **)(v11 + 8);
    *((_DWORD *)v9 + 6) += 2;
    while (1)
    {
      v6 = v9;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)v9 + 104))(&v17, v9);
      v16 = WTF::equal(*v13, v17, v14);
      result = (unsigned int *)v17;
      v17 = 0;
      if (!result)
        goto LABEL_9;
      if (*result == 2)
        break;
      *result -= 2;
LABEL_9:
      if (v16)
        goto LABEL_10;
LABEL_12:
      v9 = (WebCore::Node *)*((_QWORD *)v6 + 7);
      if (v9)
        *((_DWORD *)v9 + 6) += 2;
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v6, a2);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
      if (!v9)
        goto LABEL_31;
    }
    result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    if (!v16)
      goto LABEL_12;
LABEL_10:
    if (v12)
    {
      --v12;
      goto LABEL_12;
    }
    if ((*((_WORD *)v6 + 14) & 1) == 0
      || (result = (unsigned int *)WTF::equal(*((WTF **)v6 + 10), *(const WTF::StringImpl **)(v10 + 32 * v4 + 16), v15),
          (_DWORD)result))
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v8, a2);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
      if (++v4 >= a2[3])
      {
        *((_DWORD *)v6 + 6) += 2;
        *(_QWORD *)v5 = v6;
        *((_QWORD *)v5 + 1) = v4;
        v8 = v6;
        goto LABEL_32;
      }
      continue;
    }
    break;
  }
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = v4;
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(v6, a2);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
LABEL_32:
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v8, a2);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::Geolocation>::deref(_DWORD *result)
{
  bmalloc::api *v1;
  void *v2;

  if (*result == 1)
  {
    WebCore::Geolocation::~Geolocation((WebCore::Geolocation *)(result - 8));
    return (_DWORD *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

WTF::StringImpl **WTF::RefCounted<WebCore::GeolocationPositionError>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[1];
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  WebCore::GeoNotifier *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::GeoNotifier *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (int *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
          v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
          do
          {
            v19 = v18 & v15;
            v18 = ++v16 + v19;
          }
          while (*(_DWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(WebCore::GeoNotifier **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::GeoNotifier::~GeoNotifier(v21, v8);
              WTF::fastFree(v26, v27);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
          *(_DWORD *)v20 = *v10;
          v22 = v4 + 16 * v9;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v23;
          v13 = *(WebCore::GeoNotifier **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (!v13)
            goto LABEL_21;
          if (*(_DWORD *)v13 == 1)
          {
LABEL_23:
            WebCore::GeoNotifier::~GeoNotifier(v13, v8);
            WTF::fastFree(v24, v25);
            goto LABEL_21;
          }
          --*(_DWORD *)v13;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WebCore::GeoNotifier **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
              goto LABEL_23;
            --*(_DWORD *)v13;
          }
        }
      }
LABEL_21:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashMap<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,int,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  WebCore::GeoNotifier **v10;
  WebCore::GeoNotifier *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::GeoNotifier *v22;
  WebCore::GeoNotifier *v23;
  WTF *v24;
  void *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WebCore::GeoNotifier **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != (WebCore::GeoNotifier *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          *(_QWORD *)v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *(_QWORD *)v21 = v22;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v4 + 16 * i + 8);
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              WebCore::GeoNotifier::~GeoNotifier(v23, v8);
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*(_DWORD *)v23;
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_DWORD *WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::begin(_DWORD *result)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[4 * v2];
  if (!*(result - 3))
    return &result[4 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((*result + 1) <= 1)
    {
      result += 4;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::SizedIteratorRange<WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>,int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>>(WTF::SizedIteratorRange<WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>,int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>> const&)::{lambda(WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>,int,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;

  v3 = result;
  v4 = **a2;
  if (v4)
  {
    v11 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v11)
    {
      if (v11 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(v3 + 8) = v11;
      *(_QWORD *)v3 = result;
    }
  }
  v5 = a2[1];
  v6 = a2[3];
  if (v5 != v6)
  {
    v7 = a2[2];
    v8 = *(_QWORD *)v3;
    v9 = *(_DWORD *)(v3 + 12);
    do
    {
      v10 = (_DWORD *)v5[1];
      if (v10)
        ++*v10;
      *(_QWORD *)(v8 + 8 * v9) = v10;
      *(_DWORD *)(v3 + 12) = v9 + 1;
      while (1)
      {
        v5 += 2;
        if (v5 == v7)
          break;
        if ((*(_DWORD *)v5 + 1) > 1)
          goto LABEL_12;
      }
      v5 = v7;
LABEL_12:
      ++v9;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>::destruct(*(WebCore::GeoNotifier **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebCore::GeoNotifier *WTF::VectorTypeOperations<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>::destruct(WebCore::GeoNotifier *result, WTF::StringImpl *a2)
{
  WebCore::GeoNotifier **v3;
  WTF *v4;
  void *v5;

  if (result != a2)
  {
    v3 = (WebCore::GeoNotifier **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::GeoNotifier::~GeoNotifier(result, a2);
          result = (WebCore::GeoNotifier *)WTF::fastFree(v4, v5);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      ++v3;
    }
    while (v3 != (WebCore::GeoNotifier **)a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Geolocation::*&)(void),WebCore::Geolocation*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WebCore::Page *WTF::RefCounted<WebCore::Page>::deref(WebCore::Page *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::Page::~Page(result);
    return (WebCore::Page *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Geolocation::getCurrentPosition(WTF::Ref<WebCore::PositionCallback,WTF::RawPtrTraits<WebCore::PositionCallback>,WTF::DefaultRefDerefTraits<WebCore::PositionCallback>> &&,WTF::RefPtr<WebCore::PositionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::PositionOptions &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3357110;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Geolocation::getCurrentPosition(WTF::Ref<WebCore::PositionCallback,WTF::RawPtrTraits<WebCore::PositionCallback>,WTF::DefaultRefDerefTraits<WebCore::PositionCallback>> &&,WTF::RefPtr<WebCore::PositionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::PositionOptions &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357110;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Geolocation::getCurrentPosition(WTF::Ref<WebCore::PositionCallback,WTF::RawPtrTraits<WebCore::PositionCallback>,WTF::DefaultRefDerefTraits<WebCore::PositionCallback>> &&,WTF::RefPtr<WebCore::PositionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::PositionOptions &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = WTF::fastMalloc((WTF *)0x18);
  v3 = (WTF *)v2;
  *(_QWORD *)v2 = 0x200000001;
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)(v2 + 8) = v7;
  *(_BYTE *)(v2 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 40))(v1, v2);
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    if (!v7)
      return result;
    goto LABEL_5;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = WTF::fastFree(v3, v5);
  if (v7)
  {
LABEL_5:
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::add@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  WebCore::GeoNotifier *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WebCore::GeoNotifier **v14;
  WebCore::GeoNotifier *v15;
  WebCore::GeoNotifier **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  WTF *v28;
  void *v29;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *(WebCore::GeoNotifier **)a2;
  v10 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (WebCore::GeoNotifier **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v25;
        goto LABEL_31;
      }
      if (v15 == (WebCore::GeoNotifier *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (WebCore::GeoNotifier **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *(WebCore::GeoNotifier **)a2;
      v14 = v16;
    }
  }
  *(_QWORD *)a2 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::GeoNotifier::~GeoNotifier((WebCore::GeoNotifier *)result, a2);
      result = (uint64_t *)WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_22;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_28:
      result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash(v4, v24, v14);
      v14 = (WebCore::GeoNotifier **)result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_30;
    }
LABEL_22:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_28;
  }
LABEL_30:
  v27 = v20 + 8 * v23;
  v26 = 1;
LABEL_31:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

WebCore::GeoNotifier **WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::rehash(uint64_t *a1, unsigned int a2, WebCore::GeoNotifier **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebCore::GeoNotifier **v12;
  WebCore::GeoNotifier **v13;
  WebCore::GeoNotifier *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::GeoNotifier **v24;
  WebCore::GeoNotifier *v25;
  WebCore::GeoNotifier *v26;
  WTF *v27;
  void *v28;
  WebCore::GeoNotifier **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WebCore::GeoNotifier **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WebCore::GeoNotifier *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (WebCore::GeoNotifier **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
            {
              WebCore::GeoNotifier::~GeoNotifier(v26, v10);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*(_DWORD *)v26;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Geolocation::watchPosition(WTF::Ref<WebCore::PositionCallback,WTF::RawPtrTraits<WebCore::PositionCallback>,WTF::DefaultRefDerefTraits<WebCore::PositionCallback>> &&,WTF::RefPtr<WebCore::PositionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::PositionOptions &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3357138;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Geolocation::watchPosition(WTF::Ref<WebCore::PositionCallback,WTF::RawPtrTraits<WebCore::PositionCallback>,WTF::DefaultRefDerefTraits<WebCore::PositionCallback>> &&,WTF::RefPtr<WebCore::PositionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::PositionOptions &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357138;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Geolocation::watchPosition(WTF::Ref<WebCore::PositionCallback,WTF::RawPtrTraits<WebCore::PositionCallback>,WTF::DefaultRefDerefTraits<WebCore::PositionCallback>> &&,WTF::RefPtr<WebCore::PositionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WebCore::PositionOptions &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = WTF::fastMalloc((WTF *)0x18);
  v3 = (WTF *)v2;
  *(_QWORD *)v2 = 0x200000001;
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)(v2 + 8) = v7;
  *(_BYTE *)(v2 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 40))(v1, v2);
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    if (!v7)
      return result;
    goto LABEL_5;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = WTF::fastFree(v3, v5);
  if (v7)
  {
LABEL_5:
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits>>(WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&)::{lambda(WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>&&)#1},WTF::Vector<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, _QWORD **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = result;
  v3 = (uint64_t)*a2;
  if (!*a2)
  {
    result = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(0);
LABEL_3:
    v5 = 0;
    goto LABEL_4;
  }
  v9 = *(unsigned int *)(v3 - 12);
  if ((_DWORD)v9)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    *((_DWORD *)v2 + 2) = v9;
    *v2 = v11;
    v3 = (uint64_t)*a2;
    result = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*a2);
    if (!v3)
      goto LABEL_3;
  }
  else
  {
    result = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*a2);
  }
  v5 = (uint64_t *)(v3 + 8 * *(unsigned int *)(v3 - 4));
LABEL_4:
  if (v5 != result)
  {
    v6 = *v2;
    v7 = *((_DWORD *)v2 + 3);
    do
    {
      v8 = (_DWORD *)*result;
      if (*result)
        ++*v8;
      *(_QWORD *)(v6 + 8 * v7) = v8;
      while (++result != v4)
      {
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_13;
      }
      result = v4;
LABEL_13:
      ++v7;
    }
    while (result != v5);
    *((_DWORD *)v2 + 3) = v7;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v17 = v9;
    }
    *a2 = 0;
    v19 = *v17;
    *v17 = v10;
    if (v19)
      result = (uint64_t *)WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v19 + 32));
    v20 = *v4;
    if (*v4)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v4;
    if (*v4)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_22;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_28:
        result = WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::rehash(v4, v26, v17);
        v17 = result;
        v22 = *v4;
        if (*v4)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_30;
      }
LABEL_22:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_28;
    }
LABEL_30:
    v29 = v22 + 8 * v25;
    v28 = 1;
    goto LABEL_31;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v27 = 0;
  else
    v27 = *(unsigned int *)(v6 - 4);
  v28 = 0;
  v29 = v6 + 8 * v27;
LABEL_31:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v29;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
            WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(v26 + 32));
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>,WebCore::Geolocation const*>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = v6;
      v9 = *(_QWORD *)(result + 8 * v6);
      if (v9 != -1)
      {
        if (!v9)
          return 0;
        if (v9 == a2)
          break;
      }
      v6 = (v8 + i) & v2;
    }
    result += 8 * v8;
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v10 + i++) & v4)
  {
    v10 = v8;
    v11 = *(_QWORD *)(v2 + 8 * v8);
    if (v11 != -1)
    {
      if (!v11)
        return 0;
      if (v11 == a2)
        break;
    }
  }
  if ((_DWORD)v10 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 8 * v10) = 0;
  if (a2)
    WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)(a2 + 32));
  *(_QWORD *)(v2 + 8 * v10) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>>::rehash(a1, v17 >> 1, 0);
  }
  return 1;
}

unsigned int *WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    v5 = (unsigned int *)(*(_QWORD *)a1 + 40);
    do
    {
      WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 - 6, v6);
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 - 4);
      *((_QWORD *)v5 - 4) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = (WTF::StringImpl *)*((_QWORD *)v5 - 5);
      *((_QWORD *)v5 - 5) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 16;
      v4 -= 64;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)a1[3] << 6) <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::AppHighlightRangeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(a2 << 6));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (uint64_t)result;
        v8 = v5 << 6;
        v9 = (uint64_t)v4;
        do
        {
          WebCore::AppHighlightRangeData::AppHighlightRangeData(v7, v9);
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v9 + 40), v10);
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v9 + 16), v11);
          v12 = *(WTF::StringImpl **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v7 += 64;
          v9 += 64;
          v8 -= 64;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WebCore::HighlightRange **v32;
  uint64_t v33;
  WebCore::HighlightRange *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  WebCore::HighlightRange **v39;
  uint64_t v40;
  WebCore::HighlightRange *v41;
  WTF *v42;
  void *v43;
  WTF *v44;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *((_DWORD *)*a2 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl *)(v8 + 16 * v15);
    result = *(WTF::StringImpl **)v16;
    if (*(_QWORD *)v16 != -1)
      break;
    v11 = (WTF::StringImpl *)(v8 + 16 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!result)
  {
    if (v11)
    {
      result = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = *a2;
      v16 = v11;
    }
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)v16 = v12;
    v18 = *a3;
    *a3 = 0;
    v19 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        v31 = *(unsigned int *)(v19 + 20);
        if ((_DWORD)v31)
        {
          v32 = *(WebCore::HighlightRange ***)(v19 + 8);
          v33 = 8 * v31;
          do
          {
            v34 = *v32;
            *v32 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 1)
              {
                WebCore::HighlightRange::~HighlightRange(v34, a2);
                WTF::fastFree(v35, v36);
              }
              else
              {
                --*(_DWORD *)v34;
              }
            }
            ++v32;
            v33 -= 8;
          }
          while (v33);
        }
        v37 = *(WTF **)(v19 + 8);
        if (v37)
        {
          *(_QWORD *)(v19 + 8) = 0;
          *(_DWORD *)(v19 + 16) = 0;
          WTF::fastFree(v37, a2);
        }
        result = (WTF::StringImpl *)WTF::fastFree((WTF *)v19, a2);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v26 = *a1;
    if (*a1)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_33;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_36:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v30, (WTF::StringImpl **)v16);
        v16 = result;
        v26 = *a1;
        if (*a1)
          v29 = *(unsigned int *)(v26 - 4);
        else
          v29 = 0;
        goto LABEL_40;
      }
LABEL_33:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_36;
    }
LABEL_40:
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v26 + 16 * v29;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (result != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v23 = v8 + 16 * v15;
  v24 = *a3;
  *a3 = 0;
  v25 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v38 = *(unsigned int *)(v25 + 20);
      if ((_DWORD)v38)
      {
        v39 = *(WebCore::HighlightRange ***)(v25 + 8);
        v40 = 8 * v38;
        do
        {
          v41 = *v39;
          *v39 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
            {
              WebCore::HighlightRange::~HighlightRange(v41, a2);
              WTF::fastFree(v42, v43);
            }
            else
            {
              --*(_DWORD *)v41;
            }
          }
          ++v39;
          v40 -= 8;
        }
        while (v40);
      }
      v44 = *(WTF **)(v25 + 8);
      if (v44)
      {
        *(_QWORD *)(v25 + 8) = 0;
        *(_DWORD *)(v25 + 16) = 0;
        WTF::fastFree(v44, a2);
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v25, a2);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v20 = v19 & v17;
            v19 = ++v18 + v20;
          }
          while (*(_QWORD *)(v16 + 16 * v20));
          v21 = v16 + 16 * v20;
          WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref((uint64_t *)(v21 + 8), v10);
          v23 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = *v13;
          *v13 = 0;
          *(_QWORD *)v21 = v24;
          v25 = (uint64_t *)(v6 + 16 * v11);
          v26 = v25[1];
          *++v25 = 0;
          *(_QWORD *)(v21 + 8) = v26;
          WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref(v25, v22);
          v27 = *v13;
          *v13 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
        else
        {
          WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>::~Ref((uint64_t *)(v6 + 16 * v11 + 8), v10);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::SerializedPlatformDataCue::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x48);
  v5 = result;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3357170;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 64) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = WebCore::SerializedPlatformDataCueValue::Data::Data(result + 16, (uint64_t *)a1);
    *(_BYTE *)(v5 + 64) = 1;
  }
  *a2 = v5;
  return result;
}

void sub_19535BF38(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF *v2;
  WebCore::SerializedPlatformDataCueValue::Data *v3;

  if (*((_BYTE *)v2 + 64))
    WebCore::SerializedPlatformDataCueValue::Data::~Data(v3, a2);
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::SerializedPlatformDataCueMac::data(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::SerializedPlatformDataCueMac::deserialize(WebCore::SerializedPlatformDataCueMac *this, JSC::JSGlobalObject *a2)
{
  objc_object *v3;
  JSContext *v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;

  WebCore::SerializedPlatformDataCueValue::toNSDictionary((_BYTE *)this + 16, (uint64_t *)&cf);
  if (!cf)
    return 2;
  v3 = (objc_object *)objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", a2);
  v5 = objc_msgSend(WebCore::jsValueWithValueInContext((AVMetadataItem *)cf, v3, v4), "JSValueRef");
  if (v5)
    v6 = v5;
  else
    v6 = 2;
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  return v6;
}

void sub_19535BFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void *WebCore::jsValueWithValueInContext(AVMetadataItem *this, objc_object *a2, JSContext *a3)
{
  void *v5;
  AVMetadataItem *v6;
  void *v8;
  JSContext *v9;
  void *v10;
  JSObjectRef v11;
  uint64_t isKindOfClass;
  JSContext *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  OpaqueJSValue *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  WebCore *v20;
  JSContext *v21;
  void *v22;
  WebCore *v23;
  JSC::ArrayBuffer *v24;
  uint64_t v25;
  WTF::DeferrableRefCountedBase *v26;
  WebCore::JSDOMGlobalObject *v27[6];
  char v28;
  CFTypeRef cf;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v5 = (void *)MEMORY[0x1E0CBE108];
    v6 = this;
    return (void *)objc_msgSend(v5, "valueWithObject:inContext:", v6, a2);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = (void *)MEMORY[0x1E0CBE108];
    v6 = (AVMetadataItem *)-[AVMetadataItem localeIdentifier](this, "localeIdentifier");
    v5 = v8;
    return (void *)objc_msgSend(v5, "valueWithObject:inContext:", v6, a2);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return WebCore::jsValueWithDictionaryInContext((WebCore *)this, (NSDictionary *)a2, v9);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v27[0] = 0;
    v10 = (void *)objc_msgSend(MEMORY[0x1E0CBE108], "valueWithNewArrayInContext:", a2);
    v11 = JSValueToObject((JSContextRef)-[objc_object JSGlobalContextRef](a2, "JSGlobalContextRef"), (JSValueRef)objc_msgSend(v10, "JSValueRef"), v27);
    if (v27[0])
    {
      return (void *)objc_msgSend(MEMORY[0x1E0CBE108], "valueWithUndefinedInContext:", a2);
    }
    else
    {
      v16 = v11;
      v17 = -[AVMetadataItem count](this, "count");
      if (v17)
      {
        v18 = v17;
        for (i = 0; i != v18; ++i)
        {
          v20 = (WebCore *)-[AVMetadataItem objectAtIndex:](this, "objectAtIndex:", i);
          v22 = (void *)WebCore::jsValueWithValueInContext(v20, a2, v21);
          if (v22)
            JSObjectSetPropertyAtIndex((JSContextRef)-[objc_object JSGlobalContextRef](a2, "JSGlobalContextRef"), v16, i, (JSValueRef)objc_msgSend(v22, "JSValueRef"), v27);
        }
      }
    }
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      if (this)
      {
        -[AVMetadataItem bytes](this, "bytes");
        -[AVMetadataItem length](this, "length");
      }
      JSC::ArrayBuffer::tryCreate();
      v23 = (WebCore *)-[objc_object JSGlobalContextRef](a2, "JSGlobalContextRef");
      if (v27[0])
        v25 = WebCore::toJS(v23, (uint64_t)v23, v27[0], v24);
      else
        v25 = 2;
      v10 = (void *)objc_msgSend(MEMORY[0x1E0CBE108], "valueWithJSValueRef:inContext:", v25, a2);
      v26 = v27[0];
      v27[0] = 0;
      if (v26)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v26);
    }
    else
    {
      PAL::getAVMetadataItemClass[0]((PAL *)isKindOfClass);
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        WebCore::SerializedPlatformDataCueValue::SerializedPlatformDataCueValue((WebCore::SerializedPlatformDataCueValue *)v27, this);
        WebCore::SerializedPlatformDataCueValue::toNSDictionary(v27, (uint64_t *)&cf);
        v10 = WebCore::jsValueWithDictionaryInContext((WebCore *)cf, (NSDictionary *)a2, v13);
        v15 = cf;
        cf = 0;
        if (v15)
          CFRelease(v15);
        if (v28)
          WebCore::SerializedPlatformDataCueValue::Data::~Data((WebCore::SerializedPlatformDataCueValue::Data *)v27, v14);
      }
      else
      {
        return 0;
      }
    }
  }
  return v10;
}

void sub_19535C314(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, CFTypeRef cf)
{
  CFTypeRef v17;

  v17 = cf;
  cf = 0;
  if (v17)
    CFRelease(v17);
  if (a15)
    WebCore::SerializedPlatformDataCueValue::Data::~Data((WebCore::SerializedPlatformDataCueValue::Data *)&a9, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SerializedPlatformDataCueMac::isEqual(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  BOOL v3;

  if (*(_BYTE *)(a1 + 64))
    v3 = *(_BYTE *)(a2 + 64) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  else
    return WebCore::SerializedPlatformDataCueValue::Data::operator==(a1 + 16, a2 + 16, a3);
}

uint64_t *WebCore::SerializedPlatformDataCueMac::allowedClassesForNativeValues(WebCore::SerializedPlatformDataCueMac *this)
{
  uint64_t v2;
  uint64_t v3[3];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_132 & 1) == 0)
  {
    v4 = objc_opt_class();
    v5 = objc_opt_class();
    v6 = objc_opt_class();
    v7 = objc_opt_class();
    v8 = objc_opt_class();
    v9[0] = objc_opt_class();
    v2 = 0;
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v3, &v2, &v4);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v3, &v2, &v5);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v3, &v2, &v6);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v3, &v2, &v7);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v3, &v2, &v8);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v3, &v2, v9);
    qword_1ECE81E78 = v2;
    _MergedGlobals_132 = 1;
  }
  return &qword_1ECE81E78;
}

void sub_19535C4D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl ***WebCore::SerializedPlatformDataCueMac::encodableValue@<X0>(WTF::StringImpl ***this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  char v7[2];

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*((_BYTE *)this + 64))
  {
    v3 = this;
    v4 = this[2];
    if (v4)
      *(_DWORD *)v4 += 2;
    *(_QWORD *)a2 = v4;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a2 + 8), this + 3);
    v5 = v3[4];
    if (v5)
      *(_DWORD *)v5 += 2;
    this = (WTF::StringImpl ***)v3[5];
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = this;
    if (this)
      this = (WTF::StringImpl ***)CFRetain(this);
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = -1;
    v6 = *((unsigned int *)v3 + 14);
    if ((_DWORD)v6 != -1)
    {
      this = (WTF::StringImpl ***)((uint64_t (*)(char *, uint64_t, WTF::StringImpl ***))off_1E33571D8[v6])(v7, a2 + 32, v3 + 6);
      *(_DWORD *)(a2 + 40) = v6;
    }
    *(_BYTE *)(a2 + 48) = 1;
  }
  return this;
}

void sub_19535C5C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  uint64_t v17;
  const void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;

  v17 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E33571B0[v17])(&a13, v15);
  *(_DWORD *)(v13 + 40) = -1;
  v18 = *(const void **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v18)
    CFRelease(v18);
  v19 = *(WTF::StringImpl **)(v13 + 16);
  *(_QWORD *)(v13 + 16) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *v14;
  if (v20)
  {
    v21 = *((unsigned int *)v20 - 1);
    if ((_DWORD)v21)
    {
      v22 = v20;
      do
      {
        v23 = *v22;
        if (*v22 != (WTF::StringImpl *)-1)
        {
          v24 = v22[1];
          v22[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
            {
              v25 = v22;
              WTF::StringImpl::destroy(v24, a2);
              v22 = v25;
              v23 = *v25;
            }
            else
            {
              *(_DWORD *)v24 -= 2;
            }
          }
          *v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              v26 = v22;
              WTF::StringImpl::destroy(v23, a2);
              v22 = v26;
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 2), a2);
  }
  v27 = *(WTF::StringImpl **)v13;
  *(_QWORD *)v13 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (*(_BYTE *)(v13 + 48))
    WebCore::SerializedPlatformDataCueValue::Data::~Data((WebCore::SerializedPlatformDataCueValue::Data *)v13, a2);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::stringMatchesWildcardString(WebCore *this, const WTF::String *a2, const WTF::String *a3)
{
  WTF::StringImpl *v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  _BYTE v19[8];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  char v23;
  __int16 v24;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v20;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  LOBYTE(v24) = 94;
  WTF::StringBuilder::append();
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v9 = 0;
    do
    {
      if (v9 >= *(unsigned int *)(v8 + 4))
        break;
      v10 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(v8 + 16) & 4) != 0)
      {
        v11 = *(unsigned __int8 *)(v10 + v9);
        if (v4)
          goto LABEL_6;
      }
      else
      {
        v11 = *(unsigned __int16 *)(v10 + 2 * v9);
        if (v4)
        {
LABEL_6:
          if (WTF::StringImpl::find((uint64_t)v4, v11, 0, v5, v6, v7) != -1)
            goto LABEL_12;
        }
      }
      if (v11 != 92)
      {
        if (v11 == 42)
        {
          LOBYTE(v24) = 46;
          WTF::StringBuilder::append();
        }
        goto LABEL_13;
      }
LABEL_12:
      v24 = 92;
      WTF::StringBuilder::append();
LABEL_13:
      v24 = v11;
      WTF::StringBuilder::append();
      ++v9;
      v8 = *(_QWORD *)a2;
    }
    while (*(_QWORD *)a2);
  }
  LOBYTE(v24) = 36;
  WTF::StringBuilder::append();
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v20);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v20);
  v13 = v20;
  if (v20)
    *(_DWORD *)v20 += 2;
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v12);
      if (!v4)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (!v4)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v12);
  else
    *(_DWORD *)v4 -= 2;
LABEL_25:
  JSC::Yarr::RegularExpression::RegularExpression();
  v16 = JSC::Yarr::RegularExpression::match();
  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v19);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v17);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v16 != -1;
}

void sub_19535CABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)&a10);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v14);
    else
      *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebCore::SerializedPlatformDataCueMac::~SerializedPlatformDataCueMac(WebCore::SerializedPlatformDataCueMac *this, WTF::StringImpl *a2)
{
  if (*((_BYTE *)this + 64))
    WebCore::SerializedPlatformDataCueValue::Data::~Data((WebCore::SerializedPlatformDataCueMac *)((char *)this + 16), a2);
}

{
  if (*((_BYTE *)this + 64))
    WebCore::SerializedPlatformDataCueValue::Data::~Data((WebCore::SerializedPlatformDataCueMac *)((char *)this + 16), a2);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SerializedPlatformDataCueMac::platformType(WebCore::SerializedPlatformDataCueMac *this)
{
  return 1;
}

uint64_t WebCore::SerializedPlatformDataCueMac::encodingRequiresPlatformData(WebCore::SerializedPlatformDataCueMac *this)
{
  return 1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **v30;
  uint64_t v31;

  *a1 = 0;
  if (!*a2)
    return a1;
  v4 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v4)
    return a1;
  v6 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v4)
      goto LABEL_9;
  }
  else if (3 * v8 > 4 * v4)
  {
LABEL_7:
    v9 = (double)v4;
    v10 = (double)v8;
    v11 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v8) = 2 * v8;
  if (v8 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v9 = (double)v4;
  v10 = (double)v8;
  v11 = 0.416666667;
LABEL_10:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastZeroedMalloc((WTF *)(16 * v12 + 16));
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v15 = *a2;
  if (*a2)
  {
    v17 = *((unsigned int *)v15 - 1);
    v18 = &v15[2 * v17];
    if (*((_DWORD *)v15 - 3))
    {
      v16 = v15;
      if ((_DWORD)v17)
      {
        v31 = 16 * v17;
        v16 = v15;
        while ((unint64_t)*v16 + 1 <= 1)
        {
          v16 += 2;
          v31 -= 16;
          if (!v31)
          {
            v16 = v18;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v16 = &v15[2 * v17];
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v18 = &v15[2 * v17];
LABEL_18:
  if (v15)
    v19 = &v15[2 * *((unsigned int *)v15 - 1)];
  else
    v19 = 0;
  while (v16 != v19)
  {
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = *((_DWORD *)*v16 + 4);
    if (v22 < 0x100)
      v23 = WTF::StringImpl::hashSlowCase(*v16);
    else
      v23 = v22 >> 8;
    v24 = 0;
    do
    {
      v25 = v23 & v21;
      v23 = ++v24 + v25;
    }
    while (*(_QWORD *)(v20 + 16 * v25));
    v26 = *v16;
    if (*v16)
      *(_DWORD *)v26 += 2;
    v27 = (WTF::StringImpl **)(v20 + 16 * v25);
    *v27 = v26;
    v28 = v16[1];
    if (v28)
      *(_DWORD *)v28 += 2;
    v29 = v27[1];
    v27[1] = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v14);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v16 + 2;
    v16 = v18;
    if (v30 != v18)
    {
      v16 = v30;
      while ((unint64_t)*v16 + 1 <= 1)
      {
        v16 += 2;
        if (v16 == v18)
        {
          v16 = v18;
          break;
        }
      }
    }
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

void *WebCore::jsValueWithDictionaryInContext(WebCore *this, NSDictionary *a2, JSContext *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore *v10;
  JSContext *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const OpaqueJSContext *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  void *v23;
  OpaqueJSValue *object;
  WTF::StringImpl *v25;
  OpaqueJSString *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  JSValueRef exception;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  exception = 0;
  v23 = (void *)objc_msgSend(MEMORY[0x1E0CBE108], "valueWithNewObjectInContext:", a2);
  object = JSValueToObject((JSContextRef)-[NSDictionary JSGlobalContextRef](a2, "JSGlobalContextRef"), (JSValueRef)objc_msgSend(v23, "JSValueRef"), &exception);
  if (exception)
    return (void *)objc_msgSend(MEMORY[0x1E0CBE108], "valueWithUndefinedInContext:", a2);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v5 = (void *)-[WebCore keyEnumerator](this, "keyEnumerator");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v28;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v28 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v10 = (WebCore *)-[WebCore objectForKey:](this, "objectForKey:", v9);
          v12 = (void *)WebCore::jsValueWithValueInContext(v10, (objc_object *)a2, v11);
          if (v12)
          {
            MEMORY[0x19AEA5508](&v25, v9);
            OpaqueJSString::tryCreate();
            v14 = v25;
            v25 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v13);
              else
                *(_DWORD *)v14 -= 2;
            }
            v15 = (const OpaqueJSContext *)-[NSDictionary JSGlobalContextRef](a2, "JSGlobalContextRef");
            JSObjectSetProperty(v15, object, v26, (JSValueRef)objc_msgSend(v12, "JSValueRef"), 0, &exception);
            v16 = (unsigned int *)v26;
            v26 = 0;
            if (v16)
            {
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v16);
                WTF::fastFree(v19, v20);
              }
            }
          }
        }
        ++v8;
      }
      while (v8 != v6);
      v21 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      v6 = v21;
    }
    while (v21);
  }
  return v23;
}

void sub_19535D0CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, OpaqueJSString *a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::StringImpl::find(uint64_t a1, unsigned int a2, unint64_t a3, double a4, double a5, float a6)
{
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 4);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    return WTF::find(v9, v10, a2, a3);
  else
    return WTF::find<char16_t,(void *)0>(v9, v10, a2, a3, a4, a5, a6);
}

uint64_t WTF::find(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;

  if (a3 > 0xFF || a2 <= a4)
    return -1;
  v5 = a1 + a4;
  v6 = a2 - a4;
  v7 = 16;
  if (a2 - a4 < 0x10)
    v7 = a2 - a4;
  if (v7)
  {
    v8 = v7;
    v9 = (unsigned __int8 *)(a1 + a4);
    while (*v9 != a3)
    {
      ++v9;
      if (!--v8)
        goto LABEL_9;
    }
    return (uint64_t)&v9[-a1];
  }
LABEL_9:
  if (v6 >= 0x11)
  {
    v9 = (unsigned __int8 *)memchr((void *)(v5 + v7), a3, v6 - v7);
    if (v9)
      return (uint64_t)&v9[-a1];
  }
  return -1;
}

uint64_t *WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_33;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_28;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_29:
    result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2, v25, v14);
    v14 = result;
    v21 = *a2;
    if (*a2)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_33:
  *v5 = (uint64_t)v14;
  v5[1] = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

uint64_t WebCore::IdentityCredentialsContainer::get(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int8 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  objc_class *v13;

  result = WebCore::CredentialsContainer::performCommonChecks<WebCore::CredentialRequestOptions>(a1, a2, a3);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a2 + 256))
    {
      if (*(_DWORD *)(a2 + 252))
        return WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>>(*a3, 0);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = *a3;
      v7 = 33;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = *a3;
      v7 = 6;
    }
    v13 = 0;
    v11[0] = v7;
    if (v10)
      *(_DWORD *)v10 += 2;
    v12 = v10;
    WebCore::DeferredPromise::reject(v6, v11, 0, &v13);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = (uint64_t)v10;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        return WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::IdentityCredentialsContainer::isCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  result = WebCore::CredentialsContainer::performCommonChecks<WebCore::CredentialRequestOptions>(a1, a2, a3);
  if ((_DWORD)result)
    return WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>>(*a3, 0);
  return result;
}

void WebCore::NavigatorIdentity::~NavigatorIdentity(WebCore::NavigatorIdentity *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
    else
      --v2[2];
  }
}

void WebCore::NavigatorIdentity::~NavigatorIdentity(WebCore::NavigatorIdentity *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

_DWORD *WebCore::NavigatorIdentity::identity(WebCore::NavigatorIdentity *this, WebCore::Navigator *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  const char **v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int8 *v28[2];

  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19535D730);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || !*(_QWORD *)(v7 + 296))
    return 0;
  v9 = (uint64_t *)((char *)this + 72);
  v28[0] = "NavigatorIdentity";
  v28[1] = (unsigned __int8 *)18;
  v10 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v28);
  if (!v10 || (v11 = (uint64_t)v10[2]) == 0)
  {
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = off_1E3357240;
    *(_QWORD *)(v11 + 8) = 0;
    v28[0] = (unsigned __int8 *)v11;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v9, "NavigatorIdentity", (unsigned __int8 *)0x12, (const char **)v28);
    v12 = v28[0];
    v28[0] = 0;
    if (v12)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 8) + 72) + 8);
  if (*(_BYTE *)(v13 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19535D750);
  }
  v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 240) + 8) + 296));
  v16 = v14;
  if (v14)
  {
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 + 1, v14));
    v20 = *(_QWORD *)(v11 + 8);
    v19 = v11 + 8;
    result = (_DWORD *)v20;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v16);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v16));
      if (!v22)
      {
        v23 = (uint64_t)result;
        atomic_store(1u, v16);
        v24 = v16[7];
        if ((_DWORD)v24)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v24));
        v25 = (WTF *)*((_QWORD *)v16 + 2);
        if (v25)
        {
          *((_QWORD *)v16 + 2) = 0;
          v16[6] = 0;
          WTF::fastFree(v25, v15);
        }
        WTF::fastFree((WTF *)v16, v15);
        return (_DWORD *)v23;
      }
      return result;
    }
  }
  else
  {
    v26 = *(_QWORD *)(v11 + 8);
    v19 = v11 + 8;
    result = (_DWORD *)v26;
    if (v26)
      return result;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)0x18);
  result[2] = 1;
  *((_QWORD *)result + 2) = v16;
  *(_QWORD *)result = off_1E3357210;
  v27 = *(_DWORD **)v19;
  *(_QWORD *)v19 = result;
  if (v27)
  {
    if (v27[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 24))(v27);
      return *(_DWORD **)v19;
    }
    else
    {
      --v27[2];
    }
  }
  return result;
}

uint64_t WebCore::IDBCursor::IDBCursor(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E3357260;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *a3;
  v7 = a3[1];
  *(_OWORD *)(a1 + 56) = a3[2];
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  v8 = *((_BYTE *)a3 + 48);
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 72) = v8;
  *(_DWORD *)(a1 + 96) = -1;
  v9 = *((unsigned int *)a3 + 18);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v9])(&v19);
    *(_DWORD *)(a1 + 96) = v9;
  }
  v10 = *((_BYTE *)a3 + 80);
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 104) = v10;
  *(_DWORD *)(a1 + 128) = -1;
  v11 = *((unsigned int *)a3 + 26);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v11])(&v20);
    *(_DWORD *)(a1 + 128) = v11;
  }
  *(_WORD *)(a1 + 136) = *((_WORD *)a3 + 56);
  v12 = *((_WORD *)a3 + 60);
  *(_BYTE *)(a1 + 146) = *((_BYTE *)a3 + 122);
  *(_WORD *)(a1 + 144) = v12;
  v13 = (unsigned int *)(*(_QWORD *)(a2 + 152) + 24);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 289) = 0u;
  __dmb(0xAu);
  v15 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v15)
    *(_QWORD *)(v15 + 8) = 3;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  __dmb(0xAu);
  v16 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v16)
    *(_QWORD *)(v16 + 8) = 3;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  __dmb(0xAu);
  v17 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v17)
    *(_QWORD *)(v17 + 8) = 3;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0uLL;
  *(_OWORD *)(a1 + 400) = 0uLL;
  return a1;
}

{
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E3357260;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *a3;
  v7 = a3[1];
  *(_OWORD *)(a1 + 56) = a3[2];
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  v8 = *((_BYTE *)a3 + 48);
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 72) = v8;
  *(_DWORD *)(a1 + 96) = -1;
  v9 = *((unsigned int *)a3 + 18);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v9])(&v19);
    *(_DWORD *)(a1 + 96) = v9;
  }
  v10 = *((_BYTE *)a3 + 80);
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 104) = v10;
  *(_DWORD *)(a1 + 128) = -1;
  v11 = *((unsigned int *)a3 + 26);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v11])(&v20);
    *(_DWORD *)(a1 + 128) = v11;
  }
  *(_WORD *)(a1 + 136) = *((_WORD *)a3 + 56);
  v12 = *((_WORD *)a3 + 60);
  *(_BYTE *)(a1 + 146) = *((_BYTE *)a3 + 122);
  *(_WORD *)(a1 + 144) = v12;
  v13 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 24);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 289) = 0u;
  __dmb(0xAu);
  v15 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v15)
    *(_QWORD *)(v15 + 8) = 3;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  __dmb(0xAu);
  v16 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v16)
    *(_QWORD *)(v16 + 8) = 3;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  __dmb(0xAu);
  v17 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v17)
    *(_QWORD *)(v17 + 8) = 3;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0uLL;
  *(_OWORD *)(a1 + 400) = 0uLL;
  return a1;
}

void WebCore::IDBCursor::~IDBCursor(WebCore::IDBCursor *this, WTF::StringImpl *a2)
{
  void *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  *(_QWORD *)this = off_1E3357260;
  WTF::Deque<WebCore::IDBCursorRecord,0ul>::destroyAll((unint64_t *)this + 48, a2);
  v4 = (WTF *)*((_QWORD *)this + 50);
  if (v4)
  {
    *((_QWORD *)this + 50) = 0;
    *((_DWORD *)this + 102) = 0;
    WTF::fastFree(v4, v3);
  }
  v5 = *((_QWORD *)this + 47);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 47) = 0;
  }
  v6 = *((_QWORD *)this + 45);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 45) = 0;
  }
  v7 = *((_QWORD *)this + 43);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 43) = 0;
  }
  if (*((_BYTE *)this + 328))
  {
    v8 = *((unsigned int *)this + 80);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, char *))off_1E33573E8[v8])(&v27, (char *)this + 304);
    *((_DWORD *)this + 80) = -1;
  }
  WebCore::IDBValue::~IDBValue((WebCore::IDBCursor *)((char *)this + 264), (WTF::StringImpl *)v3);
  v10 = *((unsigned int *)this + 64);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v28, (char *)this + 240);
  *((_DWORD *)this + 64) = -1;
  v11 = *((unsigned int *)this + 56);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v11])(&v29, (char *)this + 208);
  *((_DWORD *)this + 56) = -1;
  v12 = (unsigned int *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v12)
  {
    if (*v12 == 1)
    {
      v21 = v12[6];
      if ((_DWORD)v21 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v21])(&v33, v12 + 2);
      v12[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v12, v9);
    }
    else
    {
      --*v12;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v13)
  {
    if (*v13 == 1)
    {
      v22 = v13[6];
      if ((_DWORD)v22 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v22])(&v34, v13 + 2);
      v13[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v13, v9);
    }
    else
    {
      --*v13;
    }
  }
  v14 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v23 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v23)
      {
        v26 = v14;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v23));
        v14 = v26;
      }
      v24 = *(WTF **)(v14 + 16);
      if (v24)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        v25 = v14;
        WTF::fastFree(v24, v9);
        v14 = v25;
      }
      WTF::fastFree((WTF *)v14, v9);
    }
  }
  v17 = *((unsigned int *)this + 40);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, char *))off_1E3357440[v17])(&v30, (char *)this + 152);
  *((_DWORD *)this + 40) = -1;
  v18 = *((unsigned int *)this + 32);
  if ((_DWORD)v18 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v18])(&v31, (char *)this + 112);
  *((_DWORD *)this + 32) = -1;
  v19 = *((unsigned int *)this + 24);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v19])(&v32, (char *)this + 80);
  *((_DWORD *)this + 24) = -1;
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBCursor::~IDBCursor(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::IDBCursor::update@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, WTF *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  WTF *v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t (**v11)();
  uint64_t v13;
  unsigned int *result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const WTF::StringImpl *v31;
  void *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned __int8 **v37;
  uint64_t v38;
  int v39;
  unsigned int *v40;
  WTF **v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  bmalloc::api *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unsigned int *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  WTF **v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63[2];
  WTF *v64;
  uint64_t v65;
  char v66;

  v13 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v13 == -1)
    goto LABEL_94;
  v6 = a3;
  v7 = a2;
  v5 = (unsigned __int8 *)a1;
  v8 = a1 + 152;
  v59 = &v64;
  if (((unsigned int (*)(WTF ***, uint64_t))off_1E33575A8[v13])(&v59, a1 + 152))
    goto LABEL_3;
  v16 = *((unsigned int *)v5 + 40);
  if ((_DWORD)v16 == -1)
    goto LABEL_94;
  v59 = &v64;
  v11 = off_1E33575B8;
  if (*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(WTF ***, uint64_t))off_1E33575B8[v16])(&v59, v8) + 152) + 136))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = 27;
    goto LABEL_7;
  }
  v17 = *((unsigned int *)v5 + 40);
  if ((_DWORD)v17 == -1)
    goto LABEL_94;
  v59 = &v64;
  if (!*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(WTF ***, uint64_t))off_1E33575B8[v17])(&v59, v8) + 152) + 96))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = 28;
    goto LABEL_7;
  }
  if (!v5[176] || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 16))(v5) & 1) == 0)
  {
LABEL_3:
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = 8;
LABEL_7:
    *(_BYTE *)a4 = v15;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v18 = *((unsigned int *)v5 + 40);
  if ((_DWORD)v18 == -1)
    goto LABEL_94;
  v9 = *((_QWORD *)v7 + 7);
  v59 = &v64;
  v19 = *(_QWORD *)(((uint64_t (*)(WTF ***, uint64_t))off_1E33575B8[v18])(&v59, v8) + 152);
  v10 = (unsigned int *)(v19 + 24);
  do
    v20 = __ldaxr(v10);
  while (__stlxr(v20 + 1, v10));
  if (*(_BYTE *)(v19 + 136) != 1)
  {
    if (*(_BYTE *)(v19 + 136))
      goto LABEL_24;
    *(_BYTE *)(v19 + 136) = 1;
  }
  if (*(_BYTE *)(v19 + 137))
  {
    v21 = *(_QWORD *)(v19 + 296);
    if (!v21 || !*(_DWORD *)(v21 - 12))
    {
      v22 = *(_QWORD *)(v19 + 328);
      if (!v22 || !*(_DWORD *)(v22 - 12))
        WebCore::IDBTransaction::commitInternal((WebCore::IDBTransaction *)v19);
    }
  }
LABEL_24:
  v58 = v19;
  v64 = 0;
  v65 = 0;
  v63[0] = 0;
  v63[1] = 0;
  WebCore::SerializedScriptValue::create(v7, (uint64_t)v6, (uint64_t)v63, (uint64_t)&v64, 1, 1, 0, (uint64_t)&v59);
  if (!v61)
  {
    v24 = (uint64_t)v59;
    v59 = 0;
    v63[0] = v24;
LABEL_26:
    ((void (*)(char *, WTF ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v61])(&v66, &v59);
    v4 = v24;
    goto LABEL_27;
  }
  v24 = 0;
  v4 = 0;
  v63[0] = 0;
  if (v61 != -1)
    goto LABEL_26;
LABEL_27:
  v25 = HIDWORD(v65);
  v26 = v64;
  if (HIDWORD(v65))
    goto LABEL_95;
  while (1)
  {
    v27 = (unsigned int *)v58;
    if (v26)
    {
      v64 = 0;
      LODWORD(v65) = 0;
      WTF::fastFree(v26, v23);
    }
    if (*(unsigned __int8 *)(v58 + 136) - 2 >= 3)
      *(_BYTE *)(v58 + 136) = 0;
    if (*(_QWORD *)(v9 + 16))
    {
      result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a4 = 21;
      *(_DWORD *)(a4 + 16) = 1;
      goto LABEL_72;
    }
    v28 = *((unsigned int *)v5 + 40);
    if ((_DWORD)v28 == -1)
      goto LABEL_94;
    v59 = &v64;
    v29 = ((uint64_t (*)(WTF ***, uint64_t))v11[v28])(&v59, v8);
    if (*(_BYTE *)(v29 + 64))
      break;
LABEL_44:
    v34 = *((unsigned int *)v5 + 40);
    if ((_DWORD)v34 == -1)
      goto LABEL_94;
    v59 = &v64;
    v35 = ((uint64_t (*)(WTF ***, uint64_t))v11[v34])(&v59, v8);
    v36 = (WTF *)*((_QWORD *)v5 + 24);
    if (v36)
      ++*(_DWORD *)v36;
    v64 = v36;
    result = (unsigned int *)WebCore::IDBObjectStore::putOrAdd(v35, v7, (uint64_t)v6, &v64, 1, 1, v63, (uint64_t)&v59);
    v6 = v64;
    if (v64)
    {
      if (*(_DWORD *)v64 == 1)
      {
        v50 = *((unsigned int *)v64 + 6);
        if ((_DWORD)v50 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v50])(&v66, (char *)v64 + 8);
        *((_DWORD *)v6 + 6) = -1;
        result = (unsigned int *)bmalloc::api::isoDeallocate(v6, v37);
      }
      else
      {
        --*(_DWORD *)v64;
      }
    }
    if (!v61)
    {
      v41 = v59;
      v59 = 0;
      ++*((_DWORD *)v5 + 4);
      if (!*((_BYTE *)v41 + 328))
      {
        v41[39] = (WTF *)v5;
        *((_DWORD *)v41 + 80) = 2;
        *((_BYTE *)v41 + 328) = 1;
        goto LABEL_70;
      }
      v42 = *((unsigned int *)v41 + 80);
      if ((_DWORD)v42 != -1)
      {
        v37 = (unsigned __int8 **)(v41 + 39);
        if ((_DWORD)v42 == 2)
        {
          result = (unsigned int *)*v37;
          *v37 = v5;
          if (result)
          {
            if (result[4] == 1)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            else
              --result[4];
          }
LABEL_70:
          *(_QWORD *)a4 = v41;
          *(_DWORD *)(a4 + 16) = 0;
          v39 = v61;
          if (v61 == -1)
            goto LABEL_72;
          goto LABEL_71;
        }
        result = (unsigned int *)((uint64_t (*)(WTF **, unsigned __int8 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_8IDBIndexENSA_ISF_EENSC_ISF_EEEENS7_INS8_9IDBCursorENSA_ISJ_EENSC_ISJ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v42])(&v64, v37);
      }
      v41[39] = (WTF *)v5;
      *((_DWORD *)v41 + 80) = 2;
      goto LABEL_70;
    }
    if (v61 == 1)
    {
      v38 = v60;
      v60 = 0;
      *(_BYTE *)a4 = (_BYTE)v59;
      *(_QWORD *)(a4 + 8) = v38;
      v39 = 1;
      *(_DWORD *)(a4 + 16) = 1;
LABEL_71:
      result = (unsigned int *)((uint64_t (*)(WTF **, WTF ***))off_1E3357450[v39])(&v64, &v59);
      goto LABEL_72;
    }
LABEL_94:
    v26 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_95:
    v54 = 8 * v25;
    do
    {
      v26 = (WTF *)(WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)v26, v23)+ 1);
      v54 -= 8;
    }
    while (v54);
    v26 = v64;
  }
  v9 = v29;
  v30 = WebCore::SerializedScriptValue::deserialize(v4, v7, v7, 0, 0);
  if (!*(_BYTE *)(v9 + 64))
  {
    v55 = (unsigned int *)std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::IDBCursor::advance(v55, v56, v57);
  }
  WebCore::maybeCreateIDBKeyFromScriptValueAndKeyPath(v7, (unint64_t)v30, v9 + 40, (unint64_t *)&v64);
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v59, v64);
  if (v64 && (WebCore::IDBKeyData::operator==((unsigned __int8 *)&v59, v5 + 232, v31) & 1) != 0)
  {
    if (v62 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v62])(&v66, &v60);
    v33 = (unsigned int *)v64;
    v64 = 0;
    if (v33)
    {
      if (*v33 == 1)
      {
        v52 = v33[6];
        if ((_DWORD)v52 != -1)
          ((void (*)(WTF ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v52])(&v59, v33 + 2);
        v33[6] = -1;
        bmalloc::api::isoDeallocate((bmalloc::api *)v33, v32);
      }
      else
      {
        --*v33;
      }
    }
    v27 = (unsigned int *)v58;
    goto LABEL_44;
  }
  result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a4 = 26;
  *(_DWORD *)(a4 + 16) = 1;
  if (v62 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v62])(&v66, &v60);
  v40 = (unsigned int *)v64;
  v64 = 0;
  if (v40)
  {
    if (*v40 == 1)
    {
      v51 = v40[6];
      if ((_DWORD)v51 != -1)
        ((void (*)(WTF ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v51])(&v59, v40 + 2);
      v40[6] = -1;
      result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)v40, v37);
    }
    else
    {
      --*v40;
    }
  }
LABEL_72:
  v43 = (unsigned int *)v63[0];
  v63[0] = 0;
  if (v43)
  {
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v43 + 2), v37);
      result = (unsigned int *)WTF::fastFree((WTF *)v43, v53);
    }
  }
  do
  {
    v46 = __ldaxr(v10);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v10));
  if (!v47)
  {
    atomic_store(1u, v27 + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v27, (WTF::StringImpl *)v37);
    return (unsigned int *)bmalloc::api::isoDeallocate(v48, v49);
  }
  return result;
}

unsigned int *WebCore::IDBCursor::advance@<X0>(unsigned int *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  WebCore::IDBCursor *v10;
  const WebCore::IDBKeyData *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v4 = *((_QWORD *)this + 21);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_17:
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  if (!a2)
  {
    this = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 33;
    goto LABEL_16;
  }
  v6 = (uint64_t)this;
  v7 = this[40];
  if ((_DWORD)v7 == -1)
    goto LABEL_18;
  *(_QWORD *)&v13 = &v15;
  if (*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(__int128 *, unsigned int *))off_1E33575B8[v7])(&v13, this + 38)
                            + 152)
                + 136))
  {
    this = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
LABEL_16:
    *(_BYTE *)a3 = v8;
    goto LABEL_17;
  }
  v9 = *(unsigned int *)(v6 + 160);
  if ((_DWORD)v9 == -1)
  {
LABEL_18:
    v10 = (WebCore::IDBCursor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::IDBCursor::uncheckedIterateCursor(v10, v11, v12);
  }
  else
  {
    *(_QWORD *)&v13 = &v15;
    if (((unsigned int (*)(__int128 *, uint64_t))off_1E33575A8[v9])(&v13, v6 + 152) || !*(_BYTE *)(v6 + 176))
    {
      this = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = 8;
      goto LABEL_16;
    }
    *(_BYTE *)(v6 + 176) = 0;
    v13 = 0u;
    v14 = 0u;
    this = WebCore::IDBCursor::uncheckedIterateCursor((WebCore::IDBCursor *)v6, (const WebCore::IDBKeyData *)&v13, a2);
    if (DWORD2(v14) != -1)
      this = (unsigned int *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[DWORD2(v14)])(&v15, (char *)&v13 + 8);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return this;
}

unsigned int *WebCore::IDBCursor::uncheckedIterateCursor(WebCore::IDBCursor *this, const WebCore::IDBKeyData *a2, int a3)
{
  uint64_t v6;
  WebCore::IDBRequest *v7;
  uint64_t v8;
  WebCore::IDBTransaction *v9;
  uint64_t v10;
  unsigned int *result;
  uint64_t v12;
  char *v13;
  _BYTE v14[16];
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;
  char v20;

  v6 = *((_QWORD *)this + 21);
  if (v6)
    v7 = *(WebCore::IDBRequest **)(v6 + 8);
  else
    v7 = 0;
  WebCore::IDBRequest::willIterateCursor(v7, this);
  v8 = *((unsigned int *)this + 40);
  if ((_DWORD)v8 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::IDBCursor::continuePrimaryKey(v12);
  }
  else
  {
    v13 = &v20;
    v9 = *(WebCore::IDBTransaction **)(((uint64_t (*)(char **, char *))off_1E33575B8[v8])(&v13, (char *)this + 152)+ 152);
    LOBYTE(v13) = *(_BYTE *)a2;
    v14[0] = 0;
    v15 = -1;
    v10 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v10])(&v20, v14, (char *)a2 + 8);
      v15 = v10;
    }
    v16 = 0u;
    v17 = 0u;
    v18 = a3;
    v19 = 1;
    result = WebCore::IDBTransaction::iterateCursor(v9, this, (const WebCore::IDBIterateCursorData *)&v13);
    if (DWORD2(v17) != -1)
      result = (unsigned int *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[DWORD2(v17)])(&v20, (char *)&v16 + 8);
    DWORD2(v17) = -1;
    if (v15 != -1)
      return (unsigned int *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&v20, v14);
  }
  return result;
}

uint64_t WebCore::IDBCursor::continuePrimaryKey@<X0>(uint64_t result@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  const WTF::String *v17;
  int v18;
  const WTF::String *v19;
  void *v20;
  const WTF::StringImpl *v21;
  int v22;
  BOOL v23;
  const WTF::String *v24;
  const WTF::StringImpl *v25;
  int v26;
  int v27;
  char v28;
  uint64_t v29;
  WebCore::IDBRequest *v30;
  uint64_t v31;
  WebCore::IDBTransaction *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::JSGlobalObject *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 v41[8];
  _BYTE v42[16];
  int v43;
  unsigned __int8 v44[8];
  _BYTE v45[16];
  int v46;
  WebCore::IDBKey *v47;
  _BYTE v48[16];
  int v49;
  unsigned __int8 v50;
  _BYTE v51[16];
  int v52;
  int v53;
  char v54;
  char v55;

  v6 = *(_QWORD *)(result + 168);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    *(_BYTE *)a5 = 8;
    *(_QWORD *)(a5 + 8) = 0;
LABEL_14:
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  v7 = result;
  v8 = *(unsigned int *)(result + 160);
  if ((_DWORD)v8 == -1)
    goto LABEL_71;
  v47 = (WebCore::IDBKey *)v44;
  if (*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(WebCore::IDBKey **, uint64_t))off_1E33575B8[v8])(&v47, result + 152)+ 152)+ 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 27;
LABEL_13:
    *(_BYTE *)a5 = v12;
    goto LABEL_14;
  }
  v13 = *(unsigned int *)(v7 + 160);
  if ((_DWORD)v13 == -1)
    goto LABEL_71;
  v47 = (WebCore::IDBKey *)v44;
  if (((unsigned int (*)(WebCore::IDBKey **, uint64_t))off_1E33575A8[v13])(&v47, v7 + 152))
    goto LABEL_9;
  if (*(_DWORD *)(v7 + 160) != 1 || (v14 = *(unsigned __int8 *)(v7 + 145), (v14 & 0xFFFFFFFD) != 0))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 12;
    goto LABEL_13;
  }
  if (!*(_BYTE *)(v7 + 176))
  {
LABEL_9:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 8;
    goto LABEL_13;
  }
  WebCore::createIDBKeyFromValue(&v47, a2, a3);
  v15 = (unsigned int *)v47;
  if ((WebCore::IDBKey::isValid(v47) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 26;
    *(_BYTE *)(a5 + 16) = 1;
    if (!v15)
      return result;
    goto LABEL_62;
  }
  WebCore::createIDBKeyFromValue(&v47, a2, a4);
  v16 = (unsigned int *)v47;
  if ((WebCore::IDBKey::isValid(v47) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 26;
    *(_BYTE *)(a5 + 16) = 1;
    goto LABEL_58;
  }
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v44, (const WebCore::IDBKey *)v15);
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v41, (const WebCore::IDBKey *)v16);
  v18 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)v44, (const WebCore::IDBKeyData *)(v7 + 200), v17);
  if (!v14 && v18 < 0)
    goto LABEL_40;
  if ((WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)v44, (const WebCore::IDBKeyData *)(v7 + 200), v19) & 0x80000000) != 0)
  {
    v23 = v14 == 2;
    goto LABEL_31;
  }
  v22 = WebCore::IDBKeyData::operator==(v44, (unsigned __int8 *)(v7 + 200), v21);
  v23 = v14 == 2;
  if (v14 != 2 || v22)
  {
LABEL_31:
    if (WebCore::IDBKeyData::operator==(v44, (unsigned __int8 *)(v7 + 200), v21))
    {
      v26 = (WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)v41, (const WebCore::IDBKeyData *)(v7 + 232), v24) & 0x80000000) != 0
          ? 1
          : WebCore::IDBKeyData::operator==(v41, (unsigned __int8 *)(v7 + 232), v25);
      if (!v14 && v26)
        goto LABEL_40;
      v27 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)v41, (const WebCore::IDBKeyData *)(v7 + 232), v25);
      v28 = !v23;
      if (v27 < 0)
        v28 = 1;
      if ((v28 & 1) == 0)
        goto LABEL_40;
    }
    *(_BYTE *)(v7 + 176) = 0;
    v29 = *(_QWORD *)(v7 + 168);
    if (v29)
      v30 = *(WebCore::IDBRequest **)(v29 + 8);
    else
      v30 = 0;
    WebCore::IDBRequest::willIterateCursor(v30, (WebCore::IDBCursor *)v7);
    v31 = *(unsigned int *)(v7 + 160);
    if ((_DWORD)v31 != -1)
    {
      v47 = (WebCore::IDBKey *)&v55;
      v32 = *(WebCore::IDBTransaction **)(((uint64_t (*)(WebCore::IDBKey **, uint64_t))off_1E33575B8[v31])(&v47, v7 + 152)+ 152);
      LOBYTE(v47) = v44[0];
      v48[0] = 0;
      v49 = -1;
      if (v46 != -1)
      {
        v33 = v46;
        ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v46])(&v55, v48, v45);
        v49 = v33;
      }
      v50 = v41[0];
      v51[0] = 0;
      v52 = -1;
      v34 = v43;
      if (v43 != -1)
      {
        ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v43])(&v55, v51, v42);
        v52 = v34;
      }
      v53 = 0;
      v54 = 1;
      result = (uint64_t)WebCore::IDBTransaction::iterateCursor(v32, (WebCore::IDBCursor *)v7, (const WebCore::IDBIterateCursorData *)&v47);
      if (v52 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v52])(&v55, v51);
      v52 = -1;
      if (v49 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v49])(&v55, v48);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      goto LABEL_54;
    }
LABEL_71:
    v37 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::IDBCursor::continueFunction(v37, v38, v39, v40);
  }
LABEL_40:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a5 = 26;
  *(_BYTE *)(a5 + 16) = 1;
LABEL_54:
  if (v43 != -1)
    result = ((uint64_t (*)(WebCore::IDBKey **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v43])(&v47, v42);
  if (v46 != -1)
    result = ((uint64_t (*)(WebCore::IDBKey **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v46])(&v47, v45);
LABEL_58:
  if (!v16)
    goto LABEL_61;
  if (*v16 != 1)
  {
    --*v16;
LABEL_61:
    if (!v15)
      return result;
    goto LABEL_62;
  }
  v36 = v16[6];
  if ((_DWORD)v36 != -1)
    ((void (*)(WebCore::IDBKey **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v36])(&v47, v16 + 2);
  v16[6] = -1;
  result = bmalloc::api::isoDeallocate((bmalloc::api *)v16, v20);
  if (v15)
  {
LABEL_62:
    if (*v15 == 1)
    {
      v35 = v15[6];
      if ((_DWORD)v35 != -1)
        ((void (*)(WebCore::IDBKey **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v35])(&v47, v15 + 2);
      v15[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v15, v20);
    }
    else
    {
      --*v15;
    }
  }
  return result;
}

uint64_t WebCore::IDBCursor::continueFunction@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  char v13;

  if (a3 == 10)
  {
    v6 = 0;
  }
  else
  {
    WebCore::createIDBKeyFromValue(&v10, a2, a3);
    v6 = v10;
  }
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v10, (const WebCore::IDBKey *)v6);
  result = WebCore::IDBCursor::continueFunction(a1, (const WebCore::IDBKeyData *)&v10, a4);
  if (v12 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  if (v6)
  {
    if (*v6 == 1)
    {
      v9 = v6[6];
      if ((_DWORD)v9 != -1)
        ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v9])(&v10, v6 + 2);
      v6[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v6, v8);
    }
    else
    {
      --*v6;
    }
  }
  return result;
}

uint64_t WebCore::IDBCursor::continueFunction@<X0>(uint64_t this@<X0>, const WebCore::IDBKeyData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  const WTF::String *v10;
  int v11;
  WebCore::IDBCursor *v12;
  char v13;
  char *v14;

  v4 = *(_QWORD *)(this + 168);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_18:
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  v5 = this;
  v6 = *(unsigned int *)(this + 160);
  if ((_DWORD)v6 == -1)
    goto LABEL_23;
  v14 = &v13;
  if (*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(char **, uint64_t))off_1E33575B8[v6])(&v14, this + 152) + 152)
                + 136))
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
LABEL_17:
    *(_BYTE *)a3 = v8;
    goto LABEL_18;
  }
  v9 = *(unsigned int *)(v5 + 160);
  if ((_DWORD)v9 == -1)
  {
LABEL_23:
    v12 = (WebCore::IDBCursor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::IDBCursor::deleteFunction(v12);
  }
  else
  {
    v14 = &v13;
    if (((unsigned int (*)(char **, uint64_t))off_1E33575A8[v9])(&v14, v5 + 152) || !*(_BYTE *)(v5 + 176))
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = 8;
      goto LABEL_17;
    }
    if (*((_DWORD *)a2 + 6))
    {
      if ((WebCore::IDBKeyData::isValid(a2) & 1) == 0)
      {
LABEL_19:
        this = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v8 = 26;
        goto LABEL_17;
      }
      v11 = *((_DWORD *)a2 + 6);
      if (*(unsigned __int8 *)(v5 + 145) > 1u)
      {
        if (v11 && (WebCore::IDBKeyData::compare(a2, (const WebCore::IDBKeyData *)(v5 + 200), v10) & 0x80000000) == 0)
          goto LABEL_19;
      }
      else if (v11 && (int)WebCore::IDBKeyData::compare(a2, (const WebCore::IDBKeyData *)(v5 + 200), v10) <= 0)
      {
        goto LABEL_19;
      }
    }
    *(_BYTE *)(v5 + 176) = 0;
    this = (uint64_t)WebCore::IDBCursor::uncheckedIterateCursor((WebCore::IDBCursor *)v5, a2, 0);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return this;
}

_DWORD *WebCore::IDBCursor::deleteFunction@<X0>(WebCore::IDBCursor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v5;
  _DWORD *result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD **v20;
  bmalloc::api *v21;
  void *v22;
  WebCore::IDBCursor *v23;
  WebCore::IDBRequest *v24;
  const WebCore::IDBGetResult *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;

  v3 = *((unsigned int *)this + 40);
  if ((_DWORD)v3 == -1)
    goto LABEL_37;
  v5 = (char *)this + 152;
  v27 = &v30;
  if (((unsigned int (*)(_QWORD **, char *))off_1E33575A8[v3])(&v27, (char *)this + 152))
  {
LABEL_3:
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 8;
LABEL_7:
    *(_BYTE *)a2 = v7;
    *(_DWORD *)(a2 + 16) = 1;
    return result;
  }
  v8 = *((unsigned int *)this + 40);
  if ((_DWORD)v8 == -1)
    goto LABEL_37;
  v27 = &v30;
  if (*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(_QWORD **, char *))off_1E33575B8[v8])(&v27, v5) + 152) + 136))
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 27;
    goto LABEL_7;
  }
  v9 = *((unsigned int *)this + 40);
  if ((_DWORD)v9 == -1)
    goto LABEL_37;
  v27 = &v30;
  if (!*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(_QWORD **, char *))off_1E33575B8[v9])(&v27, v5) + 152) + 96))
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 28;
    goto LABEL_7;
  }
  if (!*((_BYTE *)this + 176)
    || ((*(uint64_t (**)(WebCore::IDBCursor *))(*(_QWORD *)this + 16))(this) & 1) == 0)
  {
    goto LABEL_3;
  }
  v10 = *((unsigned int *)this + 40);
  if ((_DWORD)v10 == -1)
    goto LABEL_37;
  v27 = &v30;
  v11 = ((uint64_t (*)(_QWORD **, char *))off_1E33575B8[v10])(&v27, v5);
  v12 = (_DWORD *)*((_QWORD *)this + 24);
  if (v12)
    *v12 += 2;
  v13 = bmalloc::api::isoAllocate();
  *(_QWORD *)v13 = 0;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v12;
  *(_WORD *)(v13 + 32) = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E33584D8;
  v14[1] = v13;
  v30 = v14;
  WebCore::IDBObjectStore::doDelete(v11, (uint64_t)&v30, (uint64_t)&v27);
  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  if (*(_DWORD *)(v13 + 8) == 1)
  {
    WebCore::IDBKeyRange::~IDBKeyRange((WebCore::IDBKeyRange *)v13, v15);
    result = (_DWORD *)bmalloc::api::isoDeallocate(v21, v22);
  }
  else
  {
    --*(_DWORD *)(v13 + 8);
  }
  if (v29)
  {
    if (v29 == 1)
    {
      v16 = v28;
      v28 = 0;
      *(_BYTE *)a2 = (_BYTE)v27;
      *(_QWORD *)(a2 + 8) = v16;
      v17 = 1;
      *(_DWORD *)(a2 + 16) = 1;
      return (_DWORD *)((uint64_t (*)(_QWORD **, _QWORD **))off_1E3357450[v17])(&v30, &v27);
    }
LABEL_37:
    v23 = (WebCore::IDBCursor *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::IDBCursor::setGetResult(v23, v24, v25, v26);
  }
  v18 = v27;
  v27 = 0;
  ++*((_DWORD *)this + 4);
  if (!*((_BYTE *)v18 + 328))
  {
    v18[39] = this;
    *((_DWORD *)v18 + 80) = 2;
    *((_BYTE *)v18 + 328) = 1;
    goto LABEL_33;
  }
  v19 = *((unsigned int *)v18 + 80);
  if ((_DWORD)v19 == -1)
    goto LABEL_32;
  v20 = (_DWORD **)(v18 + 39);
  if ((_DWORD)v19 != 2)
  {
    result = (_DWORD *)((uint64_t (*)(_QWORD **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_8IDBIndexENSA_ISF_EENSC_ISF_EEEENS7_INS8_9IDBCursorENSA_ISJ_EENSC_ISJ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v19])(&v30, v20);
LABEL_32:
    v18[39] = this;
    *((_DWORD *)v18 + 80) = 2;
    goto LABEL_33;
  }
  result = *v20;
  *v20 = this;
  if (result)
  {
    if (result[4] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
LABEL_33:
  *(_QWORD *)a2 = v18;
  *(_DWORD *)(a2 + 16) = 0;
  v17 = v29;
  if (v29 != -1)
    return (_DWORD *)((uint64_t (*)(_QWORD **, _QWORD **))off_1E3357450[v17])(&v30, &v27);
  return result;
}

uint64_t WebCore::IDBCursor::setGetResult(WebCore::IDBCursor *this, WebCore::IDBRequest *a2, const WebCore::IDBGetResult *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  bmalloc::api *v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  bmalloc::api *v27;
  unsigned int *v28;
  int v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  WTF *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  int v78;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  unsigned int v83;
  bmalloc::api *v84[2];
  __int128 v85;
  uint64_t v86;
  _BYTE v87[15];
  char v88;

  v4 = *((_QWORD *)a2 + 4);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v9 = v5 - 96;
  v10 = *(unsigned __int8 *)(v5 + 178);
  if (*(_BYTE *)(v5 + 178))
  {
    if (v10 == 1 || v10 == 2)
      ++*(_DWORD *)(v5 + 216);
  }
  else
  {
    *(_DWORD *)(v5 - 264) += 2;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 344))(v5 - 96);
  MEMORY[0x19AEA3294](v87, v11);
  *((_QWORD *)this + 42) = 0;
  v13 = *((_QWORD *)this + 43);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 43) = 0;
  }
  *((_QWORD *)this + 44) = 0;
  v14 = *((_QWORD *)this + 45);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 3;
    *((_QWORD *)this + 45) = 0;
  }
  *((_QWORD *)this + 46) = 0;
  v15 = *((_QWORD *)this + 47);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 47) = 0;
  }
  v16 = *((_BYTE *)a3 + 152) != 0;
  if (*((_BYTE *)a3 + 152))
  {
    *((_BYTE *)this + 200) = *((_BYTE *)a3 + 40);
    v17 = *((unsigned int *)this + 56);
    v18 = *((unsigned int *)a3 + 16);
    if ((_DWORD)v17 == -1)
    {
      if ((_DWORD)v18 == -1)
        goto LABEL_21;
    }
    else if ((_DWORD)v18 == -1)
    {
      ((void (*)(bmalloc::api **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v17])(v84, (char *)this + 208);
      *((_DWORD *)this + 56) = -1;
      goto LABEL_21;
    }
    v84[0] = (WebCore::IDBCursor *)((char *)this + 208);
    ((void (*)(bmalloc::api **))off_1E33574A8[v18])(v84);
LABEL_21:
    WebCore::IDBKeyData::maybeCreateIDBKey((uint64_t)this + 200, (uint64_t *)v84);
    v21 = v84[0];
    v84[0] = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v21;
    if (!v22)
      goto LABEL_24;
    v23 = *v22 - 1;
    if (*v22 != 1)
      goto LABEL_23;
    v46 = v22[6];
    if ((_DWORD)v46 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v46])(&v88, v22 + 2);
    v22[6] = -1;
    bmalloc::api::isoDeallocate((bmalloc::api *)v22, v20);
    v22 = (unsigned int *)v84[0];
    v84[0] = 0;
    if (v22)
    {
      v23 = *v22 - 1;
      if (*v22 != 1)
      {
LABEL_23:
        *v22 = v23;
        goto LABEL_24;
      }
      v48 = v22[6];
      if ((_DWORD)v48 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v48])(&v88, v22 + 2);
      v22[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v22, v47);
    }
LABEL_24:
    *((_BYTE *)this + 232) = *((_BYTE *)a3 + 72);
    v24 = *((unsigned int *)this + 64);
    v25 = *((unsigned int *)a3 + 24);
    if ((_DWORD)v24 == -1)
    {
      if ((_DWORD)v25 == -1)
        goto LABEL_29;
    }
    else if ((_DWORD)v25 == -1)
    {
      ((void (*)(bmalloc::api **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v24])(v84, (char *)this + 240);
      *((_DWORD *)this + 64) = -1;
      goto LABEL_29;
    }
    v84[0] = (WebCore::IDBCursor *)((char *)this + 240);
    ((void (*)(bmalloc::api **))off_1E33574A8[v25])(v84);
LABEL_29:
    WebCore::IDBKeyData::maybeCreateIDBKey((uint64_t)this + 232, (uint64_t *)v84);
    v27 = v84[0];
    v84[0] = 0;
    v28 = (unsigned int *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v27;
    if (v28)
    {
      v29 = *v28 - 1;
      if (*v28 != 1)
        goto LABEL_31;
      v49 = v28[6];
      if ((_DWORD)v49 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v49])(&v88, v28 + 2);
      v28[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v28, v26);
      v28 = (unsigned int *)v84[0];
      v84[0] = 0;
      if (!v28)
        goto LABEL_32;
      v29 = *v28 - 1;
      if (*v28 == 1)
      {
        v51 = v28[6];
        if ((_DWORD)v51 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v51])(&v88, v28 + 2);
        v28[6] = -1;
        bmalloc::api::isoDeallocate((bmalloc::api *)v28, v50);
      }
      else
      {
LABEL_31:
        *v28 = v29;
      }
    }
LABEL_32:
    if ((*(unsigned int (**)(WebCore::IDBCursor *))(*(_QWORD *)this + 16))(this))
    {
      v31 = *(unsigned int **)a3;
      if (*(_QWORD *)a3)
      {
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
      }
      v33 = *((_QWORD *)this + 33);
      *((_QWORD *)this + 33) = v31;
      if (v33)
      {
        do
        {
          v34 = __ldaxr((unsigned int *)v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, (unsigned int *)v33));
        if (!v35)
        {
          atomic_store(1u, (unsigned int *)v33);
          v82 = *(WTF **)(v33 + 8);
          if (v82)
          {
            *(_QWORD *)(v33 + 8) = 0;
            *(_DWORD *)(v33 + 16) = 0;
            WTF::fastFree(v82, v30);
          }
          WTF::fastFree((WTF *)v33, v30);
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 68, (unsigned int *)a3 + 2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 72, (unsigned int *)a3 + 6);
      v36 = (char *)a3 + 104;
      v37 = (char *)this + 304;
      if (*((unsigned __int8 *)this + 328) != *((unsigned __int8 *)a3 + 128))
      {
        if (*((_BYTE *)this + 328))
        {
          v40 = *((unsigned int *)this + 80);
          if ((_DWORD)v40 != -1)
            ((void (*)(bmalloc::api **, char *, char *))off_1E33573E8[v40])(v84, v37, v36);
          *((_DWORD *)this + 80) = -1;
          *((_BYTE *)this + 328) = 0;
        }
        else
        {
          *((_BYTE *)this + 304) = 0;
          *((_DWORD *)this + 80) = -1;
          v45 = *((unsigned int *)a3 + 30);
          if ((_DWORD)v45 != -1)
          {
            ((void (*)(bmalloc::api **, char *, char *))off_1E3357548[v45])(v84, v37, v36);
            *((_DWORD *)this + 80) = v45;
          }
          *((_BYTE *)this + 328) = 1;
        }
        goto LABEL_80;
      }
      if (*((_BYTE *)this + 328))
      {
        v38 = *((unsigned int *)this + 80);
        v39 = *((unsigned int *)a3 + 30);
        if ((_DWORD)v38 == -1)
        {
          if ((_DWORD)v39 == -1)
            goto LABEL_80;
        }
        else if ((_DWORD)v39 == -1)
        {
          ((void (*)(bmalloc::api **, char *, char *))off_1E33573E8[v38])(v84, v37, v36);
          *((_DWORD *)this + 80) = -1;
          goto LABEL_80;
        }
        v84[0] = (WebCore::IDBCursor *)((char *)this + 304);
        ((void (*)(bmalloc::api **))off_1E3357538[v39])(v84);
      }
    }
LABEL_80:
    v52 = *((_DWORD *)a3 + 37);
    if (!v52)
    {
      *((_BYTE *)this + 176) = 1;
      goto LABEL_116;
    }
    if (v52 >= 0x2762763)
    {
LABEL_141:
      __break(0xC471u);
      JUMPOUT(0x19535FC28);
    }
    v83 = v16;
    v53 = WTF::fastMalloc((WTF *)(104 * v52));
    v54 = (WTF *)v53;
    v55 = *((_DWORD *)a3 + 37);
    if (v55)
    {
      v56 = *((_QWORD *)a3 + 17);
      v57 = 104 * v55;
      do
      {
        v53 = WebCore::IDBCursorRecord::IDBCursorRecord(v53, v56) + 104;
        v56 += 104;
        v57 -= 104;
      }
      while (v57);
    }
    v58 = 0;
    v59 = *((_QWORD *)this + 49);
    while (1)
    {
      v60 = *((_QWORD *)this + 48);
      if (v60)
      {
        if (v59 + 1 == v60)
        {
          v61 = *((unsigned int *)this + 102);
          goto LABEL_93;
        }
      }
      else
      {
        if (v59)
        {
          v61 = *((unsigned int *)this + 102);
          if (v59 != v61 - 1)
            goto LABEL_104;
LABEL_93:
          v62 = v61 + (v61 >> 2);
          if (v62 <= 0xF)
            v62 = 15;
          if (v62 >= 0x2762762)
            goto LABEL_141;
          v63 = (WTF *)*((_QWORD *)this + 50);
          v64 = 104 * v62 + 104;
          v65 = WTF::fastMalloc((WTF *)(104 * v62 + 104));
          *((_DWORD *)this + 102) = (v64 & 0xFFFFFFF8) / 0x68;
          *((_QWORD *)this + 50) = v65;
          v67 = *((_QWORD *)this + 48);
          v66 = *((_QWORD *)this + 49);
          if (v67 <= v66)
          {
            WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v63 + 104 * v67, (uint64_t)v63 + 104 * v66, v65 + 104 * v67);
            if (!v63)
            {
LABEL_103:
              v59 = *((_QWORD *)this + 49);
              goto LABEL_104;
            }
          }
          else
          {
            WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v63, (uint64_t)v63 + 104 * v66, v65);
            v68 = *((_QWORD *)this + 48);
            v69 = v68 - v61 + *((unsigned int *)this + 102);
            WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v63 + 104 * v68, (uint64_t)v63 + 104 * v61, *((_QWORD *)this + 50) + 104 * v69);
            *((_QWORD *)this + 48) = v69;
            if (!v63)
              goto LABEL_103;
          }
          if (*((WTF **)this + 50) == v63)
          {
            *((_QWORD *)this + 50) = 0;
            *((_DWORD *)this + 102) = 0;
          }
          WTF::fastFree(v63, v70);
          goto LABEL_103;
        }
        v61 = 0;
        if (!*((_DWORD *)this + 102))
          goto LABEL_93;
      }
LABEL_104:
      WebCore::IDBCursorRecord::IDBCursorRecord(*((_QWORD *)this + 50) + 104 * v59, (uint64_t)v54 + v58);
      v72 = *((_QWORD *)this + 49);
      if (v72 == *((unsigned int *)this + 102) - 1)
        v59 = 0;
      else
        v59 = v72 + 1;
      *((_QWORD *)this + 49) = v59;
      v58 += 104;
      if (104 * v52 == v58)
      {
        v73 = 0;
        *((_QWORD *)this + 52) = a4;
        *((_BYTE *)this + 176) = 1;
        v9 = v5 - 96;
        v16 = v83;
        do
        {
          v74 = (char *)v54 + v73;
          WebCore::IDBValue::~IDBValue((WTF *)((char *)v54 + v73 + 64), v71);
          v75 = *(unsigned int *)((char *)v54 + v73 + 56);
          if ((_DWORD)v75 != -1)
            ((void (*)(bmalloc::api **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v75])(v84, v74 + 40);
          *((_DWORD *)v74 + 14) = -1;
          v76 = *((unsigned int *)v74 + 6);
          if ((_DWORD)v76 != -1)
            ((void (*)(bmalloc::api **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v76])(v84, (char *)v54 + v73 + 8);
          *((_DWORD *)v74 + 6) = -1;
          v73 += 104;
        }
        while (104 * v52 != v73);
        WTF::fastFree(v54, v71);
        goto LABEL_116;
      }
    }
  }
  *((_BYTE *)this + 200) = 0;
  v19 = *((unsigned int *)this + 56);
  if ((_DWORD)v19 != -1)
  {
    v12 = (char *)this + 208;
    if (!(_DWORD)v19)
    {
      *(_QWORD *)v12 = 0;
      goto LABEL_49;
    }
    ((void (*)(bmalloc::api **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v19])(v84, v12);
  }
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 56) = 0;
LABEL_49:
  v41 = (unsigned int *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v41)
  {
    if (*v41 == 1)
    {
      v80 = v41[6];
      if ((_DWORD)v80 != -1)
        ((void (*)(bmalloc::api **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v80])(v84, v41 + 2);
      v41[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v41, v12);
    }
    else
    {
      --*v41;
    }
  }
  *((_BYTE *)this + 232) = 0;
  v42 = *((unsigned int *)this + 64);
  if ((_DWORD)v42 != -1)
  {
    v12 = (char *)this + 240;
    if (!(_DWORD)v42)
    {
      *(_QWORD *)v12 = 0;
      goto LABEL_57;
    }
    ((void (*)(bmalloc::api **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v42])(v84, v12);
  }
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 64) = 0;
LABEL_57:
  v43 = (unsigned int *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v43)
  {
    if (*v43 == 1)
    {
      v81 = v43[6];
      if ((_DWORD)v81 != -1)
        ((void (*)(bmalloc::api **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v81])(v84, v43 + 2);
      v43[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v43, v12);
    }
    else
    {
      --*v43;
    }
  }
  v86 = 0;
  *(_OWORD *)v84 = 0u;
  v85 = 0u;
  WebCore::IDBValue::operator=((uint64_t *)this + 33, (uint64_t *)v84);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v84, v44);
  *((_BYTE *)this + 176) = 0;
LABEL_116:
  MEMORY[0x19AEA32A0](v87);
  v78 = *(unsigned __int8 *)(v5 + 178);
  if (*(_BYTE *)(v5 + 178))
  {
    if (v78 == 1)
    {
      if (*(_DWORD *)(v5 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      else
        --*(_DWORD *)(v5 + 216);
    }
    else if (v78 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
    }
  }
  else if (*(_DWORD *)(v5 - 264) == 2)
  {
    if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v77);
  }
  else
  {
    *(_DWORD *)(v5 - 264) -= 2;
  }
  return v16;
}

uint64_t *WebCore::IDBValue::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v21 = *(WTF **)(v5 + 8);
      if (v21)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v21, a2);
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v8)
  {
    v15 = (WTF::StringImpl **)a1[1];
    v16 = 8 * v8;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v9 = (WTF *)a1[1];
  if (v9)
  {
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = a2[1];
  a2[1] = 0;
  a1[1] = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *((_DWORD *)a1 + 4) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *((_DWORD *)a1 + 5) = v10;
  v11 = *((unsigned int *)a1 + 9);
  if ((_DWORD)v11)
  {
    v18 = (WTF::StringImpl **)a1[3];
    v19 = 8 * v11;
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v12 = (WTF *)a1[3];
  if (v12)
  {
    a1[3] = 0;
    *((_DWORD *)a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = a2[3];
  a2[3] = 0;
  a1[3] = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *((_DWORD *)a1 + 8) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *((_DWORD *)a1 + 9) = v13;
  return a1;
}

void WebCore::IDBCursor::iterateWithPrefetchedRecords(WebCore::IDBCursor *this@<X0>, WTF::StringImpl *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _QWORD v56[5];
  uint64_t v57[2];
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  char v64[16];
  int v65;
  char v66;
  char v67[16];
  int v68;
  char v69[16];
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  _BYTE v76[16];
  int v77;
  char v78;
  _BYTE v79[16];
  int v80;
  unsigned int *v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  _BYTE v88[9];

  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v8 = *((_QWORD *)this + 48);
  v7 = *((_QWORD *)this + 49);
  v9 = v7;
  if (v8 > v7)
    v9 = v7 + *((unsigned int *)this + 102);
  if (v9 - v8 < v6 || *((_QWORD *)this + 52) <= a3)
  {
    *a4 = 0;
    a4[160] = 0;
    return;
  }
  v10 = v6 - 1;
  if ((_DWORD)v6 != 1)
  {
    do
    {
      if (v8 == *((_QWORD *)this + 49))
        goto LABEL_73;
      v11 = *((_QWORD *)this + 50);
      v12 = (unsigned int *)(v11 + 104 * v8);
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v12 + 16), a2);
      v13 = v12[14];
      if ((_DWORD)v13 != -1)
        ((void (*)(uint64_t *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v13])(v57, v11 + 104 * v8 + 40);
      v12[14] = -1;
      v14 = v12[6];
      if ((_DWORD)v14 != -1)
        ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v14])(v57, v12 + 2);
      v12[6] = -1;
      v15 = *((_QWORD *)this + 48);
      if (v15 == *((unsigned int *)this + 102) - 1)
        v8 = 0;
      else
        v8 = v15 + 1;
      *((_QWORD *)this + 48) = v8;
      --v10;
    }
    while (v10);
    v7 = *((_QWORD *)this + 49);
  }
  if (v8 == v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19536030CLL);
  }
  v16 = *((_QWORD *)this + 50);
  v17 = (char *)(v16 + 104 * v8);
  v75 = *v17;
  v76[0] = 0;
  v77 = -1;
  v18 = *((unsigned int *)v17 + 6);
  if ((_DWORD)v18 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, char *))off_1E33574F0[v18])(v57, v76, v17 + 8);
    v77 = v18;
  }
  v19 = v16 + 104 * v8;
  v78 = *(_BYTE *)(v19 + 32);
  v79[0] = 0;
  v80 = -1;
  v20 = *(unsigned int *)(v19 + 56);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, unint64_t))off_1E33574F0[v20])(v57, v79, v16 + 104 * v8 + 40);
    v80 = v20;
  }
  v21 = v16 + 104 * v8;
  v22 = *(unsigned int **)(v21 + 64);
  *(_QWORD *)(v21 + 64) = 0;
  v81 = v22;
  v23 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 72) = 0;
  v82 = v23;
  LODWORD(v23) = *(_DWORD *)(v21 + 80);
  *(_DWORD *)(v21 + 80) = 0;
  v83 = v23;
  LODWORD(v23) = *(_DWORD *)(v21 + 84);
  *(_DWORD *)(v21 + 84) = 0;
  v84 = v23;
  v24 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 88) = 0;
  v85 = v24;
  LODWORD(v24) = *(_DWORD *)(v21 + 96);
  *(_DWORD *)(v21 + 96) = 0;
  v86 = v24;
  LODWORD(v24) = *(_DWORD *)(v21 + 100);
  *(_DWORD *)(v21 + 100) = 0;
  v87 = v24;
  v25 = *((_QWORD *)this + 48);
  if (v25 == *((_QWORD *)this + 49))
  {
    __break(0xC471u);
    JUMPOUT(0x19536032CLL);
  }
  v26 = *((_QWORD *)this + 50);
  v27 = (unsigned int *)(v26 + 104 * v25);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v27 + 16), a2);
  v28 = v27[14];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v28])(v57, v26 + 104 * v25 + 40);
  v27[14] = -1;
  v29 = v27[6];
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v29])(v57, v27 + 2);
  v27[6] = -1;
  v30 = *((_QWORD *)this + 48);
  if (v30 == *((unsigned int *)this + 102) - 1)
    v31 = 0;
  else
    v31 = v30 + 1;
  *((_QWORD *)this + 48) = v31;
  v32 = v81;
  if (v81)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v34 = v84;
  if (v84)
  {
    if (v84 >> 29)
    {
LABEL_72:
      __break(0xC471u);
      JUMPOUT(0x195360370);
    }
    v46 = WTF::fastMalloc((WTF *)(8 * v84));
    v35 = v46;
    if (v84)
    {
      v52 = 0;
      v53 = v82;
      v54 = 8 * v84;
      do
      {
        v55 = *(_DWORD **)(v53 + v52);
        if (v55)
          *v55 += 2;
        *(_QWORD *)(v46 + v52) = v55;
        v52 += 8;
      }
      while (v54 != v52);
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = v87;
  if (v87)
  {
    if (v87 >> 29)
    {
LABEL_73:
      __break(0xC471u);
      JUMPOUT(0x195360278);
    }
    v47 = WTF::fastMalloc((WTF *)(8 * v87));
    v37 = v47;
    if (v87)
    {
      v48 = 0;
      v49 = v85;
      v50 = 8 * v87;
      do
      {
        v51 = *(_DWORD **)(v49 + v48);
        if (v51)
          *v51 += 2;
        *(_QWORD *)(v47 + v48) = v51;
        v48 += 8;
      }
      while (v50 != v48);
    }
  }
  else
  {
    v37 = 0;
  }
  v38 = *((unsigned int *)this + 40);
  if ((_DWORD)v38 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_72;
  }
  v57[0] = (uint64_t)v56;
  v39 = ((uint64_t (*)(uint64_t *, char *))off_1E33575B8[v38])(v57, (char *)this + 152);
  memset(v56, 0, sizeof(v56));
  v57[0] = (uint64_t)v32;
  v57[1] = v35;
  v58 = v34;
  v59 = v34;
  v60 = v37;
  v61 = v36;
  v62 = v36;
  v63 = v75;
  v64[0] = 0;
  v65 = -1;
  v40 = v77;
  if (v77 != -1)
  {
    ((void (*)(_BYTE *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v77])(v88, v64, v76);
    v65 = v40;
  }
  v66 = v78;
  v67[0] = 0;
  v68 = -1;
  v41 = v80;
  if (v80 != -1)
  {
    ((void (*)(_BYTE *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v80])(v88, v67, v79);
    v68 = v41;
  }
  v69[0] = 0;
  v71 = 0;
  if (*(_BYTE *)(v39 + 64))
  {
    v70 = -1;
    v42 = *(unsigned int *)(v39 + 56);
    if ((_DWORD)v42 != -1)
    {
      ((void (*)(_BYTE *, char *, uint64_t))off_1E3357548[v42])(v88, v69, v39 + 40);
      v70 = v42;
    }
    v71 = 1;
  }
  v72 = 0;
  v73 = 0;
  v74 = 1;
  WebCore::IDBGetResult::IDBGetResult((uint64_t)a4, v57);
  a4[160] = 1;
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v57, v43);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v56, v44);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v81, v45);
  if (v80 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v80])(v57, v79);
  v80 = -1;
  if (v77 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v77])(v57, v76);
}

void WebCore::IDBCursorWithValue::~IDBCursorWithValue(WebCore::IDBCursorWithValue *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBCursor::~IDBCursor(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::IDBDatabase *WebCore::IDBDatabase::IDBDatabase(WebCore::IDBDatabase *this, WebCore::ScriptExecutionContext *a2, unsigned int **a3, const WebCore::IDBResultData *a4)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t StatusReg;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v26;
  int v27;
  _BYTE v29[24];
  WebCore::IDBDatabase *v30;
  _QWORD *v31;

  v6 = a2;
  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v8 = (_QWORD *)((char *)this + 32);
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *((_QWORD *)this + 4) = &off_1E33A18C0;
  *((_QWORD *)this + 5) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::IDBDatabase *)((char *)this + 32), v6);
  *((_QWORD *)this + 4) = &off_1E33A0540;
  *((_QWORD *)this + 6) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1953605C8);
  }
  v31 = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v31, (uint64_t)v29);
  *v8 = &off_1E3357608;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(unsigned int **)(StatusReg + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)this + 7) = v13;
  *((_BYTE *)this + 64) = 0;
  *(_QWORD *)this = off_1E33572B0;
  *((_QWORD *)this + 4) = &unk_1E3357348;
  v15 = *a3;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *((_QWORD *)this + 9) = a3;
  v17 = *((_QWORD *)a4 + 7);
  if (!v17)
  {
    __break(0xC471u);
LABEL_32:
    __break(1u);
LABEL_33:
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)a4);
    v22 = *((_QWORD *)a4 + 5);
    goto LABEL_20;
  }
  v18 = *(_DWORD **)v17;
  if (*(_QWORD *)v17)
    *v18 += 2;
  *((_QWORD *)this + 10) = v18;
  v19 = *(_OWORD *)(v17 + 8);
  *((_QWORD *)this + 13) = *(_QWORD *)(v17 + 24);
  *(_OWORD *)((char *)this + 88) = v19;
  v20 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)this + 14, (_QWORD *)(v17 + 32));
  if (!*((_BYTE *)a4 + 48))
    goto LABEL_32;
  *((_QWORD *)this + 15) = *((_QWORD *)a4 + 5);
  *((_WORD *)this + 64) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  v21 = *(_QWORD *)(StatusReg + 736);
  if (!v21 || (a4 = *(const WebCore::IDBResultData **)(v21 + 96)) == 0)
    a4 = (const WebCore::IDBResultData *)WebCore::threadGlobalDataSlow((WebCore *)v20);
  v22 = *((_QWORD *)a4 + 5);
  if (!v22)
    goto LABEL_33;
LABEL_20:
  *((_QWORD *)this + 21) = v22;
  *((_BYTE *)this + 176) = 0;
  v23 = *((_QWORD *)this + 9);
  v24 = (unsigned __int8 *)(v23 + 16);
  if (__ldaxr((unsigned __int8 *)(v23 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v24))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v23 + 16);
LABEL_24:
  v26 = *((_QWORD *)this + 15);
  v30 = this;
  v31 = (_QWORD *)v26;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IDBDatabase *>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>((uint64_t *)(v23 + 24), (uint64_t *)&v31, (uint64_t *)&v30, (uint64_t)v29);
  v27 = __ldxr(v24);
  if (v27 == 1)
  {
    if (!__stlxr(0, v24))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v23 + 16));
  return this;
}

void WebCore::IDBDatabase::~IDBDatabase(WebCore::IDBDatabase *this)
{
  uint64_t *v2;
  uint64_t v3;
  int isMainThread;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  bmalloc::api *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  bmalloc::api *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t k;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  bmalloc::api *v35;
  void *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::IDBObjectStoreInfo *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  bmalloc::api *v53;
  void *v54;
  WTF *v55;
  void *v56;
  WebCore::IDBClient::IDBConnectionProxy *v57;
  bmalloc::api *v58;
  void *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64[2];

  if (!*((_BYTE *)this + 129))
  {
    v2 = (uint64_t *)*((_QWORD *)this + 9);
    v3 = *((_QWORD *)this + 15);
    v63 = v3;
    v64[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::databaseConnectionClosed;
    v64[1] = 0;
    isMainThread = WTF::isMainThread(this);
    v5 = *v2;
    if (isMainThread)
    {
      if (*(_BYTE *)(v5 + 16))
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), v3);
    }
    else
    {
      WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v2, (unsigned int *)v5, v64, &v63);
    }
  }
  WebCore::IDBClient::IDBConnectionProxy::unregisterDatabaseConnection(*((_OWORD **)this + 9), this);
  v7 = *((_QWORD *)this + 20);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)(v7 + 24 * i) != -1)
        {
          v10 = v7 + 24 * i;
          v11 = *(unsigned int **)(v10 + 16);
          *(_QWORD *)(v10 + 16) = 0;
          if (v11)
          {
            v12 = v11 + 6;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v11 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v11);
              bmalloc::api::isoDeallocate(v15, v16);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), v6);
  }
  v17 = *((_QWORD *)this + 19);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      for (j = 0; j != v18; ++j)
      {
        if (*(_QWORD *)(v17 + 24 * j) != -1)
        {
          v20 = v17 + 24 * j;
          v21 = *(unsigned int **)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            v22 = v21 + 6;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v21 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v21);
              bmalloc::api::isoDeallocate(v25, v26);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v17 - 16), v6);
  }
  v27 = *((_QWORD *)this + 18);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    if ((_DWORD)v28)
    {
      for (k = 0; k != v28; ++k)
      {
        if (*(_QWORD *)(v27 + 24 * k) != -1)
        {
          v30 = v27 + 24 * k;
          v31 = *(unsigned int **)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          if (v31)
          {
            v32 = v31 + 6;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v31 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v31);
              bmalloc::api::isoDeallocate(v35, v36);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v27 - 16), v6);
  }
  v37 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v37)
  {
    v38 = v37 + 6;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v37 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v37);
      bmalloc::api::isoDeallocate(v53, v54);
    }
  }
  v41 = *((_QWORD *)this + 14);
  if (v41)
  {
    v42 = *(unsigned int *)(v41 - 4);
    if ((_DWORD)v42)
    {
      v43 = (WebCore::IDBObjectStoreInfo *)(v41 + 8);
      do
      {
        if (*((_QWORD *)v43 - 1) != -1)
          WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v43, (WTF::StringImpl *)v6);
        v43 = (WebCore::IDBObjectStoreInfo *)((char *)v43 + 72);
        --v42;
      }
      while (v42);
    }
    WTF::fastFree((WTF *)(v41 - 16), v6);
  }
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (uint64_t *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v45)
  {
    v46 = *v45;
    do
    {
      v47 = __ldaxr((unsigned int *)v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, (unsigned int *)v46));
    if (!v48)
    {
      atomic_store(1u, (unsigned int *)v46);
      v57 = *(WebCore::IDBClient::IDBConnectionProxy **)(v46 + 24);
      *(_QWORD *)(v46 + 24) = 0;
      if (v57)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v57);
        bmalloc::api::isoDeallocate(v58, v59);
      }
      v60 = *(unsigned int **)(v46 + 8);
      *(_QWORD *)(v46 + 8) = 0;
      if (v60)
      {
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, v60);
          WTF::fastFree((WTF *)v60, v6);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v46, v6);
    }
  }
  *((_QWORD *)this + 4) = &off_1E3357608;
  v49 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v49)
  {
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::Thread::~Thread((WTF::Thread *)v49);
      WTF::fastFree(v55, v56);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::IDBDatabase *)((char *)this + 32), v6);
  WebCore::EventTarget::~EventTarget(this, v52);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::IDBDatabase::~IDBDatabase(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::IDBDatabase::~IDBDatabase(WebCore::IDBDatabase *this)
{
  WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)((char *)this - 32));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

BOOL WebCore::IDBDatabase::virtualHasPendingActivity(WebCore::IDBDatabase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  _QWORD *j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (*((_BYTE *)this + 129))
    return 0;
  v1 = *((_QWORD *)this + 18);
  if (!v1 || !*(_DWORD *)(v1 - 12))
  {
    v2 = *((_QWORD *)this + 19);
    if (!v2 || !*(_DWORD *)(v2 - 12))
    {
      v3 = *((_QWORD *)this + 20);
      if (!v3 || !*(_DWORD *)(v3 - 12))
      {
        v4 = *((_QWORD *)this + 2);
        if ((v4 & 0x1000000000000) != 0)
        {
          v6 = v4 & 0xFFFFFFFFFFFFLL;
          v7 = *(unsigned int *)(v6 + 28);
          if ((_DWORD)v7)
          {
            v8 = (_QWORD *)*((_QWORD *)this + 21);
            v9 = *(_QWORD **)(v6 + 16);
            v10 = 32 * v7;
            v11 = v10;
            for (i = v9; *i != v8[8]; i += 4)
            {
              v11 -= 32;
              if (!v11)
              {
                v13 = v10;
                for (j = v9; *j != v8[98]; j += 4)
                {
                  v13 -= 32;
                  if (!v13)
                  {
                    v15 = v8[280];
                    v16 = v10 - 32;
                    do
                    {
                      v17 = *v9;
                      v9 += 4;
                      result = v17 == v15;
                      v18 = v17 == v15 || v16 == 0;
                      v16 -= 32;
                    }
                    while (!v18);
                    return result;
                  }
                }
                return 1;
              }
            }
            return 1;
          }
        }
        return 0;
      }
    }
  }
  return 1;
}

BOOL `non-virtual thunk to'WebCore::IDBDatabase::virtualHasPendingActivity(WebCore::IDBDatabase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  _QWORD *j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (*((_BYTE *)this + 97))
    return 0;
  v1 = *((_QWORD *)this + 14);
  if (!v1 || !*(_DWORD *)(v1 - 12))
  {
    v2 = *((_QWORD *)this + 15);
    if (!v2 || !*(_DWORD *)(v2 - 12))
    {
      v3 = *((_QWORD *)this + 16);
      if (!v3 || !*(_DWORD *)(v3 - 12))
      {
        v4 = *((_QWORD *)this - 2);
        if ((v4 & 0x1000000000000) != 0)
        {
          v6 = v4 & 0xFFFFFFFFFFFFLL;
          v7 = *(unsigned int *)(v6 + 28);
          if ((_DWORD)v7)
          {
            v8 = (_QWORD *)*((_QWORD *)this + 17);
            v9 = *(_QWORD **)(v6 + 16);
            v10 = 32 * v7;
            v11 = v10;
            for (i = v9; *i != v8[8]; i += 4)
            {
              v11 -= 32;
              if (!v11)
              {
                v13 = v10;
                for (j = v9; *j != v8[98]; j += 4)
                {
                  v13 -= 32;
                  if (!v13)
                  {
                    v15 = v8[280];
                    v16 = v10 - 32;
                    do
                    {
                      v17 = *v9;
                      v9 += 4;
                      result = v17 == v15;
                      v18 = v17 == v15 || v16 == 0;
                      v16 -= 32;
                    }
                    while (!v18);
                    return result;
                  }
                }
                return 1;
              }
            }
            return 1;
          }
        }
        return 0;
      }
    }
  }
  return 1;
}

unsigned int *WebCore::IDBDatabase::renameIndex(WebCore::IDBDatabase *this, WebCore::IDBIndex *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;

  v6 = *((_QWORD *)a2 + 18);
  v7 = *((_QWORD *)this + 14);
  if (!v7)
  {
    v9 = 0;
    LODWORD(v8) = 0;
    goto LABEL_9;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = v7 + 72 * v8;
  if (!*(_DWORD *)(v7 - 12))
  {
LABEL_9:
    v11 = v7 + 72 * v8;
    v7 = v9;
    v9 = v11;
    goto LABEL_10;
  }
  if ((_DWORD)v8)
  {
    v10 = 72 * v8;
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 72;
      v10 -= 72;
      if (!v10)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_10:
  if ((WTF::equal(*(WTF **)(v7 + 16), *(const WTF::StringImpl **)(v6 + 32), a3) & 1) == 0)
  {
    do
    {
      v14 = v7 + 72;
      v7 = v9;
      if (v14 != v9)
      {
        v7 = v14;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 72;
          if (v7 == v9)
          {
            v7 = v9;
            break;
          }
        }
      }
    }
    while (!WTF::equal(*(WTF **)(v7 + 16), *(const WTF::StringImpl **)(v6 + 32), v13));
  }
  v15 = *(_QWORD *)(v7 + 64);
  if (v15)
  {
    v16 = *((_QWORD *)a2 + 3);
    v17 = *(_DWORD *)(v15 - 8);
    v18 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(_QWORD *)(v15 + ((unint64_t)v21 << 6));
    if (v22 != v16)
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(_QWORD *)(v15 + ((unint64_t)v21 << 6));
        ++v23;
        if (v22 == v16)
          goto LABEL_25;
      }
      v21 = *(unsigned int *)(v15 - 4);
    }
LABEL_25:
    v24 = v15 + (v21 << 6);
    v15 += (unint64_t)*(unsigned int *)(v15 - 4) << 6;
  }
  else
  {
    v24 = 0;
  }
  if (v24 == v15)
    v25 = 0;
  else
    v25 = v24 + 8;
  v26 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v25 + 16);
  *(_QWORD *)(v25 + 16) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v12);
    else
      *(_DWORD *)v27 -= 2;
  }
  return WebCore::IDBTransaction::renameIndex(*((WebCore::IDBTransaction **)this + 17), a2, a3);
}

void WebCore::IDBDatabase::createObjectStore(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  __int16 v29;
  uint64_t v30;
  WTF::StringImpl *v31[2];
  _BYTE v32[16];
  int v33;
  char v34;
  char v35;
  uint64_t v36;
  _BYTE v37[24];
  WTF::StringImpl *v38;

  v5 = *(_QWORD *)(a1 + 136);
  if (!v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_5:
    *(_BYTE *)a4 = v6;
    goto LABEL_6;
  }
  if (*(_BYTE *)(v5 + 136))
  {
    *(_BYTE *)a4 = 27;
    *(_QWORD *)(a4 + 8) = 0;
LABEL_6:
    *(_DWORD *)(a4 + 16) = 1;
    return;
  }
  if (*(_BYTE *)(a3 + 24))
  {
    v10 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v10 == -1)
    {
      v26 = std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::IDBDatabase::transaction(v26, v27, v28, v29, v30);
      return;
    }
    v31[0] = (WTF::StringImpl *)v37;
    if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore17isIDBKeyPathValidERKNS_7variantIJNS6_6StringENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JZNS8_17isIDBKeyPathValidESH_E3__1EEEEEJRKNS0_6__implIJSA_SE_EEEEEEDcOT_DpOT0____fmatrix[v10])(v31, a3) & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = 9;
      goto LABEL_5;
    }
  }
  v11 = *(_QWORD *)(a1 + 112);
  if (!v11)
  {
    v14 = 0;
    LODWORD(v12) = 0;
LABEL_21:
    v13 = v11 + 72 * v12;
    goto LABEL_22;
  }
  v12 = *(unsigned int *)(v11 - 4);
  v13 = v11 + 72 * v12;
  if (!*(_DWORD *)(v11 - 12))
  {
    v14 = v11 + 72 * v12;
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(a1 + 112);
  if ((_DWORD)v12)
  {
    v15 = 72 * v12;
    v14 = *(_QWORD *)(a1 + 112);
    while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
    {
      v14 += 72;
      v15 -= 72;
      if (!v15)
      {
        v14 = v13;
        break;
      }
    }
  }
LABEL_22:
  if (v11)
    v16 = v11 + 72 * *(unsigned int *)(v11 - 4);
  else
    v16 = 0;
  if (v16 != v14)
  {
    while ((WTF::equal(*(WTF **)(v14 + 16), *a2, (const WTF::StringImpl *)a3) & 1) == 0)
    {
      v17 = v14 + 72;
      v14 = v13;
      if (v17 != v13)
      {
        v14 = v17;
        while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
        {
          v14 += 72;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
      if (v14 == v16)
        goto LABEL_33;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 25;
    goto LABEL_5;
  }
LABEL_33:
  v18 = *(unsigned __int8 *)(a3 + 24);
  v19 = *(unsigned __int8 *)(a3 + 32);
  if (*(_BYTE *)(a3 + 24))
    v20 = v19 == 0;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = *(_DWORD *)(a3 + 16);
    if (v21 == 1 || !v21 && (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4)))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = 12;
      goto LABEL_5;
    }
  }
  v22 = (WTF::StringImpl *)(*(_QWORD *)(a1 + 104) + 1);
  *(_QWORD *)(a1 + 104) = v22;
  v31[0] = v22;
  v23 = *a2;
  if (*a2)
    *(_DWORD *)v23 += 2;
  v31[1] = v23;
  v32[0] = 0;
  v34 = 0;
  if (v18)
  {
    v33 = -1;
    v24 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v24])(v37, v32, a3);
      v33 = v24;
      v22 = v31[0];
    }
    v34 = 1;
  }
  v35 = v19;
  v36 = 0;
  v38 = v22;
  WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBObjectStoreInfo&>((uint64_t *)(a1 + 112), (uint64_t *)&v38, (uint64_t)v31, (uint64_t)v37);
  WebCore::IDBTransaction::createObjectStore(*(WebCore::IDBTransaction **)(a1 + 136), v31, (WebCore::IDBObjectStore **)a4);
  *(_DWORD *)(a4 + 16) = 0;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)v31, v25);
}

void WebCore::IDBDatabase::transaction(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  WTF **v18;
  uint64_t v19;
  WTF **v20;
  uint64_t v21;
  WTF **v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  int v33;
  const WTF::StringImpl **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  const WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t *, uint64_t *);
  unint64_t v53;
  uint64_t (*v54)(uint64_t *, uint64_t *);
  WebCore::IDBTransaction *v55;
  WebCore::IDBTransaction *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WebCore::IDBDatabase *v60;
  const WTF::String *v61;
  __int16 v62;
  _BYTE v64[24];
  WebCore::IDBTransaction *v65;
  uint64_t (*v66[2])(uint64_t *, uint64_t *);
  __int16 v67;
  _OWORD v68[2];
  WTF *v69;
  uint64_t v70;

  v9 = *(_QWORD *)(a1 + 136);
  if (v9 && *(unsigned __int8 *)(v9 + 136) - 2 >= 3 || *(_BYTE *)(a1 + 128))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 8;
    *(_DWORD *)(a5 + 16) = 1;
    return;
  }
  v69 = 0;
  v70 = 0;
  v10 = *(_DWORD *)(a2 + 16);
  if (v10)
  {
    if (v10 != 1)
    {
      v60 = (WebCore::IDBDatabase *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::IDBDatabase::deleteObjectStore(v60, v61);
      return;
    }
    v11 = *(_QWORD *)a2;
    v12 = *(unsigned int *)(a2 + 12);
    v13 = (WTF::StringImpl *)(*(_QWORD *)a2 + 8 * v12);
    v66[0] = (uint64_t (*)(uint64_t *, uint64_t *))WTF::codePointCompareLessThan;
    v14 = 126 - 2 * __clz(v12);
    if ((_DWORD)v12)
      v15 = v14;
    else
      v15 = 0;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v11, v13, v66, v15, 1);
    v18 = *(WTF ***)a2;
    v19 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v19)
    {
      v20 = &v18[v19];
      v21 = 8 * v19 - 16;
      do
      {
        v22 = v18++;
        if (v18 == v20)
        {
          v18 = v20;
          goto LABEL_29;
        }
        v23 = v21;
        v24 = WTF::equal(*v22, v22[1], v17);
        v21 = v23 - 8;
      }
      while (!v24);
      if (v22 + 2 != v20)
      {
        v25 = 1;
        do
        {
          if ((WTF::equal(*v22, v18[v25], v17) & 1) == 0)
          {
            v26 = v18[v25];
            v18[v25] = 0;
            v28 = v22[1];
            ++v22;
            v27 = v28;
            *v22 = v26;
            if (v28)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v16);
              else
                *(_DWORD *)v27 -= 2;
            }
          }
          ++v25;
          v23 -= 8;
        }
        while (v23);
      }
      v18 = v22 + 1;
    }
LABEL_29:
    v32 = *(WTF **)a2;
    v36 = (uint64_t)v18 - *(_QWORD *)a2;
    v37 = v36 >> 3;
    v38 = *(unsigned int *)(a2 + 12);
    if (v36 >> 3 != v38)
    {
      v39 = (WTF::StringImpl **)((char *)v32 + 8 * v37);
      v40 = 8 * v38 - 8 * v37;
      do
      {
        v41 = *v39;
        *v39 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v16);
          else
            *(_DWORD *)v41 -= 2;
        }
        ++v39;
        v40 -= 8;
      }
      while (v40);
      v32 = *(WTF **)a2;
    }
    v35 = (unint64_t)v36 >> 3;
    v42 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v69 = v32;
    LODWORD(v70) = v42;
    HIDWORD(v70) = (unint64_t)v36 >> 3;
    if (!HIDWORD(v70))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 12;
      *(_DWORD *)(a5 + 16) = 1;
      goto LABEL_67;
    }
    v62 = a4;
    v34 = (const WTF::StringImpl **)((char *)v32 + (v36 & 0x7FFFFFFF8));
  }
  else
  {
    v29 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v30 = (WTF *)WTF::fastMalloc((WTF *)8);
    v32 = v30;
    v62 = a4;
    if (v29)
    {
      v33 = *(_DWORD *)v29;
      *(_DWORD *)v29 += 2;
      *(_QWORD *)v30 = v29;
      v69 = v30;
      v70 = 0x100000001;
      if (v33)
        *(_DWORD *)v29 = v33;
      else
        WTF::StringImpl::destroy(v29, v31);
    }
    else
    {
      *(_QWORD *)v30 = 0;
      v69 = v30;
      v70 = 0x100000001;
    }
    v34 = (const WTF::StringImpl **)((char *)v32 + 8);
    LODWORD(v35) = 1;
  }
  v43 = (const WTF::StringImpl **)v32;
  do
  {
    v44 = *(_QWORD *)(a1 + 112);
    if (!v44)
    {
      v47 = 0;
      LODWORD(v45) = 0;
LABEL_49:
      v46 = v44 + 72 * v45;
      goto LABEL_50;
    }
    v45 = *(unsigned int *)(v44 - 4);
    v46 = v44 + 72 * v45;
    if (!*(_DWORD *)(v44 - 12))
    {
      v47 = v44 + 72 * v45;
      goto LABEL_49;
    }
    v47 = *(_QWORD *)(a1 + 112);
    if ((_DWORD)v45)
    {
      v48 = 72 * v45;
      v47 = *(_QWORD *)(a1 + 112);
      while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
      {
        v47 += 72;
        v48 -= 72;
        if (!v48)
        {
          v47 = v46;
          break;
        }
      }
    }
LABEL_50:
    if (v44)
      v49 = v44 + 72 * *(unsigned int *)(v44 - 4);
    else
      v49 = 0;
    if (v49 == v47)
    {
LABEL_65:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 5;
      goto LABEL_66;
    }
    while ((WTF::equal(*(WTF **)(v47 + 16), *v43, v17) & 1) == 0)
    {
      v51 = v47 + 72;
      v47 = v46;
      if (v51 != v46)
      {
        v47 = v51;
        while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
        {
          v47 += 72;
          if (v47 == v46)
          {
            v47 = v46;
            break;
          }
        }
      }
      if (v47 == v49)
        goto LABEL_65;
    }
    ++v43;
  }
  while (v43 != v34);
  if (a3 >= 2)
  {
    *(_BYTE *)a5 = 33;
    *(_QWORD *)(a5 + 8) = 0;
LABEL_66:
    *(_DWORD *)(a5 + 16) = 1;
    if (!(_DWORD)v35)
      goto LABEL_67;
LABEL_77:
    v58 = 8 * v35;
    do
    {
      v59 = *(WTF::StringImpl **)v32;
      *(_QWORD *)v32 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v50);
        else
          *(_DWORD *)v59 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v58 -= 8;
    }
    while (v58);
    v32 = v69;
    goto LABEL_67;
  }
  v52 = *(uint64_t (**)(uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 72) + 8);
  do
  {
    v53 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v54 = (uint64_t (*)(uint64_t *, uint64_t *))(v53 + 2);
  }
  while (__stlxr((unint64_t)v54, &WebCore::nextClientResourceNumber(void)::currentNumber));
  v66[0] = v52;
  v66[1] = v54;
  v67 = 512;
  memset(v68, 0, sizeof(v68));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v68 + 2, (unsigned int *)&v69);
  LOBYTE(v67) = a3;
  if ((v62 & 0xFF00) != 0)
    HIBYTE(v67) = v62;
  v55 = (WebCore::IDBTransaction *)bmalloc::api::isoAllocate();
  v56 = WebCore::IDBTransaction::IDBTransaction(v55, (WebCore::IDBDatabase *)a1, (const WebCore::IDBTransactionInfo *)v66, 0);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v56 + 4);
  v65 = v55;
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBTransaction*>((uint64_t *)(a1 + 144), (WTF::StringImpl *)v66, (uint64_t *)&v65, (uint64_t)v64);
  *(_QWORD *)a5 = v55;
  *(_DWORD *)(a5 + 16) = 0;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)v66, v57);
  LODWORD(v35) = HIDWORD(v70);
  v32 = v69;
  if (HIDWORD(v70))
    goto LABEL_77;
LABEL_67:
  if (v32)
  {
    v69 = 0;
    LODWORD(v70) = 0;
    WTF::fastFree(v32, v50);
  }
}

uint64_t WebCore::IDBDatabase::deleteObjectStore@<X0>(uint64_t this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(this + 136);
  if (!v5)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_27:
    *(_BYTE *)a4 = v6;
    goto LABEL_28;
  }
  if (*(_BYTE *)(v5 + 136))
  {
    *(_BYTE *)a4 = 27;
    *(_QWORD *)(a4 + 8) = 0;
LABEL_28:
    *(_BYTE *)(a4 + 16) = 1;
    return this;
  }
  v8 = this;
  v10 = (uint64_t *)(this + 112);
  v9 = *(_QWORD *)(this + 112);
  if (!v9)
  {
    v13 = 0;
    LODWORD(v11) = 0;
LABEL_14:
    v12 = v9 + 72 * v11;
    goto LABEL_15;
  }
  v11 = *(unsigned int *)(v9 - 4);
  v12 = v9 + 72 * v11;
  if (!*(_DWORD *)(v9 - 12))
  {
    v13 = v9 + 72 * v11;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(this + 112);
  if ((_DWORD)v11)
  {
    v14 = 72 * v11;
    v13 = *(_QWORD *)(this + 112);
    while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
    {
      v13 += 72;
      v14 -= 72;
      if (!v14)
      {
        v13 = v12;
        break;
      }
    }
  }
LABEL_15:
  if (v9)
    v15 = v9 + 72 * *(unsigned int *)(v9 - 4);
  else
    v15 = 0;
  if (v15 == v13)
  {
LABEL_26:
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 5;
    goto LABEL_27;
  }
  while ((WTF::equal(*(WTF **)(v13 + 16), *a2, a3) & 1) == 0)
  {
    v16 = v13 + 72;
    v13 = v12;
    if (v16 != v12)
    {
      v13 = v16;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 72;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
    if (v13 == v15)
      goto LABEL_26;
  }
  v17 = *v10;
  if (*v10)
  {
    v18 = *(unsigned int *)(v17 - 4);
    v19 = v17 + 72 * v18;
    if (*(_DWORD *)(v17 - 12))
    {
      v20 = *v10;
      if ((_DWORD)v18)
      {
        v21 = 72 * v18;
        v20 = *v10;
        while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
        {
          v20 += 72;
          v21 -= 72;
          if (!v21)
          {
            v20 = v19;
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
    v20 = v17 + 72 * v18;
  }
  else
  {
    v20 = 0;
    LODWORD(v18) = 0;
  }
  v19 = v17 + 72 * v18;
LABEL_40:
  if (v17)
    v22 = v17 + 72 * *(unsigned int *)(v17 - 4);
  else
    v22 = 0;
  if (v22 != v20)
  {
    while ((WTF::equal(*(WTF **)(v20 + 16), *a2, a3) & 1) == 0)
    {
      v23 = v20 + 72;
      v20 = v19;
      if (v23 != v19)
      {
        v20 = v23;
        while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
        {
          v20 += 72;
          if (v20 == v19)
          {
            v20 = v19;
            break;
          }
        }
      }
      if (v20 == v22)
        goto LABEL_53;
    }
    v24 = *(_QWORD *)(v20 + 8);
    WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::remove(v10, (WTF::StringImpl *)&v24);
  }
LABEL_53:
  this = (uint64_t)WebCore::IDBTransaction::deleteObjectStore(*(WebCore::IDBTransaction **)(v8 + 136), a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t WebCore::IDBDatabase::close(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v1 = this;
  if (!*(_BYTE *)(this + 128))
  {
    *(_BYTE *)(this + 128) = 1;
    v2 = *(uint64_t **)(this + 72);
    v3 = *(_QWORD *)(this + 120);
    v10 = v3;
    v11 = WebCore::IDBClient::IDBConnectionToServer::databaseConnectionPendingClose;
    v12 = 0;
    this = WTF::isMainThread((WTF *)this);
    v4 = *v2;
    if ((_DWORD)this)
    {
      if (*(_BYTE *)(v4 + 16))
        this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 184))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), v3);
    }
    else
    {
      this = WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v2, (unsigned int *)v4, (uint64_t *)&v11, &v10);
    }
  }
  if (!*(_BYTE *)(v1 + 129))
  {
    v5 = *(_QWORD *)(v1 + 144);
    if (!v5 || !*(_DWORD *)(v5 - 12))
    {
      v6 = *(_QWORD *)(v1 + 152);
      if (!v6 || !*(_DWORD *)(v6 - 12))
      {
        *(_BYTE *)(v1 + 129) = 1;
        v7 = *(uint64_t **)(v1 + 72);
        v8 = *(_QWORD *)(v1 + 120);
        v10 = v8;
        v11 = WebCore::IDBClient::IDBConnectionToServer::databaseConnectionClosed;
        v12 = 0;
        this = WTF::isMainThread((WTF *)this);
        v9 = *v7;
        if ((_DWORD)this)
        {
          if (*(_BYTE *)(v9 + 16))
            return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), v8);
        }
        else
        {
          return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v7, (unsigned int *)v9, (uint64_t *)&v11, &v10);
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::IDBDatabase::connectionToServerLost(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int **v18;
  uint64_t v19;
  WebCore::IDBDatabase ***v20;
  WebCore::IDBDatabase **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int **v36;
  uint64_t v37;
  WebCore::IDBDatabase ***v38;
  WebCore::IDBDatabase **v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unsigned int *result;
  unsigned int **v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  bmalloc::api *v63;
  void *v64;
  unsigned int **v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  bmalloc::api *v69;
  void *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  _DWORD *v79;
  unsigned int *v80;

  *(_WORD *)(a1 + 128) = 257;
  v4 = *(_QWORD *)(a1 + 144);
  if (!v4)
  {
    v5 = 0;
    LODWORD(v6) = 0;
LABEL_3:
    v7 = v4 + 24 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = v4 + 24 * v6;
  if (!*(_DWORD *)(v4 - 12))
  {
    v5 = v4 + 24 * v6;
    goto LABEL_3;
  }
  v5 = *(_QWORD *)(a1 + 144);
  if ((_DWORD)v6)
  {
    v71 = 24 * v6;
    v5 = *(_QWORD *)(a1 + 144);
    while (*(_OWORD *)v5 == 0 || *(_QWORD *)v5 == -1)
    {
      v5 += 24;
      v71 -= 24;
      if (!v71)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
LABEL_6:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = v4 + 24 * *(unsigned int *)(v4 - 4);
  v75 = *(unsigned int *)(v4 - 12);
  if (!(_DWORD)v75)
    goto LABEL_6;
  if (v75 >> 29)
    goto LABEL_161;
  v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v75));
LABEL_7:
  if (v8 == v5)
  {
    v78 = 1;
    v18 = (unsigned int **)v9;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = *(_QWORD *)(v5 + 16);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 24);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      *((_QWORD *)v9 + v10) = v13;
      v16 = v5 + 24;
      v5 = v7;
      if (v16 != v7)
      {
        v5 = v16;
        while (*(_OWORD *)v5 == 0 || *(_QWORD *)v5 == -1)
        {
          v5 += 24;
          if (v5 == v7)
          {
            v5 = v7;
            break;
          }
        }
      }
      ++v10;
      v11 = v12 + 1;
    }
    while (v5 != v8);
    v18 = (unsigned int **)((char *)v9 + 8 * v10);
    if (v10)
    {
      v19 = 8 * v12;
      v20 = (WebCore::IDBDatabase ***)v9;
      do
      {
        v21 = *v20++;
        WebCore::IDBTransaction::connectionClosedFromServer(v21, a2);
        v19 -= 8;
      }
      while (v19);
      v78 = 0;
    }
    else
    {
      v78 = 1;
    }
  }
  v22 = *(_QWORD *)(a1 + 152);
  if (!v22)
  {
    v23 = 0;
    LODWORD(v24) = 0;
LABEL_30:
    v25 = v22 + 24 * v24;
    goto LABEL_31;
  }
  v24 = *(unsigned int *)(v22 - 4);
  v25 = v22 + 24 * v24;
  if (!*(_DWORD *)(v22 - 12))
  {
    v23 = v22 + 24 * v24;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(a1 + 152);
  if ((_DWORD)v24)
  {
    v73 = 24 * v24;
    v23 = *(_QWORD *)(a1 + 152);
    while (*(_OWORD *)v23 == 0 || *(_QWORD *)v23 == -1)
    {
      v23 += 24;
      v73 -= 24;
      if (!v73)
      {
        v23 = v25;
        break;
      }
    }
  }
LABEL_31:
  if (!v22)
  {
    v26 = 0;
LABEL_33:
    v27 = 0;
    goto LABEL_34;
  }
  v26 = v22 + 24 * *(unsigned int *)(v22 - 4);
  v76 = *(unsigned int *)(v22 - 12);
  if (!(_DWORD)v76)
    goto LABEL_33;
  if (v76 >> 29)
  {
LABEL_161:
    __break(0xC471u);
    JUMPOUT(0x195361FE0);
  }
  v27 = (WTF *)WTF::fastMalloc((WTF *)(8 * v76));
LABEL_34:
  if (v26 == v23)
  {
    v77 = 1;
    v36 = (unsigned int **)v27;
  }
  else
  {
    v28 = 0;
    v29 = 1;
    do
    {
      v30 = v29;
      v31 = *(_QWORD *)(v23 + 16);
      if (v31)
      {
        v32 = (unsigned int *)(v31 + 24);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
      }
      *((_QWORD *)v27 + v28) = v31;
      v34 = v23 + 24;
      v23 = v25;
      if (v34 != v25)
      {
        v23 = v34;
        while (*(_OWORD *)v23 == 0 || *(_QWORD *)v23 == -1)
        {
          v23 += 24;
          if (v23 == v25)
          {
            v23 = v25;
            break;
          }
        }
      }
      ++v28;
      v29 = v30 + 1;
    }
    while (v23 != v26);
    v36 = (unsigned int **)((char *)v27 + 8 * v28);
    if (v28)
    {
      v37 = 8 * v30;
      v38 = (WebCore::IDBDatabase ***)v27;
      do
      {
        v39 = *v38++;
        WebCore::IDBTransaction::connectionClosedFromServer(v39, a2);
        v37 -= 8;
      }
      while (v37);
      v77 = 0;
    }
    else
    {
      v77 = 1;
    }
  }
  v40 = *(_QWORD *)(a1 + 168);
  v41 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v41);
  *(_DWORD *)(v41 + 16) = 1;
  *(_QWORD *)v41 = off_1E33A4B48;
  *(_QWORD *)(v41 + 8) = 0;
  *(_DWORD *)(v41 + 20) = *(_DWORD *)(v41 + 20) & 0xFFC00000 | 0x1E8202 | (*(_QWORD *)(v40 + 784) != 0);
  v44 = *(_DWORD **)(v40 + 784);
  if (v44)
    *v44 += 2;
  *(_QWORD *)(v41 + 24) = v44;
  *(_QWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 40) = 0;
  *(_QWORD *)(v41 + 48) = 0;
  *(_QWORD *)(v41 + 56) = v43;
  *(_QWORD *)(v41 + 64) = 0;
  v45 = (unsigned int *)(a1 + 24);
  v80 = (unsigned int *)v41;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 + 1, v45));
  v47 = *(_QWORD *)(v41 + 48);
  if (v47 == a1)
  {
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      if (*v45 == 2)
      {
        if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)a1, v42);
      }
      else
      {
        *v45 -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    }
  }
  else
  {
    *(_QWORD *)(v41 + 48) = a1;
    if (!v47)
      goto LABEL_104;
    if ((*(_BYTE *)(v47 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v47, v42);
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 96))(v47);
    }
    if (*(_QWORD *)(v41 + 48))
LABEL_104:
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 176))(v41);
  }
  v48 = *(_QWORD *)(a1 + 40);
  if (v48 && *(_QWORD *)(v48 + 8))
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(a1 + 32), a1, 1, (uint64_t *)&v80);
  v49 = *(_QWORD *)(a1 + 168);
  v50 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v50);
  *(_DWORD *)(v50 + 16) = 1;
  *(_QWORD *)v50 = off_1E33A4B48;
  *(_QWORD *)(v50 + 8) = 0;
  *(_DWORD *)(v50 + 20) = *(_DWORD *)(v50 + 20) & 0xFFC00000 | 0x1E8202 | (*(_QWORD *)(v49 + 408) != 0);
  v53 = *(_DWORD **)(v49 + 408);
  if (v53)
    *v53 += 2;
  *(_QWORD *)(v50 + 24) = v53;
  *(_QWORD *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 40) = 0;
  *(_QWORD *)(v50 + 48) = 0;
  *(_QWORD *)(v50 + 56) = v52;
  *(_QWORD *)(v50 + 64) = 0;
  v79 = (_DWORD *)v50;
  do
    v54 = __ldaxr(v45);
  while (__stlxr(v54 + 1, v45));
  v55 = *(_QWORD *)(v50 + 48);
  if (v55 == a1)
  {
    if ((*(_BYTE *)(a1 + 22) & 2) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      goto LABEL_74;
    }
    if (*v45 != 2)
    {
      *v45 -= 2;
LABEL_74:
      v56 = v77;
      goto LABEL_75;
    }
    v56 = v77;
    if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a1, v51);
  }
  else
  {
    *(_QWORD *)(v50 + 48) = a1;
    v56 = v77;
    if (!v55)
      goto LABEL_110;
    if ((*(_BYTE *)(v55 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v55 + 24) == 2)
      {
        if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v55, v51);
      }
      else
      {
        *(_DWORD *)(v55 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 96))(v55);
    }
    if (*(_QWORD *)(v50 + 48))
LABEL_110:
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 176))(v50);
  }
LABEL_75:
  v57 = *(_QWORD *)(a1 + 40);
  if (v57 && *(_QWORD *)(v57 + 8))
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(a1 + 32), a1, 1, (uint64_t *)&v79);
  if (v79)
  {
    if (v79[4] == 1)
      (*(void (**)(void))(*(_QWORD *)v79 + 8))();
    else
      --v79[4];
  }
  result = v80;
  if (v80)
  {
    if (v80[4] == 1)
    {
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v80 + 8))();
      if ((v56 & 1) != 0)
        goto LABEL_85;
      goto LABEL_113;
    }
    --v80[4];
  }
  if ((v56 & 1) != 0)
    goto LABEL_85;
LABEL_113:
  v65 = (unsigned int **)v27;
  do
  {
    result = *v65;
    *v65 = 0;
    if (result)
    {
      v66 = result + 6;
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        atomic_store(1u, result + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, (WTF::StringImpl *)v51);
        result = (unsigned int *)bmalloc::api::isoDeallocate(v69, v70);
      }
    }
    ++v65;
  }
  while (v65 != v36);
LABEL_85:
  if (v27)
    result = (unsigned int *)WTF::fastFree(v27, v51);
  if ((v78 & 1) == 0)
  {
    v59 = (unsigned int **)v9;
    do
    {
      result = *v59;
      *v59 = 0;
      if (result)
      {
        v60 = result + 6;
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, result + 6);
          WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, (WTF::StringImpl *)v51);
          result = (unsigned int *)bmalloc::api::isoDeallocate(v63, v64);
        }
      }
      ++v59;
    }
    while (v59 != v18);
  }
  if (v9)
    return (unsigned int *)WTF::fastFree(v9, v51);
  return result;
}

uint64_t WebCore::IDBDatabase::scriptExecutionContext(WebCore::IDBDatabase *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

unsigned int *WebCore::IDBDatabase::stop(WebCore::IDBDatabase *this, void *a2)
{
  unsigned int *result;
  void *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  WTF *v10;
  unsigned int v11;
  _OWORD *v12;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  bmalloc::api *v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;

  result = (unsigned int *)WebCore::EventTarget::removeAllEventListeners((uint64_t)this, a2);
  v5 = *((_QWORD *)this + 18);
  if (!v5)
  {
    v6 = 0;
    LODWORD(v7) = 0;
LABEL_3:
    v8 = (_OWORD *)(v5 + 24 * v7);
    goto LABEL_4;
  }
  v7 = *(unsigned int *)(v5 - 4);
  v8 = (_OWORD *)(v5 + 24 * v7);
  if (!*(_DWORD *)(v5 - 12))
  {
    v6 = (_OWORD *)(v5 + 24 * v7);
    goto LABEL_3;
  }
  v6 = (_OWORD *)*((_QWORD *)this + 18);
  if ((_DWORD)v7)
  {
    v51 = 24 * v7;
    v6 = (_OWORD *)*((_QWORD *)this + 18);
    while (*v6 == 0 || *(_QWORD *)v6 == -1)
    {
      v6 = (_OWORD *)((char *)v6 + 24);
      v51 -= 24;
      if (!v51)
      {
        v6 = v8;
        break;
      }
    }
  }
LABEL_4:
  if (!v5)
  {
    v9 = 0;
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  v9 = (_OWORD *)(v5 + 24 * *(unsigned int *)(v5 - 4));
  v53 = *(unsigned int *)(v5 - 12);
  if (!(_DWORD)v53)
    goto LABEL_6;
  if (v53 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v53));
  v10 = (WTF *)result;
LABEL_7:
  if (v9 != v6)
  {
    v11 = 0;
    do
    {
      v12 = (_OWORD *)((char *)v6 + 24);
      *((_OWORD *)v10 + v11) = *v6;
      v6 = v8;
      if (v12 != v8)
      {
        v6 = v12;
        while (*v6 == 0 || *(_QWORD *)v6 == -1)
        {
          v6 = (_OWORD *)((char *)v6 + 24);
          if (v6 == v8)
          {
            v6 = v8;
            break;
          }
        }
      }
      ++v11;
    }
    while (v6 != v9);
    if (v11)
    {
      v14 = *((_QWORD *)this + 18);
      if (v14)
      {
        v15 = v10;
        v16 = (WTF *)((char *)v10 + 16 * v11);
LABEL_22:
        v17 = *((_QWORD *)v15 + 1);
        v18 = *(_DWORD *)(v14 - 8);
        v19 = (*(_QWORD *)v15 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)v15 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)v15 - 1640531527);
        v20 = v19 + (unsigned __int16)WORD2(*(_QWORD *)v15) + (v19 >> 11);
        v21 = (*(_QWORD *)v15 >> 37) & 0x7FFF800 ^ (v20 << 16) ^ v20;
        v22 = (v17 >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)v17 + (v21 >> 11)) << 16) ^ (v21 + (unsigned __int16)v17 + (v21 >> 11));
        v23 = v22 + WORD2(v17) + (v22 >> 11);
        v24 = (v17 >> 37) & 0x7FFF800 ^ (v23 << 16);
        v25 = ((v24 ^ v23) + ((v24 ^ v23) >> 11)) ^ (8 * ((v24 ^ v23) + ((v24 ^ v23) >> 11)));
        v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
        v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
        if (!v27)
          v27 = 0x800000;
        v28 = v18 & v27;
        v29 = (uint64_t *)(v14 + 24 * v28);
        v31 = *v29;
        v30 = v29[1];
        if (*(_OWORD *)v29 != 0)
        {
          v32 = 1;
          while (v31 == -1 || v31 != *(_QWORD *)v15 || v30 != v17)
          {
            v28 = ((_DWORD)v28 + v32) & v18;
            v31 = *(_QWORD *)(v14 + 24 * v28);
            v30 = *(_QWORD *)(v14 + 24 * v28 + 8);
            ++v32;
            if (*(_OWORD *)(v14 + 24 * v28) == 0)
              goto LABEL_46;
          }
          v33 = *(_QWORD *)(v14 + 24 * v28 + 16);
          if (v33)
          {
            v34 = (unsigned int *)(v33 + 24);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 + 1, v34));
            if (!*(_BYTE *)(v33 + 344))
            {
              result = (unsigned int *)WebCore::EventTarget::removeAllEventListeners(v33, v4);
              *(_BYTE *)(v33 + 344) = 1;
              if (*(_BYTE *)(v33 + 96) == 2)
              {
                result = *(unsigned int **)(v33 + 168);
                *(_QWORD *)(v33 + 168) = 0;
                if (result)
                {
                  v36 = result + 15;
                  do
                  {
                    v37 = __ldaxr(v36);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, v36));
                  if (!v38)
                  {
                    atomic_store(1u, result + 15);
                    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
                  }
                }
              }
              if (*(unsigned __int8 *)(v33 + 136) - 2 >= 3)
                result = WebCore::IDBTransaction::abortInternal((WebCore::IDBDatabase **)v33);
            }
            do
            {
              v39 = __ldaxr(v34);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v34));
            if (!v40)
            {
              atomic_store(1u, (unsigned int *)(v33 + 24));
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v33, (WTF::StringImpl *)v4);
              result = (unsigned int *)bmalloc::api::isoDeallocate(v41, v42);
            }
          }
        }
LABEL_46:
        while (1)
        {
          v15 = (WTF *)((char *)v15 + 16);
          if (v15 == v16)
            break;
          v14 = *((_QWORD *)this + 18);
          if (v14)
            goto LABEL_22;
        }
      }
    }
  }
  if (v10)
    result = (unsigned int *)WTF::fastFree(v10, v4);
  if (!*((_BYTE *)this + 128))
  {
    *((_BYTE *)this + 128) = 1;
    v43 = (uint64_t *)*((_QWORD *)this + 9);
    v44 = *((_QWORD *)this + 15);
    v54 = v44;
    v55 = WebCore::IDBClient::IDBConnectionToServer::databaseConnectionPendingClose;
    v56 = 0;
    result = (unsigned int *)WTF::isMainThread((WTF *)result);
    v45 = *v43;
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(v45 + 16))
        result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v45 + 8) + 8)
                                                                            + 184))(*(_QWORD *)(*(_QWORD *)(v45 + 8) + 8), v44);
    }
    else
    {
      result = (unsigned int *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v43, (unsigned int *)v45, (uint64_t *)&v55, &v54);
    }
  }
  if (!*((_BYTE *)this + 129))
  {
    v46 = *((_QWORD *)this + 18);
    if (!v46 || !*(_DWORD *)(v46 - 12))
    {
      v47 = *((_QWORD *)this + 19);
      if (!v47 || !*(_DWORD *)(v47 - 12))
      {
        *((_BYTE *)this + 129) = 1;
        v48 = (uint64_t *)*((_QWORD *)this + 9);
        v49 = *((_QWORD *)this + 15);
        v54 = v49;
        v55 = WebCore::IDBClient::IDBConnectionToServer::databaseConnectionClosed;
        v56 = 0;
        result = (unsigned int *)WTF::isMainThread((WTF *)result);
        v50 = *v48;
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(v50 + 16))
            return (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v50 + 8) + 8)
                                                                              + 192))(*(_QWORD *)(*(_QWORD *)(v50 + 8) + 8), v49);
        }
        else
        {
          return (unsigned int *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v48, (unsigned int *)v50, (uint64_t *)&v55, &v54);
        }
      }
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::IDBDatabase::stop(WebCore::IDBDatabase *this, void *a2)
{
  return WebCore::IDBDatabase::stop((WebCore::IDBDatabase *)((char *)this - 32), a2);
}

unsigned int *WebCore::IDBDatabase::startVersionChangeTransaction@<X0>(WebCore::IDBDatabase *this@<X0>, const WebCore::IDBTransactionInfo *a2@<X1>, WebCore::IDBOpenDBRequest *a3@<X2>, WebCore::IDBTransaction **a4@<X8>)
{
  WebCore::IDBTransaction *v8;
  WebCore::IDBTransaction *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  bmalloc::api *v19;
  void *v20;
  uint64_t v21;
  WebCore::IDBTransaction *v22;

  v8 = (WebCore::IDBTransaction *)bmalloc::api::isoAllocate();
  v9 = WebCore::IDBTransaction::IDBTransaction(v8, this, a2, a3);
  *a4 = v9;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9 + 4);
  if (v8)
  {
    v11 = (unsigned int *)((char *)v8 + 24);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v8;
  if (v13)
  {
    v14 = v13 + 6;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v13, v10);
      bmalloc::api::isoDeallocate(v19, v20);
    }
  }
  v17 = (WebCore::IDBTransaction *)((char *)*a4 + 80);
  v22 = *a4;
  return WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBTransaction*>((uint64_t *)this + 18, v17, (uint64_t *)&v22, (uint64_t)&v21);
}

uint64_t *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;

  if (!*result)
    goto LABEL_17;
  v4 = result;
  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(result, a2);
  v5 = *v4;
  if (result)
  {
    if (!v5)
      goto LABEL_4;
    v14 = *(_DWORD *)(v5 - 4);
  }
  else
  {
    if (!v5)
      goto LABEL_17;
    v14 = *(_DWORD *)(v5 - 4);
    result = (uint64_t *)(v5 + 24 * v14);
  }
  v5 += 24 * v14;
LABEL_4:
  if ((uint64_t *)v5 == result)
  {
LABEL_17:
    *a3 = 0;
    return result;
  }
  v6 = 0;
  v7 = result[2];
  result[2] = 0;
  *a3 = v7;
  if (!*v4 || (v6 = *v4 + 24 * *(unsigned int *)(*v4 - 4), (uint64_t *)v6 != result))
  {
    if ((uint64_t *)v6 != result)
    {
      *result = -1;
      result[2] = 0;
      ++*(_DWORD *)(*v4 - 16);
      v8 = *v4;
      v9 = *v4 ? *(_DWORD *)(v8 - 12) - 1 : -1;
      *(_DWORD *)(v8 - 12) = v9;
      v10 = *v4;
      if (*v4)
      {
        v11 = 6 * *(_DWORD *)(v10 - 12);
        v12 = *(_DWORD *)(v10 - 4);
        if (v11 < v12 && v12 >= 9)
          return (uint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v4, v12 >> 1, 0);
      }
    }
  }
  return result;
}

WTF *WebCore::IDBDatabase::didCommitOrAbortTransaction(WebCore::IDBDatabase *this, WebCore::IDBTransaction *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  WTF *result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  bmalloc::api *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17[2];

  if (*((WebCore::IDBTransaction **)this + 17) == a2)
  {
    *((_QWORD *)this + 17) = 0;
    v4 = (unsigned int *)((char *)a2 + 24);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)a2 + 6);
      WebCore::IDBTransaction::~IDBTransaction(a2, a2);
      bmalloc::api::isoDeallocate(v14, v15);
    }
  }
  v7 = (_QWORD *)((char *)this + 144);
  v8 = (_QWORD *)((char *)a2 + 80);
  if (*((_QWORD *)this + 18))
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)this + 18, (_QWORD *)a2 + 10);
  v9 = (_QWORD *)((char *)this + 152);
  if (*((_QWORD *)this + 19))
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)this + 19, v8);
  if (*((_QWORD *)this + 20))
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>((uint64_t *)this + 20, v8);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 18, v8);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 19, v8);
  result = (WTF *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 20, v8);
  if (*((_BYTE *)this + 128)
    && !*((_BYTE *)this + 129)
    && (!*v7 || !*(_DWORD *)(*v7 - 12))
    && (!*v9 || !*(_DWORD *)(*v9 - 12)))
  {
    *((_BYTE *)this + 129) = 1;
    v11 = (uint64_t *)*((_QWORD *)this + 9);
    v12 = *((_QWORD *)this + 15);
    v16 = v12;
    v17[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::databaseConnectionClosed;
    v17[1] = 0;
    result = (WTF *)WTF::isMainThread(result);
    v13 = *v11;
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(v13 + 16))
        return (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v13 + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8), v12);
    }
    else
    {
      return (WTF *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v11, (unsigned int *)v13, v17, &v16);
    }
  }
  return result;
}

unsigned int *WebCore::IDBDatabase::willAbortTransaction(WebCore::IDBDatabase *this, WebCore::IDBTransaction *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::IDBTransaction *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  WebCore::IDBTransaction *v20;
  uint64_t v21;
  WebCore::IDBObjectStoreInfo *v22;
  unsigned int *result;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  bmalloc::api *v27;
  void *v28;
  bmalloc::api *v29;
  void *v30;
  bmalloc::api *v31;
  void *v32;
  WebCore::IDBTransaction *v33[3];
  WebCore::IDBTransaction *v34;

  v4 = (WebCore::IDBTransaction *)((char *)a2 + 80);
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)this + 18, (_QWORD *)a2 + 10, (uint64_t *)&v34);
  if (!v34)
  {
    WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)this + 19, v4, (uint64_t *)v33);
    v6 = v33[0];
    v33[0] = 0;
    v7 = (unsigned int *)v34;
    v34 = v6;
    if (v7)
    {
      v8 = v7 + 6;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v7 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v7, v5);
        bmalloc::api::isoDeallocate(v29, v30);
      }
      v11 = (unsigned int *)v33[0];
      v33[0] = 0;
      if (v11)
      {
        v12 = v11 + 6;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v11 + 6);
          WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v11, v5);
          bmalloc::api::isoDeallocate(v31, v32);
        }
      }
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>((uint64_t *)this + 20, v4, (uint64_t *)&v34, (uint64_t)v33);
  if (*((_BYTE *)a2 + 96) == 2)
  {
    v16 = *((_QWORD *)a2 + 16);
    v17 = *(_DWORD **)v16;
    if (*(_QWORD *)v16)
      *v17 += 2;
    v18 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(_OWORD *)(v16 + 8);
    *((_QWORD *)this + 13) = *(_QWORD *)(v16 + 24);
    *(_OWORD *)((char *)this + 88) = v19;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)v33, (_QWORD *)(v16 + 32));
    v20 = (WebCore::IDBTransaction *)*((_QWORD *)this + 14);
    *((WebCore::IDBTransaction **)this + 14) = v33[0];
    v33[0] = v20;
    if (v20)
    {
      v21 = *((unsigned int *)v20 - 1);
      if ((_DWORD)v21)
      {
        v22 = (WebCore::IDBTransaction *)((char *)v20 + 8);
        do
        {
          if (*((_QWORD *)v22 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v22, v15);
          v22 = (WebCore::IDBObjectStoreInfo *)((char *)v22 + 72);
          --v21;
        }
        while (v21);
      }
      WTF::fastFree((WebCore::IDBTransaction *)((char *)v20 - 16), v15);
    }
    *((_BYTE *)this + 128) = 1;
  }
  result = (unsigned int *)v34;
  v34 = 0;
  if (result)
  {
    v24 = result + 6;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v15);
      return (unsigned int *)bmalloc::api::isoDeallocate(v27, v28);
    }
  }
  return result;
}

WTF *WebCore::IDBDatabase::didAbortTransaction(WebCore::IDBDatabase *this, WebCore::IDBTransaction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int isMainThread;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[2];

  if (*((_BYTE *)a2 + 96) == 2)
  {
    *((_BYTE *)this + 128) = 1;
    if (!*((_BYTE *)this + 129))
    {
      v4 = *((_QWORD *)this + 18);
      if (!v4 || !*(_DWORD *)(v4 - 12))
      {
        v5 = *((_QWORD *)this + 19);
        if (!v5 || !*(_DWORD *)(v5 - 12))
        {
          *((_BYTE *)this + 129) = 1;
          v6 = (uint64_t *)*((_QWORD *)this + 9);
          v7 = *((_QWORD *)this + 15);
          v11 = v7;
          v12[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::databaseConnectionClosed;
          v12[1] = 0;
          isMainThread = WTF::isMainThread(this);
          v9 = *v6;
          if (isMainThread)
          {
            if (*(_BYTE *)(v9 + 16))
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), v7);
          }
          else
          {
            WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)v6, (unsigned int *)v9, v12, &v11);
          }
        }
      }
    }
  }
  return WebCore::IDBDatabase::didCommitOrAbortTransaction(this, a2);
}

uint64_t WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  bmalloc::api *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  if (!*a1)
    return 0;
  v3 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(a1, a2);
  v5 = *a1;
  if (!v3)
  {
    if (!v5)
      return 0;
    v16 = *(_DWORD *)(v5 - 4);
    v3 = (uint64_t *)(v5 + 24 * v16);
LABEL_25:
    v5 += 24 * v16;
    if ((uint64_t *)v5 != v3)
      goto LABEL_4;
    return 0;
  }
  if (v5)
  {
    v16 = *(_DWORD *)(v5 - 4);
    goto LABEL_25;
  }
LABEL_4:
  if ((uint64_t *)v5 != v3)
  {
    *v3 = -1;
    v6 = (unsigned int *)v3[2];
    v3[2] = 0;
    if (v6)
    {
      v7 = v6 + 6;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v6 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v6, v4);
        bmalloc::api::isoDeallocate(v14, v15);
      }
    }
    ++*(_DWORD *)(*a1 - 16);
    v10 = *a1;
    if (*a1)
      v11 = *(_DWORD *)(v10 - 12) - 1;
    else
      v11 = -1;
    *(_DWORD *)(v10 - 12) = v11;
    v12 = *a1;
    if (*a1)
    {
      v17 = 6 * *(_DWORD *)(v12 - 12);
      v18 = *(_DWORD *)(v12 - 4);
      if (v17 < v18 && v18 >= 9)
        WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v18 >> 1, 0);
    }
  }
  return 1;
}

uint64_t WebCore::IDBDatabase::fireVersionChangeEvent(WebCore::IDBDatabase *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18[2];

  v5 = *((_QWORD *)this + 5);
  if (v5 && *(_QWORD *)(v5 + 8) && !*((_BYTE *)this + 128))
  {
    v11 = *((_QWORD *)this + 11);
    v12 = *((_QWORD *)this + 21);
    v13 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    *(_QWORD *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 16) = 1;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 20) & 0xFFC00000 | 0x230200 | (*(_QWORD *)(v12 + 2240) != 0);
    v15 = *(_DWORD **)(v12 + 2240);
    if (v15)
      *v15 += 2;
    *(_QWORD *)(v13 + 24) = v15;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = v14;
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)v13 = off_1E3358180;
    *(_OWORD *)(v13 + 72) = *(_OWORD *)a2;
    *(_QWORD *)(v13 + 88) = v11;
    *(_BYTE *)(v13 + 96) = 0;
    *(_BYTE *)(v13 + 104) = 0;
    if (a3)
    {
      *(_QWORD *)(v13 + 96) = a3;
      *(_BYTE *)(v13 + 104) = 1;
    }
    v18[0] = v13;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 4, (uint64_t)this, 1, v18);
    result = v18[0];
    if (v18[0])
    {
      if (*(_DWORD *)(v18[0] + 16) == 1)
        return (*(uint64_t (**)(void))(*(_QWORD *)v18[0] + 8))();
      else
        --*(_DWORD *)(v18[0] + 16);
    }
  }
  else
  {
    v6 = (uint64_t *)*((_QWORD *)this + 9);
    v7 = *((_QWORD *)this + 15);
    v16 = 0;
    v17 = v7;
    v18[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::didFireVersionChangeEvent;
    v18[1] = 0;
    result = WTF::isMainThread(this);
    v9 = *v6;
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(v9 + 16))
        return (*(uint64_t (**)(_QWORD, uint64_t, const WebCore::IDBResourceIdentifier *, _QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), v7, a2, 0);
    }
    else
    {
      return WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer&>((uint64_t)v6, (unsigned int *)v9, v18, &v17, (uint64_t *)a2, &v16);
    }
  }
  return result;
}

WTF *WebCore::IDBDatabase::dispatchEvent(WebCore::IDBDatabase *this, WebCore::Event *a2)
{
  unsigned int *v4;
  unsigned int v5;
  WTF *result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  bmalloc::api *v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17[2];

  v4 = (unsigned int *)((char *)this + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::EventTarget::dispatchEvent(this, a2);
  result = (WTF *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 136))(a2);
  if ((_DWORD)result)
  {
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(*((_QWORD *)this + 21) + 2240))
    {
      v7 = (uint64_t *)*((_QWORD *)this + 9);
      v8 = *((_QWORD *)this + 15);
      v9 = (uint64_t *)((char *)a2 + 72);
      v15 = 0;
      v16 = v8;
      v17[0] = (uint64_t)WebCore::IDBClient::IDBConnectionToServer::didFireVersionChangeEvent;
      v17[1] = 0;
      result = (WTF *)WTF::isMainThread(result);
      v10 = *v7;
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(v10 + 16))
          result = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, _QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 8) + 8)
                                                                                        + 208))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8), v8, v9, 0);
      }
      else
      {
        result = (WTF *)WebCore::IDBClient::IDBConnectionProxy::postMainThreadTask<WebCore::IDBClient::IDBConnectionToServer &,void (WebCore::IDBClient::IDBConnectionToServer::*&)(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer),WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer&>((uint64_t)v7, (unsigned int *)v10, v17, &v16, v9, &v15);
      }
    }
  }
  else if (!this)
  {
    return result;
  }
  do
  {
    v11 = __ldaxr(v4);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v4));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)this + 6);
    WebCore::IDBDatabase::~IDBDatabase(this);
    return (WTF *)bmalloc::api::isoDeallocate(v13, v14);
  }
  return result;
}

uint64_t WebCore::IDBDatabase::didDeleteIndexInfo(uint64_t this, const WebCore::IDBIndexInfo *a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(uint64_t **)(this + 112);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *((_DWORD *)v4 - 2);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = &v4[9 * v10];
    v12 = *v11;
    if (*v11 != v5)
    {
      v13 = 1;
      while (v12)
      {
        v10 = (v10 + v13) & v6;
        v11 = &v4[9 * v10];
        v12 = *v11;
        ++v13;
        if (*v11 == v5)
          goto LABEL_9;
      }
      v11 = &v4[9 * *((unsigned int *)v4 - 1)];
    }
LABEL_9:
    v4 += 9 * *((unsigned int *)v4 - 1);
  }
  else
  {
    v11 = 0;
  }
  if (v11 == v4)
    v14 = 0;
  else
    v14 = v11 + 1;
  v17 = v14[7];
  v16 = v14 + 7;
  v15 = v17;
  if (!v17)
  {
    v20 = 0;
    v18 = 0;
LABEL_22:
    v19 = v15 + (v18 << 6);
    goto LABEL_23;
  }
  v18 = *(unsigned int *)(v15 - 4);
  v19 = v15 + (v18 << 6);
  if (!*(_DWORD *)(v15 - 12))
  {
    v20 = v15 + (v18 << 6);
    goto LABEL_22;
  }
  v20 = v15;
  if ((_DWORD)v18)
  {
    v21 = v18 << 6;
    v20 = v15;
    while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
    {
      v20 += 64;
      v21 -= 64;
      if (!v21)
      {
        v20 = v19;
        break;
      }
    }
  }
LABEL_23:
  if (v15)
    v22 = v15 + ((unint64_t)*(unsigned int *)(v15 - 4) << 6);
  else
    v22 = 0;
  if (v22 != v20)
  {
    while (1)
    {
      this = WTF::equal(*(WTF **)(v20 + 24), *((const WTF::StringImpl **)a2 + 2), a3);
      if ((this & 1) != 0)
        break;
      v23 = v20 + 64;
      v20 = v19;
      if (v23 != v19)
      {
        v20 = v23;
        while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
        {
          v20 += 64;
          if (v20 == v19)
          {
            v20 = v19;
            break;
          }
        }
      }
      if (v20 == v22)
        return this;
    }
    v24 = *(_QWORD *)(v20 + 8);
    return WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove(v16, (WTF::StringImpl *)&v24);
  }
  return this;
}

uint64_t WebCore::IDBDatabaseIdentifier::IDBDatabaseIdentifier(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4, char a5)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char v13;

  v8 = *a2;
  if (*a2)
    *v8 += 2;
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v9 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v9])(&v12, a1 + 8, a4);
    *(_DWORD *)(a1 + 32) = v9;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v10 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v10])(&v13);
    *(_DWORD *)(a1 + 64) = v10;
  }
  *(_BYTE *)(a1 + 72) = a5;
  return a1;
}

{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char v13;

  v8 = *a2;
  if (*a2)
    *v8 += 2;
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v9 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v9])(&v12, a1 + 8, a4);
    *(_DWORD *)(a1 + 32) = v9;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v10 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v10])(&v13);
    *(_DWORD *)(a1 + 64) = v10;
  }
  *(_BYTE *)(a1 + 72) = a5;
  return a1;
}

uint64_t WebCore::IDBDatabaseIdentifier::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  int v11;
  int v12;
  char v13;
  char *v14;
  _QWORD v15[3];
  int v16;
  _BYTE v17[24];
  int v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 40) = 0;
  v4 = a2 + 40;
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  WTF::String::isolatedCopy();
  v6 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v6 == -1)
    goto LABEL_23;
  v15[0] = &v14;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v6])(v19, v15, a1 + 8);
  LOBYTE(v15[0]) = 0;
  v16 = -1;
  v7 = v20;
  if (v20 != -1)
  {
    ((void (*)(char **, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v20])(&v14, v15, v19);
    v16 = v7;
    if (v20 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v20])(&v14, v19);
  }
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 == -1)
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
  v14 = &v13;
  ((void (*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v8])(v19, &v14, a1 + 40);
  v17[0] = 0;
  v18 = -1;
  v9 = v20;
  if (v20 != -1)
  {
    ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v20])(&v14, v17, v19);
    v18 = v9;
    if (v20 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v20])(&v14, v19);
  }
  if (v16 == -1)
  {
    *v5 = 0;
    v5[1] = 0;
    *(_DWORD *)(a2 + 32) = -1;
    v12 = v18;
    if (v18 == -1)
    {
      v11 = 0;
LABEL_15:
      result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v11])(v19, v4);
      *(_DWORD *)(a2 + 64) = -1;
      goto LABEL_18;
    }
  }
  else
  {
    v19[0] = v5;
    result = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRSI_SM_EEEDcmSO_DpOT0____fdiagonal[v16])(v19, v5, v15);
    v11 = *(_DWORD *)(a2 + 64);
    v12 = v18;
    if (v11 == -1)
    {
      if (v18 == -1)
        goto LABEL_20;
    }
    else if (v18 == -1)
    {
      goto LABEL_15;
    }
  }
  v19[0] = v4;
  result = ((uint64_t (*)(_QWORD *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRSI_SM_EEEDcmSO_DpOT0____fdiagonal[v12])(v19, v4, v17);
LABEL_18:
  if (v18 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v18])(v19, v17);
LABEL_20:
  v18 = -1;
  if (v16 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v16])(v19, v15);
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  return result;
}

void *WebCore::IDBDatabaseNameAndVersionRequest::bisoHeap(WebCore::IDBDatabaseNameAndVersionRequest *this)
{
  return &WebCore::IDBDatabaseNameAndVersionRequest::bisoHeap(void)::heap;
}

uint64_t WebCore::IDBDatabaseNameAndVersionRequest::operator new(uint64_t this)
{
  if (this == 72)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

_QWORD *WebCore::IDBDatabaseNameAndVersionRequest::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v8 = bmalloc::api::isoAllocate();
  v9 = v8;
  *(_DWORD *)(v8 + 36) = 1;
  if (!*(_BYTE *)(a1 + 274))
  {
    v10 = a1 - 192;
    v11 = *(_QWORD *)(a1 + 512);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v10 = v12;
    }
    a1 = v10 + 192;
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v9 = &off_1E33A0540;
  *(_QWORD *)(v9 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1953635F0);
  }
  v22 = v9;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v22, (uint64_t)&v21);
  *(_QWORD *)v9 = &off_1E3357608;
  v13 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(v9 + 24) = v13;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)v9 = &off_1E33573A0;
  v15 = *(unsigned int **)a2;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(v9 + 40) = a2;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(a2 + 8);
  do
  {
    v17 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v18 = v17 + 2;
  }
  while (__stlxr(v18, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *(_QWORD *)(v9 + 56) = v18;
  v19 = *a3;
  *a3 = 0;
  *(_QWORD *)(v9 + 64) = v19;
  *a4 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
}

WebCore::ContextDestructionObserver *WebCore::IDBDatabaseNameAndVersionRequest::IDBDatabaseNameAndVersionRequest(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, uint64_t a3, uint64_t *a4)
{
  WebCore::ScriptExecutionContext *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  WebCore::ContextDestructionObserver *v20;

  v6 = a2;
  *((_DWORD *)this + 9) = 1;
  if (!*((_BYTE *)a2 + 274))
  {
    v8 = (char *)a2 - 192;
    v9 = *((_QWORD *)a2 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19536374CLL);
  }
  v20 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v20, (uint64_t)&v19);
  *(_QWORD *)this = &off_1E3357608;
  v11 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 3) = v11;
  *((_BYTE *)this + 32) = 0;
  *(_QWORD *)this = &off_1E33573A0;
  v13 = *(unsigned int **)a3;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 6) = *(_QWORD *)(a3 + 8);
  do
  {
    v15 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v16 = v15 + 2;
  }
  while (__stlxr(v16, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *((_QWORD *)this + 7) = v16;
  v17 = *a4;
  *a4 = 0;
  *((_QWORD *)this + 8) = v17;
  return this;
}

{
  WebCore::ScriptExecutionContext *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  WebCore::ContextDestructionObserver *v20;

  v6 = a2;
  *((_DWORD *)this + 9) = 1;
  if (!*((_BYTE *)a2 + 274))
  {
    v8 = (char *)a2 - 192;
    v9 = *((_QWORD *)a2 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1953638A8);
  }
  v20 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v20, (uint64_t)&v19);
  *(_QWORD *)this = &off_1E3357608;
  v11 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 3) = v11;
  *((_BYTE *)this + 32) = 0;
  *(_QWORD *)this = &off_1E33573A0;
  v13 = *(unsigned int **)a3;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 6) = *(_QWORD *)(a3 + 8);
  do
  {
    v15 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v16 = v15 + 2;
  }
  while (__stlxr(v16, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *((_QWORD *)this + 7) = v16;
  v17 = *a4;
  *a4 = 0;
  *((_QWORD *)this + 8) = v17;
  return this;
}

uint64_t WebCore::IDBDatabaseNameAndVersionRequest::complete(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 64);
  *(_QWORD *)(result + 64) = 0;
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t WebCore::IDBDatabaseNameAndVersionRequest::virtualHasPendingActivity(WebCore::IDBDatabaseNameAndVersionRequest *this)
{
  return 1;
}

void WebCore::IdentityCredentialsContainer::~IdentityCredentialsContainer(WebCore::IdentityCredentialsContainer *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E3354748;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E3354748;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::IDBActiveDOMObject::contextDestroyed(WebCore::IDBActiveDOMObject *this, void *a2)
{
  unsigned __int8 *v3;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v3 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 32);
LABEL_5:
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v8 = __ldxr(v3);
  if (v8 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

void WebCore::IDBDatabaseNameAndVersionRequest::~IDBDatabaseNameAndVersionRequest(WebCore::IDBDatabaseNameAndVersionRequest *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  WebCore::IDBClient::IDBConnectionProxy *v13;
  bmalloc::api *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    v5 = *v4;
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v13 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v13)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v13, a2);
        bmalloc::api::isoDeallocate(v14, v15);
      }
      v16 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  *(_QWORD *)this = &off_1E3357608;
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::Thread::~Thread((WTF::Thread *)v8);
      WTF::fastFree(v11, v12);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;
  WTF *v13;
  void *v14;
  WebCore::IDBClient::IDBConnectionProxy *v15;
  bmalloc::api *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    v5 = *v4;
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v15 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v15)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v15, a2);
        bmalloc::api::isoDeallocate(v16, v17);
      }
      v18 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, a2);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  *(_QWORD *)this = &off_1E3357608;
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::Thread::~Thread((WTF::Thread *)v8);
      WTF::fastFree(v13, v14);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  bmalloc::api::isoDeallocate(v11, v12);
}

uint64_t WebCore::IDBDatabaseNameAndVersionRequest::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 36);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebCore::IDBDatabaseNameAndVersionRequest::deref(WebCore::IDBDatabaseNameAndVersionRequest *this, void *a2)
{
  return WTF::ThreadSafeRefCounted<WebCore::IDBDatabaseNameAndVersionRequest,(WTF::DestructionThread)0>::deref((uint64_t)this + 36, a2);
}

uint64_t WebCore::IDBCursor::isKeyCursorWithValue(WebCore::IDBCursor *this)
{
  return 0;
}

uint64_t WebCore::IDBCursorWithValue::isKeyCursorWithValue(WebCore::IDBCursorWithValue *this)
{
  return 1;
}

uint64_t WebCore::IDBDatabase::eventTargetInterface(WebCore::IDBDatabase *this)
{
  return 60;
}

uint64_t WebCore::IDBDatabase::refEventTarget(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::IDBDatabase::derefEventTarget(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  bmalloc::api *v4;
  void *v5;

  v1 = this + 6;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 6);
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)this);
    return (unsigned int *)bmalloc::api::isoDeallocate(v4, v5);
  }
  return this;
}

uint64_t WebCore::IDBDatabase::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::IDBDatabase::deref(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  bmalloc::api *v4;
  void *v5;

  v1 = this + 6;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 6);
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)this);
    return (unsigned int *)bmalloc::api::isoDeallocate(v4, v5);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::IDBDatabase::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this - 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t `non-virtual thunk to'WebCore::IDBDatabase::deref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  bmalloc::api *v4;
  void *v5;

  v1 = (unsigned int *)(this - 8);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    WebCore::IDBDatabase::~IDBDatabase((WebCore::IDBDatabase *)(this - 32));
    return bmalloc::api::isoDeallocate(v4, v5);
  }
  return this;
}

void WebCore::IDBValue::~IDBValue(WebCore::IDBValue *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v11 = 8 * v3;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v13 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    v14 = 8 * v5;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v6 = (WTF *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v16 = *(WTF **)(v7 + 8);
      if (v16)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        WTF::fastFree(v16, a2);
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  result = *a2;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (_DWORD *)((char *)result + 24);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v7])(&v8, v6 - 4);
      *v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    result = *a2;
  }
  if (result)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v5 = *(WTF **)(v2 + 8);
      if (v5)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v5, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int **)(v2 + 152);
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14IDBObjectStoreENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_8IDBIndexENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int **)(*(_QWORD *)(v2 + 144) + 152);
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)(32 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)a3 + 32 * v7;
        v9 = (_DWORD *)(v6 + 24);
        v10 = *(_QWORD *)a3 + 8;
        do
        {
          v11 = v10 - 8;
          *((_BYTE *)v9 - 24) = *(_BYTE *)(v10 - 8);
          *((_BYTE *)v9 - 16) = 0;
          *v9 = -1;
          v12 = *(unsigned int *)(v10 + 16);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v12])(&v13, v9 - 4, v10);
            *v9 = v12;
          }
          v9 += 8;
          v10 += 32;
        }
        while (v11 + 32 != v8);
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int v4;

  v3 = *a3;
  if (*a3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(*a1, a2, a3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 16) = 3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  unsigned int *v12;
  unsigned int v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      v6 = *a3;
      if (*a3)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
      v8 = *a2;
      *a2 = v6;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v11 = (WTF *)*((_QWORD *)v8 + 1);
          if (v11)
          {
            *((_QWORD *)v8 + 1) = 0;
            v8[4] = 0;
            WTF::fastFree(v11, a2);
          }
          return WTF::fastFree((WTF *)v8, a2);
        }
      }
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v14, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v12 = *a3;
  if (*a3)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *(_QWORD *)v4 = v12;
  *(_DWORD *)(v4 + 16) = 6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 7)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 8)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 8;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = result;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
      return WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v13, result);
  }
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  *(_DWORD *)(v4 + 16) = -1;
  if (!(_DWORD)v6)
    goto LABEL_12;
  if (!(v6 >> 27))
  {
    result = WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a3 + 32 * v7;
      v9 = (_DWORD *)(result + 24);
      v10 = *(_QWORD *)a3 + 8;
      do
      {
        v11 = v10 - 8;
        *((_BYTE *)v9 - 24) = *(_BYTE *)(v10 - 8);
        *((_BYTE *)v9 - 16) = 0;
        *v9 = -1;
        v12 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v12 != -1)
        {
          result = ((uint64_t (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v12])(&v14, v9 - 4, v10);
          *v9 = v12;
        }
        v9 += 8;
        v10 += 32;
      }
      while (v11 + 32 != v8);
    }
LABEL_12:
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  char v30;
  _DWORD *v31;
  char v32;
  char v33;

  if (a2 == (unsigned int *)a1)
    return a1;
  v4 = *(unsigned int *)(a1 + 12);
  v5 = a2[3];
  if (v4 <= v5)
  {
    v9 = *(_DWORD *)(a1 + 8);
    if (v5 <= v9)
    {
      v5 = *(unsigned int *)(a1 + 12);
      goto LABEL_21;
    }
    if (v9)
    {
      v10 = *(WTF **)a1;
      if ((_DWORD)v4)
      {
        v11 = 32 * v4;
        v12 = (_DWORD *)((char *)v10 + 24);
        do
        {
          v13 = *v12;
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v13])(&v30, v12 - 4);
          *v12 = -1;
          v12 += 8;
          v11 -= 32;
        }
        while (v11);
        *(_DWORD *)(a1 + 12) = 0;
        v10 = *(WTF **)a1;
      }
      if (v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v10, a2);
      }
    }
    WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
    v5 = *(unsigned int *)(a1 + 12);
  }
  else
  {
    v6 = 32 * v4 - 32 * v5;
    v7 = (_DWORD *)(*(_QWORD *)a1 + 32 * v5 + 24);
    do
    {
      v8 = *v7;
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v8])(&v29, v7 - 4);
      *v7 = -1;
      v7 += 8;
      v6 -= 32;
    }
    while (v6);
    *(_DWORD *)(a1 + 12) = v5;
  }
  LODWORD(v4) = v5;
LABEL_21:
  v14 = *(_QWORD *)a2;
  v15 = *(WTF **)a1;
  if (!(_DWORD)v4)
    goto LABEL_30;
  v16 = v14 + 32 * v5;
  v17 = (_DWORD *)((char *)v15 + 24);
  v18 = v14 + 8;
  do
  {
    v19 = v18 - 8;
    *((_BYTE *)v17 - 24) = *(_BYTE *)(v18 - 8);
    v20 = *v17;
    v21 = *(unsigned int *)(v18 + 16);
    if ((_DWORD)v20 == -1)
    {
      if ((_DWORD)v21 == -1)
        goto LABEL_28;
    }
    else if ((_DWORD)v21 == -1)
    {
      ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v20])(&v32, v17 - 4);
      *v17 = -1;
      goto LABEL_28;
    }
    v31 = v17 - 4;
    ((void (*)(_DWORD **))off_1E33574A8[v21])(&v31);
LABEL_28:
    v17 += 8;
    v18 += 32;
  }
  while (v19 + 32 != v16);
  v14 = *(_QWORD *)a2;
  LODWORD(v4) = *(_DWORD *)(a1 + 12);
  v15 = *(WTF **)a1;
LABEL_30:
  v22 = a2[3];
  if ((_DWORD)v4 != (_DWORD)v22)
  {
    v23 = v14 + 32 * v22;
    v24 = (_DWORD *)((char *)v15 + 32 * v4 + 24);
    v25 = v14 + 32 * v4 + 8;
    do
    {
      v26 = v25 - 8;
      *((_BYTE *)v24 - 24) = *(_BYTE *)(v25 - 8);
      *((_BYTE *)v24 - 16) = 0;
      *v24 = -1;
      v27 = *(unsigned int *)(v25 + 16);
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v27])(&v33, v24 - 4, v25);
        *v24 = v27;
      }
      v24 += 8;
      v25 += 32;
    }
    while (v26 + 32 != v23);
    LODWORD(v4) = a2[3];
  }
  *(_DWORD *)(a1 + 12) = v4;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 27))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_DWORD *)(v6 + 24);
      v9 = (_DWORD *)((char *)v4 + 24);
      v10 = 32 * v5;
      do
      {
        *((_BYTE *)v8 - 24) = *((_BYTE *)v9 - 24);
        *((_BYTE *)v8 - 16) = 0;
        v7 = v8 - 4;
        *v8 = -1;
        v11 = *v9;
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, _DWORD *, _DWORD *))off_1E33574F0[v11])(&v13, v7, v9 - 4);
          *v8 = v11;
          v12 = *v9;
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v14, v9 - 4);
        }
        *v9 = -1;
        v9 += 8;
        v8 += 8;
        v10 -= 32;
      }
      while (v10);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEERKSU_EEEDcSM_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E33573E8[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 16) = 0;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEERKSU_EEEDcSM_DpT0_(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E33573E8[v5])(&v11, v4);
  }
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  *(_DWORD *)(v4 + 16) = -1;
  if (!(_DWORD)v6)
    goto LABEL_6;
  if (!(v6 >> 29))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD ***)a3;
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          *v10 += 2;
        *(_QWORD *)result = v10;
        result += 2;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_6:
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::IDBGetResult::IDBGetResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char v15;
  char v16;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  v7 = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 64) = -1;
  v8 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *))off_1E33574F0[v8])(&v14);
    *(_DWORD *)(a1 + 64) = v8;
  }
  v9 = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 96) = -1;
  v10 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(char *))off_1E33574F0[v10])(&v15);
    *(_DWORD *)(a1 + 96) = v10;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    *(_DWORD *)(a1 + 120) = -1;
    v11 = *((unsigned int *)a2 + 30);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *))off_1E3357558[v11])(&v16);
      *(_DWORD *)(a1 + 120) = v11;
    }
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v12 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 136) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v12;
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  return a1;
}

void WebCore::IDBGetResult::~IDBGetResult(WebCore::IDBGetResult *this, WTF::StringImpl *a2)
{
  unsigned int v3;
  uint64_t v4;
  WebCore::IDBValue *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = *((_DWORD *)this + 37);
  if (v3)
  {
    v4 = 104 * v3;
    v5 = (WebCore::IDBValue *)(*((_QWORD *)this + 17) + 64);
    do
    {
      WebCore::IDBValue::~IDBValue(v5, a2);
      v6 = *((unsigned int *)v5 - 2);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v6])(&v12, (char *)v5 - 24);
      *((_DWORD *)v5 - 2) = -1;
      v7 = *((unsigned int *)v5 - 10);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v7])(&v13, (char *)v5 - 56);
      *((_DWORD *)v5 - 10) = -1;
      v5 = (WebCore::IDBValue *)((char *)v5 + 104);
      v4 -= 104;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 17);
  if (v8)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v8, a2);
  }
  if (*((_BYTE *)this + 128))
  {
    v9 = *((unsigned int *)this + 30);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, char *))off_1E33573E8[v9])(&v14, (char *)this + 104);
    *((_DWORD *)this + 30) = -1;
  }
  v10 = *((unsigned int *)this + 24);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v15, (char *)this + 80);
  *((_DWORD *)this + 24) = -1;
  v11 = *((unsigned int *)this + 16);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v11])(&v16, (char *)this + 48);
  *((_DWORD *)this + 16) = -1;
  WebCore::IDBValue::~IDBValue(this, a2);
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(72 * v11 + 16));
  v13 = (_QWORD *)(v12 + 80);
  v14 = v11;
  do
  {
    *((_BYTE *)v13 - 16) = 0;
    *((_BYTE *)v13 - 8) = 0;
    *v13 = 0;
    *(v13 - 7) = 0;
    *(v13 - 6) = 0;
    *(v13 - 8) = 0;
    *((_BYTE *)v13 - 40) = 0;
    v13 += 9;
    --v14;
  }
  while (v14);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v15 = (_QWORD *)*a2;
  if (*a2)
  {
    v16 = *((unsigned int *)v15 - 1);
    v17 = &v15[9 * v16];
    if (*((_DWORD *)v15 - 3))
    {
      v18 = v15;
      if ((_DWORD)v16)
      {
        v19 = 72 * v16;
        v18 = v15;
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          v18 += 9;
          v19 -= 72;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_26;
          }
        }
      }
      goto LABEL_26;
    }
    v18 = &v15[9 * v16];
  }
  else
  {
    v18 = 0;
    LODWORD(v16) = 0;
  }
  v17 = &v15[9 * v16];
LABEL_26:
  if (v15)
    v20 = &v15[9 * *((unsigned int *)v15 - 1)];
  else
    v20 = 0;
  while (v18 != v20)
  {
    v21 = *a1;
    if (*a1)
      v22 = *(_DWORD *)(v21 - 8);
    else
      v22 = 0;
    v23 = *v18 + ~(*v18 << 32);
    v24 = (v23 ^ (v23 >> 22)) + ~((v23 ^ (v23 >> 22)) << 13);
    v25 = (9 * (v24 ^ (v24 >> 8))) ^ ((9 * (v24 ^ (v24 >> 8))) >> 15);
    v26 = v22 & (((v25 + ~(v25 << 27)) >> 31) ^ (v25 + ~((_DWORD)v25 << 27)));
    v27 = 1;
    do
    {
      v28 = v26;
      v29 = (_QWORD *)(v21 + 72 * v26);
      v26 = (v26 + v27++) & v22;
    }
    while (*v29);
    *v29 = *v18;
    WebCore::IDBObjectStoreInfo::operator=(v21 + 72 * v28 + 8, (uint64_t)(v18 + 1));
    v30 = v18 + 9;
    v18 = v17;
    if (v30 != v17)
    {
      v18 = v30;
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        v18 += 9;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WebCore::IDBObjectStoreInfo::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v4 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1 + 16;
  v7 = a2 + 16;
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v8 = *(unsigned int *)(a1 + 32);
      v9 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v8 == -1)
      {
        if ((_DWORD)v9 == -1)
          goto LABEL_20;
      }
      else if ((_DWORD)v9 == -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E33573E8[v8])(&v14, v6, v7);
        *(_DWORD *)(a1 + 32) = -1;
        goto LABEL_20;
      }
      v13 = a1 + 16;
      ((void (*)(uint64_t *))off_1E3357538[v9])(&v13);
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    v10 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v10 != -1)
      ((void (*)(char *, uint64_t, uint64_t))off_1E33573E8[v10])(&v15, v6, v7);
    *(_DWORD *)(a1 + 32) = -1;
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 32) = -1;
    v11 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3357548[v11])(&v16, v6, v7);
      *(_DWORD *)(a1 + 32) = v11;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
LABEL_20:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::operator=((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  return a1;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  char v11;

  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable(&v10, a2);
  v4 = *a1;
  *a1 = v10;
  v10 = v4;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = v4 + 24;
      do
      {
        if (*(_QWORD *)(v6 - 24) != -1)
        {
          v7 = *(unsigned int *)(v6 + 24);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t))off_1E33573E8[v7])(&v11, v6 + 8);
          *(_DWORD *)(v6 + 24) = -1;
          v8 = *(WTF::StringImpl **)v6;
          *(_QWORD *)v6 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v3);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v6 += 64;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v42;
  char v43;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)((v11 << 6) | 0x10));
  v14 = v12 + 73;
  v15 = v11;
  do
  {
    *(_DWORD *)(v14 - 9) = 0;
    *(_OWORD *)(v14 - 57) = 0uLL;
    *(_OWORD *)(v14 - 41) = 0uLL;
    *(_QWORD *)(v14 - 25) = 0;
    *(_WORD *)(v14 - 1) = 1;
    v14 += 64;
    --v15;
  }
  while (v15);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v16 = *a2;
  if (!*a2)
  {
    v19 = 0;
    v17 = 0;
LABEL_25:
    v18 = v16 + (v17 << 6);
    goto LABEL_26;
  }
  v17 = *(unsigned int *)(v16 - 4);
  v18 = v16 + (v17 << 6);
  if (!*(_DWORD *)(v16 - 12))
  {
    v19 = v16 + (v17 << 6);
    goto LABEL_25;
  }
  v19 = v16;
  if ((_DWORD)v17)
  {
    v20 = v17 << 6;
    v19 = v16;
    while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
    {
      v19 += 64;
      v20 -= 64;
      if (!v20)
      {
        v19 = v18;
        break;
      }
    }
  }
LABEL_26:
  if (v16)
    v21 = v16 + ((unint64_t)*(unsigned int *)(v16 - 4) << 6);
  else
    v21 = 0;
  while (v19 != v21)
  {
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 8);
    else
      v23 = 0;
    v24 = *(_QWORD *)v19 + ~(*(_QWORD *)v19 << 32);
    v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
    v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
    v27 = v23 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~((_DWORD)v26 << 27)));
    v28 = 1;
    do
    {
      v29 = v27;
      v30 = *(_QWORD *)(v22 + ((unint64_t)v27 << 6));
      v27 = (v27 + v28++) & v23;
    }
    while (v30);
    v31 = v29;
    v32 = v22 + ((unint64_t)v29 << 6);
    *(_QWORD *)v32 = *(_QWORD *)v19;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)(v19 + 8);
    v33 = *(_DWORD **)(v19 + 24);
    if (v33)
      *v33 += 2;
    v34 = *(WTF::StringImpl **)(v32 + 24);
    *(_QWORD *)(v32 + 24) = v33;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v13);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v22 + (v31 << 6);
    v38 = *(_DWORD *)(v35 + 48);
    v37 = (_DWORD *)(v35 + 48);
    v36 = v38;
    v13 = (WTF::StringImpl *)(v37 - 4);
    v39 = *(unsigned int *)(v19 + 48);
    if (v38 == -1)
    {
      if ((_DWORD)v39 != -1)
      {
LABEL_44:
        v42 = v37 - 4;
        ((void (*)(_DWORD **))off_1E3357538[v39])(&v42);
      }
    }
    else
    {
      if ((_DWORD)v39 != -1)
        goto LABEL_44;
      ((void (*)(char *, WTF::StringImpl *))off_1E33573E8[v36])(&v43, v13);
      *v37 = -1;
    }
    *(_WORD *)(v22 + (v31 << 6) + 56) = *(_WORD *)(v19 + 56);
    v40 = v19 + 64;
    v19 = v18;
    if (v40 != v18)
    {
      v19 = v40;
      while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
      {
        v19 += 64;
        if (v19 == v18)
        {
          v19 = v18;
          break;
        }
      }
    }
  }
  return a1;
}

void WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(WebCore::IDBObjectStoreInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 24;
      do
      {
        if (*(_QWORD *)(v5 - 24) != -1)
        {
          v6 = *(unsigned int *)(v5 + 24);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_1E33573E8[v6])(&v10, v5 + 8);
          *(_DWORD *)(v5 + 24) = -1;
          v7 = *(WTF::StringImpl **)v5;
          *(_QWORD *)v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v5 += 64;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v8 = *((unsigned int *)this + 8);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, char *))off_1E33573E8[v8])(&v11, (char *)this + 16);
    *((_DWORD *)this + 8) = -1;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

void WebCore::IDBTransactionInfo::~IDBTransactionInfo(WebCore::IDBTransactionInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::IDBObjectStoreInfo *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3[4];
    if (v4)
    {
      v5 = *((unsigned int *)v4 - 1);
      if ((_DWORD)v5)
      {
        v6 = (WTF::StringImpl *)((char *)v4 + 8);
        do
        {
          if (*((_QWORD *)v6 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v6, a2);
          v6 = (WebCore::IDBObjectStoreInfo *)((char *)v6 + 72);
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v4 - 16), a2);
    }
    v7 = *v3;
    *v3 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
  }
  v8 = *((unsigned int *)this + 11);
  if ((_DWORD)v8)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v11 = 8 * v8;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v9 = (WTF *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2);
  }
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::IDBDatabaseNameAndVersionRequest,(WTF::DestructionThread)0>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  bmalloc::api *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WebCore::IDBClient::IDBConnectionProxy *v17;
  bmalloc::api *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v23;

  v2 = result;
  do
  {
    v3 = __ldaxr((unsigned int *)result);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)result));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)result);
    v5 = *(_QWORD *)(result + 28);
    *(_QWORD *)(v2 + 28) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(uint64_t **)(v2 + 4);
    *(_QWORD *)(v2 + 4) = 0;
    if (v6)
    {
      v7 = *v6;
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v17 = *(WebCore::IDBClient::IDBConnectionProxy **)(v7 + 24);
        v23 = (bmalloc::api *)v7;
        *(_QWORD *)(v7 + 24) = 0;
        if (v17)
        {
          WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v17, a2);
          bmalloc::api::isoDeallocate(v18, v19);
        }
        v20 = (unsigned int *)*((_QWORD *)v23 + 1);
        *((_QWORD *)v23 + 1) = 0;
        if (v20)
        {
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, a2);
          }
        }
        bmalloc::api::isoDeallocate(v23, a2);
      }
    }
    *(_QWORD *)(v2 - 36) = &off_1E3357608;
    v10 = *(unsigned int **)(v2 - 12);
    *(_QWORD *)(v2 - 12) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::Thread::~Thread((WTF::Thread *)v10);
        WTF::fastFree(v15, v16);
      }
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v2 - 36), a2);
    return bmalloc::api::isoDeallocate(v13, v14);
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::BasicCredential>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  int v17;
  _BYTE v18[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v18, v7);
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    {
      v9 = 0;
      if (a2)
        goto LABEL_10;
    }
    else
    {
      v9 = *(_QWORD *)v8;
      if (a2)
      {
LABEL_10:
        v10 = WebCore::wrap<WebCore::BasicCredential>((uint64_t)v6, v9, a2);
LABEL_14:
        v11 = *(_QWORD *)(v7 + 16);
        if (!v11)
        {
          WebCore::DeferredPromise::callFunction(v4, v6, 0, (objc_class *)v10);
          v11 = *(_QWORD *)(v7 + 16);
          if (!v11)
            return MEMORY[0x19AEA32A0](v18);
        }
        v12 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
        if (!(*(unsigned int (**)(_QWORD *))(*v12 + 64))(v12))
        {
LABEL_19:
          WebCore::reportException((JSC::JSGlobalObject *)v6, v11, 0, 0, 0);
          return MEMORY[0x19AEA32A0](v18);
        }
        v13 = v12[43];
        if (*(_QWORD *)(v7 + 24) == v11)
        {
LABEL_32:
          *(_BYTE *)(*(_QWORD *)(v13 + 8) + 93442) = 1;
          *(_BYTE *)(v4 + 44) = 1;
          goto LABEL_19;
        }
        if (!v13)
          goto LABEL_19;
        v14 = (unsigned __int8 *)(v13 + 40);
        if (__ldaxr((unsigned __int8 *)(v13 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v14))
        {
          goto LABEL_26;
        }
        MEMORY[0x19AEA534C](v13 + 40);
LABEL_26:
        v16 = *(unsigned __int8 *)(v13 + 41);
        v17 = __ldxr(v14);
        if (v17 == 1)
        {
          if (!__stlxr(0, v14))
          {
LABEL_31:
            if (!v16)
              goto LABEL_19;
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 40));
        goto LABEL_31;
      }
    }
    v10 = 2;
    goto LABEL_14;
  }
  return result;
}

void WTF::Deque<WebCore::IDBCursorRecord,0ul>::destroyAll(unint64_t *a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  WebCore::IDBValue *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  if (*a1 <= v3)
  {
    if (*a1 != v3)
    {
      v16 = 104 * v2;
      v17 = 104 * v3;
      do
      {
        v18 = v4 + v16;
        WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v4 + v16 + 64), a2);
        v19 = *(unsigned int *)(v4 + v16 + 56);
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v19])(&v21, v18 + 40);
        *(_DWORD *)(v18 + 56) = -1;
        v20 = *(unsigned int *)(v18 + 24);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v20])(&v22, v4 + v16 + 8);
        *(_DWORD *)(v18 + 24) = -1;
        v17 -= 104;
        v4 += 104;
      }
      while (v16 != v17);
    }
  }
  else
  {
    if (v3)
    {
      v6 = 104 * v3;
      v7 = (WebCore::IDBValue *)(v4 + 64);
      do
      {
        WebCore::IDBValue::~IDBValue(v7, a2);
        v8 = *((unsigned int *)v7 - 2);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v8])(&v23, (char *)v7 - 24);
        *((_DWORD *)v7 - 2) = -1;
        v9 = *((unsigned int *)v7 - 10);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v9])(&v24, (char *)v7 - 56);
        *((_DWORD *)v7 - 10) = -1;
        v7 = (WebCore::IDBValue *)((char *)v7 + 104);
        v6 -= 104;
      }
      while (v6);
      v4 = a1[2];
      v2 = *a1;
    }
    v10 = *((unsigned int *)a1 + 6);
    if (v2 != v10)
    {
      v11 = 104 * v2;
      v12 = 104 * v10;
      do
      {
        v13 = v4 + v11;
        WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v4 + v11 + 64), a2);
        v14 = *(unsigned int *)(v4 + v11 + 56);
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v14])(&v25, v13 + 40);
        *(_DWORD *)(v13 + 56) = -1;
        v15 = *(unsigned int *)(v13 + 24);
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&v26, v4 + v11 + 8);
        *(_DWORD *)(v13 + 24) = -1;
        v12 -= 104;
        v4 += 104;
      }
      while (v11 != v12);
    }
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBCursor::sourcesDeleted(void)::$_0,WebCore::IDBCursor::sourcesDeleted(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 160);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBCursor::sourcesDeleted(void)::$_0,WebCore::IDBCursor::sourcesDeleted(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(*(_QWORD *)a2 + 136) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 144) + 160) != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBCursor::effectiveObjectStore(void)::$_0,WebCore::IDBCursor::effectiveObjectStore(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBCursor::effectiveObjectStore(void)::$_0,WebCore::IDBCursor::effectiveObjectStore(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBIndex,WebCore::IDBObjectStore<WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBObjectStore,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 144);
}

uint64_t WebCore::IDBCursorRecord::IDBCursorRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  char v22;
  char v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v4])(&v22, a1 + 8, a2 + 8);
    *(_DWORD *)(a1 + 24) = v4;
  }
  v5 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v6])(&v23);
    *(_DWORD *)(a1 + 56) = v6;
  }
  v7 = *(unsigned int **)(a2 + 64);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = *(unsigned int *)(a2 + 84);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 84) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195366078);
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 72) = v12;
    v13 = *(unsigned int *)(a2 + 84);
    if ((_DWORD)v13)
    {
      v14 = *(_DWORD ***)(a2 + 72);
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        if (*v14)
          *v16 += 2;
        *v12++ = v16;
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  v10 = *(unsigned int *)(a2 + 100);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195366080);
    }
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
    *(_DWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 88) = v17;
    v18 = *(unsigned int *)(a2 + 100);
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD ***)(a2 + 88);
      v20 = 8 * v18;
      do
      {
        v21 = *v19;
        if (*v19)
          *v21 += 2;
        *v17++ = v21;
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
  }
  return a1;
}

void WTF::VectorMover<false,WebCore::IDBCursorRecord>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = v3;
    v25 = v4;
    v8 = 0;
    do
    {
      v9 = a1 + v8;
      v10 = a3 + v8;
      *(_BYTE *)v10 = *(_BYTE *)(a1 + v8);
      *(_BYTE *)(a3 + v8 + 8) = 0;
      *(_DWORD *)(v10 + 24) = -1;
      v11 = *(unsigned int *)(a1 + v8 + 24);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E33574F0[v11])(&v20, a3 + v8 + 8, v9 + 8);
        *(_DWORD *)(v10 + 24) = v11;
      }
      *(_BYTE *)(v10 + 32) = *(_BYTE *)(v9 + 32);
      *(_BYTE *)(v10 + 40) = 0;
      v12 = (WTF::StringImpl *)(v10 + 40);
      *(_DWORD *)(v10 + 56) = -1;
      v13 = *(unsigned int *)(v9 + 56);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E33574F0[v13])(&v21, v12, a1 + v8 + 40);
        *(_DWORD *)(v10 + 56) = v13;
      }
      v14 = a3 + v8;
      v15 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v14 + 72) = 0;
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 64) = v15;
      v16 = *(_QWORD *)(v9 + 72);
      *(_QWORD *)(v9 + 72) = 0;
      *(_QWORD *)(v14 + 72) = v16;
      LODWORD(v16) = *(_DWORD *)(v9 + 80);
      *(_DWORD *)(v9 + 80) = 0;
      *(_DWORD *)(v14 + 80) = v16;
      LODWORD(v16) = *(_DWORD *)(v9 + 84);
      *(_DWORD *)(v9 + 84) = 0;
      *(_DWORD *)(v14 + 84) = v16;
      *(_QWORD *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 96) = 0;
      v17 = *(_QWORD *)(v9 + 88);
      *(_QWORD *)(v9 + 88) = 0;
      *(_QWORD *)(v14 + 88) = v17;
      LODWORD(v17) = *(_DWORD *)(v9 + 96);
      *(_DWORD *)(v9 + 96) = 0;
      *(_DWORD *)(v14 + 96) = v17;
      LODWORD(v17) = *(_DWORD *)(v9 + 100);
      *(_DWORD *)(v9 + 100) = 0;
      *(_DWORD *)(v14 + 100) = v17;
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + v8 + 64), v12);
      v18 = *(unsigned int *)(v9 + 56);
      if ((_DWORD)v18 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v18])(&v22, a1 + v8 + 40);
      *(_DWORD *)(v9 + 56) = -1;
      v19 = *(unsigned int *)(v9 + 24);
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v19])(&v23, a1 + v8 + 8);
      *(_DWORD *)(v9 + 24) = -1;
      v8 += 104;
    }
    while (v9 + 104 != a2);
  }
}

unsigned int *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBTransaction*>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *result;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  bmalloc::api *v47;
  void *v48;
  bmalloc::api *v49;
  void *v50;

  v5 = a2;
  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *((_QWORD *)v5 + 1);
  v12 = (*(_QWORD *)v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)v5 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)v5 - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*(_QWORD *)v5) + (v12 >> 11);
  v14 = (*(_QWORD *)v5 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unsigned int *)(v8 + 24 * (v19 & v10));
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v22 == -1)
      {
        v24 = v21;
      }
      else if (v22 == *(_QWORD *)v5 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v40 = 0;
        else
          v40 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v21;
        *(_QWORD *)(a4 + 8) = v8 + 24 * v40;
        *(_BYTE *)(a4 + 16) = 0;
        v41 = *a3;
        if (*a3)
        {
          v42 = (unsigned int *)(v41 + 24);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
        result = (unsigned int *)*((_QWORD *)v21 + 2);
        *((_QWORD *)v21 + 2) = v41;
        if (result)
        {
          v44 = result + 6;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, result + 6);
            WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
            return (unsigned int *)bmalloc::api::isoDeallocate(v47, v48);
          }
        }
        return result;
      }
      v20 = (v20 + v25) & v10;
      v21 = (unsigned int *)(v8 + 24 * v20);
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      ++v25;
      a2 = (WTF::StringImpl *)(v23 | *(_QWORD *)v21);
    }
    while (a2);
    if (v24)
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)v5;
  v26 = *a3;
  if (*a3)
  {
    v27 = (unsigned int *)(v26 + 24);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  result = (unsigned int *)*((_QWORD *)v21 + 2);
  *((_QWORD *)v21 + 2) = v26;
  if (result)
  {
    v30 = result + 6;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v49, v50);
    }
  }
  v33 = *a1;
  if (*a1)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *a1;
  if (*a1)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
      goto LABEL_31;
  }
  else if (3 * v38 <= 4 * v37)
  {
    if (!(_DWORD)v38)
    {
      v39 = 8;
LABEL_44:
      result = (unsigned int *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v39, v21);
      v21 = result;
      v35 = *a1;
      if (*a1)
        LODWORD(v38) = *(_DWORD *)(v35 - 4);
      else
        LODWORD(v38) = 0;
      goto LABEL_46;
    }
LABEL_31:
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
    goto LABEL_44;
  }
LABEL_46:
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v35 + 24 * v38;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  bmalloc::api *v32;
  void *v33;
  bmalloc::api *v34;
  void *v35;
  bmalloc::api *v36;
  void *v37;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_OWORD *)(v6 + 24 * v13);
      if (*(_QWORD *)v15 != -1)
      {
        if (*v15 == 0)
        {
          v27 = v6 + 24 * v13;
          v28 = *(unsigned int **)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          if (v28)
          {
            v29 = v28 + 6;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v28 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v28, v10);
              bmalloc::api::isoDeallocate(v36, v37);
            }
          }
        }
        else
        {
          v16 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookupForReinsert(a1, (_QWORD *)(v6 + 24 * v13));
          v17 = (unsigned int *)*((_QWORD *)v16 + 2);
          *((_QWORD *)v16 + 2) = 0;
          if (v17)
          {
            v18 = v17 + 6;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v17 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v17, v10);
              bmalloc::api::isoDeallocate(v32, v33);
            }
          }
          *v16 = *v15;
          v21 = v6 + 24 * v13;
          v22 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          *((_QWORD *)v16 + 2) = v22;
          v23 = *(unsigned int **)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          if (v23)
          {
            v24 = v23 + 6;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v23 + 6);
              WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v23, v10);
              bmalloc::api::isoDeallocate(v34, v35);
            }
          }
          if (v15 == a3)
            v14 = v16;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  _OWORD *result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = a2[1];
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v7 = v6 + (unsigned __int16)WORD2(*a2);
  v8 = (*a2 >> 37) & 0x7FFF800 ^ ((v7 + (v6 >> 11)) << 16) ^ (v7 + (v6 >> 11));
  v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v5
                                                                                               + (v8 >> 11));
  v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (v13)
    v14 = v13;
  else
    v14 = 0x800000;
  do
  {
    v15 = v14 & v3;
    result = (_OWORD *)(v2 + 24 * v15);
    v14 = ++v4 + v15;
  }
  while (*result != 0);
  return result;
}

uint64_t *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = a2[1];
  v5 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v6 = v5 + (unsigned __int16)WORD2(*a2) + (v5 >> 11);
  v7 = (*a2 >> 37) & 0x7FFF800 ^ (v6 << 16) ^ v6;
  v8 = (v4 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v4 + (v7 >> 11)) << 16) ^ (v7
                                                                                               + (unsigned __int16)v4
                                                                                               + (v7 >> 11));
  v9 = (v4 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v4) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v4) + (v8 >> 11));
  v10 = (v9 + (v9 >> 11)) ^ (8 * (v9 + (v9 >> 11)));
  v11 = (v10 + (v10 >> 5)) ^ (4 * (v10 + (v10 >> 5)));
  v12 = (v11 + (v11 >> 15)) ^ ((v11 + (v11 >> 15)) << 10);
  if (!v12)
    v12 = 0x800000;
  v13 = v12 & v3;
  result = (uint64_t *)(v2 + 24 * (v12 & v3));
  v16 = *result;
  v15 = result[1];
  if (*(_OWORD *)result == 0)
    return 0;
  v17 = 1;
  while (v16 == -1 || v16 != *a2 || v15 != v4)
  {
    v13 = (v13 + v17) & v3;
    result = (uint64_t *)(v2 + 24 * v13);
    v16 = *result;
    v15 = result[1];
    ++v17;
    if (*(_OWORD *)result == 0)
      return 0;
  }
  return result;
}

unsigned int *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  unsigned int *result;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  bmalloc::api *v43;
  void *v44;
  bmalloc::api *v45;
  void *v46;

  v5 = a2;
  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *((_QWORD *)v5 + 1);
  v12 = (*(_QWORD *)v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)v5 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)v5 - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*(_QWORD *)v5) + (v12 >> 11);
  v14 = (*(_QWORD *)v5 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unsigned int *)(v8 + 24 * (v19 & v10));
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v22 == -1)
      {
        v24 = v21;
      }
      else if (v22 == *(_QWORD *)v5 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v38 = 0;
        else
          v38 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v21;
        *(_QWORD *)(a4 + 8) = v8 + 24 * v38;
        *(_BYTE *)(a4 + 16) = 0;
        v39 = *a3;
        *a3 = 0;
        result = (unsigned int *)*((_QWORD *)v21 + 2);
        *((_QWORD *)v21 + 2) = v39;
        if (result)
        {
          v40 = result + 6;
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, result + 6);
            WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
            return (unsigned int *)bmalloc::api::isoDeallocate(v43, v44);
          }
        }
        return result;
      }
      v20 = (v20 + v25) & v10;
      v21 = (unsigned int *)(v8 + 24 * v20);
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      ++v25;
      a2 = (WTF::StringImpl *)(v23 | *(_QWORD *)v21);
    }
    while (a2);
    if (v24)
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)v5;
  v26 = *a3;
  *a3 = 0;
  result = (unsigned int *)*((_QWORD *)v21 + 2);
  *((_QWORD *)v21 + 2) = v26;
  if (result)
  {
    v28 = result + 6;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v45, v46);
    }
  }
  v31 = *a1;
  if (*a1)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v33 = *a1;
  if (*a1)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
      goto LABEL_28;
  }
  else if (3 * v36 <= 4 * v35)
  {
    if (!(_DWORD)v36)
    {
      v37 = 8;
LABEL_38:
      result = (unsigned int *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v37, v21);
      v21 = result;
      v33 = *a1;
      if (*a1)
        LODWORD(v36) = *(_DWORD *)(v33 - 4);
      else
        LODWORD(v36) = 0;
      goto LABEL_40;
    }
LABEL_28:
    v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
    goto LABEL_38;
  }
LABEL_40:
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v33 + 24 * v36;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

WTF::StringImpl *WebCore::IDBFactory::openInternal@<X0>(WebCore::IDBClient::IDBConnectionProxy **this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::StringImpl **a3@<X2>, WebCore::IDBDatabaseIdentifier *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  const WebCore::SecurityOrigin *v12;
  int v13;
  WebCore::SecurityOrigin *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  const WebCore::SecurityOrigin *v17;
  WebCore::SecurityOrigin *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *result;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::IDBDatabaseIdentifier *v33;
  char v34;
  _BYTE v35[24];
  int v36;
  _BYTE v37[24];
  int v38;
  WTF::StringImpl *v39;
  _BYTE v40[24];
  int v41;
  _BYTE v42[24];
  int v43;
  BOOL v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!*a3)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29 = 33;
LABEL_36:
    *(_BYTE *)a5 = v29;
    *(_DWORD *)(a5 + 16) = 1;
    return result;
  }
  if (!*((_BYTE *)a2 + 274)
    && ((v30 = *((_QWORD *)a2 + 42)) == 0
     || (v31 = *(_QWORD *)(v30 + 8)) == 0
     || (v32 = *(_QWORD *)(v31 + 24)) == 0
     || !*(_QWORD *)(v32 + 8))
    || (WebCore::SecurityContext::securityOrigin(a2, a2), !v10)
    || (v12 = (const WebCore::SecurityOrigin *)v10, *(_DWORD *)(v10 + 32) == 1)
    || *(_BYTE *)(v10 + 63) && !*(_BYTE *)(v10 + 60) && !*(_BYTE *)(v10 + 56))
  {
LABEL_35:
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29 = 14;
    goto LABEL_36;
  }
  v13 = *((unsigned __int8 *)a2 + 272);
  if (v13 != 1)
  {
    if (v13 != 2)
      goto LABEL_8;
    goto LABEL_35;
  }
  v14 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  WebCore::SecurityOrigin::isSameOriginAs(v14, v12);
LABEL_8:
  WebCore::SecurityContext::securityOrigin(a2, v11);
  v33 = a4;
  v19 = 0;
  if (v15)
  {
    v17 = (const WebCore::SecurityOrigin *)v15;
    if (*(_DWORD *)(v15 + 32) != 1
      && (!*(_BYTE *)(v15 + 63) || *(_BYTE *)(v15 + 60) || *(_BYTE *)(v15 + 56))
      && *((_BYTE *)a2 + 272) == 1)
    {
      v18 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
      if (!WebCore::SecurityOrigin::isSameOriginAs(v18, v17) && !*((_BYTE *)v17 + 56))
        v19 = 1;
    }
  }
  WebCore::SecurityContext::securityOrigin(a2, v16);
  v37[0] = 0;
  v38 = -1;
  v21 = *(unsigned int *)(v20 + 32);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33576B8[v21])(&v39, v37, v20 + 8);
    v38 = v21;
  }
  v22 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  v35[0] = 0;
  v36 = -1;
  v23 = *(unsigned int *)(v22 + 32);
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33576B8[v23])(&v39, v35, v22 + 8);
    v36 = v23;
  }
  v24 = *a3;
  if (*a3)
    *(_DWORD *)v24 += 2;
  v39 = v24;
  v40[0] = 0;
  v41 = -1;
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v23])(&v34, v40, v35);
    v41 = v23;
  }
  v42[0] = 0;
  v43 = -1;
  v25 = v38;
  if (v38 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v38])(&v34, v42, v37);
    v43 = v25;
  }
  v44 = v19;
  if (v36 != -1)
    ((void (*)(char *, _BYTE *))off_1E33576A8[v36])(&v34, v35);
  if (v38 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33576A8[v38])(v35, v37);
  if ((unint64_t)v39 + 1 > 1)
  {
    WebCore::IDBClient::IDBConnectionProxy::openDatabase(this[1], a2, (const WebCore::IDBDatabaseIdentifier *)&v39, v33, (unint64_t *)a5);
    v27 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    v27 = 1;
  }
  *(_DWORD *)(a5 + 16) = v27;
  if (v43 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33576A8[v43])(v37, v42);
  v43 = -1;
  if (v41 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33576A8[v41])(v37, v40);
  v41 = -1;
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBFactory::deleteDatabase@<X0>(WebCore::IDBClient::IDBConnectionProxy **this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  const WebCore::SecurityOrigin *v10;
  int v11;
  WebCore::SecurityOrigin *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WebCore::SecurityOrigin *v15;
  WebCore::SecurityOrigin *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *result;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[24];
  int v33;
  _BYTE v34[24];
  int v35;
  WTF::StringImpl *v36;
  _BYTE v37[24];
  int v38;
  _BYTE v39[24];
  int v40;
  BOOL v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*a3)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = 33;
LABEL_36:
    *(_BYTE *)a4 = v27;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (!*((_BYTE *)a2 + 274)
    && ((v28 = *((_QWORD *)a2 + 42)) == 0
     || (v29 = *(_QWORD *)(v28 + 8)) == 0
     || (v30 = *(_QWORD *)(v29 + 24)) == 0
     || !*(_QWORD *)(v30 + 8))
    || (WebCore::SecurityContext::securityOrigin(a2, a2), !v8)
    || (v10 = (const WebCore::SecurityOrigin *)v8, *(_DWORD *)(v8 + 32) == 1)
    || *(_BYTE *)(v8 + 63) && !*(_BYTE *)(v8 + 60) && !*(_BYTE *)(v8 + 56))
  {
LABEL_35:
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = 14;
    goto LABEL_36;
  }
  v11 = *((unsigned __int8 *)a2 + 272);
  if (v11 != 1)
  {
    if (v11 != 2)
      goto LABEL_8;
    goto LABEL_35;
  }
  v12 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  WebCore::SecurityOrigin::isSameOriginAs(v12, v10);
LABEL_8:
  WebCore::SecurityContext::securityOrigin(a2, v9);
  v17 = 0;
  if (v13)
  {
    v15 = (const WebCore::SecurityOrigin *)v13;
    if (*(_DWORD *)(v13 + 32) != 1
      && (!*(_BYTE *)(v13 + 63) || *(_BYTE *)(v13 + 60) || *(_BYTE *)(v13 + 56))
      && *((_BYTE *)a2 + 272) == 1)
    {
      v16 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
      if (!WebCore::SecurityOrigin::isSameOriginAs(v16, v15) && !*((_BYTE *)v15 + 56))
        v17 = 1;
    }
  }
  WebCore::SecurityContext::securityOrigin(a2, v14);
  v34[0] = 0;
  v35 = -1;
  v19 = *(unsigned int *)(v18 + 32);
  if ((_DWORD)v19 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33576B8[v19])(&v36, v34, v18 + 8);
    v35 = v19;
  }
  v20 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  v32[0] = 0;
  v33 = -1;
  v21 = *(unsigned int *)(v20 + 32);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33576B8[v21])(&v36, v32, v20 + 8);
    v33 = v21;
  }
  v22 = *a3;
  if (*a3)
    *(_DWORD *)v22 += 2;
  v36 = v22;
  v37[0] = 0;
  v38 = -1;
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v21])(&v31, v37, v32);
    v38 = v21;
  }
  v39[0] = 0;
  v40 = -1;
  v23 = v35;
  if (v35 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v35])(&v31, v39, v34);
    v40 = v23;
  }
  v41 = v17;
  if (v33 != -1)
    ((void (*)(char *, _BYTE *))off_1E33576A8[v33])(&v31, v32);
  if (v35 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33576A8[v35])(v32, v34);
  if ((unint64_t)v36 + 1 > 1)
  {
    WebCore::IDBClient::IDBConnectionProxy::deleteDatabase(this[1], a2, (const WebCore::IDBDatabaseIdentifier *)&v36, (unint64_t *)a4);
    v25 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 33;
    v25 = 1;
  }
  *(_DWORD *)(a4 + 16) = v25;
  if (v40 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33576A8[v40])(v34, v39);
  v40 = -1;
  if (v38 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E33576A8[v38])(v34, v37);
  v38 = -1;
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::IDBFactory::cmp@<X0>(JSC::JSGlobalObject *a1@<X1>, unint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const WTF::String *v9;
  uint64_t result;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::IDBKey *v15;
  WebCore::IDBKey *v16;
  char v17;

  WebCore::createIDBKeyFromValue(&v16, a1, a2);
  v7 = (unsigned int *)v16;
  if ((WebCore::IDBKey::isValid(v16) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 26;
    *(_DWORD *)(a4 + 16) = 1;
    if (!v7)
      return result;
    goto LABEL_11;
  }
  WebCore::createIDBKeyFromValue(&v15, a1, a3);
  v8 = (unsigned int *)v15;
  if ((WebCore::IDBKey::isValid(v15) & 1) != 0)
  {
    result = WebCore::IDBKey::compare((WebCore::IDBKey *)v7, (const WebCore::IDBKey *)v8, v9);
    v12 = 0;
    *(_WORD *)a4 = result;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 26;
    v12 = 1;
  }
  *(_DWORD *)(a4 + 16) = v12;
  if (!v8)
  {
LABEL_10:
    if (!v7)
      return result;
    goto LABEL_11;
  }
  if (*v8 != 1)
  {
    --*v8;
    goto LABEL_10;
  }
  v14 = v8[6];
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v14])(&v17, v8 + 2);
  v8[6] = -1;
  result = bmalloc::api::isoDeallocate((bmalloc::api *)v8, v11);
  if (v7)
  {
LABEL_11:
    if (*v7 == 1)
    {
      v13 = v7[6];
      if ((_DWORD)v13 != -1)
        ((void (*)(WebCore::IDBKey **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v13])(&v15, v7 + 2);
      v7[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v7, v11);
    }
    else
    {
      --*v7;
    }
  }
  return result;
}

uint64_t WebCore::IDBKey::isValid(WebCore::IDBKey *this)
{
  uint64_t v1;
  WebCore::IDBKey **v2;
  uint64_t v3;
  WebCore::IDBKey *v5;
  const WebCore::IDBKey *v6;
  const WTF::String *v7;

  if (!*((_BYTE *)this + 4))
    return 0;
  if (*((_BYTE *)this + 4) != 1)
    return 1;
  if (!*((_DWORD *)this + 6))
  {
    v1 = *((unsigned int *)this + 5);
    if ((_DWORD)v1)
    {
      v2 = (WebCore::IDBKey **)*((_QWORD *)this + 1);
      v3 = 8 * v1;
      while ((WebCore::IDBKey::isValid(*v2) & 1) != 0)
      {
        ++v2;
        v3 -= 8;
        if (!v3)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  v5 = (WebCore::IDBKey *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::IDBKey::compare(v5, v6, v7);
}

uint64_t WebCore::IDBKey::compare(WebCore::IDBKey *this, const WebCore::IDBKey *a2, const WTF::String *a3)
{
  int v3;
  int v4;
  double v7;
  double v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned __int8 **v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  WebCore::SecurityContext *v30;

  v3 = *((unsigned __int8 *)this + 4);
  v4 = *((unsigned __int8 *)a2 + 4);
  if (v3 == v4)
  {
    switch(*((_BYTE *)this + 4))
    {
      case 1:
        if (*((_DWORD *)this + 6) || *((_DWORD *)a2 + 6))
          goto LABEL_60;
        LODWORD(v10) = *((_DWORD *)this + 5);
        LODWORD(v11) = *((_DWORD *)a2 + 5);
        if ((_DWORD)v10 && (_DWORD)v11)
        {
          v12 = 0;
          while (1)
          {
            result = WebCore::IDBKey::compare(*(WebCore::IDBKey **)(*((_QWORD *)this + 1) + 8 * v12), *(const WebCore::IDBKey **)(*((_QWORD *)a2 + 1) + 8 * v12));
            if ((_DWORD)result)
              break;
            ++v12;
            v10 = *((unsigned int *)this + 5);
            v11 = *((unsigned int *)a2 + 5);
            v13 = v12 >= v10 || v12 >= v11;
            if (v13)
              goto LABEL_23;
          }
        }
        else
        {
LABEL_23:
          v13 = v10 >= v11;
          v14 = v10 > v11;
          if (v13)
            return v14;
          else
            return 0xFFFFFFFFLL;
        }
        return result;
      case 2:
        if (*((_DWORD *)this + 6) != 3 || *((_DWORD *)a2 + 6) != 3)
          goto LABEL_60;
        v15 = *((_QWORD *)this + 1);
        if (v15)
          v16 = (unsigned __int8 **)(v15 + 8);
        else
          v16 = 0;
        v17 = *((_QWORD *)a2 + 1);
        if (v17)
          v18 = (unsigned __int8 **)(v17 + 8);
        else
          v18 = 0;
        if (v16 == v18)
          return 0;
        if (v15 && !v17)
          return 1;
        if (v15 || !v17)
        {
          v19 = *((_DWORD *)v16 + 3);
          v20 = *((_DWORD *)v18 + 3);
          if (v20 >= v19)
            v21 = v19;
          else
            v21 = v20;
          if ((_DWORD)v21)
          {
            v22 = *v16;
            v23 = *v18;
            do
            {
              v25 = *v22++;
              v24 = v25;
              v26 = *v23++;
              v27 = v24 >= v26;
              if (v24 > v26)
                return 1;
              if (!v27)
                goto LABEL_44;
            }
            while (--v21);
          }
          if (v20 < v19)
            v28 = 1;
          else
            v28 = -1;
          if (v19 == v20)
            result = 0;
          else
            result = v28;
        }
        else
        {
LABEL_44:
          result = 0xFFFFFFFFLL;
        }
        break;
      case 3:
        if (*((_DWORD *)a2 + 6) != 1 || *((_DWORD *)this + 6) != 1)
          goto LABEL_60;
        return -WTF::codePointCompare((const WebCore::IDBKey *)((char *)a2 + 8), (WebCore::IDBKey *)((char *)this + 8), a3);
      case 4:
      case 5:
        if (*((_DWORD *)this + 6) == 2 && *((_DWORD *)a2 + 6) == 2)
        {
          v7 = *((double *)this + 1);
          v8 = *((double *)a2 + 1);
          if (v7 < v8)
            return 0xFFFFFFFFLL;
          else
            return v7 > v8;
        }
        else
        {
LABEL_60:
          v29 = std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::IDBFactory::databases(v29, v30);
        }
      default:
        return 0;
    }
  }
  else if ((char)v3 > (char)v4)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBFactory::databases(uint64_t a1, WebCore::SecurityContext *this, uint64_t *a3)
{
  uint64_t v6;
  const WebCore::SecurityOrigin *v7;
  int v8;
  WebCore::SecurityOrigin *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  if (*((_BYTE *)this + 274)
    || (v14 = *((_QWORD *)this + 42)) != 0
    && (v15 = *(_QWORD *)(v14 + 8)) != 0
    && (v16 = *(_QWORD *)(v15 + 24)) != 0
    && *(_QWORD *)(v16 + 8))
  {
    WebCore::SecurityContext::securityOrigin(this, this);
    if (v6)
    {
      v7 = (const WebCore::SecurityOrigin *)v6;
      if (*(_DWORD *)(v6 + 32) != 1 && (!*(_BYTE *)(v6 + 63) || *(_BYTE *)(v6 + 60) || *(_BYTE *)(v6 + 56)))
      {
        v8 = *((unsigned __int8 *)this + 272);
        if (v8 == 1)
        {
          v9 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(WebCore::SecurityContext *))(*(_QWORD *)this + 256))(this);
          WebCore::SecurityOrigin::isSameOriginAs(v9, v7);
          goto LABEL_7;
        }
        if (v8 != 2)
        {
LABEL_7:
          v10 = *(_QWORD *)(a1 + 8);
          v11 = *a3;
          *a3 = 0;
          v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v12 = &off_1E33578B8;
          *((_QWORD *)v12 + 1) = v11;
          v19 = v12;
          WebCore::IDBClient::IDBConnectionProxy::getAllDatabaseNamesAndVersions(v10, this, (uint64_t *)&v19);
          result = v19;
          v19 = 0;
          if (result)
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          return result;
        }
      }
    }
  }
  v17 = *a3;
  v19 = 0;
  WebCore::DeferredPromise::reject(v17, (JSC::JSGlobalObject *)0xE, (JSC::JSGlobalObject *)&v19, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::IDBFactory::getAllDatabaseNames(uint64_t a1, WebCore::SecurityContext *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E33578E0;
  v6[1] = v5;
  v8 = v6;
  WebCore::IDBClient::IDBConnectionProxy::getAllDatabaseNamesAndVersions(v4, a2, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void *WebCore::IDBGetAllResult::bisoHeap(WebCore::IDBGetAllResult *this)
{
  return &WebCore::IDBGetAllResult::bisoHeap(void)::heap;
}

uint64_t WebCore::IDBGetAllResult::operator new(uint64_t this)
{
  if (this == 72)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WTF *WebCore::IDBGetAllResult::isolatedCopy(WebCore::IDBGetAllResult *this, const WebCore::IDBGetAllResult *a2, WebCore::IDBGetAllResult *a3)
{
  void *v5;
  uint64_t v6;
  WTF *result;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebCore::IDBValue *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD v36[2];
  int v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  *(_BYTE *)a2 = *(_BYTE *)this;
  v39 = 0uLL;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore10IDBKeyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(&v39, (uint64_t *)this + 1);
  v6 = *((unsigned int *)a2 + 5);
  result = (WTF *)*((_QWORD *)a2 + 1);
  if ((_DWORD)v6)
  {
    v8 = 32 * v6;
    v9 = (_DWORD *)((char *)result + 24);
    do
    {
      v10 = *v9;
      if ((_DWORD)v10 != -1)
        ((void (*)(_QWORD *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v10])(v36, v9 - 4);
      *v9 = -1;
      v9 += 8;
      v8 -= 32;
    }
    while (v8);
    result = (WTF *)*((_QWORD *)a2 + 1);
  }
  if (result)
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_DWORD *)a2 + 4) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  *(_OWORD *)((char *)a2 + 8) = v39;
  v11 = *((unsigned int *)this + 9);
  if (!(_DWORD)v11)
  {
    v13 = 0;
    v14 = 0;
LABEL_16:
    v19 = 0;
    goto LABEL_17;
  }
  if (v11 >= 0x6666667)
  {
LABEL_48:
    __break(0xC471u);
    return result;
  }
  v12 = 40 * v11;
  v13 = WTF::fastMalloc((WTF *)(40 * v11));
  v14 = (v12 & 0xFFFFFFF8) / 0x28;
  v15 = *((unsigned int *)this + 9);
  if (!(_DWORD)v15)
    goto LABEL_16;
  v16 = 0;
  v17 = *((_QWORD *)this + 3);
  v18 = 40 * v15;
  v19 = ((unint64_t)(8 * v15 - 8) >> 3) + 1;
  do
  {
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    WebCore::IDBValue::setAsIsolatedCopy((WebCore::IDBValue *)&v39, (unsigned int **)(v17 + v16));
    v20 = v13 + v16;
    v21 = v39;
    *(_QWORD *)&v39 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)v20 = v21;
    v22 = *((_QWORD *)&v39 + 1);
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)(v20 + 8) = v22;
    LODWORD(v22) = v40;
    LODWORD(v40) = 0;
    *(_DWORD *)(v20 + 16) = v22;
    LODWORD(v22) = DWORD1(v40);
    DWORD1(v40) = 0;
    *(_DWORD *)(v20 + 20) = v22;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    v23 = *((_QWORD *)&v40 + 1);
    *((_QWORD *)&v40 + 1) = 0;
    *(_QWORD *)(v20 + 24) = v23;
    LODWORD(v23) = v41;
    LODWORD(v41) = 0;
    *(_DWORD *)(v20 + 32) = v23;
    LODWORD(v23) = HIDWORD(v41);
    HIDWORD(v41) = 0;
    *(_DWORD *)(v20 + 36) = v23;
    WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v39, v24);
    v16 += 40;
  }
  while (v18 != v16);
LABEL_17:
  v25 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v25)
  {
    v26 = (WebCore::IDBValue *)*((_QWORD *)a2 + 3);
    v27 = 40 * v25;
    do
    {
      WebCore::IDBValue::~IDBValue(v26, (WTF::StringImpl *)v5);
      v26 = (WebCore::IDBValue *)(v28 + 40);
      v27 -= 40;
    }
    while (v27);
  }
  result = (WTF *)*((_QWORD *)a2 + 3);
  if (result)
  {
    *((_QWORD *)a2 + 3) = 0;
    *((_DWORD *)a2 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  *((_QWORD *)a2 + 3) = v13;
  *((_DWORD *)a2 + 8) = v14;
  *((_DWORD *)a2 + 9) = v19;
  v29 = *((unsigned __int8 *)this + 64);
  if (!*((_BYTE *)this + 64))
  {
    LOBYTE(v39) = 0;
    BYTE8(v40) = 0;
    goto LABEL_29;
  }
  v30 = *((unsigned int *)this + 14);
  if ((_DWORD)v30 == -1)
  {
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_48;
  }
  *(_QWORD *)&v39 = &v38;
  result = (WTF *)((WTF *(*)(_QWORD *__return_ptr, __int128 *, char *))off_1E3357758[v30])(v36, &v39, (char *)this + 40);
  LOBYTE(v39) = 0;
  LODWORD(v40) = -1;
  v31 = v37;
  if (v37 == -1)
  {
    v29 = 1;
    BYTE8(v40) = 1;
  }
  else
  {
    result = (WTF *)((uint64_t (*)(char *, __int128 *, _QWORD *))off_1E3357778[v37])(&v38, &v39, v36);
    LODWORD(v40) = v31;
    v29 = 1;
    BYTE8(v40) = 1;
    if (v37 != -1)
    {
      result = (WTF *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v37])(&v38, v36);
      v29 = BYTE8(v40);
    }
  }
LABEL_29:
  v32 = (char *)a2 + 40;
  if (*((unsigned __int8 *)a2 + 64) != v29)
  {
    if (*((_BYTE *)a2 + 64))
    {
      v34 = *((unsigned int *)a2 + 14);
      if ((_DWORD)v34 != -1)
        result = (WTF *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v34])(v36, v32);
      *((_DWORD *)a2 + 14) = -1;
      *((_BYTE *)a2 + 64) = 0;
    }
    else
    {
      *((_BYTE *)a2 + 40) = 0;
      *((_DWORD *)a2 + 14) = -1;
      v35 = v40;
      if ((_DWORD)v40 != -1)
      {
        result = (WTF *)((uint64_t (*)(_QWORD *, char *, __int128 *))off_1E3357778[v40])(v36, v32, &v39);
        *((_DWORD *)a2 + 14) = v35;
      }
      *((_BYTE *)a2 + 64) = 1;
    }
    goto LABEL_43;
  }
  if (!*((_BYTE *)a2 + 64))
    return result;
  v33 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v33 == -1)
  {
    if ((_DWORD)v40 == -1)
      goto LABEL_43;
  }
  else if ((_DWORD)v40 == -1)
  {
    result = (WTF *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v33])(v36, v32);
    *((_DWORD *)a2 + 14) = -1;
    goto LABEL_43;
  }
  v36[0] = (char *)a2 + 40;
  result = (WTF *)((uint64_t (*)(_QWORD *))off_1E3357788[v40])(v36);
LABEL_43:
  if (BYTE8(v40))
  {
    if ((_DWORD)v40 != -1)
      return (WTF *)((uint64_t (*)(_QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v40])(v36, &v39);
  }
  return result;
}

unint64_t WebCore::IDBGetAllResult::addValue(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = a1 + 24;
  v4 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 32))
  {
    result = WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v4 + 1, a2);
    v5 = *(_QWORD *)(a1 + 24) + 40 * *(unsigned int *)(a1 + 36);
    v6 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = v6;
    v7 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(v5 + 8) = v7;
    LODWORD(v7) = *(_DWORD *)(result + 16);
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)(v5 + 16) = v7;
    LODWORD(v7) = *(_DWORD *)(result + 20);
    *(_DWORD *)(result + 20) = 0;
    *(_DWORD *)(v5 + 20) = v7;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    v8 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(v5 + 24) = v8;
    LODWORD(v8) = *(_DWORD *)(result + 32);
    *(_DWORD *)(result + 32) = 0;
    *(_DWORD *)(v5 + 32) = v8;
    v9 = *(_DWORD *)(result + 36);
    *(_DWORD *)(result + 36) = 0;
  }
  else
  {
    v5 = *(_QWORD *)result + 40 * v4;
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = v10;
    v11 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v5 + 8) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(v5 + 16) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(v5 + 20) = v11;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    v12 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(v5 + 24) = v12;
    LODWORD(v12) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(v5 + 32) = v12;
    v9 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
  }
  *(_DWORD *)(v5 + 36) = v9;
  ++*(_DWORD *)(a1 + 36);
  return result;
}

uint64_t WebCore::IDBGetAllResult::keys(WebCore::IDBGetAllResult *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::IDBGetAllResult::values(WebCore::IDBGetAllResult *this)
{
  return (uint64_t)this + 24;
}

uint64_t WebCore::IDBGetAllResult::allBlobFilePaths@<X0>(uint64_t this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  int i;
  int v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl **v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t j;
  WTF::StringImpl *v29;
  WTF::StringImpl **v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl **v42;
  WTF::StringImpl **v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t *v46;
  WTF::StringImpl **v47;

  v47 = 0;
  v4 = *(_DWORD *)(this + 36);
  if (!v4)
  {
    v38 = 0;
    *a3 = 0;
    a3[1] = 0;
LABEL_62:
    this = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v47);
    v42 = v47;
    if (v47)
      v43 = &v47[*((unsigned int *)v47 - 1)];
    else
      v43 = 0;
    if (v43 != (WTF::StringImpl **)this)
    {
      v44 = 0;
      do
      {
        v45 = *(_DWORD **)this;
        if (*(_QWORD *)this)
          *v45 += 2;
        *(_QWORD *)(v38 + 8 * v44) = v45;
        while (1)
        {
          this += 8;
          if ((WTF::StringImpl *)this == v41)
            break;
          if ((unint64_t)(*(_QWORD *)this + 1) > 1)
            goto LABEL_73;
        }
        this = (uint64_t)v41;
LABEL_73:
        ++v44;
      }
      while ((WTF::StringImpl **)this != v43);
      *((_DWORD *)a3 + 3) = v44;
      v42 = v47;
    }
    if (v42)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v42, v41);
    return this;
  }
  v46 = a3;
  v5 = *(_QWORD *)(this + 24);
  v6 = v5 + 40 * v4;
  do
  {
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7)
    {
      v8 = *(WTF::StringImpl ***)(v5 + 24);
      v9 = &v8[v7];
      do
      {
        v10 = v47;
        if (v47
          || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v47, 0), (v10 = v47) != 0))
        {
          v11 = *((_DWORD *)v10 - 2);
        }
        else
        {
          v11 = 0;
        }
        v12 = *((_DWORD *)*v8 + 4);
        if (v12 < 0x100)
          v13 = WTF::StringImpl::hashSlowCase(*v8);
        else
          v13 = v12 >> 8;
        v14 = 0;
        for (i = 1; ; ++i)
        {
          v16 = v13 & v11;
          v17 = (uint64_t *)&v10[v13 & v11];
          this = *v17;
          if (!*v17)
            break;
          if (this != -1)
          {
            this = WTF::equal((WTF *)this, *v8, a2);
            v17 = v14;
            if ((this & 1) != 0)
              goto LABEL_27;
          }
          v13 = i + v16;
          v14 = v17;
        }
        if (v14)
        {
          this = 0;
          *v14 = 0;
          --*((_DWORD *)v47 - 4);
          v17 = v14;
        }
        v18 = *v8;
        if (*v8)
          *(_DWORD *)v18 += 2;
        *v17 = (uint64_t)v18;
        if (v47)
          v19 = *((_DWORD *)v47 - 3) + 1;
        else
          v19 = 1;
        *((_DWORD *)v47 - 3) = v19;
        v20 = v47;
        if (v47)
          v21 = *((_DWORD *)v47 - 3);
        else
          v21 = 0;
        v22 = (*((_DWORD *)v47 - 4) + v21);
        v23 = *((unsigned int *)v47 - 1);
        if (v23 > 0x400)
        {
          if (v23 <= 2 * v22)
            goto LABEL_32;
        }
        else if (3 * v23 <= 4 * v22)
        {
          if ((_DWORD)v23)
          {
LABEL_32:
            v24 = *((_DWORD *)v47 - 3);
            v25 = (_DWORD)v23 << (6 * v24 >= (2 * v23));
          }
          else
          {
            v24 = *((_DWORD *)v47 - 3);
            v25 = 8;
          }
          v26 = WTF::fastZeroedMalloc((WTF *)(8 * v25 + 16));
          v47 = (WTF::StringImpl **)(v26 + 16);
          *(_DWORD *)(v26 + 8) = v25 - 1;
          *(_DWORD *)(v26 + 12) = v25;
          *(_DWORD *)v26 = 0;
          *((_DWORD *)v47 - 3) = v24;
          if ((_DWORD)v23)
          {
            for (j = 0; j != v23; ++j)
            {
              v29 = v20[j];
              if (v29)
              {
                if (v29 != (WTF::StringImpl *)-1)
                {
                  v30 = v47;
                  v31 = v47 ? *((_DWORD *)v47 - 2) : 0;
                  v32 = *((_DWORD *)v29 + 4);
                  v33 = v32 < 0x100 ? WTF::StringImpl::hashSlowCase(v29) : v32 >> 8;
                  v34 = 0;
                  do
                  {
                    v35 = v33 & v31;
                    v33 = ++v34 + v35;
                  }
                  while (v30[v35]);
                  v30[v35] = 0;
                  v36 = v20[j];
                  v20[j] = 0;
                  v30[v35] = v36;
                  v37 = v20[j];
                  v20[j] = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, v27);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                }
              }
              else
              {
                v20[j] = 0;
              }
            }
          }
          this = WTF::fastFree((WTF *)(v20 - 2), v27);
        }
LABEL_27:
        ++v8;
      }
      while (v8 != v9);
    }
    v5 += 40;
  }
  while (v5 != v6);
  v38 = 0;
  a3 = v46;
  v39 = v47;
  *v46 = 0;
  v46[1] = 0;
  if (!v39)
    goto LABEL_62;
  v40 = *((unsigned int *)v39 - 3);
  if (!(_DWORD)v40)
  {
    v38 = 0;
    goto LABEL_62;
  }
  if (!(v40 >> 29))
  {
    v38 = WTF::fastMalloc((WTF *)(8 * v40));
    *((_DWORD *)v46 + 2) = v40;
    *v46 = v38;
    goto LABEL_62;
  }
  __break(0xC471u);
  return this;
}

void *WebCore::IDBGetResult::bisoHeap(WebCore::IDBGetResult *this)
{
  return &WebCore::IDBGetResult::bisoHeap(void)::heap;
}

uint64_t WebCore::IDBGetResult::operator new(uint64_t this)
{
  if (this == 160)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WTF *WebCore::IDBGetResult::isolatedCopy(unsigned int **this, const WebCore::IDBGetResult *a2, WebCore::IDBGetResult *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t (**v8)();
  uint64_t v9;
  uint64_t v10;
  WTF *result;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t (**v32)();
  unint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  WebCore::IDBValue *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[16];
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[2];
  int v57;
  char v58;
  _QWORD v59[2];

  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  WebCore::IDBValue::setAsIsolatedCopy((WebCore::IDBValue *)&v48, this);
  WebCore::IDBValue::operator=((uint64_t *)a2, (uint64_t *)&v48);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v48, v5);
  v6 = *((unsigned int *)this + 16);
  if ((_DWORD)v6 == -1)
    goto LABEL_83;
  *(_QWORD *)&v48 = v59;
  ((void (*)(_QWORD *__return_ptr, __int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v6])(v56, &v48, this + 6);
  LOBYTE(v48) = 0;
  BYTE8(v48) = 0;
  DWORD2(v49) = -1;
  v7 = v57;
  v8 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0;
  if (v57 == -1)
  {
    v7 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v57])(v59, (char *)&v48 + 8, v56);
    DWORD2(v49) = v7;
    if (v57 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v57])(v59, v56);
      v7 = DWORD2(v49);
    }
  }
  *((_BYTE *)a2 + 40) = v48;
  v9 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v9 == -1)
  {
    if (v7 == -1)
      goto LABEL_13;
  }
  else if (v7 == -1)
  {
    ((void (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v9])(v56, (char *)a2 + 48);
    *((_DWORD *)a2 + 16) = -1;
    goto LABEL_11;
  }
  v56[0] = (char *)a2 + 48;
  ((void (*)(_QWORD *))off_1E3357798[v7])(v56);
LABEL_11:
  if (DWORD2(v49) != -1)
    ((void (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[DWORD2(v49)])(v56, (char *)&v48 + 8);
LABEL_13:
  v10 = *((unsigned int *)this + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_83;
  *(_QWORD *)&v48 = v59;
  result = (WTF *)((WTF *(*)(_QWORD *__return_ptr, __int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v10])(v56, &v48, this + 10);
  LOBYTE(v48) = 0;
  BYTE8(v48) = 0;
  DWORD2(v49) = -1;
  v12 = v57;
  if (v57 == -1)
  {
    v12 = -1;
  }
  else
  {
    result = (WTF *)((uint64_t (*)(_QWORD *, char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v57])(v59, (char *)&v48 + 8, v56);
    DWORD2(v49) = v12;
    if (v57 != -1)
    {
      result = (WTF *)((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v57])(v59, v56);
      v12 = DWORD2(v49);
    }
  }
  *((_BYTE *)a2 + 72) = v48;
  v13 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v13 == -1)
  {
    if (v12 == -1)
      goto LABEL_25;
  }
  else if (v12 == -1)
  {
    result = (WTF *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v13])(v56, (char *)a2 + 80);
    *((_DWORD *)a2 + 24) = -1;
    goto LABEL_23;
  }
  v56[0] = (char *)a2 + 80;
  result = (WTF *)((uint64_t (*)(_QWORD *))off_1E3357798[v12])(v56);
LABEL_23:
  if (DWORD2(v49) != -1)
    result = (WTF *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[DWORD2(v49)])(v56, (char *)&v48 + 8);
LABEL_25:
  v14 = *((unsigned __int8 *)this + 128);
  if (!*((_BYTE *)this + 128))
  {
    LOBYTE(v48) = 0;
    BYTE8(v49) = 0;
    goto LABEL_32;
  }
  v15 = *((unsigned int *)this + 30);
  if ((_DWORD)v15 == -1)
  {
LABEL_83:
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_84;
  }
  *(_QWORD *)&v48 = v59;
  result = (WTF *)((WTF *(*)(_QWORD *__return_ptr, __int128 *, unsigned int **))off_1E3357758[v15])(v56, &v48, this + 13);
  LOBYTE(v48) = 0;
  LODWORD(v49) = -1;
  v16 = v57;
  if (v57 == -1)
  {
    v14 = 1;
    BYTE8(v49) = 1;
  }
  else
  {
    result = (WTF *)((uint64_t (*)(_QWORD *, __int128 *, _QWORD *))off_1E3357778[v57])(v59, &v48, v56);
    LODWORD(v49) = v16;
    v14 = 1;
    BYTE8(v49) = 1;
    if (v57 != -1)
    {
      result = (WTF *)((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v57])(v59, v56);
      v14 = BYTE8(v49);
    }
  }
LABEL_32:
  v17 = (const WebCore::IDBGetResult *)((char *)a2 + 104);
  if (*((unsigned __int8 *)a2 + 128) != v14)
  {
    if (*((_BYTE *)a2 + 128))
    {
      v19 = *((unsigned int *)a2 + 30);
      if ((_DWORD)v19 != -1)
        result = (WTF *)((uint64_t (*)(_QWORD *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v19])(v56, v17);
      *((_DWORD *)a2 + 30) = -1;
      *((_BYTE *)a2 + 128) = 0;
    }
    else
    {
      *((_BYTE *)a2 + 104) = 0;
      *((_DWORD *)a2 + 30) = -1;
      v20 = v49;
      if ((_DWORD)v49 != -1)
      {
        result = (WTF *)((uint64_t (*)(_QWORD *, WTF::StringImpl *, __int128 *))off_1E3357778[v49])(v56, v17, &v48);
        *((_DWORD *)a2 + 30) = v20;
      }
      *((_BYTE *)a2 + 128) = 1;
    }
    goto LABEL_46;
  }
  if (!*((_BYTE *)a2 + 128))
    goto LABEL_49;
  v18 = *((unsigned int *)a2 + 30);
  if ((_DWORD)v18 == -1)
  {
    if ((_DWORD)v49 == -1)
      goto LABEL_46;
LABEL_45:
    v56[0] = (char *)a2 + 104;
    result = (WTF *)((uint64_t (*)(_QWORD *))off_1E3357788[v49])(v56);
    goto LABEL_46;
  }
  if ((_DWORD)v49 != -1)
    goto LABEL_45;
  result = (WTF *)((uint64_t (*)(_QWORD *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v18])(v56, v17);
  *((_DWORD *)a2 + 30) = -1;
LABEL_46:
  if (BYTE8(v49) && (_DWORD)v49 != -1)
    result = (WTF *)((uint64_t (*)(_QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v49])(v56, &v48);
LABEL_49:
  *((_BYTE *)a2 + 152) = *((_BYTE *)this + 152);
  v21 = *((_DWORD *)this + 37);
  if (v21)
  {
    if (v21 >= 0x2762763)
    {
LABEL_84:
      __break(0xC471u);
      return result;
    }
    v22 = 104 * v21;
    v47 = WTF::fastMalloc((WTF *)(104 * v21));
    v23 = (v22 & 0xFFFFFFF8) / 0x68;
    v24 = *((_DWORD *)this + 37);
    if (v24)
    {
      v25 = 0;
      v26 = 0;
      v27 = this[17];
      v46 = 104 * v24;
      while (1)
      {
        v28 = v27[v26 / 4 + 6];
        if ((_DWORD)v28 == -1)
          goto LABEL_83;
        v59[0] = &v58;
        ((void (*)(_QWORD *__return_ptr, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v28])(v56, v59, &v27[v26 / 4 + 2]);
        LOBYTE(v48) = 0;
        BYTE8(v48) = 0;
        DWORD2(v49) = -1;
        v29 = v57;
        if (v57 != -1)
        {
          ((void (*)(_QWORD *, char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v57])(v59, (char *)&v48 + 8, v56);
          DWORD2(v49) = v29;
          if (v57 != -1)
            ((void (*)(_QWORD *, _QWORD *))v8[v57])(v59, v56);
        }
        v30 = v27[v26 / 4 + 14];
        if ((_DWORD)v30 == -1)
          goto LABEL_83;
        v59[0] = &v58;
        ((void (*)(_QWORD *__return_ptr, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v30])(v56, v59, &v27[v26 / 4 + 10]);
        LOBYTE(v50) = 0;
        v51[0] = 0;
        v52 = -1;
        v31 = v57;
        if (v57 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v57])(v59, v51, v56);
          v52 = v31;
          if (v57 != -1)
            ((void (*)(_QWORD *, _QWORD *))v8[v57])(v59, v56);
        }
        v32 = v8;
        v55 = 0;
        v53 = 0u;
        v54 = 0u;
        WebCore::IDBValue::setAsIsolatedCopy((WebCore::IDBValue *)&v53, (unsigned int **)&v27[v26 / 4 + 16]);
        v33 = v47 + v26;
        *(_BYTE *)v33 = v48;
        *(_BYTE *)(v33 + 8) = 0;
        *(_DWORD *)(v33 + 24) = -1;
        v34 = DWORD2(v49);
        if (DWORD2(v49) != -1)
        {
          ((void (*)(_QWORD *, unint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[DWORD2(v49)])(v56, v47 + v26 + 8, (char *)&v48 + 8);
          *(_DWORD *)(v33 + 24) = v34;
        }
        *(_BYTE *)(v33 + 32) = v50;
        *(_BYTE *)(v33 + 40) = 0;
        v35 = (WTF::StringImpl *)(v33 + 40);
        *(_DWORD *)(v33 + 56) = -1;
        v36 = v52;
        if (v52 != -1)
        {
          ((void (*)(_QWORD *, WTF::StringImpl *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v52])(v56, v35, v51);
          *(_DWORD *)(v33 + 56) = v36;
        }
        v37 = v47 + v26;
        v38 = v53;
        *(_QWORD *)&v53 = 0;
        *(_QWORD *)(v37 + 64) = v38;
        *(_QWORD *)(v37 + 80) = 0;
        v39 = *((_QWORD *)&v53 + 1);
        *((_QWORD *)&v53 + 1) = 0;
        *(_QWORD *)(v37 + 72) = v39;
        LODWORD(v39) = v54;
        LODWORD(v54) = 0;
        *(_DWORD *)(v37 + 80) = v39;
        LODWORD(v39) = DWORD1(v54);
        DWORD1(v54) = 0;
        *(_DWORD *)(v37 + 84) = v39;
        *(_QWORD *)(v37 + 96) = 0;
        v40 = *((_QWORD *)&v54 + 1);
        *((_QWORD *)&v54 + 1) = 0;
        *(_QWORD *)(v37 + 88) = v40;
        LODWORD(v40) = v55;
        LODWORD(v55) = 0;
        *(_DWORD *)(v37 + 96) = v40;
        LODWORD(v40) = HIDWORD(v55);
        HIDWORD(v55) = 0;
        *(_DWORD *)(v37 + 100) = v40;
        WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v53, v35);
        v8 = v32;
        if (v52 != -1)
          ((void (*)(_QWORD *, _BYTE *))v32[v52])(v56, v51);
        v52 = -1;
        if (DWORD2(v49) != -1)
          ((void (*)(_QWORD *, char *))v32[DWORD2(v49)])(v56, (char *)&v48 + 8);
        v26 += 104;
        ++v25;
        if (v46 == v26)
        {
          v23 = (v22 & 0xFFFFFFF8) / 0x68;
          goto LABEL_73;
        }
      }
    }
  }
  else
  {
    v47 = 0;
    v23 = 0;
  }
  v25 = 0;
LABEL_73:
  v41 = *((_DWORD *)a2 + 37);
  if (v41)
  {
    v42 = 104 * v41;
    v43 = (WebCore::IDBValue *)(*((_QWORD *)a2 + 17) + 64);
    do
    {
      WebCore::IDBValue::~IDBValue(v43, v17);
      v44 = *((unsigned int *)v43 - 2);
      if ((_DWORD)v44 != -1)
        ((void (*)(__int128 *, uint64_t))v8[v44])(&v48, (uint64_t)v43 - 24);
      *((_DWORD *)v43 - 2) = -1;
      v45 = *((unsigned int *)v43 - 10);
      if ((_DWORD)v45 != -1)
        ((void (*)(__int128 *, uint64_t))v8[v45])(&v48, (uint64_t)v43 - 56);
      *((_DWORD *)v43 - 10) = -1;
      v43 = (WebCore::IDBValue *)((char *)v43 + 104);
      v42 -= 104;
    }
    while (v42);
  }
  result = (WTF *)*((_QWORD *)a2 + 17);
  if (result)
  {
    *((_QWORD *)a2 + 17) = 0;
    *((_DWORD *)a2 + 36) = 0;
    result = (WTF *)WTF::fastFree(result, v17);
  }
  *((_QWORD *)a2 + 17) = v47;
  *((_DWORD *)a2 + 36) = v23;
  *((_DWORD *)a2 + 37) = v25;
  return result;
}

_QWORD *WebCore::IDBKeyData::isolatedCopy@<X0>(WebCore::IDBKeyData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  WebCore::IDBIndex *v6;
  WebCore::ScriptExecutionContext *v7;
  const WebCore::IDBIndexInfo *v8;
  uint64_t *v9;
  _QWORD v10[2];
  int v11;
  char v12;
  char *v13;

  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 == -1)
  {
    v6 = (WebCore::IDBIndex *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::IDBIndex::create(v6, v7, v8, v9);
  }
  else
  {
    v13 = &v12;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v3])(v10, &v13, (char *)this + 8);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 24) = -1;
    v5 = v11;
    if (v11 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v11])(&v13, a2 + 8, v10);
      *(_DWORD *)(a2 + 24) = v5;
      if (v11 != -1)
        return (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v11])(&v13, v10);
    }
  }
  return result;
}

_QWORD *WebCore::IDBIndex::create@<X0>(WebCore::IDBIndex *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, const WebCore::IDBIndexInfo *a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::ContextDestructionObserver *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _BYTE v19[24];
  uint64_t v20;

  v9 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v10 = (uint64_t)v9;
  if (!*((_BYTE *)this + 274))
  {
    v11 = (char *)this - 192;
    v12 = *((_QWORD *)this + 64);
    if (v12)
    {
      v13 = *(char **)(v12 + 8);
      if (v13)
        v11 = v13;
    }
    this = (WebCore::IDBIndex *)(v11 + 192);
  }
  *(_QWORD *)v9 = &off_1E33A18C0;
  *((_QWORD *)v9 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v9, this);
  *(_QWORD *)v10 = &off_1E33A0540;
  *(_QWORD *)(v10 + 16) = 0;
  if (*((_BYTE *)this + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195368C98);
  }
  v20 = v10;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 16, &v20, (uint64_t)v19);
  *(_QWORD *)v10 = &off_1E3357660;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a2;
  v14 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v14)
    *v14 += 2;
  *(_BYTE *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 40) = v14;
  *(_DWORD *)(v10 + 64) = -1;
  v15 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v15])(v19);
    *(_DWORD *)(v10 + 64) = v15;
  }
  *(_WORD *)(v10 + 72) = *((_WORD *)a2 + 24);
  *(_OWORD *)(v10 + 80) = *(_OWORD *)a2;
  v16 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v16)
    *v16 += 2;
  *(_BYTE *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 96) = v16;
  *(_DWORD *)(v10 + 120) = -1;
  v17 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v17])(v19);
    *(_DWORD *)(v10 + 120) = v17;
  }
  *(_WORD *)(v10 + 128) = *((_WORD *)a2 + 24);
  *(_BYTE *)(v10 + 136) = 0;
  *(_QWORD *)(v10 + 144) = a3;
  *a4 = v10;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v10);
}

void WebCore::IDBIndex::~IDBIndex(WebCore::IDBIndex *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;
  char v8;

  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v3])(&v7, (char *)this + 104);
  *((_DWORD *)this + 30) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v5])(&v8, (char *)this + 48);
  *((_DWORD *)this + 16) = -1;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBIndex::~IDBIndex(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::IDBIndex::virtualHasPendingActivity(WebCore::IDBIndex *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 18);
  if (v1[2])
    return 1;
  else
    return (*(uint64_t (**)(_QWORD *))(*v1 + 64))(v1);
}

uint64_t WebCore::IDBIndex::setName@<X0>(WebCore::IDBIndex *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  int v23;
  BOOL v24;
  int v25;
  _BOOL4 v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_BYTE *)this + 136)
    || (v6 = *((_QWORD *)this + 18), *(_BYTE *)(v6 + 160))
    || (v7 = *(_QWORD *)(v6 + 152), *(_BYTE *)(v7 + 96) != 2))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v7 + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 27;
LABEL_7:
    *(_BYTE *)a4 = v9;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  result = WTF::equal(*((WTF **)this + 5), *a2, a3);
  if ((_DWORD)result)
  {
LABEL_37:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *((_QWORD *)this + 18);
  v13 = *(_QWORD *)(v12 + 80);
  if (!v13)
  {
    v16 = 0;
    v14 = 0;
LABEL_19:
    v15 = v13 + (v14 << 6);
    goto LABEL_20;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + (v14 << 6);
  if (!*(_DWORD *)(v13 - 12))
  {
    v16 = v13 + (v14 << 6);
    goto LABEL_19;
  }
  v16 = *(_QWORD *)(v12 + 80);
  if ((_DWORD)v14)
  {
    v17 = v14 << 6;
    v16 = *(_QWORD *)(v12 + 80);
    while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
    {
      v16 += 64;
      v17 -= 64;
      if (!v17)
      {
        v16 = v15;
        break;
      }
    }
  }
LABEL_20:
  if (v13)
    v18 = v13 + ((unint64_t)*(unsigned int *)(v13 - 4) << 6);
  else
    v18 = 0;
  if (v18 == v16)
  {
LABEL_32:
    WebCore::IDBDatabase::renameIndex(*(WebCore::IDBDatabase **)(*(_QWORD *)(v12 + 152) + 72), this, (const WTF::String *)a2);
    v21 = *a2;
    if (*a2)
      *(_DWORD *)v21 += 2;
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v21;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_37;
  }
  while (1)
  {
    result = WTF::equal(*(WTF **)(v16 + 24), *a2, v11);
    if ((result & 1) != 0)
      break;
    v19 = v16 + 64;
    v16 = v15;
    if (v19 != v15)
    {
      v16 = v19;
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 64;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
    if (v16 == v18)
    {
      v12 = *((_QWORD *)this + 18);
      goto LABEL_32;
    }
  }
  v22 = *a2;
  if (*a2)
  {
    v23 = *((_DWORD *)v22 + 1);
    *(_DWORD *)v22 += 2;
    if (v23 < 0)
    {
LABEL_53:
      v29 = 0;
LABEL_54:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = __OFADD__(v23, 2);
  v25 = v23 + 2;
  if (v24)
    goto LABEL_53;
  result = (v25 + 94);
  if (__OFADD__(v25, 94))
    goto LABEL_53;
  v26 = !v22 || (*((_BYTE *)v22 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v26, (int8x16_t *)"Failed set property 'name' on 'IDBIndex': The owning object store already has an index named '", 0x5Eu, (uint64_t)v22, (int8x16_t *)"'.", 2u, &v29);
  v28 = v29;
  if (!v29)
    goto LABEL_54;
  *(_BYTE *)a4 = 25;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = 1;
  v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      return WTF::StringImpl::destroy(v22, v27);
    else
      *(_DWORD *)v22 -= 2;
  }
  return result;
}

uint64_t WebCore::IDBIndex::rollbackInfoForVersionChangeAbort(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v2 = *(_QWORD *)(this + 144);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 152) + 72) + 112);
  if (v3)
  {
    v4 = this;
    v5 = *(_QWORD *)(v2 + 24);
    v6 = *(_DWORD *)(v3 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = (uint64_t *)(v3 + 72 * v10);
    v12 = *v11;
    if (*v11 != v5)
    {
      v13 = 1;
      while (v12)
      {
        v10 = (v10 + v13) & v6;
        v11 = (uint64_t *)(v3 + 72 * v10);
        v12 = *v11;
        ++v13;
        if (*v11 == v5)
          goto LABEL_8;
      }
      v11 = (uint64_t *)(v3 + 72 * *(unsigned int *)(v3 - 4));
    }
LABEL_8:
    if (v11 != (uint64_t *)(v3 + 72 * *(unsigned int *)(v3 - 4)))
    {
      v14 = v11[8];
      if (!v14)
      {
LABEL_22:
        v26 = 1;
LABEL_26:
        *(_BYTE *)(v4 + 136) = v26;
        return this;
      }
      v15 = *(_QWORD *)(this + 24);
      v16 = *(_DWORD *)(v14 - 8);
      v17 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = *(_QWORD *)(v14 + ((unint64_t)v20 << 6));
      if (v21 != v15)
      {
        v22 = 1;
        while (v21)
        {
          v20 = (v20 + v22) & v16;
          v21 = *(_QWORD *)(v14 + ((unint64_t)v20 << 6));
          ++v22;
          if (v21 == v15)
            goto LABEL_14;
        }
        goto LABEL_22;
      }
LABEL_14:
      *(_OWORD *)(this + 24) = *(_OWORD *)(this + 80);
      v23 = *(_DWORD **)(this + 96);
      if (v23)
        *v23 += 2;
      this = *(_QWORD *)(this + 40);
      *(_QWORD *)(v4 + 40) = v23;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v24 = *(unsigned int *)(v4 + 64);
      v25 = *(unsigned int *)(v4 + 120);
      if ((_DWORD)v24 == -1)
      {
        if ((_DWORD)v25 == -1)
          goto LABEL_25;
      }
      else if ((_DWORD)v25 == -1)
      {
        this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v24])(&v28, v4 + 48);
        *(_DWORD *)(v4 + 64) = -1;
LABEL_25:
        v26 = 0;
        *(_WORD *)(v4 + 72) = *(_WORD *)(v4 + 128);
        goto LABEL_26;
      }
      v27 = v4 + 48;
      this = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSD_SJ_EEEDcmSL_DpOT0____fdiagonal[v25])(&v27);
      goto LABEL_25;
    }
  }
  return this;
}

uint64_t WebCore::IDBIndex::doOpenCursor@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[16];
  int v27;
  char v28;
  _BYTE v29[16];
  int v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  _BYTE v35[8];
  _BYTE v36[16];
  int v37;
  char v38;
  _BYTE v39[16];
  int v40;
  __int16 v41;
  const WebCore::IDBKey **v42;
  uint64_t v43;
  int v44;
  char v45;

  if (*(_BYTE *)(a1 + 136) || (v6 = *(_QWORD *)(a1 + 144), *(_BYTE *)(v6 + 160)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 8;
LABEL_4:
    *(_BYTE *)a4 = v8;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(v6 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
    goto LABEL_4;
  }
  (*(void (**)(const WebCore::IDBKey ***__return_ptr))(**(_QWORD **)a3 + 16))(&v42);
  if (v44)
  {
    if (v44 != 1)
    {
      v20 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBIndex::doOpenKeyCursor(v20);
    }
    v10 = v43;
    v43 = 0;
    *(_BYTE *)a4 = (_BYTE)v42;
    *(_QWORD *)(a4 + 8) = v10;
    v11 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3357800[v11])(v21, &v42);
  }
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v35, v42);
  if (!v37)
  {
    v35[0] = 0;
    v37 = 7;
  }
  if (!v40)
  {
    v38 = 0;
    v40 = 8;
  }
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(v12 + 152);
  v14 = *(_QWORD *)(v12 + 24);
  v15 = *(_QWORD *)(a1 + 24);
  v21[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 72) + 8);
  do
  {
    v16 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v17 = v16 + 2;
  }
  while (__stlxr(v17, &WebCore::nextClientResourceNumber(void)::currentNumber));
  v21[1] = v17;
  v22 = *(_OWORD *)(v13 + 80);
  v23 = v14;
  v24 = v15;
  v25 = v35[0];
  v26[0] = 0;
  v27 = -1;
  v18 = v37;
  if (v37 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v37])(&v45, v26, v36);
    v27 = v18;
  }
  v28 = v38;
  v29[0] = 0;
  v30 = -1;
  v19 = v40;
  if (v40 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v40])(&v45, v29, v39);
    v30 = v19;
  }
  v31 = v41;
  v32 = 0;
  v33 = a2;
  v34 = 0;
  result = (uint64_t)WebCore::IDBTransaction::requestOpenCursor(*(WebCore::IDBTransaction **)(*(_QWORD *)(a1 + 144) + 152), (WebCore::IDBIndex *)a1, (const WebCore::IDBCursorInfo *)v21, (uint64_t *)a4);
  *(_DWORD *)(a4 + 16) = 0;
  if (v30 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v30])(&v45, v29);
  v30 = -1;
  if (v27 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v27])(&v45, v26);
  if (v40 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v40])(v21, v39);
  v40 = -1;
  if (v37 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v37])(v21, v36);
  v11 = v44;
  if (v44 != -1)
    return ((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3357800[v11])(v21, &v42);
  return result;
}

uint64_t WebCore::IDBIndex::doOpenKeyCursor@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  WebCore::IDBIndex *v20;
  const WebCore::IDBKeyRangeData *v21;
  uint64_t v22;
  char v23[8];
  _BYTE v24[16];
  int v25;
  char v26;
  _BYTE v27[16];
  int v28;
  __int16 v29;
  _QWORD v30[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _BYTE v35[16];
  int v36;
  char v37;
  _BYTE v38[16];
  int v39;
  __int16 v40;
  char v41;
  char v42;
  char v43;
  const WebCore::IDBKey **v44;
  uint64_t v45;
  int v46;
  char v47;

  if (*(_BYTE *)(a1 + 136) || (v6 = *(_QWORD *)(a1 + 144), *(_BYTE *)(v6 + 160)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 8;
LABEL_4:
    *(_BYTE *)a4 = v8;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(v6 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
    goto LABEL_4;
  }
  (*(void (**)(const WebCore::IDBKey ***__return_ptr))(**(_QWORD **)a3 + 16))(&v44);
  if (v46)
  {
    if (v46 != 1)
    {
      v20 = (WebCore::IDBIndex *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBIndex::doCount(v20, v21, v22);
    }
    v10 = v45;
    v45 = 0;
    *(_BYTE *)a4 = (_BYTE)v44;
    *(_QWORD *)(a4 + 8) = v10;
    v11 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3357800[v11])(v30, &v44);
  }
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(v12 + 152);
  v14 = *(_QWORD *)(v12 + 24);
  v15 = *(_QWORD *)(a1 + 24);
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v23, v44);
  v30[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 72) + 8);
  do
  {
    v16 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v17 = v16 + 2;
  }
  while (__stlxr(v17, &WebCore::nextClientResourceNumber(void)::currentNumber));
  v30[1] = v17;
  v31 = *(_OWORD *)(v13 + 80);
  v32 = v14;
  v33 = v15;
  v34 = v23[0];
  v35[0] = 0;
  v36 = -1;
  v18 = v25;
  if (v25 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v25])(&v47, v35, v24);
    v36 = v18;
  }
  v37 = v26;
  v38[0] = 0;
  v39 = -1;
  v19 = v28;
  if (v28 == -1)
  {
    v40 = v29;
    v41 = 0;
    v42 = a2;
    v43 = 1;
  }
  else
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v28])(&v47, v38, v27);
    v39 = v19;
    v40 = v29;
    v41 = 0;
    v42 = a2;
    v43 = 1;
    if (v28 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v28])(&v47, v27);
  }
  v28 = -1;
  if (v25 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v25])(&v47, v24);
  result = (uint64_t)WebCore::IDBTransaction::requestOpenCursor(*(WebCore::IDBTransaction **)(*(_QWORD *)(a1 + 144) + 152), (WebCore::IDBIndex *)a1, (const WebCore::IDBCursorInfo *)v30, (uint64_t *)a4);
  *(_DWORD *)(a4 + 16) = 0;
  if (v39 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v39])(v23, v38);
  v39 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v36])(v23, v35);
  v11 = v46;
  if (v46 != -1)
    return ((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3357800[v11])(v30, &v44);
  return result;
}

uint64_t WebCore::IDBIndex::doCount@<X0>(WebCore::IDBIndex *this@<X0>, const WebCore::IDBKeyRangeData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  int v8;
  WebCore::IDBTransaction *v9;

  if (*((_BYTE *)this + 136) || (v5 = *((_QWORD *)this + 18), *(_BYTE *)(v5 + 160)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 8;
  }
  else
  {
    v9 = *(WebCore::IDBTransaction **)(v5 + 152);
    if (*((_BYTE *)v9 + 136))
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = 27;
    }
    else
    {
      if (*((_DWORD *)a2 + 6) | *((_DWORD *)a2 + 14)
        && ((WebCore::IDBKeyData::isValid(a2) & 1) != 0 || !*((_DWORD *)a2 + 6))
        && ((WebCore::IDBKeyData::isValid((const WebCore::IDBKeyRangeData *)((char *)a2 + 32)) & 1) != 0
         || !*((_DWORD *)a2 + 14)))
      {
        result = (uint64_t)WebCore::IDBTransaction::requestCount(v9, this, a2, (WebCore::IDBRequest **)a3);
        v8 = 0;
        goto LABEL_5;
      }
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = 26;
    }
  }
  *(_BYTE *)a3 = v7;
  v8 = 1;
LABEL_5:
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t WebCore::IDBIndex::count@<X0>(WebCore::IDBIndex *a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  const WebCore::IDBKey *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  WebCore::IDBKey *v18;
  char v19;

  WebCore::createIDBKeyFromValue(&v18, a2, a3);
  v6 = (unsigned int *)v18;
  if (WebCore::IDBKey::isValid(v18))
    v7 = (const WebCore::IDBKey *)v6;
  else
    v7 = 0;
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v11, v7);
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v14, v7);
  v17 = 0;
  result = WebCore::IDBIndex::doCount(a1, (const WebCore::IDBKeyRangeData *)v11, a4);
  if (v16 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v16])(&v19, &v15);
  v16 = -1;
  if (v13 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v13])(&v19, &v12);
  if (v6)
  {
    if (*v6 == 1)
    {
      v10 = v6[6];
      if ((_DWORD)v10 != -1)
        ((void (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v10])(v11, v6 + 2);
      v6[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v6, v9);
    }
    else
    {
      --*v6;
    }
  }
  return result;
}

uint64_t WebCore::IDBIndex::get@<X0>(WebCore::IDBIndex *this@<X0>, const WebCore::IDBKey **a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  uint64_t result;
  char v8[8];
  _BYTE v9[16];
  int v10;
  char v11;
  _BYTE v12[16];
  int v13;
  __int16 v14;
  char v15;
  char v16[8];
  char v17[16];
  int v18;
  char v19;
  char v20[16];
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v8, a2);
  v16[0] = v8[0];
  v17[0] = 0;
  v18 = -1;
  v5 = v10;
  if (v10 != -1)
  {
    ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v10])(&v15, v17, v9);
    v18 = v5;
  }
  v19 = v11;
  v20[0] = 0;
  v21 = -1;
  v6 = v13;
  if (v13 != -1)
  {
    ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(&v15, v20, v12);
    v21 = v6;
  }
  v22 = v14;
  v23 = 0;
  result = WebCore::IDBIndex::doGet((uint64_t)this, v16, a3);
  if (v23 != -1)
    result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v15, v16);
  v23 = -1;
  if (v13 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v13])(&v15, v12);
  v13 = -1;
  if (v10 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v10])(&v15, v9);
  return result;
}

uint64_t WebCore::IDBIndex::doGet@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::IDBIndex *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE v16[8];
  _BYTE v17[16];
  int v18;
  char v19;
  _BYTE v20[16];
  int v21;
  __int16 v22;
  char v23;

  if (*(_BYTE *)(result + 136)
    || (v4 = (WebCore::IDBIndex *)result, v5 = *(_QWORD *)(result + 144), *(_BYTE *)(v5 + 160)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_4:
    *(_BYTE *)a3 = v6;
LABEL_5:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v7 = *(_QWORD *)(v5 + 152);
  if (*(_BYTE *)(v7 + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_4;
  }
  v9 = *((_DWORD *)a2 + 18);
  if (v9)
  {
    if (v9 != 1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBIndex::get(v15);
    }
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_BYTE *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
    goto LABEL_5;
  }
  v16[0] = *a2;
  v17[0] = 0;
  v18 = -1;
  v12 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v12])(&v23, v17, a2 + 8);
    v18 = v12;
  }
  v19 = a2[32];
  v20[0] = 0;
  v21 = -1;
  v13 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v13 == -1)
  {
    v22 = *((_WORD *)a2 + 32);
LABEL_18:
    result = (uint64_t)WebCore::IDBTransaction::requestIndexRecord((_QWORD *)v7, v4, 1, (uint64_t)v16, (WebCore::IDBRequest **)a3);
    v14 = v21;
    *(_DWORD *)(a3 + 16) = 0;
    if (v14 == -1)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(char *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(&v23, v20, a2 + 40);
  v21 = v13;
  v22 = *((_WORD *)a2 + 32);
  v14 = v18 | v13;
  if (v18 | v13)
    goto LABEL_18;
  *(_BYTE *)a3 = 26;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_19:
  result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v14])(&v23, v20);
LABEL_20:
  v21 = -1;
  if (v18 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v18])(&v23, v17);
  return result;
}

uint64_t WebCore::IDBIndex::get@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  int v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  char v12[8];
  _BYTE v13[16];
  int v14;
  char v15[8];
  _BYTE v16[16];
  int v17;
  __int16 v18;
  WebCore::IDBKey *v19;
  char v20;
  char v21[8];
  char v22[16];
  int v23;
  char v24;
  char v25[16];
  int v26;
  __int16 v27;
  int v28;
  char v29[72];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  WebCore::createIDBKeyFromValue(&v19, a2, a3);
  v6 = (unsigned int *)v19;
  if ((WebCore::IDBKey::isValid(v19) & 1) != 0)
  {
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v12, (const WebCore::IDBKey *)v6);
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v15, (const WebCore::IDBKey *)v6);
    v18 = 0;
    v21[0] = v12[0];
    v22[0] = 0;
    v23 = -1;
    v7 = v14;
    if (v14 != -1)
    {
      ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v14])(&v20, v22, v13);
      v23 = v7;
    }
    v24 = v15[0];
    v25[0] = 0;
    v26 = -1;
    v8 = v17;
    if (v17 != -1)
    {
      ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v17])(&v20, v25, v16);
      v26 = v8;
    }
    v27 = v18;
    v28 = 0;
    result = WebCore::IDBIndex::doGet(a1, v21, a4);
    if (v28 != -1)
      result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v20, v21);
    v28 = -1;
    if (v17 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v17])(&v20, v16);
    v17 = -1;
    if (v14 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v14])(&v20, v13);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29[0] = 26;
    v30 = 1;
    result = WebCore::IDBIndex::doGet(a1, v29, a4);
    if (v30 != -1)
      result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v30])(v12, v29);
    v30 = -1;
  }
  if (v6)
  {
    if (*v6 == 1)
    {
      v11 = v6[6];
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v11])(v12, v6 + 2);
      v6[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v6, v10);
    }
    else
    {
      --*v6;
    }
  }
  return result;
}

uint64_t WebCore::IDBIndex::getKey@<X0>(WebCore::IDBIndex *this@<X0>, const WebCore::IDBKey **a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  uint64_t result;
  char v8[8];
  _BYTE v9[16];
  int v10;
  char v11;
  _BYTE v12[16];
  int v13;
  __int16 v14;
  char v15;
  char v16[8];
  char v17[16];
  int v18;
  char v19;
  char v20[16];
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v8, a2);
  v16[0] = v8[0];
  v17[0] = 0;
  v18 = -1;
  v5 = v10;
  if (v10 != -1)
  {
    ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v10])(&v15, v17, v9);
    v18 = v5;
  }
  v19 = v11;
  v20[0] = 0;
  v21 = -1;
  v6 = v13;
  if (v13 != -1)
  {
    ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(&v15, v20, v12);
    v21 = v6;
  }
  v22 = v14;
  v23 = 0;
  result = WebCore::IDBIndex::doGetKey((uint64_t)this, v16, a3);
  if (v23 != -1)
    result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v15, v16);
  v23 = -1;
  if (v13 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v13])(&v15, v12);
  v13 = -1;
  if (v10 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v10])(&v15, v9);
  return result;
}

uint64_t WebCore::IDBIndex::doGetKey@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::IDBIndex *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE v16[8];
  _BYTE v17[16];
  int v18;
  char v19;
  _BYTE v20[16];
  int v21;
  __int16 v22;
  char v23;

  if (*(_BYTE *)(result + 136)
    || (v4 = (WebCore::IDBIndex *)result, v5 = *(_QWORD *)(result + 144), *(_BYTE *)(v5 + 160)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_4:
    *(_BYTE *)a3 = v6;
LABEL_5:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v7 = *(_QWORD *)(v5 + 152);
  if (*(_BYTE *)(v7 + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_4;
  }
  v9 = *((_DWORD *)a2 + 18);
  if (v9)
  {
    if (v9 != 1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBIndex::getKey(v15);
    }
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_BYTE *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
    goto LABEL_5;
  }
  v16[0] = *a2;
  v17[0] = 0;
  v18 = -1;
  v12 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v12])(&v23, v17, a2 + 8);
    v18 = v12;
  }
  v19 = a2[32];
  v20[0] = 0;
  v21 = -1;
  v13 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v13 == -1)
  {
    v22 = *((_WORD *)a2 + 32);
LABEL_18:
    result = (uint64_t)WebCore::IDBTransaction::requestIndexRecord((_QWORD *)v7, v4, 0, (uint64_t)v16, (WebCore::IDBRequest **)a3);
    v14 = v21;
    *(_DWORD *)(a3 + 16) = 0;
    if (v14 == -1)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(char *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(&v23, v20, a2 + 40);
  v21 = v13;
  v22 = *((_WORD *)a2 + 32);
  v14 = v18 | v13;
  if (v18 | v13)
    goto LABEL_18;
  *(_BYTE *)a3 = 26;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_19:
  result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v14])(&v23, v20);
LABEL_20:
  v21 = -1;
  if (v18 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v18])(&v23, v17);
  return result;
}

uint64_t WebCore::IDBIndex::getKey@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  int v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  char v12[8];
  _BYTE v13[16];
  int v14;
  char v15[8];
  _BYTE v16[16];
  int v17;
  __int16 v18;
  WebCore::IDBKey *v19;
  char v20;
  char v21[8];
  char v22[16];
  int v23;
  char v24;
  char v25[16];
  int v26;
  __int16 v27;
  int v28;
  char v29[72];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  WebCore::createIDBKeyFromValue(&v19, a2, a3);
  v6 = (unsigned int *)v19;
  if ((WebCore::IDBKey::isValid(v19) & 1) != 0)
  {
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v12, (const WebCore::IDBKey *)v6);
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v15, (const WebCore::IDBKey *)v6);
    v18 = 0;
    v21[0] = v12[0];
    v22[0] = 0;
    v23 = -1;
    v7 = v14;
    if (v14 != -1)
    {
      ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v14])(&v20, v22, v13);
      v23 = v7;
    }
    v24 = v15[0];
    v25[0] = 0;
    v26 = -1;
    v8 = v17;
    if (v17 != -1)
    {
      ((void (*)(char *, char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v17])(&v20, v25, v16);
      v26 = v8;
    }
    v27 = v18;
    v28 = 0;
    result = WebCore::IDBIndex::doGetKey(a1, v21, a4);
    if (v28 != -1)
      result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v20, v21);
    v28 = -1;
    if (v17 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v17])(&v20, v16);
    v17 = -1;
    if (v14 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v14])(&v20, v13);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29[0] = 26;
    v30 = 1;
    result = WebCore::IDBIndex::doGetKey(a1, v29, a4);
    if (v30 != -1)
      result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v30])(v12, v29);
    v30 = -1;
  }
  if (v6)
  {
    if (*v6 == 1)
    {
      v11 = v6[6];
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v11])(v12, v6 + 2);
      v6[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v6, v10);
    }
    else
    {
      --*v6;
    }
  }
  return result;
}

uint64_t WebCore::IDBIndex::doGetAll@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  WebCore::IDBRequest *v19;
  WebCore::IDBKeyRange *v20;
  uint64_t v21;
  int v22;
  char v23;

  if (*(_BYTE *)(a1 + 136) || (v6 = *(_QWORD *)(a1 + 144), *(_BYTE *)(v6 + 160)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 8;
LABEL_4:
    *(_BYTE *)a4 = v8;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(v6 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
    goto LABEL_4;
  }
  (*(void (**)(WebCore::IDBKeyRange **__return_ptr))(**(_QWORD **)a3 + 16))(&v20);
  if (v22)
  {
    if (v22 != 1)
    {
      v13 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBIndex::doGetAllKeys(v13);
    }
    v10 = v21;
    v21 = 0;
    *(_BYTE *)a4 = (_BYTE)v20;
    *(_QWORD *)(a4 + 8) = v10;
    v11 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(uint64_t *, WebCore::IDBKeyRange **))off_1E3357800[v11])(&v14, &v20);
  }
  v12 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 152);
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)&v14, (const WebCore::IDBKey **)v20);
  result = (uint64_t)WebCore::IDBTransaction::requestGetAllIndexRecords(v12, (WebCore::IDBIndex *)a1, (uint64_t)&v14, 1, a2, &v19);
  *(_QWORD *)a4 = v19;
  *(_DWORD *)(a4 + 16) = 0;
  v19 = 0;
  if (v18 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v18])(&v23, &v17);
  v18 = -1;
  if (v16 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v16])(&v23, &v15);
  v11 = v22;
  if (v22 != -1)
    return ((uint64_t (*)(uint64_t *, WebCore::IDBKeyRange **))off_1E3357800[v11])(&v14, &v20);
  return result;
}

uint64_t WebCore::IDBIndex::doGetAllKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  WebCore::IDBRequest *v19;
  WebCore::IDBKeyRange *v20;
  uint64_t v21;
  int v22;
  char v23;

  if (*(_BYTE *)(a1 + 136) || (v6 = *(_QWORD *)(a1 + 144), *(_BYTE *)(v6 + 160)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 8;
LABEL_4:
    *(_BYTE *)a4 = v8;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(v6 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
    goto LABEL_4;
  }
  (*(void (**)(WebCore::IDBKeyRange **__return_ptr))(**(_QWORD **)a3 + 16))(&v20);
  if (v22)
  {
    if (v22 != 1)
    {
      v13 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBIndex::ref(v13);
    }
    v10 = v21;
    v21 = 0;
    *(_BYTE *)a4 = (_BYTE)v20;
    *(_QWORD *)(a4 + 8) = v10;
    v11 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(uint64_t *, WebCore::IDBKeyRange **))off_1E3357800[v11])(&v14, &v20);
  }
  v12 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 152);
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)&v14, (const WebCore::IDBKey **)v20);
  result = (uint64_t)WebCore::IDBTransaction::requestGetAllIndexRecords(v12, (WebCore::IDBIndex *)a1, (uint64_t)&v14, 0, a2, &v19);
  *(_QWORD *)a4 = v19;
  *(_DWORD *)(a4 + 16) = 0;
  v19 = 0;
  if (v18 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v18])(&v23, &v17);
  v18 = -1;
  if (v16 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v16])(&v23, &v15);
  v11 = v22;
  if (v22 != -1)
    return ((uint64_t (*)(uint64_t *, WebCore::IDBKeyRange **))off_1E3357800[v11])(&v14, &v20);
  return result;
}

uint64_t WebCore::IDBIndex::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(this + 144) + 152) + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::IDBIndex::deref(WebCore::IDBIndex *this, WTF::StringImpl *a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  result = *(unsigned int **)(*((_QWORD *)this + 18) + 152);
  v3 = result + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, result + 6);
    WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, a2);
    return (unsigned int *)bmalloc::api::isoDeallocate(v6, v7);
  }
  return result;
}

_BYTE *WebCore::IDBKey::createBinary@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  _BYTE *result;
  void *v9;
  _BYTE *v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  WTF *v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    *(_DWORD *)v3 += 2;
  v4 = bmalloc::api::isoAllocate();
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v6)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v5 = (v5 & 0x3FFFFFFFFLL) + v6;
    }
  }
  if (*(_BYTE *)(v3 + 64) && (v21 = *(_QWORD *)(v3 + 32)) != 0)
    v7 = *(WTF **)(v21 + 32);
  else
    v7 = *(WTF **)(v3 + 48);
  result = (_BYTE *)WTF::fastMalloc((WTF *)0x18);
  v10 = result;
  *(_DWORD *)result = 1;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_DWORD *)result + 5) = (_DWORD)v7;
  if (v7)
  {
    if ((unint64_t)v7 >> 32)
    {
      __break(0xC471u);
      return result;
    }
    result = (_BYTE *)WTF::fastMalloc(v7);
    *((_DWORD *)v10 + 4) = (_DWORD)v7;
    *((_QWORD *)v10 + 1) = result;
    do
    {
      v11 = *(_BYTE *)v5++;
      *result++ = v11;
      v7 = (WTF *)((char *)v7 - 1);
    }
    while (v7);
  }
  *(_DWORD *)v4 = 1;
  *(_BYTE *)(v4 + 4) = 2;
  do
    v12 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v12 + 1, (unsigned int *)v10));
  *(_QWORD *)(v4 + 8) = v10;
  *(_DWORD *)(v4 + 24) = 3;
  *(_QWORD *)(v4 + 32) = *((unsigned int *)v10 + 5) + 16;
  *a2 = v4;
  do
  {
    v13 = __ldaxr((unsigned int *)v10);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v10));
  if (v14)
  {
    if (!v3)
      return result;
    goto LABEL_19;
  }
  atomic_store(1u, (unsigned int *)v10);
  v16 = (WTF *)*((_QWORD *)v10 + 1);
  if (v16)
  {
    *((_QWORD *)v10 + 1) = 0;
    *((_DWORD *)v10 + 4) = 0;
    WTF::fastFree(v16, v9);
  }
  result = (_BYTE *)WTF::fastFree((WTF *)v10, v9);
  if (v3)
  {
LABEL_19:
    v15 = *(_DWORD *)v3 == 2;
    *(_DWORD *)v3 -= 2;
    if (v15)
    {
      v17 = *(_QWORD *)(v3 + 80);
      if (v17)
      {
        *(_QWORD *)(v17 + 8) = 3;
        *(_QWORD *)(v3 + 80) = 0;
      }
      if ((*(_BYTE *)(v3 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 16));
      v19 = *(WTF **)(v3 + 8);
      if ((v19 & 1) == 0 && v19)
      {
        v20 = *(WTF **)v19;
        if (*(_QWORD *)v19)
        {
          *(_QWORD *)v19 = 0;
          *((_DWORD *)v19 + 2) = 0;
          WTF::fastFree(v20, v18);
        }
        WTF::fastFree(v19, v18);
      }
      return (_BYTE *)WTF::fastFree((WTF *)v3, v18);
    }
  }
  return result;
}

uint64_t WebCore::IDBKey::createBinary@<X0>(WebCore::IDBKey *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  WTF *v6;
  WTF *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  JSC::ArrayBufferView *v18;

  JSC::JSArrayBufferView::possiblySharedImpl(this);
  if (v18)
  {
    v4 = bmalloc::api::isoAllocate();
    v5 = (char *)JSC::ArrayBufferView::span(v18);
    v7 = v6;
    result = WTF::fastMalloc((WTF *)0x18);
    v10 = result;
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = (_DWORD)v7;
    if (v7)
    {
      if ((unint64_t)v7 >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v11 = (_BYTE *)WTF::fastMalloc(v7);
      *(_DWORD *)(v10 + 16) = (_DWORD)v7;
      *(_QWORD *)(v10 + 8) = v11;
      do
      {
        v12 = *v5++;
        *v11++ = v12;
        v7 = (WTF *)((char *)v7 - 1);
      }
      while (v7);
    }
    *(_DWORD *)v4 = 1;
    *(_BYTE *)(v4 + 4) = 2;
    do
      v13 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v13 + 1, (unsigned int *)v10));
    *(_QWORD *)(v4 + 8) = v10;
    *(_DWORD *)(v4 + 24) = 3;
    *(_QWORD *)(v4 + 32) = *(unsigned int *)(v10 + 20) + 16;
    *a2 = v4;
    do
    {
      v14 = __ldaxr((unsigned int *)v10);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v10));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v10);
      v16 = *(WTF **)(v10 + 8);
      if (v16)
      {
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = 0;
        WTF::fastFree(v16, v9);
      }
      WTF::fastFree((WTF *)v10, v9);
    }
  }
  else
  {
    v17 = bmalloc::api::isoAllocate();
    *(_DWORD *)v17 = 1;
    *(_BYTE *)(v17 + 4) = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_DWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = 16;
    *a2 = v17;
  }
  result = (uint64_t)v18;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      return JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v18;
  }
  return result;
}

void WebCore::IDBKey::~IDBKey(WebCore::IDBKey *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v2])(&v3, (char *)this + 8);
  *((_DWORD *)this + 6) = -1;
}

{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v2])(&v3, (char *)this + 8);
  *((_DWORD *)this + 6) = -1;
}

WebCore::IDBKeyData *WebCore::IDBKeyData::IDBKeyData(WebCore::IDBKeyData *this, const WebCore::IDBKey *a2)
{
  unsigned int **v3;
  int v4;
  uint64_t v5;
  const WebCore::IDBKey **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  WebCore::IDBKeyData *v21;
  const WebCore::IDBKey *v22;
  char v23[8];
  _BYTE v24[16];
  unsigned int v25;
  char v26;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (unsigned int **)((char *)this + 8);
  *((_DWORD *)this + 6) = 0;
  if (a2)
  {
    v4 = 1;
    switch(*((_BYTE *)a2 + 4))
    {
      case 0:
        goto LABEL_29;
      case 1:
        *v3 = 0;
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 2;
        if (*((_DWORD *)a2 + 6))
          goto LABEL_31;
        v5 = *((unsigned int *)a2 + 5);
        if (!(_DWORD)v5)
          return this;
        v6 = (const WebCore::IDBKey **)*((_QWORD *)a2 + 1);
        v7 = 8 * v5;
        break;
      case 2:
        if (*((_DWORD *)a2 + 6) != 3)
          goto LABEL_31;
        *((_DWORD *)this + 6) = -1;
        v17 = (unsigned int *)*((_QWORD *)a2 + 1);
        if (v17)
        {
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
        }
        *v3 = v17;
        v4 = 6;
        goto LABEL_29;
      case 3:
        if (*((_DWORD *)a2 + 6) != 1)
          goto LABEL_31;
        v19 = (unsigned int *)*((_QWORD *)a2 + 1);
        if (v19)
          *v19 += 2;
        *v3 = v19;
        v4 = 3;
        goto LABEL_29;
      case 4:
        if (*((_DWORD *)a2 + 6) != 2)
          goto LABEL_31;
        *v3 = (unsigned int *)*((_QWORD *)a2 + 1);
        v4 = 5;
        goto LABEL_29;
      case 5:
        if (*((_DWORD *)a2 + 6) != 2)
        {
LABEL_31:
          v21 = (WebCore::IDBKeyData *)std::__throw_bad_variant_access[abi:sn180100]();
          return (WebCore::IDBKeyData *)WebCore::IDBKeyData::IDBKeyData(v21, v22);
        }
        *v3 = (unsigned int *)*((_QWORD *)a2 + 1);
        v4 = 4;
LABEL_29:
        *((_DWORD *)this + 6) = v4;
        return this;
      default:
        return this;
    }
    while (1)
    {
      WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v23, *v6);
      v8 = *((unsigned int *)this + 5);
      if ((_DWORD)v8 == *((_DWORD *)this + 4))
        break;
      v14 = (uint64_t)&(*v3)[8 * v8];
      *(_BYTE *)v14 = v23[0];
      *(_BYTE *)(v14 + 8) = 0;
      v15 = v14 + 8;
      *(_DWORD *)(v14 + 24) = -1;
      v12 = (_DWORD *)(v14 + 24);
      LODWORD(v13) = v25;
      if (v25 != -1)
      {
        ((void (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v25])(&v26, v15, v24);
LABEL_11:
        *v12 = v13;
LABEL_12:
        v16 = v25;
        ++*((_DWORD *)this + 5);
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v16])(&v26, v24);
        goto LABEL_15;
      }
      ++*((_DWORD *)this + 5);
LABEL_15:
      ++v6;
      v7 -= 8;
      if (!v7)
        return this;
    }
    v9 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v8 + 1, (unint64_t)v23);
    v10 = *((_QWORD *)this + 1) + 32 * *((unsigned int *)this + 5);
    *(_BYTE *)v10 = *(_BYTE *)v9;
    *(_BYTE *)(v10 + 8) = 0;
    v11 = v10 + 8;
    *(_DWORD *)(v10 + 24) = -1;
    v12 = (_DWORD *)(v10 + 24);
    v13 = *(unsigned int *)(v9 + 24);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(&v26, v11, v9 + 8);
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  return this;
}

uint64_t WebCore::IDBKeyData::maybeCreateIDBKey@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::IDBKeyData *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  WTF *v13;
  uint64_t v14;
  bmalloc::api *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  bmalloc::api *v41;
  WTF *v42;
  uint64_t v43;
  char v44;

  v3 = *(_DWORD *)(this + 24);
  if (v3)
  {
    if (v3 == -1)
      v4 = -1;
    else
      v4 = *(unsigned int *)(this + 24);
    v5 = this;
    switch(v4)
    {
      case 0:
      case 1:
        this = bmalloc::api::isoAllocate();
        *(_DWORD *)this = 1;
        *(_BYTE *)(this + 4) = 0;
        *(_QWORD *)(this + 8) = 0;
        *(_QWORD *)(this + 16) = 0;
        *(_DWORD *)(this + 24) = 0;
        goto LABEL_7;
      case 2:
        v42 = 0;
        v43 = 0;
        if (v3 != 2)
          goto LABEL_67;
        v7 = *(unsigned int *)(this + 20);
        if (!(_DWORD)v7)
          goto LABEL_45;
        v8 = *(WebCore::IDBKeyData **)(this + 8);
        v9 = 32 * v7;
        do
        {
          WebCore::IDBKeyData::maybeCreateIDBKey((uint64_t *)&v41, v8);
          LODWORD(v11) = HIDWORD(v43);
          if (HIDWORD(v43) == (_DWORD)v43)
          {
            v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v42, HIDWORD(v43) + 1, (unint64_t)&v41);
            v11 = HIDWORD(v43);
            v13 = v42;
            v14 = *(_QWORD *)v12;
            *(_QWORD *)v12 = 0;
            *((_QWORD *)v13 + v11) = v14;
          }
          else
          {
            v15 = v41;
            v41 = 0;
            *((_QWORD *)v42 + HIDWORD(v43)) = v15;
          }
          HIDWORD(v43) = v11 + 1;
          v16 = (unsigned int *)v41;
          v41 = 0;
          if (v16)
          {
            if (*v16 == 1)
            {
              v17 = v16[6];
              if ((_DWORD)v17 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v17])(&v44, v16 + 2);
              v16[6] = -1;
              bmalloc::api::isoDeallocate((bmalloc::api *)v16, v10);
            }
            else
            {
              --*v16;
            }
          }
          v8 = (WebCore::IDBKeyData *)((char *)v8 + 32);
          v9 -= 32;
        }
        while (v9);
        if (HIDWORD(v43))
        {
          v26 = 0;
          v27 = v42;
          v28 = 8 * HIDWORD(v43);
          do
          {
            v29 = *(_QWORD *)v27;
            v27 = (WTF *)((char *)v27 + 8);
            v26 += *(_QWORD *)(v29 + 32);
            v28 -= 8;
          }
          while (v28);
          v30 = v26 + 16;
        }
        else
        {
LABEL_45:
          v30 = 16;
        }
        this = bmalloc::api::isoAllocate();
        v32 = this;
        *(_DWORD *)this = 1;
        *(_BYTE *)(this + 4) = 1;
        v33 = HIDWORD(v43);
        *(_QWORD *)(this + 8) = 0;
        *(_QWORD *)(this + 16) = 0;
        *(_DWORD *)(this + 20) = v33;
        if (!(_DWORD)v33)
          goto LABEL_53;
        if (v33 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19536B438);
        }
        this = WTF::fastMalloc((WTF *)(8 * v33));
        *(_DWORD *)(v32 + 16) = v33;
        *(_QWORD *)(v32 + 8) = this;
        v34 = v42;
        if (HIDWORD(v43))
        {
          v35 = 8 * HIDWORD(v43);
          do
          {
            v36 = *(unsigned int **)v34;
            if (*(_QWORD *)v34)
              ++*v36;
            *(_QWORD *)this = v36;
            this += 8;
            v34 = (WTF *)((char *)v34 + 8);
            v35 -= 8;
          }
          while (v35);
LABEL_53:
          v37 = HIDWORD(v43);
          *(_DWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = v30;
          *a2 = v32;
          v34 = v42;
          if ((_DWORD)v37)
          {
            v38 = 8 * v37;
            do
            {
              v39 = *(unsigned int **)v34;
              *(_QWORD *)v34 = 0;
              if (v39)
              {
                if (*v39 == 1)
                {
                  v40 = v39[6];
                  if ((_DWORD)v40 != -1)
                    ((void (*)(bmalloc::api **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v40])(&v41, v39 + 2);
                  v39[6] = -1;
                  this = bmalloc::api::isoDeallocate((bmalloc::api *)v39, v31);
                }
                else
                {
                  --*v39;
                }
              }
              v34 = (WTF *)((char *)v34 + 8);
              v38 -= 8;
            }
            while (v38);
            v34 = v42;
          }
          if (v34)
            goto LABEL_64;
        }
        else
        {
          *(_DWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = v30;
          *a2 = v32;
          if (v34)
          {
LABEL_64:
            v42 = 0;
            LODWORD(v43) = 0;
            return WTF::fastFree(v34, v31);
          }
        }
        break;
      case 3:
        if (v3 != 3)
          goto LABEL_67;
        this = bmalloc::api::isoAllocate();
        *(_DWORD *)this = 1;
        *(_BYTE *)(this + 4) = 3;
        v20 = *(_DWORD **)(v5 + 8);
        if (v20)
          *v20 += 2;
        *(_QWORD *)(this + 8) = v20;
        *(_DWORD *)(this + 24) = 1;
        v21 = *(_QWORD *)(v5 + 8);
        if (!v21)
          goto LABEL_7;
        v22 = 2 * *(unsigned int *)(v21 + 4);
        goto LABEL_38;
      case 4:
        if (v3 != 4)
          goto LABEL_67;
        v18 = *(_QWORD *)(this + 8);
        this = bmalloc::api::isoAllocate();
        *(_DWORD *)this = 1;
        v19 = 5;
        goto LABEL_32;
      case 5:
        if (v3 != 5)
          goto LABEL_67;
        v18 = *(_QWORD *)(this + 8);
        this = bmalloc::api::isoAllocate();
        *(_DWORD *)this = 1;
        v19 = 4;
LABEL_32:
        *(_BYTE *)(this + 4) = v19;
        *(_QWORD *)(this + 8) = v18;
        *(_DWORD *)(this + 24) = 2;
        v6 = 24;
        goto LABEL_39;
      case 6:
        if (v3 != 6)
        {
LABEL_67:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_68:
          __break(0xC471u);
          JUMPOUT(0x19536B430);
        }
        this = bmalloc::api::isoAllocate();
        *(_DWORD *)this = 1;
        *(_BYTE *)(this + 4) = 2;
        v23 = *(unsigned int **)(v5 + 8);
        if (v23)
        {
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
        }
        *(_QWORD *)(this + 8) = v23;
        *(_DWORD *)(this + 24) = 3;
        v25 = *(_QWORD *)(v5 + 8);
        if (v25)
        {
          v22 = *(unsigned int *)(v25 + 20);
LABEL_38:
          v6 = v22 + 16;
        }
        else
        {
LABEL_7:
          v6 = 16;
        }
LABEL_39:
        *(_QWORD *)(this + 32) = v6;
        *a2 = this;
        return this;
      case 7:
      case 8:
        goto LABEL_8;
      default:
        goto LABEL_68;
    }
  }
  else
  {
LABEL_8:
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::IDBKeyData::encode(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  unint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **, BOOL))(*(_QWORD *)a2 + 24))(a2, &v17, *(_DWORD *)(a1 + 24) == 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = v17;
    v6 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v6 == -1)
      v6 = -1;
    if (v6 >= 9)
    {
      __break(0xC471u);
      JUMPOUT(0x19536B770);
    }
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 56))(a2, &v16, qword_1968DE170[v6]);
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = *(_DWORD *)(a1 + 24);
    if (v8 == -1)
      v9 = -1;
    else
      v9 = *(unsigned int *)(a1 + 24);
    switch(v9)
    {
      case 0:
      case 1:
      case 7:
      case 8:
        return result;
      case 2:
        if (v8 != 2)
          goto LABEL_40;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(unsigned int *)(a1 + 20);
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 112))(a2, &v17);
        if ((_DWORD)v12)
        {
          v13 = 32 * v12;
          do
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
            WebCore::IDBKeyData::encode(v11, a2);
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
            v11 += 32;
            v13 -= 32;
          }
          while (v13);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
        goto LABEL_31;
      case 3:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (*(_DWORD *)(a1 + 24) != 3)
          goto LABEL_40;
        (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 80))(a2, &v17, a1 + 8);
        goto LABEL_31;
      case 4:
      case 5:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (*(_DWORD *)(a1 + 24) != 4)
          goto LABEL_40;
        (*(void (**)(uint64_t, WTF::StringImpl **, double))(*(_QWORD *)a2 + 72))(a2, &v17, *(double *)(a1 + 8));
        goto LABEL_31;
      case 6:
        if (v8 != 6)
        {
LABEL_40:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_41:
          __break(0xC471u);
          JUMPOUT(0x19536B794);
        }
        v14 = *(_QWORD *)(a1 + 8);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(uint64_t, WTF::StringImpl **, BOOL))(*(_QWORD *)a2 + 24))(a2, &v17, v14 != 0);
        result = v17;
        v17 = 0;
        if (!result)
          goto LABEL_29;
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          if (!v14)
            return result;
          goto LABEL_30;
        }
        *(_DWORD *)result -= 2;
LABEL_29:
        if (v14)
        {
LABEL_30:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, &v17, *(_QWORD *)(v14 + 8), *(unsigned int *)(v14 + 20));
LABEL_31:
          result = v17;
          v17 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
            else
              *(_DWORD *)result -= 2;
          }
          return result;
        }
        break;
      default:
        goto LABEL_41;
    }
  }
  return result;
}

uint64_t WebCore::IDBKeyData::decode(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned __int8 v10;
  WTF::StringImpl *v11;
  WTF **v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  char v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  WTF *v65;
  WTF::StringImpl *v66;
  char v67;
  WTF::StringImpl *v68;
  WTF *v69[2];
  int v70;
  char v71;

  v67 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, char *))(*(_QWORD *)a1 + 24))(a1, &v68, &v67);
  v6 = v68;
  v68 = 0;
  if (!v6)
  {
LABEL_4:
    if (v5)
      goto LABEL_5;
LABEL_27:
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v6, v4);
  if (!v5)
    goto LABEL_27;
LABEL_5:
  if (v67)
  {
LABEL_6:
    LOBYTE(v7) = 1;
    return v7 & 1;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v66 = v68;
  v68 = 0;
  v8 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a1 + 56))(a1, &v66, &v68);
  v10 = v68;
  if (((_BYTE)v68 + 1) < 8u)
    LODWORD(v7) = v8;
  else
    LODWORD(v7) = 0;
  v11 = v66;
  v66 = 0;
  if (!v11)
    goto LABEL_13;
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
LABEL_13:
    if (!(_DWORD)v7)
      return v7 & 1;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v11, v9);
  if (!(_DWORD)v7)
    return v7 & 1;
LABEL_14:
  LOBYTE(v7) = 1;
  switch(v10)
  {
    case 0u:
      return v7 & 1;
    case 1u:
      v12 = (WTF **)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v13 == -1)
        goto LABEL_82;
      if ((_DWORD)v13 == 2)
      {
        v14 = *(unsigned int *)(a2 + 20);
        v15 = *(WTF **)(a2 + 8);
        if ((_DWORD)v14)
        {
          v16 = 32 * v14;
          v17 = (_DWORD *)((char *)v15 + 24);
          do
          {
            v18 = *v17;
            if ((_DWORD)v18 != -1)
              ((void (*)(WTF::StringImpl **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v18])(&v68, v17 - 4);
            *v17 = -1;
            v17 += 8;
            v16 -= 32;
          }
          while (v16);
          v15 = *v12;
        }
        if (v15)
        {
          *(_QWORD *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 16) = 0;
          WTF::fastFree(v15, v9);
        }
        *v12 = 0;
        *(_QWORD *)(a2 + 16) = 0;
      }
      else
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v13])(&v68, a2 + 8);
LABEL_82:
        *v12 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_DWORD *)(a2 + 24) = 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_134;
      if (!(*(unsigned int (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 104))(a1, &v66))
      {
        LOBYTE(v7) = 0;
        goto LABEL_108;
      }
      v46 = 1;
      while (2)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
        {
          LOBYTE(v68) = 0;
          v69[0] = 0;
          v70 = 0;
          v47 = WebCore::IDBKeyData::decode(a1, &v68);
          v48 = v47;
          v7 = 0;
          if (!v47)
            goto LABEL_95;
          v49 = *(unsigned int *)(a2 + 20);
          if ((_DWORD)v49 == *(_DWORD *)(a2 + 16))
          {
            v50 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 8, v49 + 1, (unint64_t)&v68);
            v51 = *(_QWORD *)(a2 + 8) + 32 * *(unsigned int *)(a2 + 20);
            *(_BYTE *)v51 = *(_BYTE *)v50;
            *(_BYTE *)(v51 + 8) = 0;
            v52 = v51 + 8;
            *(_DWORD *)(v51 + 24) = -1;
            v53 = (_DWORD *)(v51 + 24);
            v54 = *(unsigned int *)(v50 + 24);
            if ((_DWORD)v54 != -1)
            {
              ((void (*)(char *, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v54])(&v71, v52, v50 + 8);
LABEL_93:
              *v53 = v54;
            }
          }
          else
          {
            v55 = (uint64_t)*v12 + 32 * v49;
            *(_BYTE *)v55 = (_BYTE)v68;
            *(_BYTE *)(v55 + 8) = 0;
            v56 = v55 + 8;
            *(_DWORD *)(v55 + 24) = -1;
            v53 = (_DWORD *)(v55 + 24);
            LODWORD(v54) = v70;
            if (v70 != -1)
            {
              ((void (*)(char *, uint64_t, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v70])(&v71, v56, v69);
              goto LABEL_93;
            }
          }
          ++*(_DWORD *)(a2 + 20);
          v7 = v46;
LABEL_95:
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
          if (v70 != -1)
            ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v70])(&v71, v69);
          v46 = v7;
          if ((v48 & 1) == 0)
            goto LABEL_107;
          continue;
        }
        break;
      }
      LOBYTE(v7) = v46;
LABEL_107:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
LABEL_108:
      v57 = v66;
      v66 = 0;
      if (v57)
      {
LABEL_109:
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v45);
        else
          *(_DWORD *)v57 -= 2;
      }
      return v7 & 1;
    case 2u:
      v24 = (uint64_t *)(a2 + 8);
      v25 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v25 == -1)
        goto LABEL_65;
      if ((_DWORD)v25 == 6)
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr((unsigned int *)v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unsigned int *)v26));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)v26);
            v29 = *(WTF **)(v26 + 8);
            if (v29)
            {
              *(_QWORD *)(v26 + 8) = 0;
              *(_DWORD *)(v26 + 16) = 0;
              WTF::fastFree(v29, v9);
            }
            WTF::fastFree((WTF *)v26, v9);
          }
        }
      }
      else
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v25])(&v68, a2 + 8);
LABEL_65:
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 24) = 6;
      }
      v71 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LODWORD(v7) = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, char *))(*(_QWORD *)a1 + 24))(a1, &v68, &v71);
      v36 = v68;
      v68 = 0;
      if (!v36)
        goto LABEL_69;
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, v35);
        if (!(_DWORD)v7)
          return v7 & 1;
      }
      else
      {
        *(_DWORD *)v36 -= 2;
LABEL_69:
        if (!(_DWORD)v7)
          return v7 & 1;
      }
      if (!v71)
        goto LABEL_6;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v68 = 0;
      v69[0] = 0;
      v38 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a1 + 16))(a1, &v66, &v68);
      if (v38)
      {
        v39 = v69[0];
        if (v69[0])
        {
          if ((unint64_t)v69[0] >> 32)
          {
            __break(0xC471u);
            JUMPOUT(0x19536BFE8);
          }
          v40 = v68;
          v41 = WTF::fastMalloc(v69[0]);
          v42 = (WTF *)v41;
          v43 = 0;
          do
          {
            *((_BYTE *)v43 + v41) = *((_BYTE *)v43 + (_QWORD)v40);
            v43 = (WTF *)((char *)v43 + 1);
          }
          while (v39 != v43);
        }
        else
        {
          v42 = 0;
        }
      }
      else
      {
        v42 = 0;
        LODWORD(v39) = 0;
      }
      v58 = v66;
      v66 = 0;
      if (!v58)
        goto LABEL_117;
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::destroy(v58, v37);
        if (v38)
          goto LABEL_118;
LABEL_132:
        if (v42)
          WTF::fastFree(v42, v37);
        goto LABEL_27;
      }
      *(_DWORD *)v58 -= 2;
LABEL_117:
      if (!v38)
        goto LABEL_132;
LABEL_118:
      v59 = WTF::fastMalloc((WTF *)0x18);
      v61 = v59;
      *(_DWORD *)v59 = 1;
      *(_QWORD *)(v59 + 8) = v42;
      *(_DWORD *)(v59 + 16) = (_DWORD)v39;
      *(_DWORD *)(v59 + 20) = (_DWORD)v39;
      v62 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v62 == -1)
        goto LABEL_129;
      if ((_DWORD)v62 != 6)
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v62])(&v68, a2 + 8);
LABEL_129:
        *(_QWORD *)(a2 + 8) = v61;
        v21 = 6;
LABEL_36:
        *(_DWORD *)(a2 + 24) = v21;
        goto LABEL_6;
      }
      v63 = *v24;
      *v24 = v59;
      if (!v63)
        goto LABEL_6;
      do
        v64 = __ldaxr((unsigned int *)v63);
      while (__stlxr(v64 - 1, (unsigned int *)v63));
      LOBYTE(v7) = 1;
      if (v64 == 1)
      {
        atomic_store(1u, (unsigned int *)v63);
        v65 = *(WTF **)(v63 + 8);
        if (v65)
        {
          *(_QWORD *)(v63 + 8) = 0;
          *(_DWORD *)(v63 + 16) = 0;
          WTF::fastFree(v65, v60);
        }
        WTF::fastFree((WTF *)v63, v60);
      }
      return v7 & 1;
    case 3u:
      v30 = (WTF::StringImpl **)(a2 + 8);
      v31 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v31 == -1)
        goto LABEL_78;
      if ((_DWORD)v31 == 3)
      {
        v32 = *v30;
        *v30 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v9);
          else
            *(_DWORD *)v32 -= 2;
        }
      }
      else
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v31])(&v68, a2 + 8);
LABEL_78:
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 24) = 3;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (*(_DWORD *)(a2 + 24) != 3)
        goto LABEL_134;
      v44 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a1 + 80))(a1, &v68, v30);
      goto LABEL_104;
    case 4u:
      v22 = (_QWORD *)(a2 + 8);
      v23 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v23 == -1)
        goto LABEL_61;
      if ((_DWORD)v23 == 5)
      {
        *v22 = 0;
      }
      else
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v23])(&v68, a2 + 8);
LABEL_61:
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 24) = 5;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (*(_DWORD *)(a2 + 24) != 5)
        goto LABEL_134;
      goto LABEL_103;
    case 5u:
      v22 = (_QWORD *)(a2 + 8);
      v33 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v33 == -1)
        goto LABEL_101;
      if ((_DWORD)v33 == 4)
      {
        *v22 = 0;
      }
      else
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v33])(&v68, a2 + 8);
LABEL_101:
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 24) = 4;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (*(_DWORD *)(a2 + 24) != 4)
      {
LABEL_134:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_135:
        __break(0xC471u);
        JUMPOUT(0x19536BFE0);
      }
LABEL_103:
      v44 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)a1 + 72))(a1, &v68, v22);
LABEL_104:
      LOBYTE(v7) = v44;
      v57 = v68;
      v68 = 0;
      if (!v57)
        return v7 & 1;
      goto LABEL_109;
    case 6u:
      v34 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v34 == -1)
        goto LABEL_59;
      if ((_DWORD)v34 != 7)
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v34])(&v68, a2 + 8);
LABEL_59:
        *(_DWORD *)(a2 + 24) = 7;
      }
      return v7 & 1;
    default:
      if (v10 != 255)
        goto LABEL_135;
      v20 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v20 == -1)
        goto LABEL_35;
      if ((_DWORD)v20 == 8)
        goto LABEL_6;
      ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v20])(&v68, a2 + 8);
LABEL_35:
      v21 = 8;
      goto LABEL_36;
  }
}

uint64_t WebCore::IDBKeyData::compare(WebCore::IDBKeyData *this, const WebCore::IDBKeyData *a2, const WTF::String *a3)
{
  int v3;
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  unsigned __int8 **v23;
  double v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;

  v3 = *((_DWORD *)this + 6);
  if (v3 == -1)
    v4 = -1;
  else
    v4 = *((unsigned int *)this + 6);
  v7 = 0;
  v8 = 1;
  switch(v4)
  {
    case 0:
    case 1:
      goto LABEL_12;
    case 2:
      v8 = 0;
      v7 = 1;
      goto LABEL_12;
    case 3:
      v8 = 0;
      v7 = 3;
      goto LABEL_12;
    case 4:
      v8 = 0;
      v7 = 5;
      goto LABEL_12;
    case 5:
      v8 = 0;
      v7 = 4;
      goto LABEL_12;
    case 6:
      v8 = 0;
      v7 = 2;
      goto LABEL_12;
    case 7:
      v8 = 0;
      v7 = 6;
      goto LABEL_12;
    case 8:
      v8 = 0;
      v7 = 255;
LABEL_12:
      v9 = *((_DWORD *)a2 + 6);
      if (v9 == -1)
        v10 = -1;
      else
        v10 = *((unsigned int *)a2 + 6);
      break;
    default:
      goto LABEL_97;
  }
  v11 = 0;
  v12 = 1;
  switch(v10)
  {
    case 0:
    case 1:
      goto LABEL_27;
    case 2:
      v12 = 0;
      v11 = 1;
      if (!v8)
        goto LABEL_30;
      return (v12 - 1);
    case 3:
      v12 = 0;
      v11 = 3;
      if (!v8)
        goto LABEL_30;
      return (v12 - 1);
    case 4:
      v12 = 0;
      v11 = 5;
      if (!v8)
        goto LABEL_30;
      return (v12 - 1);
    case 5:
      v12 = 0;
      v11 = 4;
      if (!v8)
        goto LABEL_30;
      return (v12 - 1);
    case 6:
      v12 = 0;
      v11 = 2;
      if (!v8)
        goto LABEL_30;
      return (v12 - 1);
    case 7:
      v12 = 0;
      v11 = 6;
LABEL_27:
      if (v8)
        return (v12 - 1);
      goto LABEL_30;
    case 8:
      v12 = 0;
      v11 = 255;
      if (v8)
        return (v12 - 1);
LABEL_30:
      if ((v12 & 1) != 0)
        return 1;
      if (v7 == v11)
      {
        switch(v7)
        {
          case 1:
            if (v3 != 2 || v9 != 2)
              goto LABEL_96;
            LODWORD(v14) = *((_DWORD *)this + 5);
            LODWORD(v15) = *((_DWORD *)a2 + 5);
            if (!(_DWORD)v14 || !(_DWORD)v15)
              goto LABEL_45;
            v16 = 0;
            v17 = 1;
            while (1)
            {
              result = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(*((_QWORD *)this + 1) + v16), (const WebCore::IDBKeyData *)(*((_QWORD *)a2 + 1) + v16));
              if ((_DWORD)result)
                break;
              v14 = *((unsigned int *)this + 5);
              v15 = *((unsigned int *)a2 + 5);
              v16 += 32;
              v18 = v17 >= v14 || v17 >= v15;
              ++v17;
              if (v18)
              {
LABEL_45:
                v18 = v14 >= v15;
                v19 = v14 > v15;
                if (v18)
                  return v19;
                else
                  return 0xFFFFFFFFLL;
              }
            }
            return result;
          case 2:
            if (v3 != 6 || v9 != 6)
              goto LABEL_96;
            v20 = *((_QWORD *)this + 1);
            if (v20)
              v21 = (unsigned __int8 **)(v20 + 8);
            else
              v21 = 0;
            v22 = *((_QWORD *)a2 + 1);
            if (v22)
              v23 = (unsigned __int8 **)(v22 + 8);
            else
              v23 = 0;
            if (v21 == v23)
              return 0;
            if (v20 && !v22)
              return 1;
            if (!v20 && v22)
              return 0xFFFFFFFFLL;
            v27 = *((_DWORD *)v21 + 3);
            v28 = *((_DWORD *)v23 + 3);
            if (v28 >= v27)
              v29 = v27;
            else
              v29 = v28;
            if (!(_DWORD)v29)
              goto LABEL_90;
            v30 = *v21;
            v31 = *v23;
            break;
          case 3:
            if (v3 != 3 || v9 != 3)
              goto LABEL_96;
            return WTF::codePointCompare((WebCore::IDBKeyData *)((char *)this + 8), (const WebCore::IDBKeyData *)((char *)a2 + 8), a3);
          case 4:
            if (v3 != 5 || v9 != 5)
              goto LABEL_96;
            goto LABEL_74;
          case 5:
            if (v3 != 4 || v9 != 4)
            {
LABEL_96:
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_97:
              __break(0xC471u);
              JUMPOUT(0x19536C340);
            }
LABEL_74:
            v24 = *((double *)this + 1);
            v25 = *((double *)a2 + 1);
            if (v24 > v25)
              v26 = 1;
            else
              v26 = -1;
            if (v24 == v25)
              return 0;
            else
              return v26;
          default:
            return 0;
        }
        do
        {
          v33 = *v30++;
          v32 = v33;
          v34 = *v31++;
          v35 = v32 >= v34;
          if (v32 > v34)
            return 1;
          if (!v35)
            return 0xFFFFFFFFLL;
          --v29;
        }
        while (v29);
LABEL_90:
        if (v28 < v27)
          v36 = 1;
        else
          v36 = -1;
        if (v27 == v28)
          return 0;
        else
          return v36;
      }
      else if ((char)v7 < (char)v11)
      {
        return 1;
      }
      else
      {
        return 0xFFFFFFFFLL;
      }
    default:
      __break(0xC471u);
      JUMPOUT(0x19536C360);
  }
}

uint64_t WebCore::IDBKeyData::setNumberValue(uint64_t this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  char v6;

  v3 = this;
  v4 = *(unsigned int *)(this + 24);
  if ((_DWORD)v4 != -1)
  {
    v5 = (double *)(this + 8);
    if ((_DWORD)v4 == 4)
    {
      *v5 = a2;
      return this;
    }
    this = ((uint64_t (*)(char *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v4])(&v6, v5);
  }
  *(double *)(v3 + 8) = a2;
  *(_DWORD *)(v3 + 24) = 4;
  return this;
}

uint64_t WebCore::IDBKeyData::isValid(WebCore::IDBKeyData *this)
{
  int v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  WebCore::IDBKeyData *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_DWORD *)this + 6);
  if (v1 == -1)
    v2 = -1;
  else
    v2 = *((unsigned int *)this + 6);
  if (v2 - 3 < 6)
    return 1;
  if (v2 < 2)
    return 0;
  if (v2 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19536C4D0);
  }
  if (v1 == 2)
  {
    v4 = *((unsigned int *)this + 5);
    if (!(_DWORD)v4)
      return 1;
    v5 = (WebCore::IDBKeyData *)*((_QWORD *)this + 1);
    v6 = 32 * v4 - 32;
    do
    {
      result = WebCore::IDBKeyData::isValid(v5);
      if (!(_DWORD)result)
        break;
      v5 = (WebCore::IDBKeyData *)((char *)v5 + 32);
      v7 = v6;
      v6 -= 32;
    }
    while (v7);
  }
  else
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::IDBKeyData::operator==(v8);
  }
  return result;
}

uint64_t WebCore::IDBKeyData::operator==(unsigned __int8 *a1, unsigned __int8 *a2, const WTF::StringImpl *a3)
{
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;

  v3 = *((_DWORD *)a1 + 6);
  if (v3 == -1)
    v4 = -1;
  else
    v4 = *((unsigned int *)a1 + 6);
  if (v4 >= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19536C6D4);
  }
  v5 = *((_DWORD *)a2 + 6);
  if (v5 == -1)
    v6 = -1;
  else
    v6 = *((unsigned int *)a2 + 6);
  if (v6 >= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19536C6F4);
  }
  if (byte_1968DE1B8[v4] != byte_1968DE1B8[v6] || (v3 == 0) != (v5 == 0) || *a1 != *a2)
    return 0;
  v7 = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
    case 7uLL:
    case 8uLL:
      return v7;
    case 2uLL:
      if (v3 != 2 || v5 != 2)
        goto LABEL_45;
      v8 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v8 != *((_DWORD *)a2 + 5))
        return 0;
      if (!(_DWORD)v8)
        return 1;
      v9 = *((_QWORD *)a1 + 1);
      v10 = *((_QWORD *)a2 + 1);
      if (!WebCore::IDBKeyData::operator==(v9))
        return 0;
      v11 = v9 + 32;
      v12 = v10 + 32;
      v13 = 1;
      do
      {
        v14 = v13;
        if (v8 == v13)
          break;
        v15 = WebCore::IDBKeyData::operator==(v11);
        v13 = v14 + 1;
        v11 += 32;
        v12 += 32;
      }
      while ((v15 & 1) != 0);
      return v14 >= v8;
    case 3uLL:
      if (v3 != 3 || v5 != 3)
        goto LABEL_45;
      return WTF::equal(*((WTF **)a1 + 1), *((const WTF::StringImpl **)a2 + 1), a3);
    case 4uLL:
      if (v3 != 4 || v5 != 4)
        goto LABEL_45;
      goto LABEL_30;
    case 5uLL:
      if (v3 != 5 || v5 != 5)
        goto LABEL_45;
LABEL_30:
      v17 = *((double *)a1 + 1) == *((double *)a2 + 1);
      goto LABEL_31;
    case 6uLL:
      if (v3 != 6 || v5 != 6)
      {
LABEL_45:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_46:
        __break(0xC471u);
        JUMPOUT(0x19536C718);
      }
      v18 = *((_QWORD *)a1 + 1);
      v19 = *((_QWORD *)a2 + 1);
      if (v18)
      {
        v20 = *(unsigned int *)(v18 + 20);
        if ((_DWORD)v20 != *(_DWORD *)(v19 + 20))
          return 0;
        v17 = memcmp(*(const void **)(v18 + 8), *(const void **)(v19 + 8), v20) == 0;
      }
      else
      {
        v17 = v19 == 0;
      }
LABEL_31:
      v7 = v17;
      break;
    default:
      goto LABEL_46;
  }
  return v7;
}

uint64_t WebCore::IDBKeyData::size(WebCore::IDBKeyData *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WebCore::IDBKeyData *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_DWORD *)this + 6);
  if (!v1)
    return 0;
  if (v1 == -1)
    v2 = -1;
  else
    v2 = *((unsigned int *)this + 6);
  v3 = 8;
  switch(v2)
  {
    case 0:
    case 1:
    case 7:
    case 8:
      return 0;
    case 2:
      if (v1 != 2)
        goto LABEL_19;
      v5 = *((unsigned int *)this + 5);
      if (!(_DWORD)v5)
        return 0;
      v3 = 0;
      v6 = (WebCore::IDBKeyData *)*((_QWORD *)this + 1);
      v7 = 32 * v5;
      do
      {
        v3 += WebCore::IDBKeyData::size(v6);
        v6 = (WebCore::IDBKeyData *)((char *)v6 + 32);
        v7 -= 32;
      }
      while (v7);
      return v3;
    case 3:
      if (v1 != 3)
        goto LABEL_19;
      v8 = *((_QWORD *)this + 1);
      if (!v8)
        return 0;
      return (*(_DWORD *)(v8 + 4) << (((*(_DWORD *)(v8 + 16) >> 2) & 1) == 0));
    case 4:
    case 5:
      return v3;
    case 6:
      if (v1 != 6)
      {
LABEL_19:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
        __break(0xC471u);
        JUMPOUT(0x19536C834);
      }
      v9 = *((_QWORD *)this + 1);
      if (!v9)
        return 0;
      v3 = *(unsigned int *)(v9 + 20);
      break;
    default:
      goto LABEL_20;
  }
  return v3;
}

uint64_t WebCore::IDBKeyPathLexer::lexIdentifier(WebCore::IDBKeyPathLexer *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned __int8 *v5;
  UChar32 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  UChar32 v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v2 = *((_QWORD *)this + 3);
  if (!(_DWORD)v2)
    return 3;
  v5 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v6 = (v2 & 0xFF00000000) != 0 ? *v5 : *(unsigned __int16 *)v5;
  result = u_charType(v6);
  if (((1 << result) & 0x43E) == 0 && v6 != 95 && v6 != 36)
    return 3;
  v8 = *((unsigned int *)this + 6);
  if (v8 >= 2)
  {
    v10 = v8 - 1;
    v9 = v10;
    if (*((_BYTE *)this + 28))
    {
      if (v10 >= v10)
      {
        v11 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 1);
        v9 |= 0x100000000uLL;
        goto LABEL_12;
      }
    }
    else if (v10 >= v10)
    {
      v11 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 2);
LABEL_12:
      *((_QWORD *)this + 2) = v11;
      *((_DWORD *)this + 6) = v9;
      *((_BYTE *)this + 28) = BYTE4(v9);
      if ((_DWORD)v9)
      {
        while (1)
        {
          v12 = (v9 & 0xFF00000000) != 0 ? *v11 : *(unsigned __int16 *)v11;
          result = u_charType(v12);
          v13 = ((1 << result) & 0x40077E) == 0 && (v12 - 8204) >= 2;
          if (v13 && v12 != 36 && v12 != 95)
            break;
          v14 = *((unsigned int *)this + 6);
          if (v14 < 2)
            goto LABEL_34;
          v15 = v14 - 1;
          v9 = v15;
          if (*((_BYTE *)this + 28))
          {
            if (v15 < v15)
              goto LABEL_48;
            v11 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 1);
            v9 |= 0x100000000uLL;
          }
          else
          {
            if (v15 < v15)
              goto LABEL_48;
            v11 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 2);
          }
          *((_QWORD *)this + 2) = v11;
          *((_DWORD *)this + 6) = v9;
          *((_BYTE *)this + 28) = BYTE4(v9);
          if (!(_DWORD)v9)
            goto LABEL_35;
        }
        LODWORD(v9) = *((_DWORD *)this + 6);
      }
      goto LABEL_35;
    }
LABEL_48:
    __break(1u);
    return result;
  }
LABEL_34:
  LODWORD(v9) = 0;
  *((_QWORD *)this + 2) = "";
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 1;
LABEL_35:
  v16 = (v2 - v9);
  v17 = v16 | 0x100000000;
  if ((v2 & 0xFF00000000) == 0)
    v17 = v16;
  if (v16 >= v2)
    v18 = v2;
  else
    v18 = v17;
  if ((v18 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v20 = *a2;
  *a2 = v21;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  return 0;
}

WTF::StringImpl *WebCore::IDBParseKeyPath(uint64_t *a1, WTF::StringImpl *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  WTF::StringImpl **v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  int v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  int v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const char *v36;
  unsigned int v37;
  char v38;
  int v39;

  v34 = 0;
  v5 = *a1;
  if (*a1)
  {
    v6 = *(unsigned int *)(v5 + 4);
    *(_DWORD *)v5 += 2;
    v7 = *(_DWORD *)(v5 + 16);
    v8 = *(const char **)(v5 + 8);
    v35 = (WTF::StringImpl *)v5;
    v36 = v8;
    v37 = v6;
    v38 = (v7 & 4) != 0;
    v39 = 3;
    if ((_DWORD)v6)
    {
      if (((v7 >> 2) & 1) != 0)
        v9 = *(unsigned __int8 *)v8;
      else
        v9 = *(unsigned __int16 *)v8;
      if (v9 == 46)
      {
        if (v6 < 2 || v6 - 1 >= (unint64_t)(v6 - 1))
        {
LABEL_12:
          v12 = 1;
          goto LABEL_61;
        }
LABEL_9:
        __break(1u);
      }
      v10 = WebCore::IDBKeyPathLexer::lexIdentifier((WebCore::IDBKeyPathLexer *)&v34, &v34);
      v11 = v10;
      v39 = v10;
      if (!v10)
        goto LABEL_16;
      if (v10 != 2)
        goto LABEL_12;
      goto LABEL_15;
    }
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 1;
  }
  v39 = 2;
LABEL_15:
  v11 = 2;
  while (1)
  {
    while (1)
    {
LABEL_16:
      if (v11 == 2)
      {
        v12 = 0;
        goto LABEL_61;
      }
      if (v11 == 1)
        break;
      if (!v11)
      {
        v13 = v34;
        if (!v34)
        {
          v33 = 0;
          v15 = *((unsigned int *)a2 + 3);
          if ((_DWORD)v15 == *((_DWORD *)a2 + 2))
            goto LABEL_21;
          v20 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8 * v15);
LABEL_28:
          *v20 = v13;
          goto LABEL_29;
        }
        v14 = *(_DWORD *)v34;
        *(_DWORD *)v34 += 2;
        v33 = v13;
        v15 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v15 != *((_DWORD *)a2 + 2))
        {
          v20 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8 * v15);
          *(_DWORD *)v13 = v14 + 4;
          goto LABEL_28;
        }
LABEL_21:
        v16 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v15 + 1, (unint64_t)&v33);
        v15 = *((unsigned int *)a2 + 3);
        v17 = *(_QWORD *)a2;
        v18 = *v16;
        if (*v16)
          *v18 += 2;
        *(_QWORD *)(v17 + 8 * v15) = v18;
LABEL_29:
        *((_DWORD *)a2 + 3) = v15 + 1;
        if (v37)
        {
          if (v38)
            v21 = *(unsigned __int8 *)v36;
          else
            v21 = *(unsigned __int16 *)v36;
          if (v21 == 46)
          {
            if (v37 < 2)
            {
              v22 = 0x100000000;
              v24 = "";
            }
            else
            {
              v23 = v37 - 1;
              v22 = v23;
              if (v38)
              {
                if (v23 < v23)
                  goto LABEL_9;
                v24 = v36 + 1;
                v22 = v23 | 0x100000000;
              }
              else
              {
                if (v23 < v23)
                  goto LABEL_9;
                v24 = v36 + 2;
              }
            }
            v36 = v24;
            v37 = v22;
            v38 = BYTE4(v22);
            v11 = 1;
            v39 = 1;
LABEL_49:
            v26 = 1;
            goto LABEL_51;
          }
          v25 = WebCore::IDBKeyPathLexer::lexIdentifier((WebCore::IDBKeyPathLexer *)&v34, &v34);
          v11 = v25;
          v39 = v25;
          if (v25 == 1)
            goto LABEL_49;
          if (v25 != 2)
          {
            v11 = 0;
            v26 = 0;
            *a3 = 2;
            goto LABEL_51;
          }
        }
        else
        {
          v39 = 2;
        }
        v26 = 1;
        v11 = 2;
LABEL_51:
        v27 = v33;
        v33 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, a2);
          else
            *(_DWORD *)v27 -= 2;
        }
        if ((v26 & 1) == 0)
          goto LABEL_62;
      }
    }
    if (!v37)
    {
      v29 = 2;
      goto LABEL_79;
    }
    v19 = v38 ? *(unsigned __int8 *)v36 : *(unsigned __int16 *)v36;
    if (v19 == 46)
      break;
    v11 = 0;
    v39 = WebCore::IDBKeyPathLexer::lexIdentifier((WebCore::IDBKeyPathLexer *)&v34, &v34);
    if (v39)
      goto LABEL_80;
  }
  if (v37 < 2)
  {
    v30 = 0x100000000;
    v32 = "";
  }
  else
  {
    v31 = v37 - 1;
    v30 = v31;
    if (v38)
    {
      if (v31 < v31)
        goto LABEL_9;
      v32 = v36 + 1;
      v30 = v31 | 0x100000000;
    }
    else
    {
      if (v31 < v31)
        goto LABEL_9;
      v32 = v36 + 2;
    }
  }
  v36 = v32;
  v37 = v30;
  v38 = BYTE4(v30);
  v29 = 1;
LABEL_79:
  v39 = v29;
LABEL_80:
  v12 = 3;
LABEL_61:
  *a3 = v12;
LABEL_62:
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, a2);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v34;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v34, a2);
    else
      *(_DWORD *)v34 -= 2;
  }
  return result;
}

void WebCore::IDBKeyRange::~IDBKeyRange(WebCore::IDBKeyRange *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v5 = v3[6];
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v5])(&v7, v3 + 2);
      v3[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --*v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*v4 == 1)
    {
      v6 = v4[6];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v6])(&v8, v4 + 2);
      v4[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
    else
    {
      --*v4;
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::IDBKeyRange::only@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unsigned int *v5;
  void *v6;
  uint64_t v7;
  WebCore::IDBKey *v8;
  char v9;

  result = (uint64_t)WebCore::createIDBKeyFromValue(&v8, a1, a2);
  v5 = (unsigned int *)v8;
  if (v8)
  {
    result = WebCore::IDBKey::isValid(v8);
    if ((_DWORD)result)
    {
      ++*v5;
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      *(_QWORD *)(result + 16) = v5;
      *(_QWORD *)(result + 24) = v5;
      *(_WORD *)(result + 32) = 0;
      *(_QWORD *)a3 = result;
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)a3 = 26;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
      if (*v5 == 1)
      {
        v7 = v5[6];
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v7])(&v9, v5 + 2);
        v5[6] = -1;
        return bmalloc::api::isoDeallocate((bmalloc::api *)v5, v6);
      }
      else
      {
        --*v5;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 26;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::IDBKeyRange::bound@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int *v11;
  uint64_t result;
  void *v13;
  unsigned int *v14;
  const WTF::String *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::IDBKey *v19;
  WebCore::IDBKey *v20;
  char v21;

  WebCore::createIDBKeyFromValue(&v20, a1, a2);
  v11 = (unsigned int *)v20;
  result = WebCore::IDBKey::isValid(v20);
  if ((result & 1) != 0)
  {
    WebCore::createIDBKeyFromValue(&v19, a1, a3);
    v14 = (unsigned int *)v19;
    result = WebCore::IDBKey::isValid(v19);
    if ((_DWORD)result
      && (result = WebCore::IDBKey::compare((WebCore::IDBKey *)v14, (const WebCore::IDBKey *)v11, v15),
          (_DWORD)result != -1)
      && ((result = WebCore::IDBKey::compare((WebCore::IDBKey *)v14, (const WebCore::IDBKey *)v11, v16), (a4 | a5) != 1)
       || (_DWORD)result))
    {
      v19 = 0;
      v20 = 0;
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      *(_QWORD *)(result + 16) = v11;
      *(_QWORD *)(result + 24) = v14;
      *(_BYTE *)(result + 32) = a4;
      *(_BYTE *)(result + 33) = a5;
      *(_QWORD *)a6 = result;
      *(_DWORD *)(a6 + 16) = 0;
      v11 = 0;
    }
    else
    {
      *(_BYTE *)a6 = 26;
      *(_QWORD *)(a6 + 8) = 0;
      *(_DWORD *)(a6 + 16) = 1;
      if (v14)
      {
        if (*v14 == 1)
        {
          v18 = v14[6];
          if ((_DWORD)v18 != -1)
          {
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v18])(&v21, v14 + 2);
            v11 = (unsigned int *)v20;
          }
          v14[6] = -1;
          result = bmalloc::api::isoDeallocate((bmalloc::api *)v14, v13);
        }
        else
        {
          --*v14;
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a6 = 26;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 1;
  }
  v20 = 0;
  if (v11)
  {
    if (*v11 == 1)
    {
      v17 = v11[6];
      if ((_DWORD)v17 != -1)
        ((void (*)(WebCore::IDBKey **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v17])(&v19, v11 + 2);
      v11[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v11, v13);
    }
    else
    {
      --*v11;
    }
  }
  return result;
}

WebCore::IDBKey *WebCore::IDBKeyRange::isOnlyKey(WebCore::IDBKeyRange *this, uint64_t a2, const WTF::String *a3)
{
  WebCore::IDBKey *result;
  const WebCore::IDBKey *v5;

  result = (WebCore::IDBKey *)*((_QWORD *)this + 2);
  if (result)
  {
    v5 = (const WebCore::IDBKey *)*((_QWORD *)this + 3);
    if (!v5 || *((_BYTE *)this + 32) || *((_BYTE *)this + 33))
      return 0;
    else
      return (WebCore::IDBKey *)(WebCore::IDBKey::compare(result, v5, a3) == 0);
  }
  return result;
}

uint64_t WebCore::IDBKeyRange::includes@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  void *v7;
  const WTF::String *v8;
  WebCore::IDBKey *v9;
  uint64_t result;
  char v11;
  int v12;
  uint64_t v13;
  WebCore::IDBKey *v14;
  char v15;

  WebCore::createIDBKeyFromValue(&v14, a2, a3);
  v6 = (unsigned int *)v14;
  if ((WebCore::IDBKey::isValid(v14) & 1) != 0)
  {
    v9 = *(WebCore::IDBKey **)(a1 + 16);
    if (v9
      && ((result = WebCore::IDBKey::compare(v9, (const WebCore::IDBKey *)v6, v8), (int)result > 0)
       || !(_DWORD)result && *(_BYTE *)(a1 + 32))
      || (result = *(_QWORD *)(a1 + 24)) != 0
      && ((result = WebCore::IDBKey::compare((WebCore::IDBKey *)result, (const WebCore::IDBKey *)v6, v8),
           (result & 0x80000000) != 0)
       || !(_DWORD)result && *(_BYTE *)(a1 + 33)))
    {
      v11 = 0;
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v11 = 1;
    }
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 1;
    v11 = 26;
  }
  *(_BYTE *)a4 = v11;
  *(_DWORD *)(a4 + 16) = v12;
  if (v6)
  {
    if (*v6 == 1)
    {
      v13 = v6[6];
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v13])(&v15, v6 + 2);
      v6[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v6, v7);
    }
    else
    {
      --*v6;
    }
  }
  return result;
}

_QWORD *_ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore10IDBKeyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[16];
  unsigned int v17;
  _QWORD v18[2];
  unsigned int v19;
  char v20;
  char *v21;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 27)
    {
LABEL_16:
      __break(0xC471u);
      return result;
    }
    v4 = result;
    result = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v2));
    *((_DWORD *)v4 + 2) = v2;
    *v4 = result;
    v5 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = 32 * v5;
      for (i = (unsigned int *)(v6 + 24); ; i += 8)
      {
        v9 = *i;
        if ((_DWORD)v9 == -1)
          break;
        v21 = &v20;
        result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v9])(v18, &v21, i - 4);
        v16[0] = 0;
        v17 = -1;
        v10 = v19;
        if (v19 != -1)
        {
          result = (_QWORD *)((uint64_t (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v19])(&v21, v16, v18);
          v17 = v10;
          if (v19 != -1)
            result = (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v19])(&v21, v18);
        }
        v11 = *v4 + 32 * *((unsigned int *)v4 + 3);
        *(_BYTE *)v11 = 0;
        *(_BYTE *)(v11 + 8) = 0;
        v12 = v11 + 8;
        *(_DWORD *)(v11 + 24) = -1;
        v13 = (unsigned int *)(v11 + 24);
        v14 = v17;
        if (v17 == -1)
        {
          ++*((_DWORD *)v4 + 3);
        }
        else
        {
          result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v17])(v18, v12, v16);
          *v13 = v14;
          v15 = v17;
          ++*((_DWORD *)v4 + 3);
          if ((_DWORD)v15 != -1)
            result = (_QWORD *)((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v15])(v18, v16);
        }
        v7 -= 32;
        if (!v7)
          return result;
      }
      result = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringENS8_6VectorISB_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyERKSG_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEEEEDcSK_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringENS8_6VectorISB_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyERKSG_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEEEEDcSK_DpT0_(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_8;
  }
  if (!(v3 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    v6 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *a1;
      v9 = 8 * v6;
      do
      {
        v10 = v7;
        WTF::String::isolatedCopy();
        v7 = v10 + 1;
        *(_QWORD *)(v5 + 8 * v10) = v11;
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
      goto LABEL_9;
    }
LABEL_8:
    LODWORD(v7) = 0;
LABEL_9:
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 12) = v7;
    *(_DWORD *)(a2 + 16) = 1;
    return;
  }
  __break(0xC471u);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned int **a1, _DWORD *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*a1, a2, a3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 6)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v5])(&v12, v4);
LABEL_10:
    v11 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v11;
    *(_DWORD *)(v4 + 16) = 6;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      v9 = *(WTF **)(result + 8);
      if (v9)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v10 = result;
        WTF::fastFree(v9, a2);
        result = v10;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 7)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 8)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 8;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, _DWORD *a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = result;
  v5 = result[4];
  if ((_DWORD)v5 == -1)
    goto LABEL_13;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v5])(&v14, result);
LABEL_13:
    v4[4] = -1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    v4[2] = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    v4[3] = v12;
    v4[4] = 2;
    return result;
  }
  v7 = a2[3];
  result = *(unsigned int **)a2;
  if ((_DWORD)v7)
  {
    v8 = 32 * v7;
    v9 = result + 6;
    do
    {
      v10 = *v9;
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v10])(&v13, v9 - 4);
      *v9 = -1;
      v9 += 8;
      v8 -= 32;
    }
    while (v8);
    result = *(unsigned int **)a2;
  }
  if (result)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v11;
  return result;
}

WebCore::IDBKeyRangeData *WebCore::IDBKeyRangeData::IDBKeyRangeData(WebCore::IDBKeyRangeData *this, const WebCore::IDBKey **a2)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  _BYTE v10[16];
  int v11;
  char *v12;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = 0;
  v4 = (char *)this + 40;
  *((_DWORD *)this + 14) = 0;
  *((_WORD *)this + 32) = 0;
  if (a2)
  {
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v9, a2[2]);
    *(_BYTE *)this = v9[0];
    v6 = *((unsigned int *)this + 6);
    if ((_DWORD)v6 == -1)
    {
      if (v11 == -1)
        goto LABEL_9;
    }
    else if (v11 == -1)
    {
      ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v6])(&v12, v3);
      *((_DWORD *)this + 6) = -1;
      goto LABEL_7;
    }
    v12 = v3;
    ((void (*)(char **, char *, _BYTE *))off_1E3357798[v11])(&v12, v3, v10);
LABEL_7:
    if (v11 != -1)
      ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v11])(&v12, v10);
LABEL_9:
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v9, a2[3]);
    *((_BYTE *)this + 32) = v9[0];
    v7 = *((unsigned int *)this + 14);
    if ((_DWORD)v7 == -1)
    {
      if (v11 == -1)
      {
LABEL_16:
        *((_WORD *)this + 32) = *((_WORD *)a2 + 16);
        return this;
      }
    }
    else if (v11 == -1)
    {
      ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v7])(&v12, v4);
      *((_DWORD *)this + 14) = -1;
      goto LABEL_14;
    }
    v12 = v4;
    ((void (*)(char **, char *, _BYTE *))off_1E3357798[v11])(&v12, v4, v10);
LABEL_14:
    if (v11 != -1)
      ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v11])(&v12, v10);
    goto LABEL_16;
  }
  return this;
}

WebCore::IDBKeyRange *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11IDBKeyRangeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::IDBKeyRange **a2)
{
  WebCore::IDBKeyRange *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(result, a2);
      return (WebCore::IDBKeyRange *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11IDBKeyRangeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v3])(&v6, a2 + 40);
  *(_DWORD *)(a2 + 56) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v5])(&v7, a2 + 8);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15IDBKeyRangeDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6RefPtrIN7WebCore6IDBKeyENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSB_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSK_SL_dSM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  WTF *result;
  char v9;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 1)
        {
          v7 = v6[6];
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v7])(&v9, v6 + 2);
          v6[6] = -1;
          bmalloc::api::isoDeallocate((bmalloc::api *)v6, a2);
        }
        else
        {
          --*v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6RefPtrIN7WebCore6IDBKeyENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSB_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSK_SL_dSM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6RefPtrIN7WebCore6IDBKeyENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSB_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSK_SL_dSM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v5 = *(WTF **)(v2 + 8);
      if (v5)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v5, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;
  double v5;

  v4 = 0;
  v5 = 0.0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore10IDBKeyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(&v4, a1);
  *(_QWORD *)a2 = v4;
  result = v5;
  *(double *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 16) = 3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *a1;
  if (*a1)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 7;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEdNSC_4DateENSB_20ThreadSafeDataBufferENSC_3MinENSC_3MaxEEEEE4copyERKSN_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJDnSD_SH_SI_dSJ_SK_SL_SM_EEEEEEDcSR_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 8;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::isIDBKeyPathValid(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::$_0,WebCore::isIDBKeyPathValid(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v2;
  int v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  int v11;

  v11 = 0;
  v9 = 0;
  v10 = 0;
  WebCore::IDBParseKeyPath(a2, (WTF::StringImpl *)&v9, &v11);
  v3 = v11;
  if (HIDWORD(v10))
  {
    v6 = v9;
    v7 = 8 * HIDWORD(v10);
    do
    {
      v8 = *(WTF::StringImpl **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    WTF::fastFree(v4, v2);
  }
  return v3 == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::isIDBKeyPathValid(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::$_0,WebCore::isIDBKeyPathValid(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  WTF *v7;
  _BOOL8 result;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  int v14;

  v2 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)a2;
  v4 = *(_QWORD *)a2 + 8 * v2;
  do
  {
    v14 = 0;
    v12 = 0;
    v13 = 0;
    WebCore::IDBParseKeyPath(v3, (WTF::StringImpl *)&v12, &v14);
    v6 = v14;
    if (HIDWORD(v13))
    {
      v9 = v12;
      v10 = 8 * HIDWORD(v13);
      do
      {
        v11 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v5);
          else
            *(_DWORD *)v11 -= 2;
        }
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
    }
    v7 = v12;
    if (v12)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      WTF::fastFree(v7, v5);
    }
    result = v6 == 0;
    if (v6)
      break;
    ++v3;
  }
  while (v3 != (uint64_t *)v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBFactory::databases(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::IDBFactory::DatabaseInfo>>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33578B8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBFactory::databases(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::IDBFactory::DatabaseInfo>>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33578B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::IDBFactory::databases(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::IDBFactory::DatabaseInfo>>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(WTF *result, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  objc_class *v27;
  int v28;
  BOOL v29;
  JSValue v30;
  void *v31;
  objc_class *v32;
  JSC::VM *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v43;
  int v44;
  uint64_t v45;
  char v46[8];
  objc_class *v47;
  int v48;
  unsigned __int8 v49[8];
  WTF::StringImpl *v50;
  WTF *v51;
  _OWORD v52[4];
  uint64_t v53;
  JSC::VM *v54;

  v2 = result;
  if (*((_BYTE *)a2 + 16))
  {
    v4 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v4)
    {
      if (v4 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
      v5 = result;
      v6 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = *(_QWORD *)a2;
        v9 = *(_QWORD *)a2 + 16 * v6;
        v10 = ((unint64_t)(16 * v6 - 16) >> 4) + 1;
        do
        {
          v11 = *(_QWORD *)(v8 + v7);
          v12 = *(_QWORD *)(v8 + v7 + 8);
          *(_QWORD *)(v8 + v7) = 0;
          v13 = v8 + v7 + 16;
          v14 = (_QWORD *)((char *)result + v7);
          *v14 = v11;
          v14[1] = v12;
          v7 += 16;
        }
        while (v13 != v9);
LABEL_13:
        v17 = *((_QWORD *)v2 + 1);
        v18 = *(_QWORD *)(v17 + 24);
        if (!v18 || !*(_QWORD *)v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
          goto LABEL_46;
        v19 = *(_QWORD *)(v17 + 32);
        if (!v19 || (*(_BYTE *)(v19 + 8) & 3) != 0)
          v20 = 0;
        else
          v20 = *(uint64_t **)v19;
        v21 = v20[7];
        MEMORY[0x19AEA3294](v46, v21);
        v22 = **(_QWORD **)(v17 + 32);
        v23 = (JSC::VM *)v20[7];
        v54 = v23;
        v49[0] = 0;
        v50 = (WTF::StringImpl *)0x800000000;
        v51 = (WTF *)((char *)v52 + 8);
        memset(v52, 0, sizeof(v52));
        v53 = 0;
        if (v10 >= 9)
        {
          v24 = v10;
          v45 = v21;
          v49[0] = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v50) == 1;
        }
        else
        {
          if (!v10)
            goto LABEL_38;
          v45 = v21;
          v24 = v10;
        }
        v25 = 16 * v24;
        v26 = (uint64_t *)v5;
        do
        {
          v27 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v20, v22, v26);
          if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
          {
            v32 = 0;
            v21 = v45;
            goto LABEL_40;
          }
          v28 = (int)v50;
          if ((_DWORD)v50 != HIDWORD(v50) && (v51 != (WTF *)((char *)v52 + 8) ? (v29 = v51 == 0) : (v29 = 1), v29))
          {
            *((_QWORD *)v51 + v50) = v27;
            LODWORD(v50) = v28 + 1;
          }
          else
          {
            v30.super.isa = v27;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v50, v30) == 1)
              v49[0] = 1;
          }
          v26 += 2;
          v25 -= 16;
        }
        while (v25);
        v21 = v45;
        if (v49[0])
        {
          JSC::throwOutOfMemoryError();
          goto LABEL_65;
        }
LABEL_38:
        v47 = v51;
        v48 = (int)v50;
        v33 = *(JSC::VM **)(v22 + 56);
        if (!*((_DWORD *)v33 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) == 0)
        {
          v32 = (objc_class *)JSC::constructArray();
          goto LABEL_40;
        }
LABEL_65:
        v32 = 0;
LABEL_40:
        v34 = *(uint64_t **)&v52[0];
        if (*(_QWORD *)&v52[0])
        {
          v47 = (objc_class *)&v50;
          v39 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v52[0], (uint64_t *)&v47);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v34, v39);
        }
        if (v51 != (WTF *)((char *)v52 + 8) && v51)
          WTF::fastFree(v51, v31);
        v35 = *(_QWORD *)(v21 + 16);
        if (!v35)
        {
          WebCore::DeferredPromise::callFunction(v17, v20, 0, v32);
          v35 = *(_QWORD *)(v21 + 16);
          if (!v35)
            goto LABEL_45;
        }
        v38 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v20);
        if (!(*(unsigned int (**)(_QWORD *))(*v38 + 64))(v38))
        {
LABEL_62:
          WebCore::reportException((JSC::JSGlobalObject *)v20, v35, 0, 0, 0);
LABEL_45:
          result = (WTF *)MEMORY[0x19AEA32A0](v46);
LABEL_46:
          if (v10)
          {
            v36 = 16 * v10;
            v37 = v5;
            do
            {
              result = *(WTF **)v37;
              *(_QWORD *)v37 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = (WTF *)WTF::StringImpl::destroy(result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              v37 = (WTF *)((char *)v37 + 16);
              v36 -= 16;
            }
            while (v36);
          }
          if (v5)
            return (WTF *)WTF::fastFree(v5, a2);
          return result;
        }
        v40 = v38[43];
        if (*(_QWORD *)(v21 + 24) == v35)
        {
LABEL_79:
          *(_BYTE *)(*(_QWORD *)(v40 + 8) + 93442) = 1;
          *(_BYTE *)(v17 + 44) = 1;
          goto LABEL_62;
        }
        if (!v40)
          goto LABEL_62;
        v41 = (unsigned __int8 *)(v40 + 40);
        if (__ldaxr((unsigned __int8 *)(v40 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v41))
        {
          goto LABEL_73;
        }
        MEMORY[0x19AEA534C](v40 + 40);
LABEL_73:
        v43 = *(unsigned __int8 *)(v40 + 41);
        v44 = __ldxr(v41);
        if (v44 == 1)
        {
          if (!__stlxr(0, v41))
          {
LABEL_78:
            if (!v43)
              goto LABEL_62;
            goto LABEL_79;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v40 + 40));
        goto LABEL_78;
      }
    }
    else
    {
      v5 = 0;
    }
    v10 = 0;
    goto LABEL_13;
  }
  v15 = *((_QWORD *)result + 1);
  v47 = 0;
  v49[0] = 24;
  v50 = 0;
  WebCore::DeferredPromise::reject(v15, v49, 0, &v47);
  result = v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBFactory::getAllDatabaseNames(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33578E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBFactory::getAllDatabaseNames(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33578E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::IDBFactory::getAllDatabaseNames(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;

  v2 = result;
  if (*(_BYTE *)(a2 + 16))
  {
    v18 = 0;
    v19 = 0;
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v19) = v4;
      v18 = v5;
      v6 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = *(uint64_t **)a2;
        v9 = 16 * v6;
        do
        {
          v10 = *v8;
          *v8 = 0;
          v8 += 2;
          *((_QWORD *)v5 + v7++) = v10;
          v9 -= 16;
        }
        while (v9);
        HIDWORD(v19) = v7;
      }
    }
    (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v2 + 1) + 16))(*((_QWORD *)v2 + 1), &v18);
    if (HIDWORD(v19))
    {
      v12 = v18;
      v13 = 8 * HIDWORD(v19);
      do
      {
        v14 = *(WTF::StringImpl **)v12;
        *(_QWORD *)v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v11);
          else
            *(_DWORD *)v14 -= 2;
        }
        v12 = (WTF *)((char *)v12 + 8);
        v13 -= 8;
      }
      while (v13);
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    (*(void (**)(_QWORD, WTF **))(**((_QWORD **)result + 1) + 16))(*((_QWORD *)result + 1), &v18);
    if (HIDWORD(v19))
    {
      v15 = v18;
      v16 = 8 * HIDWORD(v19);
      do
      {
        v17 = *(WTF::StringImpl **)v15;
        *(_QWORD *)v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v11);
          else
            *(_DWORD *)v17 -= 2;
        }
        v15 = (WTF *)((char *)v15 + 8);
        v16 -= 8;
      }
      while (v16);
    }
  }
  result = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unint64_t WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::IDBValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = v3;
      do
      {
        v10 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = v10;
        v11 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        *(_QWORD *)(v8 + 8) = v11;
        LODWORD(v11) = *((_DWORD *)v9 + 4);
        *((_DWORD *)v9 + 4) = 0;
        *(_DWORD *)(v8 + 16) = v11;
        LODWORD(v11) = *((_DWORD *)v9 + 5);
        *((_DWORD *)v9 + 5) = 0;
        *(_DWORD *)(v8 + 20) = v11;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 32) = 0;
        v12 = *((_QWORD *)v9 + 3);
        *((_QWORD *)v9 + 3) = 0;
        *(_QWORD *)(v8 + 24) = v12;
        LODWORD(v12) = *((_DWORD *)v9 + 8);
        *((_DWORD *)v9 + 8) = 0;
        *(_DWORD *)(v8 + 32) = v12;
        LODWORD(v12) = *((_DWORD *)v9 + 9);
        *((_DWORD *)v9 + 9) = 0;
        *(_DWORD *)(v8 + 36) = v12;
        WebCore::IDBValue::~IDBValue(v9, v7);
        v9 = (WTF *)(v13 + 40);
        v8 += 40;
      }
      while (v9 != (WTF *)((char *)v3 + 40 * v4));
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBIndex::openCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E3357938;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::openCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357938;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::openCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::openCursor(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBIndex::openKeyCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E3357998;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::openKeyCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::openKeyCursor(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::openKeyCursor(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IndexedDB::CursorDirection)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAll(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E33579E8;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAll(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33579E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAll(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAll(JSC::JSGlobalObject &,JSC::JSValue,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAllKeys(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)a1[1];
  *a1 = &off_1E3357A38;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAllKeys(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::IDBKeyRange *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::IDBKeyRange *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357A38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::IDBKeyRange::~IDBKeyRange(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAllKeys(WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>> &&,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBIndex::getAllKeys(JSC::JSGlobalObject &,JSC::JSValue,std::optional<unsigned int>)::$_0,WebCore::ExceptionOr<WTF::RefPtr<WebCore::IDBKeyRange,WTF::RawPtrTraits<WebCore::IDBKeyRange>,WTF::DefaultRefDerefTraits<WebCore::IDBKeyRange>>>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  unsigned int v7;
  char v8;

  WebCore::IDBKeyRange::only(*(JSC::JSGlobalObject **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v6);
  v3 = v7;
  if (!v7)
  {
    v5 = v6[0];
    v6[0] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 26;
  *(_DWORD *)(a2 + 16) = 1;
  if ((_DWORD)v3 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3357978[v3])(&v8, v6);
  return result;
}

WebCore *WebCore::URLByCanonicalizingURL(WebCore *this, NSURL *a2)
{
  WebCore *v2;
  const void *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = this;
  v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C80]), "initWithURL:", this);
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C92C78], "_protocolClassForRequest:skipAppSSO:", v3, 1);
  if (v4)
  {
    v5 = (const void *)objc_msgSend((id)objc_msgSend(v4, "canonicalRequestForRequest:", v3), "URL");
    v6 = v5;
    if (v5)
      CFRetain(v5);
    v2 = (id)CFMakeCollectable(v6);
  }
  if (v3)
    CFRelease(v3);
  return v2;
}

void sub_19536F028(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainThread(objc_class *a1, objc_object *a2)
{
  int isMainThread;
  _QWORD *v6;
  _QWORD *v7;

  isMainThread = WTF::isMainThread(a1);
  if ((isMainThread & 1) == 0)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E3357AF0;
    v6[1] = a1;
    v6[2] = a2;
    v7 = v6;
    WTF::callOnMainThread();
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return isMainThread ^ 1u;
}

void sub_19536F0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore *WebCore::attributedStringByStrippingAttachmentCharacters(WebCore *this, NSAttributedString *a2)
{
  WebCore *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v15;

  v2 = this;
  v3 = (void *)-[WebCore string](this, "string");
  if (_MergedGlobals_133 == 1)
  {
    v4 = qword_1ECE81E88;
  }
  else
  {
    v15 = 65532;
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", &v15, 1);
    qword_1ECE81E88 = v4;
    _MergedGlobals_133 = 1;
  }
  v5 = objc_msgSend(v3, "rangeOfString:", v4);
  if (v5 != 0x7FFFFFFFFFFFFFFFLL && v6 != 0)
  {
    v8 = v5;
    v9 = v6;
    v10 = (void *)-[WebCore mutableCopy](v2, "mutableCopy");
    do
    {
      objc_msgSend(v10, "replaceCharactersInRange:withString:", v8, v9, &stru_1E3487BC0);
      v11 = (void *)objc_msgSend(v10, "string");
      v8 = objc_msgSend(v11, "rangeOfString:", qword_1ECE81E88);
      v9 = v12;
    }
    while (v8 != 0x7FFFFFFFFFFFFFFFLL && v12 != 0);
    return (WebCore *)(id)CFMakeCollectable(v10);
  }
  return v2;
}

void sub_19536F204(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::AudioSampleBufferCompressor::~AudioSampleBufferCompressor(WebCore::AudioSampleBufferCompressor *this, OpaqueAudioConverter *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  PAL *v4;
  PAL *v5;
  const void *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;

  v4 = (PAL *)*((_QWORD *)this + 4);
  if (v4)
    PAL::softLinkCoreMediaCMBufferQueueRemoveTrigger(v4, *((opaqueCMBufferQueue **)this + 36), a3);
  v5 = (PAL *)*((_QWORD *)this + 7);
  if (v5)
  {
    PAL::softLinkAudioToolboxAudioConverterDispose(v5, a2);
    *((_QWORD *)this + 7) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (WTF *)*((_QWORD *)this + 34);
  if (v7)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 32);
  if (v8)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    CFRelease(v13);
  v14 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
}

void sub_19536F318(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t *v2;
  const void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;

  v4 = (const void *)v2[37];
  v2[37] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF *)v2[34];
  if (v5)
  {
    v2[34] = 0;
    *((_DWORD *)v2 + 70) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)v2[32];
  if (v6)
  {
    v2[32] = 0;
    *((_DWORD *)v2 + 66) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)v2[21];
  if (v7)
  {
    v2[21] = 0;
    *((_DWORD *)v2 + 44) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (const void *)v2[19];
  v2[19] = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)v2[18];
  v2[18] = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)v2[5];
  v2[5] = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)v2[4];
  v2[4] = 0;
  if (v11)
    CFRelease(v11);
  v12 = *v2;
  *v2 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSampleBufferCompressor::audioConverterComplexInputDataProc(WebCore::AudioSampleBufferCompressor *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  AudioStreamPacketDescription *v13;
  AudioStreamPacketDescription *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  AudioStreamPacketDescription *v20;
  AudioStreamPacketDescription *v21;
  uint64_t v22;
  AudioStreamPacketDescription *v23;
  opaqueCMBufferQueue *v24;
  PAL *v25;
  opaqueCMSampleBuffer *v26;
  const void *v27;
  OpaqueCMBlockBuffer *v28;
  AudioStreamPacketDescription *v29;
  AudioStreamPacketDescription *v30;
  AudioStreamPacketDescription *v31;
  NSObject *v32;
  OpaqueCMBlockBuffer *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  AudioStreamPacketDescription *v39;
  opaqueCMBufferQueue *v40;
  PAL *v41;
  opaqueCMSampleBuffer *v42;
  AudioStreamPacketDescription *v43;
  OpaqueCMBlockBuffer *v44;
  AudioStreamPacketDescription *v45;
  AudioStreamPacketDescription *v46;
  AudioStreamPacketDescription *DataLength;
  NSObject *v48;
  OpaqueCMBlockBuffer *v49;
  unint64_t v50;
  NSObject *v52;
  const char *v53;
  char *v54;
  AudioStreamPacketDescription *v55;
  uint8_t buf[4];
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (a4)
    *(_QWORD *)&a4->mNumberBuffers = 0;
  v7 = (*((_DWORD *)a5 + 20) * *(_DWORD *)a2);
  v8 = *((unsigned int *)a5 + 67);
  if (*a3 != 1)
  {
    v15 = 2 * v7;
    if (2 * v7 > v8)
    {
      v16 = *((unsigned int *)a5 + 66);
      if (v15 > v16)
      {
        v17 = v16 + (v16 >> 2);
        if (v17 >= 0x10)
          v18 = v17 + 1;
        else
          v18 = 16;
        if (v18 <= v15)
          v19 = 2 * v7;
        else
          v19 = v18;
        if (HIDWORD(v19))
          goto LABEL_95;
        v20 = a5[32];
        v21 = (AudioStreamPacketDescription *)WTF::fastMalloc((WTF *)v19);
        *((_DWORD *)a5 + 66) = v19;
        a5[32] = v21;
        memcpy(v21, v20, v8);
        if (v20)
        {
          if (a5[32] == v20)
          {
            a5[32] = 0;
            *((_DWORD *)a5 + 66) = 0;
          }
          WTF::fastFree((WTF *)v20, a2);
        }
      }
      *((_DWORD *)a5 + 67) = v15;
    }
    v55 = a5[32];
    v54 = (char *)v55 + v7;
    v22 = 0;
    if (!(_DWORD)v7)
    {
LABEL_56:
      v36 = 0;
      *((_QWORD *)a3 + 2) = v55;
      a3[2] = 1;
      a3[3] = v22;
      *((_QWORD *)a3 + 4) = v54;
      a3[6] = 1;
      a3[7] = v22;
      v37 = v22 / *((_DWORD *)a5 + 20);
      goto LABEL_86;
    }
    while (1)
    {
      v23 = a5[37];
      if (a5[38] > a5[39])
        goto LABEL_48;
      if (v23)
      {
        a5[37] = 0;
        CFRelease(v23);
        a5[38] = 0;
      }
      if (PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0]((PAL *)a5[5], a2))
        goto LABEL_56;
      v25 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain((PAL *)a5[5], v24);
      v27 = (const void *)PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](v25, v26);
      v29 = (AudioStreamPacketDescription *)CFRetain(v27);
      v30 = a5[37];
      a5[37] = v29;
      if (v30)
      {
        CFRelease(v30);
        v29 = a5[37];
      }
      if (v29)
      {
        v31 = (AudioStreamPacketDescription *)((unint64_t)PAL::softLinkCoreMediaCMBlockBufferGetDataLength((PAL *)v29, v28) >> 1);
      }
      else
      {
        v32 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1940B8000, v32, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor CMSampleBufferGetDataBuffer failed", buf, 2u);
        }
        v31 = 0;
      }
      a5[38] = v31;
      a5[39] = 0;
      if (v25)
        CFRelease(v25);
      if (v29)
      {
        v23 = a5[37];
LABEL_48:
        if (v23)
        {
          v33 = (OpaqueCMBlockBuffer *)a5[39];
          if ((char *)a5[38] - (char *)v33 >= v7)
            v34 = v7;
          else
            v34 = (char *)a5[38] - (char *)v33;
          v36 = PAL::softLinkCoreMediaCMBlockBufferCopyDataBytes((PAL *)v23, v33, v34, (unint64_t)v55 + v22, a5);
          if ((_DWORD)v36)
          {
            v52 = off_1ECE7C518;
            if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
              return v36;
            *(_DWORD *)buf = 67109120;
            v59 = v36;
            v53 = "AudioSampleBufferCompressor CMBlockBufferCopyDataBytes first channel failed with %d";
LABEL_94:
            _os_log_error_impl(&dword_1940B8000, v52, OS_LOG_TYPE_ERROR, v53, buf, 8u);
            return v36;
          }
          v36 = PAL::softLinkCoreMediaCMBlockBufferCopyDataBytes((PAL *)a5[37], (OpaqueCMBlockBuffer *)((char *)a5[39] + (_QWORD)a5[38]), v34, (unint64_t)&v54[v22], v35);
          if ((_DWORD)v36)
          {
            v52 = off_1ECE7C518;
            if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
              return v36;
            *(_DWORD *)buf = 67109120;
            v59 = v36;
            v53 = "AudioSampleBufferCompressor CMBlockBufferCopyDataBytes second channel failed with %d";
            goto LABEL_94;
          }
          v7 -= v34;
          v22 += v34;
          a5[39] = (AudioStreamPacketDescription *)((char *)a5[39] + v34);
        }
        if (!v7)
          goto LABEL_56;
      }
    }
  }
  if (v8 >= v7)
  {
    if ((_DWORD)v7)
      goto LABEL_58;
    LODWORD(v38) = 0;
LABEL_85:
    v36 = 0;
    *((_QWORD *)a3 + 2) = a5[32];
    a3[3] = v38;
    a3[2] = *((_DWORD *)a5 + 23);
    v37 = v38 / *((_DWORD *)a5 + 20);
LABEL_86:
    *(_DWORD *)a2 = v37;
    return v36;
  }
  v9 = *((unsigned int *)a5 + 66);
  if (v9 < v7)
  {
    v10 = v9 + (v9 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v7)
      v12 = (*((_DWORD *)a5 + 20) * *(_DWORD *)a2);
    else
      v12 = v11;
    if (!HIDWORD(v12))
    {
      v13 = a5[32];
      v14 = (AudioStreamPacketDescription *)WTF::fastMalloc((WTF *)v12);
      *((_DWORD *)a5 + 66) = v12;
      a5[32] = v14;
      memcpy(v14, v13, v8);
      if (v13)
      {
        if (a5[32] == v13)
        {
          a5[32] = 0;
          *((_DWORD *)a5 + 66) = 0;
        }
        WTF::fastFree((WTF *)v13, a2);
      }
      goto LABEL_17;
    }
LABEL_95:
    __break(0xC471u);
    JUMPOUT(0x19536F994);
  }
LABEL_17:
  *((_DWORD *)a5 + 67) = v7;
LABEL_58:
  v38 = 0;
  while (1)
  {
    do
    {
      v39 = a5[37];
      if (a5[38] > a5[39])
        goto LABEL_76;
      if (v39)
      {
        a5[37] = 0;
        CFRelease(v39);
        a5[38] = 0;
      }
      if (PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0]((PAL *)a5[5], a2))
        goto LABEL_85;
      v41 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain((PAL *)a5[5], v40);
      v43 = (AudioStreamPacketDescription *)PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](v41, v42);
      v45 = v43;
      if (v43)
        CFRetain(v43);
      v46 = a5[37];
      a5[37] = v45;
      if (v46)
      {
        CFRelease(v46);
        v45 = a5[37];
      }
      if (v45)
      {
        DataLength = (AudioStreamPacketDescription *)PAL::softLinkCoreMediaCMBlockBufferGetDataLength((PAL *)v45, v44);
      }
      else
      {
        v48 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1940B8000, v48, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor CMSampleBufferGetDataBuffer failed", buf, 2u);
        }
        DataLength = 0;
      }
      a5[38] = DataLength;
      a5[39] = 0;
      if (v41)
        CFRelease(v41);
    }
    while (!v45);
    v39 = a5[37];
LABEL_76:
    if (v39)
      break;
LABEL_82:
    if (!v7)
      goto LABEL_85;
  }
  v49 = (OpaqueCMBlockBuffer *)a5[39];
  if ((char *)a5[38] - (char *)v49 >= v7)
    v50 = v7;
  else
    v50 = (char *)a5[38] - (char *)v49;
  v36 = PAL::softLinkCoreMediaCMBlockBufferCopyDataBytes((PAL *)v39, v49, v50, (unint64_t)a5[32] + v38, a5);
  if (!(_DWORD)v36)
  {
    v7 -= v50;
    v38 += v50;
    a5[39] = (AudioStreamPacketDescription *)((char *)a5[39] + v50);
    goto LABEL_82;
  }
  v52 = off_1ECE7C518;
  if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v59 = v36;
    v53 = "AudioSampleBufferCompressor CMBlockBufferCopyDataBytes failed with %d";
    goto LABEL_94;
  }
  return v36;
}

void sub_19536F9A0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::AudioSampleBufferCompressor::processSampleBuffersUntilLowWaterTime(WebCore::AudioSampleBufferCompressor *this, CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, AudioStreamPacketDescription *a7)
{
  _OWORD *v8;
  _OWORD *v9;
  CMTime *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  const opaqueCMFormatDescription *v16;
  unint64_t v17;
  PAL *v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int v21;
  NSObject *v22;
  void *v23;
  CMTime *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  int PropertyInfo;
  unsigned int v29;
  WTF *v30;
  void *v31;
  unsigned int v32;
  NSObject *v33;
  PAL *mStartOffset;
  const __CFAllocator *value;
  unsigned int v36;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  void *v40;
  unsigned int v41;
  NSObject *v42;
  void *v43;
  unsigned int v44;
  NSObject *v45;
  int v46;
  unsigned int v47;
  NSObject *v48;
  CMTime *v49;
  opaqueCMSampleBuffer *v50;
  CMTime *v51;
  const __CFAllocator *v52;
  unsigned int v53;
  const __CFString *v54;
  CMTime *v55;
  opaqueCMSampleBuffer *v56;
  unsigned int v57;
  NSObject *v58;
  NSObject *v59;
  const char *v60;
  CMTime *v61;
  opaqueCMSampleBuffer *v62;
  CMTime *v63;
  const void *v64;
  int v65;
  NSObject *v66;
  const void *v67;
  const void *v68;
  unsigned int v69;
  NSObject *v70;
  uint8_t *v71;
  NSObject *v72;
  const char *v73;
  void *v74;
  unsigned int v75;
  NSObject *v76;
  const void *v77;
  unsigned int v78;
  NSObject *v79;
  unsigned int v80;
  NSObject *v81;
  const void *v82;
  const void *v83;
  const void *v84;
  opaqueCMBufferQueue *v85;
  PAL *v86;
  opaqueCMSampleBuffer *v87;
  opaqueCMSampleBuffer *v88;
  opaqueCMSampleBuffer *v89;
  PAL *FormatDescription;
  int v91;
  const opaqueCMFormatDescription *v92;
  uint64_t RichestDecodableFormat;
  uint64_t v94;
  __int128 v95;
  void *v96;
  OpaqueAudioConverter **v97;
  int Property;
  NSObject *v99;
  const char *v100;
  unint64_t *v101;
  OpaqueAudioConverter **v102;
  int v103;
  uint8_t *p_buf;
  unsigned int MagicCookie;
  void *v106;
  int v107;
  NSObject *v108;
  OpaqueAudioConverter *v109;
  const char *v110;
  void *v111;
  int v112;
  void *v113;
  int v114;
  NSObject *v115;
  NSObject *v116;
  uint32_t v117;
  int v118;
  NSObject *v119;
  double v120;
  int v121;
  int v122;
  NSObject *v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  size_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  void *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  void *v141;
  void *v142;
  int v143;
  const opaqueCMFormatDescription **v144;
  OpaqueCMBlockBuffer **v145;
  uint64_t v146;
  const __CFAllocator *v147;
  _OWORD *v148;
  CMTime *v149;
  unsigned int v151;
  unsigned int v152[3];
  unsigned int v153;
  PAL *v154;
  CMTime v155;
  __int128 v156;
  CMTimeEpoch epoch;
  unsigned int v158;
  int v159;
  int v160;
  __int128 v161;
  uint64_t v162;
  CMTime v163;
  AudioStreamPacketDescription v164;
  CMTimeEpoch v165;
  CMTime v166;
  AudioStreamBasicDescription buf;

  *(_QWORD *)&buf.mBytesPerFrame = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 7))
    goto LABEL_2;
  if (PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](*((PAL **)this + 5), (opaqueCMBufferQueue *)a2))
    return;
  v86 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*((PAL **)this + 5), v85);
  PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](v86, v87);
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)&buf.mSampleRate;
  *((_QWORD *)this + 25) = *(_QWORD *)&buf.mBytesPerPacket;
  PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(v86, v88);
  *((_OWORD *)this + 13) = *(_OWORD *)&buf.mSampleRate;
  *((_QWORD *)this + 28) = *(_QWORD *)&buf.mBytesPerPacket;
  FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v86, v89);
  v91 = *((_DWORD *)this + 80);
  RichestDecodableFormat = PAL::softLinkCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormat(FormatDescription, v92);
  v94 = *(_QWORD *)(RichestDecodableFormat + 32);
  v95 = *(_OWORD *)(RichestDecodableFormat + 16);
  *((_OWORD *)this + 4) = *(_OWORD *)RichestDecodableFormat;
  *((_QWORD *)this + 13) = *((_QWORD *)this + 8);
  *((_OWORD *)this + 5) = v95;
  *((_QWORD *)this + 12) = v94;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 28) = v91;
  *((_DWORD *)this + 33) = *((_DWORD *)this + 23);
  LODWORD(v163.value) = 40;
  Property = PAL::softLinkAudioToolboxAudioFormatGetProperty((PAL *)0x666D7469, 0, 0, &v163, (unsigned int *)this + 26, v96);
  if (Property)
  {
    v99 = off_1ECE7C518;
    if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 67109120;
      HIDWORD(buf.mSampleRate) = Property;
      v100 = "AudioSampleBufferCompressor AudioFormatGetProperty failed with %d";
LABEL_108:
      p_buf = (uint8_t *)&buf;
      goto LABEL_109;
    }
    return;
  }
  buf.mSampleRate = 0.0;
  v103 = PAL::softLinkAudioToolboxAudioConverterNew((WebCore::AudioSampleBufferCompressor *)((char *)this + 64), (const AudioStreamBasicDescription *)((char *)this + 104), &buf, v97);
  if (v103 == 1718449215)
  {
    *((_QWORD *)this + 13) = 0x40E5888000000000;
    v103 = PAL::softLinkAudioToolboxAudioConverterNew((WebCore::AudioSampleBufferCompressor *)((char *)this + 64), (const AudioStreamBasicDescription *)((char *)this + 104), &buf, v102);
  }
  if (!v103)
  {
    *((_QWORD *)this + 7) = *(_QWORD *)&buf.mSampleRate;
    v166.value = 0;
    MagicCookie = PAL::softLinkCoreMediaCMAudioFormatDescriptionGetMagicCookie(FormatDescription, (const opaqueCMFormatDescription *)&v166, v101);
    if (v166.value)
    {
      v107 = PAL::softLinkAudioToolboxAudioConverterSetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x646D6763, v166.value, MagicCookie, v106);
      if (v107)
      {
        v108 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v164.mStartOffset) = 67109120;
          HIDWORD(v164.mStartOffset) = v107;
          v110 = "AudioSampleBufferCompressor setting kAudioConverterDecompressionMagicCookie failed with %d";
LABEL_162:
          v116 = v108;
          v117 = 8;
          goto LABEL_163;
        }
        goto LABEL_106;
      }
    }
    LODWORD(v163.value) = 40;
    v112 = PAL::softLinkAudioToolboxAudioConverterGetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x61636964, &v163, (unsigned int *)this + 16, v106);
    if (v112)
    {
      v108 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v164.mStartOffset) = 67109120;
        HIDWORD(v164.mStartOffset) = v112;
        v110 = "AudioSampleBufferCompressor getting kAudioConverterCurrentInputStreamDescription failed with %d";
        goto LABEL_162;
      }
      goto LABEL_106;
    }
    if (!*((_DWORD *)this + 20))
    {
      v115 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v164.mStartOffset) = 0;
        v110 = "mBytesPerPacket should not be zero";
        v116 = v115;
        v117 = 2;
LABEL_163:
        _os_log_error_impl(&dword_1940B8000, v116, OS_LOG_TYPE_ERROR, v110, (uint8_t *)&v164, v117);
        goto LABEL_106;
      }
      goto LABEL_106;
    }
    LODWORD(v163.value) = 40;
    v114 = PAL::softLinkAudioToolboxAudioConverterGetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x61636F64, &v163, (unsigned int *)this + 26, v111);
    if (v114)
    {
      v108 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v164.mStartOffset) = 67109120;
        HIDWORD(v164.mStartOffset) = v114;
        v110 = "AudioSampleBufferCompressor getting kAudioConverterCurrentOutputStreamDescription failed with %d";
        goto LABEL_162;
      }
LABEL_106:
      PAL::softLinkAudioToolboxAudioConverterDispose(*((PAL **)this + 7), v109);
      *((_QWORD *)this + 7) = 0;
      return;
    }
    if (*((_DWORD *)this + 28) == 1633772320)
    {
      if (*((_BYTE *)this + 328))
      {
        v118 = PAL::softLinkAudioToolboxAudioConverterSetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x62726174, 4u, (int)this + 324, v113);
        if (!v118)
          goto LABEL_129;
        v119 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v164.mStartOffset) = 67109120;
          HIDWORD(v164.mStartOffset) = v118;
          _os_log_error_impl(&dword_1940B8000, v119, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor setting kAudioConverterEncodeBitRate failed with %d", (uint8_t *)&v164, 8u);
        }
      }
      v120 = *((double *)this + 13);
      if (v120 >= 22000.0)
        v121 = 64000;
      else
        v121 = 32000;
      if (v120 >= 44100.0)
        v121 = 192000;
      LODWORD(v161) = v121;
      LODWORD(v163.value) = 4;
      v122 = PAL::softLinkAudioToolboxAudioConverterSetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x62726174, 4u, &v161, v113);
      if (v122)
      {
        v123 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v164.mStartOffset) = 67109120;
          HIDWORD(v164.mStartOffset) = v122;
          _os_log_error_impl(&dword_1940B8000, v123, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor setting default kAudioConverterEncodeBitRate failed with %d", (uint8_t *)&v164, 8u);
        }
      }
    }
LABEL_129:
    v124 = *((_DWORD *)this + 30);
    if (!v124)
    {
      LODWORD(v163.value) = 4;
      v143 = PAL::softLinkAudioToolboxAudioConverterGetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x786F7073, &v163, (unsigned int *)this + 40, v113);
      if (v143)
      {
        v108 = off_1ECE7C518;
        if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
          goto LABEL_106;
        LODWORD(v164.mStartOffset) = 67109120;
        HIDWORD(v164.mStartOffset) = v143;
        v110 = "AudioSampleBufferCompressor getting kAudioConverterPropertyMaximumOutputPacketSize failed with %d";
        goto LABEL_162;
      }
      v124 = *((_DWORD *)this + 30);
    }
    v125 = *((_DWORD *)this + 40);
    if (v124)
      v125 = v124;
    HIDWORD(v126) = 1069128089;
    LODWORD(v126) = *((_DWORD *)this + 31);
    v127 = v125 * (*((double *)this + 13) * 0.100000001 / (double)v126);
    v128 = *((unsigned int *)this + 71);
    if (v128 < v127)
    {
      v129 = *((unsigned int *)this + 70);
      if (v129 < v127)
      {
        v130 = v129 + (v129 >> 2);
        if (v130 >= 0x10)
          v131 = v130 + 1;
        else
          v131 = 16;
        if (v131 <= v127)
          v132 = v125 * (*((double *)this + 13) * 0.100000001 / (double)v126);
        else
          v132 = v131;
        if (HIDWORD(v132))
          goto LABEL_168;
        v133 = (void *)*((_QWORD *)this + 34);
        v134 = (void *)WTF::fastMalloc((WTF *)v132);
        *((_DWORD *)this + 70) = v132;
        *((_QWORD *)this + 34) = v134;
        memcpy(v134, v133, v128);
        if (v133)
        {
          if (*((void **)this + 34) == v133)
          {
            *((_QWORD *)this + 34) = 0;
            *((_DWORD *)this + 70) = 0;
          }
          WTF::fastFree((WTF *)v133, a2);
        }
      }
      *((_DWORD *)this + 71) = v127;
      v124 = *((_DWORD *)this + 30);
    }
    if (v124)
    {
LABEL_2:
      v8 = (_OWORD *)((char *)this + 184);
      v147 = (WebCore::AudioSampleBufferCompressor *)((char *)this + 104);
      v149 = (CMTime *)*MEMORY[0x1E0C9AE00];
      v9 = (_OWORD *)((char *)this + 232);
      v146 = 67109120;
      v148 = (_OWORD *)((char *)this + 208);
      while (1)
      {
        if ((a2->flags & 1) != 0)
        {
          v156 = *(_OWORD *)&a2->value;
          epoch = a2->epoch;
          PAL::softLinkCoreMediaCMBufferQueueGetDuration(*((PAL **)this + 5), (opaqueCMBufferQueue *)a2);
          *(_OWORD *)&buf.mSampleRate = v156;
          *(_QWORD *)&buf.mBytesPerPacket = epoch;
          v166 = v155;
          if ((PAL::softLinkCoreMediaCMTimeCompare((PAL *)&buf, &v166, v10) & 0x80000000) == 0)
            return;
        }
        v11 = *((_DWORD *)this + 33);
        v152[0] = 1;
        v12 = *((_DWORD *)this + 70);
        v152[2] = v11;
        v153 = v12;
        v154 = (PAL *)*((_QWORD *)this + 34);
        v13 = *((_DWORD *)this + 30);
        if (!v13)
          v13 = *((_DWORD *)this + 40);
        v151 = v12 / v13;
        v15 = PAL::softLinkAudioToolboxAudioConverterFillComplexBuffer(*((PAL **)this + 7), (OpaqueAudioConverter *)WebCore::AudioSampleBufferCompressor::audioConverterComplexInputDataProc, (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))this, &v151, v152, *((AudioBufferList **)this + 21), a7);
        if (v15)
        {
          v99 = off_1ECE7C518;
          if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
            return;
          *(_QWORD *)&buf.mSampleRate = __PAIR64__(v15, v146);
          v100 = "AudioSampleBufferCompressor AudioConverterFillComplexBuffer failed with %d";
          goto LABEL_108;
        }
        v16 = (const opaqueCMFormatDescription *)v151;
        if (!v151)
          return;
        v17 = v153;
        v18 = v154;
        if (*((_QWORD *)this + 18))
        {
          v19 = 0;
          goto LABEL_11;
        }
        v158 = 0;
        PropertyInfo = PAL::softLinkAudioToolboxAudioConverterGetPropertyInfo(*((PAL **)this + 7), (OpaqueAudioConverter *)0x636D6763, &v158, 0, v14);
        v19 = 0;
        v29 = v158;
        if (PropertyInfo || !v158)
          goto LABEL_32;
        v30 = v158 <= 0x10 ? (WTF *)16 : (WTF *)v158;
        v19 = (unsigned int *)WTF::fastMalloc(v30);
        v32 = PAL::softLinkAudioToolboxAudioConverterGetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x636D6763, &v158, v19, v31);
        if (!v32)
          break;
        v33 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          *(_QWORD *)&buf.mSampleRate = __PAIR64__(v32, v146);
          _os_log_error_impl(&dword_1940B8000, v33, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor getting kAudioConverterCompressionMagicCookie failed with %d", (uint8_t *)&buf, 8u);
        }
        mStartOffset = 0;
LABEL_36:
        WTF::fastFree((WTF *)v19, v23);
LABEL_37:
        if ((*((_BYTE *)this + 244) & 1) == 0)
        {
          v166.value = 0;
          LODWORD(v164.mStartOffset) = 8;
          v47 = PAL::softLinkAudioToolboxAudioConverterGetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x7072696D, &v164, (unsigned int *)&v166, v25);
          if (v47)
          {
            v48 = off_1ECE7C518;
            if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
            {
              *(_QWORD *)&buf.mSampleRate = __PAIR64__(v47, v146);
              _os_log_error_impl(&dword_1940B8000, v48, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor getting kAudioConverterPrimeInfo failed with %d", (uint8_t *)&buf, 8u);
            }
            goto LABEL_49;
          }
          PAL::softLinkCoreMediaCMTimeMake((PAL *)LODWORD(v166.value), (int)*(double *)v147, v46);
          *v9 = *(_OWORD *)&buf.mSampleRate;
          *((_QWORD *)this + 31) = *(_QWORD *)&buf.mBytesPerPacket;
        }
        if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
        *(_OWORD *)&buf.mSampleRate = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
        *(_QWORD *)&buf.mBytesPerPacket = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
        *(_OWORD *)&v166.value = *v9;
        v166.epoch = *((_QWORD *)this + 31);
        if ((PAL::softLinkCoreMediaCMTimeCompare((PAL *)&buf, &v166, v24) & 0x80000000) != 0)
        {
          v164.mStartOffset = 0;
          *(_QWORD *)&v164.mVariableFramesInPacket = 0;
          v165 = 0;
          PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](mStartOffset, v50);
          memset(&v163, 0, sizeof(v163));
          *(AudioStreamPacketDescription *)&buf.mSampleRate = v164;
          *(_QWORD *)&buf.mBytesPerPacket = v165;
          *(_OWORD *)&v166.value = *v9;
          v166.epoch = *((_QWORD *)this + 31);
          PAL::softLinkCoreMediaCMTimeMinimum((PAL *)&buf, &v166, v51);
          *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&v163.value;
          *(_QWORD *)&buf.mBytesPerPacket = v163.epoch;
          v54 = (const __CFString *)PAL::softLinkCoreMediaCMTimeCopyAsDictionary((PAL *)&buf, v149, v52);
          if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once != -1)
            dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once, &__block_literal_global_177_0);
          PAL::softLinkCoreMediaCMSetAttachment(mStartOffset, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::constantCoreMediakCMSampleBufferAttachmentKey_TrimDurationAtStart, v54, (const void *)1, v53);
          *(_OWORD *)&buf.mSampleRate = *v9;
          *(_QWORD *)&buf.mBytesPerPacket = *((_QWORD *)this + 31);
          v166 = v163;
          PAL::softLinkCoreMediaCMTimeSubtract((PAL *)&buf, &v166, v55);
          *v9 = v161;
          *((_QWORD *)this + 31) = v162;
          if (v54)
            CFRelease(v54);
        }
LABEL_49:
        *(_OWORD *)&buf.mSampleRate = *v148;
        *(_QWORD *)&buf.mBytesPerPacket = *((_QWORD *)this + 28);
        v57 = PAL::softLinkCoreMediaCMSampleBufferSetOutputPresentationTimeStamp(mStartOffset, (opaqueCMSampleBuffer *)&buf, v49);
        if (v57)
        {
          v58 = off_1ECE7C518;
          if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
          {
LABEL_54:
            v65 = 1;
            goto LABEL_55;
          }
          *(_QWORD *)&buf.mSampleRate = __PAIR64__(v57, v146);
          v59 = v58;
          v60 = "AudioSampleBufferCompressor CMSampleBufferSetOutputPresentationTimeStamp failed with %d";
LABEL_72:
          _os_log_error_impl(&dword_1940B8000, v59, OS_LOG_TYPE_ERROR, v60, (uint8_t *)&buf, 8u);
          goto LABEL_54;
        }
        v164.mStartOffset = 0;
        *(_QWORD *)&v164.mVariableFramesInPacket = 0;
        v165 = 0;
        PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](mStartOffset, v56);
        *(_OWORD *)&buf.mSampleRate = *v8;
        *(_QWORD *)&buf.mBytesPerPacket = *((_QWORD *)this + 25);
        *(AudioStreamPacketDescription *)&v166.value = v164;
        v166.epoch = v165;
        PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&buf, &v166, v61);
        *v8 = *(_OWORD *)&v163.value;
        *((_QWORD *)this + 25) = v163.epoch;
        memset(&v163, 0, sizeof(v163));
        PAL::softLinkCoreMediaCMSampleBufferGetOutputDuration[0](mStartOffset, v62);
        *(_OWORD *)&buf.mSampleRate = *v148;
        *(_QWORD *)&buf.mBytesPerPacket = *((_QWORD *)this + 28);
        v166 = v163;
        PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&buf, &v166, v63);
        *v148 = v161;
        *((_QWORD *)this + 28) = v162;
        v65 = PAL::softLinkCoreMediaCMBufferQueueEnqueue(*((PAL **)this + 4), mStartOffset, v64);
        if (v65)
        {
          v66 = off_1ECE7C518;
          if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
            goto LABEL_54;
          *(_QWORD *)&buf.mSampleRate = __PAIR64__(v65, v146);
          v59 = v66;
          v60 = "AudioSampleBufferCompressor CMBufferQueueEnqueue failed with %d";
          goto LABEL_72;
        }
LABEL_55:
        if (mStartOffset)
          CFRelease(mStartOffset);
        if (v65)
          return;
      }
      v29 = v158;
LABEL_32:
      v164.mStartOffset = 0;
      v44 = PAL::softLinkCoreMediaCMAudioFormatDescriptionCreate((PAL *)v149, v147, 0, 0, (const AudioChannelLayout *)v29, (unint64_t)v19, 0, (const __CFDictionary *)&v164, v144);
      if (v44)
      {
        v45 = off_1ECE7C518;
        if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
          goto LABEL_34;
        *(_QWORD *)&buf.mSampleRate = __PAIR64__(v44, v146);
        v26 = v45;
        v27 = "AudioSampleBufferCompressor CMAudioFormatDescriptionCreate failed with %d";
LABEL_77:
        _os_log_error_impl(&dword_1940B8000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, 8u);
LABEL_34:
        mStartOffset = 0;
LABEL_35:
        if (!v19)
          goto LABEL_37;
        goto LABEL_36;
      }
      v67 = (const void *)*((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = v164.mStartOffset;
      if (v67)
        CFRelease(v67);
      LODWORD(v163.value) = 4;
      LODWORD(v161) = 0;
      v69 = PAL::softLinkAudioToolboxAudioConverterGetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x646D6F64, &v163, (unsigned int *)&v161, v43);
      if (!v69)
      {
        v160 = 2;
        v75 = PAL::softLinkAudioToolboxAudioConverterSetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x646D6F64, v163.value, &v160, v68);
        if (v75)
        {
          v76 = off_1ECE7C518;
          if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
            goto LABEL_82;
          *(_QWORD *)&buf.mSampleRate = __PAIR64__(v75, v146);
          v71 = (uint8_t *)&buf;
          v72 = v76;
          v73 = "AudioSampleBufferCompressor setting kAudioCodecPropertyDelayMode failed with %d";
        }
        else
        {
          v159 = 8;
          buf.mSampleRate = 0.0;
          v78 = PAL::softLinkAudioToolboxAudioConverterGetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x7072696D, &v159, (unsigned int *)&buf, v74);
          if (v78)
          {
            v79 = off_1ECE7C518;
            if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
              goto LABEL_82;
            v166.value = __PAIR64__(v78, v146);
            v71 = (uint8_t *)&v166;
            v72 = v79;
            v73 = "AudioSampleBufferCompressor getting kAudioCodecPropertyPrimeInfo failed with %d";
          }
          else
          {
            v80 = PAL::softLinkAudioToolboxAudioConverterSetProperty(*((PAL **)this + 7), (OpaqueAudioConverter *)0x646D6F64, v163.value, &v161, v77);
            if (!v80)
            {
              v84 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (LODWORD(buf.mSampleRate) / *((_DWORD *)this + 31)));
              v82 = v84;
              if (v84)
                CFRetain(v84);
              goto LABEL_83;
            }
            v81 = off_1ECE7C518;
            if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
              goto LABEL_82;
            v166.value = __PAIR64__(v80, v146);
            v71 = (uint8_t *)&v166;
            v72 = v81;
            v73 = "AudioSampleBufferCompressor setting kAudioCodecPropertyDelayMode failed with %d";
          }
        }
LABEL_81:
        _os_log_error_impl(&dword_1940B8000, v72, OS_LOG_TYPE_ERROR, v73, v71, 8u);
        goto LABEL_82;
      }
      v70 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)&buf.mSampleRate = __PAIR64__(v69, v146);
        v71 = (uint8_t *)&buf;
        v72 = v70;
        v73 = "AudioSampleBufferCompressor getting kAudioCodecPropertyDelayMode failed with %d";
        goto LABEL_81;
      }
LABEL_82:
      v82 = 0;
LABEL_83:
      v83 = (const void *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v82;
      if (v83)
        CFRelease(v83);
LABEL_11:
      v166.value = 0;
      v21 = PAL::softLinkCoreMediaCMBlockBufferCreateWithMemoryBlock((PAL *)v149, 0, (void *)v17, (unint64_t)v149, 0, 0, v17, 1uLL, &v166, v145);
      if (v21)
      {
        v22 = off_1ECE7C518;
        if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
          goto LABEL_34;
        *(_QWORD *)&buf.mSampleRate = __PAIR64__(v21, v146);
        v26 = v22;
        v27 = "AudioSampleBufferCompressor CMBlockBufferCreateWithMemoryBlock failed with %d";
        goto LABEL_77;
      }
      value = (const __CFAllocator *)v166.value;
      v36 = PAL::softLinkCoreMediaCMBlockBufferReplaceDataBytes(v18, (const void *)v166.value, 0, v17, v20);
      if (v36)
      {
        v37 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          *(_QWORD *)&buf.mSampleRate = __PAIR64__(v36, v146);
          v38 = v37;
          v39 = "AudioSampleBufferCompressor CMBlockBufferReplaceDataBytes failed with %d";
LABEL_86:
          _os_log_error_impl(&dword_1940B8000, v38, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, 8u);
        }
      }
      else
      {
        v164.mStartOffset = 0;
        v40 = (void *)*((_QWORD *)this + 18);
        *(_OWORD *)&buf.mSampleRate = *v8;
        *(_QWORD *)&buf.mBytesPerPacket = *((_QWORD *)this + 25);
        v41 = PAL::softLinkCoreMediaCMAudioSampleBufferCreateWithPacketDescriptions((PAL *)v149, value, (OpaqueCMBlockBuffer *)1, 0, 0, v40, v16, (uint64_t)&buf, *((CMTime **)this + 21), &v164, (opaqueCMSampleBuffer **)v146);
        if (!v41)
        {
          mStartOffset = (PAL *)v164.mStartOffset;
          if (objc_msgSend(*((id *)this + 19), "intValue"))
          {
            if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(void)::once != -1)
              dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(void)::once, &__block_literal_global_174);
            PAL::softLinkCoreMediaCMSetAttachment(mStartOffset, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(void)::constantCoreMediakCMSampleBufferAttachmentKey_GradualDecoderRefresh, *((const __CFString **)this + 19), (const void *)1, v25);
          }
          goto LABEL_29;
        }
        v42 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        {
          *(_QWORD *)&buf.mSampleRate = __PAIR64__(v41, v146);
          v38 = v42;
          v39 = "AudioSampleBufferCompressor CMAudioSampleBufferCreateWithPacketDescriptions failed with %d";
          goto LABEL_86;
        }
      }
      mStartOffset = 0;
LABEL_29:
      if (value)
        CFRelease(value);
      goto LABEL_35;
    }
    v135 = (*((_DWORD *)this + 70) / *((_DWORD *)this + 40));
    v136 = *((unsigned int *)this + 45);
    if (v136 >= v135
      || (v137 = *((unsigned int *)this + 44), v137 >= v135))
    {
LABEL_160:
      *((_DWORD *)this + 45) = v135;
      goto LABEL_2;
    }
    v138 = v137 + (v137 >> 2);
    if (v138 >= 0x10)
      v139 = v138 + 1;
    else
      v139 = 16;
    if (v139 <= v135)
      v140 = (*((_DWORD *)this + 70) / *((_DWORD *)this + 40));
    else
      v140 = v139;
    if (!(v140 >> 28))
    {
      v141 = (void *)*((_QWORD *)this + 21);
      v142 = (void *)WTF::fastMalloc((WTF *)(16 * v140));
      *((_DWORD *)this + 44) = v140;
      *((_QWORD *)this + 21) = v142;
      memcpy(v142, v141, 16 * v136);
      if (v141)
      {
        if (*((void **)this + 21) == v141)
        {
          *((_QWORD *)this + 21) = 0;
          *((_DWORD *)this + 44) = 0;
        }
        WTF::fastFree((WTF *)v141, a2);
      }
      goto LABEL_160;
    }
LABEL_168:
    __break(0xC471u);
    JUMPOUT(0x195370CA4);
  }
  v99 = off_1ECE7C518;
  if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v166.value) = 67109120;
    HIDWORD(v166.value) = v103;
    v100 = "AudioSampleBufferCompressor AudioConverterNew failed with %d";
    p_buf = (uint8_t *)&v166;
LABEL_109:
    _os_log_error_impl(&dword_1940B8000, v99, OS_LOG_TYPE_ERROR, v100, p_buf, 8u);
  }
}

void sub_195370CB0(_Unwind_Exception *a1, OpaqueAudioConverter *a2)
{
  uint64_t v2;

  PAL::softLinkAudioToolboxAudioConverterDispose(*(PAL **)(v2 + 56), a2);
  *(_QWORD *)(v2 + 56) = 0;
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaRecorderPrivateWriter::appendData(uint64_t a1, WTF *a2, WTF *a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  int v9;

  v6 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_5:
  WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)(a1 + 32));
  result = WebCore::FragmentedSharedBuffer::append(*(_QWORD *)(a1 + 32), a2, a3);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

unsigned __int8 *WebCore::MediaRecorderPrivateWriter::create@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, WebCore::MediaRecorderPrivateWriter **a4@<X8>)
{
  WebCore::MediaRecorderPrivateWriter *v8;
  unsigned __int8 *result;

  v8 = (WebCore::MediaRecorderPrivateWriter *)WTF::fastMalloc((WTF *)0x170);
  WebCore::MediaRecorderPrivateWriter::MediaRecorderPrivateWriter(v8, a1, a2);
  result = (unsigned __int8 *)WebCore::MediaRecorderPrivateWriter::initialize((uint64_t)v8, a3);
  if ((result & 1) == 0)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
    v8 = 0;
  }
  *a4 = v8;
  return result;
}

void sub_19537106C(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

BOOL WebCore::MediaRecorderPrivateWriter::initialize(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  _BOOL8 result;
  CMTime (__cdecl *v10)(CMBufferRef, void *);
  WebAVAssetWriterDelegate *v11;
  const void *v12;
  float v13;
  PAL **v14;
  uint64_t v15;
  int v16;
  PAL *v17;
  const void **v18;
  uint64_t CallbacksForUnsortedSampleBuffers;
  PAL *v20;
  opaqueCMBufferQueue **v21;
  int v22;
  NSObject *v23;
  OpaqueAudioConverter *v24;
  opaqueCMBufferQueueTriggerToken *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  opaqueCMBufferQueue **v29;
  opaqueCMBufferQueueTriggerToken **v30;
  int v31;
  WTF *v32;
  void *v33;
  OpaqueAudioConverter *v34;
  opaqueCMBufferQueueTriggerToken *v35;
  WebCore::AudioSampleBufferCompressor *v36;
  WTF *v37;
  void *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  char v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  PAL *v56;
  const void **v57;
  uint64_t v58;
  opaqueCMBufferQueue **v59;
  opaqueCMBufferQueueTriggerToken **v60;
  int v61;
  NSObject *v62;
  OpaqueVTCompressionSession *v63;
  opaqueCMBufferQueueTriggerToken *v64;
  WTF *v65;
  void *v66;
  OpaqueVTCompressionSession *v67;
  opaqueCMBufferQueueTriggerToken *v68;
  PAL *v69;
  const void *v70;
  WebCore::VideoSampleBufferCompressor *v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  PAL *v75;
  const void *v76;
  PAL *v77;
  void *v78;
  CMBufferCallbacks v79;

  *(CMBufferCompareCallback *)((char *)&v79.compare + 4) = (CMBufferCompareCallback)*MEMORY[0x1E0C80C00];
  v78 = 0;
  v4 = objc_alloc((Class)PAL::getAVAssetWriterClass[0]((PAL *)a1));
  v5 = objc_msgSend(v4, "initWithFileType:error:", PAL::get_AVFoundation_AVFileTypeMPEG4((PAL *)v4), &v78);
  v6 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    CFRelease(v6);
  v7 = v78;
  if (v78)
  {
    v8 = off_1ECE7C518;
    result = os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = (CMTime (__cdecl *)(CMBufferRef, void *))objc_msgSend(v7, "code");
    HIDWORD(v79.getPresentationTimeStamp) = 134217984;
    v79.getDuration = v10;
    _os_log_error_impl(&dword_1940B8000, v8, OS_LOG_TYPE_ERROR, "create AVAssetWriter instance failed with error code %ld", (uint8_t *)&v79.getPresentationTimeStamp + 4, 0xCu);
    return 0;
  }
  v11 = -[WebAVAssetWriterDelegate initWithWriter:]([WebAVAssetWriterDelegate alloc], "initWithWriter:", a1);
  v12 = *(const void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v11;
  if (v12)
  {
    CFRelease(v12);
    v11 = *(WebAVAssetWriterDelegate **)(a1 + 152);
  }
  objc_msgSend(*(id *)(a1 + 16), "setDelegate:", v11);
  v14 = (PAL **)MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(a1 + 8))
  {
    v15 = WTF::fastMalloc((WTF *)0x150);
    WTF::WorkQueue::create();
    v17 = (PAL *)PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)0x3E8, 0.1, v16);
    *(_QWORD *)(v15 + 32) = 0;
    v18 = (const void **)(v15 + 32);
    *(_QWORD *)(v15 + 56) = 0;
    *(_QWORD *)(v15 + 168) = 0;
    *(_QWORD *)(v15 + 176) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_BYTE *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 144) = 0;
    *(_QWORD *)(v15 + 152) = 0;
    *(_DWORD *)(v15 + 160) = 0;
    if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
    *(_OWORD *)(v15 + 184) = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    *(_QWORD *)(v15 + 200) = qword_1EE2E68A0;
    *(_OWORD *)(v15 + 208) = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    *(_QWORD *)(v15 + 224) = qword_1EE2E68A0;
    *(_OWORD *)(v15 + 232) = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    *(_QWORD *)(v15 + 248) = qword_1EE2E68A0;
    *(_OWORD *)(v15 + 256) = 0u;
    *(_OWORD *)(v15 + 272) = 0u;
    *(_QWORD *)(v15 + 304) = 0;
    *(_QWORD *)(v15 + 312) = 0;
    *(_QWORD *)(v15 + 296) = 0;
    strcpy((char *)(v15 + 320), " caa");
    *(_BYTE *)(v15 + 328) = 0;
    *(void **)((char *)&v79.refcon + 4) = 0;
    CallbacksForUnsortedSampleBuffers = PAL::softLinkCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers(v17);
    v20 = *v14;
    v22 = PAL::softLinkCoreMediaCMBufferQueueCreate(*v14, 0, CallbacksForUnsortedSampleBuffers, (const CMBufferCallbacks *)((char *)&v79.refcon + 4), v21);
    if (v22)
    {
      v23 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        HIDWORD(v79.getPresentationTimeStamp) = 67109120;
        LODWORD(v79.getDuration) = v22;
        v26 = "AudioSampleBufferCompressor CMBufferQueueCreate for m_inputBufferQueue failed with %d";
LABEL_109:
        _os_log_error_impl(&dword_1940B8000, v23, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&v79.getPresentationTimeStamp + 4, 8u);
      }
    }
    else
    {
      v27 = *(void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = *(void **)((char *)&v79.refcon + 4);
      if (v27)
        CFRelease(v27);
      *(_QWORD *)&v79.version = 0;
      v28 = PAL::softLinkCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers((PAL *)v27);
      v31 = PAL::softLinkCoreMediaCMBufferQueueCreate(v20, 0, v28, &v79, v29);
      if (!v31)
      {
        v75 = *(PAL **)&v79.version;
        v76 = *v18;
        *v18 = *(const void **)&v79.version;
        if (v76)
        {
          CFRelease(v76);
          v75 = (PAL *)*v18;
        }
        if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
        *(_OWORD *)((char *)&v79.getPresentationTimeStamp + 4) = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
        *(CMBufferGetBooleanCallback *)((char *)&v79.isDataReady + 4) = *(CMBufferGetBooleanCallback *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
        PAL::softLinkCoreMediaCMBufferQueueInstallTrigger(v75, (opaqueCMBufferQueue *)WebCore::MediaRecorderPrivateWriter::compressedAudioOutputBufferCallback, (void (*)(void *, opaqueCMBufferQueueTriggerToken *))a1, (void *)7, (int)&v79.getPresentationTimeStamp + 4, (CMTime *)(v15 + 288), v30);
        *(_BYTE *)(v15 + 48) = 1;
        goto LABEL_19;
      }
      v23 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        HIDWORD(v79.getPresentationTimeStamp) = 67109120;
        LODWORD(v79.getDuration) = v31;
        v26 = "AudioSampleBufferCompressor CMBufferQueueCreate for m_outputBufferQueue failed with %d";
        goto LABEL_109;
      }
    }
    WebCore::AudioSampleBufferCompressor::~AudioSampleBufferCompressor((WebCore::AudioSampleBufferCompressor *)v15, v24, v25);
    WTF::fastFree(v32, v33);
    v15 = 0;
LABEL_19:
    v36 = *(WebCore::AudioSampleBufferCompressor **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v15;
    if (v36)
    {
      WebCore::AudioSampleBufferCompressor::~AudioSampleBufferCompressor(v36, v34, v35);
      WTF::fastFree(v37, v38);
      v15 = *(_QWORD *)(a1 + 56);
    }
    if (!v15)
      return 0;
    if (*(_BYTE *)(a2 + 12))
    {
      *(_DWORD *)(v15 + 324) = *(_DWORD *)(a2 + 8);
      *(_BYTE *)(v15 + 328) = 1;
    }
  }
  if (!*(_BYTE *)(a1 + 9))
    return 1;
  v39 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    *v39 += 4;
    *(void **)((char *)&v79.refcon + 4) = v39;
    BYTE4(v79.getDecodeTimeStamp) = 0;
    WebCore::ContentType::codecs((WebCore::ContentType *)((char *)&v79.refcon + 4), (uint64_t)&v79.getPresentationTimeStamp + 4, v13);
    if (*v39 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v39, v40);
    else
      *v39 -= 2;
  }
  else
  {
    *(void **)((char *)&v79.refcon + 4) = 0;
    BYTE4(v79.getDecodeTimeStamp) = 0;
    WebCore::ContentType::codecs((WebCore::ContentType *)((char *)&v79.refcon + 4), (uint64_t)&v79.getPresentationTimeStamp + 4, v13);
  }
  v41 = *(WTF **)((char *)&v79.getPresentationTimeStamp + 4);
  if (!LODWORD(v79.isDataReady))
  {
    v42 = 0;
LABEL_81:
    if (v41)
      goto LABEL_111;
    goto LABEL_82;
  }
  v42 = 0;
  v43 = 8 * LODWORD(v79.isDataReady);
  while (1)
  {
    v44 = *(WTF::StringImpl **)v41;
    if (*(_QWORD *)v41)
      break;
LABEL_65:
    v41 = (WTF *)((char *)v41 + 8);
    v43 -= 8;
    if (!v43)
      goto LABEL_71;
  }
  v45 = *(_DWORD *)v44;
  v46 = *((_DWORD *)v44 + 1);
  *(_DWORD *)v44 += 2;
  if (v46 < 5)
  {
    v48 = 1;
    if (v45)
      goto LABEL_64;
    goto LABEL_68;
  }
  v47 = *((_QWORD *)v44 + 1);
  if ((*((_BYTE *)v44 + 16) & 4) != 0)
  {
    v48 = 1;
    if (v46 != 5
      && (*(_BYTE *)v47 & 0xDF) == 0x41
      && (*(_BYTE *)(v47 + 1) & 0xDF) == 0x56
      && (*(_BYTE *)(v47 + 2) & 0xDF) == 0x43
      && (*(_BYTE *)(v47 + 3) & 0xDF) == 0x11
      && v46 >= 0xB
      && (*(_BYTE *)(v47 + 4) & 0xDF) == 0xE)
    {
      v49 = *(unsigned __int8 *)(v47 + 5);
      if (v49 != 52)
      {
        if (v49 == 54)
        {
          v48 = 0;
          v50 = *(unsigned __int8 *)(v47 + 6);
          goto LABEL_43;
        }
        goto LABEL_62;
      }
      v51 = *(unsigned __int8 *)(v47 + 6);
      goto LABEL_48;
    }
LABEL_63:
    if (v45)
      goto LABEL_64;
    goto LABEL_68;
  }
  v48 = 1;
  if (v46 == 5
    || (*(_WORD *)v47 & 0xFFDF) != 0x41
    || (*(_WORD *)(v47 + 2) & 0xFFDF) != 0x56
    || (*(_WORD *)(v47 + 4) & 0xFFDF) != 0x43
    || (*(_WORD *)(v47 + 6) & 0xFFDF) != 0x11
    || v46 < 0xB
    || (*(_WORD *)(v47 + 8) & 0xFFDF) != 0xE)
  {
    goto LABEL_63;
  }
  v52 = *(unsigned __int16 *)(v47 + 10);
  if (v52 == 52)
  {
    v51 = *(unsigned __int16 *)(v47 + 12);
LABEL_48:
    if (v51 == 100 || v51 == 68)
    {
      v48 = 0;
      v42 = 1;
      if (v45)
        goto LABEL_64;
      goto LABEL_68;
    }
    goto LABEL_62;
  }
  if (v52 != 54)
  {
LABEL_62:
    v48 = 0;
    goto LABEL_63;
  }
  v48 = 0;
  v50 = *(unsigned __int16 *)(v47 + 12);
LABEL_43:
  if (v50 == 52)
    v42 = 2;
  if (v45)
  {
LABEL_64:
    *(_DWORD *)v44 = v45;
    if (!v48)
      goto LABEL_71;
    goto LABEL_65;
  }
LABEL_68:
  WTF::StringImpl::destroy(v44, v40);
  if ((v48 & 1) != 0)
    goto LABEL_65;
LABEL_71:
  v41 = *(WTF **)((char *)&v79.getPresentationTimeStamp + 4);
  if (!LODWORD(v79.isDataReady))
    goto LABEL_81;
  v53 = 8 * LODWORD(v79.isDataReady);
  do
  {
    v54 = *(WTF::StringImpl **)v41;
    *(_QWORD *)v41 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v40);
      else
        *(_DWORD *)v54 -= 2;
    }
    v41 = (WTF *)((char *)v41 + 8);
    v53 -= 8;
  }
  while (v53);
  v41 = *(WTF **)((char *)&v79.getPresentationTimeStamp + 4);
  if (*(CMBufferGetTimeCallback *)((char *)&v79.getPresentationTimeStamp + 4))
  {
LABEL_111:
    *(CMBufferGetTimeCallback *)((char *)&v79.getPresentationTimeStamp + 4) = 0;
    HIDWORD(v79.getDuration) = 0;
    WTF::fastFree(v41, v40);
  }
LABEL_82:
  v55 = WTF::fastMalloc((WTF *)0x40);
  v56 = (PAL *)WTF::WorkQueue::create();
  *(_QWORD *)(v55 + 16) = 0;
  v57 = (const void **)(v55 + 16);
  *(_DWORD *)(v55 + 8) = 1635148593;
  *(_BYTE *)(v55 + 40) = 0;
  *(_QWORD *)(v55 + 24) = 0;
  *(_QWORD *)(v55 + 44) = 0x1E40000000;
  *(_BYTE *)(v55 + 52) = 0;
  *(_BYTE *)(v55 + 56) = 0;
  *(_BYTE *)(v55 + 60) = v42;
  *(void **)((char *)&v79.refcon + 4) = 0;
  v58 = PAL::softLinkCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers(v56);
  v61 = PAL::softLinkCoreMediaCMBufferQueueCreate(*v14, 0, v58, (const CMBufferCallbacks *)((char *)&v79.refcon + 4), v59);
  if (v61)
  {
    v62 = off_1ECE7C518;
    if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v79.getPresentationTimeStamp) = 67109120;
      LODWORD(v79.getDuration) = v61;
      _os_log_error_impl(&dword_1940B8000, v62, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor unable to create buffer queue %d", (uint8_t *)&v79.getPresentationTimeStamp + 4, 8u);
    }
    WebCore::VideoSampleBufferCompressor::~VideoSampleBufferCompressor((WebCore::VideoSampleBufferCompressor *)v55, v63, v64);
    WTF::fastFree(v65, v66);
    v55 = 0;
  }
  else
  {
    v69 = *(PAL **)((char *)&v79.refcon + 4);
    v70 = *v57;
    *v57 = *(void **)((char *)&v79.refcon + 4);
    if (v70)
    {
      CFRelease(v70);
      v69 = (PAL *)*v57;
    }
    if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
    {
      v77 = v69;
      dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
      v69 = v77;
    }
    *(_OWORD *)((char *)&v79.getPresentationTimeStamp + 4) = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
    *(CMBufferGetBooleanCallback *)((char *)&v79.isDataReady + 4) = *(CMBufferGetBooleanCallback *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
    PAL::softLinkCoreMediaCMBufferQueueInstallTrigger(v69, (opaqueCMBufferQueue *)WebCore::MediaRecorderPrivateWriter::compressedVideoOutputBufferCallback, (void (*)(void *, opaqueCMBufferQueueTriggerToken *))a1, (void *)7, (int)&v79.getPresentationTimeStamp + 4, (CMTime *)(v55 + 32), v60);
    *(_BYTE *)(v55 + 40) = 1;
  }
  v71 = *(WebCore::VideoSampleBufferCompressor **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v55;
  if (v71)
  {
    WebCore::VideoSampleBufferCompressor::~VideoSampleBufferCompressor(v71, v67, v68);
    WTF::fastFree(v72, v73);
  }
  if (v39)
  {
    if (*v39 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v39, v67);
    else
      *v39 -= 2;
  }
  v74 = *(_QWORD *)(a1 + 80);
  if (!v74)
    return 0;
  result = 1;
  if (*(_BYTE *)(a2 + 20))
  {
    *(_DWORD *)(v74 + 52) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(v74 + 56) = 1;
  }
  return result;
}

void sub_19537192C(_Unwind_Exception *a1, void *a2)
{
  WTF::StringImpl *v2;
  WTF *v3;
  WTF::StringImpl *v5;

  WTF::fastFree(v3, a2);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v5);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaRecorderPrivateWriter::compressedVideoOutputBufferCallback(WebCore::MediaRecorderPrivateWriter *this, void *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  if (!this || (v4 = *(_QWORD *)this) == 0)
  {
    v6 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4, a2, a3);
LABEL_8:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E3357BB0;
  v8[1] = v6;
  v8[2] = this;
  v10 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_195371AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaRecorderPrivateWriter::compressedAudioOutputBufferCallback(WebCore::MediaRecorderPrivateWriter *this, void *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  if (!this || (v4 = *(_QWORD *)this) == 0)
  {
    v6 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4, a2, a3);
LABEL_8:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E3357BD8;
  v8[1] = v6;
  v8[2] = this;
  v10 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_195371C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore::MediaRecorderPrivateWriter *WebCore::MediaRecorderPrivateWriter::MediaRecorderPrivateWriter(WebCore::MediaRecorderPrivateWriter *this, char a2, char a3)
{
  uint64_t v6;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = this;
  *(_QWORD *)this = v6;
  *((_BYTE *)this + 8) = a2;
  *((_BYTE *)this + 9) = a3;
  *((_WORD *)this + 5) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
  *((_OWORD *)this + 6) = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
  *((_QWORD *)this + 14) = qword_1EE2E68A0;
  *(_OWORD *)((char *)this + 120) = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
  *((_QWORD *)this + 17) = qword_1EE2E68A0;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 232) = 0;
  *((_BYTE *)this + 280) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 211) = 0u;
  if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
  *((_OWORD *)this + 18) = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  *((_QWORD *)this + 38) = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
  *(_OWORD *)((char *)this + 312) = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  *((_QWORD *)this + 41) = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
  *((_OWORD *)this + 21) = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  *((_QWORD *)this + 44) = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
  *((_QWORD *)this + 45) = 0;
  return this;
}

void WebCore::MediaRecorderPrivateWriter::~MediaRecorderPrivateWriter(WebCore::MediaRecorderPrivateWriter *this, void *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  WTF *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void *v13;
  const void **v14;
  uint64_t v15;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  const void **v23;
  uint64_t v24;
  const void *v25;
  const void **v26;
  uint64_t v27;
  const void *v28;
  void *v29;
  const void *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  WTF *v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  const void **v42;
  uint64_t v43;
  const void *v44;
  const void **v45;
  uint64_t v46;
  const void *v47;
  unint64_t v48;
  unint64_t v49;
  WTF *v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  const void **v54;
  uint64_t v55;
  const void *v56;
  const void **v57;
  uint64_t v58;
  const void *v59;
  const void *v60;
  const void *v61;
  WebCore::VideoSampleBufferCompressor *v62;
  WTF *v63;
  void *v64;
  const void *v65;
  const void *v66;
  WebCore::AudioSampleBufferCompressor *v67;
  WTF *v68;
  void *v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  WTF *v92;
  WTF *v94;
  _BYTE v95[2];
  _BYTE v96[2];

  v4 = *((_QWORD *)this + 24);
  v5 = *((_QWORD *)this + 25);
  v6 = (_QWORD *)((char *)this + 192);
  v7 = (WTF *)*((_QWORD *)this + 26);
  if (v4 <= v5)
  {
    if (v4 == v5)
      goto LABEL_20;
    v14 = (const void **)((char *)v7 + 8 * v4);
    v15 = 8 * v5 - 8 * v4;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
        CFRelease(v16);
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    if (v5)
    {
      v8 = 8 * v5;
      do
      {
        v9 = *(const void **)v7;
        *(_QWORD *)v7 = 0;
        if (v9)
          CFRelease(v9);
        v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
      v7 = (WTF *)*((_QWORD *)this + 26);
      v4 = *((_QWORD *)this + 24);
    }
    v10 = *((unsigned int *)this + 54);
    if (v4 != v10)
    {
      v11 = (const void **)((char *)v7 + 8 * v4);
      v12 = 8 * v10 - 8 * v4;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
          CFRelease(v13);
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 26);
LABEL_20:
  *v6 = 0;
  v6[1] = 0;
  if (v7)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v7, a2);
  }
  v17 = *((_QWORD *)this + 20);
  v18 = *((_QWORD *)this + 21);
  v19 = (WTF *)*((_QWORD *)this + 22);
  if (v17 <= v18)
  {
    if (v17 == v18)
      goto LABEL_41;
    v26 = (const void **)((char *)v19 + 8 * v17);
    v27 = 8 * v18 - 8 * v17;
    do
    {
      v28 = *v26;
      *v26 = 0;
      if (v28)
        CFRelease(v28);
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  else
  {
    if (v18)
    {
      v20 = 8 * v18;
      do
      {
        v21 = *(const void **)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
          CFRelease(v21);
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
      v19 = (WTF *)*((_QWORD *)this + 22);
      v17 = *((_QWORD *)this + 20);
    }
    v22 = *((unsigned int *)this + 46);
    if (v17 != v22)
    {
      v23 = (const void **)((char *)v19 + 8 * v17);
      v24 = 8 * v22 - 8 * v17;
      do
      {
        v25 = *v23;
        *v23 = 0;
        if (v25)
          CFRelease(v25);
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
  }
  v19 = (WTF *)*((_QWORD *)this + 22);
LABEL_41:
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  if (v19)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v19, a2);
  }
  v29 = (void *)*((_QWORD *)this + 2);
  if (v29)
  {
    objc_msgSend(v29, "cancelWriting");
    v30 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v30)
      CFRelease(v30);
  }
  v31 = (void *)*((_QWORD *)this + 19);
  if (v31)
    objc_msgSend(v31, "close");
  v32 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v32)
  {
    v94 = 0;
    (*(void (**)(uint64_t, WTF **, double))(*(_QWORD *)v32 + 16))(v32, &v94, 0.0);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v94;
    v94 = 0;
    if (v33)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v33));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)v33);
        v85 = *((unsigned int *)v33 + 5);
        if ((_DWORD)v85)
        {
          v86 = *((_QWORD *)v33 + 1);
          v87 = v86 + 16 * v85;
          do
          {
            v88 = *(unsigned int **)(v86 + 8);
            *(_QWORD *)(v86 + 8) = 0;
            if (v88)
            {
              do
              {
                v89 = __ldaxr(v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, v88));
              if (!v90)
              {
                atomic_store(1u, v88);
                v91 = v88[6];
                if ((_DWORD)v91 != -1)
                  ((void (*)(_BYTE *, unsigned int *))off_1E3357B80[v91])(v95, v88 + 2);
                v88[6] = -1;
                WTF::fastFree((WTF *)v88, a2);
              }
            }
            v86 += 16;
          }
          while (v86 != v87);
        }
        v92 = (WTF *)*((_QWORD *)v33 + 1);
        if ((WTF *)((char *)v33 + 24) != v92 && v92 != 0)
        {
          *((_QWORD *)v33 + 1) = 0;
          *((_DWORD *)v33 + 4) = 0;
          WTF::fastFree(v92, a2);
        }
        WTF::fastFree(v33, a2);
      }
    }
  }
  v36 = *((_QWORD *)this + 24);
  v37 = *((_QWORD *)this + 25);
  v38 = (WTF *)*((_QWORD *)this + 26);
  if (v36 <= v37)
  {
    if (v36 == v37)
      goto LABEL_71;
    v45 = (const void **)((char *)v38 + 8 * v36);
    v46 = 8 * v37 - 8 * v36;
    do
    {
      v47 = *v45;
      *v45 = 0;
      if (v47)
        CFRelease(v47);
      ++v45;
      v46 -= 8;
    }
    while (v46);
  }
  else
  {
    if (v37)
    {
      v39 = 8 * v37;
      do
      {
        v40 = *(const void **)v38;
        *(_QWORD *)v38 = 0;
        if (v40)
          CFRelease(v40);
        v38 = (WTF *)((char *)v38 + 8);
        v39 -= 8;
      }
      while (v39);
      v38 = (WTF *)*((_QWORD *)this + 26);
      v36 = *((_QWORD *)this + 24);
    }
    v41 = *((unsigned int *)this + 54);
    if (v36 != v41)
    {
      v42 = (const void **)((char *)v38 + 8 * v36);
      v43 = 8 * v41 - 8 * v36;
      do
      {
        v44 = *v42;
        *v42 = 0;
        if (v44)
          CFRelease(v44);
        ++v42;
        v43 -= 8;
      }
      while (v43);
    }
  }
  v38 = (WTF *)*((_QWORD *)this + 26);
LABEL_71:
  if (v38)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v38, a2);
  }
  v48 = *((_QWORD *)this + 20);
  v49 = *((_QWORD *)this + 21);
  v50 = (WTF *)*((_QWORD *)this + 22);
  if (v48 <= v49)
  {
    if (v48 == v49)
      goto LABEL_92;
    v57 = (const void **)((char *)v50 + 8 * v48);
    v58 = 8 * v49 - 8 * v48;
    do
    {
      v59 = *v57;
      *v57 = 0;
      if (v59)
        CFRelease(v59);
      ++v57;
      v58 -= 8;
    }
    while (v58);
  }
  else
  {
    if (v49)
    {
      v51 = 8 * v49;
      do
      {
        v52 = *(const void **)v50;
        *(_QWORD *)v50 = 0;
        if (v52)
          CFRelease(v52);
        v50 = (WTF *)((char *)v50 + 8);
        v51 -= 8;
      }
      while (v51);
      v50 = (WTF *)*((_QWORD *)this + 22);
      v48 = *((_QWORD *)this + 20);
    }
    v53 = *((unsigned int *)this + 46);
    if (v48 != v53)
    {
      v54 = (const void **)((char *)v50 + 8 * v48);
      v55 = 8 * v53 - 8 * v48;
      do
      {
        v56 = *v54;
        *v54 = 0;
        if (v56)
          CFRelease(v56);
        ++v54;
        v55 -= 8;
      }
      while (v55);
    }
  }
  v50 = (WTF *)*((_QWORD *)this + 22);
LABEL_92:
  if (v50)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v50, a2);
  }
  v60 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v60)
    CFRelease(v60);
  v61 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v61)
    CFRelease(v61);
  v62 = (WebCore::VideoSampleBufferCompressor *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v62)
  {
    WebCore::VideoSampleBufferCompressor::~VideoSampleBufferCompressor(v62, (OpaqueVTCompressionSession *)a2, a3);
    WTF::fastFree(v63, v64);
  }
  v65 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v65)
    CFRelease(v65);
  v66 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v66)
    CFRelease(v66);
  v67 = (WebCore::AudioSampleBufferCompressor *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v67)
  {
    WebCore::AudioSampleBufferCompressor::~AudioSampleBufferCompressor(v67, (OpaqueAudioConverter *)a2, a3);
    WTF::fastFree(v68, v69);
  }
  v70 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v70)
    CFRelease(v70);
  v71 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v72)
  {
    do
    {
      v73 = __ldaxr((unsigned int *)v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, (unsigned int *)v72));
    if (!v74)
    {
      atomic_store(1u, (unsigned int *)v72);
      v76 = *(unsigned int *)(v72 + 20);
      if ((_DWORD)v76)
      {
        v77 = *(_QWORD *)(v72 + 8);
        v78 = v77 + 16 * v76;
        do
        {
          v79 = *(unsigned int **)(v77 + 8);
          *(_QWORD *)(v77 + 8) = 0;
          if (v79)
          {
            do
            {
              v80 = __ldaxr(v79);
              v81 = v80 - 1;
            }
            while (__stlxr(v81, v79));
            if (!v81)
            {
              atomic_store(1u, v79);
              v82 = v79[6];
              if ((_DWORD)v82 != -1)
                ((void (*)(_BYTE *, unsigned int *))off_1E3357B80[v82])(v96, v79 + 2);
              v79[6] = -1;
              WTF::fastFree((WTF *)v79, a2);
            }
          }
          v77 += 16;
        }
        while (v77 != v78);
      }
      v83 = *(WTF **)(v72 + 8);
      if ((WTF *)(v72 + 24) != v83 && v83 != 0)
      {
        *(_QWORD *)(v72 + 8) = 0;
        *(_DWORD *)(v72 + 16) = 0;
        WTF::fastFree(v83, a2);
      }
      WTF::fastFree((WTF *)v72, a2);
    }
  }
  v75 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v75)
    CFRelease(v75);
}

void sub_195372438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, int a12, char a13, char a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;
  opaqueCMBufferQueueTriggerToken *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  unint64_t v33;
  unint64_t v34;
  WTF *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  const void **v39;
  uint64_t v40;
  const void *v41;
  const void **v42;
  uint64_t v43;
  const void *v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  const void **v51;
  uint64_t v52;
  const void *v53;
  const void **v54;
  uint64_t v55;
  const void *v56;
  const void *v57;
  const void *v58;
  WebCore::VideoSampleBufferCompressor *v59;
  WTF *v60;
  void *v61;
  const void *v62;
  const void *v63;
  WebCore::AudioSampleBufferCompressor *v64;
  WTF *v65;
  void *v66;
  const void *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  WTF *v81;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a11)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)a11);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)a11));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)a11);
      v24 = *(unsigned int *)(a11 + 20);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(a11 + 8);
        v26 = v25 + 16 * v24;
        do
        {
          v27 = *(unsigned int **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              v30 = v27[6];
              if ((_DWORD)v30 != -1)
                ((void (*)(char *, unsigned int *))off_1E3357B80[v30])(&a14, v27 + 2);
              v27[6] = -1;
              WTF::fastFree((WTF *)v27, v19);
            }
          }
          v25 += 16;
        }
        while (v25 != v26);
      }
      v31 = *(WTF **)(a11 + 8);
      if ((WTF *)(a11 + 24) != v31 && v31 != 0)
      {
        *(_QWORD *)(a11 + 8) = 0;
        *(_DWORD *)(a11 + 16) = 0;
        WTF::fastFree(v31, v19);
      }
      WTF::fastFree((WTF *)a11, v19);
    }
  }
  v33 = *(_QWORD *)(v16 + 192);
  v34 = *(_QWORD *)(v16 + 200);
  v35 = *(WTF **)(v16 + 208);
  if (v33 <= v34)
  {
    if (v33 == v34)
      goto LABEL_39;
    v42 = (const void **)((char *)v35 + 8 * v33);
    v43 = 8 * v34 - 8 * v33;
    do
    {
      v44 = *v42;
      *v42 = 0;
      if (v44)
        CFRelease(v44);
      ++v42;
      v43 -= 8;
    }
    while (v43);
  }
  else
  {
    if (v34)
    {
      v36 = 8 * v34;
      do
      {
        v37 = *(const void **)v35;
        *(_QWORD *)v35 = 0;
        if (v37)
          CFRelease(v37);
        v35 = (WTF *)((char *)v35 + 8);
        v36 -= 8;
      }
      while (v36);
      v35 = *(WTF **)(v16 + 208);
      v33 = *(_QWORD *)(v16 + 192);
    }
    v38 = *(unsigned int *)(v16 + 216);
    if (v33 != v38)
    {
      v39 = (const void **)((char *)v35 + 8 * v33);
      v40 = 8 * v38 - 8 * v33;
      do
      {
        v41 = *v39;
        *v39 = 0;
        if (v41)
          CFRelease(v41);
        ++v39;
        v40 -= 8;
      }
      while (v40);
    }
  }
  v35 = *(WTF **)(v16 + 208);
LABEL_39:
  if (v35)
  {
    *(_QWORD *)(v16 + 208) = 0;
    *(_DWORD *)(v16 + 216) = 0;
    WTF::fastFree(v35, v19);
  }
  v45 = *(_QWORD *)(v16 + 160);
  v46 = *(_QWORD *)(v16 + 168);
  v47 = *(WTF **)(v16 + 176);
  if (v45 <= v46)
  {
    if (v45 == v46)
      goto LABEL_60;
    v54 = (const void **)((char *)v47 + 8 * v45);
    v55 = 8 * v46 - 8 * v45;
    do
    {
      v56 = *v54;
      *v54 = 0;
      if (v56)
        CFRelease(v56);
      ++v54;
      v55 -= 8;
    }
    while (v55);
  }
  else
  {
    if (v46)
    {
      v48 = 8 * v46;
      do
      {
        v49 = *(const void **)v47;
        *(_QWORD *)v47 = 0;
        if (v49)
          CFRelease(v49);
        v47 = (WTF *)((char *)v47 + 8);
        v48 -= 8;
      }
      while (v48);
      v47 = *(WTF **)(v16 + 176);
      v45 = *(_QWORD *)(v16 + 160);
    }
    v50 = *(unsigned int *)(v16 + 184);
    if (v45 != v50)
    {
      v51 = (const void **)((char *)v47 + 8 * v45);
      v52 = 8 * v50 - 8 * v45;
      do
      {
        v53 = *v51;
        *v51 = 0;
        if (v53)
          CFRelease(v53);
        ++v51;
        v52 -= 8;
      }
      while (v52);
    }
  }
  v47 = *(WTF **)(v16 + 176);
LABEL_60:
  if (v47)
  {
    *(_QWORD *)(v16 + 176) = 0;
    *(_DWORD *)(v16 + 184) = 0;
    WTF::fastFree(v47, v19);
  }
  v57 = *(const void **)(v16 + 152);
  *(_QWORD *)(v16 + 152) = 0;
  if (v57)
    CFRelease(v57);
  v58 = *(const void **)(v16 + 88);
  *(_QWORD *)(v16 + 88) = 0;
  if (v58)
    CFRelease(v58);
  v59 = *(WebCore::VideoSampleBufferCompressor **)(v16 + 80);
  *(_QWORD *)(v16 + 80) = 0;
  if (v59)
  {
    WebCore::VideoSampleBufferCompressor::~VideoSampleBufferCompressor(v59, (OpaqueVTCompressionSession *)v19, v20);
    WTF::fastFree(v60, v61);
  }
  v62 = *(const void **)(v16 + 72);
  *(_QWORD *)(v16 + 72) = 0;
  if (v62)
    CFRelease(v62);
  v63 = *(const void **)(v16 + 64);
  *(_QWORD *)(v16 + 64) = 0;
  if (v63)
    CFRelease(v63);
  v64 = *(WebCore::AudioSampleBufferCompressor **)(v16 + 56);
  *(_QWORD *)(v16 + 56) = 0;
  if (v64)
  {
    WebCore::AudioSampleBufferCompressor::~AudioSampleBufferCompressor(v64, (OpaqueAudioConverter *)v19, v20);
    WTF::fastFree(v65, v66);
  }
  v67 = *(const void **)(v16 + 48);
  *(_QWORD *)(v16 + 48) = 0;
  if (v67)
    CFRelease(v67);
  v68 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *(unsigned int **)(v16 + 32);
  *(_QWORD *)(v16 + 32) = 0;
  if (v69)
  {
    v70 = v69;
    do
    {
      v71 = __ldaxr(v69);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v69));
    if (!v72)
    {
      atomic_store(1u, v69);
      v74 = v69[5];
      if ((_DWORD)v74)
      {
        v75 = *((_QWORD *)v70 + 1);
        v76 = v75 + 16 * v74;
        do
        {
          v77 = *(unsigned int **)(v75 + 8);
          *(_QWORD *)(v75 + 8) = 0;
          if (v77)
          {
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              atomic_store(1u, v77);
              v80 = v77[6];
              if ((_DWORD)v80 != -1)
                ((void (*)(char *, unsigned int *))off_1E3357B80[v80])(&a16, v77 + 2);
              v77[6] = -1;
              WTF::fastFree((WTF *)v77, v19);
            }
          }
          v75 += 16;
        }
        while (v75 != v76);
      }
      v81 = (WTF *)*((_QWORD *)v70 + 1);
      if (v70 + 6 != (unsigned int *)v81 && v81 != 0)
      {
        *((_QWORD *)v70 + 1) = 0;
        v70[4] = 0;
        WTF::fastFree(v81, v19);
      }
      WTF::fastFree((WTF *)v70, v19);
    }
  }
  v73 = *(const void **)(v16 + 16);
  *(_QWORD *)(v16 + 16) = 0;
  if (v73)
    CFRelease(v73);
  _Unwind_Resume(a1);
}

WebCore::VideoSampleBufferCompressor *WebCore::MediaRecorderPrivateWriter::close(WebCore::MediaRecorderPrivateWriter *this, OpaqueAudioConverter *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  WebCore::AudioSampleBufferCompressor *v4;
  WTF *v5;
  void *v6;
  WebCore::VideoSampleBufferCompressor *result;
  WTF *v8;
  void *v9;

  v4 = (WebCore::AudioSampleBufferCompressor *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    WebCore::AudioSampleBufferCompressor::~AudioSampleBufferCompressor(v4, a2, a3);
    WTF::fastFree(v5, v6);
  }
  result = (WebCore::VideoSampleBufferCompressor *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (result)
  {
    WebCore::VideoSampleBufferCompressor::~VideoSampleBufferCompressor(result, a2, a3);
    return (WebCore::VideoSampleBufferCompressor *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebCore::MediaRecorderPrivateWriter::processNewCompressedVideoSampleBuffers(WebCore::MediaRecorderPrivateWriter *this, opaqueCMBufferQueue *a2)
{
  PAL *v3;
  opaqueCMSampleBuffer *v4;
  const void *FormatDescription;
  const void *v6;
  const void *v7;

  if (*((_QWORD *)this + 9))
  {
LABEL_9:
    if (*((_BYTE *)this + 10))
    {
      do
      {
        while ((WebCore::MediaRecorderPrivateWriter::appendCompressedVideoSampleBufferIfPossible(this, a2) & 1) != 0)
          ;
      }
      while ((WebCore::MediaRecorderPrivateWriter::appendCompressedAudioSampleBufferIfPossible(this, a2) & 1) != 0);
    }
    return;
  }
  v3 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*(PAL **)(*((_QWORD *)this + 10) + 16), a2);
  FormatDescription = (const void *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v3, v4);
  v6 = FormatDescription;
  if (FormatDescription)
    CFRetain(FormatDescription);
  v7 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v6;
  if (v7)
    CFRelease(v7);
  if (!*((_BYTE *)this + 8) || *((_QWORD *)this + 6))
  {
    WebCore::MediaRecorderPrivateWriter::startAssetWriter(this);
    goto LABEL_9;
  }
}

void WebCore::MediaRecorderPrivateWriter::startAssetWriter(WebCore::MediaRecorderPrivateWriter *this)
{
  WebCore::MediaRecorderPrivateWriter *v1;
  id v2;
  void *v3;
  const void *v4;
  __int128 v5;
  id v6;
  void *v7;
  const void *v8;
  void *v9;
  opaqueCMBufferQueue *v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint8_t buf[16];
  _OWORD v17[3];

  v1 = this;
  if (*((_BYTE *)this + 9))
  {
    v2 = objc_alloc((Class)PAL::getAVAssetWriterInputClass[0](this));
    v3 = (void *)objc_msgSend(v2, "initWithMediaType:outputSettings:sourceFormatHint:", PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)v2), 0, *((_QWORD *)v1 + 9));
    v4 = (const void *)*((_QWORD *)v1 + 11);
    *((_QWORD *)v1 + 11) = v3;
    if (v4)
    {
      CFRelease(v4);
      v3 = (void *)*((_QWORD *)v1 + 11);
    }
    objc_msgSend(v3, "setExpectsMediaDataInRealTime:", 1);
    if (*((_BYTE *)v1 + 280))
    {
      v5 = *(_OWORD *)((char *)v1 + 248);
      v17[0] = *(_OWORD *)((char *)v1 + 232);
      v17[1] = v5;
      v17[2] = *(_OWORD *)((char *)v1 + 264);
      objc_msgSend(*((id *)v1 + 11), "setTransform:", v17);
    }
    if ((objc_msgSend(*((id *)v1 + 2), "canAddInput:", *((_QWORD *)v1 + 11)) & 1) == 0)
    {
      v11 = off_1ECE7C518;
      if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)buf = 0;
      v12 = "MediaRecorderPrivateWriter::startAssetWriter failed canAddInput for video";
      goto LABEL_27;
    }
    this = (WebCore::MediaRecorderPrivateWriter *)objc_msgSend(*((id *)v1 + 2), "addInput:", *((_QWORD *)v1 + 11));
  }
  if (*((_BYTE *)v1 + 8))
  {
    v6 = objc_alloc((Class)PAL::getAVAssetWriterInputClass[0](this));
    v7 = (void *)objc_msgSend(v6, "initWithMediaType:outputSettings:sourceFormatHint:", PAL::get_AVFoundation_AVMediaTypeAudio((PAL *)v6), 0, *((_QWORD *)v1 + 6));
    v8 = (const void *)*((_QWORD *)v1 + 8);
    *((_QWORD *)v1 + 8) = v7;
    if (v8)
    {
      CFRelease(v8);
      v7 = (void *)*((_QWORD *)v1 + 8);
    }
    objc_msgSend(v7, "setExpectsMediaDataInRealTime:", 1);
    if ((objc_msgSend(*((id *)v1 + 2), "canAddInput:", *((_QWORD *)v1 + 8)) & 1) == 0)
    {
      v11 = off_1ECE7C518;
      if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)buf = 0;
      v12 = "MediaRecorderPrivateWriter::startAssetWriter failed canAddInput for audio";
LABEL_27:
      _os_log_error_impl(&dword_1940B8000, v11, OS_LOG_TYPE_ERROR, v12, buf, 2u);
      return;
    }
    objc_msgSend(*((id *)v1 + 2), "addInput:", *((_QWORD *)v1 + 8));
  }
  if ((objc_msgSend(*((id *)v1 + 2), "startWriting") & 1) == 0)
  {
    v11 = off_1ECE7C518;
    if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v12 = "MediaRecorderPrivateWriter::startAssetWriter failed startWriting";
    goto LABEL_27;
  }
  v9 = (void *)*((_QWORD *)v1 + 2);
  if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
  {
    v13 = (void *)*((_QWORD *)v1 + 2);
    dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
    v9 = v13;
  }
  v14 = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  v15 = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
  objc_msgSend(v9, "startSessionAtSourceTime:", &v14);
  do
  {
    while ((WebCore::MediaRecorderPrivateWriter::appendCompressedVideoSampleBufferIfPossible(v1, v10) & 1) != 0)
      ;
  }
  while ((WebCore::MediaRecorderPrivateWriter::appendCompressedAudioSampleBufferIfPossible(v1, v10) & 1) != 0);
  *((_BYTE *)v1 + 10) = 1;
}

uint64_t WebCore::MediaRecorderPrivateWriter::appendCompressedSampleBuffers(WebCore::MediaRecorderPrivateWriter *this, opaqueCMBufferQueue *a2)
{
  uint64_t result;

  do
  {
    while ((WebCore::MediaRecorderPrivateWriter::appendCompressedVideoSampleBufferIfPossible(this, a2) & 1) != 0)
      ;
    result = WebCore::MediaRecorderPrivateWriter::appendCompressedAudioSampleBufferIfPossible(this, a2);
  }
  while ((result & 1) != 0);
  return result;
}

void WebCore::MediaRecorderPrivateWriter::processNewCompressedAudioSampleBuffers(WebCore::MediaRecorderPrivateWriter *this, opaqueCMBufferQueue *a2)
{
  PAL *v3;
  opaqueCMSampleBuffer *v4;
  const void *FormatDescription;
  const void *v6;
  const void *v7;

  if (*((_QWORD *)this + 6))
  {
LABEL_9:
    if (*((_BYTE *)this + 10))
    {
      do
      {
        while ((WebCore::MediaRecorderPrivateWriter::appendCompressedVideoSampleBufferIfPossible(this, a2) & 1) != 0)
          ;
      }
      while ((WebCore::MediaRecorderPrivateWriter::appendCompressedAudioSampleBufferIfPossible(this, a2) & 1) != 0);
    }
    return;
  }
  v3 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*(PAL **)(*((_QWORD *)this + 7) + 32), a2);
  FormatDescription = (const void *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v3, v4);
  v6 = FormatDescription;
  if (FormatDescription)
    CFRetain(FormatDescription);
  v7 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v6;
  if (v7)
    CFRelease(v7);
  if (!*((_BYTE *)this + 9) || *((_QWORD *)this + 9))
  {
    WebCore::MediaRecorderPrivateWriter::startAssetWriter(this);
    goto LABEL_9;
  }
}

uint64_t WebCore::MediaRecorderPrivateWriter::appendCompressedAudioSampleBufferIfPossible(WebCore::MediaRecorderPrivateWriter *this, opaqueCMBufferQueue *a2)
{
  uint64_t v2;
  uint64_t result;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 7);
  if (!v2)
    return 0;
  result = PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(*(PAL **)(v2 + 32), a2);
  if (result)
  {
    v5 = (const void *)result;
    if (*((_BYTE *)this + 224))
    {
      v7 = *((_QWORD *)this + 24);
      v6 = *((_QWORD *)this + 25);
      if (v7)
      {
        if (v6 + 1 != v7)
          goto LABEL_34;
        goto LABEL_33;
      }
      v15 = *((unsigned int *)this + 54);
      if (v6)
      {
        if (v6 != v15 - 1)
        {
LABEL_34:
          *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v6) = v5;
          if (v6 == *((unsigned int *)this + 54) - 1)
            v18 = 0;
          else
            v18 = v6 + 1;
          *((_QWORD *)this + 25) = v18;
          return 1;
        }
LABEL_33:
        WTF::Deque<WTF::RetainPtr<opaqueCMSampleBuffer *>,0ul>::expandCapacity((uint64_t *)this + 24);
        v6 = *((_QWORD *)this + 25);
        goto LABEL_34;
      }
      if (!(_DWORD)v15)
        goto LABEL_33;
    }
    else
    {
      while (*((_QWORD *)this + 24) != *((_QWORD *)this + 25)
           && objc_msgSend(*((id *)this + 8), "isReadyForMoreMediaData"))
      {
        v8 = *((_QWORD *)this + 24);
        if (v8 == *((_QWORD *)this + 25))
        {
          result = 80;
          __break(0xC471u);
          return result;
        }
        v9 = (void *)*((_QWORD *)this + 8);
        v10 = *((_QWORD *)this + 26);
        v11 = *(const void **)(v10 + 8 * v8);
        *(_QWORD *)(v10 + 8 * v8) = 0;
        v12 = *((_QWORD *)this + 26);
        v13 = *(const void **)(v12 + 8 * v8);
        *(_QWORD *)(v12 + 8 * v8) = 0;
        if (v13)
        {
          CFRelease(v13);
          v8 = *((_QWORD *)this + 24);
        }
        if (v8 == *((unsigned int *)this + 54) - 1)
          v14 = 0;
        else
          v14 = v8 + 1;
        *((_QWORD *)this + 24) = v14;
        objc_msgSend(v9, "appendSampleBuffer:", v11);
        if (v11)
          CFRelease(v11);
      }
      if ((objc_msgSend(*((id *)this + 8), "isReadyForMoreMediaData") & 1) != 0)
      {
        objc_msgSend(*((id *)this + 8), "appendSampleBuffer:", v5);
        CFRelease(v5);
        return 1;
      }
      v16 = *((_QWORD *)this + 24);
      v6 = *((_QWORD *)this + 25);
      if (v16)
      {
        if (v6 + 1 == v16)
          goto LABEL_33;
        goto LABEL_34;
      }
      v17 = *((unsigned int *)this + 54);
      if (v6)
      {
        if (v6 == v17 - 1)
          goto LABEL_33;
        goto LABEL_34;
      }
      if (!(_DWORD)v17)
        goto LABEL_33;
    }
    v6 = 0;
    goto LABEL_34;
  }
  return result;
}

void sub_195372E34(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaRecorderPrivateWriter::appendCompressedVideoSampleBufferIfPossible(WebCore::MediaRecorderPrivateWriter *this, opaqueCMBufferQueue *a2)
{
  uint64_t v2;
  uint64_t result;
  PAL *v5;
  uint64_t v6;
  uint64_t v7;
  opaqueCMSampleBuffer *v8;
  uint64_t v9;
  uint64_t v10;
  PAL *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  opaqueCMSampleBuffer *v15;
  opaqueCMSampleBuffer *v16;
  opaqueCMSampleBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    return 0;
  result = PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(*(PAL **)(v2 + 16), a2);
  if (result)
  {
    v5 = (PAL *)result;
    if (*((_BYTE *)this + 224))
    {
      v7 = *((_QWORD *)this + 20);
      v6 = *((_QWORD *)this + 21);
      if (v7)
      {
        if (v6 + 1 != v7)
          goto LABEL_35;
        goto LABEL_34;
      }
      v18 = *((unsigned int *)this + 46);
      if (v6)
      {
        if (v6 != v18 - 1)
          goto LABEL_35;
        goto LABEL_34;
      }
      if (!(_DWORD)v18)
        goto LABEL_34;
    }
    else
    {
      if (*((_QWORD *)this + 20) != *((_QWORD *)this + 21))
      {
        while (objc_msgSend(*((id *)this + 11), "isReadyForMoreMediaData"))
        {
          v9 = *((_QWORD *)this + 20);
          if (v9 == *((_QWORD *)this + 21))
          {
            result = 80;
            __break(0xC471u);
            return result;
          }
          v10 = *((_QWORD *)this + 22);
          v11 = *(PAL **)(v10 + 8 * v9);
          *(_QWORD *)(v10 + 8 * v9) = 0;
          v12 = *((_QWORD *)this + 22);
          v13 = *(const void **)(v12 + 8 * v9);
          *(_QWORD *)(v12 + 8 * v9) = 0;
          if (v13)
          {
            CFRelease(v13);
            v9 = *((_QWORD *)this + 20);
          }
          if (v9 == *((unsigned int *)this + 46) - 1)
            v14 = 0;
          else
            v14 = v9 + 1;
          *((_QWORD *)this + 20) = v14;
          PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](v11, v8);
          *((_OWORD *)this + 6) = v22;
          *((_QWORD *)this + 14) = v23;
          PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](v11, v15);
          *(_OWORD *)((char *)this + 120) = v22;
          *((_QWORD *)this + 17) = v23;
          *((_BYTE *)this + 144) = 1;
          objc_msgSend(*((id *)this + 11), "appendSampleBuffer:", v11);
          if (v11)
            CFRelease(v11);
          if (*((_QWORD *)this + 20) == *((_QWORD *)this + 21))
            break;
        }
      }
      if ((objc_msgSend(*((id *)this + 11), "isReadyForMoreMediaData") & 1) != 0)
      {
        PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](v5, v16);
        *((_OWORD *)this + 6) = v22;
        *((_QWORD *)this + 14) = v23;
        PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](v5, v17);
        *(_OWORD *)((char *)this + 120) = v22;
        *((_QWORD *)this + 17) = v23;
        *((_BYTE *)this + 144) = 1;
        objc_msgSend(*((id *)this + 11), "appendSampleBuffer:", v5);
        CFRelease(v5);
        return 1;
      }
      v19 = *((_QWORD *)this + 20);
      v6 = *((_QWORD *)this + 21);
      if (v19)
      {
        if (v6 + 1 != v19)
          goto LABEL_35;
        goto LABEL_34;
      }
      v20 = *((unsigned int *)this + 46);
      if (v6)
      {
        if (v6 != v20 - 1)
          goto LABEL_35;
        goto LABEL_34;
      }
      if (!(_DWORD)v20)
      {
LABEL_34:
        WTF::Deque<WTF::RetainPtr<opaqueCMSampleBuffer *>,0ul>::expandCapacity((uint64_t *)this + 20);
        v6 = *((_QWORD *)this + 21);
        goto LABEL_35;
      }
    }
    v6 = 0;
LABEL_35:
    *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v6) = v5;
    if (v6 == *((unsigned int *)this + 46) - 1)
      v21 = 0;
    else
      v21 = v6 + 1;
    *((_QWORD *)this + 21) = v21;
    return 1;
  }
  return result;
}

void sub_195373100(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaRecorderPrivateWriter::appendCompressedVideoSampleBuffer(WebCore::MediaRecorderPrivateWriter *this, opaqueCMSampleBuffer *a2)
{
  opaqueCMSampleBuffer *v4;
  __int128 v6;
  uint64_t v7;

  PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](a2, a2);
  *((_OWORD *)this + 6) = v6;
  *((_QWORD *)this + 14) = v7;
  PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](a2, v4);
  *(_OWORD *)((char *)this + 120) = v6;
  *((_QWORD *)this + 17) = v7;
  *((_BYTE *)this + 144) = 1;
  return objc_msgSend(*((id *)this + 11), "appendSampleBuffer:", a2);
}

void WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  CMTime *v10;
  WebCore *v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  __int128 v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CMTime v39;
  AVAssetWriterInput v40;
  uint64_t v41;
  _BYTE v42[24];
  __int16 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = a1[24];
  v5 = a1[25];
  v6 = a1[20];
  v7 = a1[21];
  v8 = v6 != v7;
  if (*((_BYTE *)a1 + 144))
  {
    v9 = objc_msgSend((id)a1[11], "isReadyForMoreMediaData");
    if (v6 != v7 || v9 == 0)
    {
      v8 = 1;
      goto LABEL_11;
    }
    v12 = (WebCore *)a1[11];
    v40 = (AVAssetWriterInput)*((_OWORD *)a1 + 6);
    v41 = a1[14];
    v39 = *(CMTime *)((_BYTE *)a1 + 5);
    WebCore::appendEndsPreviousSampleDurationMarker(v12, &v40, &v39, v10);
    v8 = 0;
  }
  if (v4 == v5 && !v8)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    return;
  }
LABEL_11:
  *((_BYTE *)a1 + 224) = 1;
  v29 = a1;
  v13 = *a1;
  if (!*a1)
  {
    v15 = 0;
    goto LABEL_23;
  }
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
LABEL_15:
    MEMORY[0x19AEA534C](v13);
    goto LABEL_16;
  }
  if (__stxr(1u, (unsigned __int8 *)v13))
    goto LABEL_15;
LABEL_16:
  if (*(_QWORD *)(v13 + 24))
  {
    ++*(_QWORD *)(v13 + 16);
    v15 = v13;
  }
  else
  {
    v15 = 0;
  }
  v16 = __ldxr((unsigned __int8 *)v13);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_23:
  LOBYTE(v31) = v4 != v5;
  HIBYTE(v31) = v8;
  v17 = a1[26];
  a1[26] = 0;
  v18 = *((_DWORD *)a1 + 54);
  *((_DWORD *)a1 + 54) = 0;
  v19 = a1[22];
  a1[22] = 0;
  v20 = *((_DWORD *)a1 + 46);
  *((_DWORD *)a1 + 46) = 0;
  v21 = *a2;
  *a2 = 0;
  *(_QWORD *)v42 = v29;
  *(_QWORD *)&v42[8] = v15;
  v30 = 0u;
  *(_QWORD *)&v42[16] = a1;
  v43 = v31;
  v22 = *((_OWORD *)a1 + 12);
  *((_OWORD *)a1 + 12) = 0u;
  v44 = v22;
  v32 = 0u;
  v45 = v17;
  v33 = 0;
  v46 = v18;
  v34 = 0u;
  v23 = *((_OWORD *)a1 + 10);
  *((_OWORD *)a1 + 10) = 0u;
  v47 = v23;
  v48 = v19;
  v35 = 0;
  v36 = 0;
  v49 = v20;
  v37 = 0;
  v38 = 0;
  v50 = v21;
  v24 = malloc_type_malloc(0x88uLL, 0x10E0040B8D8B406uLL);
  *v24 = MEMORY[0x1E0C809A0];
  v24[1] = 50331650;
  v24[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0>(WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  v24[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0>(WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0)::descriptor;
  *((_OWORD *)v24 + 2) = *(_OWORD *)v42;
  v25 = *(_QWORD *)&v42[16];
  *(_OWORD *)&v42[8] = 0u;
  v24[6] = v25;
  *((_WORD *)v24 + 28) = v43;
  *((_OWORD *)v24 + 4) = v44;
  v44 = 0u;
  v24[10] = v45;
  v24[11] = 0;
  v45 = 0;
  *((_DWORD *)v24 + 22) = v46;
  LODWORD(v46) = 0;
  *((_OWORD *)v24 + 6) = v47;
  v47 = 0u;
  v24[14] = v48;
  v24[15] = 0;
  v48 = 0;
  *((_DWORD *)v24 + 30) = v49;
  LODWORD(v49) = 0;
  v26 = v50;
  v50 = 0;
  v24[16] = v26;
  WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0::~$_0((uint64_t)v42, v27);
  WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0::~$_0((uint64_t)&v29, v28);
  if (v4 != v5)
    objc_msgSend((id)a1[8], "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], v24);
  if (v8)
    objc_msgSend((id)a1[11], "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], v24);
  _Block_release(v24);
}

void sub_1953734CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  const void *v31;

  _Block_release(v31);
  _Unwind_Resume(a1);
}

void WebCore::appendEndsPreviousSampleDurationMarker(WebCore *this, AVAssetWriterInput *a2, CMTime *a3, CMTime *a4)
{
  unsigned int v7;
  int v8;
  NSObject *v9;
  PAL *v10;
  NSObject *v11;
  PAL *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  Class isa;
  __int128 v17;
  CMTimeEpoch epoch;
  uint8_t buf[4];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
  v13 = *(_OWORD *)PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
  v14 = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid[16];
  v15 = (__int128)*a2;
  isa = a2[1].super.isa;
  v17 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v12 = 0;
  v8 = ((uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, unsigned __int8, int (*)(opaqueCMSampleBuffer *, void *), void *, const opaqueCMFormatDescription *, uint64_t, uint64_t, const CMSampleTimingInfo *, uint64_t, const unint64_t *))PAL::softLinkCoreMediaCMSampleBufferCreate)((PAL *)*MEMORY[0x1E0C9AE00], 0, (OpaqueCMBlockBuffer *)1, 0, 0, 0, 0, 1, (uint64_t)&v13, 0, 0, (const unint64_t *)&v12);
  if (v8)
  {
    v9 = off_1ECE7C518;
    if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v20 = v8;
      _os_log_error_impl(&dword_1940B8000, v9, OS_LOG_TYPE_ERROR, "MediaRecorderPrivateWriter appendEndsPreviousSampleDurationMarker failed CMSampleBufferCreate with %d", buf, 8u);
    }
  }
  else
  {
    v10 = v12;
    if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(void)::once, &__block_literal_global_171_0);
    PAL::softLinkCoreMediaCMSetAttachment(v10, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(void)::constantCoreMediakCMSampleBufferAttachmentKey_EndsPreviousSampleDuration, (const __CFString *)*MEMORY[0x1E0C9AE50], (const void *)1, v7);
    if ((-[WebCore appendSampleBuffer:](this, "appendSampleBuffer:", v10) & 1) == 0
      && (v11 = off_1ECE7C518, os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR)))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1940B8000, v11, OS_LOG_TYPE_ERROR, "MediaRecorderPrivateWriter appendSampleBuffer to writer input failed", buf, 2u);
      if (!v10)
        return;
    }
    else if (!v10)
    {
      return;
    }
    CFRelease(v10);
  }
}

void sub_195373720(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  const void **v13;
  uint64_t v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  const void *v24;
  const void **v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v34;

  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(WTF **)(a1 + 80);
  if (v4 <= v5)
  {
    if (v4 == v5)
      goto LABEL_22;
    v13 = (const void **)((char *)v6 + 8 * v4);
    v14 = 8 * v5 - 8 * v4;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        CFRelease(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  else
  {
    if (v5)
    {
      v7 = 8 * v5;
      do
      {
        v8 = *(const void **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
          CFRelease(v8);
        v6 = (WTF *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
      v6 = *(WTF **)(a1 + 80);
      v4 = *(_QWORD *)(a1 + 64);
    }
    v9 = *(unsigned int *)(a1 + 88);
    if (v4 != v9)
    {
      v10 = (const void **)((char *)v6 + 8 * v4);
      v11 = 8 * v9 - 8 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
          CFRelease(v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v6 = *(WTF **)(a1 + 80);
LABEL_22:
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v6, a2);
  }
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(WTF **)(a1 + 48);
  if (v16 <= v17)
  {
    if (v16 == v17)
      goto LABEL_43;
    v25 = (const void **)((char *)v18 + 8 * v16);
    v26 = 8 * v17 - 8 * v16;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
        CFRelease(v27);
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  else
  {
    if (v17)
    {
      v19 = 8 * v17;
      do
      {
        v20 = *(const void **)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
          CFRelease(v20);
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
      v18 = *(WTF **)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 32);
    }
    v21 = *(unsigned int *)(a1 + 56);
    if (v16 != v21)
    {
      v22 = (const void **)((char *)v18 + 8 * v16);
      v23 = 8 * v21 - 8 * v16;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
          CFRelease(v24);
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
  }
  v18 = *(WTF **)(a1 + 48);
LABEL_43:
  if (v18)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v18, a2);
  }
  v28 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v28)
    return a1;
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_50;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_50:
  v30 = *(_QWORD *)(v28 + 16) - 1;
  *(_QWORD *)(v28 + 16) = v30;
  if (v30)
  {
    v34 = __ldxr((unsigned __int8 *)v28);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v28))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
    return a1;
  }
  v31 = *(_QWORD *)(v28 + 8);
  v32 = __ldxr((unsigned __int8 *)v28);
  if (v32 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v28))
    {
      if (!v31)
        goto LABEL_57;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v28);
  if (!v31)
LABEL_57:
    WTF::fastFree((WTF *)v28, a2);
  return a1;
}

void WebCore::MediaRecorderPrivateWriter::appendVideoFrame(CGAffineTransform *this, WebCore::VideoFrame *a2)
{
  CGAffineTransform *v3;
  PAL *HostTimeClock;
  OpaqueCMClock *v5;
  _OWORD *p_ty;
  int ty_low;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  PAL *v11;
  OpaqueCMClock *v12;
  CMTime *v13;
  CMTime *v14;
  const __CFAllocator *v15;
  PAL *v16;
  const opaqueCMFormatDescription **v17;
  opaqueCMSampleBuffer **v18;
  const void *value;
  const void *v20;
  CGFloat tx;
  uint64_t v22;
  CGFloat *v23;
  CGFloat a;
  CMSampleTimingInfo v25;
  CGAffineTransform v26;
  CMTime v27;
  CGAffineTransform v28;
  __int128 v29;
  uint64_t v30;

  v3 = this;
  if (!BYTE2(this[4].tx))
  {
    BYTE2(this[4].tx) = 1;
    HostTimeClock = (PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock((PAL *)this);
    this = (CGAffineTransform *)PAL::softLinkCoreMediaCMClockGetTime(HostTimeClock, v5);
    *(_OWORD *)&v3[6].a = *(_OWORD *)&v28.a;
    v3[6].c = v28.c;
    if (*((_WORD *)a2 + 17) || *((_BYTE *)a2 + 32))
    {
      this = CGAffineTransformMakeRotation(&v28, (double)*((unsigned __int16 *)a2 + 17) * 3.14159265 / 180.0);
      p_ty = (_OWORD *)&v3[4].ty;
      ty_low = LOBYTE(v3[5].ty);
      v8 = *(_OWORD *)&v28.c;
      *(_OWORD *)&v3[4].ty = *(_OWORD *)&v28.a;
      *(_OWORD *)&v3[5].b = v8;
      *(_OWORD *)&v3[5].d = *(_OWORD *)&v28.tx;
      if (!ty_low)
        LOBYTE(v3[5].ty) = 1;
      if (*((_BYTE *)a2 + 32))
      {
        v9 = *(_OWORD *)&v3[5].b;
        *(_OWORD *)&v26.a = *p_ty;
        *(_OWORD *)&v26.c = v9;
        *(_OWORD *)&v26.tx = *(_OWORD *)&v3[5].d;
        this = CGAffineTransformScale(&v28, &v26, -1.0, 1.0);
        v10 = *(_OWORD *)&v28.c;
        *p_ty = *(_OWORD *)&v28.a;
        *(_OWORD *)&v3[5].b = v10;
        *(_OWORD *)&v3[5].d = *(_OWORD *)&v28.tx;
      }
    }
  }
  memset(&v25.decodeTimeStamp, 0, sizeof(v25.decodeTimeStamp));
  v11 = (PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock((PAL *)this);
  PAL::softLinkCoreMediaCMClockGetTime(v11, v12);
  v27 = *(CMTime *)&v3[6].a;
  *(_OWORD *)&v28.a = *(_OWORD *)&v25.presentationTimeStamp.value;
  *(_QWORD *)&v28.c = v25.presentationTimeStamp.epoch;
  PAL::softLinkCoreMediaCMTimeSubtract((PAL *)&v28, &v27, v13);
  memset(&v28, 0, 24);
  v27 = *(CMTime *)&v3[6].d;
  PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v28, &v27, v14);
  v25.decodeTimeStamp = v25.duration;
  v15 = (const __CFAllocator *)(*(uint64_t (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 56))(a2);
  v27.value = 0;
  v16 = (PAL *)*MEMORY[0x1E0C9AE00];
  if (!PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer((PAL *)*MEMORY[0x1E0C9AE00], v15, (__CVBuffer *)&v27, v17))
  {
    value = (const void *)v27.value;
    if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
    *(_OWORD *)&v28.a = *(_OWORD *)PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    v28.c = *(CGFloat *)&PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid[16];
    *(_OWORD *)&v28.d = *(_OWORD *)&v25.duration.value;
    *(_QWORD *)&v28.ty = v25.duration.epoch;
    v29 = *(_OWORD *)PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    v30 = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid[16];
    v25.duration.value = 0;
    if (PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer(v16, v15, (__CVBuffer *)v27.value, (const opaqueCMFormatDescription *)&v28, &v25, v18))v20 = 0;
    else
      v20 = (const void *)v25.duration.value;
    if (value)
      CFRelease(value);
    if (v20)
    {
      tx = v3[1].tx;
      v22 = **(_QWORD **)&tx;
      v23 = (CGFloat *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v23 = off_1E3357D48;
      v23[1] = tx;
      *((_QWORD *)v23 + 2) = v20;
      *(_QWORD *)&v28.a = v23;
      (*(void (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v22 + 24))(v22, &v28);
      a = v28.a;
      v28.a = 0.0;
      if (a != 0.0)
        (*(void (**)(CGFloat))(**(_QWORD **)&a + 8))(COERCE_CGFLOAT(*(_QWORD *)&a));
      CFRelease(v20);
    }
  }
}

void sub_195373CA0(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

double WebCore::MediaRecorderPrivateWriter::appendAudioSampleBuffer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *value;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  CMTime *v19;
  double result;
  CMTime v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  CMTime v28;
  __int128 v29;
  uint64_t v30;

  v26 = *(_OWORD *)(a1 + 336);
  v27 = *(_QWORD *)(a1 + 352);
  WebCore::createAudioSampleBuffer(a2, a3, &v26, (const opaqueCMFormatDescription *)a5, &v28);
  value = (const void *)v28.value;
  if (v28.value)
  {
    v9 = *(uint64_t **)(a1 + 56);
    v10 = *v9;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E3357B68;
    v11[1] = v9;
    v11[2] = value;
    *(_QWORD *)&v29 = v11;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 24))(v10, &v29);
    v12 = v29;
    *(_QWORD *)&v29 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    CFRelease(value);
  }
  v22 = *(_OWORD *)(a1 + 336);
  v23 = *(_QWORD *)(a1 + 352);
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (a5 >= 0)
    v15 = 4;
  else
    v15 = 8;
  if (v14 <= 1)
    v16 = 1;
  else
    v16 = v14;
  if (v14)
    v17 = a5;
  else
    v17 = a5 >> 63;
  if (v14)
    v18 = 0;
  else
    v18 = v15;
  PAL::softLinkCoreMediaCMTimeMake((PAL *)v17, v16, v13);
  v21.flags |= v18 | 1;
  v29 = v22;
  v30 = v23;
  v28 = v21;
  PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v29, &v28, v19);
  result = *(double *)&v24;
  *(_OWORD *)(a1 + 336) = v24;
  *(_QWORD *)(a1 + 352) = v25;
  return result;
}

void sub_195373E58(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 80);
  *(_QWORD *)(v2 - 80) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaRecorderPrivateWriter::finishedFlushingSamples(uint64_t this)
{
  if (*(_BYTE *)(this + 225))
    return WebCore::MediaRecorderPrivateWriter::stopRecording(this);
  return this;
}

uint64_t WebCore::MediaRecorderPrivateWriter::stopRecording(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = this;
  if (*(_BYTE *)(this + 224))
  {
    *(_BYTE *)(this + 225) = 1;
    return this;
  }
  if (!*(_BYTE *)(this + 11))
  {
    *(_BYTE *)(this + 11) = 1;
    v2 = *(uint64_t **)(this + 80);
    if (v2)
    {
      v3 = *v2;
      v4 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v4 = off_1E3357D20;
      *(_QWORD *)(v4 + 8) = v2;
      *(_BYTE *)(v4 + 16) = 1;
      v15 = v4;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, &v15);
      v5 = v15;
      v15 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    v6 = *(uint64_t **)(v1 + 56);
    if (v6)
    {
      v7 = *v6;
      v8 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v8 = off_1E3357B40;
      *(_QWORD *)(v8 + 8) = v6;
      *(_BYTE *)(v8 + 16) = 1;
      v15 = v8;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v15);
      v9 = v15;
      v15 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    *(_BYTE *)(v1 + 12) = 1;
    v10 = *(_QWORD *)v1;
    if (!*(_QWORD *)v1)
    {
      v12 = 0;
      goto LABEL_22;
    }
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_15:
    if (*(_QWORD *)(v10 + 24))
    {
      ++*(_QWORD *)(v10 + 16);
      v12 = v10;
    }
    else
    {
      v12 = 0;
    }
    v13 = __ldxr((unsigned __int8 *)v10);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_22:
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v14 = &off_1E3357C00;
        v14[1] = v1;
        v14[2] = v12;
        v14[3] = v1;
        v15 = (uint64_t)v14;
        WTF::callOnMainThread();
        this = v15;
        v15 = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        return this;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_22;
  }
  return this;
}

void sub_195374054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaRecorderPrivateWriter::fetchData(WebCore::MediaRecorderPrivateWriter *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = *a2;
  *a2 = 0;
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (!*((_BYTE *)this + 12))
  {
    if (!*((_BYTE *)this + 10))
      return WebCore::MediaRecorderPrivateWriter::completeFetchData(this);
    v5 = (uint64_t *)*((_QWORD *)this + 10);
    if (v5)
    {
      v6 = *v5;
      v7 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v7 = off_1E3357D20;
      *(_QWORD *)(v7 + 8) = v5;
      *(_BYTE *)(v7 + 16) = 0;
      v18 = v7;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 24))(v6, &v18);
      v8 = v18;
      v18 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v9 = (uint64_t *)*((_QWORD *)this + 7);
    if (v9)
    {
      v10 = *v9;
      v11 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v11 = off_1E3357B40;
      *(_QWORD *)(v11 + 8) = v9;
      *(_BYTE *)(v11 + 16) = 0;
      v18 = v11;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 24))(v10, &v18);
      v12 = v18;
      v18 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    v13 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
      v15 = 0;
      goto LABEL_25;
    }
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_18:
    if (*(_QWORD *)(v13 + 24))
    {
      ++*(_QWORD *)(v13 + 16);
      v15 = v13;
    }
    else
    {
      v15 = 0;
    }
    v16 = __ldxr((unsigned __int8 *)v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_25:
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v17 = &off_1E3357CA8;
        v17[1] = v15;
        v17[2] = this;
        v18 = (uint64_t)v17;
        WTF::callOnMainThread();
        result = v18;
        v18 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_25;
  }
  return result;
}

void sub_1953742F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaRecorderPrivateWriter::completeFetchData(WebCore::MediaRecorderPrivateWriter *this)
{
  double v2;
  void *v3;
  double v4;
  PAL *HostTimeClock;
  OpaqueCMClock *v6;
  CMTime *v7;
  CMTime *v8;
  unsigned __int8 *v9;
  CMTimeValue v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  CMTimeValue value;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  CMTime v32;
  __int128 v33;
  uint64_t v34;

  v2 = *((double *)this + 45);
  if (*((_BYTE *)this + 8))
  {
    v33 = *((_OWORD *)this + 21);
    v34 = *((_QWORD *)this + 44);
    v4 = ((double (*)(__int128 *))PAL::softLinkCoreMediaCMTimeGetSeconds)(&v33);
  }
  else
  {
    HostTimeClock = (PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock(this);
    PAL::softLinkCoreMediaCMClockGetTime(HostTimeClock, v6);
    v32 = *(CMTime *)((_BYTE *)this + 12);
    v33 = v30;
    v34 = v31;
    PAL::softLinkCoreMediaCMTimeSubtract((PAL *)&v33, &v32, v7);
    v33 = 0uLL;
    v34 = 0;
    v32 = *(CMTime *)((_BYTE *)this + 13);
    PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v33, &v32, v8);
    v33 = v28;
    v34 = v29;
    v4 = ((double (*)(__int128 *))PAL::softLinkCoreMediaCMTimeGetSeconds)(&v33);
  }
  *((double *)this + 45) = v4;
  v9 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C]((char *)this + 24);
LABEL_8:
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    v11 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = v11 + 24;
    *(_QWORD *)(v11 + 16) = 1;
    *(_BYTE *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
  }
  *(_QWORD *)&v33 = 0;
  v32.value = v11;
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v33, v3);
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::MediaRecorderPrivateWriter *)((char *)this + 24));
LABEL_15:
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  (*(void (**)(uint64_t, CMTime *, double))(*(_QWORD *)v13 + 16))(v13, &v32, v2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  value = v32.value;
  v32.value = 0;
  if (value)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)value);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)value));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)value);
      v19 = *(unsigned int *)(value + 20);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD *)(value + 8);
        v21 = v20 + 16 * v19;
        do
        {
          v22 = *(unsigned int **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              v25 = v22[6];
              if ((_DWORD)v25 != -1)
                ((void (*)(__int128 *, unsigned int *))off_1E3357B80[v25])(&v33, v22 + 2);
              v22[6] = -1;
              WTF::fastFree((WTF *)v22, v15);
            }
          }
          v20 += 16;
        }
        while (v20 != v21);
      }
      v26 = *(WTF **)(value + 8);
      if ((WTF *)(value + 24) != v26 && v26 != 0)
      {
        *(_QWORD *)(value + 8) = 0;
        *(_DWORD *)(value + 16) = 0;
        WTF::fastFree(v26, v15);
      }
      return WTF::fastFree((WTF *)value, v15);
    }
  }
  return result;
}

void sub_195374694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (a19)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)a19);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)a19));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)a19);
      v28 = *((unsigned int *)a19 + 5);
      if ((_DWORD)v28)
      {
        v29 = *((_QWORD *)a19 + 1);
        v30 = v29 + 16 * v28;
        do
        {
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              v34 = v31[6];
              if ((_DWORD)v34 != -1)
                ((void (*)(char *, unsigned int *))off_1E3357B80[v34])(&a23, v31 + 2);
              v31[6] = -1;
              WTF::fastFree((WTF *)v31, v25);
            }
          }
          v29 += 16;
        }
        while (v29 != v30);
      }
      v35 = (WTF *)*((_QWORD *)a19 + 1);
      if ((WTF *)((char *)a19 + 24) != v35 && v35 != 0)
      {
        *((_QWORD *)a19 + 1) = 0;
        *((_DWORD *)a19 + 4) = 0;
        WTF::fastFree(v35, v25);
      }
      WTF::fastFree(a19, v25);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *WebCore::MediaRecorderPrivateWriter::takeData@<X0>(WebCore::MediaRecorderPrivateWriter *this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t *result;
  int v9;
  uint64_t v10;

  v5 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 24);
LABEL_5:
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v7 + 24;
    *(_QWORD *)(v7 + 16) = 1;
    *(_BYTE *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
  }
  v10 = 0;
  *a3 = v7;
  result = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v10, a2);
  v9 = __ldxr(v5);
  if (v9 == 1)
  {
    if (!__stlxr(0, v5))
      return result;
  }
  else
  {
    __clrex();
  }
  return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
}

double WebCore::MediaRecorderPrivateWriter::pause(WebCore::MediaRecorderPrivateWriter *this)
{
  PAL *HostTimeClock;
  OpaqueCMClock *v3;
  CMTime *v4;
  CMTime *v5;
  double result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  CMTime v11;
  __int128 v12;
  uint64_t v13;

  HostTimeClock = (PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock(this);
  PAL::softLinkCoreMediaCMClockGetTime(HostTimeClock, v3);
  v11 = *(CMTime *)((_BYTE *)this + 12);
  v12 = v9;
  v13 = v10;
  PAL::softLinkCoreMediaCMTimeSubtract((PAL *)&v12, &v11, v4);
  v12 = 0uLL;
  v13 = 0;
  v11 = *(CMTime *)((_BYTE *)this + 13);
  PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v12, &v11, v5);
  result = *(double *)&v7;
  *(_OWORD *)((char *)this + 312) = v7;
  *((_QWORD *)this + 41) = v8;
  return result;
}

double WebCore::MediaRecorderPrivateWriter::resume(WebCore::MediaRecorderPrivateWriter *this)
{
  PAL *HostTimeClock;
  OpaqueCMClock *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  HostTimeClock = (PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock(this);
  PAL::softLinkCoreMediaCMClockGetTime(HostTimeClock, v3);
  result = *(double *)&v5;
  *((_OWORD *)this + 18) = v5;
  *((_QWORD *)this + 38) = v6;
  return result;
}

uint64_t *WebCore::MediaRecorderPrivateWriter::mimeType(WebCore::MediaRecorderPrivateWriter *this)
{
  {
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_0::operator() const(void)::impl;
  }
  {
    WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl += 2;
    WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4 = (uint64_t)&WebCore::MediaRecorderPrivateWriter::mimeType(void)::$_1::operator() const(void)::impl;
  }
  if (*((_BYTE *)this + 9))
    return &WebCore::MediaRecorderPrivateWriter::mimeType(void)const::videoMP4;
  else
    return &WebCore::MediaRecorderPrivateWriter::mimeType(void)const::audioMP4;
}

uint64_t WebCore::MediaRecorderPrivateWriter::audioBitRate(WebCore::MediaRecorderPrivateWriter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1 && *(_BYTE *)(v1 + 328))
    return *(unsigned int *)(v1 + 324);
  else
    return 0;
}

uint64_t WebCore::MediaRecorderPrivateWriter::videoBitRate(WebCore::MediaRecorderPrivateWriter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 10);
  if (v1 && *(_BYTE *)(v1 + 56))
    return *(unsigned int *)(v1 + 52);
  else
    return 0;
}

void WebCore::VideoSampleBufferCompressor::~VideoSampleBufferCompressor(WebCore::VideoSampleBufferCompressor *this, OpaqueVTCompressionSession *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  PAL *v4;
  PAL *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;

  v4 = (PAL *)*((_QWORD *)this + 2);
  if (v4)
    PAL::softLinkCoreMediaCMBufferQueueRemoveTrigger(v4, *((opaqueCMBufferQueue **)this + 4), a3);
  v5 = (PAL *)*((_QWORD *)this + 3);
  if (v5
    && (PAL::softLinkVideoToolboxVTCompressionSessionInvalidate(v5, a2),
        v6 = (const void *)*((_QWORD *)this + 3),
        *((_QWORD *)this + 3) = 0,
        v6))
  {
    CFRelease(v6);
    v7 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v7)
      CFRelease(v7);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
}

void sub_195374AFC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v3 = (const void *)v1[3];
  v1[3] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)v1[2];
  v1[2] = 0;
  if (v4)
    CFRelease(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  _Unwind_Resume(exception_object);
}

void WebCore::VideoSampleBufferCompressor::videoCompressionCallback(PAL **this, void *a2, void *a3, int a4, opaqueCMBufferQueue *a5, opaqueCMSampleBuffer *a6)
{
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v7 = (int)a3;
    v8 = off_1ECE7C518;
    if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
    {
      v11 = 67109120;
      v12 = v7;
      v9 = "VideoSampleBufferCompressor videoCompressionCallback status is %d";
LABEL_8:
      _os_log_error_impl(&dword_1940B8000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v11, 8u);
    }
  }
  else
  {
    v6 = PAL::softLinkCoreMediaCMBufferQueueEnqueue(this[2], a5, a3);
    if (v6)
    {
      v10 = v6;
      v8 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        v11 = 67109120;
        v12 = v10;
        v9 = "VideoSampleBufferCompressor CMBufferQueueEnqueue failed with %d";
        goto LABEL_8;
      }
    }
  }
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0>(WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  return WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0::~$_0(a1 + 32, a2);
}

unsigned __int8 *WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0>(WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  opaqueCMSampleBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  PAL *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  opaqueCMSampleBuffer *v24;
  WebCore *v25;
  CMTime v27;
  AVAssetWriterInput v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(unsigned __int8 ***)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v5);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (v7)
        goto LABEL_12;
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v7)
    return (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
LABEL_12:
  while (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72)
       && objc_msgSend(*(id *)(v6 + 64), "isReadyForMoreMediaData"))
  {
    v10 = *(_QWORD *)(a1 + 64);
    if (v10 == *(_QWORD *)(a1 + 72))
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x195374F58);
    }
    v11 = *(void **)(v6 + 64);
    v12 = *(_QWORD *)(a1 + 80);
    v13 = *(const void **)(v12 + 8 * v10);
    *(_QWORD *)(v12 + 8 * v10) = 0;
    v14 = *(_QWORD *)(a1 + 80);
    v15 = *(const void **)(v14 + 8 * v10);
    *(_QWORD *)(v14 + 8 * v10) = 0;
    if (v15)
    {
      CFRelease(v15);
      v10 = *(_QWORD *)(a1 + 64);
    }
    if (v10 == *(unsigned int *)(a1 + 88) - 1)
      v16 = 0;
    else
      v16 = v10 + 1;
    *(_QWORD *)(a1 + 64) = v16;
    objc_msgSend(v11, "appendSampleBuffer:", v13);
    if (v13)
      CFRelease(v13);
  }
  while (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a1 + 104))
  {
    if (!objc_msgSend(*(id *)(v6 + 88), "isReadyForMoreMediaData"))
      break;
    v18 = *(_QWORD *)(a1 + 96);
    if (v18 == *(_QWORD *)(a1 + 104))
      goto LABEL_47;
    v19 = *(_QWORD *)(a1 + 112);
    v20 = *(PAL **)(v19 + 8 * v18);
    *(_QWORD *)(v19 + 8 * v18) = 0;
    v21 = *(_QWORD *)(a1 + 112);
    v22 = *(const void **)(v21 + 8 * v18);
    *(_QWORD *)(v21 + 8 * v18) = 0;
    if (v22)
    {
      CFRelease(v22);
      v18 = *(_QWORD *)(a1 + 96);
    }
    if (v18 == *(unsigned int *)(a1 + 120) - 1)
      v23 = 0;
    else
      v23 = v18 + 1;
    *(_QWORD *)(a1 + 96) = v23;
    PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](v20, v17);
    *(AVAssetWriterInput *)(v6 + 96) = v28;
    *(_QWORD *)(v6 + 112) = v29;
    PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](v20, v24);
    *(AVAssetWriterInput *)(v6 + 120) = v28;
    *(_QWORD *)(v6 + 136) = v29;
    *(_BYTE *)(v6 + 144) = 1;
    objc_msgSend(*(id *)(v6 + 88), "appendSampleBuffer:", v20);
    if (v20)
      CFRelease(v20);
  }
  if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a1 + 72)
    && *(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 104)
    && (!*(_BYTE *)(a1 + 57) || objc_msgSend(*(id *)(v6 + 88), "isReadyForMoreMediaData")))
  {
    if (*(_BYTE *)(a1 + 56))
      objc_msgSend(*(id *)(v6 + 64), "markAsFinished");
    if (*(_BYTE *)(a1 + 57))
    {
      v25 = *(WebCore **)(v6 + 88);
      v28 = *(AVAssetWriterInput *)(v6 + 96);
      v29 = *(_QWORD *)(v6 + 112);
      v27 = *(CMTime *)(v6 + 120);
      WebCore::appendEndsPreviousSampleDurationMarker(v25, &v28, &v27, a4);
      objc_msgSend(*(id *)(v6 + 88), "markAsFinished");
    }
    *(_BYTE *)(v6 + 224) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
    if (*(_BYTE *)(v6 + 225))
      WebCore::MediaRecorderPrivateWriter::stopRecording(v6);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v7);
}

void sub_195374F7C(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3357AC8;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_195375098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore::MediaRecorderPrivateWriter *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  WebCore::MediaRecorderPrivateWriter *result;
  WTF *v5;
  WTF *v6;
  void *v7;
  BOOL v8;

  v5 = *(WTF **)(a1 + 8);
  result = *(WebCore::MediaRecorderPrivateWriter **)(a1 + 16);
  if (result)
  {
    WebCore::MediaRecorderPrivateWriter::~MediaRecorderPrivateWriter(result, a2, a3);
    result = (WebCore::MediaRecorderPrivateWriter *)WTF::fastFree(v6, v7);
  }
  if (*(_BYTE *)(a1 + 24))
    v8 = v5 == 0;
  else
    v8 = 1;
  if (!v8)
    return (WebCore::MediaRecorderPrivateWriter *)WTF::fastFree(v5, a2);
  return result;
}

BOOL WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = *(unsigned int *)(a1 + 4);
    if (a3 > v3)
      return 0;
    v4 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    {
      if (a3 < v3)
      {
        v5 = 0;
        v7 = 0;
        while (v3 != v7)
        {
          if ((*(unsigned __int8 *)(v4 + v7) | 0x20) == *(unsigned __int8 *)(a2 + v7))
          {
            v5 = ++v7 >= a3;
            if (a3 != v7)
              continue;
          }
          return v5;
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
        while (v3 != v6)
        {
          if ((*(unsigned __int8 *)(v4 + v6) | 0x20) == *(unsigned __int8 *)(a2 + v6))
          {
            v5 = ++v6 >= a3;
            if (a3 != v6)
              continue;
          }
          return v5;
        }
      }
    }
    else if (a3 < v3)
    {
      v5 = 0;
      v10 = 0;
      while (v3 != v10)
      {
        if ((*(unsigned __int16 *)(v4 + 2 * v10) | 0x20) == (unsigned __int16)*(char *)(a2 + v10))
        {
          v5 = ++v10 >= a3;
          if (a3 != v10)
            continue;
        }
        return v5;
      }
    }
    else
    {
      v5 = 0;
      v9 = 0;
      while (v3 != v9)
      {
        if ((*(unsigned __int16 *)(v4 + 2 * v9) | 0x20) == (unsigned __int16)*(char *)(a2 + v9))
        {
          v5 = ++v9 >= a3;
          if (a3 != v9)
            continue;
        }
        return v5;
      }
    }
    __break(1u);
  }
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCoreObjCScheduleDeallocateOnMainRunLoop(objc_class *,objc_object *)::$_0,void>::call(uint64_t a1)
{
  const char *v2;
  objc_method *InstanceMethod;
  IMP Implementation;

  v2 = sel_registerName("dealloc");
  InstanceMethod = class_getInstanceMethod(*(Class *)(a1 + 8), v2);
  Implementation = method_getImplementation(InstanceMethod);
  return ((uint64_t (*)(_QWORD, const char *))Implementation)(*(_QWORD *)(a1 + 16), v2);
}

void WTF::Detail::CallableWrapper<WebCore::AudioSampleBufferCompressor::flushInternal(BOOL)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, AudioStreamPacketDescription *a7)
{
  uint64_t v7;
  opaqueCMBufferQueue *v8;
  int v9;
  int v10;
  NSObject *v11;
  CMTime v12;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
    v12 = *(CMTime *)PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    WebCore::AudioSampleBufferCompressor::processSampleBuffersUntilLowWaterTime((WebCore::AudioSampleBufferCompressor *)v7, &v12, a3, a4, a5, a6, a7);
    v9 = PAL::softLinkCoreMediaCMBufferQueueMarkEndOfData[0](*(PAL **)(v7 + 32), v8);
    if (v9)
    {
      v10 = v9;
      v11 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v14 = v10;
        _os_log_error_impl(&dword_1940B8000, v11, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor CMBufferQueueMarkEndOfData failed %d", buf, 8u);
      }
    }
    *(_BYTE *)(v7 + 48) = 0;
  }
}

void WTF::Detail::CallableWrapper<WebCore::AudioSampleBufferCompressor::addSampleBuffer(opaqueCMSampleBuffer *)::$_0,void>::call(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  AudioStreamPacketDescription *v9;
  int v10;
  NSObject *v11;
  CMTime v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 48))
  {
    v4 = PAL::softLinkCoreMediaCMBufferQueueEnqueue(*(PAL **)(v3 + 40), *(opaqueCMBufferQueue **)(a1 + 16), a3);
    if (v4)
    {
      v10 = v4;
      v11 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v12.value) = 67109120;
        HIDWORD(v12.value) = v10;
        _os_log_error_impl(&dword_1940B8000, v11, OS_LOG_TYPE_ERROR, "AudioSampleBufferCompressor CMBufferQueueEnqueue failed with %d", (uint8_t *)&v12, 8u);
      }
    }
    v12 = *(CMTime *)(v3 + 8);
    WebCore::AudioSampleBufferCompressor::processSampleBuffersUntilLowWaterTime((WebCore::AudioSampleBufferCompressor *)v3, &v12, v5, v6, v7, v8, v9);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::compressedVideoOutputBufferCallback(void *,opaqueCMBufferQueueTriggerToken *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3357BB0;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::compressedVideoOutputBufferCallback(void *,opaqueCMBufferQueueTriggerToken *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357BB0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::compressedVideoOutputBufferCallback(void *,opaqueCMBufferQueueTriggerToken *)::$_0,void>::call(unsigned __int8 *result, opaqueCMBufferQueue *a2)
{
  uint64_t v2;
  WebCore::MediaRecorderPrivateWriter *v3;
  int v5;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v3 = (WebCore::MediaRecorderPrivateWriter *)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_12:
    WebCore::MediaRecorderPrivateWriter::processNewCompressedVideoSampleBuffers(v3, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return result;
}

void sub_1953756F8(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::compressedAudioOutputBufferCallback(void *,opaqueCMBufferQueueTriggerToken *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3357BD8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::compressedAudioOutputBufferCallback(void *,opaqueCMBufferQueueTriggerToken *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357BD8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::compressedAudioOutputBufferCallback(void *,opaqueCMBufferQueueTriggerToken *)::$_0,void>::call(unsigned __int8 *result, opaqueCMBufferQueue *a2)
{
  uint64_t v2;
  WebCore::MediaRecorderPrivateWriter *v3;
  int v5;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v3 = (WebCore::MediaRecorderPrivateWriter *)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_12:
    WebCore::MediaRecorderPrivateWriter::processNewCompressedAudioSampleBuffers(v3, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return result;
}

void sub_195375950(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WTF::Deque<WTF::RetainPtr<opaqueCMSampleBuffer *>,0ul>::expandCapacity(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  WTF *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  _QWORD *v22;
  const void **v23;
  uint64_t v24;
  const void *v25;
  const void *v26;

  v1 = *((unsigned int *)a1 + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = (WTF *)a1[2];
    v5 = v2 + 1;
    v6 = WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    v8 = (_QWORD *)v6;
    *((_DWORD *)a1 + 6) = v5;
    a1[2] = v6;
    v9 = *a1;
    v10 = a1[1];
    if (*a1 <= v10)
    {
      if (*a1 != v10)
      {
        v22 = (_QWORD *)(v6 + 8 * v9);
        v23 = (const void **)((char *)v4 + 8 * v9);
        v24 = 8 * v10 - 8 * v9;
        do
        {
          v25 = *v23;
          *v23 = 0;
          *v22 = v25;
          v26 = *v23;
          *v23 = 0;
          if (v26)
            CFRelease(v26);
          ++v22;
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
    }
    else
    {
      if (v10)
      {
        v11 = 8 * v10;
        v12 = v4;
        do
        {
          v13 = *(const void **)v12;
          *(_QWORD *)v12 = 0;
          *v8 = v13;
          v14 = *(const void **)v12;
          *(_QWORD *)v12 = 0;
          if (v14)
            CFRelease(v14);
          ++v8;
          v12 = (WTF *)((char *)v12 + 8);
          v11 -= 8;
        }
        while (v11);
        v5 = *((_DWORD *)a1 + 6);
        v9 = *a1;
        v8 = (_QWORD *)a1[2];
      }
      v15 = v9 - v1 + v5;
      if (v9 != v1)
      {
        v16 = v5;
        v17 = (const void **)((char *)v4 + 8 * v9);
        v18 = &v8[v16];
        v19 = 8 * v9 - 8 * v1;
        do
        {
          v20 = *v17;
          *v17 = 0;
          *(_QWORD *)((char *)v18 + v19) = v20;
          v21 = *v17;
          *v17 = 0;
          if (v21)
            CFRelease(v21);
          ++v17;
          v19 += 8;
        }
        while (v19);
      }
      *a1 = v15;
    }
    if (v4)
    {
      if ((WTF *)a1[2] == v4)
      {
        a1[2] = 0;
        *((_DWORD *)a1 + 6) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3357C00;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3357C00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0,void>::call(unsigned __int8 *result, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 **v6;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _BYTE v26[24];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = (uint64_t *)(result + 16);
  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v4 = result;
    v5 = *((_QWORD *)result + 1);
    v6 = (unsigned __int8 **)*((_QWORD *)result + 3);
    if (__ldaxr((unsigned __int8 *)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v2))
    {
      goto LABEL_6;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
    if (*(_QWORD *)(v2 + 24))
      ++*(_QWORD *)(v2 + 8);
    else
      v6 = 0;
    v8 = __ldxr((unsigned __int8 *)v2);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
      {
        if (!v6)
          return result;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (!v6)
      return result;
LABEL_15:
    v29 = v5;
    v9 = *v3;
    if (!*v3)
    {
      v11 = 0;
      goto LABEL_27;
    }
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_20:
    if (*(_QWORD *)(v9 + 24))
    {
      ++*(_QWORD *)(v9 + 16);
      v11 = v9;
    }
    else
    {
      v11 = 0;
    }
    v12 = __ldxr((unsigned __int8 *)v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_27:
        v13 = *((_QWORD *)v4 + 3);
        v30 = v11;
        v31 = v13;
        if (*(_BYTE *)(v5 + 10))
        {
          v14 = *v3;
          v25 = v5;
          *(_QWORD *)v26 = v14;
          *v3 = 0;
          v3[1] = 0;
          *(_QWORD *)&v26[8] = v13;
          *(_QWORD *)&v26[16] = v29;
          *(_QWORD *)&v27 = v11;
          *((_QWORD *)&v27 + 1) = v13;
          v15 = WTF::fastMalloc((WTF *)0x38);
          *(_QWORD *)v15 = off_1E3357C28;
          *(_QWORD *)(v15 + 8) = v25;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)v26;
          v16 = *(_OWORD *)&v26[8];
          *(_OWORD *)v26 = 0u;
          *(_OWORD *)(v15 + 24) = v16;
          *(_QWORD *)(v15 + 40) = v27;
          v17 = *((_QWORD *)&v27 + 1);
          v27 = 0u;
          *(_QWORD *)(v15 + 48) = v17;
          v28 = v15;
          WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers((uint64_t *)v5, &v28);
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#2}::~((uint64_t)&v25, v18);
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v6);
        }
        WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#1}::operator()((unsigned __int8 *)&v29, a2);
        v30 = 0;
        if (!v11)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v6);
        if (__ldaxr((unsigned __int8 *)v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v11))
        {
          goto LABEL_36;
        }
        MEMORY[0x19AEA534C](v11);
LABEL_36:
        v21 = *(_QWORD *)(v11 + 16) - 1;
        *(_QWORD *)(v11 + 16) = v21;
        if (v21)
        {
          v24 = __ldxr((unsigned __int8 *)v11);
          if (v24 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v11))
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v6);
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v11);
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v6);
        }
        v22 = *(_QWORD *)(v11 + 8);
        v23 = __ldxr((unsigned __int8 *)v11);
        if (v23 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v11))
          {
            if (!v22)
              goto LABEL_43;
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v6);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        if (!v22)
LABEL_43:
          WTF::fastFree((WTF *)v11, v19);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v6);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_27;
  }
  return result;
}

void sub_195375F08(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  if (!v17)
  {
LABEL_20:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v18);
    _Unwind_Resume(a1);
  }
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
LABEL_7:
    v21 = *(_QWORD *)(v17 + 16) - 1;
    *(_QWORD *)(v17 + 16) = v21;
    if (v21)
    {
      v24 = __ldxr((unsigned __int8 *)v17);
      if (v24 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v17))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
      goto LABEL_20;
    }
    v22 = *(_QWORD *)(v17 + 8);
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
LABEL_13:
        if (!v22)
          WTF::fastFree((WTF *)v17, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v17);
  goto LABEL_7;
}

unsigned __int8 *WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#1}::operator()(unsigned __int8 *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  int v6;
  void *v7;
  const void *v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v28;
  uint64_t v29;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)result;
    v4 = (unsigned __int8 **)*((_QWORD *)result + 2);
    if (__ldaxr((unsigned __int8 *)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v2))
    {
      goto LABEL_6;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
    if (*(_QWORD *)(v2 + 24))
      ++*(_QWORD *)(v2 + 8);
    else
      v4 = 0;
    v6 = __ldxr((unsigned __int8 *)v2);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
      {
        if (!v4)
          return result;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (!v4)
      return result;
LABEL_15:
    *(_BYTE *)(v3 + 12) = 0;
    *(_WORD *)(v3 + 10) = 0;
    v7 = *(void **)(v3 + 16);
    if (v7)
    {
      objc_msgSend(v7, "cancelWriting");
      v8 = *(const void **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v8)
        CFRelease(v8);
    }
    if (!*(_QWORD *)(v3 + 40))
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
    v9 = (unsigned __int8 *)(v3 + 24);
    if (__ldaxr((unsigned __int8 *)(v3 + 24)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v3 + 24);
LABEL_23:
    v11 = *(_QWORD *)(v3 + 32);
    if (v11)
    {
      *(_QWORD *)(v3 + 32) = 0;
    }
    else
    {
      v11 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = v11 + 24;
      *(_QWORD *)(v11 + 16) = 1;
      *(_BYTE *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
    }
    v28 = (WTF *)v11;
    v29 = 0;
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v29, a2);
    v12 = __ldxr(v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
LABEL_30:
    v13 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    (*(void (**)(uint64_t, WTF **, double))(*(_QWORD *)v13 + 16))(v13, &v28, 0.0);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v18 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v18)
        {
          v19 = *((_QWORD *)v15 + 1);
          v20 = v19 + 16 * v18;
          do
          {
            v21 = *(unsigned int **)(v19 + 8);
            *(_QWORD *)(v19 + 8) = 0;
            if (v21)
            {
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                atomic_store(1u, v21);
                v24 = v21;
                v25 = v21[6];
                if ((_DWORD)v25 != -1)
                  ((void (*)(uint64_t *, unsigned int *))off_1E3357B80[v25])(&v29, v24 + 2);
                v24[6] = -1;
                WTF::fastFree((WTF *)v24, v14);
              }
            }
            v19 += 16;
          }
          while (v19 != v20);
        }
        v26 = (WTF *)*((_QWORD *)v15 + 1);
        if ((WTF *)((char *)v15 + 24) != v26 && v26 != 0)
        {
          *((_QWORD *)v15 + 1) = 0;
          *((_DWORD *)v15 + 4) = 0;
          WTF::fastFree(v26, v14);
        }
        WTF::fastFree(v15, v14);
      }
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
  }
  return result;
}

void sub_19537626C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, char a12)
{
  unsigned __int8 **v12;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v12);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#2}::~(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  int v15;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v14 = __ldxr((unsigned __int8 *)v3);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v8)
    return a1;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_19:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v15 = __ldxr((unsigned __int8 *)v8);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return a1;
  }
  v11 = *(_QWORD *)(v8 + 8);
  v12 = __ldxr((unsigned __int8 *)v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_26;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
LABEL_26:
    WTF::fastFree((WTF *)v8, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3357C28;
  WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#2}::~((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3357C28;
  WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#2}::~((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#2},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 **v4;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Lock *v12;
  int v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::Lock *v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  _QWORD v26[5];
  WTF::Lock *v27;
  uint64_t v28;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = result;
    v3 = *((_QWORD *)result + 1);
    v4 = (unsigned __int8 **)*((_QWORD *)result + 3);
    if (__ldaxr((unsigned __int8 *)v1))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v1))
    {
      goto LABEL_6;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
    if (*(_QWORD *)(v1 + 24))
      ++*(_QWORD *)(v1 + 8);
    else
      v4 = 0;
    v6 = __ldxr((unsigned __int8 *)v1);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v1))
      {
        if (!v4)
          return result;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v4)
      return result;
LABEL_15:
    objc_msgSend(*(id *)(v3 + 16), "flush");
    v7 = *(void **)(v3 + 16);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3321888768;
    v26[2] = ___ZZZN7WebCore26MediaRecorderPrivateWriter13stopRecordingEvEN3__0clEvENUlvE0_clEv_block_invoke;
    v26[3] = &__block_descriptor_56_e8_32c90_ZTSKZZZN7WebCore26MediaRecorderPrivateWriter13stopRecordingEvEN3__0clEvENUlvE0_clEvEUlvE__e5_v8__0l;
    v8 = *((_QWORD *)v2 + 4);
    v9 = *((_QWORD *)v2 + 5);
    v10 = *((_QWORD *)v2 + 6);
    *((_QWORD *)v2 + 5) = 0;
    *((_QWORD *)v2 + 6) = 0;
    v26[4] = v8;
    if (!v9)
    {
      v12 = 0;
      goto LABEL_27;
    }
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_20:
    if (*(_QWORD *)(v9 + 24))
    {
      ++*(_QWORD *)(v9 + 16);
      v12 = (WTF::Lock *)v9;
    }
    else
    {
      v12 = 0;
    }
    v13 = __ldxr((unsigned __int8 *)v9);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_27:
        v27 = v12;
        v28 = v10;
        objc_msgSend(v7, "finishWritingWithCompletionHandler:", v26);
        if (!v9)
          goto LABEL_40;
        if (__ldaxr((unsigned __int8 *)v9))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v9))
        {
          goto LABEL_32;
        }
        MEMORY[0x19AEA534C](v9);
LABEL_32:
        v16 = *(_QWORD *)(v9 + 16) - 1;
        *(_QWORD *)(v9 + 16) = v16;
        if (!v16)
        {
          v17 = *(_QWORD *)(v9 + 8);
          v18 = __ldxr((unsigned __int8 *)v9);
          if (v18 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v9))
            {
              if (v17)
                goto LABEL_40;
LABEL_39:
              WTF::fastFree((WTF *)v9, v14);
              goto LABEL_40;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v9);
          if (v17)
            goto LABEL_40;
          goto LABEL_39;
        }
        v24 = __ldxr((unsigned __int8 *)v9);
        if (v24 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v9))
          {
LABEL_40:
            v19 = v27;
            v27 = 0;
            if (!v19)
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
            if (__ldaxr((unsigned __int8 *)v19))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v19))
            {
              goto LABEL_45;
            }
            MEMORY[0x19AEA534C](v19);
LABEL_45:
            v21 = *((_QWORD *)v19 + 2) - 1;
            *((_QWORD *)v19 + 2) = v21;
            if (v21)
            {
              v25 = __ldxr((unsigned __int8 *)v19);
              if (v25 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v19))
                  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v19);
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
            }
            v22 = *((_QWORD *)v19 + 1);
            v23 = __ldxr((unsigned __int8 *)v19);
            if (v23 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v19))
              {
                if (!v22)
                  goto LABEL_52;
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(v19);
            if (!v22)
LABEL_52:
              WTF::fastFree(v19, v14);
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        goto LABEL_40;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_27;
  }
  return result;
}

void sub_195376804(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::Lock *a15)
{
  uint64_t v15;
  unsigned __int8 **v16;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
LABEL_6:
    v19 = *(_QWORD *)(v15 + 16) - 1;
    *(_QWORD *)(v15 + 16) = v19;
    if (v19)
    {
      v22 = __ldxr((unsigned __int8 *)v15);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
          goto LABEL_19;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      goto LABEL_19;
    }
    v20 = *(_QWORD *)(v15 + 8);
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
LABEL_12:
        if (!v20)
          WTF::fastFree((WTF *)v15, a2);
LABEL_19:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v15);
  goto LABEL_6;
}

uint64_t ___ZZZN7WebCore26MediaRecorderPrivateWriter13stopRecordingEvEN3__0clEvENUlvE0_clEv_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v3 = a1[4];
  *v2 = &off_1E3357C80;
  v2[1] = v3;
  v2[2] = a1[5];
  v4 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  v2[3] = v4;
  v6 = v2;
  WTF::callOnMainThread();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_1953769CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c90_ZTSKZZZN7WebCore26MediaRecorderPrivateWriter13stopRecordingEvEN3__0clEvENUlvE0_clEvEUlvE_(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = result;
  *(_QWORD *)(result + 32) = a2[4];
  v4 = a2[5];
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = a2[6];
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v8;
  return result;
}

uint64_t __destroy_helper_block_e8_32c90_ZTSKZZZN7WebCore26MediaRecorderPrivateWriter13stopRecordingEvEN3__0clEvENUlvE0_clEvEUlvE_(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3357C80;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3357C80;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  return WebCore::MediaRecorderPrivateWriter::stopRecording(void)::$_0::operator()(void)::{lambda(void)#1}::operator()((unsigned __int8 *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3357CA8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357CA8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = (uint64_t *)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v3)
    return result;
LABEL_12:
  v7 = *(_OWORD *)(v2 + 8);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E3357CD0;
  *(_OWORD *)(v6 + 8) = v7;
  v8 = v6;
  WebCore::MediaRecorderPrivateWriter::flushCompressedSampleBuffers(v3, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>((unsigned __int8 *)*v3);
}

void sub_195376FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 **v12;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3357CD0;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357CD0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v3)
    return result;
LABEL_15:
  objc_msgSend(*(id *)(v3 + 16), "flush");
  v7 = *(_OWORD *)(v2 + 8);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E3357CF8;
  *(_OWORD *)(v6 + 8) = v7;
  v8 = v6;
  WTF::callOnMainThread();
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
}

void sub_195377324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 **v12;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3357CF8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3357CF8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaRecorderPrivateWriter::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,double)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  WebCore::MediaRecorderPrivateWriter *v2;
  int v4;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = (WebCore::MediaRecorderPrivateWriter *)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v2)
  {
LABEL_12:
    WebCore::MediaRecorderPrivateWriter::completeFetchData(v2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return result;
}

void sub_195377640(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebCore::VideoSampleBufferCompressor::flushInternal(BOOL)::$_0,void>::call(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v4;
  PAL *v5;
  int v6;
  opaqueCMBufferQueue *v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(PAL **)(v4 + 24);
  if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
  v13 = *(_OWORD *)PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
  v14 = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid[16];
  v6 = PAL::softLinkVideoToolboxVTCompressionSessionCompleteFrames(v5, (OpaqueVTCompressionSession *)&v13, a3);
  if (v6)
  {
    v9 = v6;
    v10 = off_1ECE7C518;
    if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v13) = 67109120;
      DWORD1(v13) = v9;
      _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTCompressionSessionCompleteFrames failed with %d", (uint8_t *)&v13, 8u);
    }
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v8 = PAL::softLinkCoreMediaCMBufferQueueMarkEndOfData[0](*(PAL **)(v4 + 16), v7);
    if (v8)
    {
      v11 = v8;
      v12 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v13) = 67109120;
        DWORD1(v13) = v11;
        _os_log_error_impl(&dword_1940B8000, v12, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor CMBufferQueueMarkEndOfData failed with %d", (uint8_t *)&v13, 8u);
      }
    }
    *(_BYTE *)(v4 + 40) = 0;
  }
}

void WTF::Detail::CallableWrapper<WebCore::VideoSampleBufferCompressor::addSampleBuffer(opaqueCMSampleBuffer *)::$_0,void>::call(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v2;
  PAL *v3;
  OpaqueVTCompressionSession *v4;
  opaqueCMSampleBuffer *v5;
  opaqueCMSampleBuffer *v6;
  PAL *v7;
  unsigned int *v8;
  int v9;
  NSObject *v10;
  const char *v11;
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v13;
  const __CFAllocator *Dimensions;
  const __CFAllocator *v15;
  const void *v16;
  int v17;
  WebCore *value;
  const void *v19;
  int v20;
  WebCore *v21;
  const void *v22;
  const __CFString *v23;
  const void *v24;
  int v25;
  WebCore *v26;
  const void *v27;
  const __CFString *v28;
  const void *v29;
  int v30;
  WebCore *v31;
  const void *v32;
  const __CFString *v33;
  const void *v34;
  const void *v35;
  int v36;
  WebCore *v37;
  const void *v38;
  int v39;
  uint64_t *v40;
  OpaqueVTCompressionSession *v41;
  int v42;
  NSObject *v43;
  const void *v44;
  WebCore *v45;
  const void *v46;
  int v47;
  WebCore *v48;
  const void *v49;
  const __CFString *v50;
  const void *v51;
  int v52;
  NSObject *v53;
  int v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  WebCore *v59;
  NSObject *v60;
  NSObject *v61;
  WebCore *v62;
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  WebCore *v66;
  uint64_t v67;
  CMTime v68;
  __int128 valuePtr;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 40))
    return;
  v3 = *(PAL **)(a1 + 16);
  if (*(_QWORD *)(v2 + 24))
    goto LABEL_3;
  FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(*(PAL **)(a1 + 16), a2);
  Dimensions = (const __CFAllocator *)PAL::softLinkCoreMediaCMVideoFormatDescriptionGetDimensions(FormatDescription, v13);
  v68.value = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = ((uint64_t (*)(PAL *__hidden, const __CFAllocator *, int, int, unsigned int, const __CFDictionary *, const __CFDictionary *, const __CFAllocator *, void (*)(void *, void *, int, unsigned int, opaqueCMSampleBuffer *), void *))PAL::softLinkVideoToolboxVTCompressionSessionCreate)((PAL *)*MEMORY[0x1E0C9AE00], Dimensions, SHIDWORD(Dimensions), *(_DWORD *)(v2 + 8), 0, 0, 0, (const __CFAllocator *)WebCore::VideoSampleBufferCompressor::videoCompressionCallback, (void (*)(void *, void *, int, unsigned int, opaqueCMSampleBuffer *))v2, &v68);
  if (!v17)
  {
    value = (WebCore *)v68.value;
    v19 = *(const void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v68.value;
    if (v19)
    {
      CFRelease(v19);
      value = *(WebCore **)(v2 + 24);
    }
    if (PAL::get_VideoToolbox_kVTCompressionPropertyKey_RealTime(void)::once != -1)
      dispatch_once(&PAL::get_VideoToolbox_kVTCompressionPropertyKey_RealTime(void)::once, &__block_literal_global_12_8);
    v20 = WebCore::softLinkVideoToolboxVTSessionSetProperty(value, (const void *)PAL::get_VideoToolbox_kVTCompressionPropertyKey_RealTime(void)::constantVideoToolboxkVTCompressionPropertyKey_RealTime, (const __CFString *)*MEMORY[0x1E0C9AE50], v16);
    if (v20)
    {
      v55 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr) = 67109120;
        DWORD1(valuePtr) = v20;
        _os_log_error_impl(&dword_1940B8000, v55, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTSessionSetProperty kVTCompressionPropertyKey_RealTime failed with %d", (uint8_t *)&valuePtr, 8u);
      }
    }
    v21 = *(WebCore **)(v2 + 24);
    if (PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration(void)::once != -1)
      dispatch_once(&PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration(void)::once, &__block_literal_global_9_2);
    v22 = (const void *)PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration(void)::constantVideoToolboxkVTCompressionPropertyKey_MaxKeyFrameIntervalDuration;
    *(_QWORD *)&valuePtr = *(float *)(v2 + 44);
    v23 = (const __CFString *)CFNumberCreate(v15, kCFNumberSInt64Type, &valuePtr);
    v25 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v21, v22, v23, v24);
    if (v23)
      CFRelease(v23);
    if (v25)
    {
      v56 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr) = 67109120;
        DWORD1(valuePtr) = v25;
        _os_log_error_impl(&dword_1940B8000, v56, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTSessionSetProperty kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration failed with %d", (uint8_t *)&valuePtr, 8u);
      }
    }
    v26 = *(WebCore **)(v2 + 24);
    if (PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameInterval(void)::once != -1)
      dispatch_once(&PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameInterval(void)::once, &__block_literal_global_6_9);
    v27 = (const void *)PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameInterval(void)::constantVideoToolboxkVTCompressionPropertyKey_MaxKeyFrameInterval;
    *(_QWORD *)&valuePtr = (float)(*(float *)(v2 + 44) * (float)*(unsigned int *)(v2 + 48));
    v28 = (const __CFString *)CFNumberCreate(v15, kCFNumberSInt64Type, &valuePtr);
    v30 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v26, v27, v28, v29);
    if (v28)
      CFRelease(v28);
    if (v30)
    {
      v57 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr) = 67109120;
        DWORD1(valuePtr) = v30;
        _os_log_error_impl(&dword_1940B8000, v57, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTSessionSetProperty kVTCompressionPropertyKey_MaxKeyFrameInterval failed with %d", (uint8_t *)&valuePtr, 8u);
      }
    }
    v31 = *(WebCore **)(v2 + 24);
    if (PAL::get_VideoToolbox_kVTCompressionPropertyKey_ExpectedFrameRate(void)::once != -1)
      dispatch_once(&PAL::get_VideoToolbox_kVTCompressionPropertyKey_ExpectedFrameRate(void)::once, &__block_literal_global_22);
    v32 = (const void *)PAL::get_VideoToolbox_kVTCompressionPropertyKey_ExpectedFrameRate(void)::constantVideoToolboxkVTCompressionPropertyKey_ExpectedFrameRate;
    *(_QWORD *)&valuePtr = *(unsigned int *)(v2 + 48);
    v33 = (const __CFString *)CFNumberCreate(v15, kCFNumberSInt64Type, &valuePtr);
    v36 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v31, v32, v33, v34);
    if (v33)
      CFRelease(v33);
    if (v36)
    {
      v58 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr) = 67109120;
        DWORD1(valuePtr) = v36;
        _os_log_error_impl(&dword_1940B8000, v58, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTSessionSetProperty kVTCompressionPropertyKey_ExpectedFrameRate failed with %d", (uint8_t *)&valuePtr, 8u);
      }
    }
    v37 = *(WebCore **)(v2 + 24);
    if (PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::once != -1)
    {
      v59 = *(WebCore **)(v2 + 24);
      dispatch_once(&PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::once, &__block_literal_global_18_4);
      v37 = v59;
    }
    v38 = (const void *)PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::constantVideoToolboxkVTCompressionPropertyKey_ProfileLevel;
    v39 = *(unsigned __int8 *)(v2 + 60);
    if (v39 == 2)
    {
      if (PAL::get_VideoToolbox_kVTProfileLevel_H264_High_AutoLevel(void)::once != -1)
      {
        v64 = v37;
        v65 = PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::constantVideoToolboxkVTCompressionPropertyKey_ProfileLevel;
        dispatch_once(&PAL::get_VideoToolbox_kVTProfileLevel_H264_High_AutoLevel(void)::once, &__block_literal_global_27_1);
        v38 = (const void *)v65;
        v37 = v64;
      }
      v40 = &PAL::get_VideoToolbox_kVTProfileLevel_H264_High_AutoLevel(void)::constantVideoToolboxkVTProfileLevel_H264_High_AutoLevel;
    }
    else if (v39 == 1)
    {
      if (PAL::get_VideoToolbox_kVTProfileLevel_H264_Main_AutoLevel(void)::once != -1)
      {
        v62 = v37;
        v63 = PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::constantVideoToolboxkVTCompressionPropertyKey_ProfileLevel;
        dispatch_once(&PAL::get_VideoToolbox_kVTProfileLevel_H264_Main_AutoLevel(void)::once, &__block_literal_global_30_4);
        v38 = (const void *)v63;
        v37 = v62;
      }
      v40 = &PAL::get_VideoToolbox_kVTProfileLevel_H264_Main_AutoLevel(void)::constantVideoToolboxkVTProfileLevel_H264_Main_AutoLevel;
    }
    else
    {
      if (PAL::get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevel(void)::once != -1)
      {
        v66 = v37;
        v67 = PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::constantVideoToolboxkVTCompressionPropertyKey_ProfileLevel;
        dispatch_once(&PAL::get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevel(void)::once, &__block_literal_global_24_4);
        v38 = (const void *)v67;
        v37 = v66;
      }
      v40 = &PAL::get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevel(void)::constantVideoToolboxkVTProfileLevel_H264_Baseline_AutoLevel;
    }
    v42 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v37, v38, (const __CFString *)*v40, v35);
    if (v42)
    {
      v43 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        v54 = *(unsigned __int8 *)(v2 + 60);
        LODWORD(valuePtr) = 67109376;
        DWORD1(valuePtr) = v42;
        WORD4(valuePtr) = 1024;
        *(_DWORD *)((char *)&valuePtr + 10) = v54;
        _os_log_error_impl(&dword_1940B8000, v43, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTSessionSetProperty kVTCompressionPropertyKey_ProfileLevel failed with %d for profile %hhu", (uint8_t *)&valuePtr, 0xEu);
      }
      if (*(_BYTE *)(v2 + 60))
      {
        v45 = *(WebCore **)(v2 + 24);
        if (PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::once != -1)
          dispatch_once(&PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::once, &__block_literal_global_18_4);
        v46 = (const void *)PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::constantVideoToolboxkVTCompressionPropertyKey_ProfileLevel;
        if (PAL::get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevel(void)::once != -1)
          dispatch_once(&PAL::get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevel(void)::once, &__block_literal_global_24_4);
        v47 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v45, v46, (const __CFString *)PAL::get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevel(void)::constantVideoToolboxkVTProfileLevel_H264_Baseline_AutoLevel, v44);
        if (v47)
        {
          v61 = off_1ECE7C518;
          if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
          {
            LODWORD(valuePtr) = 67109120;
            DWORD1(valuePtr) = v47;
            _os_log_error_impl(&dword_1940B8000, v61, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTSessionSetProperty kVTCompressionPropertyKey_ProfileLevel failed with %d for default profile", (uint8_t *)&valuePtr, 8u);
          }
        }
      }
    }
    if (!*(_BYTE *)(v2 + 56))
      goto LABEL_58;
    v48 = *(WebCore **)(v2 + 24);
    if (PAL::get_VideoToolbox_kVTCompressionPropertyKey_AverageBitRate(void)::once != -1)
      dispatch_once(&PAL::get_VideoToolbox_kVTCompressionPropertyKey_AverageBitRate(void)::once, &__block_literal_global_15_3);
    if (*(_BYTE *)(v2 + 56))
    {
      v49 = (const void *)PAL::get_VideoToolbox_kVTCompressionPropertyKey_AverageBitRate(void)::constantVideoToolboxkVTCompressionPropertyKey_AverageBitRate;
      *(_QWORD *)&valuePtr = *(unsigned int *)(v2 + 52);
      v50 = (const __CFString *)CFNumberCreate(v15, kCFNumberSInt64Type, &valuePtr);
      LODWORD(v15) = WebCore::softLinkVideoToolboxVTSessionSetProperty(v48, v49, v50, v51);
      if (v50)
        CFRelease(v50);
      if (!(_DWORD)v15)
        goto LABEL_58;
    }
    else
    {
      __break(1u);
    }
    v60 = off_1ECE7C518;
    if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
    {
      LODWORD(valuePtr) = 67109120;
      DWORD1(valuePtr) = (_DWORD)v15;
      _os_log_error_impl(&dword_1940B8000, v60, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTSessionSetProperty kVTCompressionPropertyKey_AverageBitRate failed with %d", (uint8_t *)&valuePtr, 8u);
    }
LABEL_58:
    v52 = PAL::softLinkVideoToolboxVTCompressionSessionPrepareToEncodeFrames(*(PAL **)(v2 + 24), v41);
    if (v52)
    {
      v53 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr) = 67109120;
        DWORD1(valuePtr) = v52;
        _os_log_error_impl(&dword_1940B8000, v53, OS_LOG_TYPE_ERROR, "VideoSampleBufferCompressor VTCompressionSessionPrepareToEncodeFrames failed with %d", (uint8_t *)&valuePtr, 8u);
      }
    }
LABEL_3:
    v4 = (OpaqueVTCompressionSession *)PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](v3, a2);
    PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](v3, v5);
    PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](v3, v6);
    v7 = *(PAL **)(v2 + 24);
    valuePtr = 0uLL;
    v70 = 0;
    memset(&v68, 0, sizeof(v68));
    v9 = PAL::softLinkVideoToolboxVTCompressionSessionEncodeFrame(v7, v4, (__CVBuffer *)&valuePtr, &v68, 0, (const __CFDictionary *)v2, 0, v8);
    if (v9)
    {
      v10 = off_1ECE7C518;
      if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr) = 67109120;
        DWORD1(valuePtr) = v9;
        v11 = "VideoSampleBufferCompressor VTCompressionSessionEncodeFrame failed with %d";
LABEL_62:
        _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&valuePtr, 8u);
        return;
      }
    }
    return;
  }
  v10 = off_1ECE7C518;
  if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_ERROR))
  {
    LODWORD(valuePtr) = 67109120;
    DWORD1(valuePtr) = v17;
    v11 = "VideoSampleBufferCompressor VTCompressionSessionCreate failed with %d";
    goto LABEL_62;
  }
}

void sub_195378118(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::IDBKeyRangeData::isolatedCopy@<X0>(WebCore::IDBKeyRangeData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  int v10;
  uint64_t v11;
  WebCore::IDBKeyRangeData *v12;
  char *v13;
  _BYTE v14[16];
  unsigned int v15;
  _QWORD v16[2];
  unsigned int v17;
  char v18;

  *(_QWORD *)(a2 + 8) = 0;
  v3 = a2 + 8;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v4 = a2 + 40;
  *(_DWORD *)(a2 + 56) = 0;
  *(_WORD *)(a2 + 64) = 0;
  v5 = *((unsigned int *)this + 6);
  if ((_DWORD)v5 == -1)
    goto LABEL_24;
  v13 = &v18;
  ((void (*)(_QWORD *__return_ptr, char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v5])(v16, &v13, (char *)this + 8);
  LOBYTE(v13) = 0;
  v14[0] = 0;
  v15 = -1;
  v7 = v17;
  if (v17 == -1)
  {
    *(_BYTE *)a2 = 0;
LABEL_7:
    *(_DWORD *)(a2 + 24) = -1;
    goto LABEL_11;
  }
  ((void (*)(char *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v17])(&v18, v14, v16);
  v15 = v7;
  if (v17 == -1)
  {
    *(_BYTE *)a2 = (_BYTE)v13;
  }
  else
  {
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v17])(&v18, v16);
    v7 = v15;
    *(_BYTE *)a2 = (_BYTE)v13;
    if ((_DWORD)v7 == -1)
      goto LABEL_7;
  }
  v16[0] = v3;
  ((void (*)(_QWORD *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v7])(v16, v3, v14);
  if (v15 != -1)
    ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v15])(v16, v14);
LABEL_11:
  v8 = *((unsigned int *)this + 14);
  if ((_DWORD)v8 != -1)
  {
    v13 = &v18;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v8])(v16, &v13, (char *)this + 40);
    LOBYTE(v13) = 0;
    v14[0] = 0;
    v15 = -1;
    v10 = v17;
    if (v17 == -1)
    {
      v10 = -1;
    }
    else
    {
      result = (_QWORD *)((uint64_t (*)(char *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v17])(&v18, v14, v16);
      v15 = v10;
      if (v17 != -1)
      {
        result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v17])(&v18, v16);
        v10 = v15;
      }
    }
    *(_BYTE *)(a2 + 32) = (_BYTE)v13;
    v11 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v11 == -1)
    {
      if (v10 == -1)
      {
LABEL_23:
        *(_WORD *)(a2 + 64) = *((_WORD *)this + 32);
        return result;
      }
    }
    else if (v10 == -1)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v11])(v16, v4);
      *(_DWORD *)(a2 + 56) = -1;
      goto LABEL_21;
    }
    v16[0] = v4;
    result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v10])(v16, v4, v14);
LABEL_21:
    if (v15 != -1)
      result = (_QWORD *)((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v15])(v16, v14);
    goto LABEL_23;
  }
LABEL_24:
  v12 = (WebCore::IDBKeyRangeData *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::IDBKeyRangeData::isExactlyOneKey(v12);
}

uint64_t WebCore::IDBKeyRangeData::isExactlyOneKey(WebCore::IDBKeyRangeData *this)
{
  uint64_t result;
  const WTF::String *v3;

  if (!*((_DWORD *)this + 6) && !*((_DWORD *)this + 14) || *((_BYTE *)this + 64) || *((_BYTE *)this + 65))
    return 0;
  result = WebCore::IDBKeyData::isValid((WebCore::IDBKeyRangeData *)((char *)this + 32));
  if ((_DWORD)result)
  {
    result = WebCore::IDBKeyData::isValid(this);
    if ((_DWORD)result)
      return WebCore::IDBKeyData::compare(this, (WebCore::IDBKeyRangeData *)((char *)this + 32), v3) == 0;
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::visitReferencedIndexes<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 161);
  if (__ldaxr((unsigned __int8 *)(result + 161)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 161);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 168);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD **)(v3 + 168);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *(_QWORD **)(v3 + 168);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v9 = (_QWORD *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (v6)
  {
LABEL_12:
    v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_17;
  }
  v11 = 0;
LABEL_17:
  while (v9 != v11)
  {
    v12 = v9[1];
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 144);
      if (v13 && *(_BYTE *)(a2 + 130) == 0)
      {
        result = *(_QWORD *)(a2 + 120);
        v15 = *(_QWORD *)(result + 48);
        v16 = *(_DWORD *)(v15 + 4);
        v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = v20;
        while (1)
        {
          v22 = *(_QWORD *)(v15 + 8 * v21 + 16);
          if (!v22)
            break;
          if (v13 == v22)
            goto LABEL_33;
          v21 = (v21 + 1) & v16;
          if (v21 == v20)
          {
LABEL_28:
            __break(0xC471u);
            JUMPOUT(0x195378800);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v13);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
LABEL_33:
    v23 = v9 + 2;
    v9 = v8;
    if (v23 != v8)
    {
      v9 = v23;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v24 = *(_QWORD *)(v3 + 176);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    v26 = (_QWORD *)(v24 + 16 * v25);
    if (*(_DWORD *)(v24 - 12))
    {
      v27 = *(_QWORD **)(v3 + 176);
      if ((_DWORD)v25)
      {
        v28 = 16 * v25;
        v27 = *(_QWORD **)(v3 + 176);
        while ((unint64_t)(*v27 + 1) <= 1)
        {
          v27 += 2;
          v28 -= 16;
          if (!v28)
          {
            v27 = v26;
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
    v27 = (_QWORD *)(v24 + 16 * v25);
  }
  else
  {
    v27 = 0;
    v25 = 0;
  }
  v26 = (_QWORD *)(v24 + 16 * v25);
  if (v24)
  {
LABEL_46:
    v29 = (_QWORD *)(v24 + 16 * *(unsigned int *)(v24 - 4));
    goto LABEL_51;
  }
  v29 = 0;
LABEL_51:
  while (v27 != v29)
  {
    v30 = v27[1];
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 144);
      if (v31 && *(_BYTE *)(a2 + 130) == 0)
      {
        result = *(_QWORD *)(a2 + 120);
        v33 = *(_QWORD *)(result + 48);
        v34 = *(_DWORD *)(v33 + 4);
        v35 = (~(v31 << 32) + v31) ^ ((unint64_t)(~(v31 << 32) + v31) >> 22);
        v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
        v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
        v38 = v34 & ((v37 >> 31) ^ v37);
        v39 = v38;
        while (1)
        {
          v40 = *(_QWORD *)(v33 + 8 * v39 + 16);
          if (!v40)
            break;
          if (v31 == v40)
            goto LABEL_67;
          v39 = (v39 + 1) & v34;
          if (v39 == v38)
            goto LABEL_28;
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v31);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
LABEL_67:
    v41 = v27 + 2;
    v27 = v26;
    if (v41 != v26)
    {
      v27 = v41;
      while ((unint64_t)(*v27 + 1) <= 1)
      {
        v27 += 2;
        if (v27 == v26)
        {
          v27 = v26;
          break;
        }
      }
    }
  }
  v42 = __ldxr(v4);
  if (v42 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

WebCore::IDBObjectStore *WebCore::IDBObjectStore::IDBObjectStore(WebCore::IDBObjectStore *this, WebCore::ScriptExecutionContext *a2, const WebCore::IDBObjectStoreInfo *a3, WebCore::IDBTransaction *a4)
{
  WebCore::ScriptExecutionContext *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  WebCore::IDBObjectStore *v17;

  v6 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v8 = (char *)a2 - 192;
    v9 = *((_QWORD *)a2 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195378A0CLL);
  }
  v17 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v17, (uint64_t)v16);
  *(_QWORD *)this = &off_1E3357D70;
  *((_QWORD *)this + 3) = *(_QWORD *)a3;
  v11 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v11)
    *v11 += 2;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 4) = v11;
  *((_BYTE *)this + 64) = 0;
  if (*((_BYTE *)a3 + 40))
  {
    *((_DWORD *)this + 14) = -1;
    v12 = *((unsigned int *)a3 + 8);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(_BYTE *))off_1E3358320[v12])(v16);
      *((_DWORD *)this + 14) = v12;
    }
    *((_BYTE *)this + 64) = 1;
  }
  *((_BYTE *)this + 72) = *((_BYTE *)a3 + 48);
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)this + 10, (uint64_t *)a3 + 7);
  *((_QWORD *)this + 11) = *(_QWORD *)a3;
  v13 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v13)
    *v13 += 2;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 12) = v13;
  *((_BYTE *)this + 128) = 0;
  if (*((_BYTE *)a3 + 40))
  {
    *((_DWORD *)this + 30) = -1;
    v14 = *((unsigned int *)a3 + 8);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(_BYTE *))off_1E3358320[v14])(v16);
      *((_DWORD *)this + 30) = v14;
    }
    *((_BYTE *)this + 128) = 1;
  }
  *((_BYTE *)this + 136) = *((_BYTE *)a3 + 48);
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)this + 18, (uint64_t *)a3 + 7);
  *((_QWORD *)this + 19) = a4;
  *((_WORD *)this + 80) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  return this;
}

void WebCore::IDBObjectStore::~IDBObjectStore(WebCore::IDBObjectStore *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::IDBIndex **v5;
  WebCore::IDBIndex *v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WebCore::IDBIndex *v13;
  bmalloc::api *v14;
  void *v15;
  WTF::StringImpl *v16;
  void *v17;

  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::IDBIndex **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WebCore::IDBIndex *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            WebCore::IDBIndex::~IDBIndex(v6, a2);
            bmalloc::api::isoDeallocate(v7, v8);
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v9 = *((_QWORD *)this + 21);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)*((_QWORD *)this + 21);
      do
      {
        v12 = *v11;
        if (*v11 != (WTF::StringImpl *)-1)
        {
          v13 = v11[1];
          v11[1] = 0;
          if (v13)
          {
            WebCore::IDBIndex::~IDBIndex(v13, a2);
            bmalloc::api::isoDeallocate(v14, v15);
            v12 = *v11;
          }
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStore *)((char *)this + 88), a2);
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStore *)((char *)this + 24), v16);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v17);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::IDBObjectStore::~IDBObjectStore(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::IDBObjectStore::virtualHasPendingActivity(WebCore::IDBObjectStore *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 19);
  if (*(_QWORD *)(v1 + 48))
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 32) + 64))(v1 + 32);
}

uint64_t WebCore::IDBObjectStore::setName@<X0>(WebCore::IDBObjectStore *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  int v22;
  BOOL v23;
  int v24;
  _BOOL4 v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;

  if (*((_BYTE *)this + 160) || (v6 = *((_QWORD *)this + 19), *(_BYTE *)(v6 + 96) != 2))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 8;
    goto LABEL_6;
  }
  if (*(_BYTE *)(v6 + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
LABEL_6:
    *(_BYTE *)a4 = v8;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  result = WTF::equal(*((WTF **)this + 4), *a2, a3);
  if ((_DWORD)result)
  {
LABEL_36:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return result;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 19) + 72);
  v12 = *(_QWORD *)(v11 + 112);
  if (!v12)
  {
    v15 = 0;
    LODWORD(v13) = 0;
LABEL_18:
    v14 = v12 + 72 * v13;
    goto LABEL_19;
  }
  v13 = *(unsigned int *)(v12 - 4);
  v14 = v12 + 72 * v13;
  if (!*(_DWORD *)(v12 - 12))
  {
    v15 = v12 + 72 * v13;
    goto LABEL_18;
  }
  v15 = *(_QWORD *)(v11 + 112);
  if ((_DWORD)v13)
  {
    v16 = 72 * v13;
    v15 = *(_QWORD *)(v11 + 112);
    while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
    {
      v15 += 72;
      v16 -= 72;
      if (!v16)
      {
        v15 = v14;
        break;
      }
    }
  }
LABEL_19:
  if (v12)
    v17 = v12 + 72 * *(unsigned int *)(v12 - 4);
  else
    v17 = 0;
  if (v17 == v15)
  {
LABEL_31:
    WebCore::IDBDatabaseInfo::renameObjectStore((WTF::StringImpl *)(v11 + 80), *((WTF::StringImpl **)this + 3), a2);
    WebCore::IDBTransaction::renameObjectStore(*(WebCore::IDBTransaction **)(v11 + 136), this, a2);
    v20 = *a2;
    if (*a2)
      *(_DWORD *)v20 += 2;
    result = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v20;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_36;
  }
  while (1)
  {
    result = WTF::equal(*(WTF **)(v15 + 16), *a2, v10);
    if ((result & 1) != 0)
      break;
    v18 = v15 + 72;
    v15 = v14;
    if (v18 != v14)
    {
      v15 = v18;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 72;
        if (v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
    if (v15 == v17)
    {
      v11 = *(_QWORD *)(*((_QWORD *)this + 19) + 72);
      goto LABEL_31;
    }
  }
  v21 = *a2;
  if (*a2)
  {
    v22 = *((_DWORD *)v21 + 1);
    *(_DWORD *)v21 += 2;
    if (v22 < 0)
    {
LABEL_52:
      v28 = 0;
LABEL_53:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = __OFADD__(v22, 2);
  v24 = v22 + 2;
  if (v23)
    goto LABEL_52;
  result = (v24 + 96);
  if (__OFADD__(v24, 96))
    goto LABEL_52;
  v25 = !v21 || (*((_BYTE *)v21 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v25, (int8x16_t *)"Failed set property 'name' on 'IDBObjectStore': The database already has an object store named '", 0x60u, (uint64_t)v21, (int8x16_t *)"'.", 2u, &v28);
  v27 = v28;
  if (!v28)
    goto LABEL_53;
  *(_BYTE *)a4 = 25;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = 1;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      return WTF::StringImpl::destroy(v21, v26);
    else
      *(_DWORD *)v21 -= 2;
  }
  return result;
}

unsigned int *WebCore::IDBObjectStore::doOpenCursor@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *result;
  char v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  WebCore::IDBTransaction *v17;
  WebCore::IDBObjectStore *v18;
  const WebCore::IDBCursorInfo *v19;
  uint64_t v20;
  char v21[8];
  _BYTE v22[16];
  int v23;
  char v24;
  _BYTE v25[16];
  int v26;
  __int16 v27;
  _QWORD v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[16];
  int v34;
  char v35;
  _BYTE v36[16];
  int v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  const WebCore::IDBKey **v42;
  uint64_t v43;
  int v44;
  char v45;

  if (*(_BYTE *)(a1 + 160))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_5:
    *(_BYTE *)a4 = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 136))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_5;
  }
  (*(void (**)(const WebCore::IDBKey ***__return_ptr))(**(_QWORD **)a3 + 16))(&v42);
  if (v44)
  {
    if (v44 != 1)
    {
      v17 = (WebCore::IDBTransaction *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBTransaction::requestOpenCursor(v17, v18, v19, v20);
    }
    v9 = v43;
    v43 = 0;
    *(_BYTE *)a4 = (_BYTE)v42;
    *(_QWORD *)(a4 + 8) = v9;
    v10 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return (unsigned int *)((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3358340[v10])(v28, &v42);
  }
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 24);
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v21, v42);
  v28[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 72) + 72) + 8);
  do
  {
    v13 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v14 = v13 + 2;
  }
  while (__stlxr(v14, &WebCore::nextClientResourceNumber(void)::currentNumber));
  v28[1] = v14;
  v29 = *(_OWORD *)(v11 + 80);
  v30 = v12;
  v31 = v12;
  v32 = v21[0];
  v33[0] = 0;
  v34 = -1;
  v15 = v23;
  if (v23 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v23])(&v45, v33, v22);
    v34 = v15;
  }
  v35 = v24;
  v36[0] = 0;
  v37 = -1;
  v16 = v26;
  if (v26 == -1)
  {
    v38 = v27;
    v39 = 1;
    v40 = a2;
    v41 = 0;
  }
  else
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v26])(&v45, v36, v25);
    v37 = v16;
    v38 = v27;
    v39 = 1;
    v40 = a2;
    v41 = 0;
    if (v26 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v26])(&v45, v25);
  }
  v26 = -1;
  if (v23 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v23])(&v45, v22);
  result = WebCore::IDBTransaction::requestOpenCursor((WebCore::IDBTransaction *)a4, *(WebCore::IDBObjectStore **)(a1 + 152), (const WebCore::IDBCursorInfo *)a1, (uint64_t)v28);
  *(_DWORD *)(a4 + 16) = 0;
  if (v37 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v37])(v21, v36);
  v37 = -1;
  if (v34 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v34])(v21, v33);
  v10 = v44;
  if (v44 != -1)
    return (unsigned int *)((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3358340[v10])(v28, &v42);
  return result;
}

unsigned int *WebCore::IDBTransaction::requestOpenCursor(WebCore::IDBTransaction *this, WebCore::IDBObjectStore *a2, const WebCore::IDBCursorInfo *a3, uint64_t a4)
{
  _DWORD *v8;
  unsigned int *result;
  _QWORD *v10;
  _QWORD *v11;

  if (*(_BYTE *)(a4 + 122))
  {
    v8 = (_DWORD *)bmalloc::api::isoAllocate();
    v11 = (_QWORD *)WebCore::IDBCursor::IDBCursor((uint64_t)v8, (uint64_t)a3, (__int128 *)a4);
    result = WebCore::IDBTransaction::doRequestOpenCursor((uint64_t)a2, (uint64_t *)&v11, (uint64_t *)this);
    if (!v8)
      return result;
  }
  else
  {
    v8 = (_DWORD *)bmalloc::api::isoAllocate();
    v10 = (_QWORD *)WebCore::IDBCursor::IDBCursor((uint64_t)v8, (uint64_t)a3, (__int128 *)a4);
    *v10 = off_1E3357288;
    v11 = v10;
    result = WebCore::IDBTransaction::doRequestOpenCursor((uint64_t)a2, (uint64_t *)&v11, (uint64_t *)this);
  }
  if (v8[4] == 1)
    return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  --v8[4];
  return result;
}

uint64_t WebCore::IDBObjectStore::doOpenKeyCursor@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  unint64_t v19;
  uint64_t v20;
  char v21[8];
  _BYTE v22[16];
  int v23;
  char v24;
  _BYTE v25[16];
  int v26;
  __int16 v27;
  _QWORD v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[16];
  int v34;
  char v35;
  _BYTE v36[16];
  int v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  const WebCore::IDBKey **v42;
  uint64_t v43;
  int v44;
  char v45;

  if (*(_BYTE *)(a1 + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_5:
    *(_BYTE *)a4 = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_5;
  }
  (*(void (**)(const WebCore::IDBKey ***__return_ptr))(**(_QWORD **)a3 + 16))(&v42);
  if (v44)
  {
    if (v44 != 1)
    {
      v17 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBObjectStore::get(v17, v18, v19, v20);
    }
    v9 = v43;
    v43 = 0;
    *(_BYTE *)a4 = (_BYTE)v42;
    *(_QWORD *)(a4 + 8) = v9;
    v10 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3358340[v10])(v28, &v42);
  }
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 24);
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v21, v42);
  v28[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 72) + 72) + 8);
  do
  {
    v13 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v14 = v13 + 2;
  }
  while (__stlxr(v14, &WebCore::nextClientResourceNumber(void)::currentNumber));
  v28[1] = v14;
  v29 = *(_OWORD *)(v11 + 80);
  v30 = v12;
  v31 = v12;
  v32 = v21[0];
  v33[0] = 0;
  v34 = -1;
  v15 = v23;
  if (v23 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v23])(&v45, v33, v22);
    v34 = v15;
  }
  v35 = v24;
  v36[0] = 0;
  v37 = -1;
  v16 = v26;
  if (v26 == -1)
  {
    v38 = v27;
    v39 = 1;
    v40 = a2;
    v41 = 1;
  }
  else
  {
    ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v26])(&v45, v36, v25);
    v37 = v16;
    v38 = v27;
    v39 = 1;
    v40 = a2;
    v41 = 1;
    if (v26 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v26])(&v45, v25);
  }
  v26 = -1;
  if (v23 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v23])(&v45, v22);
  result = (uint64_t)WebCore::IDBTransaction::requestOpenCursor((WebCore::IDBTransaction *)a4, *(WebCore::IDBObjectStore **)(a1 + 152), (const WebCore::IDBCursorInfo *)a1, (uint64_t)v28);
  *(_DWORD *)(a4 + 16) = 0;
  if (v37 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v37])(v21, v36);
  v37 = -1;
  if (v34 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v34])(v21, v33);
  v10 = v44;
  if (v44 != -1)
    return ((uint64_t (*)(_QWORD *, const WebCore::IDBKey ***))off_1E3358340[v10])(v28, &v42);
  return result;
}

uint64_t WebCore::IDBObjectStore::get@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  unsigned int *v8;
  WebCore::IDBTransaction *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  char v19;
  WebCore::IDBKey *v20;
  char v21;

  if (*(_BYTE *)(a1 + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_5:
    *(_BYTE *)a4 = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_5;
  }
  WebCore::createIDBKeyFromValue(&v20, a2, a3);
  v8 = (unsigned int *)v20;
  if ((WebCore::IDBKey::isValid(v20) & 1) != 0)
  {
    v9 = *(WebCore::IDBTransaction **)(a1 + 152);
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v12, (const WebCore::IDBKey *)v8);
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v15, (const WebCore::IDBKey *)v8);
    v18 = 0;
    v19 = 1;
    result = (uint64_t)WebCore::IDBTransaction::requestGetRecord(v9, (WebCore::IDBObjectStore *)a1, (const WebCore::IDBGetRecordData *)&v12, (uint64_t *)a4);
    *(_DWORD *)(a4 + 16) = 0;
    if (v17 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v17])(&v21, &v16);
    v17 = -1;
    if (v14 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v14])(&v21, &v13);
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 26;
    *(_DWORD *)(a4 + 16) = 1;
  }
  if (v8)
  {
    if (*v8 == 1)
    {
      v11 = v8[6];
      if ((_DWORD)v11 != -1)
        ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v11])(&v12, v8 + 2);
      v8[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v8, v10);
    }
    else
    {
      --*v8;
    }
  }
  return result;
}

unsigned int *WebCore::IDBTransaction::requestGetRecord@<X0>(WebCore::IDBTransaction *this@<X0>, WebCore::IDBObjectStore *a2@<X1>, const WebCore::IDBGetRecordData *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WebCore::IDBRequest *v37;
  unsigned int v38;
  WebCore::IDBRequest *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  WebCore::IDBTransaction *v46;
  int v47;
  char v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *result;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  bmalloc::api *v71;
  void *v72;
  WebCore::IDBTransaction *v73;
  _BYTE v74[8];
  _BYTE v75[16];
  int v76;
  char v77;
  uint64_t v78;
  int v79;
  __int16 v80;
  char v81;
  unsigned int *v82;
  uint64_t v83[3];
  __int128 v84;

  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = v9 - 96;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = *((_BYTE *)a3 + 72);
  v12 = (_QWORD *)bmalloc::api::isoAllocate();
  v13 = (uint64_t)v12;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &unk_1E33A4FC0;
  v14 = v12 + 3;
  if (!*(_BYTE *)(v10 + 274))
  {
    v15 = v10 - 192;
    v16 = *(_QWORD *)(v10 + 512);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        v15 = v17;
    }
    v10 = v15 + 192;
  }
  v12[3] = &off_1E33A18C0;
  v12[4] = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v12 + 3), (WebCore::ScriptExecutionContext *)v10);
  *(_QWORD *)(v13 + 24) = &off_1E33A0540;
  *(_QWORD *)(v13 + 40) = 0;
  if (*(_BYTE *)(v10 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195379BB8);
  }
  v18 = v11 ^ 1;
  v83[0] = (uint64_t)v14;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v10 + 128), v83, (uint64_t)&v73);
  *v14 = &off_1E3357608;
  v19 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v19)
    v19 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(v13 + 48) = v19;
  *(_BYTE *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 60) = 1;
  v21 = (unsigned int *)(v13 + 60);
  *(_QWORD *)v13 = off_1E3357EC8;
  *(_QWORD *)(v13 + 24) = &unk_1E3357F70;
  v22 = (unsigned int *)((char *)this + 24);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 64) = this;
  *(_WORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 104) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 72) + 8);
  do
  {
    v24 = __ldaxr(&WebCore::nextClientResourceNumber(void)::currentNumber);
    v25 = v24 + 2;
  }
  while (__stlxr(v25, &WebCore::nextClientResourceNumber(void)::currentNumber));
  *(_QWORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 128) = 0;
  *(_QWORD *)(v13 + 112) = v25;
  __dmb(0xAu);
  v26 = *(_QWORD *)(v13 + 128);
  *(_QWORD *)(v13 + 128) = 0;
  if (v26)
    *(_QWORD *)(v26 + 8) = 3;
  *(_QWORD *)(v13 + 136) = 0;
  *(_DWORD *)(v13 + 144) = 1;
  *(_DWORD *)(v13 + 304) = 7;
  v27 = (unsigned int *)(*((_QWORD *)a2 + 19) + 24);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  *(_QWORD *)(v13 + 312) = a2;
  *(_DWORD *)(v13 + 320) = 0;
  *(_BYTE *)(v13 + 328) = 1;
  *(_QWORD *)(v13 + 336) = 0;
  v29 = *(unsigned int ***)(*((_QWORD *)this + 9) + 72);
  v30 = *v29;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *(_QWORD *)(v13 + 344) = v29;
  *(_DWORD *)(v13 + 352) = 0;
  *(_BYTE *)(v13 + 356) = 2;
  *(_BYTE *)(v13 + 357) = v18;
  *(_DWORD *)(v13 + 358) = 256;
  *(_QWORD *)(v13 + 368) = 0;
  *a4 = v13;
  WebCore::ActiveDOMObject::suspendIfNeeded(v14);
  do
    v32 = __ldaxr(v21);
  while (__stlxr(v32 + 1, v21));
  v83[0] = v13;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v73, (uint64_t *)this + 41, v83);
  v33 = (unsigned int *)v83[0];
  v83[0] = 0;
  if (v33)
  {
    v34 = v33 + 15;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v33 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 72))(v33);
    }
  }
  v37 = (WebCore::IDBRequest *)*a4;
  do
    v38 = __ldaxr(v22);
  while (__stlxr(v38 + 1, v22));
  v39 = (WebCore::IDBRequest *)*a4;
  v40 = (unsigned int *)(*a4 + 60);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  do
    v42 = __ldaxr(v22);
  while (__stlxr(v42 + 1, v22));
  v73 = this;
  WebCore::IDBKeyRangeData::isolatedCopy(a3, (uint64_t)v74);
  v81 = *((_BYTE *)a3 + 72);
  v43 = bmalloc::api::isoAllocate();
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v44 = &off_1E3358BA0;
  v44[1] = this;
  v44[2] = v39;
  v45 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v45 = &off_1E3358BC8;
  v46 = v73;
  v73 = 0;
  *(_QWORD *)(v45 + 8) = v46;
  *(_BYTE *)(v45 + 16) = v74[0];
  *(_BYTE *)(v45 + 24) = 0;
  *(_DWORD *)(v45 + 40) = -1;
  v47 = v76;
  if (v76 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v76])(v83, v45 + 24, v75);
    *(_DWORD *)(v45 + 40) = v47;
  }
  v48 = v77;
  *(_BYTE *)(v45 + 56) = 0;
  *(_BYTE *)(v45 + 48) = v48;
  *(_DWORD *)(v45 + 72) = -1;
  v49 = v79;
  if (v79 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v79])(v83);
    *(_DWORD *)(v45 + 72) = v49;
  }
  *(_WORD *)(v45 + 80) = v80;
  *(_BYTE *)(v45 + 88) = v81;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v43, this, v37);
  *(_QWORD *)v43 = off_1E3358838;
  v50 = (unsigned int *)(v43 + 8);
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 + 1, v50));
  v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v52 = &off_1E3358A60;
  v52[1] = v43;
  v52[2] = v45;
  v53 = *(_QWORD *)(v43 + 88);
  *(_QWORD *)(v43 + 88) = v52;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  do
    v54 = __ldaxr(v50);
  while (__stlxr(v54 + 1, v50));
  v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v55 = &off_1E3358A88;
  v55[1] = v43;
  v55[2] = v44;
  v56 = *(_QWORD *)(v43 + 96);
  *(_QWORD *)(v43 + 96) = v55;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v82 = (unsigned int *)v43;
  v84 = *(_OWORD *)(v43 + 24);
  do
    v57 = __ldaxr(v50);
  while (__stlxr(v57 + 1, v50));
  v83[0] = v43;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v83);
  v58 = (unsigned int *)v83[0];
  v83[0] = 0;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v83, (uint64_t *)this + 37, &v84, (uint64_t *)&v82);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v63 = v82;
  v82 = 0;
  if (v63)
  {
    v64 = v63 + 2;
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v63 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
    }
  }
  if (v79 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v79])(v83, &v78);
  v79 = -1;
  if (v76 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v76])(v83, v75);
  v76 = -1;
  result = (unsigned int *)v73;
  v73 = 0;
  if (result)
  {
    v68 = result + 6;
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v62);
      return (unsigned int *)bmalloc::api::isoDeallocate(v71, v72);
    }
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::get@<X0>(uint64_t this@<X0>, const WebCore::IDBKey **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::IDBObjectStore *v4;
  int v5;
  WebCore::IDBTransaction *v6;
  int v7;
  char v8[8];
  _BYTE v9[16];
  int v10;
  char v11;
  _BYTE v12[16];
  int v13;
  __int16 v14;
  char v15;
  char v16[8];
  _BYTE v17[16];
  int v18;
  char v19[8];
  _BYTE v20[16];
  int v21;
  __int16 v22;
  char v23;

  if (*(_BYTE *)(this + 160))
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
LABEL_5:
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  v4 = (WebCore::IDBObjectStore *)this;
  if (*(_BYTE *)(*(_QWORD *)(this + 152) + 136))
  {
    *(_BYTE *)a3 = 27;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_5;
  }
  this = (uint64_t)WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v16, a2);
  if (v18 | v21
    && ((this = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)v16), (this & 1) != 0) || !v18)
    && ((this = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)v19), v5 = v21, (this & 1) != 0) || !v21))
  {
    v6 = (WebCore::IDBTransaction *)*((_QWORD *)v4 + 19);
    v8[0] = v16[0];
    v9[0] = 0;
    v10 = -1;
    v7 = v18;
    if (v18 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v18])(&v23, v9, v17);
      v10 = v7;
      v5 = v21;
    }
    v11 = v19[0];
    v12[0] = 0;
    v13 = -1;
    if (v5 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v5])(&v23, v12, v20);
      v13 = v5;
    }
    v14 = v22;
    v15 = 1;
    this = (uint64_t)WebCore::IDBTransaction::requestGetRecord(v6, v4, (const WebCore::IDBGetRecordData *)v8, (uint64_t *)a3);
    *(_DWORD *)(a3 + 16) = 0;
    if (v13 != -1)
      this = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v13])(&v23, v12);
    v13 = -1;
    if (v10 != -1)
      this = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v10])(&v23, v9);
  }
  else
  {
    *(_BYTE *)a3 = 26;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  if (v21 != -1)
    this = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v21])(v8, v20);
  v21 = -1;
  if (v18 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v18])(v8, v17);
  return this;
}

uint64_t WebCore::IDBObjectStore::getKey@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  unsigned int *v8;
  WebCore::IDBTransaction *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  char v19;
  WebCore::IDBKey *v20;
  char v21;

  if (*(_BYTE *)(a1 + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_5:
    *(_BYTE *)a4 = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_5;
  }
  WebCore::createIDBKeyFromValue(&v20, a2, a3);
  v8 = (unsigned int *)v20;
  if ((WebCore::IDBKey::isValid(v20) & 1) != 0)
  {
    v9 = *(WebCore::IDBTransaction **)(a1 + 152);
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v12, (const WebCore::IDBKey *)v8);
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v15, (const WebCore::IDBKey *)v8);
    v18 = 0;
    v19 = 0;
    result = (uint64_t)WebCore::IDBTransaction::requestGetRecord(v9, (WebCore::IDBObjectStore *)a1, (const WebCore::IDBGetRecordData *)&v12, (uint64_t *)a4);
    *(_DWORD *)(a4 + 16) = 0;
    if (v17 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v17])(&v21, &v16);
    v17 = -1;
    if (v14 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v14])(&v21, &v13);
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 26;
    *(_DWORD *)(a4 + 16) = 1;
  }
  if (v8)
  {
    if (*v8 == 1)
    {
      v11 = v8[6];
      if ((_DWORD)v11 != -1)
        ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v11])(&v12, v8 + 2);
      v8[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v8, v10);
    }
    else
    {
      --*v8;
    }
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::getKey@<X0>(WebCore::IDBObjectStore *this@<X0>, const WebCore::IDBKey **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  char isValid;
  int v8;
  WebCore::IDBTransaction *v9;
  int v10;
  char v11[8];
  _BYTE v12[16];
  int v13;
  char v14;
  _BYTE v15[16];
  int v16;
  __int16 v17;
  char v18;
  char v19[8];
  _BYTE v20[16];
  int v21;
  char v22[8];
  _BYTE v23[16];
  int v24;
  __int16 v25;
  char v26;

  if (*((_BYTE *)this + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 8;
LABEL_5:
    *(_BYTE *)a3 = v5;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 19) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 27;
    goto LABEL_5;
  }
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v19, a2);
  if (v21 | v24
    && ((WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)v19) & 1) != 0 || !v21)
    && ((isValid = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)v22), v8 = v24, (isValid & 1) != 0) || !v24))
  {
    v9 = (WebCore::IDBTransaction *)*((_QWORD *)this + 19);
    v11[0] = v19[0];
    v12[0] = 0;
    v13 = -1;
    v10 = v21;
    if (v21 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v21])(&v26, v12, v20);
      v13 = v10;
      v8 = v24;
    }
    v14 = v22[0];
    v15[0] = 0;
    v16 = -1;
    if (v8 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v8])(&v26, v15, v23);
      v16 = v8;
    }
    v17 = v25;
    v18 = 0;
    result = (uint64_t)WebCore::IDBTransaction::requestGetRecord(v9, this, (const WebCore::IDBGetRecordData *)v11, (uint64_t *)a3);
    *(_DWORD *)(a3 + 16) = 0;
    if (v16 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v16])(&v26, v15);
    v16 = -1;
    if (v13 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v13])(&v26, v12);
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 26;
    *(_DWORD *)(a3 + 16) = 1;
  }
  if (v24 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v24])(v11, v23);
  v24 = -1;
  if (v21 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v21])(v11, v20);
  return result;
}

uint64_t WebCore::IDBObjectStore::add@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int *v9;
  char v10;
  uint64_t result;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  bmalloc::api *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  bmalloc::api *v20;
  unsigned int *v21;

  if (a4 == 10)
  {
    v9 = 0;
  }
  else
  {
    WebCore::createIDBKeyFromValue(&v21, a2, a4);
    v9 = v21;
    if (v21)
    {
      v10 = 0;
      ++*v21;
      goto LABEL_6;
    }
  }
  v10 = 1;
LABEL_6:
  v20 = (bmalloc::api *)v9;
  v21 = 0;
  result = WebCore::IDBObjectStore::putOrAdd(a1, a2, a3, &v20, 2, 0, (uint64_t *)&v21, a5);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v13 + 2), v12);
      result = WTF::fastFree((WTF *)v13, v19);
    }
  }
  v16 = v20;
  if (!v20)
  {
LABEL_13:
    if ((v10 & 1) != 0)
      return result;
    goto LABEL_14;
  }
  if (*(_DWORD *)v20 != 1)
  {
    --*(_DWORD *)v20;
    goto LABEL_13;
  }
  v17 = *((unsigned int *)v20 + 6);
  if ((_DWORD)v17 != -1)
    ((void (*)(unsigned int **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v17])(&v21, (char *)v20 + 8);
  *((_DWORD *)v16 + 6) = -1;
  result = bmalloc::api::isoDeallocate(v16, v12);
  if ((v10 & 1) == 0)
  {
LABEL_14:
    if (*v9 == 1)
    {
      v18 = v9[6];
      if ((_DWORD)v18 != -1)
        ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v18])(&v21, v9 + 2);
      v9[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v9, v12);
    }
    else
    {
      --*v9;
    }
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::putOrAdd@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, WebCore::IDBKey **a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WebCore::IDBKey *v25;
  WebCore::IDBKey *v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  void *v39;
  uint64_t v40;
  void *v41;
  unsigned int *v42;
  WebCore::IDBKey *v43;
  _QWORD *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::ScriptExecutionContext *v48;
  WebCore::IDBRequest *v49;
  WebCore::IDBRequest *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  WebCore::IDBKey *v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  WebCore::IDBKey *v87;
  uint64_t v88;
  WebCore::IDBKey *v89;
  uint64_t v90[2];
  WebCore::IDBKey *v91[2];
  int v92;
  WTF *v93[2];

  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 24;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 8;
LABEL_8:
    *(_BYTE *)a8 = v13;
    *(_DWORD *)(a8 + 16) = 1;
    return result;
  }
  v14 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v14 + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 27;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v14 + 96))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 28;
    goto LABEL_8;
  }
  v20 = *((_QWORD *)a2 + 7);
  if (!*a7)
  {
    *(_BYTE *)(v14 + 136) = 1;
    if (*(_BYTE *)(v14 + 137))
    {
      v22 = *(_QWORD *)(v14 + 296);
      if (!v22 || !*(_DWORD *)(v22 - 12))
      {
        v23 = *(_QWORD *)(v14 + 328);
        if (!v23 || !*(_DWORD *)(v23 - 12))
          WebCore::IDBTransaction::commitInternal((WebCore::IDBTransaction *)v14);
      }
    }
    v93[0] = 0;
    v93[1] = 0;
    v90[0] = 0;
    v90[1] = 0;
    WebCore::SerializedScriptValue::create(a2, a3, (uint64_t)v90, (uint64_t)v93, 1, 1, 0, (uint64_t)v91);
    if (v92)
    {
      v25 = 0;
      v26 = 0;
      if (v92 == -1)
      {
LABEL_20:
        v27 = (uint64_t *)v93[0];
        if (HIDWORD(v93[1]))
        {
          v89 = v26;
          v86 = 8 * HIDWORD(v93[1]);
          do
          {
            v27 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v27, v24)+ 1;
            v86 -= 8;
          }
          while (v86);
          v27 = (uint64_t *)v93[0];
          v26 = v89;
          if (!v93[0])
          {
LABEL_22:
            v28 = (unsigned int *)*a7;
            *a7 = (uint64_t)v26;
            if (v28)
            {
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                atomic_store(1u, v28);
                WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v28 + 2), v24);
                WTF::fastFree((WTF *)v28, v85);
              }
            }
            v31 = *(_QWORD *)(a1 + 152);
            if (*(unsigned __int8 *)(v31 + 136) - 2 >= 3)
              *(_BYTE *)(v31 + 136) = 0;
            goto LABEL_28;
          }
        }
        else if (!v93[0])
        {
          goto LABEL_22;
        }
        v93[0] = 0;
        LODWORD(v93[1]) = 0;
        v87 = v26;
        WTF::fastFree((WTF *)v27, v24);
        v26 = v87;
        goto LABEL_22;
      }
    }
    else
    {
      v25 = v91[0];
      v91[0] = 0;
    }
    ((void (*)(uint64_t *, WebCore::IDBKey **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v92])(v90, v91);
    v26 = v25;
    goto LABEL_20;
  }
LABEL_28:
  if (*(_QWORD *)(v20 + 16)
    || !*(_BYTE *)(v10 + 178)
    && (v33 = *(_QWORD *)(v10 + 240)) != 0
    && (v34 = *(_QWORD *)(v33 + 8)) != 0
    && (v35 = *(_QWORD *)(v34 + 24)) != 0
    && (v36 = *(_QWORD *)(v35 + 8)) != 0
    && (v37 = *(_QWORD *)(v36 + 1008), v37 < 0)
    && (v37 != -1 ? (v38 = *(_DWORD *)(*a7 + 244) == 0) : (v38 = 1), !v38))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 21;
    goto LABEL_8;
  }
  if (*a4 && (WebCore::IDBKey::isValid(*a4) & 1) == 0)
    goto LABEL_49;
  v32 = *(unsigned __int8 *)(a1 + 72);
  if (a6 || !*(_BYTE *)(a1 + 64))
  {
    if (!*(_BYTE *)(a1 + 72) && !*a4)
      goto LABEL_49;
    goto LABEL_64;
  }
  if (*a4)
  {
LABEL_49:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 26;
    goto LABEL_8;
  }
  v39 = WebCore::SerializedScriptValue::deserialize(*a7, a2, a2, 0, 0);
  if (!*(_BYTE *)(a1 + 64))
  {
LABEL_127:
    v88 = std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::IDBObjectStore::put(v88);
  }
  v40 = (uint64_t)v39;
  WebCore::maybeCreateIDBKeyFromScriptValueAndKeyPath(a2, (unint64_t)v39, a1 + 40, (unint64_t *)v91);
  if (v91[0])
  {
    if ((WebCore::IDBKey::isValid(v91[0]) & 1) == 0)
    {
LABEL_102:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a8 = 26;
      goto LABEL_104;
    }
    v42 = (unsigned int *)v91[0];
    if (v91[0])
      goto LABEL_58;
  }
  if (!v32)
    goto LABEL_102;
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_127;
  result = WebCore::canInjectIDBKeyIntoScriptValue(a2, v40, a1 + 40);
  if ((result & 1) != 0)
  {
    v42 = (unsigned int *)v91[0];
    if (!v91[0])
    {
LABEL_64:
      v44 = *(_QWORD **)(a1 + 152);
      v45 = (unsigned int *)*a7;
      v46 = v44[5];
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 8);
        if (v47)
          v48 = (WebCore::ScriptExecutionContext *)(v47 - 96);
        else
          v48 = 0;
      }
      else
      {
        v48 = 0;
      }
      v49 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
      v50 = WebCore::IDBRequest::IDBRequest(v49, v48, (WebCore::IDBObjectStore *)a1, (WebCore::IDBTransaction *)v44);
      WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v50 + 3);
      v51 = (unsigned int *)((char *)v49 + 60);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 + 1, v51));
      v93[0] = v49;
      WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)v91, v44 + 41, v93);
      v53 = (unsigned int *)v93[0];
      v93[0] = 0;
      if (v53)
      {
        v54 = v53 + 15;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v53 + 15);
          (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 72))(v53);
        }
      }
      v57 = (unsigned int *)(v44 + 3);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v51);
      while (__stlxr(v59 + 1, v51));
      do
        v60 = __ldaxr(v57);
      while (__stlxr(v60 + 1, v57));
      v61 = *a4;
      if (*a4)
        ++*(_DWORD *)v61;
      do
        v62 = __ldaxr(v45);
      while (__stlxr(v62 + 1, v45));
      v63 = bmalloc::api::isoAllocate();
      v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v64 = &off_1E3358D80;
      v64[1] = v44;
      v64[2] = v49;
      v65 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v65 = &off_1E3358DA8;
      *(_QWORD *)(v65 + 8) = v44;
      *(_QWORD *)(v65 + 16) = v61;
      *(_QWORD *)(v65 + 24) = v45;
      *(_BYTE *)(v65 + 32) = a5;
      WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v63, (WebCore::IDBTransaction *)v44, v49);
      *(_QWORD *)v63 = off_1E3358838;
      v66 = (unsigned int *)(v63 + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 + 1, v66));
      v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v68 = &off_1E3358A60;
      v68[1] = v63;
      v68[2] = v65;
      v69 = *(_QWORD *)(v63 + 88);
      *(_QWORD *)(v63 + 88) = v68;
      if (v69)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      do
        v70 = __ldaxr(v66);
      while (__stlxr(v70 + 1, v66));
      v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v71 = &off_1E3358A88;
      v71[1] = v63;
      v71[2] = v64;
      v72 = *(_QWORD *)(v63 + 96);
      *(_QWORD *)(v63 + 96) = v71;
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
      v90[0] = v63;
      v44[44] = *(_QWORD *)(v63 + 128);
      *(_OWORD *)v93 = *(_OWORD *)(v63 + 24);
      do
        v73 = __ldaxr(v66);
      while (__stlxr(v73 + 1, v66));
      v91[0] = (WebCore::IDBKey *)v63;
      WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)(v44 + 24), (uint64_t *)v91);
      v74 = (unsigned int *)v91[0];
      v91[0] = 0;
      if (v74)
      {
        v75 = v74 + 2;
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          atomic_store(1u, v74 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
        }
      }
      WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v91, v44 + 37, v93, v90);
      WebCore::IDBTransaction::handlePendingOperations((uint64_t)v44);
      result = v90[0];
      v90[0] = 0;
      if (result)
      {
        v78 = (unsigned int *)(result + 8);
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      *(_QWORD *)a8 = v49;
      *(_DWORD *)(a8 + 16) = 0;
      return result;
    }
LABEL_58:
    ++*v42;
    v43 = *a4;
    *a4 = (WebCore::IDBKey *)v42;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1)
      {
        v84 = *((unsigned int *)v43 + 6);
        if ((_DWORD)v84 != -1)
          ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v84])(v93, (char *)v43 + 8);
        *((_DWORD *)v43 + 6) = -1;
        bmalloc::api::isoDeallocate(v43, v41);
        v42 = (unsigned int *)v91[0];
        v91[0] = 0;
        if (!v42)
          goto LABEL_64;
        goto LABEL_62;
      }
      --*(_DWORD *)v43;
    }
    v91[0] = 0;
LABEL_62:
    if (*v42 == 1)
    {
      v83 = v42[6];
      if ((_DWORD)v83 != -1)
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v83])(v93, v42 + 2);
      v42[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v42, v41);
    }
    else
    {
      --*v42;
    }
    goto LABEL_64;
  }
  *(_BYTE *)a8 = 26;
  *(_QWORD *)(a8 + 8) = 0;
LABEL_104:
  *(_DWORD *)(a8 + 16) = 1;
  v81 = (unsigned int *)v91[0];
  v91[0] = 0;
  if (v81)
  {
    if (*v81 == 1)
    {
      v82 = v81[6];
      if ((_DWORD)v82 != -1)
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v82])(v93, v81 + 2);
      v81[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v81, v41);
    }
    else
    {
      --*v81;
    }
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::put@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int *v9;
  char v10;
  uint64_t result;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  bmalloc::api *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  bmalloc::api *v20;
  unsigned int *v21;

  if (a4 == 10)
  {
    v9 = 0;
  }
  else
  {
    WebCore::createIDBKeyFromValue(&v21, a2, a4);
    v9 = v21;
    if (v21)
    {
      v10 = 0;
      ++*v21;
      goto LABEL_6;
    }
  }
  v10 = 1;
LABEL_6:
  v20 = (bmalloc::api *)v9;
  v21 = 0;
  result = WebCore::IDBObjectStore::putOrAdd(a1, a2, a3, &v20, 0, 0, (uint64_t *)&v21, a5);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v13 + 2), v12);
      result = WTF::fastFree((WTF *)v13, v19);
    }
  }
  v16 = v20;
  if (!v20)
  {
LABEL_13:
    if ((v10 & 1) != 0)
      return result;
    goto LABEL_14;
  }
  if (*(_DWORD *)v20 != 1)
  {
    --*(_DWORD *)v20;
    goto LABEL_13;
  }
  v17 = *((unsigned int *)v20 + 6);
  if ((_DWORD)v17 != -1)
    ((void (*)(unsigned int **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v17])(&v21, (char *)v20 + 8);
  *((_DWORD *)v16 + 6) = -1;
  result = bmalloc::api::isoDeallocate(v16, v12);
  if ((v10 & 1) == 0)
  {
LABEL_14:
    if (*v9 == 1)
    {
      v18 = v9[6];
      if ((_DWORD)v18 != -1)
        ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v18])(&v21, v9 + 2);
      v9[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v9, v12);
    }
    else
    {
      --*v9;
    }
  }
  return result;
}

unsigned int *WebCore::IDBObjectStore::doDelete@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  char v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::ScriptExecutionContext *v14;
  WebCore::IDBRequest *v15;
  WebCore::IDBRequest *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WebCore::IDBTransaction *v30;
  int v31;
  char v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  bmalloc::api *v54;
  void *v55;
  WebCore::IDBTransaction *v56;
  WebCore::IDBObjectStore *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  WebCore::IDBKeyRange *v64;
  uint64_t v65;
  int v66;
  WebCore::IDBTransaction *v67;
  _BYTE v68[8];
  _BYTE v69[16];
  int v70;
  char v71;
  uint64_t v72;
  int v73;
  __int16 v74;
  unsigned int *v75;
  uint64_t v76[3];
  __int128 v77;

  if (*(_BYTE *)(a1 + 160))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 8;
LABEL_5:
    *(_BYTE *)a3 = v5;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v7 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v7 + 136))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 27;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(v7 + 96))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 28;
    goto LABEL_5;
  }
  (*(void (**)(WebCore::IDBKeyRange **__return_ptr))(**(_QWORD **)a2 + 16))(&v64);
  if (v66)
  {
    if (v66 != 1)
    {
      v56 = (WebCore::IDBTransaction *)std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::IDBTransaction::requestClearObjectStore(v56, v57);
    }
    v8 = v65;
    v65 = 0;
    *(_BYTE *)a3 = (_BYTE)v64;
    *(_QWORD *)(a3 + 8) = v8;
    v9 = 1;
    *(_DWORD *)(a3 + 16) = 1;
    return (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, WebCore::IDBKeyRange **))off_1E3358340[v9])(&v67, &v64);
  }
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)&v58, (const WebCore::IDBKey **)v64);
  if (v60 | v63
    && ((WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)&v58) & 1) != 0 || !v60)
    && ((WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)&v61) & 1) != 0 || !v63))
  {
    v11 = *(_QWORD **)(a1 + 152);
    v12 = v11[5];
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        v14 = (WebCore::ScriptExecutionContext *)(v13 - 96);
      else
        v14 = 0;
    }
    else
    {
      v14 = 0;
    }
    v15 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
    v16 = WebCore::IDBRequest::IDBRequest(v15, v14, (WebCore::IDBObjectStore *)a1, (WebCore::IDBTransaction *)v11);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v16 + 3);
    v17 = (unsigned int *)((char *)v15 + 60);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v76[0] = (uint64_t)v15;
    WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v67, v11 + 41, v76);
    v19 = (unsigned int *)v76[0];
    v76[0] = 0;
    if (v19)
    {
      v20 = v19 + 15;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v19 + 15);
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 72))(v19);
      }
    }
    v23 = (unsigned int *)(v11 + 3);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    do
      v25 = __ldaxr(v17);
    while (__stlxr(v25 + 1, v17));
    do
      v26 = __ldaxr(v23);
    while (__stlxr(v26 + 1, v23));
    v67 = (WebCore::IDBTransaction *)v11;
    WebCore::IDBKeyRangeData::isolatedCopy((WebCore::IDBKeyRangeData *)&v58, (uint64_t)v68);
    v27 = bmalloc::api::isoAllocate();
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v28 = &off_1E3358CE0;
    v28[1] = v11;
    v28[2] = v15;
    v29 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v29 = &off_1E3358D08;
    v30 = v67;
    v67 = 0;
    *(_QWORD *)(v29 + 8) = v30;
    *(_BYTE *)(v29 + 16) = v68[0];
    *(_BYTE *)(v29 + 24) = 0;
    *(_DWORD *)(v29 + 40) = -1;
    v31 = v70;
    if (v70 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v70])(v76, v29 + 24, v69);
      *(_DWORD *)(v29 + 40) = v31;
    }
    v32 = v71;
    *(_BYTE *)(v29 + 56) = 0;
    *(_BYTE *)(v29 + 48) = v32;
    *(_DWORD *)(v29 + 72) = -1;
    v33 = v73;
    if (v73 != -1)
    {
      ((void (*)(uint64_t *))off_1E3358668[v73])(v76);
      *(_DWORD *)(v29 + 72) = v33;
    }
    *(_WORD *)(v29 + 80) = v74;
    WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v27, (WebCore::IDBTransaction *)v11, v15);
    *(_QWORD *)v27 = off_1E3358838;
    v34 = (unsigned int *)(v27 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v36 = &off_1E3358A60;
    v36[1] = v27;
    v36[2] = v29;
    v37 = *(_QWORD *)(v27 + 88);
    *(_QWORD *)(v27 + 88) = v36;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    do
      v38 = __ldaxr(v34);
    while (__stlxr(v38 + 1, v34));
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v39 = &off_1E3358A88;
    v39[1] = v27;
    v39[2] = v28;
    v40 = *(_QWORD *)(v27 + 96);
    *(_QWORD *)(v27 + 96) = v39;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v75 = (unsigned int *)v27;
    v11[44] = *(_QWORD *)(v27 + 128);
    v77 = *(_OWORD *)(v27 + 24);
    do
      v41 = __ldaxr(v34);
    while (__stlxr(v41 + 1, v34));
    v76[0] = v27;
    WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)(v11 + 24), v76);
    v42 = (unsigned int *)v76[0];
    v76[0] = 0;
    if (v42)
    {
      v43 = v42 + 2;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v42 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v76, v11 + 37, &v77, (uint64_t *)&v75);
    WebCore::IDBTransaction::handlePendingOperations((uint64_t)v11);
    v47 = v75;
    v75 = 0;
    if (v47)
    {
      v48 = v47 + 2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v47 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
      }
    }
    if (v73 != -1)
      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v73])(v76, &v72);
    v73 = -1;
    if (v70 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v70])(v76, v69);
    v70 = -1;
    result = (unsigned int *)v67;
    v67 = 0;
    if (result)
    {
      v51 = result + 6;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, result + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v46);
        result = (unsigned int *)bmalloc::api::isoDeallocate(v54, v55);
      }
    }
    v10 = 0;
    *(_QWORD *)a3 = v15;
  }
  else
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 26;
    v10 = 1;
  }
  *(_DWORD *)(a3 + 16) = v10;
  if (v63 != -1)
    result = (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v63])(&v67, &v62);
  v63 = -1;
  if (v60 != -1)
    result = (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v60])(&v67, &v59);
  v9 = v66;
  if (v66 != -1)
    return (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, WebCore::IDBKeyRange **))off_1E3358340[v9])(&v67, &v64);
  return result;
}

unsigned int *WebCore::IDBTransaction::requestClearObjectStore@<X0>(WebCore::IDBTransaction *this@<X0>, WebCore::IDBObjectStore *a2@<X1>, WebCore::IDBRequest **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  WebCore::IDBRequest *v9;
  WebCore::IDBRequest *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WebCore::IDBRequest *v18;
  unsigned int *v19;
  unsigned int v20;
  WebCore::IDBRequest *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *result;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45[3];
  __int128 v46;

  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = (WebCore::ScriptExecutionContext *)(v7 - 96);
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
  v10 = WebCore::IDBRequest::IDBRequest(v9, v8, a2, this);
  *a3 = v10;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v10 + 3);
  v11 = (unsigned int *)((char *)v9 + 60);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)&v46 = v9;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)v45, (uint64_t *)this + 41, &v46);
  v13 = (unsigned int *)v46;
  *(_QWORD *)&v46 = 0;
  if (v13)
  {
    v14 = v13 + 15;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 72))(v13);
    }
  }
  v17 = *((_QWORD *)a2 + 3);
  v18 = *a3;
  v19 = (unsigned int *)((char *)this + 24);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = *a3;
  v22 = (unsigned int *)((char *)*a3 + 60);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v19);
  while (__stlxr(v24 + 1, v19));
  v25 = bmalloc::api::isoAllocate();
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v26 = &off_1E3358D30;
  v26[1] = this;
  v26[2] = v21;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E3358D58;
  v27[1] = this;
  v27[2] = v17;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v25, this, v18);
  *(_QWORD *)v25 = off_1E3358838;
  v28 = (unsigned int *)(v25 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v30 = &off_1E3358A60;
  v30[1] = v25;
  v30[2] = v27;
  v31 = *(_QWORD *)(v25 + 88);
  *(_QWORD *)(v25 + 88) = v30;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  do
    v32 = __ldaxr(v28);
  while (__stlxr(v32 + 1, v28));
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v33 = &off_1E3358A88;
  v33[1] = v25;
  v33[2] = v26;
  v34 = *(_QWORD *)(v25 + 96);
  *(_QWORD *)(v25 + 96) = v33;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v44 = (unsigned int *)v25;
  *((_QWORD *)this + 44) = *(_QWORD *)(v25 + 128);
  v46 = *(_OWORD *)(v25 + 24);
  do
    v35 = __ldaxr(v28);
  while (__stlxr(v35 + 1, v28));
  v45[0] = v25;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v45);
  v36 = (unsigned int *)v45[0];
  v45[0] = 0;
  if (v36)
  {
    v37 = v36 + 2;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v45, (uint64_t *)this + 37, &v46, (uint64_t *)&v44);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  result = v44;
  v44 = 0;
  if (result)
  {
    v41 = result + 2;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::createIndex@<X0>(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X1>, unsigned int *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::IDBIndex *v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WebCore::IDBIndex *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  WebCore::IDBIndex *v65;
  WebCore::IDBTransaction *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned __int8 *v69;
  WTF::StringImpl *v71;
  int v72;
  bmalloc::api *v73;
  void *v74;
  bmalloc::api *v75;
  void *v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  const WTF::StringImpl *v79;
  uint64_t v80;
  WebCore::IDBIndex *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  _BYTE v84[16];
  int v85;
  char v86;
  char v87;
  WebCore::IDBTransaction *v88;
  __int128 v89;
  WTF::StringImpl *v90;
  _BYTE v91[16];
  int v92;
  __int16 v93;
  unsigned int *v94;
  WebCore::IDBIndex *v95[3];
  uint64_t v96[4];

  v6 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v6 + 96) != 2 || *(_BYTE *)(a1 + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
LABEL_4:
    *(_BYTE *)a5 = v9;
LABEL_5:
    *(_DWORD *)(a5 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(v6 + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 27;
    goto LABEL_4;
  }
  v13 = *(_QWORD *)(a1 + 80);
  if (!v13)
  {
    v16 = 0;
    v14 = 0;
LABEL_18:
    v15 = v13 + (v14 << 6);
    goto LABEL_19;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + (v14 << 6);
  if (!*(_DWORD *)(v13 - 12))
  {
    v16 = v13 + (v14 << 6);
    goto LABEL_18;
  }
  v16 = *(_QWORD *)(a1 + 80);
  if ((_DWORD)v14)
  {
    v17 = v14 << 6;
    v16 = *(_QWORD *)(a1 + 80);
    while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
    {
      v16 += 64;
      v17 -= 64;
      if (!v17)
      {
        v16 = v15;
        break;
      }
    }
  }
LABEL_19:
  if (v13)
    v18 = v13 + ((unint64_t)*(unsigned int *)(v13 - 4) << 6);
  else
    v18 = 0;
  if (v18 != v16)
  {
    while ((WTF::equal(*(WTF **)(v16 + 24), *a2, (const WTF::StringImpl *)a3) & 1) == 0)
    {
      v19 = v16 + 64;
      v16 = v15;
      if (v19 != v15)
      {
        v16 = v19;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 64;
          if (v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
      if (v16 == v18)
        goto LABEL_30;
    }
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 25;
    goto LABEL_4;
  }
LABEL_30:
  v20 = a3[4];
  if ((_DWORD)v20 == -1)
  {
    v77 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::IDBObjectStore::index(v77, v78, v79, v80);
  }
  v88 = (WebCore::IDBTransaction *)&v81;
  result = ((uint64_t (*)(WebCore::IDBTransaction **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore17isIDBKeyPathValidERKNS_7variantIJNS6_6StringENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE3__0JZNS8_17isIDBKeyPathValidESH_E3__1EEEEEJRKNS0_6__implIJSA_SE_EEEEEEDcOT_DpOT0____fmatrix[v20])(&v88, a3);
  if ((result & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 9;
    goto LABEL_4;
  }
  v21 = *a2;
  if (!*a2)
  {
    *(_BYTE *)a5 = 33;
    *(_QWORD *)(a5 + 8) = 0;
    goto LABEL_5;
  }
  v22 = a4[1];
  v23 = a3[4];
  if (v22 && (_DWORD)v23 == 1)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 12;
    goto LABEL_4;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 72);
  v25 = (WebCore::IDBIndex *)(*(_QWORD *)(v24 + 96) + 1);
  *(_QWORD *)(v24 + 96) = v25;
  v26 = *a4;
  v27 = *(_QWORD *)(a1 + 24);
  v81 = v25;
  v82 = v27;
  *(_DWORD *)v21 += 2;
  v83 = v21;
  v84[0] = 0;
  v85 = -1;
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(WebCore::IDBTransaction **, _BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v23])(&v88, v84, a3);
    v85 = v23;
    v25 = v81;
  }
  v86 = v26;
  v87 = v22;
  v95[0] = v25;
  WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>((uint64_t *)(a1 + 80), (WTF::StringImpl *)v95, (uint64_t)&v81, (uint64_t)&v88);
  v28 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 72) + 112);
  if (v28)
  {
    v29 = *((_DWORD *)v28 - 2);
    v30 = (v82 + ~(v82 << 32)) ^ ((unint64_t)(v82 + ~(v82 << 32)) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = &v28[9 * v33];
    v35 = *v34;
    if (*v34 != v82)
    {
      v36 = 1;
      while (v35)
      {
        v33 = (v33 + v36) & v29;
        v34 = &v28[9 * v33];
        v35 = *v34;
        ++v36;
        if (*v34 == v82)
          goto LABEL_49;
      }
      v34 = &v28[9 * *((unsigned int *)v28 - 1)];
    }
LABEL_49:
    v28 += 9 * *((unsigned int *)v28 - 1);
  }
  else
  {
    v34 = 0;
  }
  if (v34 == v28)
    v37 = 0;
  else
    v37 = v34 + 1;
  v95[0] = v81;
  WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v37 + 7, (WTF::StringImpl *)v95, (uint64_t)&v81, (uint64_t)&v88);
  v38 = *(_QWORD **)(a1 + 152);
  v39 = v38[5];
  if (v39 && *(_QWORD *)(v39 + 8))
  {
    v40 = (unsigned int *)(v38 + 3);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 + 1, v40));
    v88 = (WebCore::IDBTransaction *)v38;
    WebCore::IDBIndexInfo::isolatedCopy((uint64_t *)&v81, (uint64_t)&v89);
    v43 = bmalloc::api::isoAllocate();
    v44 = (WebCore::IDBIndex *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v44 = &off_1E3358970;
    *((_QWORD *)v44 + 1) = v38;
    v95[0] = v44;
    v45 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v45 = &off_1E3358998;
    *(_QWORD *)(v45 + 8) = v88;
    *(_OWORD *)(v45 + 16) = v89;
    v46 = v90;
    v88 = 0;
    v90 = 0;
    *(_QWORD *)(v45 + 32) = v46;
    *(_BYTE *)(v45 + 40) = 0;
    *(_DWORD *)(v45 + 56) = -1;
    v47 = v92;
    if (v92 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33586B0[v92])(v96, v45 + 40, v91);
      *(_DWORD *)(v45 + 56) = v47;
    }
    *(_WORD *)(v45 + 64) = v93;
    v96[0] = v45;
    WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v43, (uint64_t)v38, (uint64_t *)v95, v96);
    if (v96[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v96[0] + 8))(v96[0]);
    if (v95[0])
      (*(void (**)(WebCore::IDBIndex *))(*(_QWORD *)v95[0] + 8))(v95[0]);
    v94 = (unsigned int *)v43;
    v38[44] = *(_QWORD *)(v43 + 128);
    *(_OWORD *)v96 = *(_OWORD *)(v43 + 24);
    v48 = (unsigned int *)(v43 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    v95[0] = (WebCore::IDBIndex *)v43;
    WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)(v38 + 24), (uint64_t *)v95);
    v50 = (unsigned int *)v95[0];
    v95[0] = 0;
    if (v50)
    {
      v51 = v50 + 2;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v50 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
      }
    }
    WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v95, v38 + 37, v96, (uint64_t *)&v94);
    WebCore::IDBTransaction::handlePendingOperations((uint64_t)v38);
    v55 = v94;
    v94 = 0;
    if (v55)
    {
      v56 = v55 + 2;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        atomic_store(1u, v55 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
      }
    }
    if (v92 != -1)
      ((void (*)(WebCore::IDBIndex **, _BYTE *))off_1E3358310[v92])(v95, v91);
    v92 = -1;
    v59 = v90;
    v90 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v54);
      else
        *(_DWORD *)v59 -= 2;
    }
    v60 = (unsigned int *)v88;
    v88 = 0;
    if (v60)
    {
      v61 = v60 + 6;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        atomic_store(1u, v60 + 6);
        WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)v60, v54);
        bmalloc::api::isoDeallocate(v75, v76);
      }
    }
    v64 = *(_QWORD *)(v38[5] + 8);
    if (v64)
      v65 = (WebCore::IDBIndex *)(v64 - 96);
    else
      v65 = 0;
    WebCore::IDBIndex::create(v65, (WebCore::ScriptExecutionContext *)&v81, (const WebCore::IDBIndexInfo *)a1, (uint64_t *)&v88);
    v66 = v88;
    v95[0] = v88;
  }
  else
  {
    v66 = 0;
    v95[0] = 0;
  }
  v67 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)v66 + 18) + 152) + 24);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 + 1, v67));
  v69 = (unsigned __int8 *)(a1 + 161);
  if (__ldaxr((unsigned __int8 *)(a1 + 161)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v69))
  {
    goto LABEL_97;
  }
  MEMORY[0x19AEA534C](a1 + 161);
LABEL_97:
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBIndex>>((uint64_t)&v88, (uint64_t *)(a1 + 168), a2, v95);
  *(_QWORD *)a5 = v66;
  *(_DWORD *)(a5 + 16) = 0;
  v72 = __ldxr(v69);
  if (v72 == 1)
  {
    if (!__stlxr(0, v69))
      goto LABEL_102;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 161));
LABEL_102:
  if (v95[0])
  {
    WebCore::IDBIndex::~IDBIndex(v95[0], v71);
    bmalloc::api::isoDeallocate(v73, v74);
  }
  if (v85 != -1)
    ((void (*)(WebCore::IDBTransaction **, _BYTE *))off_1E3358310[v85])(&v88, v84);
  v85 = -1;
  result = (uint64_t)v83;
  v83 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v71);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::index@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 *v8;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::IDBIndex *v31;
  WebCore::IDBIndex *v32;
  unsigned int *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  bmalloc::api *v36;
  void *v37;
  int v38;
  char v39[24];
  WebCore::IDBIndex *v40;
  WebCore::IDBIndex *v41;

  v5 = *(_QWORD *)(this + 8);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
LABEL_8:
    *(_DWORD *)(a4 + 16) = 1;
    return this;
  }
  v6 = (uint64_t *)this;
  if (*(_BYTE *)(this + 160) || *(unsigned __int8 *)(*(_QWORD *)(this + 152) + 136) - 2 <= 2)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 8;
    goto LABEL_8;
  }
  v8 = (unsigned __int8 *)(this + 161);
  if (__ldaxr((unsigned __int8 *)(this + 161)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](this + 161);
LABEL_14:
  v10 = v6 + 21;
  v11 = v6[21];
  if (v11)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = *((_DWORD *)*a2 + 4);
    if (v13 < 0x100)
      v14 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v14 = v13 >> 8;
    for (i = 0; ; v14 = i + v16)
    {
      v16 = v14 & v12;
      this = *(_QWORD *)(v11 + 16 * v16);
      if (this != -1)
      {
        if (!this)
        {
          v17 = *v10;
          if (!*v10)
            goto LABEL_31;
          v18 = *(unsigned int *)(v17 - 4);
          v19 = v17 + 16 * v18;
          goto LABEL_27;
        }
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v19 = v11 + 16 * v16;
    v17 = *v10;
    if (!*v10)
      goto LABEL_28;
    v18 = *(unsigned int *)(v17 - 4);
LABEL_27:
    if (v19 == v17 + 16 * v18)
      goto LABEL_31;
LABEL_28:
    v20 = *(_QWORD *)(v19 + 8);
    v21 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v20 + 144) + 152) + 24);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    *(_QWORD *)a4 = v20;
    goto LABEL_61;
  }
LABEL_31:
  v23 = v6[10];
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    v25 = v23 + (v24 << 6);
    if (*(_DWORD *)(v23 - 12))
    {
      v26 = v6[10];
      if ((_DWORD)v24)
      {
        v27 = v24 << 6;
        v26 = v6[10];
        while ((unint64_t)(*(_QWORD *)v26 + 1) <= 1)
        {
          v26 += 64;
          v27 -= 64;
          if (!v27)
          {
            v26 = v25;
            goto LABEL_41;
          }
        }
      }
      goto LABEL_41;
    }
    v26 = v23 + (v24 << 6);
  }
  else
  {
    v26 = 0;
    v24 = 0;
  }
  v25 = v23 + (v24 << 6);
LABEL_41:
  if (v23)
    v28 = v23 + ((unint64_t)*(unsigned int *)(v23 - 4) << 6);
  else
    v28 = 0;
  if (v28 == v26)
  {
LABEL_52:
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 5;
    *(_DWORD *)(a4 + 16) = 1;
    goto LABEL_62;
  }
  while ((WTF::equal(*(WTF **)(v26 + 24), *a2, a3) & 1) == 0)
  {
    v29 = v26 + 64;
    v26 = v25;
    if (v29 != v25)
    {
      v26 = v29;
      while ((unint64_t)(*(_QWORD *)v26 + 1) <= 1)
      {
        v26 += 64;
        if (v26 == v25)
        {
          v26 = v25;
          break;
        }
      }
    }
    if (v26 == v28)
      goto LABEL_52;
  }
  v30 = *(_QWORD *)(v6[1] + 8);
  if (v30)
    v31 = (WebCore::IDBIndex *)(v30 - 96);
  else
    v31 = 0;
  WebCore::IDBIndex::create(v31, (WebCore::ScriptExecutionContext *)(v26 + 8), (const WebCore::IDBIndexInfo *)v6, (uint64_t *)&v41);
  v32 = v41;
  v33 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)v41 + 18) + 152) + 24);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  v40 = v32;
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::unique_ptr<WebCore::IDBIndex>>((uint64_t)v39, v10, a2, &v40);
  this = (uint64_t)v40;
  if (v40)
  {
    WebCore::IDBIndex::~IDBIndex(v40, v35);
    this = bmalloc::api::isoDeallocate(v36, v37);
  }
  *(_QWORD *)a4 = v32;
LABEL_61:
  *(_DWORD *)(a4 + 16) = 0;
LABEL_62:
  v38 = __ldxr(v8);
  if (v38 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return this;
}

uint64_t WebCore::IDBObjectStore::deleteIndex@<X0>(WebCore::IDBObjectStore *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  WebCore::IDBIndex *v35;
  WTF::StringImpl *v36;
  WebCore::IDBIndex *v37;
  bmalloc::api *v38;
  void *v39;
  int v40;
  _QWORD v41[3];
  uint64_t v42;
  WebCore::IDBIndex *v43;

  if (*((_BYTE *)this + 160) || (v6 = *((_QWORD *)this + 19), *(_BYTE *)(v6 + 96) != 2))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 8;
    goto LABEL_6;
  }
  if (*(_BYTE *)(v6 + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 27;
LABEL_6:
    *(_BYTE *)a4 = v8;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v11 = (uint64_t *)((char *)this + 80);
  v10 = *((_QWORD *)this + 10);
  if (!v10)
  {
    v14 = 0;
    v12 = 0;
LABEL_16:
    v13 = v10 + (v12 << 6);
    goto LABEL_17;
  }
  v12 = *(unsigned int *)(v10 - 4);
  v13 = v10 + (v12 << 6);
  if (!*(_DWORD *)(v10 - 12))
  {
    v14 = v10 + (v12 << 6);
    goto LABEL_16;
  }
  v14 = *((_QWORD *)this + 10);
  if ((_DWORD)v12)
  {
    v15 = v12 << 6;
    v14 = *((_QWORD *)this + 10);
    while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
    {
      v14 += 64;
      v15 -= 64;
      if (!v15)
      {
        v14 = v13;
        break;
      }
    }
  }
LABEL_17:
  if (v10)
    v16 = v10 + ((unint64_t)*(unsigned int *)(v10 - 4) << 6);
  else
    v16 = 0;
  if (v16 == v14)
  {
LABEL_28:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 5;
    goto LABEL_6;
  }
  while ((WTF::equal(*(WTF **)(v14 + 24), *a2, a3) & 1) == 0)
  {
    v17 = v14 + 64;
    v14 = v13;
    if (v17 != v13)
    {
      v14 = v17;
      while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
      {
        v14 += 64;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
    if (v14 == v16)
      goto LABEL_28;
  }
  v18 = *v11;
  if (!*v11)
  {
    v20 = 0;
    v19 = 0;
    goto LABEL_37;
  }
  v19 = *(unsigned int *)(v18 - 4);
  v20 = v18 + (v19 << 6);
  if (!*(_DWORD *)(v18 - 12))
  {
LABEL_37:
    v22 = v18 + (v19 << 6);
    v18 = v20;
    v20 = v22;
    goto LABEL_38;
  }
  if ((_DWORD)v19)
  {
    v21 = v19 << 6;
    while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
    {
      v18 += 64;
      v21 -= 64;
      if (!v21)
      {
        v18 = v20;
        break;
      }
    }
  }
LABEL_38:
  if ((WTF::equal(*(WTF **)(v18 + 24), *a2, a3) & 1) == 0)
  {
    do
    {
      v24 = v18 + 64;
      v18 = v20;
      if (v24 != v20)
      {
        v18 = v24;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 64;
          if (v18 == v20)
          {
            v18 = v20;
            break;
          }
        }
      }
    }
    while (!WTF::equal(*(WTF **)(v18 + 24), *a2, v23));
  }
  WebCore::IDBDatabase::didDeleteIndexInfo(*(_QWORD *)(*((_QWORD *)this + 19) + 72), (const WebCore::IDBIndexInfo *)(v18 + 8), v23);
  v26 = *((_QWORD *)this + 10);
  if (!v26)
  {
    v29 = 0;
    v27 = 0;
LABEL_54:
    v28 = v26 + (v27 << 6);
    goto LABEL_55;
  }
  v27 = *(unsigned int *)(v26 - 4);
  v28 = v26 + (v27 << 6);
  if (!*(_DWORD *)(v26 - 12))
  {
    v29 = v26 + (v27 << 6);
    goto LABEL_54;
  }
  v29 = *((_QWORD *)this + 10);
  if ((_DWORD)v27)
  {
    v30 = v27 << 6;
    v29 = *((_QWORD *)this + 10);
    while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
    {
      v29 += 64;
      v30 -= 64;
      if (!v30)
      {
        v29 = v28;
        break;
      }
    }
  }
LABEL_55:
  if (v26)
    v31 = v26 + ((unint64_t)*(unsigned int *)(v26 - 4) << 6);
  else
    v31 = 0;
  if (v31 != v29)
  {
    while ((WTF::equal(*(WTF **)(v29 + 24), *a2, v25) & 1) == 0)
    {
      v32 = v29 + 64;
      v29 = v28;
      if (v32 != v28)
      {
        v29 = v32;
        while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
        {
          v29 += 64;
          if (v29 == v28)
          {
            v29 = v28;
            break;
          }
        }
      }
      if (v29 == v31)
        goto LABEL_68;
    }
    v41[0] = *(_QWORD *)(v29 + 8);
    WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove((uint64_t *)this + 10, (WTF::StringImpl *)v41);
  }
LABEL_68:
  v33 = (unsigned __int8 *)this + 161;
  if (__ldaxr((unsigned __int8 *)this + 161))
  {
    __clrex();
  }
  else if (!__stxr(1u, v33))
  {
    goto LABEL_72;
  }
  MEMORY[0x19AEA534C]((char *)this + 161);
LABEL_72:
  WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::take((WebCore::IDBObjectStore *)((char *)this + 168), a2, v25, &v43);
  v35 = v43;
  if (v43)
  {
    *((_BYTE *)v43 + 136) = 1;
    v42 = *((_QWORD *)v35 + 3);
    WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::IDBIndex>>((uint64_t *)this + 22, (WTF::StringImpl *)&v42, (uint64_t *)&v43, (uint64_t)v41);
    v37 = v43;
    v43 = 0;
    if (v37)
    {
      WebCore::IDBIndex::~IDBIndex(v37, v36);
      bmalloc::api::isoDeallocate(v38, v39);
    }
  }
  v40 = __ldxr(v33);
  if (v40 == 1)
  {
    if (!__stlxr(0, v33))
      goto LABEL_80;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::IDBObjectStore *)((char *)this + 161));
LABEL_80:
  result = WebCore::IDBTransaction::deleteIndex(*((WebCore::IDBTransaction **)this + 19), *((WebCore::IDBTransaction **)this + 3), (const WTF::String *)a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return result;
}

WTF *WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::take@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  bmalloc::api *v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v5 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    goto LABEL_26;
  v7 = (uint64_t *)result;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_DWORD *)*a2 + 4);
  v10 = v9 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v9 >> 8;
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v8;
    result = *(WTF **)(v5 + 16 * v12);
    if (result != (WTF *)-1)
    {
      if (!result)
      {
        v13 = *v7;
        if (!*v7)
          goto LABEL_26;
        v14 = *(unsigned int *)(v13 - 4);
        v15 = v13 + 16 * v14;
        goto LABEL_14;
      }
      result = (WTF *)WTF::equal(result, *a2, a3);
      if ((result & 1) != 0)
        break;
    }
  }
  v15 = v5 + 16 * v12;
  v13 = *v7;
  if (!*v7)
    goto LABEL_15;
  v14 = *(unsigned int *)(v13 - 4);
LABEL_14:
  v13 += 16 * v14;
LABEL_15:
  if (v13 == v15)
  {
LABEL_26:
    *a4 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = 0;
    *a4 = v16;
    v17 = *v7;
    if (!*v7 || (v17 += 16 * *(unsigned int *)(v17 - 4), v17 != v15))
    {
      if (v17 != v15)
      {
        v18 = *(WTF::StringImpl **)v15;
        *(_QWORD *)v15 = -1;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        result = *(WTF **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (result)
        {
          WebCore::IDBIndex::~IDBIndex(result, (WTF::StringImpl *)a2);
          result = (WTF *)bmalloc::api::isoDeallocate(v19, v20);
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v7, v25 >> 1, 0);
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::IDBIndex>>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  bmalloc::api *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        v31 = 0;
        v32 = v8 + 16 * v25;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *(_QWORD *)a2;
      v16 = v18;
    }
  }
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  *v16 = v11;
  v16[1] = v20;
  if (result)
  {
    WebCore::IDBIndex::~IDBIndex((WebCore::IDBIndex *)result, a2);
    result = (uint64_t *)bmalloc::api::isoDeallocate(v21, v22);
  }
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *v6;
  if (*v6)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_30;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_31:
    result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v6, v30, v16);
    v16 = result;
    v26 = *v6;
    if (*v6)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
  }
  v32 = v26 + 16 * v29;
  v31 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

uint64_t WebCore::IDBTransaction::deleteIndex(WebCore::IDBTransaction *this, WebCore::IDBTransaction *a2, const WTF::String *a3)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WebCore::IDBTransaction *v21[2];
  WTF::StringImpl *v22;
  unsigned int *v23;
  uint64_t v24[3];
  __int128 v25;

  v4 = (unsigned int *)((char *)this + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v21[0] = this;
  v21[1] = a2;
  WTF::String::isolatedCopy();
  v7 = bmalloc::api::isoAllocate();
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E3358E98;
  v8[1] = this;
  v24[0] = (uint64_t)v8;
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v9 = &off_1E3358EC0;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)v21;
  *(_QWORD *)(v9 + 24) = v22;
  *(_QWORD *)&v25 = v9;
  WebCore::IDBClient::TransactionOperationImpl::TransactionOperationImpl(v7, (uint64_t)this, v24, (uint64_t *)&v25);
  if ((_QWORD)v25)
    (*(void (**)(_QWORD))(*(_QWORD *)v25 + 8))(v25);
  if (v24[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v24[0] + 8))(v24[0]);
  v23 = (unsigned int *)v7;
  *((_QWORD *)this + 44) = *(_QWORD *)(v7 + 128);
  v25 = *(_OWORD *)(v7 + 24);
  v10 = (unsigned int *)(v7 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v24[0] = v7;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v24);
  v12 = (unsigned int *)v24[0];
  v24[0] = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v24, (uint64_t *)this + 37, &v25, (uint64_t *)&v23);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  return 0;
}

uint64_t WebCore::IDBObjectStore::count@<X0>(WebCore::IDBTransaction **a1@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  const WebCore::IDBKey *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  WebCore::IDBKey *v18;
  char v19;

  WebCore::createIDBKeyFromValue(&v18, a2, a3);
  v6 = (unsigned int *)v18;
  if (WebCore::IDBKey::isValid(v18))
    v7 = (const WebCore::IDBKey *)v6;
  else
    v7 = 0;
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)v11, v7);
  WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v14, v7);
  v17 = 0;
  result = WebCore::IDBObjectStore::doCount(a1, (const WebCore::IDBKeyRangeData *)v11, a4);
  if (v16 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v16])(&v19, &v15);
  v16 = -1;
  if (v13 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v13])(&v19, &v12);
  if (v6)
  {
    if (*v6 == 1)
    {
      v10 = v6[6];
      if ((_DWORD)v10 != -1)
        ((void (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v10])(v11, v6 + 2);
      v6[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v6, v9);
    }
    else
    {
      --*v6;
    }
  }
  return result;
}

uint64_t WebCore::IDBObjectStore::doCount@<X0>(WebCore::IDBTransaction **this@<X0>, const WebCore::IDBKeyRangeData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  int v8;

  if (*((_BYTE *)this + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 8;
  }
  else if (*((_BYTE *)this[19] + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 27;
  }
  else
  {
    if (*((_DWORD *)a2 + 6) | *((_DWORD *)a2 + 14)
      && ((WebCore::IDBKeyData::isValid(a2) & 1) != 0 || !*((_DWORD *)a2 + 6))
      && ((WebCore::IDBKeyData::isValid((const WebCore::IDBKeyRangeData *)((char *)a2 + 32)) & 1) != 0
       || !*((_DWORD *)a2 + 14)))
    {
      result = (uint64_t)WebCore::IDBTransaction::requestCount(this[19], (WebCore::IDBObjectStore *)this, a2, (WebCore::IDBRequest **)a3);
      v8 = 0;
      goto LABEL_12;
    }
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 26;
  }
  *(_BYTE *)a3 = v5;
  v8 = 1;
LABEL_12:
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

unsigned int *WebCore::IDBTransaction::requestCount@<X0>(WebCore::IDBTransaction *this@<X0>, WebCore::IDBObjectStore *a2@<X1>, const WebCore::IDBKeyRangeData *a3@<X2>, WebCore::IDBRequest **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  WebCore::IDBRequest *v11;
  WebCore::IDBRequest *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::IDBRequest *v19;
  unsigned int *v20;
  unsigned int v21;
  WebCore::IDBRequest *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WebCore::IDBTransaction *v29;
  int v30;
  char v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *result;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  bmalloc::api *v54;
  void *v55;
  WebCore::IDBTransaction *v56;
  _BYTE v57[8];
  _BYTE v58[16];
  int v59;
  char v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  unsigned int *v64;
  uint64_t v65[3];
  __int128 v66;

  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WebCore::ScriptExecutionContext *)(v9 - 96);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
  v12 = WebCore::IDBRequest::IDBRequest(v11, v10, a2, this);
  *a4 = v12;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v12 + 3);
  v13 = (unsigned int *)((char *)v11 + 60);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v65[0] = (uint64_t)v11;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v56, (uint64_t *)this + 41, v65);
  v15 = (unsigned int *)v65[0];
  v65[0] = 0;
  if (v15)
  {
    v16 = v15 + 15;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 72))(v15);
    }
  }
  v19 = *a4;
  v20 = (unsigned int *)((char *)this + 24);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = *a4;
  v23 = (unsigned int *)((char *)*a4 + 60);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v20);
  while (__stlxr(v25 + 1, v20));
  v56 = this;
  WebCore::IDBKeyRangeData::isolatedCopy(a3, (uint64_t)v57);
  v26 = bmalloc::api::isoAllocate();
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E3358C40;
  v27[1] = this;
  v27[2] = v22;
  v28 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v28 = &off_1E3358C68;
  v29 = v56;
  v56 = 0;
  *(_QWORD *)(v28 + 8) = v29;
  *(_BYTE *)(v28 + 16) = v57[0];
  *(_BYTE *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 40) = -1;
  v30 = v59;
  if (v59 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v59])(v65, v28 + 24, v58);
    *(_DWORD *)(v28 + 40) = v30;
  }
  v31 = v60;
  *(_BYTE *)(v28 + 56) = 0;
  *(_BYTE *)(v28 + 48) = v31;
  *(_DWORD *)(v28 + 72) = -1;
  v32 = v62;
  if (v62 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v62])(v65);
    *(_DWORD *)(v28 + 72) = v32;
  }
  *(_WORD *)(v28 + 80) = v63;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v26, this, v19);
  *(_QWORD *)v26 = off_1E3358838;
  v33 = (unsigned int *)(v26 + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v35 = &off_1E3358A60;
  v35[1] = v26;
  v35[2] = v28;
  v36 = *(_QWORD *)(v26 + 88);
  *(_QWORD *)(v26 + 88) = v35;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  do
    v37 = __ldaxr(v33);
  while (__stlxr(v37 + 1, v33));
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v38 = &off_1E3358A88;
  v38[1] = v26;
  v38[2] = v27;
  v39 = *(_QWORD *)(v26 + 96);
  *(_QWORD *)(v26 + 96) = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v64 = (unsigned int *)v26;
  v66 = *(_OWORD *)(v26 + 24);
  do
    v40 = __ldaxr(v33);
  while (__stlxr(v40 + 1, v33));
  v65[0] = v26;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)this + 192, v65);
  v41 = (unsigned int *)v65[0];
  v65[0] = 0;
  if (v41)
  {
    v42 = v41 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v65, (uint64_t *)this + 37, &v66, (uint64_t *)&v64);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)this);
  v46 = v64;
  v64 = 0;
  if (v46)
  {
    v47 = v46 + 2;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v46 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
    }
  }
  if (v62 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v62])(v65, &v61);
  v62 = -1;
  if (v59 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v59])(v65, v58);
  v59 = -1;
  result = (unsigned int *)v56;
  v56 = 0;
  if (result)
  {
    v51 = result + 6;
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v45);
      return (unsigned int *)bmalloc::api::isoDeallocate(v54, v55);
    }
  }
  return result;
}

unsigned int *WebCore::IDBObjectStore::doGetAll@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *result;
  char v6;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  WebCore::IDBRequest **v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  WebCore::IDBKeyRange *v23;
  uint64_t v24;
  int v25;
  char v26;

  if (*(_BYTE *)(a1 + 160))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_5:
    *(_BYTE *)a4 = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 136))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_5;
  }
  (*(void (**)(WebCore::IDBKeyRange **__return_ptr))(**(_QWORD **)a3 + 16))(&v23);
  if (v25)
  {
    if (v25 != 1)
    {
      v12 = (WebCore::IDBRequest **)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBTransaction::requestGetAllObjectStoreRecords(v12, v13, v14, v15, v16, v17);
    }
    v9 = v24;
    v24 = 0;
    *(_BYTE *)a4 = (_BYTE)v23;
    *(_QWORD *)(a4 + 8) = v9;
    v10 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return (unsigned int *)((uint64_t (*)(_BYTE *, WebCore::IDBKeyRange **))off_1E3358340[v10])(v18, &v23);
  }
  v11 = *(_QWORD **)(a1 + 152);
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v18, (const WebCore::IDBKey **)v23);
  result = WebCore::IDBTransaction::requestGetAllObjectStoreRecords((WebCore::IDBRequest **)a4, v11, (unint64_t *)a1, (uint64_t)v18, 1, a2);
  *(_DWORD *)(a4 + 16) = 0;
  if (v22 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v22])(&v26, &v21);
  v22 = -1;
  if (v20 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v20])(&v26, &v19);
  v10 = v25;
  if (v25 != -1)
    return (unsigned int *)((uint64_t (*)(_BYTE *, WebCore::IDBKeyRange **))off_1E3358340[v10])(v18, &v23);
  return result;
}

unsigned int *WebCore::IDBTransaction::requestGetAllObjectStoreRecords(WebCore::IDBRequest **a1, _QWORD *a2, unint64_t *a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  WebCore::ScriptExecutionContext *v14;
  WebCore::IDBRequest *v15;
  WebCore::IDBRequest *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::IDBRequest *v25;
  unsigned int *v26;
  unsigned int v27;
  WebCore::IDBRequest *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  WebCore::IDBTransaction *v35;
  int v36;
  char v37;
  int v38;
  __int128 v39;
  unsigned int *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *result;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  bmalloc::api *v61;
  void *v62;
  WebCore::IDBTransaction *v63;
  _BYTE v64[8];
  _BYTE v65[16];
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  __int128 v71;
  __int128 v72;
  unsigned int *v73;
  unsigned int *v74;
  _BYTE v75[16];
  int v76;
  char v77;
  _BYTE v78[16];
  int v79;
  __int16 v80;
  char v81;
  int v82;
  char v83;
  __int128 v84;
  uint64_t v85[3];
  __int128 v86;

  v12 = a2[5];
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = (WebCore::ScriptExecutionContext *)(v13 - 96);
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  v15 = (WebCore::IDBRequest *)bmalloc::api::isoAllocate();
  v16 = WebCore::IDBRequest::IDBRequest(v15, v14, (WebCore::IDBObjectStore *)a3, (WebCore::IDBTransaction *)a2);
  *a1 = v16;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v16 + 3);
  v17 = (unsigned int *)((char *)v15 + 60);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v74 = (unsigned int *)v15;
  WTF::HashTable<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBRequest,WTF::RawPtrTraits<WebCore::IDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBRequest>>>>::add((unsigned int *)&v63, a2 + 41, &v74);
  v19 = v74;
  v74 = 0;
  if (v19)
  {
    v20 = v19 + 15;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 15);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 72))(v19);
    }
  }
  LOBYTE(v74) = *(_BYTE *)a4;
  v75[0] = 0;
  v76 = -1;
  v23 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(WebCore::IDBTransaction **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v23])(&v63, v75, a4 + 8);
    v76 = v23;
  }
  v77 = *(_BYTE *)(a4 + 32);
  v78[0] = 0;
  v79 = -1;
  v24 = *(unsigned int *)(a4 + 56);
  if ((_DWORD)v24 != -1)
  {
    ((void (*)(WebCore::IDBTransaction **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v24])(&v63, v78, a4 + 40);
    v79 = v24;
  }
  v80 = *(_WORD *)(a4 + 64);
  v81 = a5;
  v82 = a6;
  v83 = BYTE4(a6);
  v84 = a3[3];
  v25 = *a1;
  v26 = (unsigned int *)(a2 + 3);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  v28 = *a1;
  v29 = (unsigned int *)((char *)*a1 + 60);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  do
    v31 = __ldaxr(v26);
  while (__stlxr(v31 + 1, v26));
  v63 = (WebCore::IDBTransaction *)a2;
  WebCore::IDBKeyRangeData::isolatedCopy((WebCore::IDBKeyRangeData *)&v74, (uint64_t)v64);
  LOBYTE(v71) = v81;
  DWORD1(v71) = v82;
  BYTE8(v71) = v83;
  v72 = v84;
  v32 = bmalloc::api::isoAllocate();
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v33 = &off_1E3358B00;
  v33[1] = a2;
  v33[2] = v28;
  v34 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v34 = &off_1E3358B28;
  v35 = v63;
  v63 = 0;
  *(_QWORD *)(v34 + 8) = v35;
  *(_BYTE *)(v34 + 16) = v64[0];
  *(_BYTE *)(v34 + 24) = 0;
  *(_DWORD *)(v34 + 40) = -1;
  v36 = v66;
  if (v66 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3358668[v66])(v85, v34 + 24, v65);
    *(_DWORD *)(v34 + 40) = v36;
  }
  v37 = v67;
  *(_BYTE *)(v34 + 56) = 0;
  *(_BYTE *)(v34 + 48) = v37;
  *(_DWORD *)(v34 + 72) = -1;
  v38 = v69;
  if (v69 != -1)
  {
    ((void (*)(uint64_t *))off_1E3358668[v69])(v85);
    *(_DWORD *)(v34 + 72) = v38;
  }
  *(_WORD *)(v34 + 80) = v70;
  v39 = v72;
  *(_OWORD *)(v34 + 88) = v71;
  *(_OWORD *)(v34 + 104) = v39;
  WebCore::IDBClient::TransactionOperation::TransactionOperation((WebCore::IDBClient::TransactionOperation *)v32, (WebCore::IDBTransaction *)a2, v25);
  *(_QWORD *)v32 = off_1E3358838;
  v40 = (unsigned int *)(v32 + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v42 = &off_1E3358A60;
  v42[1] = v32;
  v42[2] = v34;
  v43 = *(_QWORD *)(v32 + 88);
  *(_QWORD *)(v32 + 88) = v42;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  do
    v44 = __ldaxr(v40);
  while (__stlxr(v44 + 1, v40));
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v45 = &off_1E3358A88;
  v45[1] = v32;
  v45[2] = v33;
  v46 = *(_QWORD *)(v32 + 96);
  *(_QWORD *)(v32 + 96) = v45;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v73 = (unsigned int *)v32;
  v86 = *(_OWORD *)(v32 + 24);
  do
    v47 = __ldaxr(v40);
  while (__stlxr(v47 + 1, v40));
  v85[0] = v32;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)(a2 + 24), v85);
  v48 = (unsigned int *)v85[0];
  v85[0] = 0;
  if (v48)
  {
    v49 = v48 + 2;
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
    }
  }
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v85, a2 + 37, &v86, (uint64_t *)&v73);
  WebCore::IDBTransaction::handlePendingOperations((uint64_t)a2);
  v53 = v73;
  v73 = 0;
  if (v53)
  {
    v54 = v53 + 2;
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v53 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
    }
  }
  if (v69 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v69])(v85, &v68);
  v69 = -1;
  if (v66 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v66])(v85, v65);
  v66 = -1;
  result = (unsigned int *)v63;
  v63 = 0;
  if (result)
  {
    v58 = result + 6;
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, result + 6);
      WebCore::IDBTransaction::~IDBTransaction((WebCore::IDBTransaction *)result, v52);
      result = (unsigned int *)bmalloc::api::isoDeallocate(v61, v62);
    }
  }
  if (v79 != -1)
    result = (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v79])(&v63, v78);
  v79 = -1;
  if (v76 != -1)
    return (unsigned int *)((uint64_t (*)(WebCore::IDBTransaction **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v76])(&v63, v75);
  return result;
}

uint64_t WebCore::IDBObjectStore::doGetAllKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  WebCore::IDBObjectStore *v12;
  _BYTE v13[8];
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  WebCore::IDBKeyRange *v18;
  uint64_t v19;
  int v20;
  char v21;

  if (*(_BYTE *)(a1 + 160))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 8;
LABEL_5:
    *(_BYTE *)a4 = v6;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 136))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 27;
    goto LABEL_5;
  }
  (*(void (**)(WebCore::IDBKeyRange **__return_ptr))(**(_QWORD **)a3 + 16))(&v18);
  if (v20)
  {
    if (v20 != 1)
    {
      v12 = (WebCore::IDBObjectStore *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::IDBObjectStore::rollbackForVersionChangeAbort(v12);
    }
    v9 = v19;
    v19 = 0;
    *(_BYTE *)a4 = (_BYTE)v18;
    *(_QWORD *)(a4 + 8) = v9;
    v10 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    return ((uint64_t (*)(_BYTE *, WebCore::IDBKeyRange **))off_1E3358340[v10])(v13, &v18);
  }
  v11 = *(_QWORD **)(a1 + 152);
  WebCore::IDBKeyRangeData::IDBKeyRangeData((WebCore::IDBKeyRangeData *)v13, (const WebCore::IDBKey **)v18);
  result = (uint64_t)WebCore::IDBTransaction::requestGetAllObjectStoreRecords((WebCore::IDBRequest **)a4, v11, (unint64_t *)a1, (uint64_t)v13, 0, a2);
  *(_DWORD *)(a4 + 16) = 0;
  if (v17 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v17])(&v21, &v16);
  v17 = -1;
  if (v15 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v15])(&v21, &v14);
  v10 = v20;
  if (v20 != -1)
    return ((uint64_t (*)(_BYTE *, WebCore::IDBKeyRange **))off_1E3358340[v10])(v13, &v18);
  return result;
}

WTF *WebCore::IDBObjectStore::rollbackForVersionChangeAbort(WebCore::IDBObjectStore *this)
{
  WebCore::IDBObjectStore *v1;
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::IDBIndex **v20;
  WebCore::IDBIndex **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  WTF::StringImpl **v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF *v50;
  WebCore::IDBIndex *v51;
  bmalloc::api *v52;
  void *v53;
  uint64_t v54;
  int v55;
  WebCore::IDBIndex *v56;
  uint64_t v57;
  char *v58;
  WTF *v59;
  uint64_t v60;
  WebCore::IDBIndex *v61;
  bmalloc::api *v62;
  void *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  WebCore::IDBIndex *v70;
  bmalloc::api *v71;
  void *v72;
  int v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  WTF *v78;
  WTF *v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  WebCore::IDBIndex *v88;
  bmalloc::api *v89;
  void *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  WTF::StringImpl *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  WebCore::IDBIndex *v119;
  bmalloc::api *v120;
  void *v121;
  uint64_t v122;
  int v123;
  WebCore::IDBIndex *v124;
  bmalloc::api *v125;
  void *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t v133;
  WebCore::IDBIndex *v134;
  bmalloc::api *v135;
  void *v136;
  WTF *result;
  int v138;
  WebCore::IDBIndex **v139;
  WebCore::IDBIndex *v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int v146;
  WebCore::IDBIndex *v147;
  int v148;
  WebCore::IDBIndex **v149;
  WTF *v150;
  uint64_t v151;
  WTF *v152;
  uint64_t v153;
  WTF *v154;
  WTF *v155;
  unsigned __int8 *v156;
  WTF::StringImpl *v157;
  uint64_t *v158;
  char *v159;
  WebCore::IDBObjectStore *v160;
  WTF *v161;
  uint64_t v162;
  WTF *v163;
  uint64_t v164;
  WebCore::IDBIndex *v165;

  v1 = this;
  v2 = (char *)this + 24;
  v3 = (WTF::StringImpl *)*((_QWORD *)v1 + 4);
  if (v3)
    *(_DWORD *)v3 += 2;
  WebCore::IDBObjectStoreInfo::operator=((uint64_t)v2, (uint64_t)v1 + 88);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 19) + 72) + 112);
  if (!v6)
    goto LABEL_21;
  v7 = *((_QWORD *)v1 + 3);
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 72 * v12);
  v14 = *v13;
  if (*v13 != v7)
  {
    v15 = 1;
    while (v14)
    {
      v12 = (v12 + v15) & v8;
      v13 = (uint64_t *)(v6 + 72 * v12);
      v14 = *v13;
      ++v15;
      if (*v13 == v7)
        goto LABEL_10;
    }
    v13 = (uint64_t *)(v6 + 72 * *(unsigned int *)(v6 - 4));
  }
LABEL_10:
  v16 = (uint64_t *)(v6 + 72 * *(unsigned int *)(v6 - 4));
  v17 = v13 == v16 ? 0 : (uint64_t)(v13 + 1);
  if (v13 == v16)
  {
LABEL_21:
    if (v3)
      *(_DWORD *)v3 += 2;
    v23 = (WTF::StringImpl *)*((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = v3;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v4);
      else
        *(_DWORD *)v23 -= 2;
    }
    *((_BYTE *)v1 + 160) = 1;
    goto LABEL_27;
  }
  *((_BYTE *)v1 + 160) = 0;
  v161 = 0;
  v18 = v13[8];
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    v20 = (WebCore::IDBIndex **)(v18 + (v19 << 6));
    if (*(_DWORD *)(v18 - 12))
    {
      v21 = (WebCore::IDBIndex **)v13[8];
      if ((_DWORD)v19)
      {
        v22 = v19 << 6;
        v21 = (WebCore::IDBIndex **)v13[8];
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 8;
          v22 -= 64;
          if (!v22)
          {
            v21 = v20;
            goto LABEL_207;
          }
        }
      }
      goto LABEL_207;
    }
    v21 = (WebCore::IDBIndex **)(v18 + (v19 << 6));
  }
  else
  {
    v21 = 0;
    v19 = 0;
  }
  v20 = (WebCore::IDBIndex **)(v18 + (v19 << 6));
LABEL_207:
  if (v18)
    v139 = (WebCore::IDBIndex **)(v18 + ((unint64_t)*(unsigned int *)(v18 - 4) << 6));
  else
    v139 = 0;
  if (v139 == v21)
    goto LABEL_27;
  do
  {
    v165 = 0;
    v140 = *v21;
    v165 = *v21;
    v141 = *(_QWORD *)(v17 + 56);
    if (v141)
    {
      v142 = *(_DWORD *)(v141 - 8);
      v143 = ((unint64_t)v140 + ~((_QWORD)v140 << 32)) ^ (((unint64_t)v140 + ~((_QWORD)v140 << 32)) >> 22);
      v144 = 9 * ((v143 + ~(v143 << 13)) ^ ((v143 + ~(v143 << 13)) >> 8));
      v145 = (v144 ^ (v144 >> 15)) + ~((v144 ^ (v144 >> 15)) << 27);
      v146 = v142 & ((v145 >> 31) ^ v145);
      v147 = *(WebCore::IDBIndex **)(v141 + ((unint64_t)v146 << 6));
      if (v147 == v140)
        goto LABEL_218;
      v148 = 1;
      while (v147)
      {
        v146 = (v146 + v148) & v142;
        v147 = *(WebCore::IDBIndex **)(v141 + ((unint64_t)v146 << 6));
        ++v148;
        if (v147 == v140)
          goto LABEL_218;
      }
    }
    WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::add((uint64_t *)&v161, (uint64_t *)&v165, (uint64_t)&v163);
LABEL_218:
    v149 = v21 + 8;
    v21 = v20;
    if (v149 != v20)
    {
      v21 = v149;
      while ((unint64_t)*v21 + 1 <= 1)
      {
        v21 += 8;
        if (v21 == v20)
        {
          v21 = v20;
          break;
        }
      }
    }
  }
  while (v21 != v139);
  v150 = v161;
  if (v161)
  {
    if (!*((_DWORD *)v161 - 3))
      goto LABEL_242;
    v151 = *((unsigned int *)v161 - 1);
    v152 = v161;
    if ((_DWORD)v151)
    {
      v153 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)v161 + v153) + 1) <= 1)
      {
        v153 += 8;
        if (8 * v151 == v153)
          goto LABEL_241;
      }
      v152 = (WTF *)((char *)v161 + v153);
    }
    v154 = (WTF *)((char *)v161 + 8 * v151);
    if (v154 != v152)
    {
      v155 = *(WTF **)v152;
LABEL_236:
      v163 = v155;
      WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove((uint64_t *)v1 + 10, (WTF::StringImpl *)&v163);
      while (1)
      {
        v152 = (WTF *)((char *)v152 + 8);
        if (v152 == v154)
          break;
        v155 = *(WTF **)v152;
        if ((unint64_t)(*(_QWORD *)v152 + 1) > 1)
        {
          if (v152 != v154)
            goto LABEL_236;
          break;
        }
      }
      v150 = v161;
    }
LABEL_241:
    if (v150)
LABEL_242:
      WTF::fastFree((WTF *)((char *)v150 - 16), v4);
  }
LABEL_27:
  if (__ldaxr((unsigned __int8 *)v1 + 161))
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stxr(1u, (unsigned __int8 *)v1 + 161))
LABEL_30:
    MEMORY[0x19AEA534C]((char *)v1 + 161);
  v157 = v3;
  v163 = 0;
  v164 = 0;
  v161 = 0;
  v162 = 0;
  v26 = (uint64_t *)((char *)v1 + 176);
  v25 = *((_QWORD *)v1 + 22);
  if (!v25)
  {
    v29 = 0;
    v27 = 0;
LABEL_40:
    v28 = (char *)(v25 + 16 * v27);
    goto LABEL_41;
  }
  v27 = *(unsigned int *)(v25 - 4);
  v28 = (char *)(v25 + 16 * v27);
  if (!*(_DWORD *)(v25 - 12))
  {
    v29 = (char *)(v25 + 16 * v27);
    goto LABEL_40;
  }
  v29 = (char *)*((_QWORD *)v1 + 22);
  if ((_DWORD)v27)
  {
    v30 = 16 * v27;
    v29 = (char *)*((_QWORD *)v1 + 22);
    while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
    {
      v29 += 16;
      v30 -= 16;
      if (!v30)
      {
        v29 = v28;
        break;
      }
    }
  }
LABEL_41:
  v156 = (unsigned __int8 *)v1 + 161;
  if (v25)
    v31 = (char *)(v25 + 16 * *(unsigned int *)(v25 - 4));
  else
    v31 = 0;
  if (v31 == v29)
    goto LABEL_133;
  v32 = (uint64_t *)((char *)v1 + 168);
  v159 = v31;
  v160 = v1;
  v158 = (uint64_t *)((char *)v1 + 168);
  while (2)
  {
    v33 = *((_QWORD *)v1 + 10);
    if (!v33)
      goto LABEL_98;
    v34 = *(_DWORD *)(v33 - 8);
    v35 = *(_QWORD *)v29 + ~(*(_QWORD *)v29 << 32);
    v36 = (v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13);
    v37 = (9 * (v36 ^ (v36 >> 8))) ^ ((9 * (v36 ^ (v36 >> 8))) >> 15);
    v38 = v34 & (((v37 + ~(v37 << 27)) >> 31) ^ (v37 + ~((_DWORD)v37 << 27)));
    v39 = *(_QWORD *)(v33 + ((unint64_t)v38 << 6));
    if (v39 != *(_QWORD *)v29)
    {
      v40 = 1;
      do
      {
        if (!v39)
          goto LABEL_98;
        v38 = (v38 + v40) & v34;
        v39 = *(_QWORD *)(v33 + ((unint64_t)v38 << 6));
        ++v40;
      }
      while (v39 != *(_QWORD *)v29);
    }
    v41 = *(WTF::StringImpl **)(*((_QWORD *)v29 + 1) + 40);
    if (v41)
      *(_DWORD *)v41 += 2;
    v42 = *v32;
    if (*v32
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v32, 8u, 0), (v42 = *v32) != 0))
    {
      v43 = *(_DWORD *)(v42 - 8);
    }
    else
    {
      v43 = 0;
    }
    v44 = *((_DWORD *)v41 + 4);
    if (v44 < 0x100)
      v45 = WTF::StringImpl::hashSlowCase(v41);
    else
      v45 = v44 >> 8;
    v46 = 0;
    v47 = 1;
    while (2)
    {
      v48 = v45 & v43;
      v49 = (WTF::StringImpl **)(v42 + 16 * v48);
      v50 = *v49;
      if (*v49 == (WTF::StringImpl *)-1)
      {
        v46 = (WTF::StringImpl **)(v42 + 16 * v48);
        goto LABEL_65;
      }
      if (!v50)
      {
        v32 = v158;
        if (v46)
        {
          *v46 = 0;
          v46[1] = 0;
          --*(_DWORD *)(*v158 - 16);
          v49 = v46;
        }
        v1 = v160;
        if (v41)
          *(_DWORD *)v41 += 2;
        *v49 = v41;
        v31 = v159;
        v51 = v49[1];
        v49[1] = 0;
        if (v51)
        {
          WebCore::IDBIndex::~IDBIndex(v51, v4);
          bmalloc::api::isoDeallocate(v52, v53);
        }
        v54 = *v158;
        if (*v158)
          v55 = *(_DWORD *)(v54 - 12) + 1;
        else
          v55 = 1;
        *(_DWORD *)(v54 - 12) = v55;
        v64 = *v158;
        if (*v158)
          v65 = *(_DWORD *)(v64 - 12);
        else
          v65 = 0;
        v66 = (*(_DWORD *)(v64 - 16) + v65);
        v67 = *(unsigned int *)(v64 - 4);
        if (v67 > 0x400)
        {
          if (v67 > 2 * v66)
            goto LABEL_90;
        }
        else
        {
          if (3 * v67 > 4 * v66)
            goto LABEL_90;
          if (!(_DWORD)v67)
          {
            v68 = 8;
            goto LABEL_89;
          }
        }
        v68 = (_DWORD)v67 << (6 * *(_DWORD *)(v64 - 12) >= (2 * v67));
LABEL_89:
        v49 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v158, v68, v49);
        goto LABEL_90;
      }
      if ((WTF::equal(v50, v41, v5) & 1) == 0)
      {
LABEL_65:
        v45 = v47 + v48;
        ++v47;
        continue;
      }
      break;
    }
    v57 = v42 + 16 * v48;
    v56 = *(WebCore::IDBIndex **)(v57 + 8);
    v165 = v56;
    *(_QWORD *)(v57 + 8) = 0;
    LODWORD(v57) = HIDWORD(v162);
    if (HIDWORD(v162) == (_DWORD)v162)
    {
      v58 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v161, HIDWORD(v162) + 1, (unint64_t)&v165);
      v57 = HIDWORD(v162);
      v59 = v161;
      v60 = *(_QWORD *)v58;
      *(_QWORD *)v58 = 0;
      *((_QWORD *)v59 + v57) = v60;
    }
    else
    {
      v165 = 0;
      *((_QWORD *)v161 + HIDWORD(v162)) = v56;
    }
    v31 = v159;
    v1 = v160;
    v32 = v158;
    HIDWORD(v162) = v57 + 1;
    v61 = v165;
    v165 = 0;
    if (v61)
    {
      WebCore::IDBIndex::~IDBIndex(v61, v4);
      bmalloc::api::isoDeallocate(v62, v63);
    }
LABEL_90:
    v69 = (WTF::StringImpl *)*((_QWORD *)v29 + 1);
    *((_QWORD *)v29 + 1) = 0;
    v70 = v49[1];
    v49[1] = v69;
    if (v70)
    {
      WebCore::IDBIndex::~IDBIndex(v70, v4);
      bmalloc::api::isoDeallocate(v71, v72);
    }
    v73 = HIDWORD(v164);
    if (HIDWORD(v164) == (_DWORD)v164)
    {
      v74 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v163, HIDWORD(v164) + 1, (unint64_t)v29);
      v73 = HIDWORD(v164);
      v75 = (_QWORD *)((char *)v163 + 8 * HIDWORD(v164));
    }
    else
    {
      v75 = (_QWORD *)((char *)v163 + 8 * HIDWORD(v164));
      v74 = v29;
    }
    *v75 = *(_QWORD *)v74;
    HIDWORD(v164) = v73 + 1;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v4);
      else
        *(_DWORD *)v41 -= 2;
    }
LABEL_98:
    v76 = v29 + 16;
    v29 = v28;
    if (v76 != v28)
    {
      v29 = v76;
      while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
      {
        v29 += 16;
        if (v29 == v28)
        {
          v29 = v28;
          break;
        }
      }
    }
    if (v29 != v31)
      continue;
    break;
  }
  if (HIDWORD(v164))
  {
    v77 = *v26;
    if (*v26)
    {
      v78 = v163;
      v79 = (WTF *)((char *)v163 + 8 * HIDWORD(v164));
LABEL_111:
      v80 = *(_DWORD *)(v77 - 8);
      v81 = *(_QWORD *)v78 + ~(*(_QWORD *)v78 << 32);
      v82 = (v81 ^ (v81 >> 22)) + ~((v81 ^ (v81 >> 22)) << 13);
      v83 = (9 * (v82 ^ (v82 >> 8))) ^ ((9 * (v82 ^ (v82 >> 8))) >> 15);
      v84 = v80 & (((v83 + ~(v83 << 27)) >> 31) ^ ((_DWORD)v83 + ~((_DWORD)v83 << 27)));
      v85 = *(_QWORD *)(v77 + 16 * v84);
      if (v85 != *(_QWORD *)v78)
      {
        v86 = 1;
        while (v85)
        {
          v84 = ((_DWORD)v84 + v86) & v80;
          v85 = *(_QWORD *)(v77 + 16 * v84);
          ++v86;
          if (v85 == *(_QWORD *)v78)
            goto LABEL_117;
        }
        v84 = *(unsigned int *)(v77 - 4);
      }
LABEL_117:
      if (v84 != *(_DWORD *)(v77 - 4))
      {
        v87 = (_QWORD *)(v77 + 16 * v84);
        v88 = (WebCore::IDBIndex *)v87[1];
        *v87 = -1;
        v87[1] = 0;
        if (v88)
        {
          WebCore::IDBIndex::~IDBIndex(v88, v4);
          bmalloc::api::isoDeallocate(v89, v90);
        }
        ++*(_DWORD *)(*v26 - 16);
        v91 = *v26;
        if (*v26)
          v92 = *(_DWORD *)(v91 - 12) - 1;
        else
          v92 = -1;
        *(_DWORD *)(v91 - 12) = v92;
        v93 = *v26;
        if (*v26)
        {
          v94 = 6 * *(_DWORD *)(v93 - 12);
          v95 = *(_DWORD *)(v93 - 4);
          if (v94 < v95 && v95 >= 9)
            WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v26, v95 >> 1, 0);
        }
      }
      while (1)
      {
        v78 = (WTF *)((char *)v78 + 8);
        if (v78 == v79)
          break;
        v77 = *v26;
        if (*v26)
          goto LABEL_111;
      }
    }
  }
LABEL_133:
  v97 = *((_QWORD *)v1 + 21);
  if (v97)
  {
    v98 = *(unsigned int *)(v97 - 4);
    v99 = (_QWORD *)(v97 + 16 * v98);
    v100 = v157;
    if (*(_DWORD *)(v97 - 12))
    {
      v101 = (_QWORD *)*((_QWORD *)v1 + 21);
      if ((_DWORD)v98)
      {
        v102 = 16 * v98;
        v101 = (_QWORD *)*((_QWORD *)v1 + 21);
        while ((unint64_t)(*v101 + 1) <= 1)
        {
          v101 += 2;
          v102 -= 16;
          if (!v102)
          {
            v101 = v99;
            break;
          }
        }
      }
LABEL_140:
      v103 = (_QWORD *)(v97 + 16 * *(unsigned int *)(v97 - 4));
      goto LABEL_145;
    }
    v101 = (_QWORD *)(v97 + 16 * v98);
  }
  else
  {
    v101 = 0;
    v98 = 0;
    v100 = v157;
  }
  v99 = (_QWORD *)(v97 + 16 * v98);
  if (v97)
    goto LABEL_140;
  v103 = 0;
LABEL_145:
  while (v101 != v103)
  {
    WebCore::IDBIndex::rollbackInfoForVersionChangeAbort(v101[1], v4);
    v104 = v101 + 2;
    v101 = v99;
    if (v104 != v99)
    {
      v101 = v104;
      while ((unint64_t)(*v101 + 1) <= 1)
      {
        v101 += 2;
        if (v101 == v99)
        {
          v101 = v99;
          break;
        }
      }
    }
  }
  v105 = (uint64_t *)v161;
  if (!HIDWORD(v162))
    goto LABEL_191;
  v106 = (uint64_t *)((char *)v161 + 8 * HIDWORD(v162));
  while (2)
  {
    WebCore::IDBIndex::rollbackInfoForVersionChangeAbort(*v105, v4);
    v107 = *v105;
    v108 = *(_QWORD *)(*v105 + 24);
    *v105 = 0;
    v109 = *v26;
    if (*v26
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v26, 8u, 0), (v109 = *v26) != 0))
    {
      v110 = *(_DWORD *)(v109 - 8);
    }
    else
    {
      v110 = 0;
    }
    v111 = (v108 + ~(v108 << 32)) ^ ((unint64_t)(v108 + ~(v108 << 32)) >> 22);
    v112 = 9 * ((v111 + ~(v111 << 13)) ^ ((v111 + ~(v111 << 13)) >> 8));
    v113 = (v112 ^ (v112 >> 15)) + ~((v112 ^ (v112 >> 15)) << 27);
    v114 = v110 & ((v113 >> 31) ^ v113);
    v115 = (uint64_t *)(v109 + 16 * v114);
    v116 = *v115;
    if (!*v115)
    {
LABEL_165:
      v119 = (WebCore::IDBIndex *)v115[1];
      *v115 = v108;
      v115[1] = v107;
      if (v119)
      {
        WebCore::IDBIndex::~IDBIndex(v119, v4);
        bmalloc::api::isoDeallocate(v120, v121);
      }
      v122 = *v26;
      if (*v26)
        v123 = *(_DWORD *)(v122 - 12) + 1;
      else
        v123 = 1;
      *(_DWORD *)(v122 - 12) = v123;
      v127 = *v26;
      if (*v26)
        v128 = *(_DWORD *)(v127 - 12);
      else
        v128 = 0;
      v129 = (*(_DWORD *)(v127 - 16) + v128);
      v130 = *(unsigned int *)(v127 - 4);
      if (v130 > 0x400)
      {
        if (v130 > 2 * v129)
          goto LABEL_182;
      }
      else
      {
        if (3 * v130 > 4 * v129)
          goto LABEL_182;
        if (!(_DWORD)v130)
        {
          v131 = 8;
          goto LABEL_181;
        }
      }
      v131 = (_DWORD)v130 << (6 * *(_DWORD *)(v127 - 12) >= (2 * v130));
LABEL_181:
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebCore::IDBIndex>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebCore::IDBIndex>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebCore::IDBIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v26, v131, v115);
      goto LABEL_182;
    }
    v117 = 0;
    v118 = 1;
    while (v116 != v108)
    {
      if (v116 == -1)
        v117 = v115;
      v114 = (v114 + v118) & v110;
      v115 = (uint64_t *)(v109 + 16 * v114);
      v116 = *v115;
      ++v118;
      if (!*v115)
      {
        if (v117)
        {
          *v117 = 0;
          v117[1] = 0;
          --*(_DWORD *)(*v26 - 16);
          v115 = v117;
        }
        goto LABEL_165;
      }
    }
    v124 = (WebCore::IDBIndex *)v115[1];
    v115[1] = v107;
    if (v124)
    {
      WebCore::IDBIndex::~IDBIndex(v124, v4);
      bmalloc::api::isoDeallocate(v125, v126);
    }
LABEL_182:
    if (++v105 != v106)
      continue;
    break;
  }
  v105 = (uint64_t *)v161;
  if (HIDWORD(v162))
  {
    v132 = 0;
    v133 = 8 * HIDWORD(v162);
    do
    {
      v134 = (WebCore::IDBIndex *)v105[v132 / 8];
      v105[v132 / 8] = 0;
      if (v134)
      {
        WebCore::IDBIndex::~IDBIndex(v134, v4);
        bmalloc::api::isoDeallocate(v135, v136);
      }
      v132 += 8;
    }
    while (v133 != v132);
  }
LABEL_191:
  if (v105)
    WTF::fastFree((WTF *)v105, v4);
  result = v163;
  if (v163)
  {
    v163 = 0;
    LODWORD(v164) = 0;
    result = (WTF *)WTF::fastFree(result, v4);
  }
  v138 = __ldxr(v156);
  if (v138 != 1)
  {
    __clrex();
    goto LABEL_199;
  }
  if (__stlxr(0, v156))
LABEL_199:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v156);
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      return (WTF *)WTF::StringImpl::destroy(v100, v4);
    else
      *(_DWORD *)v100 -= 2;
  }
  return result;
}

