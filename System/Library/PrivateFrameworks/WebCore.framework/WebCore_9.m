WTF *WebCore::RenderElement::detachRendererInternal@<X0>(WebCore::RenderObject *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *result;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;

  v5 = *((_QWORD *)a1 + 4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = 0;
      ++*(_DWORD *)(v6 + 16);
      goto LABEL_4;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 1;
LABEL_4:
  v8 = *(unsigned int *)((char *)a1 + 47);
  if (!(v8 | ((unint64_t)*((unsigned __int8 *)a1 + 51) << 32)))
  {
    v9 = 0;
    goto LABEL_55;
  }
  v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)a1 + 51) << 32)) + 8);
  if (!v9)
  {
LABEL_55:
    v10 = 1;
    goto LABEL_7;
  }
  v10 = 0;
  ++*(_DWORD *)(v9 + 16);
LABEL_7:
  v11 = *((unsigned int *)a1 + 10);
  if (!(v11 | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32)))
    goto LABEL_16;
  v12 = *(_QWORD *)((v11 | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32)) + 8);
  if (!v12)
    goto LABEL_16;
  ++*(_DWORD *)(v12 + 16);
  if ((v10 & 1) != 0)
  {
    v13 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 8);
    if (!v13)
    {
      v13 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = v9;
      v33 = *(WTF **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = v13;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
        {
          WTF::fastFree(v33, a1);
          v13 = *(_QWORD *)(v9 + 8);
          if (!v13)
            goto LABEL_11;
        }
        else
        {
          --*(_DWORD *)v33;
        }
      }
    }
    ++*(_DWORD *)v13;
  }
LABEL_11:
  v14 = (WTF *)(*(unsigned int *)(v12 + 47) | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32));
  *(_DWORD *)(v12 + 47) = v13;
  *(_BYTE *)(v12 + 51) = BYTE4(v13);
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, a1);
    else
      --*(_DWORD *)v14;
  }
  v15 = *(_DWORD *)(v12 + 16);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1943F6DA0);
  }
  *(_DWORD *)(v12 + 16) = v15 - 1;
LABEL_16:
  if (!v9)
    goto LABEL_17;
  v29 = *((unsigned int *)a1 + 10);
  if (!(v29 | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32))
    || (v30 = *(_QWORD *)((v29 | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32)) + 8)) == 0)
  {
    v31 = 0;
    goto LABEL_51;
  }
  v31 = *(_QWORD *)(v30 + 8);
  if (v31)
    goto LABEL_75;
  v31 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)(v31 + 8) = v30;
  v36 = *(WTF **)(v30 + 8);
  *(_QWORD *)(v30 + 8) = v31;
  if (!v36)
    goto LABEL_75;
  if (*(_DWORD *)v36 != 1)
  {
    --*(_DWORD *)v36;
LABEL_75:
    ++*(_DWORD *)v31;
    goto LABEL_51;
  }
  WTF::fastFree(v36, a1);
  v31 = *(_QWORD *)(v30 + 8);
  if (v31)
    goto LABEL_75;
LABEL_51:
  v32 = (WTF *)(*(unsigned int *)(v9 + 40) | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32));
  *(_DWORD *)(v9 + 40) = v31;
  *(_BYTE *)(v9 + 44) = BYTE4(v31);
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::fastFree(v32, a1);
    else
      --*(_DWORD *)v32;
  }
LABEL_17:
  v16 = *(unsigned int *)(v6 + 64);
  if (!(v16 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32))
    || *(WebCore::RenderObject **)((v16 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32)) + 8) != a1)
  {
    goto LABEL_24;
  }
  if ((v10 & 1) != 0)
  {
    v17 = 0;
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(v9 + 8);
  if (v17)
    goto LABEL_71;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v9;
  v34 = *(WTF **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = v17;
  if (!v34)
    goto LABEL_71;
  if (*(_DWORD *)v34 != 1)
  {
    --*(_DWORD *)v34;
LABEL_71:
    ++*(_DWORD *)v17;
    goto LABEL_21;
  }
  WTF::fastFree(v34, a1);
  v17 = *(_QWORD *)(v9 + 8);
  if (v17)
    goto LABEL_71;
LABEL_21:
  v18 = (WTF *)(*(unsigned int *)(v6 + 64) | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32));
  *(_DWORD *)(v6 + 64) = v17;
  *(_BYTE *)(v6 + 68) = BYTE4(v17);
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, a1);
    else
      --*(_DWORD *)v18;
  }
LABEL_24:
  v19 = *(unsigned int *)(v6 + 71);
  if (!(v19 | ((unint64_t)*(unsigned __int8 *)(v6 + 75) << 32))
    || *(WebCore::RenderObject **)((v19 | ((unint64_t)*(unsigned __int8 *)(v6 + 75) << 32)) + 8) != a1)
  {
    goto LABEL_32;
  }
  v20 = *((unsigned int *)a1 + 10);
  if (!(v20 | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32))
    || (v21 = *(_QWORD *)((v20 | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32)) + 8)) == 0)
  {
    v22 = 0;
    goto LABEL_29;
  }
  v22 = *(_QWORD *)(v21 + 8);
  if (v22)
    goto LABEL_73;
  v22 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = v21;
  v35 = *(WTF **)(v21 + 8);
  *(_QWORD *)(v21 + 8) = v22;
  if (!v35)
    goto LABEL_73;
  if (*(_DWORD *)v35 != 1)
  {
    --*(_DWORD *)v35;
LABEL_73:
    ++*(_DWORD *)v22;
    goto LABEL_29;
  }
  WTF::fastFree(v35, a1);
  v22 = *(_QWORD *)(v21 + 8);
  if (v22)
    goto LABEL_73;
LABEL_29:
  v23 = (WTF *)(*(unsigned int *)(v6 + 71) | ((unint64_t)*(unsigned __int8 *)(v6 + 75) << 32));
  *(_DWORD *)(v6 + 71) = v22;
  *(_BYTE *)(v6 + 75) = BYTE4(v22);
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, a1);
    else
      --*(_DWORD *)v23;
  }
LABEL_32:
  v24 = (WTF *)(*((unsigned int *)a1 + 10) | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32));
  *((_DWORD *)a1 + 10) = 0;
  *((_BYTE *)a1 + 44) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::fastFree(v24, a1);
    else
      --*(_DWORD *)v24;
  }
  v25 = (WTF *)(*(unsigned int *)((char *)a1 + 47) | ((unint64_t)*((unsigned __int8 *)a1 + 51) << 32));
  *(_DWORD *)((char *)a1 + 47) = 0;
  *((_BYTE *)a1 + 51) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, a1);
    else
      --*(_DWORD *)v25;
  }
  result = (WTF *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a1);
    else
      --*(_DWORD *)result;
  }
  *a2 = a1;
  if ((v10 & 1) == 0)
  {
    v27 = *(_DWORD *)(v9 + 16);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1943F6D60);
    }
    *(_DWORD *)(v9 + 16) = v27 - 1;
  }
  if ((v7 & 1) == 0)
  {
    v28 = *(_DWORD *)(v6 + 16);
    if (!v28)
    {
      __break(0xC471u);
      JUMPOUT(0x1943F6D80);
    }
    *(_DWORD *)(v6 + 16) = v28 - 1;
  }
  return result;
}

uint64_t WebCore::RenderText::clippedOverflowRect(WebCore::RenderObject *a1, WebCore::RenderObject *a2)
{
  WebCore::RenderObject *v3;
  WebCore::RenderObject *v4;
  WebCore::RenderObject *v5;
  WebCore::RenderObject *v6;
  uint64_t v7;
  WebCore::RenderObject *v9;
  uint64_t v10;
  uint64_t (*v12)(void);

  v3 = a1;
  v4 = WebCore::RenderObject::containingBlock(a1);
  while ((*((_BYTE *)v3 + 45) & 0x10) == 0)
    v3 = *(WebCore::RenderObject **)(*((_QWORD *)v3 + 4) + 8);
  while ((*((_BYTE *)v3 + 21) & 0x80) == 0)
  {
    do
      v3 = *(WebCore::RenderObject **)(*((_QWORD *)v3 + 4) + 8);
    while ((*((_BYTE *)v3 + 45) & 0x10) == 0);
  }
  v5 = *(WebCore::RenderObject **)(*((_QWORD *)v3 + 18) + 32);
  if (v5 != v4)
  {
    if (v4)
    {
      v6 = v4;
      while (1)
      {
        v7 = *((_QWORD *)v6 + 4);
        if (!v7)
          break;
        v6 = *(WebCore::RenderObject **)(v7 + 8);
        if (v6 == v5 || v6 == 0)
        {
          if (!v6)
            break;
          goto LABEL_16;
        }
      }
    }
    v4 = *(WebCore::RenderObject **)(*((_QWORD *)v3 + 18) + 32);
  }
LABEL_16:
  if (!a2 || v4 == a2)
  {
LABEL_27:
    v12 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 440);
  }
  else
  {
    if (v4)
    {
      v9 = v4;
      while (1)
      {
        v10 = *((_QWORD *)v9 + 4);
        if (!v10)
          break;
        v9 = *(WebCore::RenderObject **)(v10 + 8);
        if (v9 == a2 || v9 == 0)
        {
          if (!v9)
            break;
          goto LABEL_27;
        }
      }
    }
    v12 = *(uint64_t (**)(void))(*(_QWORD *)a2 + 440);
  }
  return v12();
}

uint64_t *WebCore::RenderBlockFlow::deleteLines(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  WebCore::Element *v4;
  char v5;

  v1 = (uint64_t)this;
  v2 = *((unsigned int *)this + 60);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      goto LABEL_5;
    this = (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v2])(&v5, this + 29);
  }
  *(_DWORD *)(v1 + 240) = 0;
LABEL_5:
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    this = (uint64_t *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40)
                                                                                         + 8));
    if (this)
    {
      v3 = this;
      v4 = (WebCore::Element *)WebCore::RenderElement::element((WebCore::RenderElement *)v1);
      return WebCore::AXObjectCache::deferRecomputeIsIgnored(v3, v4);
    }
  }
  return this;
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)a1;
    v7 = 48 * v4;
    do
    {
      v8 = *(unsigned int *)(v6 + 40);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v8])(&v9, v6);
      *(_DWORD *)(v6 + 40) = -1;
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::FormDataElement,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

WTF *WTF::VectorBuffer<WebCore::FormDataElement,0ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  WTF *result;
  uint64_t v5;

  result = *(WTF **)a1;
  if (result)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WebCore::commonVMSlow(WebCore *this)
{
  uint64_t v3;

  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  WebCore::g_commonVMOrNull = v3;
  if (__ldaxr((unsigned int *)(v3 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v3 + 1096)))
  {
    goto LABEL_5;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v3 + 192));
LABEL_5:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v3 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v3 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v3, 0);
  return v3;
}

uint64_t PAL::VideoToolboxLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v3 = (char)this;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  return qword_1ECE7EE30;
}

uint64_t WebCore::mainThreadNormalWorld(WebCore *this)
{
  uint64_t result;
  uint64_t v2;

    return WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  v2 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
    v2 = WebCore::commonVMSlow(0);
  result = *(_QWORD *)(*(_QWORD *)(v2 + 41456) + 16);
  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = result;
  return result;
}

uint64_t WebCore::JSHistory::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSHistory::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t *WebCore::JSHTMLCanvasElementOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *result;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  v5 = v3 + 8;
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    result = JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), v3);
    v4 = *(_DWORD *)(v3 + 24) - 2;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  return result;
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  v2 = WebCore::CORSEnabledSchemes(void)::schemes;
  if (!WebCore::CORSEnabledSchemes(void)::schemes)
  {
    result = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::begin();
LABEL_3:
    v4 = 0;
    goto LABEL_4;
  }
  v8 = *(unsigned int *)(WebCore::CORSEnabledSchemes(void)::schemes - 12);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v1 + 2) = v8;
    *v1 = v9;
    v2 = WebCore::CORSEnabledSchemes(void)::schemes;
    result = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::begin();
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    result = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::begin();
  }
  v4 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
LABEL_4:
  if (v4 != result)
  {
    v5 = *v1;
    v6 = *((_DWORD *)v1 + 3);
    do
    {
      v7 = (_DWORD *)*result;
      if (*result)
        *v7 += 2;
      *(_QWORD *)(v5 + 8 * v6) = v7;
      while (++result != v3)
      {
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_13;
      }
      result = v3;
LABEL_13:
      ++v6;
    }
    while (result != v4);
    *((_DWORD *)v1 + 3) = v6;
  }
  return result;
}

_QWORD *WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::begin()
{
  _QWORD *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (_QWORD *)WebCore::CORSEnabledSchemes(void)::schemes;
  if (!WebCore::CORSEnabledSchemes(void)::schemes)
    return 0;
  v2 = *(unsigned int *)(WebCore::CORSEnabledSchemes(void)::schemes - 4);
  v3 = WebCore::CORSEnabledSchemes(void)::schemes + 8 * v2;
  if (!*(_DWORD *)(WebCore::CORSEnabledSchemes(void)::schemes - 12))
    return (_QWORD *)(WebCore::CORSEnabledSchemes(void)::schemes + 8 * v2);
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return (_QWORD *)v3;
    }
  }
  return result;
}

uint64_t WebCore::Document::initDNSPrefetch(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  WebCore::Document *v10;
  char v11;
  char *v12;

  *((_BYTE *)this + 3398) = 0;
  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 672) & 0x10000000000000) != 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
    v4 = *(unsigned int *)(v3 + 32);
    if ((_DWORD)v4 == -1)
    {
      v10 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::Document::parentDocument(v10);
    }
    v12 = &v11;
    v5 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v4])(&v12, v3 + 8);
    v6 = MEMORY[0x19AEA53F4](*v5, "http", 4);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)this + 3397) = v6;
  result = WebCore::Document::parentDocument(this);
  if (result)
  {
    v8 = result;
    *(_DWORD *)(result + 24) += 2;
    v9 = *(unsigned __int8 *)(result + 3397);
    if (v9 == 2)
    {
      result = WebCore::Document::initDNSPrefetch((WebCore::Document *)result);
      v9 = *(unsigned __int8 *)(v8 + 3397);
    }
    if (v9 != 1)
      *((_BYTE *)this + 3397) = 0;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Document::parentDocument(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 66);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 56)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && !*(_BYTE *)(v4 + 144))
  {
    return *(_QWORD *)(v4 + 296);
  }
  else
  {
    return 0;
  }
}

WebCore::MutationObserver *WebCore::JSMutationObserver::destroy(WebCore::JSMutationObserver *this, JSC::JSCell *a2)
{
  WebCore::MutationObserver *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::MutationObserver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::MutationObserver::~MutationObserver(result, a2);
      return (WebCore::MutationObserver *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::MutationObserver::~MutationObserver(WebCore::MutationObserver *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v3 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v14 = i;
              v15 = v3;
              v13 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v13;
              i = v14;
              v3 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v4, a2);
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5)
    WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct(*((_DWORD **)this + 2), (_DWORD **)(*((_QWORD *)this + 2) + 8 * v5));
  v6 = (WTF *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
}

void WebCore::JSMutationCallback::~JSMutationCallback(WebCore::JSMutationCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSIntersectionObserverCallback::~JSIntersectionObserverCallback(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::JSIntersectionObserverCallback::~JSIntersectionObserverCallback(WebCore::JSIntersectionObserverCallback *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v3 = *((_QWORD *)this + 1);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = v4 - 96, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 88))(v4 - 96)))
  {
    v9 = *((_QWORD *)this + 3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E3226900;
    v10[1] = v9;
    v12 = v10;
    v13 = 1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 336))(v5, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  else
  {
    v6 = (WTF *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 2);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v6 + 2) = 0;
      }
      JSC::WeakHandleOwner::~WeakHandleOwner((WTF *)((char *)v6 + 8));
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
        *(_QWORD *)v6 = 0;
      }
      WTF::fastFree(v6, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSIntersectionObserverCallback::~JSIntersectionObserverCallback(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::JSPerformanceObserverCallback::~JSPerformanceObserverCallback(WebCore::JSPerformanceObserverCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSPerformanceObserverCallback::~JSPerformanceObserverCallback(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::JSCallbackData *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v3 = *((_QWORD *)this + 1);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = v4 - 96, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 88))(v4 - 96)))
  {
    v9 = *((_QWORD *)this + 3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E3226900;
    v10[1] = v9;
    v12 = v10;
    v13 = 1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 336))(v5, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  else
  {
    v6 = (WebCore::JSCallbackData *)*((_QWORD *)this + 3);
    if (v6)
    {
      WebCore::JSCallbackData::~JSCallbackData(v6);
      WTF::fastFree(v7, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

uint64_t *WebCore::DocumentLoader::willSendRequest(uint64_t a1, WebCore::ResourceRequest *this, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  WebCore::Frame *v9;
  uint64_t v10;
  char v11;
  WebCore::FrameLoader *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  const WebCore::Page *v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Frame *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  const WTF::StringImpl *v56;
  int v57;
  WebCore::ContentFilter *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  uint64_t v71;
  _DWORD *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _BOOL4 v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unsigned int v99;
  char v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  const WTF::URL *v120;
  WTF::StringImpl *v121;
  NSObject *v122;
  const WTF::URL *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _BOOL4 v128;
  const char *v129;
  NSObject *v130;
  const WTF::String *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  _BOOL4 v153;
  uint64_t v154;
  WebCore::FrameLoader *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  _BYTE v167[12];
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  _BOOL4 v173;
  char v174;
  _BYTE buf[24];
  __int128 v176;
  WTF *v177;
  WTF *v178;
  uint64_t v179;
  int v180;
  int v181;
  int v182;
  char v183;
  __int16 v184;
  _DWORD *v185;
  _DWORD *v186;
  __int16 v187;
  _DWORD *v188;
  _DWORD *v189;
  char v190;
  __int128 v191;
  __int128 v192;
  _BYTE v193[44];
  char v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(WebCore::Frame **)(v8 + 8);
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 35);
      if (!v10 || !*(_QWORD *)(v10 + 96))
      {
        v67 = qword_1ECE7C608;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
        {
          WebCore::Frame::pageID(v9);
          if (!v100)
            v68 = 0;
          v69 = *((_QWORD *)v9 + 4);
          v70 = *(_QWORD *)(*((_QWORD *)v9 + 16) + 8) == (_QWORD)v9;
          goto LABEL_102;
        }
      }
LABEL_5:
      v11 = *(_BYTE *)(a3 + 138);
      goto LABEL_6;
    }
    v67 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
LABEL_101:
    v68 = 0;
    v69 = 0;
    v70 = 0;
LABEL_102:
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v68;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v176 = v69;
    WORD4(v176) = 1024;
    *(_DWORD *)((char *)&v176 + 10) = v70;
    _os_log_impl(&dword_1940B8000, v67, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::willSendRequest: With no provisional document loader", buf, 0x26u);
    v71 = *(_QWORD *)(a1 + 16);
    v11 = *(_BYTE *)(a3 + 138);
    if (!v71)
    {
LABEL_103:
      v12 = 0;
      goto LABEL_8;
    }
    v9 = *(WebCore::Frame **)(v71 + 8);
LABEL_6:
    if (v9)
    {
      v12 = (WebCore::FrameLoader *)*((_QWORD *)v9 + 35);
      goto LABEL_8;
    }
    goto LABEL_103;
  }
  v67 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    goto LABEL_101;
  v12 = 0;
  v11 = *(_BYTE *)(a3 + 138);
LABEL_8:
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  if ((WebCore::FrameLoader::checkIfFormActionAllowedByCSP(v12, this, (v11 & 1) == 0, (const WTF::URL *)a3) & 1) == 0)
  {
    v75 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
LABEL_126:
      v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v81 + 568))(buf, v81, this);
      BYTE4(v179) = 3;
LABEL_127:
      WebCore::DocumentLoader::cancelMainResourceLoad(a1, (uint64_t)buf, 0);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v82);
      goto LABEL_74;
    }
    v76 = *(_QWORD *)(a1 + 16);
    if (v76)
    {
      v77 = *(_QWORD *)(v76 + 8);
      if (v77)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v76 + 8));
        if (!v79)
          v78 = 0;
        v76 = *(_QWORD *)(v77 + 32);
        v80 = *(_QWORD *)(*(_QWORD *)(v77 + 128) + 8) == v77;
        goto LABEL_125;
      }
      v78 = 0;
      v76 = 0;
    }
    else
    {
      v78 = 0;
    }
    v80 = 0;
LABEL_125:
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v78;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v176 = v76;
    WORD4(v176) = 1024;
    *(_DWORD *)((char *)&v176 + 10) = v80;
    _os_log_impl(&dword_1940B8000, v75, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::willSendRequest: canceling - form action not allowed by CSP", buf, 0x26u);
    goto LABEL_126;
  }
  buf[0] = 0;
  v194 = 0;
  if (!*(_BYTE *)(a1 + 1856))
    goto LABEL_53;
  v16 = *(_DWORD **)(a1 + 1632);
  if (v16)
    *v16 += 2;
  *(_QWORD *)buf = v16;
  *(_OWORD *)&buf[8] = *(_OWORD *)(a1 + 1640);
  v176 = *(_OWORD *)(a1 + 1656);
  v17 = *(unsigned int **)(a1 + 1672);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v177 = (WTF *)v17;
  v19 = *(unsigned int **)(a1 + 1680);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = *(unsigned int *)(a1 + 1700);
  v179 = 0;
  v180 = 0;
  v178 = (WTF *)v19;
  v181 = v21;
  if ((_DWORD)v21)
  {
    if (v21 >> 28)
    {
      __break(0xC471u);
      goto LABEL_309;
    }
    v159 = WTF::fastMalloc((WTF *)(16 * v21));
    v180 = v21;
    v179 = v159;
    v160 = *(unsigned int *)(a1 + 1700);
    if ((_DWORD)v160)
    {
      v161 = *(_QWORD *)(a1 + 1688);
      v162 = v161 + 16 * v160;
      do
      {
        v163 = *(_DWORD **)v161;
        if (*(_QWORD *)v161)
          *v163 += 2;
        *(_QWORD *)v159 = v163;
        *(_BYTE *)(v159 + 8) = *(_BYTE *)(v161 + 8);
        v161 += 16;
        v159 += 16;
      }
      while (v161 != v162);
    }
  }
  v182 = *(_DWORD *)(a1 + 1704);
  v183 = *(_BYTE *)(a1 + 1708);
  v184 = *(_WORD *)(a1 + 1712);
  v22 = *(_DWORD **)(a1 + 1720);
  if (v22)
    *v22 += 2;
  v185 = v22;
  v23 = *(_DWORD **)(a1 + 1728);
  if (v23)
    *v23 += 2;
  v186 = v23;
  v187 = *(_WORD *)(a1 + 1736);
  v24 = *(_DWORD **)(a1 + 1744);
  if (v24)
    *v24 += 2;
  v188 = v24;
  v25 = *(_DWORD **)(a1 + 1752);
  if (v25)
    *v25 += 2;
  v189 = v25;
  v190 = *(_BYTE *)(a1 + 1760);
  *(_OWORD *)&v193[16] = *(_OWORD *)(a1 + 1816);
  *(_OWORD *)v193 = *(_OWORD *)(a1 + 1800);
  v192 = *(_OWORD *)(a1 + 1784);
  *(_OWORD *)&v193[28] = *(_OWORD *)(a1 + 1828);
  v191 = *(_OWORD *)(a1 + 1768);
  v194 = 1;
  if (*(_OWORD *)&v193[8] == 0)
  {
LABEL_44:
    WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)&v179, v13);
    v35 = v178;
    v178 = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr((unsigned int *)v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, (unsigned int *)v35));
      if (!v37)
      {
        atomic_store(1u, (unsigned int *)v35);
        v143 = (WTF::StringImpl *)*((_QWORD *)v35 + 6);
        *((_QWORD *)v35 + 6) = 0;
        if (v143)
        {
          if (*(_DWORD *)v143 == 2)
            WTF::StringImpl::destroy(v143, v34);
          else
            *(_DWORD *)v143 -= 2;
        }
        v144 = (WTF::StringImpl *)*((_QWORD *)v35 + 5);
        *((_QWORD *)v35 + 5) = 0;
        if (v144)
        {
          if (*(_DWORD *)v144 == 2)
            WTF::StringImpl::destroy(v144, v34);
          else
            *(_DWORD *)v144 -= 2;
        }
        v145 = *((unsigned int *)v35 + 8);
        if ((_DWORD)v145 != -1)
          ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v145])(v167, (char *)v35 + 8);
        *((_DWORD *)v35 + 8) = -1;
        WTF::fastFree(v35, v34);
      }
    }
    v38 = v177;
    v177 = 0;
    if (v38)
    {
      do
      {
        v39 = __ldaxr((unsigned int *)v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)v38));
      if (!v40)
      {
        atomic_store(1u, (unsigned int *)v38);
        v146 = (WTF::StringImpl *)*((_QWORD *)v38 + 6);
        *((_QWORD *)v38 + 6) = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 2)
            WTF::StringImpl::destroy(v146, v34);
          else
            *(_DWORD *)v146 -= 2;
        }
        v147 = (WTF::StringImpl *)*((_QWORD *)v38 + 5);
        *((_QWORD *)v38 + 5) = 0;
        if (v147)
        {
          if (*(_DWORD *)v147 == 2)
            WTF::StringImpl::destroy(v147, v34);
          else
            *(_DWORD *)v147 -= 2;
        }
        v148 = *((unsigned int *)v38 + 8);
        if ((_DWORD)v148 != -1)
          ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v148])(v167, (char *)v38 + 8);
        *((_DWORD *)v38 + 8) = -1;
        WTF::fastFree(v38, v34);
      }
    }
    v41 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v34);
      else
        *(_DWORD *)v41 -= 2;
    }
LABEL_53:
    if ((v11 & 1) != 0)
    {
LABEL_54:
      v42 = *(_QWORD *)(a1 + 16);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 8);
        v44 = v43 + 48;
      }
      else
      {
        v43 = 0;
        v44 = 48;
      }
      v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v44 + 8) + 128) + 8);
      v46 = *(unsigned __int8 *)(v45 + 144);
      if (*(_QWORD *)(*(_QWORD *)(v43 + 128) + 8) == v43)
      {
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        WebCore::ResourceRequestBase::setFirstPartyForCookies((WTF **)this, this, v14);
        v42 = *(_QWORD *)(a1 + 16);
      }
      WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)this, *(WebCore::ResourceRequest **)(*(_QWORD *)(v42 + 8) + 296), 0, v15);
      if ((v11 & 1) != 0)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
        v48 = *(_QWORD *)(*(_QWORD *)(v47 + 280) + 16);
        v49 = *(_QWORD *)(v47 + 296) + 736;
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        (*(void (**)(uint64_t, uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v48 + 224))(v48, v49, this);
      }
      v50 = *((_BYTE *)this + 184);
      if ((v50 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        v50 = *((_BYTE *)this + 184) | 1;
        *((_BYTE *)this + 184) = v50;
      }
      if (!*((_BYTE *)this + 144))
      {
        if ((v50 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        if ((MEMORY[0x19AEA53F4](*((_QWORD *)this + 11), "POST", 4) & 1) != 0)
          goto LABEL_163;
        WebCore::ResourceResponse::platformLazyInit(a3, 1);
        if (*(__int16 *)(a3 + 136) >= 301)
        {
          v99 = *(unsigned __int16 *)(a3 + 136);
          if (v99 < 0x130 || v99 == 307)
          {
            if ((*(_BYTE *)(a1 + 344) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 160));
              *(_BYTE *)(a1 + 344) |= 1u;
            }
            if (MEMORY[0x19AEA53F4](*(_QWORD *)(a1 + 248), "POST", 4))
LABEL_163:
              WebCore::ResourceRequestBase::setCachePolicy(this, 1);
          }
        }
      }
      if ((*(_BYTE *)(a1 + 1056) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 872));
        *(_BYTE *)(a1 + 1056) |= 1u;
      }
      if (MEMORY[0x19AEA53F4](*(_QWORD *)(a1 + 960), "POST", 4))
      {
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        if (MEMORY[0x19AEA53F4](*((_QWORD *)this + 11), "GET", 3))
          WebCore::ResourceRequestBase::clearHTTPOrigin(this, v98);
      }
      if (v46)
        goto LABEL_80;
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      if (v51 == v45)
        goto LABEL_80;
      v52 = *(_QWORD *)(v51 + 56);
      if (!v52)
        goto LABEL_74;
      v55 = *(_QWORD *)(v52 + 8);
      if (!v55 || *(_BYTE *)(v55 + 144))
        goto LABEL_74;
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      if (!WebCore::MixedContentChecker::shouldBlockRequestForDisplayableContent(v55, this, 0, 0))
      {
LABEL_80:
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        WTF::URL::host(this);
        if (v57)
        {
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          if ((WTF::URL::protocolIs() & 1) != 0
            || (WTF::URL::protocolIs() & 1) != 0
            || (WTF::URL::protocolIsJavaScript(this) & 1) != 0
            || WTF::URL::protocolIs())
          {
            if ((*((_BYTE *)this + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest(this);
              *((_BYTE *)this + 184) |= 1u;
            }
            v72 = *(_DWORD **)this;
            if (*(_QWORD *)this)
              *v72 += 2;
            *(_QWORD *)buf = v72;
            *(_OWORD *)&buf[8] = *(_OWORD *)((char *)this + 8);
            v176 = *(_OWORD *)((char *)this + 24);
            WTF::URL::removeHostAndPort((WTF::URL *)buf);
            WebCore::ResourceRequestBase::setURL(this, (const WTF::URL *)buf, 0);
            v74 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v74)
            {
              if (*(_DWORD *)v74 == 2)
                WTF::StringImpl::destroy(v74, v73);
              else
                *(_DWORD *)v74 -= 2;
            }
          }
        }
        v58 = *(WebCore::ContentFilter **)(a1 + 2888);
        if (!v58
          || WebCore::ContentFilter::continueAfterWillSendRequest(v58, this, (const WebCore::ResourceResponse *)a3))
        {
          WebCore::DocumentLoader::setRequest((WebCore::DocumentLoader *)a1, this, v56);
          if ((v11 & 1) == 0)
          {
            ++*(_DWORD *)(a1 + 24);
            *(_QWORD *)buf = a1;
            *(_QWORD *)&buf[8] = a1;
            v59 = *(_QWORD *)(a1 + 16);
            if (v59)
              v60 = *(_QWORD *)(v59 + 8);
            else
              v60 = 0;
            v61 = (unsigned int *)(v60 + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 + 1, v61));
            v63 = *a4;
            *a4 = 0;
            *(_BYTE *)(a1 + 3550) = 1;
            v64 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 24);
            if (!WebCore::isBackForwardLoadType(v64[26])
              || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 184) + 32))
            {
              v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
              *v65 = &off_1E33F3838;
              v65[1] = *(_QWORD *)buf;
              v65[2] = *(_QWORD *)&buf[8];
              v65[3] = v60;
              *(_OWORD *)&buf[8] = 0uLL;
              *(_QWORD *)&v176 = 0;
              v65[4] = v63;
              *(_QWORD *)v167 = v65;
              WebCore::PolicyChecker::checkNavigationPolicy((WebCore::NavigationAction *)v64, (uint64_t)this, a3, v167);
              v66 = *(_QWORD *)v167;
              *(_QWORD *)v167 = 0;
              if (v66)
                (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
              return WebCore::DocumentLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::~$_0(buf);
            }
            __break(0xC471u);
LABEL_309:
            JUMPOUT(0x1943F8DB0);
          }
        }
LABEL_74:
        v53 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v53 + 16))(v53, this);
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      }
      goto LABEL_126;
    }
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    if ((WTF::URL::protocolIs() & 1) == 0)
    {
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      if (!WTF::URL::protocolIs())
      {
        WebCore::ResourceResponse::platformLazyInit(a3, 1);
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)a3, (uint64_t *)v167);
        v119 = *(_QWORD *)v167;
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        {
          WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
        }
        if ((WebCore::SecurityOrigin::canDisplay(v119, this, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) != 0)
        {
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          if ((WTF::portAllowed() & 1) != 0)
          {
            if ((*((_BYTE *)this + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest(this);
              *((_BYTE *)this + 184) |= 1u;
            }
            if (!WebCore::isIPAddressDisallowed(this, v120))
            {
              WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v167, v121);
              goto LABEL_54;
            }
            v122 = qword_1ECE7C608;
            if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
              goto LABEL_263;
            v124 = *(_QWORD *)(a1 + 16);
            if (v124)
            {
              v125 = *(_QWORD *)(v124 + 8);
              if (v125)
              {
                WebCore::Frame::pageID(*(WebCore::Frame **)(v124 + 8));
                if (!v127)
                  v126 = 0;
                v124 = *(_QWORD *)(v125 + 32);
                v128 = *(_QWORD *)(*(_QWORD *)(v125 + 128) + 8) == v125;
                goto LABEL_213;
              }
              v126 = 0;
              v124 = 0;
            }
            else
            {
              v126 = 0;
            }
            v128 = 0;
LABEL_213:
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v126;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&v176 = v124;
            WORD4(v176) = 1024;
            *(_DWORD *)((char *)&v176 + 10) = v128;
            v129 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::willSendRequest: canceling - redirec"
                   "ting to a URL with a disallowed IP address";
LABEL_262:
            _os_log_impl(&dword_1940B8000, v122, OS_LOG_TYPE_DEFAULT, v129, buf, 0x26u);
            goto LABEL_263;
          }
          v122 = qword_1ECE7C608;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
          {
LABEL_263:
            v154 = *(_QWORD *)(a1 + 16);
            if (!v154)
              goto LABEL_272;
            v155 = *(WebCore::FrameLoader **)(v154 + 8);
            if (!v155)
              goto LABEL_272;
            if ((*((_BYTE *)this + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest(this);
              *((_BYTE *)this + 184) |= 1u;
            }
            WebCore::FrameLoader::reportBlockedLoadFailed(v155, this, v123);
            v156 = *(_QWORD *)(a1 + 16);
            if (v156 && (v157 = *(_QWORD *)(v156 + 8)) != 0)
              v158 = *(_QWORD *)(v157 + 280);
            else
LABEL_272:
              v158 = 0;
            WebCore::FrameLoader::blockedError(v158, (uint64_t)buf);
LABEL_234:
            WebCore::DocumentLoader::cancelMainResourceLoad(a1, (uint64_t)buf, 0);
            WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v140);
            v141 = *a4;
            *a4 = 0;
            (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v141 + 16))(v141, this);
            (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
            return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v167, v142);
          }
          v149 = *(_QWORD *)(a1 + 16);
          if (v149)
          {
            v150 = *(_QWORD *)(v149 + 8);
            if (v150)
            {
              WebCore::Frame::pageID(*(WebCore::Frame **)(v149 + 8));
              if (!v152)
                v151 = 0;
              v149 = *(_QWORD *)(v150 + 32);
              v153 = *(_QWORD *)(*(_QWORD *)(v150 + 128) + 8) == v150;
              goto LABEL_261;
            }
            v151 = 0;
            v149 = 0;
          }
          else
          {
            v151 = 0;
          }
          v153 = 0;
LABEL_261:
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v151;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&v176 = v149;
          WORD4(v176) = 1024;
          *(_DWORD *)((char *)&v176 + 10) = v153;
          v129 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::willSendRequest: canceling - redirecti"
                 "ng to a URL with a blocked port";
          goto LABEL_262;
        }
        v130 = qword_1ECE7C608;
        if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
        {
LABEL_229:
          v137 = *(_QWORD *)(a1 + 16);
          if (v137)
            v138 = *(_QWORD *)(v137 + 8);
          else
            v138 = 0;
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          WebCore::FrameLoader::reportLocalLoadFailed(v138, this, v131);
          v139 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v139 + 568))(buf, v139, this);
          BYTE4(v179) = 3;
          goto LABEL_234;
        }
        v132 = *(_QWORD *)(a1 + 16);
        if (v132)
        {
          v133 = *(_QWORD *)(v132 + 8);
          if (v133)
          {
            WebCore::Frame::pageID(*(WebCore::Frame **)(v132 + 8));
            if (!v135)
              v134 = 0;
            v132 = *(_QWORD *)(v133 + 32);
            v136 = *(_QWORD *)(*(_QWORD *)(v133 + 128) + 8) == v133;
            goto LABEL_228;
          }
          v134 = 0;
          v132 = 0;
        }
        else
        {
          v134 = 0;
        }
        v136 = 0;
LABEL_228:
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v134;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&v176 = v132;
        WORD4(v176) = 1024;
        *(_DWORD *)((char *)&v176 + 10) = v136;
        _os_log_impl(&dword_1940B8000, v130, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::willSendRequest: canceling - redirecting URL not allowed to display content from target", buf, 0x26u);
        goto LABEL_229;
      }
    }
    v83 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
LABEL_139:
      WebCore::DocumentLoader::loadErrorDocument((WebCore::DocumentLoader *)a1);
      v90 = *(_QWORD *)(a1 + 16);
      if (!v90)
        goto LABEL_74;
      v91 = *(_QWORD *)(v90 + 8);
      if (!v91)
        goto LABEL_74;
      v92 = *(_QWORD **)(v91 + 296);
      if (v92)
      {
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        WTF::URL::stringCenterEllipsizedToLength(this);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Not allowed to redirect to ", 28, (uint64_t *)&v164, (int8x16_t *)" due to its scheme", 19, buf);
        WebCore::Document::addConsoleMessage(v92, 8, 2, (WTF::StringImpl **)buf, 0);
        v94 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            WTF::StringImpl::destroy(v94, v93);
          else
            *(_DWORD *)v94 -= 2;
        }
        v95 = v164;
        v164 = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 2)
            WTF::StringImpl::destroy(v95, v93);
          else
            *(_DWORD *)v95 -= 2;
        }
        v96 = *(_QWORD *)(a1 + 16);
        if (!v96)
          goto LABEL_74;
        v91 = *(_QWORD *)(v96 + 8);
        if (!v91)
          goto LABEL_74;
      }
      v97 = *(_QWORD *)(v91 + 280);
      if (!v97)
        goto LABEL_74;
      WebCore::FrameLoader::blockedError(v97, (uint64_t)buf);
      goto LABEL_127;
    }
    v84 = *(_QWORD *)(a1 + 16);
    if (v84)
    {
      v85 = *(_QWORD *)(v84 + 8);
      if (v85)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v84 + 8));
        if (v87)
          v84 = v86;
        else
          v84 = 0;
        v88 = *(_QWORD *)(v85 + 32);
        v89 = *(_QWORD *)(*(_QWORD *)(v85 + 128) + 8) == v85;
        goto LABEL_138;
      }
      v84 = 0;
    }
    v88 = 0;
    v89 = 0;
LABEL_138:
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v84;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v176 = v88;
    WORD4(v176) = 1024;
    *(_DWORD *)((char *)&v176 + 10) = v89;
    _os_log_impl(&dword_1940B8000, v83, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::willSendRequest: canceling - redirecting URL scheme is not allowed", buf, 0x26u);
    goto LABEL_139;
  }
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  v26 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::Document::allDocumentsMap(void)::documents, (uint64_t *)&v193[8]);
  if (!v26)
  {
    *(_QWORD *)v167 = 0;
    WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~ListHashSetNode(v167, v13);
    goto LABEL_43;
  }
  v27 = v26[4];
  if (!v27 || (v28 = *(_QWORD *)(v27 + 8)) == 0)
  {
LABEL_43:
    if (!v194)
      goto LABEL_53;
    goto LABEL_44;
  }
  v29 = *(_DWORD *)(v28 + 24) + 2;
  *(_DWORD *)(v28 + 24) = v29;
  v30 = *(_QWORD *)(v28 + 528);
  if (!v30
    || !*(_QWORD *)(v30 + 8)
    || (v31 = *(_QWORD *)(a1 + 16)) == 0
    || (v32 = *(WebCore::Frame **)(v31 + 8)) == 0)
  {
LABEL_41:
    v33 = v29 - 2;
    if (v33)
    {
      *(_DWORD *)(v28 + 24) = v33;
    }
    else if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    goto LABEL_43;
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((WebCore::Document::isNavigationBlockedByThirdPartyIFrameRedirectBlocking((WebCore::Document *)v28, v32, this) & 1) == 0)
  {
    v29 = *(_DWORD *)(v28 + 24);
    goto LABEL_41;
  }
  v101 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v102 = *(_QWORD *)(a1 + 16);
    if (v102)
    {
      v103 = *(_QWORD *)(v102 + 8);
      if (v103)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v102 + 8));
        if (!v105)
          v104 = 0;
        v102 = *(_QWORD *)(v103 + 32);
        v106 = *(_QWORD *)(*(_QWORD *)(v103 + 128) + 8) == v103;
        goto LABEL_174;
      }
      v104 = 0;
      v102 = 0;
    }
    else
    {
      v104 = 0;
    }
    v106 = 0;
LABEL_174:
    *(_DWORD *)v167 = 134218752;
    *(_QWORD *)&v167[4] = a1;
    v168 = 2048;
    v169 = v104;
    v170 = 2048;
    v171 = v102;
    v172 = 1024;
    v173 = v106;
    _os_log_impl(&dword_1940B8000, v101, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::willSendRequest: canceling - cross-site redirect of top frame triggered by third-party iframe", v167, 0x26u);
  }
  v107 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v108 = *(_QWORD *)(v107 + 296);
  if (v108)
  {
    v109 = *(WTF::StringImpl **)(v108 + 736);
    if (v109)
      *(_DWORD *)v109 += 2;
    v166 = v109;
    v110 = *(WTF::StringImpl **)(v28 + 736);
    if (v110)
      *(_DWORD *)v110 += 2;
    v165 = v110;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Unsafe JavaScript attempt to initiate navigation for frame with URL '", 70, (uint64_t *)&v166, (uint64_t)"' from frame with URL '", 24, (uint64_t *)&v165, (uint64_t)"'. The frame attempting navigation of the top-level window is cross-origin or untrusted and the user has never interacted with the frame.", 138, v167);
    v112 = v165;
    v165 = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
        WTF::StringImpl::destroy(v112, v111);
      else
        *(_DWORD *)v112 -= 2;
    }
    v113 = v166;
    v166 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
        WTF::StringImpl::destroy(v113, v111);
      else
        *(_DWORD *)v113 -= 2;
    }
    WebCore::Document::addConsoleMessage(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 296), 8, 2, (WTF::StringImpl **)v167, 0);
    v115 = *(WTF::StringImpl **)v167;
    *(_QWORD *)v167 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
        WTF::StringImpl::destroy(v115, v114);
      else
        *(_DWORD *)v115 -= 2;
    }
    v107 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, WebCore::ResourceRequest *))(**(_QWORD **)(*(_QWORD *)(v107 + 280)
                                                                                                + 16)
                                                                                  + 568))(v167, *(_QWORD *)(*(_QWORD *)(v107 + 280) + 16), this);
  v174 = 3;
  WebCore::DocumentLoader::cancelMainResourceLoad(a1, (uint64_t)v167, 0);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v167, v116);
  v117 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v117 + 16))(v117, this);
  (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v28);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
  return (uint64_t *)std::optional<WebCore::NavigationRequester>::~optional((uint64_t)buf, v118);
}

void WebCore::DocumentLoader::setRequest(WebCore::DocumentLoader *this, const WebCore::ResourceRequest *a2, const WTF::StringImpl *a3)
{
  uint64_t (*v5)();
  const void *v6;
  const void *v7;
  uint64_t v8;
  WebCore::Frame *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  WebCore::DocumentLoader *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  _BOOL4 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 45))
    v5 = 0;
  if (v5)
  {
    v8 = *((_QWORD *)this + 46);
    if (v8)
    {
      if (*(_DWORD *)(v8 + 4))
      {
        *((_BYTE *)this + 3537) = 0;
LABEL_10:
        WebCore::ResourceRequestBase::operator=((uint64_t)this + 872, (uint64_t)a2);
        v6 = (const void *)*((_QWORD *)a2 + 24);
        if (v6)
          CFRetain(v6);
        v7 = (const void *)*((_QWORD *)this + 133);
        *((_QWORD *)this + 133) = v6;
        if (v7)
          CFRelease(v7);
        return;
      }
    }
  }
  if (!*((_BYTE *)this + 3548))
    goto LABEL_10;
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  if ((WTF::equal(*(WTF **)a2, *((const WTF::StringImpl **)this + 109), a3) & 1) != 0)
    goto LABEL_10;
  WebCore::ResourceRequest::operator=((uint64_t)this + 872, (uint64_t)a2);
  v9 = *(WebCore::Frame **)(*((_QWORD *)this + 2) + 8);
  v10 = *((_QWORD *)v9 + 35);
  if (!*(_QWORD *)(v10 + 96))
  {
    v11 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      WebCore::Frame::pageID(v9);
      if (v13)
        v14 = v12;
      else
        v14 = 0;
      v15 = *(_QWORD *)(*((_QWORD *)v9 + 16) + 8) == (_QWORD)v9;
      v16 = *((_QWORD *)v9 + 4);
      v17 = 134218752;
      v18 = this;
      v19 = 2048;
      v20 = v14;
      v21 = 2048;
      v22 = v16;
      v23 = 1024;
      v24 = v15;
      _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::DocumentLoader::setRequest: With no provisional document loader", (uint8_t *)&v17, 0x26u);
      v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 16) + 192))(*(_QWORD *)(v10 + 16));
}

void WebCore::MessageChannel::~MessageChannel(WebCore::MessageChannel *this, void *a2)
{
  uint64_t *v2;
  void *v3;

  v2 = (uint64_t *)((char *)this + 8);
  WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)this + 2, a2);
  WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v2, v3);
}

unsigned int *WebCore::MessagePort::dispatchMessages(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v4 = this;
  v5 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v5 == 1 || v5 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  if (!*(_BYTE *)(v3 + 179) && !*((_BYTE *)this + 57) && *((_BYTE *)this + 58))
  {
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    v8 = *((_QWORD *)v4 + 6);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
LABEL_11:
      ++*(_QWORD *)(v8 + 8);
      v10 = __ldxr((unsigned __int8 *)v8);
      if (v10 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
          goto LABEL_16;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_16:
      *(_QWORD *)(v7 + 8) = v4;
      ++*((_QWORD *)v4 + 2);
      v11 = WebCore::MessagePortChannelProvider::fromContext((WebCore::MessagePortChannelProvider *)(v3 - 96), v6);
      v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v12 = &off_1E33A59B8;
      *((_QWORD *)v12 + 1) = v4;
      *((_QWORD *)v12 + 2) = v7;
      v13 = v12;
      (*(void (**)(uint64_t, unsigned int *, unsigned int **))(*(_QWORD *)v11 + 48))(v11, v4 + 16, &v13);
      this = v13;
      v13 = 0;
      if (this)
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
      v5 = *(unsigned __int8 *)(v3 + 178);
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v8);
    goto LABEL_11;
  }
LABEL_19:
  if (v5)
  {
    if (v5 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v5 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return this;
}

uint64_t *WebCore::MessagePort::postMessage@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF *a5@<X8>)
{
  void *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t *result;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  uint64_t v38;

  v37 = 0;
  v38 = 0;
  WebCore::SerializedScriptValue::create(a2, a3, a4, (uint64_t)&v37, 0, 0, 1, (uint64_t)&v34);
  if (v36)
  {
    if (v36 != 1)
    {
LABEL_42:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_43;
    }
    v21 = v35;
    v35 = 0;
    *(_BYTE *)a5 = (_BYTE)v34;
    *((_QWORD *)a5 + 1) = v21;
    v19 = 1;
    *((_BYTE *)a5 + 16) = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 57) && *(_BYTE *)(a1 + 58))
    {
      if (HIDWORD(v38))
      {
        v22 = v37;
        v23 = 8 * HIDWORD(v38);
        do
        {
          v24 = *(_QWORD *)(*(_QWORD *)v22 + 64);
          v25 = *(_QWORD *)(*(_QWORD *)v22 + 72);
          v26 = v24 == *(_QWORD *)(a1 + 64) && v25 == *(_QWORD *)(a1 + 72);
          if (v26 || (v24 == *(_QWORD *)(a1 + 80) ? (v27 = v25 == *(_QWORD *)(a1 + 88)) : (v27 = 0), v27))
          {
            v19 = 0;
            *(_BYTE *)a5 = 21;
            *((_QWORD *)a5 + 1) = 0;
LABEL_41:
            *((_BYTE *)a5 + 16) = 1;
            goto LABEL_17;
          }
          v22 = (WTF *)((char *)v22 + 8);
          v23 -= 8;
        }
        while (v23);
        WebCore::MessagePort::disentanglePorts((uint64_t **)&v37, v7, (uint64_t)&v31);
        if ((_DWORD)v33)
        {
          if ((_DWORD)v33 != 1)
            goto LABEL_42;
          v19 = 0;
          v28 = v32;
          *(_BYTE *)a5 = (_BYTE)v31;
          *((_QWORD *)a5 + 1) = v28;
          goto LABEL_41;
        }
        v8 = v31;
        v9 = v32;
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      v10 = v34;
      v34 = 0;
      v31 = v10;
      v32 = v8;
      v33 = v9;
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      v12 = *(unsigned __int8 *)(v11 + 178);
      if (*(_BYTE *)(v11 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v11 + 216);
      }
      else
      {
        *(_DWORD *)(v11 - 264) += 2;
      }
      v13 = WebCore::MessagePortChannelProvider::fromContext((WebCore::MessagePortChannelProvider *)(v11 - 96), (WebCore::ScriptExecutionContext *)v7);
      (*(void (**)(uint64_t, WTF **, uint64_t))(*(_QWORD *)v13 + 56))(v13, &v31, a1 + 80);
      v15 = *(unsigned __int8 *)(v11 + 178);
      if (*(_BYTE *)(v11 + 178))
      {
        if (v15 == 1)
        {
          if (*(_DWORD *)(v11 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 40))(v11 - 96);
          else
            --*(_DWORD *)(v11 + 216);
        }
        else if (v15 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v11 + 216));
        }
      }
      else if (*(_DWORD *)(v11 - 264) == 2)
      {
        if ((*(_WORD *)(v11 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v11 - 288), v14);
      }
      else
      {
        *(_DWORD *)(v11 - 264) -= 2;
      }
      *(_QWORD *)a5 = 0;
      *((_QWORD *)a5 + 1) = 0;
      *((_QWORD *)a5 + 2) = 0;
      v16 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v16, v14);
      }
      a5 = v31;
      v31 = 0;
      if (!a5)
        goto LABEL_16;
      do
      {
        v17 = __ldaxr((unsigned int *)a5);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)a5));
      if (v18)
      {
LABEL_16:
        v19 = v36;
        if (v36 == -1)
          goto LABEL_18;
        goto LABEL_17;
      }
LABEL_43:
      atomic_store(1u, (unsigned int *)a5);
      WebCore::SerializedScriptValue::Internals::~Internals((WTF *)((char *)a5 + 8), v14);
      WTF::fastFree(a5, v29);
      goto LABEL_16;
    }
    v19 = 0;
    *(_QWORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
  }
LABEL_17:
  ((void (*)(WTF **, WTF **))off_1E33A58B0[v19])(&v31, &v34);
LABEL_18:
  result = (uint64_t *)v37;
  if (HIDWORD(v38))
  {
    v30 = 8 * HIDWORD(v38);
    do
    {
      result = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(result, v14)+ 1;
      v30 -= 8;
    }
    while (v30);
    result = (uint64_t *)v37;
  }
  if (result)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    return (uint64_t *)WTF::fastFree((WTF *)result, v14);
  }
  return result;
}

unint64_t *WebCore::MessagePort::notifyMessageAvailable(unint64_t *result, void *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v48;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57[6];

  v2 = result;
  v57[5] = *MEMORY[0x1E0C80C00];
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_172))
  {
    __clrex();
LABEL_3:
    result = (unint64_t *)MEMORY[0x19AEA534C](&_MergedGlobals_172);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_172))
    goto LABEL_3;
LABEL_4:
  if ((byte_1ECE831EA & 1) != 0)
  {
    v4 = *v2;
    v5 = v2[1];
    if (qword_1ECE831F8)
    {
      v6 = *(_DWORD *)(qword_1ECE831F8 - 8);
      v7 = (v4 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v4 - 1640531527) << 16) ^ ((unsigned __int16)v4
                                                                                              - 1640531527);
      v8 = (v4 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(v4) + (v7 >> 11)) << 16) ^ (v7 + WORD2(v4) + (v7 >> 11));
      v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8 + (unsigned __int16)v5 + (v8 >> 11));
      v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
      v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
      v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
      v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
      if (!v13)
        v13 = 0x800000;
      v14 = v6 & v13;
      result = (unint64_t *)(qword_1ECE831F8 + 48 * (v6 & v13));
      v15 = *result;
      v16 = result[1];
      if (*result == v4 && v16 == v5)
      {
LABEL_13:
        v18 = result[2];
        v19 = result[3];
        v20 = result[4];
        goto LABEL_14;
      }
      v46 = 1;
      while (v15 | v16)
      {
        v14 = (v14 + v46) & v6;
        result = (unint64_t *)(qword_1ECE831F8 + 48 * v14);
        v15 = *result;
        v16 = result[1];
        ++v46;
        if (*result == v4 && v16 == v5)
          goto LABEL_13;
      }
    }
    v20 = 0;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v20 = 0;
    v18 = 0;
    v19 = 0;
    qword_1ECE831F8 = 0;
    byte_1ECE831EA = 1;
    v4 = *v2;
    v5 = v2[1];
  }
LABEL_14:
  if ((byte_1ECE831E9 & 1) != 0)
  {
    if (qword_1ECE831F0)
    {
      v21 = *(_DWORD *)(qword_1ECE831F0 - 8);
      v22 = (v4 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v4 - 1640531527) << 16) ^ ((unsigned __int16)v4
                                                                                               - 1640531527);
      v23 = (v4 >> 37) & 0x7FFF800 ^ ((v22 + WORD2(v4) + (v22 >> 11)) << 16) ^ (v22 + WORD2(v4) + (v22 >> 11));
      v24 = (v5 >> 5) & 0x7FFF800 ^ ((v23 + (unsigned __int16)v5 + (v23 >> 11)) << 16) ^ (v23 + (unsigned __int16)v5 + (v23 >> 11));
      v25 = (v5 >> 37) & 0x7FFF800 ^ ((v24 + WORD2(v5) + (v24 >> 11)) << 16) ^ (v24 + WORD2(v5) + (v24 >> 11));
      v26 = (v25 + (v25 >> 11)) ^ (8 * (v25 + (v25 >> 11)));
      v27 = (v26 + (v26 >> 5)) ^ (4 * (v26 + (v26 >> 5)));
      v28 = (v27 + (v27 >> 15)) ^ ((v27 + (v27 >> 15)) << 10);
      if (!v28)
        v28 = 0x800000;
      v29 = v21 & v28;
      v30 = (uint64_t *)(qword_1ECE831F0 + 32 * v29);
      v31 = *v30;
      v32 = v30[1];
      if (*v30 != v4 || v32 != v5)
      {
        v48 = 1;
        while (v31 | v32)
        {
          v29 = ((_DWORD)v29 + v48) & v21;
          v30 = (uint64_t *)(qword_1ECE831F0 + 32 * v29);
          v31 = *v30;
          v32 = v30[1];
          ++v48;
          if (*v30 == v4 && v32 == v5)
            goto LABEL_23;
        }
        goto LABEL_104;
      }
LABEL_23:
      v34 = v30[2];
      if (!v34)
      {
        v36 = 0;
        goto LABEL_34;
      }
      if (__ldaxr((unsigned __int8 *)v34))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v34))
      {
        goto LABEL_27;
      }
      result = (unint64_t *)MEMORY[0x19AEA534C](v34);
LABEL_27:
      if (*(_QWORD *)(v34 + 24))
      {
        ++*(_QWORD *)(v34 + 16);
        v36 = v34;
      }
      else
      {
        v36 = 0;
      }
      v37 = __ldxr((unsigned __int8 *)v34);
      if (v37 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v34))
          goto LABEL_34;
      }
      else
      {
        __clrex();
      }
      result = (unint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_34:
      v38 = v30[3];
      goto LABEL_35;
    }
  }
  else
  {
    qword_1ECE831F0 = 0;
    byte_1ECE831E9 = 1;
  }
LABEL_104:
  v55 = 0;
  v56 = 0;
  result = (unint64_t *)WTF::ThreadSafeWeakPtr<WebCore::MessagePort>::~ThreadSafeWeakPtr((uint64_t *)&v55, a2);
  v38 = 0;
  v36 = 0;
LABEL_35:
  v39 = __ldxr((unsigned __int8 *)&_MergedGlobals_172);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_172))
LABEL_39:
    result = (unint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_172);
  if (v18 | v19)
  {
    v57[0] = v18;
    v57[1] = v19;
    v57[2] = v20;
    v40 = (unint64_t *)WTF::fastMalloc((WTF *)0x18);
    *v40 = (unint64_t)&off_1E33A5918;
    v40[1] = v36;
    v40[2] = v38;
    v55 = v40;
    LOBYTE(v56) = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
LABEL_44:
      {
        WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
      }
      v42 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, v57);
      if (v42)
      {
        v43 = v42[4];
        if (v43)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 88))(v42[4]) & 1) != 0)
          {
            v44 = 1;
            goto LABEL_50;
          }
          (*(void (**)(uint64_t, unint64_t **))(*(_QWORD *)v43 + 336))(v43, &v55);
        }
      }
      else
      {
        v43 = 0;
      }
      v44 = 0;
LABEL_50:
      v45 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
      if (v45 == 1)
      {
        if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
        {
LABEL_52:
          if (v44)
            (*(void (**)(unint64_t *, uint64_t))(*v55 + 16))(v55, v43);
          result = v55;
          v55 = 0;
          if (result)
            return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
      goto LABEL_52;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_44;
  }
  if (!v36)
    return result;
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
LABEL_81:
    result = (unint64_t *)MEMORY[0x19AEA534C](v36);
    goto LABEL_82;
  }
  if (__stxr(1u, (unsigned __int8 *)v36))
    goto LABEL_81;
LABEL_82:
  v51 = *(_QWORD *)(v36 + 16) - 1;
  *(_QWORD *)(v36 + 16) = v51;
  if (v51)
  {
    v54 = __ldxr((unsigned __int8 *)v36);
    if (v54 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v36))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v36);
  }
  v52 = *(_QWORD *)(v36 + 8);
  v53 = __ldxr((unsigned __int8 *)v36);
  if (v53 != 1)
  {
    __clrex();
    goto LABEL_90;
  }
  if (__stlxr(0, (unsigned __int8 *)v36))
LABEL_90:
    result = (unint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v36);
  if (!v52)
    return (unint64_t *)WTF::fastFree((WTF *)v36, a2);
  return result;
}

uint64_t WebCore::ScriptExecutionContext::ensureOnContextThread(uint64_t *a1, _QWORD *a2)
{
  char v2;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;

  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, a1);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_20;
  }
  v7 = v6[4];
  if (!v7)
  {
LABEL_20:
    v2 = 0;
    v8 = 0;
    goto LABEL_10;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v6[4]) & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 336))(v7, a2);
    v8 = 0;
    v2 = 1;
  }
LABEL_10:
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  if (v8)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v7);
    v2 = 1;
  }
  return v2 & 1;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v24;
  BOOL v25;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = (v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v5 - 1640531527) << 16) ^ ((unsigned __int16)v5
                                                                                          - 1640531527);
  v7 = (v5 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(v5) + (v6 >> 11)) << 16) ^ (v6 + WORD2(v5) + (v6 >> 11));
  v8 = v7 + (unsigned __int16)*a2 + (v7 >> 11);
  v9 = (*a2 >> 5) & 0x7FFF800 ^ (v8 << 16) ^ v8;
  v10 = v9 + (unsigned __int16)WORD2(*a2) + (v9 >> 11);
  v11 = ((unint64_t)*a2 >> 37) & 0x7FFF800 ^ (v10 << 16) ^ v10;
  v12 = (v11 + (v11 >> 11)) ^ (8 * (v11 + (v11 >> 11)));
  v13 = (v12 + (v12 >> 5)) ^ (4 * (v12 + (v12 >> 5)));
  v14 = (v13 + (v13 >> 15)) ^ ((v13 + (v13 >> 15)) << 10);
  if (v14)
    v15 = v14;
  else
    v15 = 0x800000;
  v16 = a2[2];
  v17 = v15 & v3;
  result = (uint64_t *)(v2 + 48 * (v15 & v3));
  v19 = *result;
  v20 = result[1];
  v21 = v20 == v5 && v19 == v4;
  v22 = result[2];
  if (!v21 || v22 != v16)
  {
    v24 = 1;
    while (v19 | v20 || v22)
    {
      v17 = (v17 + v24) & v3;
      result = (uint64_t *)(v2 + 48 * v17);
      v19 = *result;
      v20 = result[1];
      v25 = v20 == v5 && v19 == v4;
      v22 = result[2];
      ++v24;
      if (v25 && v22 == v16)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::MessagePort>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v7;

  v5 = (_QWORD *)result;
  if (__ldaxr((unsigned __int8 *)a2))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEA534C](a2);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)a2))
    goto LABEL_3;
LABEL_4:
  if (*(_QWORD *)(a2 + 24))
    ++*(_QWORD *)(a2 + 8);
  else
    a3 = 0;
  *v5 = a3;
  v7 = __ldxr((unsigned __int8 *)a2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)a2);
  }
  if (__stlxr(0, (unsigned __int8 *)a2))
    return WTF::Lock::unlockSlow((WTF::Lock *)a2);
  return result;
}

unsigned int *WebCore::MessagePort::messageAvailable(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int *v16;
  _QWORD *v17;
  char v18;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v4 = this;
  v5 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v5 == 1 || v5 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  if (!*(_BYTE *)(v3 + 179))
  {
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    v7 = *((_QWORD *)v4 + 6);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
LABEL_9:
      ++*(_QWORD *)(v7 + 8);
      v9 = __ldxr((unsigned __int8 *)v7);
      if (v9 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_14:
      *(_QWORD *)(v6 + 8) = v4;
      ++*((_QWORD *)v4 + 2);
      v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v10 = &off_1E33A5940;
      *((_QWORD *)v10 + 1) = v6;
      v16 = v10;
      v11 = *(unsigned int *)(v3 + 100);
      if ((_DWORD)v11 == *(_DWORD *)(v3 + 96))
      {
        v12 = (unsigned int **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 88, v11 + 1, (unint64_t)&v16);
        v11 = *(unsigned int *)(v3 + 100);
        v13 = (unsigned int **)(*(_QWORD *)(v3 + 88) + 8 * v11);
        v10 = *v12;
      }
      else
      {
        v13 = (unsigned int **)(*(_QWORD *)(v3 + 88) + 8 * v11);
        v12 = &v16;
      }
      *v12 = 0;
      *v13 = v10;
      *(_DWORD *)(v3 + 100) = v11 + 1;
      if (!*(_BYTE *)(v3 + 183))
      {
        *(_BYTE *)(v3 + 183) = 1;
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E33A78D8;
        v17 = v14;
        v18 = 0;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)(v3 - 96) + 336))(v3 - 96, &v17);
        v15 = v17;
        v17 = 0;
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
      }
      this = v16;
      v16 = 0;
      if (this)
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
      v5 = *(unsigned __int8 *)(v3 + 178);
      goto LABEL_22;
    }
    MEMORY[0x19AEA534C](v7);
    goto LABEL_9;
  }
LABEL_22:
  if (v5)
  {
    if (v5 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v5 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return this;
}

void WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers(WebCore::GraphicsLayerCA *this, WTF::StringImpl *a2, float *a3, _BYTE *a4, float a5)
{
  WTF::StringImpl *v8;
  char v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  WTF::StringImpl *v26;
  unsigned int *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(void);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  _BOOL8 v94;
  unsigned int v95;
  float v96;
  unsigned int v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float v130;
  float v131;
  uint64_t v132;
  float v133;
  uint64_t v134;
  _BOOL8 v135;
  WTF::StringImpl *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  unint64_t v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  float v147;
  __n128 v148;
  void *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  float v159;
  float v160;
  float v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  uint64_t (*v165)();
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  WTF::StringImpl *v202;
  unsigned int *v203;
  unsigned int v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  uint64_t v217;
  unsigned int *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  WTF::StringImpl *v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  WTF *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __n128 v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  _QWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  double v311;
  int v312;
  double v313;
  int v314;
  double v315;
  int v316;
  double v317;
  int v318;
  float v319;
  int v320;
  int v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t *v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  _BYTE *v343;
  void (*v344)(void);
  uint64_t *v345;
  uint64_t v346;
  __int128 *v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  _BYTE *v351;
  uint64_t *v352;
  uint64_t *v353;
  uint64_t v354;
  _BYTE *v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int **v359;
  unsigned int **v360;
  unsigned int *v361;
  unsigned int *v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  _QWORD *v368;
  uint64_t v369;
  unsigned __int32 v370;
  __n128 v371;
  _QWORD *v372;
  unsigned int *v373;
  unsigned int v374;
  unsigned int *v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  _QWORD *v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  __n128 v386;
  _QWORD *v387;
  unsigned int *v388;
  unsigned int v389;
  unsigned int v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  __n128 v399;
  _QWORD *v400;
  unsigned int *v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t *v410;
  float32x2_t *v411;
  uint64_t v412;
  _BYTE *v413;
  uint64_t *v414;
  uint64_t v415;
  float32x2_t *v416;
  uint64_t v417;
  _BYTE *v418;
  uint64_t *v419;
  _QWORD *v420;
  uint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  float64x2_t *v425;
  float v426;
  BOOL v427;
  double v428;
  double v429;
  uint64_t v430;
  float64x2_t *v431;
  int v432;
  uint64_t v433;
  int v434;
  _QWORD *v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  double v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  double v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  uint64_t v453;
  uint64_t v454;
  WTF::StringImpl *v455;
  WTF::StringImpl *v456;
  unsigned int *v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int *v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int *v463;
  unsigned int v464;
  unsigned int v465;
  WTF::StringImpl *v466;
  WTF::StringImpl *v467;
  BOOL v468;
  int v469;
  float v470;
  double v471;
  double v472;
  float v473;
  uint64_t v474;
  uint64_t v475;
  float32x2_t v476;
  float v477;
  float32x2_t v478;
  float v479;
  WTF::StringImpl *v480;
  float v481;
  WTF::StringImpl *v482;
  float v483;
  WTF::StringImpl *v484[2];
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  uint64_t v492;
  float v493[5];

  v8 = a2;
  v10 = *((_BYTE *)this + 889);
  *((_BYTE *)this + 889) = 1;
  v11 = *((_QWORD *)this + 77);
  if (!v11 && *(_DWORD *)a2 >= 0x81u)
  {
    *((_QWORD *)this + 77) = 4;
    goto LABEL_12;
  }
  if ((v11 & 0x10200040) != 0)
  {
    if ((*(_WORD *)((_BYTE *)this + 177) & 4) == 0 || *((_BYTE *)this + 169) == 1)
    {
      if (*((_QWORD *)this + 27))
        v12 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance;
      else
        v12 = 0;
      if (!v12 && !*((_DWORD *)this + 41))
      {
        if (!*((_QWORD *)this + 79))
          goto LABEL_12;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 112))(*((_QWORD *)this + 78));
        v217 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 79) + 104))(*((_QWORD *)this + 79));
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v217 + 160))(v217, *((_QWORD *)this + 79), *((_QWORD *)this + 78));
        v218 = (unsigned int *)*((_QWORD *)this + 79);
        v219 = *((unsigned int *)this + 213);
        if ((_DWORD)v219)
        {
          v474 = *((_QWORD *)this + 78);
          v439 = *((_QWORD *)this + 105);
          v440 = 56 * v219;
          do
          {
            if (*(unsigned __int8 *)(v439 + 16) - 1 <= 6)
            {
              WebCore::GraphicsLayerCA::LayerPropertyAnimation::animationIdentifier((WebCore::GraphicsLayerCA::LayerPropertyAnimation *)&v482, v439);
              v441 = *(unsigned __int8 *)(v439 + 40);
              if (*(_BYTE *)(v439 + 40))
                v442 = *(double *)(v439 + 32) - *(double *)(v439 + 24);
              else
                v442 = 0.0;
              (*(void (**)(WTF::StringImpl **__return_ptr, unsigned int *, WTF::StringImpl **))(*(_QWORD *)v218 + 200))(v484, v218, &v482);
              if (v484[0])
              {
                if (v441 && (*(double (**)(void))(*(_QWORD *)v484[0] + 56))() != v442)
                  (*(void (**)(WTF::StringImpl *, double))(*(_QWORD *)v484[0] + 64))(v484[0], v442);
                (*(void (**)(unsigned int *, WTF::StringImpl **))(*(_QWORD *)v218 + 192))(v218, &v482);
                (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl *))(*(_QWORD *)v474 + 184))(v474, &v482, v484[0]);
                v444 = v484[0];
                v484[0] = 0;
                if (v444)
                {
                  if (*((_DWORD *)v444 + 2) == 1)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v444 + 8))(v444);
                  else
                    --*((_DWORD *)v444 + 2);
                }
              }
              v445 = v482;
              v482 = 0;
              if (v445)
              {
                if (*(_DWORD *)v445 == 2)
                  WTF::StringImpl::destroy(v445, v443);
                else
                  *(_DWORD *)v445 -= 2;
              }
            }
            v439 += 56;
            v440 -= 56;
          }
          while (v440);
          v218 = (unsigned int *)*((_QWORD *)this + 79);
        }
        *((_QWORD *)this + 79) = 0;
        if (v218)
          WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v218 + 2);
        WebCore::GraphicsLayerCA::addUncommittedChanges((uint64_t)this, 0x20021810183ELL);
        goto LABEL_439;
      }
      v225 = *((_QWORD *)this + 79);
      if (!v225
        || *(_BYTE *)(v225 + 12)
        && (*((_QWORD *)this + 79) = 0,
            WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v225 + 8)),
            !*((_QWORD *)this + 79)))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::GraphicsLayerCA *, _QWORD, char *))(*(_QWORD *)this + 1208))(&v482, this, 0, (char *)this + 608);
        v226 = v482;
        v482 = 0;
        v227 = *((_QWORD *)this + 79);
        *((_QWORD *)this + 79) = v226;
        if (v227)
        {
          v228 = (unsigned int *)(v227 + 8);
          do
          {
            v229 = __ldaxr(v228);
            v230 = v229 - 1;
          }
          while (__stlxr(v230, v228));
          if (!v230)
          {
            atomic_store(1u, v228);
            v455 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v455 = off_1E334ED68;
            *((_QWORD *)v455 + 1) = v228;
            v484[0] = v455;
            WTF::ensureOnMainThread();
            v456 = v484[0];
            v484[0] = 0;
            if (v456)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v456 + 8))(v456);
          }
          v231 = v482;
          v482 = 0;
          if (v231)
          {
            v203 = (unsigned int *)((char *)v231 + 8);
            do
            {
              v365 = __ldaxr(v203);
              v205 = --v365 == 0;
            }
            while (__stlxr(v365, v203));
            goto LABEL_722;
          }
        }
LABEL_433:
        WebCore::GraphicsLayerCA::addUncommittedChanges((uint64_t)this, 0x20021810183ELL);
        v232 = *((_QWORD *)this + 25);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v232 + 848))(v232) & 1) == 0)
        {
          __break(0xC471u);
          goto LABEL_1032;
        }
        WebCore::GraphicsLayerCA::noteSublayersChanged(v232, 1);
        v233 = (WTF::StringImpl *)vmul_f32(*(float32x2_t *)((char *)this + 88), (float32x2_t)0x3F0000003F000000);
        v482 = (WTF::StringImpl *)0x3F0000003F000000;
        v483 = 0.0;
        v234 = *((_QWORD *)this + 78);
        v484[0] = v233;
        LODWORD(v484[1]) = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v234 + 272))(v234, v484);
        (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 78) + 288))(*((_QWORD *)this + 78), &v482);
        v235 = *((_QWORD *)this + 78);
        v484[0] = 0;
        v484[1] = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v235 + 616))(v235, v484);
        if (HIDWORD(v484[1]))
        {
          v359 = (unsigned int **)v484[0];
          v360 = (unsigned int **)((char *)v484[0] + 8 * HIDWORD(v484[1]));
          do
          {
            v361 = *v359;
            *v359 = 0;
            if (v361)
            {
              v362 = v361 + 2;
              do
              {
                v363 = __ldaxr(v362);
                v364 = v363 - 1;
              }
              while (__stlxr(v364, v362));
              if (!v364)
              {
                atomic_store(1u, v361 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v361 + 8))(v361);
              }
            }
            ++v359;
          }
          while (v359 != v360);
        }
        v237 = v484[0];
        if (v484[0])
        {
          v484[0] = 0;
          LODWORD(v484[1]) = 0;
          WTF::fastFree(v237, v236);
        }
        v238 = *((_QWORD *)this + 78);
        v488 = xmmword_1969F7F50;
        v489 = unk_1969F7F60;
        v490 = xmmword_1969F7F70;
        v491 = unk_1969F7F80;
        *(_OWORD *)v484 = xmmword_1969F7F10;
        v485 = unk_1969F7F20;
        v486 = xmmword_1969F7F30;
        v487 = unk_1969F7F40;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v238 + 304))(v238, v484);
        (*(void (**)(_QWORD, float))(**((_QWORD **)this + 78) + 608))(*((_QWORD *)this + 78), 1.0);
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 78) + 632))(*((_QWORD *)this + 78), 1);
        v239 = (_QWORD *)*((_QWORD *)this + 86);
        if (!v239)
          goto LABEL_438;
        v420 = (_QWORD *)*v239;
        if (v420)
        {
          v421 = *((unsigned int *)v420 - 1);
          v422 = &v420[2 * v421];
          if (*((_DWORD *)v420 - 3))
          {
            v423 = v420;
            if ((_DWORD)v421)
            {
              v424 = 16 * v421;
              v423 = v420;
              while ((unint64_t)(*v423 + 1) <= 1)
              {
                v423 += 2;
                v424 -= 16;
                if (!v424)
                {
                  v423 = v422;
                  goto LABEL_918;
                }
              }
            }
            goto LABEL_918;
          }
          v423 = &v420[2 * v421];
        }
        else
        {
          v423 = 0;
          v421 = 0;
        }
        v422 = &v420[2 * v421];
LABEL_918:
        if (v420)
          v435 = &v420[2 * *((unsigned int *)v420 - 1)];
        else
          v435 = 0;
        while (v423 != v435)
        {
          v436 = v423[1];
          v484[0] = v233;
          LODWORD(v484[1]) = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v436 + 272))(v436, v484);
          (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)v423[1] + 288))(v423[1], &v482);
          v437 = v423[1];
          v488 = xmmword_1969F7F50;
          v489 = unk_1969F7F60;
          v490 = xmmword_1969F7F70;
          v491 = unk_1969F7F80;
          *(_OWORD *)v484 = xmmword_1969F7F10;
          v485 = unk_1969F7F20;
          v486 = xmmword_1969F7F30;
          v487 = unk_1969F7F40;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v437 + 304))(v437, v484);
          (*(void (**)(_QWORD, float))(*(_QWORD *)v423[1] + 608))(v423[1], 1.0);
          v438 = v423 + 2;
          v423 = v422;
          if (v438 != v422)
          {
            v423 = v438;
            while ((unint64_t)(*v423 + 1) <= 1)
            {
              v423 += 2;
              if (v423 == v422)
              {
                v423 = v422;
                break;
              }
            }
          }
        }
LABEL_438:
        v240 = *((unsigned int *)this + 213);
        if ((_DWORD)v240)
        {
          v446 = *((_QWORD *)this + 78);
          v475 = *((_QWORD *)this + 79);
          v447 = *((_QWORD *)this + 105);
          v448 = 56 * v240;
          do
          {
            if (*(unsigned __int8 *)(v447 + 16) - 1 <= 6)
            {
              WebCore::GraphicsLayerCA::LayerPropertyAnimation::animationIdentifier((WebCore::GraphicsLayerCA::LayerPropertyAnimation *)&v480, v447);
              v449 = *(unsigned __int8 *)(v447 + 40);
              if (*(_BYTE *)(v447 + 40))
                v450 = *(double *)(v447 + 32) - *(double *)(v447 + 24);
              else
                v450 = 0.0;
              (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v446
                                                                                                  + 200))(v484, v446, &v480);
              if (v484[0])
              {
                if (v449 && (*(double (**)(void))(*(_QWORD *)v484[0] + 56))() != v450)
                  (*(void (**)(WTF::StringImpl *, double))(*(_QWORD *)v484[0] + 64))(v484[0], v450);
                (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v446 + 192))(v446, &v480);
                (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl *))(*(_QWORD *)v475 + 184))(v475, &v480, v484[0]);
                v451 = v484[0];
                v484[0] = 0;
                if (v451)
                {
                  if (*((_DWORD *)v451 + 2) == 1)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v451 + 8))(v451);
                  else
                    --*((_DWORD *)v451 + 2);
                }
              }
              v452 = v480;
              v480 = 0;
              if (v452)
              {
                if (*(_DWORD *)v452 == 2)
                  WTF::StringImpl::destroy(v452, a2);
                else
                  *(_DWORD *)v452 -= 2;
              }
            }
            v447 += 56;
            v448 -= 56;
          }
          while (v448);
        }
LABEL_439:
        *a4 = 1;
      }
    }
    else
    {
      v196 = *((_QWORD *)this + 79);
      if (!v196
        || *(_BYTE *)(v196 + 12) != 3
        && (*((_QWORD *)this + 79) = 0,
            WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v196 + 8)),
            !*((_QWORD *)this + 79)))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::GraphicsLayerCA *, uint64_t, char *))(*(_QWORD *)this + 1208))(&v482, this, 3, (char *)this + 608);
        v197 = v482;
        v482 = 0;
        v198 = *((_QWORD *)this + 79);
        *((_QWORD *)this + 79) = v197;
        if (v198)
        {
          v199 = (unsigned int *)(v198 + 8);
          do
          {
            v200 = __ldaxr(v199);
            v201 = v200 - 1;
          }
          while (__stlxr(v201, v199));
          if (!v201)
          {
            atomic_store(1u, v199);
            v466 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v466 = off_1E334ED68;
            *((_QWORD *)v466 + 1) = v199;
            v484[0] = v466;
            WTF::ensureOnMainThread();
            v467 = v484[0];
            v484[0] = 0;
            if (v467)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v467 + 8))(v467);
          }
          v202 = v482;
          v482 = 0;
          if (v202)
          {
            v203 = (unsigned int *)((char *)v202 + 8);
            do
            {
              v204 = __ldaxr(v203);
              v205 = --v204 == 0;
            }
            while (__stlxr(v204, v203));
LABEL_722:
            if (v205)
            {
              atomic_store(1u, v203);
              v366 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v366 = off_1E334ED68;
              *((_QWORD *)v366 + 1) = v203;
              v484[0] = v366;
              WTF::ensureOnMainThread();
              v367 = v484[0];
              v484[0] = 0;
              if (v367)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v367 + 8))(v367);
            }
            goto LABEL_433;
          }
        }
        goto LABEL_433;
      }
    }
  }
LABEL_12:
  v13 = *((_QWORD *)this + 77);
  if ((v13 & 8) == 0)
    goto LABEL_19;
  v14 = *((float *)this + 14);
  v15 = *((float *)this + 15);
  v482 = *(WTF::StringImpl **)((char *)this + 76);
  v483 = *((float *)this + 21);
  v16 = *((float *)this + 22);
  v17 = *((float *)this + 23);
  v18 = 0.0;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3))
    && (float)(int)a5 != a5)
  {
    v19 = 0.0;
    if ((*(_WORD *)((_BYTE *)this + 177) & 0x30) == 0x20)
    {
      v307 = *a3;
      v306 = a3[1];
      v308 = *((float *)this + 22);
      v473 = *((float *)this + 23);
      if ((*(_WORD *)((_BYTE *)this + 177) & 0x1000) != 0)
        v309 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
      else
        v309 = 1.0;
      v310 = v309 * a5;
      v311 = (float)(v307 * (float)(v309 * a5)) * 64.0;
      if (v311 >= 2147483650.0)
      {
        v312 = 0x7FFFFFFF;
      }
      else if (v311 <= -2147483650.0)
      {
        v312 = 0x80000000;
      }
      else
      {
        v312 = (int)v311;
      }
      v313 = (float)(v306 * (float)(v309 * a5)) * 64.0;
      if (v313 >= 2147483650.0)
      {
        v314 = 0x7FFFFFFF;
      }
      else if (v313 <= -2147483650.0)
      {
        v314 = 0x80000000;
      }
      else
      {
        v314 = (int)v313;
      }
      v315 = (float)(v308 * v310) * 64.0;
      if (v315 >= 2147483650.0)
      {
        v316 = 0x7FFFFFFF;
      }
      else if (v315 <= -2147483650.0)
      {
        v316 = 0x80000000;
      }
      else
      {
        v316 = (int)v315;
      }
      v317 = (float)(v473 * v310) * 64.0;
      if (v317 >= 2147483650.0)
      {
        v318 = 0x7FFFFFFF;
      }
      else if (v317 <= -2147483650.0)
      {
        v318 = 0x80000000;
      }
      else
      {
        v318 = (int)v317;
      }
      v319 = 1.0;
      if ((*(_WORD *)((_BYTE *)this + 177) & 0x1000) != 0)
        (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3), 1.0);
      v320 = v312 + v316;
      if (__OFADD__(v312, v316))
        v320 = (v312 >> 31) + 0x7FFFFFFF;
      v321 = (v314 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v314, v318))
        v321 = v314 + v318;
      v322 = floorf((float)(v319 * (float)v314) * 0.015625) / v319;
      v323 = floorf((float)(v319 * (float)v312) * 0.015625) / v319;
      v324 = (float)(1.0 / v310) * v323;
      v325 = (float)(1.0 / v310) * v322;
      v326 = (float)(1.0 / v310) * (float)((float)(ceilf((float)(v319 * (float)v320) * 0.015625) / v319) - v323);
      v327 = (float)(1.0 / v310) * (float)((float)(ceilf((float)(v319 * (float)v321) * 0.015625) / v319) - v322);
      v19 = v307 - v324;
      v328 = *((float *)this + 19);
      if (v326 != 0.0)
        v328 = (float)(v19 + (float)(v308 * v328)) / v326;
      v18 = v306 - v325;
      v329 = *((float *)this + 20);
      if (v327 != 0.0)
        v329 = (float)(v18 + (float)(v473 * v329)) / v327;
      v14 = *((float *)this + 14) - v19;
      v15 = *((float *)this + 15) - v18;
      v330 = v310 * *((float *)this + 21);
      v482 = (WTF::StringImpl *)__PAIR64__(LODWORD(v329), LODWORD(v328));
      v483 = v330;
    }
  }
  else
  {
    v19 = 0.0;
  }
  *(float *)&v480 = v14 + (float)(*(float *)&v482 * v16);
  *((float *)&v480 + 1) = v15 + (float)(*((float *)&v482 + 1) * v17);
  v481 = v483;
  v20 = *((_QWORD *)this + 79);
  if (v20)
  {
    v478 = vmla_f32(*(float32x2_t *)((char *)this + 56), *(float32x2_t *)((char *)this + 88), *(float32x2_t *)((char *)this + 76));
    v479 = v483;
    *(int8x16_t *)v484 = vextq_s8(*(int8x16_t *)((char *)this + 88), *(int8x16_t *)((char *)this + 88), 8uLL);
    (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v20 + 272))(v20, &v478);
    (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 79) + 256))(*((_QWORD *)this + 79), v484);
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 79) + 288))(*((_QWORD *)this + 79), (char *)this + 76);
    v190 = *((_QWORD *)this + 86);
    if (!v190)
    {
LABEL_372:
      v482 = (WTF::StringImpl *)0x3F0000003F000000;
      v483 = 0.0;
      *(float *)&v480 = -(float)(v19 - (float)(v16 * 0.5));
      *((float *)&v480 + 1) = -(float)(v18 - (float)(v17 * 0.5));
      v481 = 0.0;
      goto LABEL_17;
    }
    v331 = *(uint64_t **)(v190 + 8);
    if (v331)
    {
      v332 = *((unsigned int *)v331 - 1);
      v333 = &v331[2 * v332];
      if (*((_DWORD *)v331 - 3))
      {
        v334 = v331;
        if ((_DWORD)v332)
        {
          v335 = 16 * v332;
          v334 = v331;
          while ((unint64_t)(*v334 + 1) <= 1)
          {
            v334 += 2;
            v335 -= 16;
            if (!v335)
            {
              v334 = v333;
              break;
            }
          }
        }
LABEL_863:
        if (v331)
          v414 = &v331[2 * *((unsigned int *)v331 - 1)];
        else
          v414 = 0;
        if (v414 == v334)
          goto LABEL_372;
        while (1)
        {
          v415 = v334[1];
          v476 = v478;
          v477 = v479;
          v416 = (float32x2_t *)*((_QWORD *)this + 27);
          if (!v416)
            goto LABEL_873;
          v417 = *v334;
          if (!*v334 || !*(_DWORD *)(v417 + 4))
            goto LABEL_873;
          v418 = *(_BYTE **)(v417 + 8);
          if ((*(_BYTE *)(v417 + 16) & 4) == 0)
            break;
          if ((*v418 & 1) != 0)
            goto LABEL_872;
LABEL_873:
          (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v415 + 272))(v415, &v476);
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v415 + 256))(v415, v484);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v415 + 288))(v415, (char *)this + 76);
          v419 = v334 + 2;
          v334 = v333;
          if (v419 != v333)
          {
            v334 = v419;
            while ((unint64_t)(*v334 + 1) <= 1)
            {
              v334 += 2;
              if (v334 == v333)
              {
                v334 = v333;
                break;
              }
            }
          }
          if (v334 == v414)
            goto LABEL_372;
        }
        if ((*(_WORD *)v418 & 1) == 0)
          goto LABEL_873;
LABEL_872:
        v476 = vmla_f32(v416[29], *(float32x2_t *)((char *)this + 88), *(float32x2_t *)((char *)this + 76));
        v477 = 0.0;
        goto LABEL_873;
      }
      v334 = &v331[2 * v332];
    }
    else
    {
      v334 = 0;
      v332 = 0;
    }
    v333 = &v331[2 * v332];
    goto LABEL_863;
  }
LABEL_17:
  *((_QWORD *)this + 94) = LODWORD(v19) | ((unint64_t)LODWORD(v18) << 32);
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 78) + 272))(*((_QWORD *)this + 78), &v480);
  v21 = *((float *)this + 25) - v18;
  *(float *)v484 = *((float *)this + 24) - v19;
  *((float *)v484 + 1) = v21;
  v484[1] = *((WTF::StringImpl **)this + 11);
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 78) + 256))(*((_QWORD *)this + 78), v484);
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 78) + 288))(*((_QWORD *)this + 78), &v482);
  v22 = (uint64_t **)*((_QWORD *)this + 86);
  if (v22)
  {
    v301 = *v22;
    if (v301)
    {
      v302 = *((unsigned int *)v301 - 1);
      v303 = &v301[2 * v302];
      if (*((_DWORD *)v301 - 3))
      {
        v304 = v301;
        if ((_DWORD)v302)
        {
          v305 = 16 * v302;
          v304 = v301;
          while ((unint64_t)(*v304 + 1) <= 1)
          {
            v304 += 2;
            v305 -= 16;
            if (!v305)
            {
              v304 = v303;
              break;
            }
          }
        }
LABEL_841:
        if (v301)
          v408 = &v301[2 * *((unsigned int *)v301 - 1)];
        else
          v408 = 0;
        if (v408 == v304)
          goto LABEL_18;
        while (1)
        {
          v409 = v304[1];
          v478 = (float32x2_t)v480;
          v479 = v481;
          if (*((_QWORD *)this + 79))
            goto LABEL_846;
          v411 = (float32x2_t *)*((_QWORD *)this + 27);
          if (!v411)
            goto LABEL_846;
          v412 = *v304;
          if (!*v304 || !*(_DWORD *)(v412 + 4))
            goto LABEL_846;
          v413 = *(_BYTE **)(v412 + 8);
          if ((*(_BYTE *)(v412 + 16) & 4) == 0)
            break;
          if ((*v413 & 1) != 0)
            goto LABEL_858;
LABEL_846:
          (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v409 + 272))(v409, &v478);
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v409 + 256))(v409, v484);
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v409 + 288))(v409, &v482);
          v410 = v304 + 2;
          v304 = v303;
          if (v410 != v303)
          {
            v304 = v410;
            while ((unint64_t)(*v304 + 1) <= 1)
            {
              v304 += 2;
              if (v304 == v303)
              {
                v304 = v303;
                break;
              }
            }
          }
          if (v304 == v408)
            goto LABEL_18;
        }
        if ((*(_WORD *)v413 & 1) == 0)
          goto LABEL_846;
LABEL_858:
        v478 = vmla_f32(v411[29], *(float32x2_t *)((char *)this + 88), *(float32x2_t *)((char *)this + 76));
        v479 = 0.0;
        goto LABEL_846;
      }
      v304 = &v301[2 * v302];
    }
    else
    {
      v304 = 0;
      v302 = 0;
    }
    v303 = &v301[2 * v302];
    goto LABEL_841;
  }
LABEL_18:
  v13 = *((_QWORD *)this + 77);
LABEL_19:
  if ((v13 & 0x100) == 0)
    goto LABEL_22;
  v23 = **((_QWORD **)this + 78);
  if ((*(_WORD *)((_BYTE *)this + 177) & 0x20) != 0)
  {
    (*(void (**)(void))(v23 + 72))();
    *((_BYTE *)this + 890) &= ~0x10u;
    goto LABEL_22;
  }
  (*(void (**)(void))(v23 + 504))();
  v276 = (uint64_t *)*((_QWORD *)this + 86);
  if (v276)
  {
    v277 = *v276;
    if (v277)
    {
      v278 = *(unsigned int *)(v277 - 4);
      v279 = v277 + 16 * v278;
      if (*(_DWORD *)(v277 - 12))
      {
        v280 = v277;
        if ((_DWORD)v278)
        {
          v281 = 16 * v278;
          v280 = v277;
          while ((unint64_t)(*(_QWORD *)v280 + 1) <= 1)
          {
            v280 += 16;
            v281 -= 16;
            if (!v281)
            {
              v280 = v279;
              goto LABEL_815;
            }
          }
        }
        goto LABEL_815;
      }
      v280 = v277 + 16 * v278;
    }
    else
    {
      v280 = 0;
      v278 = 0;
    }
    v279 = v277 + 16 * v278;
LABEL_815:
    if (v277)
      v404 = v277 + 16 * *(unsigned int *)(v277 - 4);
    else
      v404 = 0;
    while (v280 != v404)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v280 + 8) + 496))(*(_QWORD *)(v280 + 8), 0);
      v405 = v280 + 16;
      v280 = v279;
      if (v405 != v279)
      {
        v280 = v405;
        while ((unint64_t)(*(_QWORD *)v280 + 1) <= 1)
        {
          v280 += 16;
          if (v280 == v279)
          {
            v280 = v279;
            break;
          }
        }
      }
    }
  }
LABEL_22:
  v24 = *((_QWORD *)this + 77);
  if ((v24 & 2) == 0)
    goto LABEL_33;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 48))(v484, this);
  if ((*(_WORD *)((_BYTE *)this + 177) & 4) == 0 || *((_BYTE *)this + 169) == 1)
  {
    if (*((_QWORD *)this + 27))
      v25 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance;
    else
      v25 = 0;
    if (!v25)
    {
      if (!*((_DWORD *)this + 41))
        goto LABEL_29;
      v191 = *((_QWORD *)this + 79);
      v192 = (unsigned __int8 *)v484[0];
      if (v484[0])
      {
        v212 = *((_DWORD *)v484[0] + 1);
        *(_DWORD *)v484[0] += 2;
        if (v212 < 0 || (v213 = (v212 + 18), __OFADD__(v212, 18)))
        {
          v482 = 0;
          goto LABEL_1023;
        }
        v214 = (v192[16] >> 2) & 1;
      }
      else
      {
        v214 = 1;
        v213 = 18;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v213, v214, (int8x16_t *)"backdrop hosting: ", 0x12u, (uint64_t)v192, &v482);
      if (v482)
        goto LABEL_408;
LABEL_1023:
      __break(0xC471u);
      JUMPOUT(0x1943FD500);
    }
    v191 = *((_QWORD *)this + 79);
    v192 = (unsigned __int8 *)v484[0];
    if (v484[0])
    {
      v432 = *((_DWORD *)v484[0] + 1);
      *(_DWORD *)v484[0] += 2;
      if (v432 < 0 || (v433 = (v432 + 20), __OFADD__(v432, 20)))
      {
        v482 = 0;
LABEL_1031:
        __break(0xC471u);
LABEL_1032:
        JUMPOUT(0x1943FD2E0);
      }
      v434 = (v192[16] >> 2) & 1;
    }
    else
    {
      v434 = 1;
      v433 = 20;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v433, v434, (int8x16_t *)"replica flattening: ", 0x14u, (uint64_t)v192, &v482);
    if (v482)
      goto LABEL_408;
    goto LABEL_1031;
  }
  v191 = *((_QWORD *)this + 79);
  v192 = (unsigned __int8 *)v484[0];
  if (v484[0])
  {
    v193 = *((_DWORD *)v484[0] + 1);
    *(_DWORD *)v484[0] += 2;
    if (v193 < 0 || (v194 = (v193 + 13), __OFADD__(v193, 13)))
    {
      v482 = 0;
LABEL_1029:
      __break(0xC471u);
      JUMPOUT(0x1943FD52CLL);
    }
    v195 = (v192[16] >> 2) & 1;
  }
  else
  {
    v195 = 1;
    v194 = 13;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v194, v195, (int8x16_t *)"preserve-3d: ", 0xDu, (uint64_t)v192, &v482);
  if (!v482)
    goto LABEL_1029;
LABEL_408:
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v191 + 640))(v191, &v482);
  v216 = v482;
  v482 = 0;
  if (!v216)
    goto LABEL_411;
  if (*(_DWORD *)v216 != 2)
  {
    *(_DWORD *)v216 -= 2;
LABEL_411:
    if (v192)
      goto LABEL_412;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy(v216, v215);
  if (v192)
  {
LABEL_412:
    if (*(_DWORD *)v192 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v192, v215);
    else
      *(_DWORD *)v192 -= 2;
  }
LABEL_29:
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 78) + 640))(*((_QWORD *)this + 78), v484);
  v26 = v484[0];
  v484[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v24 = *((_QWORD *)this + 77);
LABEL_33:
  if ((v24 & 0x8000) == 0)
  {
    if ((v24 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_103;
  }
  v27 = (unsigned int *)*((_QWORD *)this + 83);
  if (*((_QWORD *)this + 98))
  {
    if (!v27)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::GraphicsLayerCA *, _QWORD, char *))(*(_QWORD *)this + 1208))(&v482, this, 0, (char *)this + 608);
      v28 = v482;
      v482 = 0;
      v29 = *((_QWORD *)this + 83);
      *((_QWORD *)this + 83) = v28;
      if (v29)
      {
        v30 = (unsigned int *)(v29 + 8);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          v336 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v336 = off_1E334ED68;
          *((_QWORD *)v336 + 1) = v30;
          v484[0] = v336;
          WTF::ensureOnMainThread();
          v337 = v484[0];
          v484[0] = 0;
          if (v337)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v337 + 8))(v337);
        }
        v33 = v482;
        v482 = 0;
        if (v33)
        {
          v182 = (unsigned int *)((char *)v33 + 8);
          do
          {
            v183 = __ldaxr(v182);
            v184 = v183 - 1;
          }
          while (__stlxr(v184, v182));
          if (!v184)
          {
            atomic_store(1u, v182);
            v185 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v185 = off_1E334ED68;
            *((_QWORD *)v185 + 1) = v182;
            v484[0] = v185;
            WTF::ensureOnMainThread();
            v186 = v484[0];
            v484[0] = 0;
            if (v186)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v186 + 8))(v186);
          }
        }
      }
      v34 = *((_QWORD *)this + 83);
      dword_1ECE7D240 += 2;
      v484[0] = (WTF::StringImpl *)&dword_1ECE7D240;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 640))(v34, v484);
      v36 = v484[0];
      v484[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v35);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = *((_QWORD *)this + 83);
      LODWORD(v484[1]) = 0;
      v484[0] = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v37 + 288))(v37, v484);
      v38 = 0x11040000000080B4;
      if ((*(_WORD *)((_BYTE *)this + 177) & 0x2000) == 0)
        v38 = 0;
      v484[0] = (WTF::StringImpl *)v38;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v37 + 592))(v37, v484);
      v39.n128_u32[0] = 0;
      if ((BYTE6(v484[0]) & 4) != 0)
        v39.n128_u32[0] = 4.0;
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v37 + 584))(v37, v39);
      if (((unint64_t)v484[0] & 0x8000000000000) != 0)
      {
        v463 = (unsigned int *)((unint64_t)v484[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v464 = __ldaxr(v463);
          v465 = v464 - 1;
        }
        while (__stlxr(v465, v463));
        if (!v465)
        {
          atomic_store(1u, v463);
          WTF::fastFree((WTF *)v463, v40);
        }
      }
      v27 = (unsigned int *)*((_QWORD *)this + 83);
    }
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v27 + 552))(v27, 2);
    v41 = *((_QWORD *)this + 83);
    v42 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 98) + 48) + 16))(*(_QWORD *)(*((_QWORD *)this + 98) + 48));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 496))(v41, *v42);
    v44 = *((_QWORD *)this + 98);
    *((_QWORD *)this + 98) = 0;
    if (!v44)
    {
LABEL_80:
      v57 = *((_QWORD *)this + 86);
      if (!v57)
      {
LABEL_101:
        WebCore::GraphicsLayerCA::updateContentsRects(this);
        goto LABEL_102;
      }
      v58 = *(_QWORD **)(v57 + 16);
      if (v58)
      {
        v59 = *((unsigned int *)v58 - 1);
        v60 = &v58[2 * v59];
        if (*((_DWORD *)v58 - 3))
        {
          v61 = v58;
          if ((_DWORD)v59)
          {
            v62 = 16 * v59;
            v61 = v58;
            while ((unint64_t)(*v61 + 1) <= 1)
            {
              v61 += 2;
              v62 -= 16;
              if (!v62)
              {
                v61 = v60;
                goto LABEL_91;
              }
            }
          }
          goto LABEL_91;
        }
        v61 = &v58[2 * v59];
      }
      else
      {
        v61 = 0;
        v59 = 0;
      }
      v60 = &v58[2 * v59];
LABEL_91:
      if (v58)
        v63 = &v58[2 * *((unsigned int *)v58 - 1)];
      else
        v63 = 0;
      while (v61 != v63)
      {
        v64 = v61[1];
        v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 83) + 488))(*((_QWORD *)this + 83));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 496))(v64, v65);
        v66 = v61 + 2;
        v61 = v60;
        if (v66 != v60)
        {
          v61 = v66;
          while ((unint64_t)(*v61 + 1) <= 1)
          {
            v61 += 2;
            if (v61 == v60)
            {
              v61 = v60;
              break;
            }
          }
        }
      }
      goto LABEL_101;
    }
    v45 = *(_QWORD *)(v44 + 8);
    if (__ldaxr((unsigned __int8 *)v45))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v45))
    {
      goto LABEL_68;
    }
    MEMORY[0x19AEA534C](v45);
LABEL_68:
    v52 = *(_QWORD *)(v45 + 8);
    v53 = v52 - 1;
    *(_QWORD *)(v45 + 8) = v52 - 1;
    if (v52 == 1)
    {
      v273 = *(_QWORD *)(v45 + 16);
      v54 = *(_QWORD *)(v45 + 24);
      *(_QWORD *)(v45 + 24) = 0;
      v55 = v273 != 0;
    }
    else
    {
      v54 = 0;
      v55 = 1;
    }
    v56 = __ldxr((unsigned __int8 *)v45);
    if (v56 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v45))
      {
        if (v53)
          goto LABEL_80;
LABEL_76:
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
        if (!v55)
          WTF::fastFree((WTF *)v45, v43);
        goto LABEL_80;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v45);
    if (v53)
      goto LABEL_80;
    goto LABEL_76;
  }
  *((_QWORD *)this + 83) = 0;
  if (v27)
  {
    v47 = v27 + 2;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      v50 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v50 = off_1E334ED68;
      *((_QWORD *)v50 + 1) = v47;
      v484[0] = v50;
      WTF::ensureOnMainThread();
      v51 = v484[0];
      v484[0] = 0;
      if (v51)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
LABEL_102:
  v24 = *((_QWORD *)this + 77);
  if ((v24 & 0x10000) == 0)
  {
LABEL_35:
    if ((v24 & 0x20000) == 0)
      goto LABEL_36;
    goto LABEL_118;
  }
LABEL_103:
  a2 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  if (a2)
  {
    v67 = *((_QWORD *)this + 100);
    if (v67)
    {
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
      a2 = (WTF::StringImpl *)*((_QWORD *)this + 83);
    }
    else
    {
      v68 = 0;
    }
    WebCore::GraphicsLayerCA::setupContentsLayer((uint64_t)this, (uint64_t)a2, v68);
    if (*((_BYTE *)this + 888) == 3)
      (*(void (**)(_QWORD))(**((_QWORD **)this + 83) + 72))(*((_QWORD *)this + 83));
    WebCore::GraphicsLayerCA::updateContentsRects(this);
    v69 = *((_QWORD *)this + 83);
    if (v69)
    {
      v70 = *((_DWORD *)this + 80);
      if (v70 == 2)
        v71 = 2;
      else
        v71 = v70 == 1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 552))(v69, v71);
      v72 = *((_DWORD *)this + 81);
      if (v72 == 2)
        v73 = 2;
      else
        v73 = v72 == 1;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 83) + 560))(*((_QWORD *)this + 83), v73);
    }
  }
  v24 = *((_QWORD *)this + 77);
  if ((v24 & 0x20000) == 0)
  {
LABEL_36:
    if ((v24 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_119;
  }
LABEL_118:
  WebCore::GraphicsLayerCA::updateContentsColorLayer(this);
  v24 = *((_QWORD *)this + 77);
  if ((v24 & 0x200) == 0)
  {
LABEL_37:
    if ((v24 & 0x10) == 0)
      goto LABEL_38;
    goto LABEL_120;
  }
LABEL_119:
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 78) + 576))(*((_QWORD *)this + 78), (char *)this + 120);
  v24 = *((_QWORD *)this + 77);
  if ((v24 & 0x10) == 0)
  {
LABEL_38:
    if ((v24 & 0x20) == 0)
      goto LABEL_39;
LABEL_126:
    v77 = *((_QWORD *)this + 79);
    if (!v77)
      v77 = *((_QWORD *)this + 78);
    if (*((_QWORD *)this + 14))
      v78 = (__int128 *)*((_QWORD *)this + 14);
    else
      v78 = &WebCore::TransformationMatrix::identity;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v77 + 320))(v77, v78);
    v79 = *((_QWORD *)this + 86);
    if (!v79)
      goto LABEL_132;
    v253 = *(_QWORD *)(v79 + 8 * (*((_QWORD *)this + 79) != 0));
    if (v253)
    {
      v254 = *(unsigned int *)(v253 - 4);
      v255 = v253 + 16 * v254;
      if (*(_DWORD *)(v253 - 12))
      {
        v256 = v253;
        if ((_DWORD)v254)
        {
          v257 = 16 * v254;
          v256 = v253;
          while ((unint64_t)(*(_QWORD *)v256 + 1) <= 1)
          {
            v256 += 16;
            v257 -= 16;
            if (!v257)
            {
              v256 = v255;
              goto LABEL_640;
            }
          }
        }
        goto LABEL_640;
      }
      v256 = v253 + 16 * v254;
    }
    else
    {
      v256 = 0;
      v254 = 0;
    }
    v255 = v253 + 16 * v254;
LABEL_640:
    if (v253)
      v346 = v253 + 16 * *(unsigned int *)(v253 - 4);
    else
      v346 = 0;
    while (v256 != v346)
    {
      v347 = &WebCore::TransformationMatrix::identity;
      if (*((_QWORD *)this + 14))
        v347 = (__int128 *)*((_QWORD *)this + 14);
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v256 + 8) + 320))(*(_QWORD *)(v256 + 8), v347);
      v348 = v256 + 16;
      v256 = v255;
      if (v348 != v255)
      {
        v256 = v348;
        while ((unint64_t)(*(_QWORD *)v256 + 1) <= 1)
        {
          v256 += 16;
          if (v256 == v255)
          {
            v256 = v255;
            break;
          }
        }
      }
    }
LABEL_132:
    if ((*((_QWORD *)this + 77) & 0x80) == 0)
      goto LABEL_134;
    goto LABEL_133;
  }
LABEL_120:
  v74 = *((_QWORD *)this + 79);
  if (!v74)
    v74 = *((_QWORD *)this + 78);
  v75 = (__int128 *)*((_QWORD *)this + 13);
  if (!v75)
    v75 = &WebCore::TransformationMatrix::identity;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v74 + 304))(v74, v75);
  v76 = *((_QWORD *)this + 86);
  if (v76)
  {
    v248 = *(uint64_t **)(v76 + 8 * (*((_QWORD *)this + 79) != 0));
    if (v248)
    {
      v249 = *((unsigned int *)v248 - 1);
      v250 = &v248[2 * v249];
      if (*((_DWORD *)v248 - 3))
      {
        v251 = v248;
        if ((_DWORD)v249)
        {
          v252 = 16 * v249;
          v251 = v248;
          while ((unint64_t)(*v251 + 1) <= 1)
          {
            v251 += 2;
            v252 -= 16;
            if (!v252)
            {
              v251 = v250;
              break;
            }
          }
        }
LABEL_619:
        if (v248)
          v340 = &v248[2 * *((unsigned int *)v248 - 1)];
        else
          v340 = 0;
        if (v340 == v251)
          goto LABEL_125;
        while (1)
        {
          v341 = v251[1];
          if (*((_QWORD *)this + 27))
          {
            v342 = *v251;
            if (*v251)
            {
              if (*(_DWORD *)(v342 + 4))
              {
                v343 = *(_BYTE **)(v342 + 8);
                if ((*(_BYTE *)(v342 + 16) & 4) != 0)
                {
                  if ((*v343 & 1) != 0)
                    goto LABEL_630;
                }
                else if ((*(_WORD *)v343 & 1) != 0)
                {
LABEL_630:
                  v488 = xmmword_1969F7F50;
                  v489 = unk_1969F7F60;
                  v490 = xmmword_1969F7F70;
                  v491 = unk_1969F7F80;
                  *(_OWORD *)v484 = xmmword_1969F7F10;
                  v485 = unk_1969F7F20;
                  v486 = xmmword_1969F7F30;
                  v487 = unk_1969F7F40;
                  v344 = *(void (**)(void))(*(_QWORD *)v341 + 304);
                  goto LABEL_631;
                }
              }
            }
          }
          v344 = *(void (**)(void))(*(_QWORD *)v341 + 304);
LABEL_631:
          v344();
          v345 = v251 + 2;
          v251 = v250;
          if (v345 != v250)
          {
            v251 = v345;
            while ((unint64_t)(*v251 + 1) <= 1)
            {
              v251 += 2;
              if (v251 == v250)
              {
                v251 = v250;
                break;
              }
            }
          }
          if (v251 == v340)
            goto LABEL_125;
        }
      }
      v251 = &v248[2 * v249];
    }
    else
    {
      v251 = 0;
      v249 = 0;
    }
    v250 = &v248[2 * v249];
    goto LABEL_619;
  }
LABEL_125:
  v24 = *((_QWORD *)this + 77);
  if ((v24 & 0x20) != 0)
    goto LABEL_126;
LABEL_39:
  if ((v24 & 0x80) == 0)
    goto LABEL_134;
LABEL_133:
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 78) + 440))(*((_QWORD *)this + 78), (*(unsigned __int16 *)((char *)this + 177) >> 4) & 1);
  v80 = (uint64_t *)*((_QWORD *)this + 86);
  if (!v80)
    goto LABEL_134;
  v241 = *v80;
  if (v241)
  {
    v242 = *(unsigned int *)(v241 - 4);
    v243 = v241 + 16 * v242;
    if (*(_DWORD *)(v241 - 12))
    {
      v244 = v241;
      if ((_DWORD)v242)
      {
        v245 = 16 * v242;
        v244 = v241;
        while ((unint64_t)(*(_QWORD *)v244 + 1) <= 1)
        {
          v244 += 16;
          v245 -= 16;
          if (!v245)
          {
            v244 = v243;
            goto LABEL_603;
          }
        }
      }
      goto LABEL_603;
    }
    v244 = v241 + 16 * v242;
  }
  else
  {
    v244 = 0;
    v242 = 0;
  }
  v243 = v241 + 16 * v242;
LABEL_603:
  if (v241)
    v338 = v241 + 16 * *(unsigned int *)(v241 - 4);
  else
    v338 = 0;
  while (v244 != v338)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v244 + 8) + 440))(*(_QWORD *)(v244 + 8), (*(unsigned __int16 *)((char *)this + 177) >> 4) & 1);
    v339 = v244 + 16;
    v244 = v243;
    if (v339 != v243)
    {
      v244 = v339;
      while ((unint64_t)(*(_QWORD *)v244 + 1) <= 1)
      {
        v244 += 16;
        if (v244 == v243)
        {
          v244 = v243;
          break;
        }
      }
    }
  }
LABEL_134:
  v81 = *((_QWORD *)this + 77);
  if ((v81 & 0x2000000) == 0)
  {
    if ((v81 & 0x1000000000) == 0)
      goto LABEL_136;
    goto LABEL_171;
  }
  if ((*(_WORD *)((_BYTE *)this + 177) & 0x40) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 504))(*((_QWORD *)this + 78));
    v82 = (uint64_t *)*((_QWORD *)this + 86);
    if (!v82)
    {
LABEL_167:
      v92 = *((_QWORD *)this + 85);
      if (!v92)
        goto LABEL_170;
      v89 = *(void (**)(void))(*(_QWORD *)v92 + 360);
      goto LABEL_169;
    }
    v83 = *v82;
    if (v83)
    {
      v84 = *(unsigned int *)(v83 - 4);
      v85 = v83 + 16 * v84;
      if (*(_DWORD *)(v83 - 12))
      {
        v86 = v83;
        if ((_DWORD)v84)
        {
          v87 = 16 * v84;
          v86 = v83;
          while ((unint64_t)(*(_QWORD *)v86 + 1) <= 1)
          {
            v86 += 16;
            v87 -= 16;
            if (!v87)
            {
              v86 = v85;
              goto LABEL_157;
            }
          }
        }
        goto LABEL_157;
      }
      v86 = v83 + 16 * v84;
    }
    else
    {
      v86 = 0;
      v84 = 0;
    }
    v85 = v83 + 16 * v84;
LABEL_157:
    if (v83)
      v90 = v83 + 16 * *(unsigned int *)(v83 - 4);
    else
      v90 = 0;
    while (v86 != v90)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v86 + 8) + 496))(*(_QWORD *)(v86 + 8), 0);
      v91 = v86 + 16;
      v86 = v85;
      if (v91 != v85)
      {
        v86 = v91;
        while ((unint64_t)(*(_QWORD *)v86 + 1) <= 1)
        {
          v86 += 16;
          if (v86 == v85)
          {
            v86 = v85;
            break;
          }
        }
      }
    }
    goto LABEL_167;
  }
  if ((*(_WORD *)((_BYTE *)this + 177) & 0x20) != 0)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 72))(*((_QWORD *)this + 78));
  v88 = *((_QWORD *)this + 85);
  if (v88)
  {
    v89 = *(void (**)(void))(*(_QWORD *)v88 + 360);
LABEL_169:
    v89();
  }
LABEL_170:
  (*(void (**)(_QWORD, BOOL))(**((_QWORD **)this + 78) + 376))(*((_QWORD *)this + 78), (*(_WORD *)((_BYTE *)this + 177) & 0x40) == 0);
  v81 = *((_QWORD *)this + 77);
  if ((v81 & 0x1000000000) == 0)
  {
LABEL_136:
    if ((v81 & 0x400) == 0)
      goto LABEL_137;
    goto LABEL_172;
  }
LABEL_171:
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 78) + 392))(*((_QWORD *)this + 78), (*((unsigned __int8 *)this + 179) >> 2) & 1);
  v81 = *((_QWORD *)this + 77);
  if ((v81 & 0x400) == 0)
  {
LABEL_137:
    if ((v81 & 0x800) == 0)
      goto LABEL_138;
    goto LABEL_180;
  }
LABEL_172:
  v93 = *(_WORD *)((char *)this + 177);
  if ((v93 & 2) != 0)
  {
    v95 = v93 & 2;
    if ((*(_WORD *)((_BYTE *)this + 177) & 0x1000) != 0)
      v96 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
    else
      v96 = 1.0;
    v97 = v95 >> 1;
    if ((float)(v96 * a5) != (float)(int)(float)(v96 * a5)
      && !(*(unsigned int (**)(_QWORD, WebCore::GraphicsLayerCA *))(**((_QWORD **)this + 3) + 128))(*((_QWORD *)this + 3), this))
    {
      v97 = 0;
    }
    v94 = v97 != 0;
  }
  else
  {
    v94 = 0;
  }
  (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 78) + 240))(*((_QWORD *)this + 78), v94);
  v98 = (uint64_t *)*((_QWORD *)this + 86);
  if (!v98)
    goto LABEL_179;
  v220 = *v98;
  if (v220)
  {
    v221 = *(unsigned int *)(v220 - 4);
    v222 = v220 + 16 * v221;
    if (*(_DWORD *)(v220 - 12))
    {
      v223 = v220;
      if ((_DWORD)v221)
      {
        v224 = 16 * v221;
        v223 = v220;
        while ((unint64_t)(*(_QWORD *)v223 + 1) <= 1)
        {
          v223 += 16;
          v224 -= 16;
          if (!v224)
          {
            v223 = v222;
            goto LABEL_510;
          }
        }
      }
      goto LABEL_510;
    }
    v223 = v220 + 16 * v221;
  }
  else
  {
    v223 = 0;
    v221 = 0;
  }
  v222 = v220 + 16 * v221;
LABEL_510:
  if (v220)
    v282 = v220 + 16 * *(unsigned int *)(v220 - 4);
  else
    v282 = 0;
  while (v223 != v282)
  {
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v223 + 8) + 240))(*(_QWORD *)(v223 + 8), v94);
    v283 = v223 + 16;
    v223 = v222;
    if (v283 != v222)
    {
      v223 = v283;
      while ((unint64_t)(*(_QWORD *)v223 + 1) <= 1)
      {
        v223 += 16;
        if (v223 == v222)
        {
          v223 = v222;
          break;
        }
      }
    }
  }
LABEL_179:
  v81 = *((_QWORD *)this + 77);
  if ((v81 & 0x800) == 0)
  {
LABEL_138:
    if ((v81 & 0x1000) == 0)
      goto LABEL_139;
    goto LABEL_183;
  }
LABEL_180:
  v99 = *((_QWORD *)this + 79);
  if (!v99)
    goto LABEL_181;
  v163 = *(unsigned __int16 *)((char *)this + 177);
  v164 = v163 | (*((unsigned __int8 *)this + 179) << 16);
  if ((v163 & 4) != 0 && *((_BYTE *)this + 169) != 1)
    goto LABEL_181;
  v165 = *((_QWORD *)this + 27)
       ? WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance
       : 0;
  if (!v165 && !*((_DWORD *)this + 41))
    goto LABEL_181;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v99 + 424))(v99, (v164 >> 3) & 1);
  v166 = *((_QWORD *)this + 86);
  if (!v166)
    goto LABEL_181;
  v167 = *(_QWORD *)(v166 + 8);
  if (v167)
  {
    v168 = *(unsigned int *)(v167 - 4);
    v169 = v167 + 16 * v168;
    if (*(_DWORD *)(v167 - 12))
    {
      v170 = v167;
      if ((_DWORD)v168)
      {
        v171 = 16 * v168;
        v170 = v167;
        while ((unint64_t)(*(_QWORD *)v170 + 1) <= 1)
        {
          v170 += 16;
          v171 -= 16;
          if (!v171)
          {
            v170 = v169;
            goto LABEL_973;
          }
        }
      }
      goto LABEL_973;
    }
    v170 = v167 + 16 * v168;
  }
  else
  {
    v170 = 0;
    v168 = 0;
  }
  v169 = v167 + 16 * v168;
LABEL_973:
  if (v167)
    v453 = v167 + 16 * *(unsigned int *)(v167 - 4);
  else
    v453 = 0;
  while (v170 != v453)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v170 + 8) + 424))(*(_QWORD *)(v170 + 8), (*(unsigned __int16 *)((char *)this + 177) >> 3) & 1);
    v454 = v170 + 16;
    v170 = v169;
    if (v454 != v169)
    {
      v170 = v454;
      while ((unint64_t)(*(_QWORD *)v170 + 1) <= 1)
      {
        v170 += 16;
        if (v170 == v169)
        {
          v170 = v169;
          break;
        }
      }
    }
  }
LABEL_181:
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 78) + 424))(*((_QWORD *)this + 78), (*(unsigned __int16 *)((char *)this + 177) >> 3) & 1);
  v100 = (uint64_t *)*((_QWORD *)this + 86);
  if (!v100)
    goto LABEL_182;
  v207 = *v100;
  if (v207)
  {
    v208 = *(unsigned int *)(v207 - 4);
    v209 = v207 + 16 * v208;
    if (*(_DWORD *)(v207 - 12))
    {
      v210 = v207;
      if ((_DWORD)v208)
      {
        v211 = 16 * v208;
        v210 = v207;
        while ((unint64_t)(*(_QWORD *)v210 + 1) <= 1)
        {
          v210 += 16;
          v211 -= 16;
          if (!v211)
          {
            v210 = v209;
            goto LABEL_450;
          }
        }
      }
      goto LABEL_450;
    }
    v210 = v207 + 16 * v208;
  }
  else
  {
    v210 = 0;
    v208 = 0;
  }
  v209 = v207 + 16 * v208;
LABEL_450:
  if (v207)
    v246 = v207 + 16 * *(unsigned int *)(v207 - 4);
  else
    v246 = 0;
  while (v210 != v246)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v210 + 8) + 424))(*(_QWORD *)(v210 + 8), (*(unsigned __int16 *)((char *)this + 177) >> 3) & 1);
    v247 = v210 + 16;
    v210 = v209;
    if (v247 != v209)
    {
      v210 = v247;
      while ((unint64_t)(*(_QWORD *)v210 + 1) <= 1)
      {
        v210 += 16;
        if (v210 == v209)
        {
          v210 = v209;
          break;
        }
      }
    }
  }
LABEL_182:
  v81 = *((_QWORD *)this + 77);
  if ((v81 & 0x1000) == 0)
  {
LABEL_139:
    if ((v81 & 0x8000000) == 0)
      goto LABEL_192;
LABEL_188:
    v104 = *((_QWORD *)this + 79);
    if (!v104)
      v104 = *((_QWORD *)this + 78);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v104 + 616))(v104, (char *)this + 136);
    v105 = *((_QWORD *)this + 86);
    if (!v105)
      goto LABEL_191;
    v263 = *(uint64_t **)(v105 + 8 * (*((_QWORD *)this + 79) != 0));
    if (v263)
    {
      v264 = *((unsigned int *)v263 - 1);
      v265 = &v263[2 * v264];
      if (*((_DWORD *)v263 - 3))
      {
        v266 = v263;
        if ((_DWORD)v264)
        {
          v267 = 16 * v264;
          v266 = v263;
          while ((unint64_t)(*v266 + 1) <= 1)
          {
            v266 += 2;
            v267 -= 16;
            if (!v267)
            {
              v266 = v265;
              break;
            }
          }
        }
LABEL_676:
        if (v263)
          v353 = &v263[2 * *((unsigned int *)v263 - 1)];
        else
          v353 = 0;
        if (v353 == v266)
        {
LABEL_191:
          v81 = *((_QWORD *)this + 77);
          goto LABEL_192;
        }
        while (1)
        {
          if (!*((_QWORD *)this + 27))
            goto LABEL_685;
          v354 = *v266;
          if (!*v266 || !*(_DWORD *)(v354 + 4))
            goto LABEL_685;
          v355 = *(_BYTE **)(v354 + 8);
          if ((*(_BYTE *)(v354 + 16) & 4) == 0)
            break;
          if ((*v355 & 1) == 0)
            goto LABEL_685;
LABEL_686:
          v356 = v266 + 2;
          v266 = v265;
          if (v356 != v265)
          {
            v266 = v356;
            while ((unint64_t)(*v266 + 1) <= 1)
            {
              v266 += 2;
              if (v266 == v265)
              {
                v266 = v265;
                break;
              }
            }
          }
          if (v266 == v353)
            goto LABEL_191;
        }
        if ((*(_WORD *)v355 & 1) != 0)
          goto LABEL_686;
LABEL_685:
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v266[1] + 616))(v266[1], (char *)this + 136);
        goto LABEL_686;
      }
      v266 = &v263[2 * v264];
    }
    else
    {
      v266 = 0;
      v264 = 0;
    }
    v265 = &v263[2 * v264];
    goto LABEL_676;
  }
LABEL_183:
  v101 = *((_QWORD *)this + 79);
  if (!v101)
    v101 = *((_QWORD *)this + 78);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v101 + 608))(v101, *((float *)this + 32));
  v102 = *((_QWORD *)this + 86);
  if (v102)
  {
    v258 = *(uint64_t **)(v102 + 8 * (*((_QWORD *)this + 79) != 0));
    if (v258)
    {
      v259 = *((unsigned int *)v258 - 1);
      v260 = &v258[2 * v259];
      if (*((_DWORD *)v258 - 3))
      {
        v261 = v258;
        if ((_DWORD)v259)
        {
          v262 = 16 * v259;
          v261 = v258;
          while ((unint64_t)(*v261 + 1) <= 1)
          {
            v261 += 2;
            v262 -= 16;
            if (!v262)
            {
              v261 = v260;
              break;
            }
          }
        }
LABEL_655:
        if (v258)
          v349 = &v258[2 * *((unsigned int *)v258 - 1)];
        else
          v349 = 0;
        if (v349 == v261)
          goto LABEL_186;
        while (1)
        {
          if (!*((_QWORD *)this + 27))
            goto LABEL_664;
          v350 = *v261;
          if (!*v261 || !*(_DWORD *)(v350 + 4))
            goto LABEL_664;
          v351 = *(_BYTE **)(v350 + 8);
          if ((*(_BYTE *)(v350 + 16) & 4) == 0)
            break;
          if ((*v351 & 1) == 0)
            goto LABEL_664;
LABEL_665:
          v352 = v261 + 2;
          v261 = v260;
          if (v352 != v260)
          {
            v261 = v352;
            while ((unint64_t)(*v261 + 1) <= 1)
            {
              v261 += 2;
              if (v261 == v260)
              {
                v261 = v260;
                break;
              }
            }
          }
          if (v261 == v349)
            goto LABEL_186;
        }
        if ((*(_WORD *)v351 & 1) != 0)
          goto LABEL_665;
LABEL_664:
        (*(void (**)(uint64_t, float))(*(_QWORD *)v261[1] + 608))(v261[1], *((float *)this + 32));
        goto LABEL_665;
      }
      v261 = &v258[2 * v259];
    }
    else
    {
      v261 = 0;
      v259 = 0;
    }
    v260 = &v258[2 * v259];
    goto LABEL_655;
  }
LABEL_186:
  v103 = *((_QWORD *)this + 83);
  if (v103 && *((_BYTE *)this + 888) == 6)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v103 + 608))(v103, *((float *)this + 32));
  v81 = *((_QWORD *)this + 77);
  if ((v81 & 0x8000000) != 0)
    goto LABEL_188;
LABEL_192:
  v106 = *((_DWORD *)this + 41);
  if ((v81 & 0x10000000) != 0)
  {
    if (!v106)
      goto LABEL_214;
  }
  else if (!v106)
  {
    goto LABEL_216;
  }
  WebCore::enclosingIntRect((WebCore::GraphicsLayerCA *)((char *)this + 328), a2);
  if ((int)a2 < 1
    || SHIDWORD(a2) < 1
    || (v107 = a2 * (unint64_t)HIDWORD(a2), (v107 & 0xFFFFFFFF00000000) != 0)
    || (v108 = *((_DWORD *)v8 + 1), v109 = __CFADD__(v108, (_DWORD)v107), v110 = v108 + v107, v109)
    || v110 >= 0x1A27281)
  {
LABEL_214:
    v124 = *((_QWORD *)this + 85);
    if (v124)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 112))(v124);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 85) + 48))(*((_QWORD *)this + 85), 0);
      v206 = *((_QWORD *)this + 85);
      *((_QWORD *)this + 85) = 0;
      if (v206)
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v206 + 8));
    }
    goto LABEL_215;
  }
  *((_DWORD *)v8 + 1) = v110;
  v111 = *((_QWORD *)this + 85);
  if ((*((_BYTE *)this + 619) & 0x10) != 0)
  {
    if (v111)
    {
      v122 = 0;
      goto LABEL_210;
    }
LABEL_201:
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::GraphicsLayerCA *, uint64_t, char *))(*(_QWORD *)this + 1208))(&v482, this, 10, (char *)this + 608);
    v112 = v482;
    v482 = 0;
    v113 = *((_QWORD *)this + 85);
    *((_QWORD *)this + 85) = v112;
    if (v113)
    {
      v114 = (unsigned int *)(v113 + 8);
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        atomic_store(1u, v114);
        v274 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v274 = off_1E334ED68;
        *((_QWORD *)v274 + 1) = v114;
        v484[0] = v274;
        WTF::ensureOnMainThread();
        v275 = v484[0];
        v484[0] = 0;
        if (v275)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v275 + 8))(v275);
      }
      v117 = v482;
      v482 = 0;
      if (v117)
      {
        v172 = (unsigned int *)((char *)v117 + 8);
        do
        {
          v173 = __ldaxr(v172);
          v174 = v173 - 1;
        }
        while (__stlxr(v174, v172));
        if (!v174)
        {
          atomic_store(1u, v172);
          v175 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v175 = off_1E334ED68;
          *((_QWORD *)v175 + 1) = v172;
          v484[0] = v175;
          WTF::ensureOnMainThread();
          v176 = v484[0];
          v484[0] = 0;
          if (v176)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v176 + 8))(v176);
        }
      }
    }
    v118 = *((_QWORD *)this + 85);
    LODWORD(v484[1]) = 0;
    v484[0] = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v118 + 288))(v118, v484);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 85) + 440))(*((_QWORD *)this + 85), 1);
    v119 = *((_QWORD *)this + 85);
    _MergedGlobals_48 += 2;
    v484[0] = (WTF::StringImpl *)&_MergedGlobals_48;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v119 + 640))(v119, v484);
    v121 = v484[0];
    v484[0] = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 == 2)
        WTF::StringImpl::destroy(v121, v120);
      else
        *(_DWORD *)v121 -= 2;
    }
    v111 = *((_QWORD *)this + 85);
    v122 = 1;
LABEL_210:
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v111 + 360))(v111, (*(_WORD *)((_BYTE *)this + 177) & 0x40) == 0);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 85) + 344))(*((_QWORD *)this + 85), *((unsigned __int8 *)v8 + 12));
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 85) + 616))(*((_QWORD *)this + 85), (char *)this + 152);
    v123 = *((_QWORD *)this + 86);
    if (!v123)
    {
LABEL_211:
      if (v122)
      {
        WebCore::GraphicsLayerCA::updateBackdropFiltersRect(this);
        WebCore::GraphicsLayerCA::noteSublayersChanged((uint64_t)this, 1);
      }
      goto LABEL_215;
    }
    v177 = *(_QWORD *)(v123 + 48);
    if (v177)
    {
      v178 = *(unsigned int *)(v177 - 4);
      v179 = v177 + 16 * v178;
      if (*(_DWORD *)(v177 - 12))
      {
        v180 = v177;
        if ((_DWORD)v178)
        {
          v181 = 16 * v178;
          v180 = v177;
          while ((unint64_t)(*(_QWORD *)v180 + 1) <= 1)
          {
            v180 += 16;
            v181 -= 16;
            if (!v181)
            {
              v180 = v179;
              goto LABEL_360;
            }
          }
        }
        goto LABEL_360;
      }
      v180 = v177 + 16 * v178;
    }
    else
    {
      v180 = 0;
      v178 = 0;
    }
    v179 = v177 + 16 * v178;
LABEL_360:
    if (v177)
      v188 = v177 + 16 * *(unsigned int *)(v177 - 4);
    else
      v188 = 0;
    while (v180 != v188)
    {
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v180 + 8) + 360))(*(_QWORD *)(v180 + 8), (*(_WORD *)((_BYTE *)this + 177) & 0x40) == 0);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v180 + 8) + 344))(*(_QWORD *)(v180 + 8), *((unsigned __int8 *)v8 + 12));
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(v180 + 8) + 616))(*(_QWORD *)(v180 + 8), (char *)this + 152);
      v189 = v180 + 16;
      v180 = v179;
      if (v189 != v179)
      {
        v180 = v189;
        while ((unint64_t)(*(_QWORD *)v180 + 1) <= 1)
        {
          v180 += 16;
          if (v180 == v179)
          {
            v180 = v179;
            break;
          }
        }
      }
    }
    goto LABEL_211;
  }
  if (!v111)
    goto LABEL_201;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v111 + 344))(v111, *((unsigned __int8 *)v8 + 12));
LABEL_215:
  v81 = *((_QWORD *)this + 77);
LABEL_216:
  if ((v81 & 0x200000000000) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 78) + 328))(*((_QWORD *)this + 78), *((_BYTE *)this + 179) & 1);
    v81 = *((_QWORD *)this + 77);
    if ((v81 & 0x20000000) == 0)
    {
LABEL_218:
      if ((v81 & 0x200000000) == 0)
        goto LABEL_219;
LABEL_223:
      WebCore::GraphicsLayerCA::updateBlendMode(this);
      v81 = *((_QWORD *)this + 77);
      if ((v81 & 0x100000000000) == 0)
        goto LABEL_226;
      goto LABEL_224;
    }
  }
  else if ((v81 & 0x20000000) == 0)
  {
    goto LABEL_218;
  }
  WebCore::GraphicsLayerCA::updateBackdropFiltersRect(this);
  v81 = *((_QWORD *)this + 77);
  if ((v81 & 0x200000000) != 0)
    goto LABEL_223;
LABEL_219:
  if ((v81 & 0x100000000000) == 0)
    goto LABEL_226;
LABEL_224:
  v125 = *((_QWORD *)this + 83);
  if (v125)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 712))(v125, *((unsigned __int8 *)this + 520));
    v81 = *((_QWORD *)this + 77);
  }
LABEL_226:
  if ((v81 & 0x400000000) == 0)
    goto LABEL_228;
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 78) + 744))(*((_QWORD *)this + 78), (char *)this + 528);
  v126 = *((_QWORD *)this + 86);
  if (!v126)
    goto LABEL_228;
  v268 = *(_QWORD *)(v126 + 8 * (*((_QWORD *)this + 79) != 0));
  if (v268)
  {
    v269 = *(unsigned int *)(v268 - 4);
    v270 = v268 + 16 * v269;
    if (*(_DWORD *)(v268 - 12))
    {
      v271 = v268;
      if ((_DWORD)v269)
      {
        v272 = 16 * v269;
        v271 = v268;
        while ((unint64_t)(*(_QWORD *)v271 + 1) <= 1)
        {
          v271 += 16;
          v272 -= 16;
          if (!v272)
          {
            v271 = v270;
            goto LABEL_697;
          }
        }
      }
      goto LABEL_697;
    }
    v271 = v268 + 16 * v269;
  }
  else
  {
    v271 = 0;
    v269 = 0;
  }
  v270 = v268 + 16 * v269;
LABEL_697:
  if (v268)
    v357 = v268 + 16 * *(unsigned int *)(v268 - 4);
  else
    v357 = 0;
  while (v271 != v357)
  {
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(v271 + 8) + 744))(*(_QWORD *)(v271 + 8), (char *)this + 528);
    v358 = v271 + 16;
    v271 = v270;
    if (v358 != v270)
    {
      v271 = v358;
      while ((unint64_t)(*(_QWORD *)v271 + 1) <= 1)
      {
        v271 += 16;
        if (v271 == v270)
        {
          v271 = v270;
          break;
        }
      }
    }
  }
LABEL_228:
  v127 = *((_QWORD *)this + 77);
  if ((v127 & 0x800000000) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 78) + 760))(*((_QWORD *)this + 78), *((unsigned __int8 *)this + 521));
    v127 = *((_QWORD *)this + 77);
  }
  if ((v127 & 0x2000) != 0)
    WebCore::GraphicsLayerCA::updateAnimations(this);
  if ((*((_BYTE *)this + 890) & 1) != 0)
  {
    v425 = (float64x2_t *)*((_QWORD *)this + 13);
    v426 = 1.0;
    if (v425 && !WebCore::TransformationMatrix::isIdentity(*((WebCore::TransformationMatrix **)this + 13)))
    {
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v425, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqzq_f64(v425[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v425[2], (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(v425[3])))))) & 1) != 0|| ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v425[4]), (int32x4_t)vceqq_f64(v425[5], (float64x2_t)xmmword_1968A14B0)))) & 0xF) == 0? (v427 = v425[7].f64[1] == 1.0): (v427 = 0), !v427))
      {
        if (WebCore::TransformationMatrix::decompose2((uint64_t)v425, (uint64_t)v484))
        {
          v428 = fabs(*(double *)v484);
          v429 = fabs(*(double *)&v484[1]);
          if (v428 < v429)
            v428 = v429;
          v426 = v428;
        }
      }
    }
    v430 = *((_QWORD *)this + 25);
    if (v430)
    {
      v431 = *(float64x2_t **)(v430 + 112);
      if (v431)
      {
        if (!WebCore::TransformationMatrix::isIdentity(*(WebCore::TransformationMatrix **)(v430 + 112)))
        {
          if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v431, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqzq_f64(v431[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v431[2], (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(v431[3])))))) & 1) == 0&& ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v431[4]), (int32x4_t)vceqq_f64(v431[5], (float64x2_t)xmmword_1968A14B0)))) & 0xF) == 0? (v468 = v431[7].f64[1] == 1.0): (v468 = 0), v468))
          {
            v470 = 1.0;
          }
          else
          {
            v469 = WebCore::TransformationMatrix::decompose2((uint64_t)v431, (uint64_t)v484);
            v470 = 1.0;
            if (v469)
            {
              v471 = fabs(*(double *)v484);
              v472 = fabs(*(double *)&v484[1]);
              if (v471 < v472)
                v471 = v472;
              v470 = v471;
            }
          }
          if (v426 < v470)
            v426 = v470;
        }
      }
    }
    v128 = *((_QWORD *)this + 77);
    if (v426 != *((float *)this + 221))
    {
      *((float *)this + 221) = v426;
      v128 |= 0x1000000uLL;
      *((_QWORD *)this + 77) = v128;
    }
  }
  else
  {
    v128 = *((_QWORD *)this + 77);
  }
  if ((v128 & 0x1000000) != 0)
  {
    v129 = *((float *)this + 221) * a5;
    if ((*(_WORD *)((_BYTE *)this + 177) & 0x1000) != 0)
      v130 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
    else
      v130 = 1.0;
    v131 = (float)(v129 * v130) * *((float *)this + 220);
    if (*((_BYTE *)this + 169) == 2
      && (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 832))(this))
    {
      v159 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
      if ((*(_WORD *)((_BYTE *)this + 177) & 0x1000) != 0)
        v160 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
      else
        v160 = 1.0;
      v161 = v159 * v160;
      v162 = (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 832))(this);
      (*(void (**)(uint64_t, float))(*(_QWORD *)v162 + 336))(v162, v161);
    }
    v132 = (*(uint64_t (**)(_QWORD, WebCore::GraphicsLayerCA *))(**((_QWORD **)this + 3) + 112))(*((_QWORD *)this + 3), this);
    if ((v132 & 0xFF00000000) != 0)
      v133 = *(float *)&v132;
    else
      v133 = v131;
    if (v133 != (*(float (**)(_QWORD))(**((_QWORD **)this + 78) + 664))(*((_QWORD *)this + 78)))
    {
      (*(void (**)(_QWORD, float))(**((_QWORD **)this + 78) + 672))(*((_QWORD *)this + 78), v133);
      v187 = *((_QWORD *)this + 83);
      if (v187 && *((_BYTE *)this + 888) == 2)
        (*(void (**)(uint64_t, float))(*(_QWORD *)v187 + 672))(v187, v133);
      if (!(*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 832))(this)
        && (*(_WORD *)((_BYTE *)this + 177) & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 72))(*((_QWORD *)this + 78));
      }
    }
    v128 = *((_QWORD *)this + 77);
    if ((v128 & 0x4000000) == 0)
    {
LABEL_236:
      if ((v128 & 0x800000) == 0)
        goto LABEL_237;
      goto LABEL_257;
    }
  }
  else if ((v128 & 0x4000000) == 0)
  {
    goto LABEL_236;
  }
  v134 = (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 832))(this);
  if (v134)
  {
    v158 = v134;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v134 + 48))(v134, (char *)this + 696);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v158 + 72))(v158, (char *)this + 728);
  }
  if ((*((_BYTE *)this + 890) & 8) != 0)
  {
    v135 = 1;
  }
  else
  {
    v135 = 1;
    if ((*(unsigned int (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 704))(this)
      && !*((_BYTE *)v8 + 11))
    {
      v135 = WebCore::GraphicsLayerCA::isRunningTransformAnimation(this, v136) && *((_BYTE *)this + 392) == 0;
    }
  }
  (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 78) + 536))(*((_QWORD *)this + 78), v135);
  v137 = (uint64_t *)*((_QWORD *)this + 86);
  if (v137)
  {
    v296 = *v137;
    if (v296)
    {
      v297 = *(unsigned int *)(v296 - 4);
      v298 = v296 + 16 * v297;
      if (*(_DWORD *)(v296 - 12))
      {
        v299 = v296;
        if ((_DWORD)v297)
        {
          v300 = 16 * v297;
          v299 = v296;
          while ((unint64_t)(*(_QWORD *)v299 + 1) <= 1)
          {
            v299 += 16;
            v300 -= 16;
            if (!v300)
            {
              v299 = v298;
              goto LABEL_828;
            }
          }
        }
        goto LABEL_828;
      }
      v299 = v296 + 16 * v297;
    }
    else
    {
      v299 = 0;
      v297 = 0;
    }
    v298 = v296 + 16 * v297;
LABEL_828:
    if (v296)
      v406 = v296 + 16 * *(unsigned int *)(v296 - 4);
    else
      v406 = 0;
    while (v299 != v406)
    {
      (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v299 + 8) + 536))(*(_QWORD *)(v299 + 8), v135);
      v407 = v299 + 16;
      v299 = v298;
      if (v407 != v298)
      {
        v299 = v407;
        while ((unint64_t)(*(_QWORD *)v299 + 1) <= 1)
        {
          v299 += 16;
          if (v299 == v298)
          {
            v299 = v298;
            break;
          }
        }
      }
    }
  }
  *((_QWORD *)this + 93) = *((_QWORD *)this + 11);
  v128 = *((_QWORD *)this + 77);
  if ((v128 & 0x800000) == 0)
  {
LABEL_237:
    if ((v128 & 0x40000000) == 0)
      goto LABEL_260;
    goto LABEL_258;
  }
LABEL_257:
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 78) + 456))(*((_QWORD *)this + 78), HIBYTE(*(unsigned __int16 *)((char *)this + 177)) & 1);
  v128 = *((_QWORD *)this + 77);
  if ((v128 & 0x40000000) == 0)
    goto LABEL_260;
LABEL_258:
  if ((*(_BYTE *)(*((_QWORD *)this + 78) + 12) & 0xFE) == 4)
  {
    v138 = (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 832))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 224))(v138);
    v128 = *((_QWORD *)this + 77);
  }
LABEL_260:
  if ((v128 & 0x4000) != 0)
  {
    if ((*((_BYTE *)this + 890) & 2) != 0)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 72))(*((_QWORD *)this + 78));
      *((_BYTE *)this + 890) &= ~2u;
    }
    else
    {
      v139 = *((unsigned int *)this + 217);
      if ((_DWORD)v139)
      {
        v140 = *((_QWORD *)this + 107);
        v141 = 16 * v139;
        do
        {
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 78) + 80))(*((_QWORD *)this + 78), v140);
          v140 += 16;
          v141 -= 16;
        }
        while (v141);
      }
      if (*((_DWORD *)this + 216))
      {
        if (*((_DWORD *)this + 217))
          *((_DWORD *)this + 217) = 0;
        v142 = (WTF *)*((_QWORD *)this + 107);
        if (v142)
        {
          *((_QWORD *)this + 107) = 0;
          *((_DWORD *)this + 216) = 0;
          WTF::fastFree(v142, a2);
        }
      }
    }
  }
  v143 = *((_QWORD *)this + 77);
  if ((v143 & 0x40000) != 0)
  {
    WebCore::GraphicsLayerCA::updateContentsRects(this);
    v143 = *((_QWORD *)this + 77);
    if ((v143 & 0x4000000000) == 0)
    {
LABEL_272:
      if ((v143 & 0x100000) == 0)
        goto LABEL_273;
      goto LABEL_277;
    }
  }
  else if ((v143 & 0x4000000000) == 0)
  {
    goto LABEL_272;
  }
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 78) + 776))(*((_QWORD *)this + 78), (char *)this + 400);
  v143 = *((_QWORD *)this + 77);
  if ((v143 & 0x100000) == 0)
  {
LABEL_273:
    if ((v143 & 0x400000) == 0)
      goto LABEL_280;
    goto LABEL_278;
  }
LABEL_277:
  WebCore::GraphicsLayerCA::updateMaskLayer(this);
  v143 = *((_QWORD *)this + 77) & 0xFFFFFFFFFFEFFFFFLL;
  *((_QWORD *)this + 77) = v143;
  if ((v143 & 0x400000) == 0)
    goto LABEL_280;
LABEL_278:
  v144 = *((_QWORD *)this + 83);
  if (v144)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 72))(v144);
    v143 = *((_QWORD *)this + 77);
  }
LABEL_280:
  if ((v143 & 0x80000000) == 0)
  {
    if ((v143 & 0x100000000) == 0)
      goto LABEL_282;
    goto LABEL_294;
  }
  v484[0] = 0;
  v493[0] = 0.0;
  v145 = *(_WORD *)((char *)this + 177);
  if ((v145 & 0x2000) != 0)
    (*(void (**)(WebCore::GraphicsLayerCA *, WTF::StringImpl **, float *))(*(_QWORD *)this + 944))(this, v484, v493);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 72))(*((_QWORD *)this + 78));
  v146 = *((_QWORD *)this + 78);
  v482 = v484[0];
  if (((unint64_t)v484[0] & 0x8000000000000) != 0)
  {
    v294 = (unsigned int *)((unint64_t)v484[0] & 0xFFFFFFFFFFFFLL);
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 + 1, v294));
  }
  v147 = v493[0];
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v146 + 592))(v146, &v482);
  v148.n128_u32[0] = 0;
  if ((BYTE6(v482) & 4) != 0)
    v148.n128_f32[0] = v147;
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)v146 + 584))(v146, v148);
  if (((unint64_t)v482 & 0x8000000000000) != 0)
  {
    v457 = (unsigned int *)((unint64_t)v482 & 0xFFFFFFFFFFFFLL);
    do
    {
      v458 = __ldaxr(v457);
      v459 = v458 - 1;
    }
    while (__stlxr(v459, v457));
    if (!v459)
    {
      atomic_store(1u, v457);
      WTF::fastFree((WTF *)v457, v149);
    }
  }
  v150 = *((_QWORD *)this + 83);
  if (v150)
  {
    v284 = 0x11040000000080B4;
    if ((v145 & 0x2000) == 0)
      v284 = 0;
    v480 = (WTF::StringImpl *)v284;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v150 + 592))(v150, &v480);
    v285.n128_u32[0] = 0;
    if ((BYTE6(v480) & 4) != 0)
      v285.n128_f32[0] = 4.0;
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v150 + 584))(v150, v285);
    if (((unint64_t)v480 & 0x8000000000000) != 0)
    {
      v286 = (unsigned int *)((unint64_t)v480 & 0xFFFFFFFFFFFFLL);
      do
      {
        v287 = __ldaxr(v286);
        v288 = v287 - 1;
      }
      while (__stlxr(v288, v286));
      if (!v288)
      {
        atomic_store(1u, v286);
        WTF::fastFree((WTF *)v286, v149);
      }
    }
  }
  v151 = (_QWORD *)*((_QWORD *)this + 86);
  if (v151)
  {
    v289 = (_QWORD *)*v151;
    if (*v151)
    {
      v290 = *((unsigned int *)v289 - 1);
      v291 = &v289[2 * v290];
      if (*((_DWORD *)v289 - 3))
      {
        v292 = (_QWORD *)*v151;
        if ((_DWORD)v290)
        {
          v293 = 16 * v290;
          v292 = (_QWORD *)*v151;
          while ((unint64_t)(*v292 + 1) <= 1)
          {
            v292 += 2;
            v293 -= 16;
            if (!v293)
            {
              v292 = v291;
              break;
            }
          }
        }
LABEL_729:
        if (v289)
          v368 = &v289[2 * *((unsigned int *)v289 - 1)];
        else
          v368 = 0;
        if (v368 != v292)
        {
          do
          {
            v369 = v292[1];
            v478 = (float32x2_t)v484[0];
            if (((unint64_t)v484[0] & 0x8000000000000) != 0)
            {
              v373 = (unsigned int *)((unint64_t)v484[0] & 0xFFFFFFFFFFFFLL);
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 + 1, v373));
            }
            v370 = LODWORD(v493[0]);
            (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v369 + 592))(v369, &v478);
            v371.n128_u32[0] = 0;
            if ((v478.i8[6] & 4) != 0)
              v371.n128_u32[0] = v370;
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v369 + 584))(v369, v371);
            if ((*(_QWORD *)&v478 & 0x8000000000000) != 0)
            {
              v375 = (unsigned int *)(*(_QWORD *)&v478 & 0xFFFFFFFFFFFFLL);
              do
              {
                v376 = __ldaxr(v375);
                v377 = v376 - 1;
              }
              while (__stlxr(v377, v375));
              if (!v377)
              {
                atomic_store(1u, v375);
                WTF::fastFree((WTF *)v375, v149);
              }
            }
            v372 = v292 + 2;
            v292 = v291;
            if (v372 != v291)
            {
              v292 = v372;
              while ((unint64_t)(*v292 + 1) <= 1)
              {
                v292 += 2;
                if (v292 == v291)
                {
                  v292 = v291;
                  break;
                }
              }
            }
          }
          while (v292 != v368);
          v151 = (_QWORD *)*((_QWORD *)this + 86);
        }
        if ((v145 & 0x2000) != 0)
          v378 = 0x11040000FF7AFBFFLL;
        else
          v378 = 0;
        v379 = v151[1];
        if (v379)
        {
          v380 = *(unsigned int *)(v379 - 4);
          v381 = (_QWORD *)(v379 + 16 * v380);
          if (*(_DWORD *)(v379 - 12))
          {
            v382 = (_QWORD *)v151[1];
            if ((_DWORD)v380)
            {
              v383 = 16 * v380;
              v382 = (_QWORD *)v151[1];
              while ((unint64_t)(*v382 + 1) <= 1)
              {
                v382 += 2;
                v383 -= 16;
                if (!v383)
                {
                  v382 = v381;
                  break;
                }
              }
            }
LABEL_764:
            if (v379)
              v384 = (_QWORD *)(v379 + 16 * *(unsigned int *)(v379 - 4));
            else
              v384 = 0;
            if (v384 != v382)
            {
              do
              {
                v385 = v382[1];
                v476 = (float32x2_t)v378;
                (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v385 + 592))(v385, &v476);
                v386.n128_u32[0] = 0;
                if ((v476.i8[6] & 4) != 0)
                  v386.n128_u32[0] = 2.0;
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v385 + 584))(v385, v386);
                if ((*(_QWORD *)&v476 & 0x8000000000000) != 0)
                {
                  v388 = (unsigned int *)(*(_QWORD *)&v476 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v389 = __ldaxr(v388);
                    v390 = v389 - 1;
                  }
                  while (__stlxr(v390, v388));
                  if (!v390)
                  {
                    atomic_store(1u, v388);
                    WTF::fastFree((WTF *)v388, v149);
                  }
                }
                v387 = v382 + 2;
                v382 = v381;
                if (v387 != v381)
                {
                  v382 = v387;
                  while ((unint64_t)(*v382 + 1) <= 1)
                  {
                    v382 += 2;
                    if (v382 == v381)
                    {
                      v382 = v381;
                      break;
                    }
                  }
                }
              }
              while (v382 != v384);
              v151 = (_QWORD *)*((_QWORD *)this + 86);
            }
            if ((v145 & 0x2000) != 0)
              v391 = 0x11040000000080B4;
            else
              v391 = 0;
            v392 = (_QWORD *)v151[2];
            if (v392)
            {
              v393 = *((unsigned int *)v392 - 1);
              v394 = &v392[2 * v393];
              if (*((_DWORD *)v392 - 3))
              {
                v395 = v392;
                if ((_DWORD)v393)
                {
                  v396 = 16 * v393;
                  v395 = v392;
                  while ((unint64_t)(*v395 + 1) <= 1)
                  {
                    v395 += 2;
                    v396 -= 16;
                    if (!v396)
                    {
                      v395 = v394;
                      goto LABEL_795;
                    }
                  }
                }
                goto LABEL_795;
              }
              v395 = &v392[2 * v393];
            }
            else
            {
              v395 = 0;
              v393 = 0;
            }
            v394 = &v392[2 * v393];
LABEL_795:
            if (v392)
              v397 = &v392[2 * *((unsigned int *)v392 - 1)];
            else
              v397 = 0;
            while (v395 != v397)
            {
              v398 = v395[1];
              v492 = v391;
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v398 + 592))(v398, &v492);
              v399.n128_u32[0] = 0;
              if ((v492 & 0x4000000000000) != 0)
                v399.n128_u32[0] = 4.0;
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v398 + 584))(v398, v399);
              if ((v492 & 0x8000000000000) != 0)
              {
                v401 = (unsigned int *)(v492 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v402 = __ldaxr(v401);
                  v403 = v402 - 1;
                }
                while (__stlxr(v403, v401));
                if (!v403)
                {
                  atomic_store(1u, v401);
                  WTF::fastFree((WTF *)v401, v149);
                }
              }
              v400 = v395 + 2;
              v395 = v394;
              if (v400 != v394)
              {
                v395 = v400;
                while ((unint64_t)(*v395 + 1) <= 1)
                {
                  v395 += 2;
                  if (v395 == v394)
                  {
                    v395 = v394;
                    break;
                  }
                }
              }
            }
            goto LABEL_292;
          }
          v382 = (_QWORD *)(v379 + 16 * v380);
        }
        else
        {
          v382 = 0;
          v380 = 0;
        }
        v381 = (_QWORD *)(v379 + 16 * v380);
        goto LABEL_764;
      }
      v292 = &v289[2 * v290];
    }
    else
    {
      v292 = 0;
      v290 = 0;
    }
    v291 = &v289[2 * v290];
    goto LABEL_729;
  }
LABEL_292:
  if (((unint64_t)v484[0] & 0x8000000000000) != 0)
  {
    v460 = (unsigned int *)((unint64_t)v484[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v461 = __ldaxr(v460);
      v462 = v461 - 1;
    }
    while (__stlxr(v462, v460));
    if (!v462)
    {
      atomic_store(1u, v460);
      WTF::fastFree((WTF *)v460, v149);
    }
  }
  v143 = *((_QWORD *)this + 77);
  if ((v143 & 0x100000000) == 0)
  {
LABEL_282:
    if ((v143 & 0x80000000000) == 0)
      goto LABEL_303;
    goto LABEL_295;
  }
LABEL_294:
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 78) + 792))(*((_QWORD *)this + 78), *((unsigned __int8 *)this + 170));
  v143 = *((_QWORD *)this + 77);
  if ((v143 & 0x80000000000) == 0)
    goto LABEL_303;
LABEL_295:
  v152 = *((_QWORD *)this + 83);
  if (v152)
  {
    v153 = *((_DWORD *)this + 80);
    if (v153 == 2)
      v154 = 2;
    else
      v154 = v153 == 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v152 + 552))(v152, v154);
    v155 = *((_DWORD *)this + 81);
    if (v155 == 2)
      v156 = 2;
    else
      v156 = v155 == 1;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 83) + 560))(*((_QWORD *)this + 83), v156);
    v143 = *((_QWORD *)this + 77);
  }
LABEL_303:
  if ((v143 & 4) != 0)
  {
    WebCore::GraphicsLayerCA::updateSublayerList(this, 0);
    v143 = *((_QWORD *)this + 77) & 0xFFFFFFFFFFFFFFFBLL;
    *((_QWORD *)this + 77) = v143;
  }
  if (*(_DWORD *)v8 >= 0x81u)
  {
    *((_QWORD *)this + 77) = v143 | 4;
    if (!*((_BYTE *)this + 889))
    {
      for (i = *((_QWORD *)this + 25); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
    }
  }
  *((_BYTE *)this + 889) = v10;
}

uint64_t WebCore::GraphicsLayerCA::debugName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 32);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

WTF *WebCore::GraphicsLayerCA::updateSublayerList(WebCore::GraphicsLayerCA *this, int a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  WTF *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF *result;
  char *v45;
  uint64_t v46;
  WTF *v47;
  unsigned int *v48;
  unsigned int v49;
  void *v50;
  unsigned int *v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;

  if (a2)
  {
    v56 = *((_QWORD *)this + 78);
    v60 = 0;
    v61 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v56 + 120))(v56, &v60);
    return (WTF *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v57);
  }
  v60 = 0;
  v61 = 0;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 78) + 168))(*((_QWORD *)this + 78));
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v4)
    {
      if (v4 <= 0x10)
        v5 = 16;
      else
        v5 = *(unsigned int *)(v3 + 12);
      if (v5 >> 29)
      {
        __break(0xC471u);
        goto LABEL_90;
      }
      v6 = *(uint64_t **)v3;
      v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
      LODWORD(v61) = v5;
      v60 = v7;
      v8 = &v6[v4];
      do
      {
        v9 = *v6;
        if (*v6)
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *(_QWORD *)v7 = v9;
        v7 = (WTF *)((char *)v7 + 8);
        ++v6;
      }
      while (v6 != v8);
      HIDWORD(v61) = v4;
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  v12 = (_QWORD *)((char *)this + 640);
  v13 = *((_QWORD *)this + 80);
  v14 = *(_WORD *)((char *)this + 177);
  if (v13)
  {
    if ((v14 & 0x40) == 0)
      goto LABEL_16;
    if ((_DWORD)v4 == (_DWORD)v61)
    {
      v45 = (char *)this + 640;
      goto LABEL_68;
    }
    v46 = v4;
    v47 = v60;
    v48 = (unsigned int *)(v13 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    goto LABEL_71;
  }
  if ((v14 & 0x40) != 0)
  {
    v13 = *((_QWORD *)this + 83);
    if (v13)
    {
      if ((_DWORD)v4 == (_DWORD)v61)
      {
        v45 = (char *)this + 664;
LABEL_68:
        WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>&>((uint64_t)&v60, (unint64_t)v45);
        goto LABEL_16;
      }
      v46 = v4;
      v47 = v60;
      v51 = (unsigned int *)(v13 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 + 1, v51));
LABEL_71:
      *((_QWORD *)v47 + v46) = v13;
      ++HIDWORD(v61);
    }
  }
LABEL_16:
  if ((*(_WORD *)((_BYTE *)this + 177) & 0x80) != 0 && *v12)
  {
    v58 = 0;
    v59 = 0;
    WebCore::GraphicsLayerCA::updateSublayerList(BOOL)::$_6::operator()(*((_QWORD *)this + 23), *((_DWORD *)this + 49), &v58);
    v16 = 0;
    v17 = 1;
LABEL_74:
    WebCore::GraphicsLayerCA::updateSublayerList(BOOL)::$_1::operator()((uint64_t)this, (uint64_t)&v58);
    (*(void (**)(_QWORD, char **))(**((_QWORD **)this + 80) + 120))(*((_QWORD *)this + 80), &v58);
    WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v50);
    v15 = *((_QWORD *)this + 79);
    goto LABEL_21;
  }
  v15 = *((_QWORD *)this + 79);
  if (v15)
    v16 = WebCore::GraphicsLayerCA::structuralLayerPurpose(this) != 3;
  else
    v16 = 0;
  if (*v12)
  {
    v17 = 0;
    v58 = 0;
    v59 = 0;
    goto LABEL_74;
  }
  v17 = 0;
LABEL_21:
  if (v15)
  {
    v58 = 0;
    v59 = 0;
    WebCore::GraphicsLayerCA::updateSublayerList(BOOL)::$_0::operator()((uint64_t)this, (uint64_t)&v58);
    if (v16)
      WebCore::GraphicsLayerCA::updateSublayerList(BOOL)::$_6::operator()(*((_QWORD *)this + 23), *((_DWORD *)this + 49), &v58);
    (*(void (**)(_QWORD, char **))(**((_QWORD **)this + 79) + 120))(*((_QWORD *)this + 79), &v58);
    WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v53);
  }
  if (((v17 | v16) & 1) == 0)
  {
    v18 = *((unsigned int *)this + 49);
    if ((_DWORD)v18)
    {
      v19 = (_QWORD *)*((_QWORD *)this + 23);
      v20 = &v19[v18];
      while (1)
      {
        v21 = *v19;
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 848))(*v19) & 1) == 0)
          break;
        v22 = *(_QWORD *)(v21 + 632);
        if (!v22)
          v22 = *(_QWORD *)(v21 + 624);
        v23 = HIDWORD(v61);
        if (HIDWORD(v61) == (_DWORD)v61)
        {
          v24 = HIDWORD(v61) + ((unint64_t)HIDWORD(v61) >> 2);
          if (v24 >= 0x10)
            v25 = v24 + 1;
          else
            v25 = 16;
          if (v25 <= (unint64_t)HIDWORD(v61) + 1)
            v26 = HIDWORD(v61) + 1;
          else
            v26 = v25;
          if (v26 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1943FD9BCLL);
          }
          v27 = v60;
          v28 = (WTF *)WTF::fastMalloc((WTF *)(8 * v26));
          LODWORD(v61) = v26;
          v60 = v28;
          memcpy(v28, v27, 8 * v23);
          if (v27)
          {
            if (v60 == v27)
            {
              v60 = 0;
              LODWORD(v61) = 0;
            }
            WTF::fastFree(v27, v29);
          }
          v30 = HIDWORD(v61);
          v31 = v60;
          if (v22)
          {
            v32 = (unsigned int *)(v22 + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 + 1, v32));
            LODWORD(v23) = HIDWORD(v61);
          }
          else
          {
            LODWORD(v23) = HIDWORD(v61);
          }
          v34 = (_QWORD *)((char *)v31 + 8 * v30);
        }
        else
        {
          v34 = (_QWORD *)((char *)v60 + 8 * HIDWORD(v61));
          if (v22)
          {
            v35 = (unsigned int *)(v22 + 8);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 + 1, v35));
            LODWORD(v23) = HIDWORD(v61);
          }
        }
        *v34 = v22;
        HIDWORD(v61) = v23 + 1;
        if (++v19 == v20)
          goto LABEL_51;
      }
      __break(0xC471u);
LABEL_90:
      JUMPOUT(0x1943FD8E8);
    }
  }
LABEL_51:
  (*(void (**)(_QWORD, WTF **))(**((_QWORD **)this + 78) + 120))(*((_QWORD *)this + 78), &v60);
  if (HIDWORD(v61))
  {
    v38 = v60;
    v39 = (WTF *)((char *)v60 + 8 * HIDWORD(v61));
    do
    {
      v40 = *(_QWORD *)v38;
      *(_QWORD *)v38 = 0;
      if (v40)
      {
        v41 = (unsigned int *)(v40 + 8);
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v41);
          v54 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v54 = off_1E334ED68;
          *(_QWORD *)(v54 + 8) = v41;
          v58 = (char *)v54;
          WTF::ensureOnMainThread();
          v55 = v58;
          v58 = 0;
          if (v55)
            (*(void (**)(char *))(*(_QWORD *)v55 + 8))(v55);
        }
      }
      v38 = (WTF *)((char *)v38 + 8);
    }
    while (v38 != v39);
  }
  result = v60;
  if (v60)
  {
    v60 = 0;
    LODWORD(v61) = 0;
    return (WTF *)WTF::fastFree(result, v37);
  }
  return result;
}

BOOL WebCore::RenderLayerBacking::needsPixelAligment(WebCore::RenderLayerBacking *this)
{
  return *((_BYTE *)this + 289) == 0;
}

float WebCore::RenderLayerCompositor::deviceScaleFactor(WebCore::RenderLayerCompositor *this)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 364);
}

uint64_t WebCore::TileGrid::updateTileLayerProperties(uint64_t this, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t v15;
  float v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(this + 16);
  v3 = *(unsigned __int8 *)(v2 + 307);
  v4 = *(unsigned __int8 *)(v2 + 308);
  v5 = *(unsigned __int8 *)(v2 + 309);
  v6 = *(_QWORD *)(v2 + 320);
  v25 = v6;
  if ((v6 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v2 = *(_QWORD *)(this + 16);
  }
  v7 = *(_QWORD *)(this + 32);
  if (!v7)
  {
    v10 = 0;
    LODWORD(v8) = 0;
LABEL_25:
    v9 = v7 + 24 * v8;
    goto LABEL_18;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = v7 + 24 * v8;
  if (!*(_DWORD *)(v7 - 12))
  {
    v10 = v7 + 24 * v8;
    goto LABEL_25;
  }
  v10 = *(_QWORD *)(this + 32);
  if ((_DWORD)v8)
  {
    v11 = 24 * v8;
    v10 = *(_QWORD *)(this + 32);
    while (1)
    {
      v12 = !*(_DWORD *)v10 && *(_DWORD *)(v10 + 4) == 0x80000000;
      v13 = v12;
      if (*(_DWORD *)v10 != 0x80000000 && !v13)
        break;
      v10 += 24;
      v11 -= 24;
      if (!v11)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_18:
  if (v7)
    v15 = v7 + 24 * *(unsigned int *)(v7 - 4);
  else
    v15 = 0;
  if (v15 != v10)
  {
    v16 = *(float *)(v2 + 328);
    do
    {
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v10 + 8) + 456))(*(_QWORD *)(v10 + 8), v3 != 0);
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v10 + 8) + 472))(*(_QWORD *)(v10 + 8), v4 != 0);
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v10 + 8) + 240))(*(_QWORD *)(v10 + 8), v5 != 0);
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 8) + 592))(*(_QWORD *)(v10 + 8), &v25);
      this = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v10 + 8) + 584))(*(_QWORD *)(v10 + 8), v16);
      v17 = v10 + 24;
      v10 = v9;
      if (v17 != v9)
      {
        v10 = v17;
        while (1)
        {
          v18 = !*(_DWORD *)v10 && *(_DWORD *)(v10 + 4) == 0x80000000;
          v19 = v18;
          if (*(_DWORD *)v10 != 0x80000000 && !v19)
            break;
          v10 += 24;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
    }
    while (v10 != v15);
  }
  if ((v25 & 0x8000000000000) != 0)
  {
    this = v25 & 0xFFFFFFFFFFFFLL;
    do
    {
      v23 = __ldaxr((unsigned int *)this);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)this));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)this);
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerCustomSublayersChanged(uint64_t this, WebCore::PlatformCALayer *a2)
{
  int v2;
  uint64_t v3;
  uint64_t i;

  if ((*(_WORD *)(this - 431) & 1) == 0)
  {
    v2 = *(unsigned __int8 *)(this + 281);
    v3 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = v3 | 4;
    if (!v2)
    {
      for (i = *(_QWORD *)(this - 408); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
      if (!v3)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this - 584) + 40))(*(_QWORD *)(this - 584), this - 608);
    }
  }
  return this;
}

uint64_t WebCore::TileController::setCoverageRect(uint64_t this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  _OWORD *v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;

  v2 = this;
  v3 = (_OWORD *)(this + 108);
  v4 = *(float *)(this + 108) == *(float *)a2 && *(float *)(this + 112) == *((float *)a2 + 1);
  if (!v4
    || (*(float *)(this + 116) == *((float *)a2 + 2) ? (v5 = *(float *)(this + 120) == *((float *)a2 + 3)) : (v5 = 0),
        !v5))
  {
    *v3 = *(_OWORD *)a2;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 16) + 48) + 144))(*(_QWORD *)(*(_QWORD *)(this + 16) + 48));
    v6 = *(_QWORD *)(v2 + 24);
    if (v6)
    {
      this = *(_QWORD *)(v6 + 8);
      if (this)
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)this + 56))(this, v2, v3);
    }
  }
  return this;
}

void WebCore::TileController::revalidateTiles(WebCore::TileController *this)
{
  WebCore::TileGrid::revalidateTiles(*((_QWORD *)this + 6), 0);
}

double WebCore::TileController::setVisibleRect(WebCore::TileController *this, const WebCore::FloatRect *a2)
{
  BOOL v2;
  __int128 v3;
  BOOL v4;
  WebCore::TileCoverageMap *v5;

  v2 = *(float *)a2 == *((float *)this + 18) && *((float *)a2 + 1) == *((float *)this + 19);
  if (!v2
    || ((LODWORD(v3) = *((_DWORD *)a2 + 2), *(float *)&v3 == *((float *)this + 20))
      ? (v4 = *((float *)a2 + 3) == *((float *)this + 21))
      : (v4 = 0),
        !v4))
  {
    v3 = *(_OWORD *)a2;
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)a2;
    v5 = (WebCore::TileCoverageMap *)*((_QWORD *)this + 5);
    if (v5)
      *(double *)&v3 = WebCore::TileCoverageMap::setNeedsUpdate(v5);
  }
  return *(double *)&v3;
}

_QWORD *WebCore::GraphicsLayerCA::updateContentsRects(_QWORD *this)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t (*v30)();
  const WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD v45[2];
  WTF::StringImpl *v46;
  int v47;

  v1 = (uint64_t)this;
  if (!this[83] && (*(_WORD *)((_BYTE *)this + 177) & 0x80) == 0)
    return this;
  v45[0] = 0;
  v45[1] = this[31];
  if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)(this + 34))
    && (v2 = *(float *)(v1 + 256), v3 = *(float *)(v1 + 240), v2 <= v3)
    && (float)(v2 + *(float *)(v1 + 264)) >= (float)(v3 + *(float *)(v1 + 248))
    && (v4 = *(float *)(v1 + 260), v5 = *(float *)(v1 + 244), v4 <= v5)
    && (float)(v4 + *(float *)(v1 + 268)) >= (float)(v5 + *(float *)(v1 + 252)))
  {
    v6 = *(_QWORD *)(v1 + 640);
    v7 = v6 != 0;
    if (v6)
    {
      v34 = *(_QWORD *)(v1 + 664);
      v35 = *(_QWORD *)(v1 + 640);
      if (v34)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v34 + 112))(*(_QWORD *)(v1 + 664));
        v35 = *(_QWORD *)(v1 + 640);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 112))(v35);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 640) + 48))(*(_QWORD *)(v1 + 640), 0);
      v36 = *(_QWORD *)(v1 + 640);
      v41 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v36 + 224))(v36, &v41);
      v37 = v41;
      v41 = 0;
      if (v37)
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)v37 + 2);
      v38 = *(_QWORD *)(v1 + 640);
      *(_QWORD *)(v1 + 640) = 0;
      if (v38)
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v38 + 8));
    }
    v8 = *(_QWORD *)(v1 + 672);
    if (v8)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, 0);
      v39 = *(_QWORD *)(v1 + 672);
      *(_QWORD *)(v1 + 672) = 0;
      if (v39)
      {
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v39 + 8));
        if (!v6)
          goto LABEL_11;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 640);
    v7 = v10 == 0;
    v11 = v10;
    if (!v10)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1 + 1208))(&v41, v1, 0, v1 + 608);
      WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::operator=<WebCore::PlatformCALayer>((uint64_t *)(v1 + 640), (uint64_t *)&v41);
      WTF::Ref<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::~Ref(&v41);
      v13 = *(_QWORD *)(v1 + 640);
      LODWORD(v42) = 0;
      v41 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 288))(v13, &v41);
      v14 = *(_QWORD *)(v1 + 640);
      WebCore::GraphicsLayerCA::updateContentsRects(void)::$_0::operator() const(void)::impl += 2;
      v41 = (WTF::StringImpl *)&WebCore::GraphicsLayerCA::updateContentsRects(void)::$_0::operator() const(void)::impl;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 640))(v14, &v41);
      v16 = v41;
      v41 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v11 = *(_QWORD *)(v1 + 640);
    }
    v41 = *(WTF::StringImpl **)(v1 + 256);
    LODWORD(v42) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 272))(v11, &v41);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 640) + 256))(*(_QWORD *)(v1 + 640), v1 + 256);
    WebCore::GraphicsLayerCA::updateClippingStrategy(v1, *(_QWORD *)(v1 + 640), (uint64_t *)(v1 + 672), v1 + 256);
    if (!v10)
    {
      v12 = *(_QWORD *)(v1 + 664);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 112))(v12);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 640) + 144))(*(_QWORD *)(v1 + 640), *(_QWORD *)(v1 + 664));
        goto LABEL_19;
      }
    }
  }
  if (v7)
LABEL_19:
    WebCore::GraphicsLayerCA::noteSublayersChanged(v1, 1);
LABEL_11:
  this = *(_QWORD **)(v1 + 664);
  if (this)
  {
    v41 = *(WTF::StringImpl **)(v1 + 240);
    LODWORD(v42) = 0;
    (*(void (**)(_QWORD *, WTF::StringImpl **))(*this + 272))(this, &v41);
    this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v1 + 664) + 256))(*(_QWORD *)(v1 + 664), v45);
  }
  v9 = *(_QWORD *)(v1 + 688);
  if (v9)
  {
    WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::keys(&v41, (_QWORD *)(v9 + 16));
    v17 = v42;
    v18 = v44;
    if (v42 != v44)
    {
      v19 = v43;
      do
      {
        v20 = v17[1];
        v46 = *(WTF::StringImpl **)(v1 + 240);
        v47 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 272))(v20, &v46);
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v17[1] + 256))(v17[1], v45);
        while (1)
        {
          v17 += 2;
          if (v17 == v19)
            break;
          if ((unint64_t)(*v17 + 1) > 1)
            goto LABEL_32;
        }
        v17 = v19;
LABEL_32:
        ;
      }
      while (v17 != v18);
    }
    v21 = *(_QWORD **)(*(_QWORD *)(v1 + 688) + 24);
    this = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::begin(v21);
    v23 = (uint64_t)this;
    v25 = v24;
    if (v21)
      v21 += 2 * *((unsigned int *)v21 - 1);
    if (v21 != this)
    {
      do
      {
        v26 = *(WTF::StringImpl **)v23;
        if (*(_QWORD *)v23)
          *(_DWORD *)v26 += 2;
        v46 = v26;
        v27 = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::get(*(WTF **)(*(_QWORD *)(v1 + 688) + 32), &v46, v22);
        if (v27)
        {
          v28 = (unsigned int *)((char *)v27 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          v30 = WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::unspecifiedBoolTypeInstance;
        }
        else
        {
          v30 = 0;
        }
        v40 = v27;
        WebCore::GraphicsLayerCA::updateClippingStrategy(v1, *(_QWORD *)(v23 + 8), (uint64_t *)&v40, v1 + 256);
        v32 = (uint64_t)v40;
        if (v40)
        {
          if (v30)
          {
            v40 = 0;
LABEL_47:
            WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v32 + 8));
            goto LABEL_48;
          }
          WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>&>((uint64_t)&v41, (uint64_t *)(*(_QWORD *)(v1 + 688) + 32), &v46, (uint64_t *)&v40);
        }
        else
        {
          WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::remove(*(_QWORD *)(v1 + 688) + 32, &v46, v31);
        }
        v32 = (uint64_t)v40;
        v40 = 0;
        if (v32)
          goto LABEL_47;
LABEL_48:
        this = v46;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            this = (_QWORD *)WTF::StringImpl::destroy(v46, v33);
          else
            *(_DWORD *)v46 -= 2;
        }
        while (1)
        {
          v23 += 16;
          if (v23 == v25)
            break;
          if ((unint64_t)(*(_QWORD *)v23 + 1) > 1)
            goto LABEL_55;
        }
        v23 = v25;
LABEL_55:
        ;
      }
      while ((_QWORD *)v23 != v21);
    }
  }
  return this;
}

uint64_t WebCore::GraphicsLayerClient::needsPixelAligment(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

float WebCore::RenderLayerBacking::zoomedOutPageScaleFactor(WebCore::RenderLayerBacking *this)
{
  WebCore::RenderView *v1;
  WebCore::RenderLayerCompositor *v2;
  WebCore::RenderLayerCompositor *v4;
  WebCore::RenderLayerCompositor *v5;
  WTF *v6;
  void *v7;

  v1 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v2 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
  if (!v2)
  {
    v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v2 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v1);
    v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    *((_QWORD *)v1 + 50) = v2;
    if (v5)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v5);
      WTF::fastFree(v6, v7);
      v2 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    }
  }
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 360);
}

float WebCore::TileController::contentsScale(WebCore::TileController *this)
{
  return *(float *)(*((_QWORD *)this + 6) + 176) * *((float *)this + 9);
}

uint64_t WebCore::TileController::setTileDebugBorderWidth(uint64_t this, float a2, void *a3)
{
  if (*(float *)(this + 328) != a2)
  {
    *(float *)(this + 328) = a2;
    return WebCore::TileGrid::updateTileLayerProperties(*(_QWORD *)(this + 48), a3);
  }
  return this;
}

uint64_t WebCore::TileController::setAcceleratesDrawing(uint64_t this, void *a2)
{
  if (*(unsigned __int8 *)(this + 307) != (_DWORD)a2)
  {
    *(_BYTE *)(this + 307) = (_BYTE)a2;
    return WebCore::TileGrid::updateTileLayerProperties(*(_QWORD *)(this + 48), a2);
  }
  return this;
}

uint64_t WebCore::TileController::setTilesOpaque(uint64_t this, void *a2)
{
  if (*(unsigned __int8 *)(this + 309) != (_DWORD)a2)
  {
    *(_BYTE *)(this + 309) = (_BYTE)a2;
    return WebCore::TileGrid::updateTileLayerProperties(*(_QWORD *)(this + 48), a2);
  }
  return this;
}

uint64_t WebCore::RenderLayerBacking::paintsOpaquelyAtNonIntegralScales(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2)
{
  return *((unsigned __int8 *)this + 289);
}

uint64_t WebCore::PlatformCALayer::clearContents(WebCore::PlatformCALayer *this)
{
  return (*(uint64_t (**)(WebCore::PlatformCALayer *, _QWORD))(*(_QWORD *)this + 496))(this, 0);
}

_BYTE *WebCore::Page::setUserInterfaceLayoutDirection(_BYTE *result, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;

  if ((((result[1132] == 0) ^ a2) & 1) == 0)
  {
    v2 = (uint64_t)result;
    result[1132] = a2;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3400890;
    v4 = v3;
    WebCore::Page::forEachMediaElement(v2, (uint64_t)&v4);
    result = v4;
    v4 = 0;
    if (result)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::SerializedScriptValue::create@<X0>(WebCore::SerializedScriptValue *this@<X0>, const OpaqueJSContext *a2@<X1>, const OpaqueJSValue *a3@<X2>, const OpaqueJSValue **a4@<X3>, _QWORD *a5@<X8>)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unsigned int *v14;
  _BYTE v15[8];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  MEMORY[0x19AEA3294](v15, v9, a3, a4);
  if (a2)
    v10 = (uint64_t)a2;
  else
    v10 = 2;
  WebCore::SerializedScriptValue::create(this, v10, 0, 1, 0, &v14);
  v11 = *((_QWORD *)v9 + 2);
  if (v11)
  {
    if (a3)
      *(_QWORD *)a3 = *(_QWORD *)(v11 + 8);
    JSC::VM::clearException(v9);
    *a5 = 0;
    if (v14)
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v14, v13);
  }
  else
  {
    *a5 = v14;
  }
  return MEMORY[0x19AEA32A0](v15);
}

uint64_t *WebCore::SerializedScriptValue::create@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  unsigned int v15;
  WTF *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v13[0] = 0;
  v13[1] = 0;
  result = (uint64_t *)WebCore::SerializedScriptValue::create(a1, a2, (uint64_t)v13, (uint64_t)&v16, a3, a4, a5, (uint64_t)v14);
  v9 = v15;
  if (!v15)
  {
    v10 = v14[0];
    v14[0] = 0;
    *a6 = v10;
LABEL_3:
    result = (uint64_t *)((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v9])(v13, v14);
    goto LABEL_4;
  }
  *a6 = 0;
  if ((_DWORD)v9 != -1)
    goto LABEL_3;
LABEL_4:
  v11 = v16;
  if (HIDWORD(v17))
  {
    v12 = 8 * HIDWORD(v17);
    result = (uint64_t *)v16;
    do
    {
      result = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(result, v8)+ 1;
      v12 -= 8;
    }
    while (v12);
  }
  if (v11)
    return (uint64_t *)WTF::fastFree(v11, v8);
  return result;
}

uint64_t WebCore::SerializedScriptValue::computeMemoryCost(WebCore::SerializedScriptValue *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t *v48;

  v2 = *((unsigned int *)this + 5);
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  if (v3)
  {
    v23 = *((unsigned int *)v3 + 3);
    if ((_DWORD)v23)
    {
      v24 = *v3;
      v25 = 56 * v23;
      v26 = v24 + 32;
      do
      {
        if (*(_BYTE *)(v26 + 16) && (v45 = *(_QWORD *)(v26 - 16)) != 0)
          v27 = atomic_load((unint64_t *)(v45 + 32));
        else
          v27 = *(_QWORD *)v26;
        v2 += v27;
        v26 += 56;
        v25 -= 56;
      }
      while (v25);
    }
  }
  v4 = (uint64_t *)*((_QWORD *)this + 18);
  if (v4)
  {
    v14 = *((unsigned int *)v4 + 3);
    if ((_DWORD)v14)
    {
      v15 = *v4;
      v16 = 56 * v14;
      v17 = v15 + 32;
      do
      {
        if (*(_BYTE *)(v17 + 16) && (v46 = *(_QWORD *)(v17 - 16)) != 0)
          v18 = atomic_load((unint64_t *)(v46 + 32));
        else
          v18 = *(_QWORD *)v17;
        v2 += v18;
        v17 += 56;
        v16 -= 56;
      }
      while (v16);
    }
  }
  v5 = *((unsigned int *)this + 41);
  if ((_DWORD)v5)
  {
    v28 = 24 * v5;
    v29 = (_BYTE *)(*((_QWORD *)this + 19) + 16);
    do
    {
      v47 = v29;
      if (*v29)
        v2 += (*(uint64_t (**)(_QWORD))(**((_QWORD **)v29 - 2) + 16))(*((_QWORD *)v29 - 2));
      v29 = v47 + 24;
      v28 -= 24;
    }
    while (v28);
  }
  v6 = *((unsigned int *)this + 11);
  if ((_DWORD)v6)
  {
    v30 = *((_QWORD *)this + 4);
    v31 = 8 * v6;
    do
    {
      if (*(_QWORD *)v30)
      {
        v32 = *(_QWORD *)(*(_QWORD *)v30 + 16);
        if (v32)
          v32 = (*(_DWORD *)(v32 + 4) << ((*(_DWORD *)(v32 + 16) & 4) == 0));
        v2 += v32;
      }
      v30 += 8;
      v31 -= 8;
    }
    while (v31);
  }
  v7 = *((_QWORD *)this + 28);
  if (v7)
  {
    v19 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v19)
    {
      v20 = *(uint64_t **)v7;
      v21 = 8 * v19;
      do
      {
        v22 = *v20++;
        v2 += *(_QWORD *)(v22 + 32);
        v21 -= 8;
      }
      while (v21);
    }
  }
  v8 = *((unsigned int *)this + 15);
  if ((_DWORD)v8)
  {
    v33 = *((_QWORD *)this + 6);
    v34 = 8 * v8;
    do
    {
      if (*(_QWORD *)v33)
        v2 += *(unsigned int *)(*(_QWORD *)v33 + 52);
      v33 += 8;
      v34 -= 8;
    }
    while (v34);
  }
  v9 = *((_DWORD *)this + 23);
  if (v9)
  {
    v35 = 104 * v9;
    v36 = (_QWORD *)(*((_QWORD *)this + 10) + 24);
    do
    {
      v2 += 4 * *(v36 - 1) * *v36;
      v36 += 13;
      v35 -= 104;
    }
    while (v35);
  }
  v10 = *((unsigned int *)this + 19);
  if ((_DWORD)v10)
  {
    v37 = *((_QWORD *)this + 8);
    v38 = 8 * v10;
    do
    {
      if (*(_QWORD *)v37)
        v2 += *(unsigned int *)(*(_QWORD *)v37 + 52);
      v37 += 8;
      v38 -= 8;
    }
    while (v38);
  }
  v11 = *((unsigned int *)this + 27);
  if ((_DWORD)v11)
  {
    v39 = (uint64_t *)*((_QWORD *)this + 12);
    v40 = 8 * v11;
    do
    {
      v48 = v39;
      v41 = *v39;
      if (*v39)
        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 64))(v41);
      v2 += v41;
      v39 = v48 + 1;
      v40 -= 8;
    }
    while (v40);
  }
  v12 = *((unsigned int *)this + 61);
  if ((_DWORD)v12)
  {
    v42 = (uint64_t *)*((_QWORD *)this + 29);
    v43 = 72 * v12;
    do
    {
      v44 = *v42;
      if (*v42)
        LODWORD(v44) = *(_DWORD *)(v44 + 4) << ((*(_DWORD *)(v44 + 16) & 4) == 0);
      v2 += v44;
      v42 += 9;
      v43 -= 72;
    }
    while (v43);
  }
  return v2;
}

void WebCore::CloneSerializer::~CloneSerializer(WebCore::CloneSerializer *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  WTF *v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  WTF **v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v29;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 37);
  if (v4)
  {
    v22 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v22)
    {
      v23 = (WTF **)*((_QWORD *)this + 37);
      do
      {
        v24 = *v23;
        if (*v23 != (WTF *)-1)
        {
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              v25 = v23;
              v26 = v22;
              v27 = (_DWORD *)*((_QWORD *)v24 + 2);
              v28 = v24;
              *((_QWORD *)v24 + 2) = 0;
              if (v27)
              {
                if (*v27 == 1)
                  JSC::ArrayBufferView::operator delete();
                else
                  --*v27;
              }
              WTF::fastFree(v28, a2);
              v22 = v26;
              v23 = v25;
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *((_QWORD *)this + 36);
  if (v5)
  {
    v17 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WTF::StringImpl **)*((_QWORD *)this + 36);
      do
      {
        v19 = *v18;
        if (*v18 != (WTF::StringImpl *)-1)
        {
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, a2);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 35);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = *((_QWORD *)this + 34);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = *((_QWORD *)this + 33);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  v9 = *((_QWORD *)this + 32);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *((_QWORD *)this + 31);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 30);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  v12 = *((_QWORD *)this + 29);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), a2);
  v13 = (uint64_t *)*((_QWORD *)this + 17);
  if (v13)
  {
    v29 = (uint64_t)this + 120;
    v20 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v13, &v29);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v13, v20);
  }
  v14 = (WTF *)*((_QWORD *)this + 16);
  if (v14 != (WebCore::CloneSerializer *)((char *)this + 144) && v14)
    WTF::fastFree(v14, a2);
  v15 = (uint64_t *)*((_QWORD *)this + 5);
  if (v15)
  {
    v29 = (uint64_t)this + 24;
    v21 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v15, &v29);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v15, v21);
  }
  v16 = (WTF *)*((_QWORD *)this + 4);
  if (v16 != (WebCore::CloneSerializer *)((char *)this + 48))
  {
    if (v16)
      WTF::fastFree(v16, a2);
  }
}

uint64_t JSC::AbstractSlotVisitor::containsOpaqueRoot(JSC::AbstractSlotVisitor *this, void *a2)
{
  WTF::ConcurrentPtrHashSet *v2;
  _DWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  int v11;
  JSC::AbstractSlotVisitor *v13;
  void *v14;

  v2 = (WTF::ConcurrentPtrHashSet *)*((_QWORD *)this + 15);
  v3 = (_DWORD *)*((_QWORD *)v2 + 6);
  if ((_DWORD *)((char *)v2 + 56) != v3)
  {
    v4 = v3[1];
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = v8;
    while (1)
    {
      v10 = *(void **)&v3[2 * v9 + 4];
      if (!v10)
        return 0;
      if (v10 == a2)
        goto LABEL_9;
      v9 = (v9 + 1) & v4;
      if (v9 == v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1943FEB44);
      }
    }
  }
  v13 = this;
  v14 = a2;
  v11 = WTF::ConcurrentPtrHashSet::containsImplSlow(v2, a2);
  this = v13;
  a2 = v14;
  if (!v11)
    return 0;
LABEL_9:
  if (*((_BYTE *)this + 131))
    (*(void (**)(JSC::AbstractSlotVisitor *, void *))(*(_QWORD *)this + 152))(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::MediaDevices::derefEventTarget(uint64_t this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::MediaDevices::~MediaDevices((WebCore::MediaDevices *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t WebCore::HTMLImageElement::HTMLImageElement(WebCore::HTMLImageElement *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  const WebCore::QualifiedName *v4;
  uint64_t v6;
  uint64_t v7;
  const WebCore::QualifiedName *v8;
  WebCore::ImageLoader *v9;
  WebCore::ImageLoader *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  *(_OWORD *)((char *)this + 8) = xmmword_1968BC9D0;
  *((_QWORD *)this + 3) = 0x1C1C00000002;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)a2 + 96;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  ++*((_DWORD *)a2 + 831);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v6 = WebCore::HTMLNames::imgTag;
  if (WebCore::HTMLNames::imgTag)
    ++*(_DWORD *)WebCore::HTMLNames::imgTag;
  *((_QWORD *)this + 12) = v6;
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E33BC680;
  *((_QWORD *)this + 14) = off_1E33AF7B0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = off_1E33B3CE0;
  v7 = *((_QWORD *)a2 + 88);
  if (v7)
  {
    v8 = *(const WebCore::QualifiedName **)(v7 + 8);
    if (v8)
      v4 = v8;
  }
  *((_QWORD *)this + 19) = &off_1E33A18C0;
  *((_QWORD *)this + 20) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::HTMLImageElement *)((char *)this + 152), (const WebCore::QualifiedName *)((char *)v4 + 192));
  *((_QWORD *)this + 19) = &off_1E33A0540;
  *((_QWORD *)this + 21) = 0;
  if (*((_BYTE *)v4 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v13 = (uint64_t)this + 152;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v4 + 40, &v13, (uint64_t)&v12);
    *(_QWORD *)this = off_1E33BF560;
    *((_QWORD *)this + 14) = &unk_1E33BFAB8;
    *((_QWORD *)this + 16) = &unk_1E33BFB20;
    *((_QWORD *)this + 19) = &unk_1E33BFB98;
    v9 = (WebCore::ImageLoader *)WTF::fastMalloc((WTF *)0x88);
    v10 = WebCore::ImageLoader::ImageLoader(v9, this);
    *(_QWORD *)v10 = off_1E33BFBF0;
    *((_QWORD *)this + 22) = v10;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 25) = 0;
    WTF::URL::invalidate((WebCore::HTMLImageElement *)((char *)this + 200));
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_BYTE *)this + 256) = 2;
    *((_DWORD *)this + 65) = 1065353216;
    *((_WORD *)this + 132) = 0;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    return (uint64_t)this;
  }
  return result;
}

WebCore::ActiveDOMObject *WebCore::ActiveDOMObject::ActiveDOMObject(WebCore::ActiveDOMObject *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ScriptExecutionContext *v2;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WebCore::ActiveDOMObject *v9;

  v2 = a2;
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v5 = (char *)a2 - 192;
    v6 = *((_QWORD *)a2 + 64);
    if (v6)
    {
      v7 = *(char **)(v6 + 8);
      if (v7)
        v5 = v7;
    }
    v2 = (WebCore::ScriptExecutionContext *)(v5 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v2);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (*((_BYTE *)v2 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x1943FEE28);
    }
    v9 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v2 + 16, (uint64_t *)&v9, (uint64_t)&v8);
  }
  return this;
}

WebCore::Node *WebCore::FrameLoader::clear(uint64_t a1, uint64_t a2, int a3, int a4, int a5, WebCore::Node **a6)
{
  WebCore::Node **v6;
  int v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  void *v22;
  int v23;
  int v24;
  WebCore::Node *result;
  WebCore::LocalDOMWindow *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  int v34;
  WebCore::WindowProxy *v35;
  WebCore::DOMWindow *v36;
  WTF::StringImpl *v37;
  WebCore::EventHandler *v38;
  WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  WebCore::Node *v42;
  WebCore::WindowProxy *v43;
  WebCore::DOMWindow *v44;
  WTF::StringImpl *v45;
  WebCore::ScriptController *v46;
  int v47;
  uint64_t v48;
  WebCore::Frame *v49;
  unsigned int *v50;
  unsigned int v51;
  _BOOL8 v52;
  _BOOL8 v53;
  WTF::StringImpl *v54;
  int v55;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  WTF *v61;
  void *v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  unsigned int *v66;
  WTF::StringImpl *v67;
  WebCore::SecurityOrigin *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  BOOL isSameOriginAs;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WebCore::Node *v75;
  WebCore::WebInjectedScriptManager **v76;
  WebCore::Node *v77;
  unsigned int *v78;
  unsigned int v79;
  _QWORD *v80;
  unsigned int *v81;
  WebCore::Node *v82;

  v6 = a6;
  v7 = a5;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = *(unsigned __int8 *)(a1 + 217);
  *(_BYTE *)(a1 + 217) = 0;
  v13 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v14 = (unsigned int *)(v13 + 1);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  if (v12)
  {
    v16 = v13[37];
    if (*(_BYTE *)(v16 + 3362) != 2)
    {
      v80 = v13;
      *(_DWORD *)(v16 + 24) += 2;
      WebCore::Document::cancelParsing(v16);
      WebCore::Document::stopActiveDOMObjects((WebCore::Document *)v16, v22);
      if (*(_QWORD *)(v16 + 1944))
      {
        v23 = a4;
        v24 = *(unsigned __int8 *)(v16 + 3405);
        WebCore::Document::willBeRemovedFromFrame((WebCore::Document *)v16);
        if (!v24)
          WebCore::Document::adjustFocusedNodeOnNodeRemoval(v16, v16, 0);
      }
      else
      {
        v23 = a4;
        WebCore::Document::willBeRemovedFromFrame((WebCore::Document *)v16);
      }
      a4 = v23;
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        v7 = a5;
        v9 = a3;
        v10 = a2;
        v11 = a1;
        v6 = a6;
        v13 = v80;
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
        v7 = a5;
        v9 = a3;
        v10 = a2;
        v11 = a1;
        v6 = a6;
        v13 = v80;
      }
    }
  }
  result = *v6;
  if (*v6)
    result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 16))(result);
  if (!v12)
  {
    if (!v13)
      return result;
    goto LABEL_66;
  }
  if (v9)
  {
    v26 = *(WebCore::LocalDOMWindow **)(v13[37] + 696);
    if (v26)
      ++*((_DWORD *)v26 + 6);
    v27 = v13[3];
    if (v27
      && (v28 = *(_QWORD *)(v27 + 8)) != 0
      && (v29 = *(_QWORD *)(*(_QWORD *)(v28 + 80) + 8),
          (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v29 + 8) + 16))(*(_QWORD *)(v29 + 8))))
    {
      if (v26)
      {
        v76 = *(WebCore::WebInjectedScriptManager ***)(v29 + 16);
        if (v76)
          WebCore::WebConsoleAgent::frameWindowDiscarded(v76, v26);
        goto LABEL_20;
      }
    }
    else if (v26)
    {
LABEL_20:
      if (*((_DWORD *)v26 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v26 + 72))(v26);
      else
        --*((_DWORD *)v26 + 6);
    }
    v30 = *(_QWORD *)(v13[37] + 696);
    if (v30)
    {
      v31 = *(_DWORD *)(v30 + 24) + 1;
      *(_DWORD *)(v30 + 24) = v31;
      if (!*(_BYTE *)(v30 + 89))
      {
        v32 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v32 = off_1E33FF7D8;
        v82 = v32;
        WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v30 + 96), &v82);
        v33 = v82;
        v82 = 0;
        if (v33)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v33 + 8))(v33);
        v31 = *(_DWORD *)(v30 + 24);
      }
      v34 = v31 - 1;
      if (v34)
        *(_DWORD *)(v30 + 24) = v34;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
    }
    else
    {
      WebCore::LocalDOMWindow::resetUnlessSuspendedForDocumentSuspension(0);
    }
    v35 = (WebCore::WindowProxy *)v13[14];
    ++*(_DWORD *)v35;
    v36 = *(WebCore::DOMWindow **)(*(_QWORD *)v10 + 696);
    if (v36)
    {
      ++*((_DWORD *)v36 + 6);
      WebCore::WindowProxy::clearJSWindowProxiesNotMatchingDOMWindow((_QWORD **)v35, v36, *(_BYTE *)(v13[37] + 3362) == 1);
      if (*((_DWORD *)v36 + 6) == 1)
        (*(void (**)(WebCore::DOMWindow *))(*(_QWORD *)v36 + 72))(v36);
      else
        --*((_DWORD *)v36 + 6);
    }
    else
    {
      WebCore::WindowProxy::clearJSWindowProxiesNotMatchingDOMWindow((_QWORD **)v35, 0, *(_BYTE *)(v13[37] + 3362) == 1);
    }
    if (*(_DWORD *)v35 == 1)
    {
      WebCore::WindowProxy::~WindowProxy(v35, v37);
      WTF::fastFree(v61, v62);
    }
    else
    {
      --*(_DWORD *)v35;
    }
    if (*(_QWORD **)(v13[16] + 8) == v13)
    {
      v65 = v13[20];
      if (!v65 || !*(_QWORD *)(v65 + 8))
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)v10 + 192), v37);
        v68 = (WebCore::SecurityOrigin *)v66;
        if (v66)
        {
          do
            v69 = __ldaxr(v66);
          while (__stlxr(v69 + 1, v66));
        }
        v82 = (WebCore::Node *)v66;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v13[37] + 192), v67);
        if (v70)
        {
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 + 1, v70));
        }
        v81 = v70;
        isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v68, (const WebCore::SecurityOrigin *)v70);
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v81, v73);
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v82, v74);
        if (!isSameOriginAs)
          WebCore::FrameTree::setSpecifiedName((WebCore::FrameTree *)(v13 + 6), MEMORY[0x1E0CBF2F8]);
      }
    }
  }
  v38 = (WebCore::EventHandler *)v13[80];
  ++*(_DWORD *)v38;
  WebCore::EventHandler::clear(v38);
  if (!*(_DWORD *)v38)
  {
    __break(0xC471u);
    JUMPOUT(0x1943FF4A8);
  }
  --*(_DWORD *)v38;
  if (v7)
  {
    v41 = v13[36];
    if (v41)
    {
      ++*(_DWORD *)(v41 + 8);
      WebCore::LocalFrameView::clear((id *)v41, v39);
      if (*(_DWORD *)(v41 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      else
        --*(_DWORD *)(v41 + 8);
    }
  }
  v82 = 0;
  WebCore::LocalFrame::setDocument((uint64_t)v13, &v82, v40);
  v42 = v82;
  v82 = 0;
  if (v42)
  {
    if (*((_DWORD *)v42 + 6) == 2)
    {
      if ((*((_WORD *)v42 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v42);
    }
    else
    {
      *((_DWORD *)v42 + 6) -= 2;
    }
  }
  **(_BYTE **)(v11 + 56) = 0;
  if (v9)
  {
    v43 = (WebCore::WindowProxy *)v13[14];
    ++*(_DWORD *)v43;
    v44 = *(WebCore::DOMWindow **)(*(_QWORD *)v10 + 696);
    if (v44)
    {
      ++*((_DWORD *)v44 + 6);
      WebCore::WindowProxy::setDOMWindow((_QWORD **)v43, v44);
      if (*((_DWORD *)v44 + 6) == 1)
        (*(void (**)(WebCore::DOMWindow *))(*(_QWORD *)v44 + 72))(v44);
      else
        --*((_DWORD *)v44 + 6);
    }
    else
    {
      WebCore::WindowProxy::setDOMWindow((_QWORD **)v43, 0);
    }
    if (*(_DWORD *)v43 == 1)
    {
      WebCore::WindowProxy::~WindowProxy(v43, v45);
      WTF::fastFree(v63, v64);
    }
    else
    {
      --*(_DWORD *)v43;
    }
  }
  if (a4)
  {
    v46 = (WebCore::ScriptController *)v13[38];
    ++*((_DWORD *)v46 + 2);
    WebCore::ScriptController::clearScriptObjects(v46);
    v47 = *((_DWORD *)v46 + 2);
    if (!v47)
    {
      __break(0xC471u);
      JUMPOUT(0x1943FF528);
    }
    *((_DWORD *)v46 + 2) = v47 - 1;
  }
  v48 = WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(*(_QWORD *)v10 + 192));
  if (v48)
  {
    v50 = (unsigned int *)v48;
    do
      v51 = __ldaxr((unsigned int *)v48);
    while (__stlxr(v51 + 1, (unsigned int *)v48));
    v52 = *(_QWORD *)(v48 + 152) == 0;
    v53 = *(_QWORD *)(v48 + 160) == 0;
    v54 = (WTF::StringImpl *)v13[38];
    ++*((_DWORD *)v54 + 2);
    WebCore::ScriptController::setEvalEnabled(v54, (WTF::StringImpl *)v52, (const WTF::String *)(v48 + 152));
    WebCore::ScriptController::setWebAssemblyEnabled(v54, (WTF::StringImpl *)v53, (const WTF::String *)(v50 + 40));
    v55 = *((_DWORD *)v54 + 2);
    if (!v55)
    {
      __break(0xC471u);
      JUMPOUT(0x1943FF4C8);
    }
    *((_DWORD *)v54 + 2) = v55 - 1;
    if (!atomic_load(v50))
    {
      __break(0xC471u);
      JUMPOUT(0x1943FF4E8);
    }
    do
      v57 = __ldaxr(v50);
    while (__stlxr(v57 - 1, v50));
  }
  v58 = v13[19];
  ++*(_DWORD *)v58;
  if ((*(_QWORD *)(v58 + 48) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(double *)((*(_QWORD *)(v58 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      goto LABEL_109;
    v77 = *(WebCore::Node **)(*(_QWORD *)(v58 + 8) + 8);
    v78 = (unsigned int *)((char *)v77 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
    v82 = v77;
    WebCore::InspectorInstrumentation::frameClearedScheduledNavigation(v77, v49);
    WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v82);
    if ((*(_QWORD *)(v58 + 48) & 0xFFFFFFFFFFFFLL) != 0)
LABEL_109:
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v58 + 16));
  }
  result = *(WebCore::Node **)(v58 + 72);
  *(_QWORD *)(v58 + 72) = 0;
  if (result)
    result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
  if (!*(_DWORD *)v58)
  {
    __break(0xC471u);
    JUMPOUT(0x1943FF508);
  }
  --*(_DWORD *)v58;
  if ((*(_QWORD *)(v11 + 296) & 0xFFFFFFFFFFFFLL) != 0)
    result = (WebCore::Node *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v11 + 264));
  *(_WORD *)(v11 + 320) = 0;
  if (*(_DWORD *)(v11 + 64) == 2)
    *(_DWORD *)(v11 + 64) = 3;
  do
  {
LABEL_66:
    v59 = __ldaxr(v14);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v14));
  if (!v60)
  {
    atomic_store(1u, v14);
    v75 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v75 = off_1E33F5E98;
    *((_QWORD *)v75 + 1) = v14;
    v82 = v75;
    WTF::ensureOnMainThread();
    result = v82;
    v82 = 0;
    if (result)
      return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::LocalDOMWindow(WebCore::LocalDOMWindow *this, WebCore::Document *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t IdentifierInternal;
  void (*v7)(void *);
  uint64_t result;
  char v9;
  char **v10;
  char *v11;

  v4 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v4 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    if (!WTF::ObjectIdentifierGeneric<WebCore::WindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      v5 = WebCore::Process::globalIdentifier;
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      *((_DWORD *)this + 6) = 1;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = &off_1E33FE080;
      *((_QWORD *)this + 4) = v5;
      *((_QWORD *)this + 5) = IdentifierInternal;
      *((_QWORD *)this + 6) = 0;
      *((_BYTE *)this + 56) = 0;
      *((_QWORD *)this + 8) = &off_1E33A18C0;
      *((_QWORD *)this + 9) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::LocalDOMWindow *)((char *)this + 64), (WebCore::Document *)((char *)a2 + 192));
      *((_QWORD *)this + 10) = 0;
      *(_QWORD *)this = off_1E33FED08;
      *((_QWORD *)this + 8) = &unk_1E33FED98;
      *((_BYTE *)this + 288) = 0;
      *((_DWORD *)this + 22) = 0;
      *((_BYTE *)this + 92) = 0;
      *((_OWORD *)this + 7) = 0u;
      *((_OWORD *)this + 8) = 0u;
      *((_OWORD *)this + 9) = 0u;
      *((_OWORD *)this + 10) = 0u;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_OWORD *)this + 13) = 0u;
      *((_OWORD *)this + 14) = 0u;
      *((_OWORD *)this + 15) = 0u;
      *((_OWORD *)this + 16) = 0u;
      *((_OWORD *)this + 6) = 0u;
      *(_OWORD *)((char *)this + 265) = 0u;
      *((_QWORD *)this + 37) = 0x7FF0000000000000;
      *((_QWORD *)this + 38) = 0x7FF0000000000000;
      *((_WORD *)this + 156) = 256;
      *((_BYTE *)this + 314) = 0;
      *((_QWORD *)this + 40) = 0;
      *((_QWORD *)this + 41) = 0;
      WTF::addLanguageChangeObserver(this, WebCore::languagesChangedCallback, v7);
      return (uint64_t)this;
    }
  }
  else
  {
    __break(1u);
  }
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Document::ensureFontSelector(WebCore::Document *this)
{
  WebCore::CSSFontSelector *v2;
  _DWORD *v3;
  WebCore::CSSFontSelector *v5[3];
  uint64_t v6;

  WebCore::CSSFontSelector::create((WebCore::Document *)((char *)this + 192), v5);
  v2 = v5[0];
  v3 = (_DWORD *)*((_QWORD *)this + 331);
  *((WebCore::CSSFontSelector **)this + 331) = v5[0];
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v2 = (WebCore::CSSFontSelector *)*((_QWORD *)this + 331);
    }
    else
    {
      --v3[2];
    }
  }
  v6 = (uint64_t)this + 504;
  WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::add((uint64_t *)v2 + 13, &v6, (uint64_t)v5);
  return *((_QWORD *)this + 331);
}

WebCore::CSSFontSelector *WebCore::CSSFontSelector::CSSFontSelector(WebCore::CSSFontSelector *this, WebCore::ScriptExecutionContext *a2)
{
  char *v4;
  WebCore::ScriptExecutionContext *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WebCore *v15;
  int v16;
  _DWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  char *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  _BYTE v34[24];

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3397BD0;
  *((_QWORD *)this + 3) = off_1E3397B50;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (char *)this + 40;
  v5 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v26 = (char *)a2 - 192;
    v27 = *((_QWORD *)a2 + 64);
    if (v27)
    {
      v28 = *(char **)(v27 + 8);
      if (v28)
        v26 = v28;
    }
    v5 = (WebCore::ScriptExecutionContext *)(v26 + 192);
  }
  *((_QWORD *)this + 5) = &off_1E33A18C0;
  *((_QWORD *)this + 6) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::CSSFontSelector *)((char *)this + 40), v5);
  *((_QWORD *)this + 5) = &off_1E33A0540;
  *((_QWORD *)this + 7) = 0;
  if (*((_BYTE *)v5 + 278))
  {
    __break(0xC471u);
    goto LABEL_42;
  }
  v33 = v4;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v5 + 16, (uint64_t *)&v33, (uint64_t)v34);
  *(_QWORD *)this = off_1E3397A20;
  *((_QWORD *)this + 3) = &unk_1E3397AA8;
  *((_QWORD *)this + 5) = &unk_1E3397AF8;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v6 = *((_QWORD *)a2 + 13);
  if (v6)
    goto LABEL_45;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = (char *)a2 + 96;
  v30 = (unsigned int *)*((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v6;
  if (!v30)
    goto LABEL_45;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, v29);
  }
  v6 = *((_QWORD *)a2 + 13);
  if (v6)
  {
LABEL_45:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  *((_QWORD *)this + 10) = v6;
  *((_QWORD *)this + 11) = 0;
  v8 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v8 + 16) = 1;
  *(_QWORD *)v8 = off_1E33978A0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_DWORD *)(v8 + 80) = 1;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  v9 = *((_QWORD *)this + 2);
  if (v9)
    goto LABEL_46;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = this;
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v9;
  if (!v11)
    goto LABEL_46;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
LABEL_46:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)(v8 + 120) = v9;
  *(_DWORD *)(v8 + 128) = 0;
  *((_QWORD *)this + 12) = v8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  v15 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v15 = off_1E3397D58;
  *((_QWORD *)v15 + 1) = this;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = v15;
  *((_DWORD *)this + 40) = ++WebCore::fontSelectorId;
  *((_QWORD *)this + 23) = 0;
  *(_QWORD *)((char *)this + 164) = 0;
  *(_DWORD *)((char *)this + 171) = 0;
  if (*((_BYTE *)a2 + 274))
  {
    v15 = (WebCore *)WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendContainerWithMapping<WebCore::WebKitFontFamilyNames::FamilyNamesList<WTF::StringImpl::StaticStringImpl const*,8ul> &,WebCore::CSSFontSelector::CSSFontSelector(WebCore::ScriptExecutionContext &)::$_1>((uint64_t)this + 176);
    goto LABEL_22;
  }
  v16 = HIDWORD(qword_1EE2F9C38);
  if (HIDWORD(qword_1EE2F9C38))
  {
    if (!(HIDWORD(qword_1EE2F9C38) >> 29))
    {
      v15 = (WebCore *)WTF::fastMalloc((WTF *)(8 * HIDWORD(qword_1EE2F9C38)));
      *((_DWORD *)this + 46) = v16;
      *((_QWORD *)this + 22) = v15;
      if (HIDWORD(qword_1EE2F9C38))
      {
        v17 = (_DWORD **)WebCore::WebKitFontFamilyNames::familyNames;
        v18 = 8 * HIDWORD(qword_1EE2F9C38);
        do
        {
          v19 = *((unsigned int *)this + 47);
          if ((_DWORD)v19 == *((_DWORD *)this + 46))
          {
            v15 = (WebCore *)WTF::Vector<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBuffer*>((uint64_t)this + 176, v17);
          }
          else
          {
            v20 = *((_QWORD *)this + 22);
            v21 = *v17;
            if (*v17)
              *v21 += 2;
            *(_QWORD *)(v20 + 8 * v19) = v21;
            *((_DWORD *)this + 47) = v19 + 1;
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
      goto LABEL_22;
    }
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x1943FFB04);
  }
LABEL_22:
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
    v23 = WebCore::threadGlobalDataSlow(v15);
  v24 = *(_QWORD *)(v23 + 80);
  if (!v24)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v23);
    v24 = *(_QWORD *)(v23 + 80);
  }
  WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FontSelector>(v24 + 56, (uint64_t)this, (uint64_t)v34);
  WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>(*((_QWORD *)this + 12) + 88, (uint64_t *)this + 18, (uint64_t)v34);
  return this;
}

unsigned int *WebCore::HTMLImageElement::create@<X0>(WebCore::HTMLImageElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::QualifiedName *v14;
  WebCore::ImageLoader *v15;
  WebCore::ImageLoader *v16;
  unsigned int *result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v9 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v9 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v10 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v10;
  v11 = 0;
  *(_QWORD *)(v9 + 96) = v10;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)v9 = off_1E33BC680;
  *(_QWORD *)(v9 + 112) = off_1E33AF7B0;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 128) = off_1E33B3CE0;
  *(_QWORD *)(v9 + 136) = 0;
  if (a3)
  {
    v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
    if (v11)
    {
      do
        v22 = __ldaxr(v11);
      while (__stlxr(v22 + 1, v11));
    }
  }
  *(_QWORD *)(v9 + 144) = v11;
  v12 = v9 + 152;
  v13 = *((_QWORD *)a2 + 88);
  if (v13)
  {
    v14 = *(const WebCore::QualifiedName **)(v13 + 8);
    if (v14)
      a2 = v14;
  }
  *(_QWORD *)(v9 + 152) = &off_1E33A18C0;
  *(_QWORD *)(v9 + 160) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v9 + 152), (const WebCore::QualifiedName *)((char *)a2 + 192));
  *(_QWORD *)(v9 + 152) = &off_1E33A0540;
  *(_QWORD *)(v9 + 168) = 0;
  if (*((_BYTE *)a2 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x1943FFD6CLL);
  }
  v24 = v9 + 152;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 40, &v24, (uint64_t)&v23);
  *(_QWORD *)v9 = off_1E33BF560;
  *(_QWORD *)(v9 + 112) = &unk_1E33BFAB8;
  *(_QWORD *)(v9 + 128) = &unk_1E33BFB20;
  *(_QWORD *)(v9 + 152) = &unk_1E33BFB98;
  v15 = (WebCore::ImageLoader *)WTF::fastMalloc((WTF *)0x88);
  v16 = WebCore::ImageLoader::ImageLoader(v15, (WebCore::Element *)v9);
  *(_QWORD *)v16 = off_1E33BFBF0;
  *(_QWORD *)(v9 + 176) = v16;
  *(_QWORD *)(v9 + 184) = 0;
  *(_QWORD *)(v9 + 192) = 0;
  *(_QWORD *)(v9 + 200) = 0;
  result = (unsigned int *)WTF::URL::invalidate((WTF::URL *)(v9 + 200));
  *(_QWORD *)(v9 + 240) = 0;
  *(_QWORD *)(v9 + 248) = 0;
  *(_BYTE *)(v9 + 256) = 2;
  *(_DWORD *)(v9 + 260) = 1065353216;
  *(_WORD *)(v9 + 264) = 0;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *a4 = v9;
  v19 = *(_QWORD *)(v9 + 160);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      v21 = *(unsigned __int8 *)(v20 + 178);
      if (*(_BYTE *)(v20 + 178))
      {
        if (v21 == 1 || v21 == 2)
          ++*(_DWORD *)(v20 + 216);
      }
      else
      {
        *(_DWORD *)(v20 - 264) += 2;
      }
      if (*(_BYTE *)(v20 + 179))
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(v12, *(unsigned __int8 *)(v20 + 177));
      if (*(_BYTE *)(v20 + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
      return WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v20 - 96), v18);
    }
  }
  return result;
}

uint64_t *WebCore::ContextDestructionObserver::observeContext(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::ContextDestructionObserver *v16;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      WebCore::ScriptExecutionContext::willDestroyDestructionObserver((WebCore::ScriptExecutionContext *)(v5 - 96), this);
  }
  if (a2)
  {
    result = (uint64_t *)*((_QWORD *)a2 + 13);
    if (result)
      goto LABEL_26;
    result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    result[1] = (uint64_t)a2 + 96;
    v12 = (unsigned int *)*((_QWORD *)a2 + 13);
    *((_QWORD *)a2 + 13) = result;
    if (!v12)
      goto LABEL_26;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
    result = (uint64_t *)*((_QWORD *)a2 + 13);
    if (result)
    {
LABEL_26:
      do
        v11 = __ldaxr((unsigned int *)result);
      while (__stlxr(v11 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = result;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
    result = (uint64_t *)*((_QWORD *)this + 1);
  }
  if (result)
  {
    v10 = result[1];
    if (v10)
    {
      v16 = this;
      return WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::add((uint64_t *)(v10 + 24), (uint64_t *)&v16, (uint64_t)&v15);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 8 * v27;
        goto LABEL_18;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v26 = 8;
LABEL_27:
      result = WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::rehash(v4, v26, v14);
      v14 = result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_17;
    }
LABEL_20:
    v26 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_27;
  }
LABEL_17:
  v24 = v20 + 8 * v23;
  v25 = 1;
LABEL_18:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

uint64_t *WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 8 * v27;
        goto LABEL_18;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v26 = 8;
LABEL_25:
      result = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::rehash(v4, v26, v14);
      v14 = result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_17;
    }
LABEL_20:
    v26 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_25;
  }
LABEL_17:
  v24 = v20 + 8 * v23;
  v25 = 1;
LABEL_18:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

WebCore::ImageLoader *WebCore::ImageLoader::ImageLoader(WebCore::ImageLoader *this, WebCore::Element *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;

  *(_QWORD *)this = off_1E33F60F0;
  *((_QWORD *)this + 1) = 0;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v6 = *(unsigned int **)(StatusReg + 736);
  if (!v6)
    v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 9) = v6;
  *((_QWORD *)this + 4) = off_1E31F7378;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E33F6510;
  v8[1] = WebCore::ImageLoader::timerFired;
  v8[2] = 0;
  v8[3] = this;
  *((_QWORD *)this + 10) = v8;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_BYTE *)this + 128) = *((_BYTE *)this + 128) & 0xC0 | 8;
  *((_BYTE *)this + 129) = 0;
  return this;
}

_QWORD *WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 8 * v27;
        goto LABEL_18;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v26 = 8;
LABEL_27:
      result = WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::rehash(v4, v26, v14);
      v14 = result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_17;
    }
LABEL_20:
    v26 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_27;
  }
LABEL_17:
  v24 = v20 + 8 * v23;
  v25 = 1;
LABEL_18:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      if ((unint64_t)(*v14 + 1) >= 2)
      {
        v16 = *a1;
        v17 = *a1 ? *(_DWORD *)(v16 - 8) : 0;
        v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 8 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_QWORD *)(v16 + 8 * v23);
        *v25 = v15;
        if (v14 == a3)
          v11 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v11 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

WTF::StringImpl *WebCore::FrameTree::setSpecifiedName(WebCore::FrameTree *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::Document::willBeRemovedFromFrame(WebCore::Document *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::ServiceWorker *v8;
  _DWORD *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  void *v13;
  WebCore::UndoManager *v14;
  WebCore::UndoManager *v15;
  WebCore::UndoItem **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  WebCore::TextManipulationController *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::Document *v28;
  char *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::LocalDOMWindow *v40;
  uint64_t v41;
  WebCore::Style::Resolver *v42;
  WTF::StringImpl ***v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::Page *v48;
  WebCore::ImageOverlayController *v49;
  uint64_t v50;
  void *v52;
  uint64_t *v53;
  uint64_t v54;
  WebCore::Document *v55;
  WebCore::Document *v56;
  uint64_t *v57;
  uint64_t v58;
  WebCore::Document *v59;
  WebCore::Document *v60;
  WebCore::MediaQueryMatcher *v61;
  void *v62;
  uint64_t *v63;
  _QWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::Page *v69;
  void *v70;
  WebCore::Editor *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  void *v85;
  bmalloc::api *v86;
  void *v87;
  int v88;
  WTF *v89;
  void *v90;
  WTF *v91;
  void *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  WebCore::Document *i;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WebCore::InspectorCSSAgent *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  WTF *v131;
  uint64_t *v132;
  unsigned int v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  void **v138;
  void *v139;
  uint64_t v141;
  BOOL v142;
  WebCore::Document *v143;
  WebCore::AXObjectCache *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD v150[2];
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 3406))
    return;
  v3 = (unsigned int *)*((_QWORD *)this + 393);
  if (v3)
  {
    v4 = v3 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 32))(v3);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v4);
      v125 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v125 = off_1E33604F8;
      v125[1] = v4;
      *(_QWORD *)&v150[0] = v125;
      WTF::ensureOnMainRunLoop();
      v126 = *(_QWORD *)&v150[0];
      *(_QWORD *)&v150[0] = 0;
      if (v126)
        (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
    }
  }
  v8 = (WebCore::ServiceWorker *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 1)
    {
      WebCore::ServiceWorker::~ServiceWorker(v8, a2);
      bmalloc::api::isoDeallocate(v86, v87);
    }
    else
    {
      --*((_DWORD *)v8 + 6);
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 370);
  if (v9 && !*((_BYTE *)this + 3406) && !*((_BYTE *)this + 3412))
  {
    ++v9[2];
    v10 = *((_OWORD *)this + 27);
    v150[0] = *((_OWORD *)this + 26);
    v150[1] = v10;
    (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)v9 + 112))(v9, v150);
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
    v12 = (_DWORD *)*((_QWORD *)this + 370);
    *((_QWORD *)this + 370) = 0;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
    WebCore::Document::updateServiceWorkerClientData(this, v11);
  }
  WebCore::Document::clearTouchEventHandlersAndListeners((uint64_t)this, a2);
  v14 = (WebCore::UndoManager *)*((_QWORD *)this + 381);
  if (!v14)
  {
    v14 = (WebCore::UndoManager *)bmalloc::api::isoAllocate();
    *(_DWORD *)v14 = 1;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = this;
    *((_QWORD *)v14 + 3) = 0;
    v15 = (WebCore::UndoManager *)*((_QWORD *)this + 381);
    *((_QWORD *)this + 381) = v14;
    if (v15)
    {
      WTF::RefCounted<WebCore::UndoManager>::deref(v15, v13);
      v14 = (WebCore::UndoManager *)*((_QWORD *)this + 381);
    }
  }
  ++*(_DWORD *)v14;
  v16 = (WebCore::UndoItem **)*((_QWORD *)v14 + 3);
  if (!v16)
  {
    v17 = 0;
    v18 = 0;
LABEL_25:
    v19 = (uint64_t *)&v16[v18];
    goto LABEL_26;
  }
  v18 = *((unsigned int *)v16 - 1);
  v19 = (uint64_t *)&v16[v18];
  if (!*((_DWORD *)v16 - 3))
  {
    v17 = (uint64_t *)&v16[v18];
    goto LABEL_25;
  }
  v17 = (uint64_t *)*((_QWORD *)v14 + 3);
  if ((_DWORD)v18)
  {
    v94 = 8 * v18;
    v17 = (uint64_t *)*((_QWORD *)v14 + 3);
    while ((unint64_t)(*v17 + 1) <= 1)
    {
      ++v17;
      v94 -= 8;
      if (!v94)
      {
        v17 = v19;
        break;
      }
    }
  }
LABEL_26:
  if (v16)
    v20 = (uint64_t *)&v16[*((unsigned int *)v16 - 1)];
  else
    v20 = 0;
  if (v20 == v17)
  {
    if (!v16)
      goto LABEL_30;
    goto LABEL_168;
  }
  do
  {
    v93 = v17 + 1;
    WebCore::UndoItem::setUndoManager(*v17, 0);
    v17 = v19;
    if (v93 != v19)
    {
      v17 = v93;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        if (++v17 == v19)
        {
          v17 = v19;
          break;
        }
      }
    }
  }
  while (v17 != v20);
  v16 = (WebCore::UndoItem **)*((_QWORD *)v14 + 3);
  if (v16)
  {
LABEL_168:
    *((_QWORD *)v14 + 3) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>>::deallocateTable(v16, v13);
  }
LABEL_30:
  WTF::RefCounted<WebCore::UndoManager>::deref(v14, v13);
  v22 = (WebCore::TextManipulationController *)*((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v22)
  {
    WebCore::TextManipulationController::~TextManipulationController(v22, v21);
    if (*(_DWORD *)(v23 + 8))
    {
      *(_QWORD *)(v23 + 144) = 0;
      *(_OWORD *)(v23 + 112) = 0u;
      *(_OWORD *)(v23 + 128) = 0u;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_OWORD *)(v23 + 96) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)v23 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v23, v21);
    }
  }
  if (!*((_BYTE *)this + 3362) && !*((_BYTE *)this + 3405))
  {
    v24 = *((_QWORD *)this + 66);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 8);
      if (v25)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v25 + 128) + 8);
        if (v26 && *(_BYTE *)(v26 + 144) == 0)
        {
          v28 = *(WebCore::Document **)(v26 + 296);
          if (v28)
          {
            if (v28 != this && WebCore::Document::hasEverCreatedAnAXObjectCache != 0)
            {
LABEL_273:
              v141 = *(_QWORD *)(*(_QWORD *)(v25 + 128) + 8);
              if (v141)
                v142 = *(_BYTE *)(v141 + 144) == 0;
              else
                v142 = 0;
              if (!v142)
                goto LABEL_279;
              v143 = *(WebCore::Document **)(v141 + 296);
              if (!v143)
                goto LABEL_279;
              goto LABEL_280;
            }
          }
        }
      }
LABEL_43:
      v29 = (char *)this + 528;
      goto LABEL_44;
    }
LABEL_223:
    v29 = (char *)this + 528;
    goto LABEL_224;
  }
  v24 = *((_QWORD *)this + 66);
  if (!v24)
    goto LABEL_223;
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
    goto LABEL_43;
  v108 = *(_QWORD *)(v25 + 120);
  if (!v108)
    goto LABEL_43;
  v109 = *(_QWORD *)(v108 + 8);
  for (i = this; v109; v109 = *(_QWORD *)(v113 + 8))
  {
    i = *(WebCore::Document **)(*(_QWORD *)(v109 + 40) + 8);
    v111 = *((_QWORD *)i + 66);
    if (!v111)
      break;
    v112 = *(_QWORD *)(v111 + 8);
    if (!v112)
      break;
    v113 = *(_QWORD *)(v112 + 120);
    if (!v113)
      break;
  }
  if (i == this || WebCore::Document::hasEverCreatedAnAXObjectCache == 0)
    goto LABEL_221;
  if (!*((_BYTE *)this + 3362))
  {
    if (!*((_BYTE *)this + 3405))
      goto LABEL_273;
    v108 = *(_QWORD *)(v25 + 120);
  }
  if (!v108 || (v146 = *(_QWORD *)(v108 + 8)) == 0)
  {
LABEL_279:
    v143 = this;
    goto LABEL_280;
  }
  do
  {
    v143 = *(WebCore::Document **)(*(_QWORD *)(v146 + 40) + 8);
    v147 = *((_QWORD *)v143 + 66);
    if (!v147)
      break;
    v148 = *(_QWORD *)(v147 + 8);
    if (!v148)
      break;
    v149 = *(_QWORD *)(v148 + 120);
    if (!v149)
      break;
    v146 = *(_QWORD *)(v149 + 8);
  }
  while (v146);
LABEL_280:
  v144 = (WebCore::AXObjectCache *)*((_QWORD *)v143 + 186);
  if (v144)
  {
    ++*((_DWORD *)v144 + 2);
    WebCore::AXObjectCache::prepareForDocumentDestruction(v144, this);
    v145 = *((_DWORD *)v144 + 2);
    if (!v145)
      goto LABEL_294;
    *((_DWORD *)v144 + 2) = v145 - 1;
    v24 = *((_QWORD *)this + 66);
  }
LABEL_221:
  v29 = (char *)this + 528;
  if (!v24)
    goto LABEL_224;
LABEL_44:
  v30 = *(_QWORD *)(v24 + 8);
  if (!v30)
  {
LABEL_224:
    v115 = ++WebCore::NavigationDisabler::s_globalNavigationDisableCount;
    if ((*((_WORD *)this + 39) & 0x3FF) != 0)
    {
      WebCore::disconnectSubframes(this, 0);
      v115 = WebCore::NavigationDisabler::s_globalNavigationDisableCount;
    }
    WebCore::NavigationDisabler::s_globalNavigationDisableCount = v115 - 1;
    goto LABEL_58;
  }
  v31 = (unsigned int *)(v30 + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  v33 = *(_QWORD *)(*(_QWORD *)(v30 + 128) + 8);
  v34 = *(unsigned __int8 *)(v33 + 144);
  if (v33)
    v35 = v34 == 0;
  else
    v35 = 0;
  if (v35)
    ++*(_DWORD *)(v33 + 608);
  if ((*((_WORD *)this + 39) & 0x3FF) == 0)
  {
    if (v34)
      goto LABEL_56;
    goto LABEL_55;
  }
  WebCore::disconnectSubframes(this, 0);
  v33 = *(_QWORD *)(*(_QWORD *)(v30 + 128) + 8);
  if (!*(_BYTE *)(v33 + 144))
  {
LABEL_55:
    --*(_DWORD *)(v33 + 608);
    goto LABEL_56;
  }
  do
  {
LABEL_56:
    v36 = __ldaxr(v31);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v31));
  if (!v37)
  {
    atomic_store(1u, v31);
    v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v127 = off_1E31FE290;
    v127[1] = v31;
    *(_QWORD *)&v150[0] = v127;
    WTF::ensureOnMainThread();
    v128 = *(_QWORD *)&v150[0];
    *(_QWORD *)&v150[0] = 0;
    if (v128)
      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  }
LABEL_58:
  if (*(_QWORD *)v29 && (v38 = *(_QWORD *)(*(_QWORD *)v29 + 8)) != 0)
  {
    v39 = *(_QWORD *)(v38 + 88);
    if (v39)
    {
      v88 = 0;
      do
      {
        v39 = *(_QWORD *)(v39 + 72);
        --v88;
      }
      while (v39);
      if (v88)
      {
LABEL_294:
        __break(0xC471u);
        JUMPOUT(0x194400FCCLL);
      }
    }
    ++WebCore::ScriptDisallowedScope::s_count;
    v40 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
    if (v40)
    {
      ++*((_DWORD *)v40 + 6);
      WebCore::LocalDOMWindow::willDetachDocumentFromFrame(v40);
      if (*((_DWORD *)v40 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v40 + 72))(v40);
      else
        --*((_DWORD *)v40 + 6);
    }
  }
  else
  {
    ++WebCore::ScriptDisallowedScope::s_count;
  }
  v41 = *((_QWORD *)this + 166);
  v42 = *(WebCore::Style::Resolver **)(v41 + 32);
  *(_QWORD *)(v41 + 32) = 0;
  if (v42)
    WTF::RefCounted<WebCore::Style::Resolver>::deref(v42);
  v43 = *(WTF::StringImpl ****)(v41 + 296);
  v44 = v43[2];
  if (v44 && *((_DWORD *)v44 - 3))
  {
    WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(v43 + 2, (WTF::StringImpl *)v21);
    WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v43, MEMORY[0x1E0CBF2F8]);
  }
  v45 = *(_QWORD *)(v41 + 304);
  if (*(_QWORD *)v45 && *(_DWORD *)(*(_QWORD *)v45 - 12))
  {
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(v41 + 304), v21);
    *(_BYTE *)(v45 + 8) = 1;
  }
  if (*((_QWORD *)this + 243) && !*((_BYTE *)this + 3405))
    WebCore::Document::destroyRenderTree(this, v21);
  if ((*((_WORD *)this + 1679) & 8) != 0)
  {
    v95 = *((_QWORD *)this + 441);
    *((_QWORD *)this + 441) = 0;
    if (v95)
    {
      if (*(_DWORD *)(v95 + 24) == 2)
      {
        if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v95);
      }
      else
      {
        *(_DWORD *)(v95 + 24) -= 2;
      }
    }
  }
  if (*(_QWORD *)v29)
  {
    v46 = *(_QWORD *)(*(_QWORD *)v29 + 8);
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 24);
      if (v47)
      {
        v48 = *(WebCore::Page **)(v47 + 8);
        if (v48)
        {
          ++*(_DWORD *)v48;
          v49 = (WebCore::ImageOverlayController *)*((_QWORD *)v48 + 151);
          if (v49)
            WebCore::ImageOverlayController::documentDetached(v49, this);
          v50 = *((_QWORD *)v48 + 29);
          if (v50)
            (*(void (**)(uint64_t, WebCore::Document *))(*(_QWORD *)v50 + 56))(v50, this);
          if (*(_DWORD *)v48 == 1)
          {
            WebCore::Page::~Page(v48);
            WTF::fastFree(v89, v90);
          }
          else
          {
            --*(_DWORD *)v48;
          }
        }
      }
    }
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    if (*(_QWORD *)v29)
    {
      v116 = *(_QWORD *)(*(_QWORD *)v29 + 8);
      if (v116)
      {
        v117 = *(_QWORD *)(v116 + 24);
        if (v117)
        {
          v118 = *(_QWORD *)(v117 + 8);
          if (v118)
            goto LABEL_237;
        }
      }
    }
    v119 = *((_QWORD *)this + 329);
    if (v119)
    {
      v120 = *(_QWORD *)(v119 + 8);
      if (v120)
      {
        v121 = *(_QWORD *)(v120 + 528);
        if (v121)
        {
          v122 = *(_QWORD *)(v121 + 8);
          if (v122)
          {
            v123 = *(_QWORD *)(v122 + 24);
            if (v123)
            {
              v118 = *(_QWORD *)(v123 + 8);
              if (v118)
              {
LABEL_237:
                v124 = *(WebCore::InspectorCSSAgent **)(*(_QWORD *)(*(_QWORD *)(v118 + 80) + 8) + 112);
                if (v124)
                  WebCore::InspectorCSSAgent::documentDetached(v124, this);
              }
            }
          }
        }
      }
    }
  }
  WebCore::Document::commonTeardown(this);
  v53 = (uint64_t *)*((_QWORD *)this + 287);
  if (v53)
  {
    v54 = *v53;
    if (v54)
    {
      if (*(_DWORD *)(v54 - 12))
      {
        v55 = (WebCore::Document *)WebCore::Document::parentDocument(this);
        if (v55)
        {
          v56 = v55;
          *((_DWORD *)v55 + 6) += 2;
          WebCore::Document::didRemoveEventTargetNode(v55, this);
          if (*((_DWORD *)v56 + 6) == 2)
          {
            if ((*((_WORD *)v56 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v56);
          }
          else
          {
            *((_DWORD *)v56 + 6) -= 2;
          }
        }
      }
    }
  }
  v57 = (uint64_t *)*((_QWORD *)this + 288);
  if (v57)
  {
    v58 = *v57;
    if (v58)
    {
      if (*(_DWORD *)(v58 - 12))
      {
        v59 = (WebCore::Document *)WebCore::Document::parentDocument(this);
        if (v59)
        {
          v60 = v59;
          *((_DWORD *)v59 + 6) += 2;
          WebCore::Document::didRemoveEventTargetNode(v59, this);
          if (*((_DWORD *)v60 + 6) == 2)
          {
            if ((*((_WORD *)v60 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v60);
          }
          else
          {
            *((_DWORD *)v60 + 6) -= 2;
          }
        }
      }
    }
  }
  v61 = (WebCore::MediaQueryMatcher *)*((_QWORD *)this + 286);
  if (v61)
  {
    ++*(_DWORD *)v61;
    WebCore::MediaQueryMatcher::documentDestroyed(v61, v52);
    WTF::RefCounted<WebCore::MediaQueryMatcher>::deref(v61, v62);
  }
  v63 = (uint64_t *)*((_QWORD *)this + 341);
  if (v63)
  {
    v96 = *((unsigned int *)v63 - 3);
    if ((_DWORD)v96)
    {
      if (*(_QWORD *)v29)
      {
        v97 = *(_QWORD *)(*(_QWORD *)v29 + 8);
        if (v97)
        {
          v98 = *(_QWORD *)(v97 + 24);
          if (v98)
          {
            if (*(_QWORD *)(v98 + 8))
            {
              v99 = *((unsigned int *)v63 - 1);
              v100 = &v63[2 * v99];
              if ((_DWORD)v99)
              {
                v101 = 16 * v99;
                while ((unint64_t)(*v63 + 1) <= 1)
                {
                  v63 += 2;
                  v101 -= 16;
                  if (!v101)
                  {
                    v102 = v100;
                    goto LABEL_251;
                  }
                }
              }
              v102 = v63;
LABEL_251:
              if (v96 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x19440161CLL);
              }
              v129 = WTF::fastMalloc((WTF *)(8 * v96));
              v131 = (WTF *)v129;
              if (v100 != v102)
              {
                v132 = v102;
                v133 = 0;
                v134 = *v102;
                v135 = 1;
LABEL_254:
                v136 = v135;
                *(_QWORD *)(v129 + 8 * v133++) = v134;
                while (1)
                {
                  v132 += 2;
                  if (v132 == v100)
                    break;
                  v134 = *v132;
                  if ((unint64_t)(*v132 + 1) > 1)
                  {
                    ++v135;
                    if (v132 != v100)
                      goto LABEL_254;
                    break;
                  }
                }
                if (v133)
                {
                  v137 = 8 * v136;
                  v138 = (void **)v129;
                  do
                  {
                    v139 = *v138++;
                    WebCore::Document::removePlaybackTargetPickerClient((uint64_t *)this, v139);
                    v137 -= 8;
                  }
                  while (v137);
                }
              }
              WTF::fastFree(v131, v130);
            }
          }
        }
      }
    }
  }
  v64 = (_QWORD *)*((_QWORD *)this + 90);
  if (!v64)
    v64 = (_QWORD *)WebCore::Document::ensureCachedResourceLoader(this, v52);
  v65 = *(_DWORD *)v64 + 1;
  *(_DWORD *)v64 = v65;
  if ((v64[17] & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v64 + 13));
    v65 = *(_DWORD *)v64;
  }
  v66 = v65 - 1;
  if (v66)
  {
    *(_DWORD *)v64 = v66;
  }
  else
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader((WebCore::CachedResourceLoader *)v64, v52);
    WTF::fastFree(v84, v85);
  }
  if (*(_QWORD *)v29)
  {
    v67 = *(_QWORD *)(*(_QWORD *)v29 + 8);
    if (v67)
    {
      v68 = *(_QWORD *)(v67 + 24);
      if (v68)
      {
        v69 = *(WebCore::Page **)(v68 + 8);
        if (v69)
        {
          if (*((_DWORD *)this + 816))
          {
            *((_DWORD *)this + 816) = 0;
            ++*(_DWORD *)v69;
            WebCore::Page::updateIsPlayingMedia(v69);
            if (*(_DWORD *)v69 == 1)
            {
              WebCore::Page::~Page(v69);
              WTF::fastFree(v91, v92);
            }
            else
            {
              --*(_DWORD *)v69;
            }
          }
        }
      }
    }
  }
  WebCore::FrameSelection::willBeRemovedFromFrame(*((WebCore::FrameSelection **)this + 383));
  v71 = (WebCore::Editor *)*((_QWORD *)this + 382);
  if (v71)
  {
    ++*(_DWORD *)v71;
    WebCore::Editor::clear(v71, v70);
    if (!*(_DWORD *)v71)
    {
      __break(0xC471u);
      JUMPOUT(0x194401400);
    }
    --*(_DWORD *)v71;
  }
  v72 = *((_QWORD *)this + 66);
  if (!v72)
  {
    *((_QWORD *)this + 66) = 0;
    goto LABEL_124;
  }
  v73 = *(_QWORD *)(v72 + 8);
  if (v73)
  {
    WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(v73 + 248, (_QWORD *)this + 64);
    v72 = *((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (!v72)
      goto LABEL_124;
  }
  else
  {
    *((_QWORD *)this + 66) = 0;
  }
  do
  {
    v74 = __ldaxr((unsigned int *)v72);
    v75 = v74 - 1;
  }
  while (__stlxr(v75, (unsigned int *)v72));
  if (!v75)
  {
    atomic_store(1u, (unsigned int *)v72);
    WTF::fastFree((WTF *)v72, v70);
  }
  v76 = *((_QWORD *)this + 66);
  if (v76)
  {
    v77 = *(_QWORD *)(v76 + 8);
    if (v77)
      WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>(v77 + 248, (_QWORD *)this + 64, (uint64_t)v150);
  }
LABEL_124:
  v78 = *((_QWORD *)this + 376);
  if (v78)
  {
    v80 = *(unsigned int *)(v78 - 4);
    v81 = v78 + 16 * v80;
    if (*(_DWORD *)(v78 - 12))
    {
      v79 = *((_QWORD *)this + 376);
      if ((_DWORD)v80)
      {
        v103 = 16 * v80;
        v79 = *((_QWORD *)this + 376);
        while ((unint64_t)(*(_QWORD *)v79 + 1) <= 1)
        {
          v79 += 16;
          v103 -= 16;
          if (!v103)
          {
            v79 = v81;
            goto LABEL_127;
          }
        }
      }
      goto LABEL_127;
    }
    v79 = v78 + 16 * v80;
  }
  else
  {
    v79 = 0;
    v80 = 0;
  }
  v81 = v78 + 16 * v80;
LABEL_127:
  if (v78)
    v82 = v78 + 16 * *(unsigned int *)(v78 - 4);
  else
    v82 = 0;
  if (v82 != v79)
  {
    do
    {
      WebCore::PaintWorkletGlobalScope::prepareForDestruction(*(WebCore::PaintWorkletGlobalScope **)(v79 + 8), (WTF::StringImpl *)v70);
      v83 = v79 + 16;
      v79 = v81;
      if (v83 != v81)
      {
        v79 = v83;
        while ((unint64_t)(*(_QWORD *)v79 + 1) <= 1)
        {
          v79 += 16;
          if (v79 == v81)
          {
            v79 = v81;
            break;
          }
        }
      }
    }
    while (v79 != v82);
    v78 = *((_QWORD *)this + 376);
  }
  if (v78)
  {
    *((_QWORD *)this + 376) = 0;
    v104 = *(unsigned int *)(v78 - 4);
    if ((_DWORD)v104)
    {
      v105 = v78;
      do
      {
        v106 = *(WTF::StringImpl **)v105;
        if (*(_QWORD *)v105 != -1)
        {
          v107 = *(_DWORD **)(v105 + 8);
          *(_QWORD *)(v105 + 8) = 0;
          if (v107)
          {
            if (v107[78] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v107 + 40))(v107);
              v106 = *(WTF::StringImpl **)v105;
            }
            else
            {
              --v107[78];
            }
          }
          *(_QWORD *)v105 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
              WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v70);
            else
              *(_DWORD *)v106 -= 2;
          }
        }
        v105 += 16;
        --v104;
      }
      while (v104);
    }
    WTF::fastFree((WTF *)(v78 - 16), v70);
  }
  *((_BYTE *)this + 3406) = 1;
  if (*((_BYTE *)this + 3362) == 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1944013E0);
  }
  --WebCore::ScriptDisallowedScope::s_count;
}

uint64_t WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_6:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_7:
      v8 = v7;
LABEL_8:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_2;
    }
    v9 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v9)
      goto LABEL_22;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v6 + 8 * v11;
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        v22 = a2;
        v24 = a1;
        v19 = v6;
        v20 = v10;
        v18 = v11;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)(v6 + 8 * v11), a2);
        v11 = v18;
        v6 = v19;
        a2 = v22;
        a1 = v24;
        v10 = v20 + 1;
      }
    }
    while ((unint64_t)v11--);
    v6 = *(_QWORD *)a1;
    if (v10)
    {
      *(_DWORD *)(v6 - 16) += v10;
      v16 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v10;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_6;
    v14 = *(_DWORD *)(v6 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v14)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v21 = a2;
      v23 = a1;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v21;
      a1 = v23;
      v6 = *(_QWORD *)v23;
      *(_DWORD *)(v23 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_7;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_2:
  v4 = (WTF *)a2[1];
  if (v4 && *((_QWORD *)v4 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v4);
  else
    return 0;
}

uint64_t WebCore::Document::clearTouchEventHandlersAndListeners(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = this;
  v3 = *(_QWORD *)(this + 624);
  if (v3 && *(_DWORD *)(v3 - 12) || (v4 = *(_QWORD *)(this + 632)) != 0 && *(_DWORD *)(v4 - 12))
  {
    if (*(_BYTE *)(this + 3362) || *(_BYTE *)(this + 3405))
    {
      v23 = *(_QWORD *)(this + 528);
      i = this;
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        i = this;
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 120);
          i = this;
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 8);
            for (i = this; v26; v26 = *(_QWORD *)(v29 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8);
              v27 = *(_QWORD *)(i + 528);
              if (!v27)
                break;
              v28 = *(_QWORD *)(v27 + 8);
              if (!v28)
                break;
              v29 = *(_QWORD *)(v28 + 120);
              if (!v29)
                break;
            }
          }
        }
      }
    }
    else
    {
      v5 = *(_QWORD *)(this + 528);
      i = this;
      if (v5)
      {
        v7 = *(_QWORD *)(v5 + 8);
        i = this;
        if (v7)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
          v9 = v8 && *(_BYTE *)(v8 + 144) == 0;
          i = this;
          if (v9)
          {
            v10 = *(_QWORD *)(v8 + 296);
            i = this;
            if (v10)
              i = v10;
          }
        }
      }
    }
    if (!*(_BYTE *)(i + 672))
    {
      *(_BYTE *)(i + 672) = 1;
      v13 = *(_QWORD *)(i + 528);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 24);
          if (v15)
          {
            v16 = *(_QWORD *)(v14 + 288);
            v17 = *(_QWORD *)(v15 + 8);
            if (v17 && v16 != 0)
            {
              v19 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v15 + 8));
              if (v19)
                this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 88))(v19, v16);
              else
                this = WebCore::Page::scheduleRenderingUpdate(v17, 0x2000);
            }
          }
        }
      }
    }
    v11 = *(_QWORD *)(v2 + 624);
    if (v11)
    {
      *(_QWORD *)(v2 + 624) = 0;
      this = WTF::fastFree((WTF *)(v11 - 16), a2);
    }
    v12 = *(_QWORD *)(v2 + 632);
    if (v12)
    {
      *(_QWORD *)(v2 + 632) = 0;
      this = WTF::fastFree((WTF *)(v12 - 16), a2);
    }
    if (i == v2)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 560));
      if (*(_DWORD *)(v2 + 648))
      {
        if (*(_DWORD *)(v2 + 652))
          *(_DWORD *)(v2 + 652) = 0;
        v21 = *(WTF **)(v2 + 640);
        if (v21)
        {
          *(_QWORD *)(v2 + 640) = 0;
          *(_DWORD *)(v2 + 648) = 0;
          WTF::fastFree(v21, v20);
        }
      }
      if (*(_DWORD *)(v2 + 664))
      {
        if (*(_DWORD *)(v2 + 668))
          *(_DWORD *)(v2 + 668) = 0;
        v22 = *(WTF **)(v2 + 656);
        if (v22)
        {
          *(_QWORD *)(v2 + 656) = 0;
          *(_DWORD *)(v2 + 664) = 0;
          WTF::fastFree(v22, v20);
        }
      }
      return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 560));
    }
  }
  return this;
}

WTF::StringImpl *WebCore::ScriptController::setWebAssemblyEnabled(WTF::StringImpl *this, WTF::StringImpl *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  const WTF::String *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 112);
  {
    v4 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v19 = *(_QWORD *)(*((_QWORD *)this + 2) + 112);
    v18 = a2;
    v17 = a3;
    this = (WTF::StringImpl *)WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      this = (WTF::StringImpl *)WebCore::commonVMSlow(0);
    v4 = *(_QWORD *)(*((_QWORD *)this + 5182) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v4;
    a3 = v17;
    a2 = (WTF::StringImpl *)v18;
    v3 = v19;
  }
  v5 = **(_QWORD **)(v3 + 16);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 != v4)
    {
      v16 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v16) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v16;
        if (v11 == v4)
          goto LABEL_5;
      }
      v10 = *(unsigned int *)(v5 - 4);
    }
LABEL_5:
    if (v10 != *(_DWORD *)(v5 - 4))
    {
      v12 = *(uint64_t **)(v5 + 16 * v10 + 8);
      if (v12)
      {
        v13 = *v12;
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 16);
          *(_BYTE *)(v14 + 3170) = (_BYTE)a2;
          v15 = *(_DWORD **)a3;
          if (*(_QWORD *)a3)
            *v15 += 2;
          this = *(WTF::StringImpl **)(v14 + 3192);
          *(_QWORD *)(v14 + 3192) = v15;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ScriptController::clearScriptObjects(WebCore::ScriptController *this)
{
  WTF::ThreadGroup ***v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  v2 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v2 = (WTF::ThreadGroup ***)v15;
  WebCore::g_commonVMOrNull = v15;
  if (__ldaxr((unsigned int *)(v15 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v15 + 1096)))
  {
    goto LABEL_15;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v15 + 192));
LABEL_15:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v15 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v2[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v2, 0);
LABEL_2:
  MEMORY[0x19AEA3294](&v15, v2);
  v4 = *((_QWORD *)this + 7);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_4:
    v7 = v4 + 16 * v6;
    goto LABEL_5;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = v4 + 16 * v6;
  if (!*(_DWORD *)(v4 - 12))
  {
    v5 = v4 + 16 * v6;
    goto LABEL_4;
  }
  v5 = *((_QWORD *)this + 7);
  if ((_DWORD)v6)
  {
    v13 = 16 * v6;
    v5 = *((_QWORD *)this + 7);
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 16;
      v13 -= 16;
      if (!v13)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_5:
  if (v4)
    v8 = v4 + 16 * *(unsigned int *)(v4 - 4);
  else
    v8 = 0;
  if (v8 != v5)
  {
    do
    {
      JSC::Bindings::RootObject::invalidate(*(_QWORD **)(v5 + 8), v3);
      v12 = v5 + 16;
      v5 = v7;
      if (v12 != v7)
      {
        v5 = v12;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 16;
          if (v5 == v7)
          {
            v5 = v7;
            break;
          }
        }
      }
    }
    while (v5 != v8);
    v4 = *((_QWORD *)this + 7);
  }
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::deallocateTable(v4, v3);
  }
  v9 = (_QWORD *)*((_QWORD *)this + 5);
  if (v9)
  {
    JSC::Bindings::RootObject::invalidate(v9, v3);
    v14 = (_DWORD *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
  }
  return MEMORY[0x19AEA32A0](&v15);
}

WTF::StringImpl *WebCore::ScriptController::setEvalEnabled(WTF::StringImpl *this, WTF::StringImpl *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  const WTF::String *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 112);
  {
    v4 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v19 = *(_QWORD *)(*((_QWORD *)this + 2) + 112);
    v18 = a2;
    v17 = a3;
    this = (WTF::StringImpl *)WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      this = (WTF::StringImpl *)WebCore::commonVMSlow(0);
    v4 = *(_QWORD *)(*((_QWORD *)this + 5182) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v4;
    a3 = v17;
    a2 = (WTF::StringImpl *)v18;
    v3 = v19;
  }
  v5 = **(_QWORD **)(v3 + 16);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 != v4)
    {
      v16 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v16) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v16;
        if (v11 == v4)
          goto LABEL_5;
      }
      v10 = *(unsigned int *)(v5 - 4);
    }
LABEL_5:
    if (v10 != *(_DWORD *)(v5 - 4))
    {
      v12 = *(uint64_t **)(v5 + 16 * v10 + 8);
      if (v12)
      {
        v13 = *v12;
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 16);
          *(_BYTE *)(v14 + 3169) = (_BYTE)a2;
          v15 = *(_DWORD **)a3;
          if (*(_QWORD *)a3)
            *v15 += 2;
          this = *(WTF::StringImpl **)(v14 + 3184);
          *(_QWORD *)(v14 + 3184) = v15;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
    }
  }
  return this;
}

void WebCore::LocalFrameView::clear(id *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  WebCore::LegacyTileCache *v4;

  if (this[5])
    WebCore::ScrollView::platformSetCanBlitOnScroll(this, 1);
  else
    *((_BYTE *)this + 317) = 1;
  WebCore::LocalFrameView::reset((WebCore::LocalFrameView *)this, a2);
  if (!*((_BYTE *)this + 318))
  {
    *((_BYTE *)this + 318) = 1;
    if (this[5])
      WebCore::ScrollView::platformSetScrollbarsSuppressed(this, 0);
  }
  v3 = this[4];
  if (!v3 || !v3[1])
  {
    v4 = (WebCore::LegacyTileCache *)objc_msgSend((id)objc_msgSend(this[5], "window"), "tileCache");
    if (v4)
      WebCore::LegacyTileCache::setTilingMode(v4, 4);
  }
}

uint64_t WebCore::FrameSelection::willBeRemovedFromFrame(WebCore::FrameSelection *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF *v5;
  WebCore::MutableStyleProperties *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  __int16 v27;
  char v28;

  *((_BYTE *)this + 184) = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 1944);
  if (v2)
    WebCore::RenderSelection::clear((WebCore::RenderSelection *)(v2 + 288));
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v28 = 1;
  WebCore::FrameSelection::setSelectionWithoutUpdatingAppearance((uint64_t)this, (uint64_t)&v9, 0x4006u, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v9);
  result = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v6 = (WebCore::MutableStyleProperties *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::MutableStyleProperties::~MutableStyleProperties(v6, v3);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      return WTF::fastFree(v5, v3);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

WebCore::MessagePortChannel *WebCore::MessagePortChannelRegistry::didCreateMessagePortChannel(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v6;
  WebCore::MessagePortChannel *v7;

  v6 = WTF::fastMalloc((WTF *)0xB8);
  v7 = (WebCore::MessagePortChannel *)WebCore::MessagePortChannel::MessagePortChannel(v6, a1, a2, a3);
  return WTF::RefCounted<WebCore::MessagePortChannel>::deref(v7);
}

uint64_t WebCore::MessagePortChannel::MessagePortChannel(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[24];

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a2;
  ++*(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *a3;
  v6 = *(_QWORD *)a3;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 56) = v6;
  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 88) = a1;
  v7 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = *a4;
  v8 = *(_QWORD *)a4;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 72) = v8;
  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 96) = a1;
  ++*(_DWORD *)(a2 + 8);
  v9 = (uint64_t *)(a2 + 16);
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebCore::MessagePortChannel&>((uint64_t)v13, (uint64_t *)(a2 + 16), (_QWORD *)(a1 + 16), a1);
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebCore::MessagePortChannel&>((uint64_t)&v12, v9, v7, a1);
  v10 = *(_DWORD *)(a2 + 8);
  if (v10)
  {
    *(_DWORD *)(a2 + 8) = v10 - 1;
    return a1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::MessagePortChannelRegistry::messagePortChannelCreated(WebCore::MessagePortChannelRegistry *this, WebCore::MessagePortChannel *a2)
{
  uint64_t *v3;
  uint64_t v5;
  _BYTE v6[24];

  v3 = (uint64_t *)((char *)this + 16);
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebCore::MessagePortChannel&>((uint64_t)v6, (uint64_t *)this + 2, (_QWORD *)a2 + 2, (uint64_t)a2);
  return WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebCore::MessagePortChannel&>((uint64_t)&v5, v3, (_QWORD *)a2 + 4, (uint64_t)a2);
}

uint64_t WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebCore::MessagePortChannel&>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  int v41;
  unsigned int v42;

  v6 = a2;
  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a2, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (*a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a3 - 1640531527) << 16) ^ ((unsigned __int16)*a3
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*a3) + (v12 >> 11);
  v14 = (*a3 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (_QWORD *)(v8 + 24 * (v19 & v10));
  v23 = *v21;
  result = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v40 = 0;
    v41 = 1;
    do
    {
      if (v23 == *a3 && result == v11)
      {
        if ((v9 & 1) != 0)
          v42 = 0;
        else
          v42 = *(_DWORD *)(v8 - 4);
        v37 = 0;
        v36 = v8 + 24 * v42;
        goto LABEL_21;
      }
      if (v23 == -1)
        v40 = v21;
      v20 = (v20 + v41) & v10;
      v21 = (_QWORD *)(v8 + 24 * v20);
      v23 = *v21;
      result = v21[1];
      ++v41;
      a2 = (uint64_t *)(*v21 | result);
    }
    while (a2);
    if (v40)
    {
      *v40 = 0;
      v40[1] = 0;
      v40[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v21 = v40;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)a3;
  if (!*(_QWORD *)(a4 + 8))
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = a4;
    v25 = *(unsigned int **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v24;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  v28 = *(unsigned int **)(a4 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  result = v21[2];
  v21[2] = v28;
  if (result)
  {
    do
    {
      v38 = __ldaxr((unsigned int *)result);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)result));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v30 = *v6;
  if (*v6)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *v6;
  if (*v6)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_20;
LABEL_34:
    result = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(v6, v21);
    v21 = (_QWORD *)result;
    v32 = *v6;
    if (*v6)
      LODWORD(v35) = *(_DWORD *)(v32 - 4);
    else
      LODWORD(v35) = 0;
    goto LABEL_20;
  }
  if (3 * v35 <= 4 * v34)
    goto LABEL_34;
LABEL_20:
  v36 = v32 + 24 * v35;
  v37 = 1;
LABEL_21:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v36;
  *(_BYTE *)(a1 + 16) = v37;
  return result;
}

void WebCore::RunLoopObserver::schedule(uint64_t a1, CFRunLoopRef rl, uint64_t a3)
{
  __CFRunLoop *Current;
  uint64_t v6;
  CFOptionFlags v7;
  unsigned int v8;
  CFIndex v9;
  __CFRunLoopObserver *v10;
  const void *v11;
  CFRunLoopObserverContext v12;

  Current = rl;
  if (!rl)
    Current = CFRunLoopGetCurrent();
  CFRunLoopWakeUp(Current);
  if (!*(_QWORD *)(a1 + 16))
  {
    v12.version = 0;
    memset(&v12.retain, 0, 24);
    v12.info = (void *)a1;
    v6 = (32 * a3) & 0x20;
    if ((a3 & 2) != 0)
      v6 |= 1uLL;
    if ((a3 & 8) != 0)
      v7 = v6 | (32 * a3) & 0x80 | 0x40;
    else
      v7 = v6 | (32 * a3) & 0x80;
    v8 = *(unsigned __int8 *)(a1 + 9) - 1;
    if (v8 > 5)
      v9 = 2000000;
    else
      v9 = qword_1969F70E0[(char)v8];
    v10 = CFRunLoopObserverCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, *(_BYTE *)(a1 + 8) ^ 1u, v9, (CFRunLoopObserverCallBack)WebCore::RunLoopObserver::runLoopObserverFired, &v12);
    v11 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    if (v11)
    {
      CFRelease(v11);
      v10 = *(__CFRunLoopObserver **)(a1 + 16);
    }
    CFRunLoopAddObserver(Current, v10, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
}

WebCore::AsyncScrollingCoordinator *WebCore::AsyncScrollingCoordinator::AsyncScrollingCoordinator(WebCore::AsyncScrollingCoordinator *this, WebCore::Page *a2)
{
  WebCore::ScrollingCoordinator *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = WebCore::ScrollingCoordinator::ScrollingCoordinator(this, a2);
  *(_QWORD *)v3 = off_1E3403768;
  *((_DWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 8) = 0;
  *((_BYTE *)v3 + 72) = 0;
  v4 = (uint64_t)v3 + 80;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3403C50;
  v5[1] = this;
  v7 = v5;
  PAL::HysteresisActivity::HysteresisActivity(v4, (uint64_t *)&v7);
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return this;
}

WebCore::ScrollingCoordinator *WebCore::ScrollingCoordinator::ScrollingCoordinator(WebCore::ScrollingCoordinator *this, WebCore::Page *a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_19689B170;
  *(_QWORD *)(v4 + 24) = this;
  *(_QWORD *)this = off_1E34039B8;
  *((_QWORD *)this + 1) = v4;
  *((_BYTE *)this + 16) = 0;
  WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)this + 3, (uint64_t)a2);
  return this;
}

double WebCore::ScrollingStateTree::ScrollingStateTree(WebCore::ScrollingStateTree *this, WebCore::AsyncScrollingCoordinator *a2)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  int v6;
  uint64_t v7;
  WebCore::ScrollingStateTree *v8;
  WebCore::AsyncScrollingCoordinator *v9;

  *(_DWORD *)this = 0;
  if (a2)
  {
    v8 = this;
    v9 = a2;
    v4 = *((_QWORD *)a2 + 1);
    if (!v4)
    {
      v2 = 0;
      goto LABEL_3;
    }
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_9:
    if (*(_QWORD *)(v4 + 24))
    {
      ++*(_QWORD *)(v4 + 16);
      v7 = v4;
    }
    else
    {
      v7 = 0;
    }
    v6 = __ldxr((unsigned __int8 *)v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_16:
    this = v8;
    a2 = v9;
    v2 = v7;
    goto LABEL_3;
  }
  v2 = 0;
LABEL_3:
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *((_DWORD *)this + 17) = 1;
  *((_WORD *)this + 36) = 0;
  return result;
}

{
  uint64_t v2;
  double result;
  uint64_t v4;
  int v6;
  uint64_t v7;
  WebCore::ScrollingStateTree *v8;
  WebCore::AsyncScrollingCoordinator *v9;

  *(_DWORD *)this = 0;
  if (a2)
  {
    v8 = this;
    v9 = a2;
    v4 = *((_QWORD *)a2 + 1);
    if (!v4)
    {
      v2 = 0;
      goto LABEL_3;
    }
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
LABEL_8:
      if (*(_QWORD *)(v4 + 24))
      {
        ++*(_QWORD *)(v4 + 16);
        v7 = v4;
      }
      else
      {
        v7 = 0;
      }
      v6 = __ldxr((unsigned __int8 *)v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
      this = v8;
      a2 = v9;
      v2 = v7;
      goto LABEL_3;
    }
    MEMORY[0x19AEA534C](v4);
    goto LABEL_8;
  }
  v2 = 0;
LABEL_3:
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *((_DWORD *)this + 17) = 1;
  *((_WORD *)this + 36) = 0;
  return result;
}

uint64_t PAL::HysteresisActivity::HysteresisActivity(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::RunLoop::TimerBase *v4;
  WTF::RunLoop *v5;
  _QWORD *v6;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0x3FC999999999999ALL;
  v4 = (WTF::RunLoop::TimerBase *)(a1 + 16);
  v5 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E3355738;
  v6[1] = PAL::HysteresisActivity::hysteresisTimerFired;
  v6[2] = 0;
  v6[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v4, v5);
  *(_QWORD *)(a1 + 16) = off_1E32051C0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = 0;
  return a1;
}

float *WebCore::Page::setMediaVolume(float *this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[5];

  if (a2 >= 0.0 && a2 <= 1.0)
  {
    v7[3] = v2;
    v7[4] = v3;
    v5 = (uint64_t)this;
    if (this[87] != a2)
    {
      this[87] = a2;
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34007C8;
      v7[0] = v6;
      WebCore::Page::forEachMediaElement(v5, (uint64_t)v7);
      this = (float *)v7[0];
      v7[0] = 0;
      if (this)
        return (float *)(*(uint64_t (**)(float *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void WebCore::createImageSourceOptions(WebCore *this)
{
  __CFDictionary *Mutable;
  const void *v3;
  WebCore::ProcessCapabilities *v4;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)this = Mutable;
  v3 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBD240], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBD268], v3);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBD288], v3);
  if (WebCore::s_hardwareAcceleratedDecodingDisabled)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBD2B8], (const void *)*MEMORY[0x1E0C9AE40]);
  if (WebCore::s_HEICDecodingEnabled || WebCore::ProcessCapabilities::isAVIFDecodingEnabled(v4))
    CFDictionarySetValue(Mutable, CFSTR("kCGImageSourceEnableRestrictedDecoding"), v3);
  CFDictionarySetValue(Mutable, CFSTR("kCGImageSourceCreateUnpremultipliedPNG"), v3);
}

void WebCore::PlatformCALayer::~PlatformCALayer(WebCore::PlatformCALayer *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;

  *(_QWORD *)this = &unk_1E334E260;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E334ED68;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  v6 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    CFRelease(v6);
}

void sub_194402AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::ImageBuffer::~ImageBuffer(WebCore::ImageBuffer *this, void *a2)
{
  uint64_t v3;
  const void *v4;

  *(_QWORD *)this = off_1E340D2A8;
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    CFRelease(v4);
  WTF::fastFree(this, a2);
}

WebCore::LayerPool *WebCore::LayerPool::LayerPool(WebCore::LayerPool *this)
{
  WTF *v2;
  uint64_t isMainThread;
  uint64_t v5;
  WebCore::LayerPool *v6;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x300000000000000;
  v2 = (WTF *)WebCore::Timer::Timer<WebCore::LayerPool,WebCore::LayerPool>((uint64_t)this + 40, (uint64_t)this, (uint64_t)WebCore::LayerPool::pruneTimerFired, 0);
  *((_QWORD *)this + 12) = 0;
  isMainThread = WTF::isMainThread(v2);
  if ((isMainThread & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_8;
  }
  WebCore::LayerPool::allLayerPools((WebCore::LayerPool *)isMainThread);
  v6 = this;
  ++*(_DWORD *)this;
  WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::add(&qword_1EE338160, (uint64_t *)&v6, (uint64_t)&v5);
  if (v6)
  {
    if (*(_DWORD *)v6)
    {
      --*(_DWORD *)v6;
      return this;
    }
    __break(0xC471u);
LABEL_8:
    JUMPOUT(0x194402BE0);
  }
  return this;
}

uint64_t *WebCore::LayerPool::allLayerPools(WebCore::LayerPool *this)
{
  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194402C4CLL);
  }
  if ((_MergedGlobals_93 & 1) == 0)
  {
    qword_1EE338160 = 0;
    _MergedGlobals_93 = 1;
  }
  return &qword_1EE338160;
}

uint64_t WebCore::Timer::Timer<WebCore::LayerPool,WebCore::LayerPool>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)a1 = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E3411910;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a2;
  *(_QWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v9 = result & v7;
  v10 = (uint64_t *)(v6 + 8 * (result & v7));
  v11 = *v10;
  if (*v10)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v11 == *a2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(unsigned int *)(v22 - 4);
        else
          v23 = 0;
        v19 = 0;
        v18 = v22 + 8 * v23;
        goto LABEL_12;
      }
      if (v11 == -1)
        v20 = v10;
      v9 = (v9 + v21) & v7;
      v10 = (uint64_t *)(v6 + 8 * v9);
      v11 = *v10;
      ++v21;
    }
    while (*v10);
    if (v20)
    {
      *v20 = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = v20;
    }
  }
  result = WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>::operator=((uint64_t)v10, a2);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) + 1;
  else
    v13 = 1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12);
  else
    v15 = 0;
  v16 = (*(_DWORD *)(v14 - 16) + v15);
  v17 = *(unsigned int *)(v14 - 4);
  if (v17 > 0x400)
  {
    if (v17 > 2 * v16)
      goto LABEL_11;
LABEL_24:
    result = WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::expand(a1, v10);
    v10 = (uint64_t *)result;
    v14 = *a1;
    if (*a1)
      v17 = *(unsigned int *)(v14 - 4);
    else
      v17 = 0;
    goto LABEL_11;
  }
  if (3 * v17 <= 4 * v16)
    goto LABEL_24;
LABEL_11:
  v18 = v14 + 8 * v17;
  v19 = 1;
LABEL_12:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v19;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t *v13;
  _QWORD *v14;
  _DWORD *v15;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (uint64_t *)v6;
    while (1)
    {
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::reinsert(*a1, v13);
        v15 = (_DWORD *)*v13;
        if (*v13)
        {
          if (!*v15)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          --*v15;
        }
        if (v13 == a3)
          v11 = v14;
      }
      ++v13;
      if (!--v7)
        goto LABEL_17;
    }
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return (uint64_t)v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::rehash(a1, v5, a2);
}

uint64_t WebCore::ContentSecurityPolicy::overridesXFrameOptions(WebCore::ContentSecurityPolicy *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 37);
  if (!(_DWORD)v1)
    return 0;
  v3 = *((_QWORD *)this + 17);
  v4 = 8 * v1;
  result = 0;
  while (*(_BYTE *)(*(_QWORD *)v3 + 17) || !*(_QWORD *)(*(_QWORD *)v3 + 80))
  {
    v3 += 8;
    v4 -= 8;
    if (!v4)
      return result;
  }
  return 1;
}

_DWORD *WebCore::JSUserMessageHandlersNamespace::destroy(WebCore::JSUserMessageHandlersNamespace *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *WebCore::JSUserMessageHandler::destroy(WebCore::JSUserMessageHandler *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *WebCore::JSWebKitNamespace::destroy(WebCore::JSWebKitNamespace *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *WebCore::JSDOMCacheStorage::destroy(WebCore::JSDOMCacheStorage *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

const __CFString *WebCore::toCAFillModeType(unsigned int a1)
{
  uint64_t v1;

  if (a1 < 2)
  {
    v1 = MEMORY[0x1E0CD2B60];
    return *(const __CFString **)v1;
  }
  if (a1 == 2)
  {
    v1 = MEMORY[0x1E0CD2B50];
    return *(const __CFString **)v1;
  }
  if (a1 == 3)
  {
    v1 = MEMORY[0x1E0CD2B58];
    return *(const __CFString **)v1;
  }
  return &stru_1E3487BC0;
}

_DWORD *WebCore::JSWebLockManager::destroy(WebCore::JSWebLockManager *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *WebCore::JSMediaSession::destroy(WebCore::JSMediaSession *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *WebCore::JSWakeLock::destroy(WebCore::JSWakeLock *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t ___ZN3PAL52get_UIKit_UIContentSizeCategoryDidChangeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIContentSizeCategoryDidChangeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7EC98 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIContentSizeCategoryDidChangeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MutationObserver::isReachableFromOpaqueRoots(WebCore::MutationObserver *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF::ConcurrentPtrHashSet *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;

  v4 = *((_QWORD *)this + 5);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v31 = 0;
    v7 = *((_QWORD *)this + 5);
    goto LABEL_45;
  }
  v30 = 8 * v6;
  v7 = *((_QWORD *)this + 5);
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v30 -= 8;
    if (!v30)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (v4)
  {
    v31 = *(unsigned int *)(v4 - 4);
LABEL_45:
    v8 = v4 + 8 * v31;
    goto LABEL_6;
  }
  v8 = 0;
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v36 = v7 + 8;
      v7 = v5;
      if (v36 != v5)
      {
        v7 = v36;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v9 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v9 = 0;
  if (v7 == v9)
    return 0;
  while (1)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 22) & 8) == 0)
      {
        while (1)
        {
          v13 = (void *)v12;
          if ((*(_WORD *)(v12 + 28) & 0x80) != 0)
          {
            v35 = *(_QWORD *)(v12 + 200);
            if (!v35)
              goto LABEL_14;
            v34 = (uint64_t *)(v35 + 8);
          }
          else
          {
            v34 = (uint64_t *)(v12 + 32);
          }
          v12 = *v34;
          if (!v12)
            goto LABEL_14;
        }
      }
      v13 = *(void **)(*(_QWORD *)(v12 + 40) + 8);
    }
    else
    {
      v13 = 0;
    }
LABEL_14:
    v14 = (WTF::ConcurrentPtrHashSet *)*((_QWORD *)a2 + 15);
    v15 = (_DWORD *)*((_QWORD *)v14 + 6);
    if ((_DWORD *)((char *)v14 + 56) == v15)
    {
      v42 = v13;
      v33 = WTF::ConcurrentPtrHashSet::containsImplSlow(v14, v13);
      v13 = v42;
      if (v33)
      {
LABEL_60:
        if (*((_BYTE *)a2 + 131))
          (*(void (**)(JSC::AbstractSlotVisitor *, void *))(*(_QWORD *)a2 + 152))(a2, v13);
        return 1;
      }
    }
    else
    {
      v16 = v15[1];
      v17 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = v20;
      while (1)
      {
        v22 = *(void **)&v15[2 * v21 + 4];
        if (!v22)
          break;
        if (v22 == v13)
          goto LABEL_60;
        v21 = (v21 + 1) & v16;
        if (v21 == v20)
        {
          __break(0xC471u);
          JUMPOUT(0x19440353CLL);
        }
      }
    }
    v23 = *(_QWORD **)(v11 + 32);
    if (!v23)
    {
      v24 = 0;
      v25 = 0;
LABEL_22:
      v26 = &v23[v25];
      goto LABEL_23;
    }
    v25 = *((unsigned int *)v23 - 1);
    v26 = &v23[v25];
    if (!*((_DWORD *)v23 - 3))
    {
      v24 = &v23[v25];
      goto LABEL_22;
    }
    v24 = v23;
    if ((_DWORD)v25)
    {
      v29 = 8 * v25;
      v24 = v23;
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        ++v24;
        v29 -= 8;
        if (!v29)
        {
          v24 = v26;
          break;
        }
      }
    }
LABEL_23:
    v27 = v23 ? (uint64_t)&v23[*((unsigned int *)v23 - 1)] : 0;
    if ((uint64_t *)v27 != v24)
      break;
LABEL_26:
    v28 = v5;
    if (v7 + 8 != v5)
    {
      v28 = v7 + 8;
      while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
      {
        v28 += 8;
        if (v28 == v5)
        {
          v28 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v28 != v8)
    {
      v7 = v28;
      if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
      {
        while (1)
        {
          v32 = v7 + 8;
          v7 = v5;
          if (v32 != v5)
          {
            v7 = v32;
            while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
            {
              v7 += 8;
              if (v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*(_QWORD *)v7 + 8))
            goto LABEL_32;
        }
        v7 = v8;
      }
    }
LABEL_32:
    result = 0;
    ++*((_DWORD *)this + 12);
    if (v7 == v9)
      return result;
  }
  while (1)
  {
    v37 = *v24;
    if (*v24)
    {
      if ((*(_BYTE *)(v37 + 22) & 8) == 0)
      {
        while (1)
        {
          v38 = (void *)v37;
          if ((*(_WORD *)(v37 + 28) & 0x80) != 0)
          {
            v41 = *(_QWORD *)(v37 + 200);
            if (!v41)
              goto LABEL_84;
            v40 = (uint64_t *)(v41 + 8);
          }
          else
          {
            v40 = (uint64_t *)(v37 + 32);
          }
          v37 = *v40;
          if (!v37)
            goto LABEL_84;
        }
      }
      v38 = *(void **)(*(_QWORD *)(v37 + 40) + 8);
    }
    else
    {
      v38 = 0;
    }
LABEL_84:
    if ((JSC::AbstractSlotVisitor::containsOpaqueRoot(a2, v38) & 1) != 0)
      return 1;
    v39 = v24 + 1;
    v24 = v26;
    if (v39 != v26)
    {
      v24 = v39;
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        if (++v24 == v26)
        {
          v24 = v26;
          break;
        }
      }
    }
    if (v24 == (uint64_t *)v27)
      goto LABEL_26;
  }
}

void WebCore::PluginData::dummyPDFPluginInfo(uint64_t a1@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _QWORD v7[2];
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = (unsigned int *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::pdfDocumentTypeDescription((uint64_t)v11);
  *(_QWORD *)(a1 + 16) = v11[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 8) = v11[0];
  *(_WORD *)(a1 + 40) = 1;
  v12[0] = 0;
  v12[1] = 0;
  WTF::AtomStringImpl::add();
  WebCore::pdfDocumentTypeDescription((uint64_t)&v8);
  v11[1] = v8;
  v8 = "pdf";
  v9 = 4;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)v12, (uint64_t)&v8);
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(v3, (unint64_t)v11);
  v10[0] = 0;
  v10[1] = 0;
  WTF::AtomStringImpl::add();
  WebCore::pdfDocumentTypeDescription((uint64_t)v7);
  v9 = v7[0];
  v7[0] = "pdf";
  v7[1] = 4;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)v10, (uint64_t)v7);
  v4 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 32))
  {
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(v3, (unint64_t)&v8);
  }
  else
  {
    WebCore::MimeClassInfo::MimeClassInfo(*(_QWORD *)(a1 + 24) + 32 * v4, (uint64_t)&v8);
    *(_DWORD *)(a1 + 36) = v4 + 1;
  }
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)&v8, v5);
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)v11, v6);
}

void WebCore::localizedString(CFStringRef key@<X0>, uint64_t a2@<X8>)
{
  const __CFString *v3;
  uint64_t *v5;
  CFStringRef v6;
  CFBundleRef BundleWithIdentifier;

  v3 = key;
  v5 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = key;
    v5 = &qword_1ECE83000;
  }
  v6 = CFBundleCopyLocalizedString((CFBundleRef)v5[361], v3, CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a2, v6);
  if (v6)
    CFRelease(v6);
}

void WebCore::pdfDocumentTypeDescription(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Portable Document Format (Safari)"), a1);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_DWORD *)(v3 + 12);
  v14 = *(_QWORD *)v3;
  v15 = *(_QWORD *)(a2 + 8);
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = v17;
      v13 = *(_DWORD *)(v3 + 12);
    }
    *(_QWORD *)(v14 + 8 * v12) = v16;
  }
  else
  {
    *(_QWORD *)(v14 + 8 * v12) = 0;
  }
  *(_DWORD *)(v3 + 12) = v13 + 1;
  return 1;
}

void WebCore::Navigator::initializePluginAndMimeTypeArrays(WebCore::Navigator *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Document *v6;
  WebCore::Quirks *v7;
  _BOOL4 shouldNavigatorPluginsBeEmpty;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::Page *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore *v19;
  WTF::StringImpl **v20;
  uint64_t i;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WebCore::DOMPlugin *v25;
  WebCore::DOMPlugin *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  WebCore::DOMPlugin *v34;
  uint64_t v35;
  WebCore::DOMPlugin *v36;
  void *v37;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _DWORD *v42;
  void *v43;
  void *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  _DWORD *v54;
  void *v55;
  void *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WebCore::DOMPlugin *v60[2];
  uint64_t v61;
  void *v62[2];
  WTF::StringImpl *v63[7];
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;

  if (!*((_QWORD *)this + 13))
  {
    v2 = WebCore::LocalDOMWindowProperty::frame((WebCore::Navigator *)((char *)this + 64));
    v3 = v2;
    if (v2)
    {
      v4 = (unsigned int *)(v2 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(WebCore::Document **)(v2 + 296);
      if (v6)
      {
        v7 = (WebCore::Quirks *)*((_QWORD *)v6 + 86);
        if (!v7)
          v7 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v6);
        shouldNavigatorPluginsBeEmpty = WebCore::Quirks::shouldNavigatorPluginsBeEmpty(v7);
        v10 = v3 + 24;
        v9 = *(_QWORD *)(v3 + 24);
        if (v9)
        {
          if (*(_QWORD *)(v9 + 8))
            v11 = shouldNavigatorPluginsBeEmpty;
          else
            v11 = 1;
          if ((v11 & 1) == 0)
            goto LABEL_14;
          if (shouldNavigatorPluginsBeEmpty)
            goto LABEL_56;
        }
        else if (shouldNavigatorPluginsBeEmpty)
        {
LABEL_56:
          v48 = *(_QWORD **)(v3 + 296);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WebCore::Document::addConsoleMessage(v48, 16, 4, &v64, 0);
          v50 = v64;
          v64 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v49);
            else
              *(_DWORD *)v50 -= 2;
          }
        }
      }
      else
      {
        v10 = v3 + 24;
        v28 = *(_QWORD *)(v3 + 24);
        if (v28 && *(_QWORD *)(v28 + 8))
        {
LABEL_14:
          v12 = *(_QWORD *)(*(_QWORD *)(v3 + 280) + 16);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v63[0] = v64;
          v13 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 680))(v12, v63);
          *((_BYTE *)this + 97) = v13;
          v15 = v63[0];
          v63[0] = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::destroy(v15, v14);
              v13 = *((unsigned __int8 *)this + 97);
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
          if (!v13)
          {
            v64 = 0;
            v65 = 0;
            v63[0] = 0;
            v63[1] = 0;
            WebCore::DOMPluginArray::create((uint64_t)this, (uint64_t *)&v64, (uint64_t *)v63, (uint64_t *)v62);
            v40 = v62[0];
            v62[0] = 0;
            v41 = *((_QWORD *)this + 13);
            *((_QWORD *)this + 13) = v40;
            if (v41)
            {
              WTF::RefCounted<WebCore::DOMPluginArray>::deref((_DWORD *)(v41 + 8));
              v42 = v62[0];
              v62[0] = 0;
              if (v42)
                WTF::RefCounted<WebCore::DOMPluginArray>::deref(v42 + 2);
            }
            WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v39);
            WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v43);
            v64 = 0;
            v65 = 0;
            WebCore::DOMMimeTypeArray::create((uint64_t)this, (uint64_t *)&v64, (uint64_t *)v63);
            v45 = v63[0];
            v63[0] = 0;
            v46 = *((_QWORD *)this + 14);
            *((_QWORD *)this + 14) = v45;
            if (v46)
            {
              WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref((_DWORD *)(v46 + 8));
              v47 = v63[0];
              v63[0] = 0;
              if (v47)
                WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref((_DWORD *)v47 + 2);
            }
            WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v44);
            goto LABEL_67;
          }
          if (*(_QWORD *)v10)
            v16 = *(WebCore::Page **)(*(_QWORD *)v10 + 8);
          else
            v16 = 0;
          v17 = WebCore::Page::pluginData(v16) + 120;
          WebCore::PluginData::dummyPDFPluginInfo((uint64_t)v63);
          std::optional<WebCore::PluginInfo>::value_or[abi:sn180100]<WebCore::PluginInfo>((uint64_t)&v64, v17, (__int128 *)v63);
          WebCore::PluginInfo::~PluginInfo((WebCore::PluginInfo *)v63, v18);
          v63[0] = 0;
          v63[1] = 0;
          v62[0] = 0;
          v62[1] = 0;
          WebCore::dummyPDFPluginNames(v19);
          if (dword_1EE337DF4)
          {
            v20 = (WTF::StringImpl **)WebCore::dummyPDFPluginNames(void)::dummyPluginNames;
            for (i = 8 * dword_1EE337DF4; i; i -= 8)
            {
              WTF::String::operator=((uint64_t *)&v64, v20);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v23 = v66;
              v66 = v60[0];
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v22);
                else
                  *(_DWORD *)v23 -= 2;
              }
              WebCore::DOMPlugin::create(this, (WebCore::Navigator *)&v64, v60);
              v24 = HIDWORD(v63[1]);
              if (HIDWORD(v63[1]) == LODWORD(v63[1]))
              {
                WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>((uint64_t)v63, (unint64_t)v60);
              }
              else
              {
                v25 = v60[0];
                v60[0] = 0;
                *((_QWORD *)v63[0] + HIDWORD(v63[1])) = v25;
                HIDWORD(v63[1]) = v24 + 1;
              }
              v26 = v60[0];
              v60[0] = 0;
              if (v26)
                WTF::RefCounted<WebCore::DOMPlugin>::deref((_DWORD *)v26 + 2);
              if (MEMORY[0x19AEA53F4](*v20, "PDF Viewer", 10))
              {
                if (!HIDWORD(v63[1]))
                {
                  __break(0xC471u);
                  return;
                }
                v27 = *((_QWORD *)v63[0] + HIDWORD(v63[1]) - 1);
                WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v62, *(_DWORD ***)(v27 + 88), *(_DWORD *)(v27 + 100));
              }
              ++v20;
            }
          }
          v60[0] = 0;
          v60[1] = 0;
          WebCore::DOMPluginArray::create((uint64_t)this, (uint64_t *)v63, (uint64_t *)v60, &v61);
          v30 = v61;
          v61 = 0;
          v31 = *((_QWORD *)this + 13);
          *((_QWORD *)this + 13) = v30;
          if (v31)
          {
            WTF::RefCounted<WebCore::DOMPluginArray>::deref((_DWORD *)(v31 + 8));
            v32 = v61;
            v61 = 0;
            if (v32)
              WTF::RefCounted<WebCore::DOMPluginArray>::deref((_DWORD *)(v32 + 8));
          }
          WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v29);
          WebCore::DOMMimeTypeArray::create((uint64_t)this, (uint64_t *)v62, (uint64_t *)v60);
          v34 = v60[0];
          v60[0] = 0;
          v35 = *((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = v34;
          if (v35)
          {
            WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref((_DWORD *)(v35 + 8));
            v36 = v60[0];
            v60[0] = 0;
            if (v36)
              WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref((_DWORD *)v36 + 2);
          }
          WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v33);
          WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v37);
          WebCore::PluginInfo::~PluginInfo((WebCore::PluginInfo *)&v64, v38);
LABEL_66:
          if (!v3)
            return;
LABEL_67:
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
          return;
        }
      }
    }
    v64 = 0;
    v65 = 0;
    v63[0] = 0;
    v63[1] = 0;
    WebCore::DOMPluginArray::create((uint64_t)this, (uint64_t *)&v64, (uint64_t *)v63, (uint64_t *)v62);
    v52 = v62[0];
    v62[0] = 0;
    v53 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v52;
    if (v53)
    {
      WTF::RefCounted<WebCore::DOMPluginArray>::deref((_DWORD *)(v53 + 8));
      v54 = v62[0];
      v62[0] = 0;
      if (v54)
        WTF::RefCounted<WebCore::DOMPluginArray>::deref(v54 + 2);
    }
    WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v51);
    WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v55);
    v64 = 0;
    v65 = 0;
    WebCore::DOMMimeTypeArray::create((uint64_t)this, (uint64_t *)&v64, (uint64_t *)v63);
    v57 = v63[0];
    v63[0] = 0;
    v58 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v57;
    if (v58)
    {
      WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref((_DWORD *)(v58 + 8));
      v59 = v63[0];
      v63[0] = 0;
      if (v59)
        WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref((_DWORD *)v59 + 2);
    }
    WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v56);
    goto LABEL_66;
  }
}

WebCore::DOMPlugin *WebCore::DOMPlugin::create@<X0>(WebCore::DOMPlugin *this@<X0>, WebCore::Navigator *a2@<X1>, WebCore::DOMPlugin **a3@<X8>)
{
  WebCore::DOMPlugin *v7;
  WebCore::DOMPlugin *result;

  v7 = (WebCore::DOMPlugin *)bmalloc::api::isoAllocate();
  result = WebCore::DOMPlugin::DOMPlugin(v7, this, a2);
  *a3 = result;
  return result;
}

WebCore::DOMPlugin *WebCore::DOMPlugin::DOMPlugin(WebCore::DOMPlugin *this, WebCore::Navigator *a2, const WebCore::PluginInfo *a3)
{
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2);
  v6 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 3) = v6;
  WebCore::PluginInfo::PluginInfo((uint64_t)this + 32, (uint64_t)a3);
  WebCore::makeMimeTypes((WebCore::DOMPlugin *)((char *)this + 88), a2, a3, this);
  return this;
}

uint64_t WebCore::makeMimeTypes(WebCore *this, WebCore::Navigator *a2, const WebCore::PluginInfo *a3, WebCore::DOMPlugin *a4)
{
  uint64_t v6[2];

  v6[0] = (uint64_t)a2;
  v6[1] = (uint64_t)a4;
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_0>(this, (uint64_t)a3 + 24, v6);
  return std::sort[abi:sn180100]<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1>(*(_QWORD *)this, (WTF::StringImpl *)(*(_QWORD *)this + 8 * *((unsigned int *)this + 3)));
}

uint64_t WebCore::DOMMimeType::DOMMimeType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2);
  v8 = *(unsigned int **)(a2 + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 8) = v8;
  WebCore::MimeClassInfo::MimeClassInfo(a1 + 16, a3);
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  v10 = *(unsigned int **)(a4 + 16);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 48) = v10;
  return a1;
}

uint64_t WebCore::PluginInfo::PluginInfo(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_DWORD **)(a2 + 16);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 16) = v6;
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v7 = *(_DWORD **)(a2 + 48);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 27))
  {
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)a2;
      v8 = 32 * v6;
      do
      {
        v5 = WebCore::MimeClassInfo::MimeClassInfo(v5, v7) + 32;
        v7 += 32;
        v8 -= 32;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MimeClassInfo::MimeClassInfo(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;

  v3 = result;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)result = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  v6 = *(unsigned int *)(a2 + 28);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 28) = v6;
  if (!(_DWORD)v6)
    return v3;
  if (!(v6 >> 29))
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v3 + 24) = v6;
    *(_QWORD *)(v3 + 16) = v7;
    v8 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD ***)(a2 + 16);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        if (*v9)
          *v11 += 2;
        *v7++ = v11;
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::codePointCompare(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  BOOL v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v35[3];
  _QWORD v36[3];
  uint64_t v37[3];
  _QWORD v38[3];
  uint64_t v39[3];
  _QWORD v40[3];
  _QWORD v41[3];
  uint64_t v42[2];

  if (this)
  {
    if (a2)
    {
      v31 = WTF::StringImpl::is8Bit(this);
      v30 = WTF::StringImpl::is8Bit(a2);
      if (v31)
      {
        if (v30)
        {
          v37[2] = (uint64_t)this;
          v5 = *((_QWORD *)this + 1);
          v6 = WTF::StringImpl::length(this);
          std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v38, v5, v6);
          v29 = v38[1];
          v28 = v38[0];
          v36[2] = a2;
          v7 = *((_QWORD *)a2 + 1);
          v8 = WTF::StringImpl::length(a2);
          std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v37, v7, v8);
          return WTF::codePointCompare<unsigned char,unsigned char>(v28, v29, v37[0], v37[1]);
        }
        else
        {
          v35[2] = (uint64_t)this;
          v9 = *((_QWORD *)this + 1);
          v10 = WTF::StringImpl::length(this);
          std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v36, v9, v10);
          v27 = v36[1];
          v26 = v36[0];
          v41[2] = a2;
          v11 = *((_QWORD *)a2 + 1);
          v12 = WTF::StringImpl::length(a2);
          std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v42, v11, v12);
          return WTF::codePointCompare<unsigned char,char16_t>(v26, v27, v42[0], v42[1]);
        }
      }
      else if (v30)
      {
        v40[2] = this;
        v13 = *((_QWORD *)this + 1);
        v14 = WTF::StringImpl::length(this);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v41, v13, v14);
        v25 = v41[1];
        v24 = v41[0];
        v15 = *((_QWORD *)a2 + 1);
        v16 = WTF::StringImpl::length(a2);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v35, v15, v16);
        return WTF::codePointCompare<char16_t,unsigned char>(v24, v25, v35[0], v35[1]);
      }
      else
      {
        v39[2] = (uint64_t)this;
        v17 = *((_QWORD *)this + 1);
        v18 = WTF::StringImpl::length(this);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v40, v17, v18);
        v23 = v40[1];
        v22 = v40[0];
        v38[2] = a2;
        v19 = *((_QWORD *)a2 + 1);
        v20 = WTF::StringImpl::length(a2);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(v39, v19, v20);
        return WTF::codePointCompare<char16_t,char16_t>(v22, v23, v39[0], v39[1]);
      }
    }
    else
    {
      return WTF::StringImpl::length(this) != 0;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      v3 = WTF::StringImpl::length(a2) != 0;
    if (v3)
      return -1;
    else
      return 0;
  }
}

uint64_t WTF::StringImpl::length(WTF::StringImpl *this)
{
  return *((unsigned int *)this + 1);
}

BOOL WTF::StringImpl::is8Bit(WTF::StringImpl *this)
{
  return (*((_DWORD *)this + 4) & 4) != 0;
}

void WebCore::PluginInfo::~PluginInfo(WebCore::PluginInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
}

uint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::MimeClassInfo *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::MimeClassInfo **)a1;
    v5 = 32 * v3;
    do
    {
      WebCore::MimeClassInfo::~MimeClassInfo(v4, a2);
      v4 = (WebCore::MimeClassInfo *)(v6 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCore::MimeClassInfo::~MimeClassInfo(WebCore::MimeClassInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unint64_t WebCore::CloneDeserializer::deserialize(WebCore::CloneDeserializer *this, void *a2, JSValue a3, JSC::ArrayBuffer *a4)
{
  unsigned int v5;
  unint64_t Terminal;
  int v7;
  WTF *v8;
  __n128 v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  JSC::Structure *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unint64_t v21;
  objc_class *v22;
  uint64_t v23;
  WebCore::CloneDeserializer *v24;
  int v25;
  int *v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  objc_class *v30;
  JSValue v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;
  WTF *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  WebCore::CloneDeserializer *v51;
  JSValue v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  WTF *v64;
  WTF *v66;
  unsigned int v69;
  uint64_t v70;
  WTF *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  unsigned __int8 *v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  JSValue v83;
  int v84;
  BOOL v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSValue v91;
  JSValue v92;
  JSValue v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  JSCell *v98;
  _DWORD *v99;
  unint64_t v100;
  int v101;
  JSCell *v102;
  unint64_t v103;
  WTF::StringImpl **v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  JSC::VM *v108;
  uint64_t *v109;
  double v110;
  unint64_t v111;
  double v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  JSValue v116;
  unsigned int v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  JSCell *v120;
  _DWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  int v124;
  JSCell *v125;
  unint64_t v126;
  WTF::StringImpl **v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  JSC::VM *v131;
  uint64_t *v132;
  double v133;
  unint64_t v134;
  double v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  JSC::JSMap *v139;
  unint64_t v140;
  unint64_t v141;
  objc_class *v142;
  objc_class *v143;
  uint64_t v144;
  WebCore::CloneDeserializer *v145;
  JSValue v146;
  int v147;
  JSValue v148;
  unint64_t v149;
  int64x2_t *v150;
  int64x2_t *v151;
  unint64_t v152;
  int64x2_t *v153;
  int64x2_t *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  JSC::JSSet *v167;
  unint64_t v168;
  unint64_t v169;
  objc_class *v170;
  objc_class *v171;
  uint64_t v172;
  WebCore::CloneDeserializer *v173;
  JSValue v174;
  int v175;
  JSValue v176;
  unint64_t v177;
  int v178;
  JSC::Heap *v179;
  const JSCell *v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  float v184;
  JSCell *v185;
  JSCell *v186;
  char *v187;
  uint64_t v188;
  int v189;
  int v190;
  unsigned int v191;
  _BOOL4 v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  JSCell *v200;
  JSCell *v201;
  uint64_t v202;
  int v203;
  JSCell *v204;
  char *v205;
  int v206;
  unsigned int v207;
  _QWORD *v208;
  _DWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  int v217;
  WTF::StringImpl **v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  unint64_t v230;
  int v231;
  BOOL v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  JSValue v243;
  char v244;
  unint64_t v245;
  char v246;
  unint64_t v247;
  char v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  float v252;
  JSCell *v253;
  char *v254;
  uint64_t v255;
  int v256;
  int v257;
  _BOOL4 v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  JSCell *v267;
  JSCell *v268;
  uint64_t v269;
  uint64_t v270;
  JSCell *v271;
  uint64_t v272;
  char *v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  _QWORD *v277;
  JSC::VM *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  int v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  WTF::StringImpl **v289;
  unsigned int v290;
  int v291;
  char v292;
  unint64_t v293;
  char v294;
  unint64_t v295;
  char hasExceptionsAfterHandlingTraps;
  JSValue v297;
  unint64_t v298;
  JSCell *v299;
  char v300;
  JSCell *v301;
  int v302;
  WTF::StringImpl **v303;
  unsigned int v304;
  int v305;
  unint64_t v306;
  JSCell *v307;
  char v308;
  int v309;
  WTF::StringImpl **v310;
  unsigned int v311;
  int v312;
  JSCell *v313;
  JSCell *v314;
  JSCell *v315;
  uint64_t (*v316)(WTF ***);
  WTF ***v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t (*v320)(WTF ***);
  WTF ***v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  JSCell *v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  JSCell *v329;
  char v330;
  char v331;
  unint64_t v332;
  unint64_t v333;
  _DWORD *v334;
  uint64_t v335;
  unint64_t v336;
  int v337;
  int v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  JSCell *v344;
  JSCell *v345;
  JSCell *v346;
  JSCell *v347;
  JSCell *v348;
  JSCell *v349;
  unsigned int v350;
  JSC::VM *v351;
  unsigned int v352;
  JSC::VM *v353;
  int v354;
  JSCell *v355;
  JSCell *v356;
  WTF *v357;
  WTF *v358;
  WTF *v359;
  WTF *v360;
  WTF *v361;
  JSCell *v362;
  unint64_t v363;
  JSCell *v364;
  JSCell *v365;
  _QWORD *v366;
  _QWORD *v367;
  JSC::JSGlobalObject *v368;
  JSC::JSGlobalObject *v369;
  uint64_t v370;
  WTF *i;
  int v372;
  unsigned int v373;
  _BYTE v374[9];
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377[5];
  uint64_t v378;
  WTF *v379;
  uint64_t *v380[5];
  uint64_t v381;
  uint64_t **v382;
  uint64_t *v383[5];
  uint64_t v384;
  WTF *v385;
  uint64_t *v386[33];
  WTF *v387;
  uint64_t v388;
  _BYTE v389[128];
  WTF *v390;
  uint64_t v391;
  _BYTE v392[64];
  int v393;
  char v394;
  WTF::StringImpl *v395;
  WTF **v396;
  unint64_t v397;
  unint64_t v398;

  v5 = 0;
  Terminal = 0;
  v7 = 0;
  v370 = *(_QWORD *)(*(_QWORD *)this + 56);
  v8 = (WTF *)v392;
  v390 = (WTF *)v392;
  v391 = 16;
  v387 = (WTF *)v389;
  v388 = 16;
  v384 = 0x2000000000;
  v385 = (WTF *)&v386[1];
  v9 = 0uLL;
  memset(v386, 0, sizeof(v386));
  v381 = 0x400000000;
  memset(v383, 0, sizeof(v383));
  v382 = &v383[1];
  v378 = 0x400000000;
  v379 = (WTF *)&v380[1];
  memset(v380, 0, sizeof(v380));
  v375 = 0x400000000;
  memset(v377, 0, sizeof(v377));
  v376 = &v377[1];
  v372 = 16;
  for (i = (WTF *)v374; ; v7 = *((_DWORD *)i + --v5))
  {
    v373 = v5;
    if (v7)
    {
      switch(v7)
      {
        case 1:
          goto LABEL_146;
        case 2:
          goto LABEL_31;
        case 3:
          if (!HIDWORD(v391))
          {
            __break(0xC471u);
            JUMPOUT(0x194407048);
          }
          v80 = *((_QWORD *)v385 + (v384 - 1));
          v81 = *((unsigned int *)v390 + HIDWORD(v391) - 1);
          v82 = *(_BYTE *)(v80 + 4) & 0x1F;
          if (v82 - 4 >= 0xA)
          {
            v232 = v82 > 3 || v82 == 2;
            if (v232 && (*(_BYTE *)(v80 + 4) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194406A28);
            }
          }
          else if (*(_DWORD *)(*(_QWORD *)(v80 + 8) - 4) > v81)
          {
            v83.super.isa = (Class)Terminal;
            JSC::JSObject::setIndexQuickly(v80, *(_DWORD **)(*(_QWORD *)this + 56), v81, v83);
            goto LABEL_152;
          }
          JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
LABEL_152:
          if (!HIDWORD(v391))
          {
            __break(0xC471u);
            JUMPOUT(0x194407050);
          }
          --HIDWORD(v391);
          goto LABEL_31;
        case 4:
          goto LABEL_42;
        case 5:
          if (!HIDWORD(v388))
          {
            __break(0xC471u);
            JUMPOUT(0x194407058);
          }
          JSC::JSObject::putDirectMayBeIndex();
          WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast((unsigned int *)&v387, v118);
          goto LABEL_42;
        case 6:
          goto LABEL_128;
        case 7:
          goto LABEL_73;
        case 8:
          if (!HIDWORD(v388))
          {
            __break(0xC471u);
            JUMPOUT(0x194407038);
          }
          JSC::JSObject::putDirectMayBeIndex();
          if (!HIDWORD(v388))
          {
            __break(0xC471u);
            JUMPOUT(0x194407040);
          }
          v77 = HIDWORD(v388) - 1;
          v78 = (WTF::StringImpl *)*((_QWORD *)v387 + v77);
          *((_QWORD *)v387 + v77) = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v76);
            else
              *(_DWORD *)v78 -= 2;
          }
          HIDWORD(v388) = v77;
          goto LABEL_73;
        case 9:
          goto LABEL_353;
        case 10:
          v116.super.isa = (Class)Terminal;
          JSC::MarkedVector<JSC::JSValue,4ul,WTF::CrashOnOverflow>::append((JSC::MarkedVectorBase *)&v381, v116);
          LODWORD(v396) = 11;
          v117 = v373;
          if (v373 == v372)
            goto LABEL_236;
          *((_DWORD *)i + v373) = 11;
          v373 = v117 + 1;
          goto LABEL_3;
        case 11:
          v363 = (unint64_t)v382[(v381 - 1)];
          v365 = (JSCell *)*((_QWORD *)v379 + (v378 - 1));
          v369 = *(JSC::JSGlobalObject **)this;
          v119 = *(_QWORD *)(*(_QWORD *)this + 56);
          if (!*((_QWORD *)v365 + 2))
          {
            v396 = *(WTF ***)(*(_QWORD *)this + 56);
            v152 = *(_QWORD *)(v119 + 41656);
            v153 = (int64x2_t *)JSC::tryAllocateCell<JSC::JSImmutableButterfly>(v119, 304);
            v154 = v153;
            if (v153)
            {
              JSC::JSImmutableButterfly::JSImmutableButterfly(v153, v152, 0x24u);
              if (*(_BYTE *)(v119 + 755))
                __dmb(0xAu);
              v154[1] = vdupq_n_s64(0xFFFE000000000000);
              v154[2].i64[0] = 0xFFFE000000000008;
            }
            else
            {
              JSC::throwOutOfMemoryError();
            }
            if (!*(_DWORD *)(v119 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v119) & 1) == 0)
            {
              *((_QWORD *)v365 + 2) = v154;
              if (v154)
              {
                if (*(_DWORD *)(v119 + 760) >= *((unsigned __int8 *)v365 + 7))
                  JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v119 + 192), v365);
              }
            }
          }
          if (*(_DWORD *)(v119 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v119) & 1) != 0)
            goto LABEL_352;
          v120 = (JSCell *)*((_QWORD *)v365 + 2);
          v121 = (_DWORD *)*((_QWORD *)v369 + 7);
          v122 = (_QWORD *)((char *)v120 + 16);
          v367 = (_QWORD *)((char *)v120 + 16);
          if (!*((_DWORD *)v120 + 4))
          {
            v123 = 0;
            v339 = 0;
            v350 = -1;
            LODWORD(v130) = -1;
            goto LABEL_332;
          }
          v123 = v363;
          v357 = v8;
          if ((v363 + 0x2000000000000) >> 50)
          {
            v157 = (int)COERCE_DOUBLE(v363 - 0x2000000000000);
            v123 = v363;
            if (COERCE_DOUBLE(v363 - 0x2000000000000) == (double)(int)v157)
              v123 = v157 | 0xFFFE000000000000;
          }
          if ((v123 & 0xFFFE000000000002) != 0)
            goto LABEL_418;
          v124 = *(unsigned __int8 *)(v123 + 5);
          if (v124 == 3)
          {
            if (*(_DWORD *)(v123 + 12))
            {
              v129 = *(_DWORD *)(v123 + 12);
            }
            else
            {
              v230 = v123;
              v231 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v123);
              v123 = v230;
              v129 = v231;
            }
LABEL_252:
            v122 = v367;
            goto LABEL_253;
          }
          if (v124 == 2)
          {
            v125 = (JSCell *)*((_QWORD *)v365 + 2);
            v126 = v123;
            v127 = (WTF::StringImpl **)(v123 + 8);
            if ((*(_BYTE *)(v123 + 8) & 1) != 0)
              v127 = (WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v123, v369);
            if (v121[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v121) & 1) != 0)
            {
              v129 = -1;
            }
            else
            {
              v128 = *((_DWORD *)*v127 + 4);
              if (v128 < 0x100)
                v129 = WTF::StringImpl::hashSlowCase(*v127);
              else
                v129 = v128 >> 8;
            }
            v123 = v126;
            v120 = v125;
            goto LABEL_252;
          }
LABEL_418:
          v236 = (v123 + ~(v123 << 32)) ^ ((v123 + ~(v123 << 32)) >> 22);
          v237 = 9 * ((v236 + ~(v236 << 13)) ^ ((v236 + ~(v236 << 13)) >> 8));
          v238 = (v237 ^ (v237 >> 15)) + ~((v237 ^ (v237 >> 15)) << 27);
          v129 = (v238 >> 31) ^ v238;
LABEL_253:
          if (!v121[20]
            || (v295 = v123,
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v121),
                v122 = v367,
                v123 = v295,
                (hasExceptionsAfterHandlingTraps & 1) == 0))
          {
            v339 = v129;
            v350 = ((*((_DWORD *)v120 + 8) - 1) & v129) + 4;
            v130 = v122[v350];
            if (!v130)
            {
              LODWORD(v130) = -1;
              goto LABEL_332;
            }
            v355 = v120;
            v131 = (JSC::VM *)*((_QWORD *)v369 + 7);
            v132 = (uint64_t *)((char *)v131 + 41840);
            if (v123 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v133 = v123 - 0x2000000000000;
            else
              v133 = (double)(int)v123;
            while (2)
            {
              v134 = v122[v130];
              if ((v134 & 0xFFFE000000000002) != 0)
                goto LABEL_259;
              v138 = *v132;
              if (!*v132)
              {
                v242 = v123;
                v138 = JSC::VM::orderedHashTableDeletedValueSlow(v131);
                v122 = v367;
                v123 = v242;
              }
              if (v138 != v134)
              {
LABEL_259:
                if (v123 != v134)
                {
                  if (v123 >> 49)
                  {
                    if (!(v134 >> 49))
                      goto LABEL_267;
                    if (v134 >= 0xFFFE000000000000)
                      v135 = (double)(int)v134;
                    else
                      *(_QWORD *)&v135 = v134 - 0x2000000000000;
                    if (*(_QWORD *)&v133 != *(_QWORD *)&v135)
                      goto LABEL_267;
                  }
                  else
                  {
                    v136 = v123;
                    v137 = JSC::JSValue::strictEqual((uint64_t)v369, v123, v134);
                    v122 = v367;
                    v123 = v136;
                    if ((v137 & 1) == 0)
                      goto LABEL_267;
                  }
                }
              }
              else
              {
LABEL_267:
                v130 = v122[(v130 + 2)];
                if (v130)
                  continue;
                LODWORD(v130) = -1;
              }
              break;
            }
            v120 = v355;
            v8 = v357;
            goto LABEL_332;
          }
          v123 = 0;
          v339 = 0;
          v350 = 0;
          LODWORD(v130) = 0;
LABEL_332:
          if (v121[20])
          {
            v245 = v123;
            v246 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v121);
            v122 = v367;
            v123 = v245;
            if ((v246 & 1) != 0)
              goto LABEL_352;
          }
          if ((_DWORD)v130 != -1)
          {
            v122[(v130 + 1)] = Terminal;
            if (Terminal
              && (Terminal & 0xFFFE000000000002) == 0
              && v121[190] >= *((unsigned __int8 *)v120 + 7))
            {
              v179 = (JSC::Heap *)(v121 + 48);
              v180 = v120;
LABEL_338:
              JSC::Heap::writeBarrierSlowPath(v179, v180);
              goto LABEL_352;
            }
            goto LABEL_352;
          }
          v181 = *((_DWORD *)v120 + 8);
          v182 = *((_DWORD *)v120 + 6);
          v356 = v120;
          v183 = *((_QWORD *)v120 + 2);
          v184 = 0.75;
          if (v181 < 0x10000)
            v184 = 0.5;
          v335 = v183 + v182;
          if ((float)(v184 * (float)v181) > (float)(v183 + v182))
          {
            v185 = v120;
            v186 = v120;
            goto LABEL_343;
          }
          v333 = v123;
          v334 = v121;
          v358 = v8;
          if (v181 >= 0x10000)
            v195 = 1;
          else
            v195 = 2;
          if (v182 >= v181 >> 1)
            v196 = 0;
          else
            v196 = v195;
          v197 = v181 << v196;
          v198 = *((_QWORD *)v369 + 7);
          v396 = (WTF **)v198;
          v353 = (JSC::VM *)v198;
          v341 = v198 + 41656;
          if ((4 * v197 + 4) < 0x10000001
            && (v199 = *(_QWORD *)(v198 + 41656),
                (v200 = (JSCell *)JSC::tryAllocateCell<JSC::JSImmutableButterfly>(v198, 8 * (4 * v197 + 4) + 16)) != 0))
          {
            v201 = v200;
            JSC::JSImmutableButterfly::JSImmutableButterfly(v200, v199, 4 * v197 + 4);
            if (*(_BYTE *)(v198 + 755))
              __dmb(0xAu);
            *((_QWORD *)v201 + 2) = v183 | 0xFFFE000000000000;
            *((_QWORD *)v201 + 3) = 0xFFFE000000000000;
            v346 = v201;
            *((_QWORD *)v201 + 4) = v197 | 0xFFFE000000000000;
          }
          else
          {
            JSC::throwOutOfMemoryError();
            v346 = 0;
          }
          if (*(_DWORD *)(v198 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v198) & 1) != 0)
            goto LABEL_420;
          if (!(_DWORD)v335)
            goto LABEL_421;
          v202 = 0;
          v203 = v197 + 1;
          v204 = v346;
          v205 = (char *)v346 + 16;
          v206 = v197 - 1;
          v207 = v181 + 5;
          v343 = 2;
          v208 = v367;
          v209 = (_DWORD *)v198;
          v210 = v335;
          v211 = v341;
          v337 = v206;
          while (2)
          {
            v212 = v208[v207 - 1];
            v213 = v212 & 0xFFFE000000000002;
            if ((v212 & 0xFFFE000000000002) != 0)
            {
              v214 = (v203 + 3);
              *(_QWORD *)&v205[8 * v214] = v212;
            }
            else
            {
              v221 = *(_QWORD *)(v211 + 184);
              if (!v221)
              {
                v221 = JSC::VM::orderedHashTableDeletedValueSlow((JSC::VM *)v209);
                v213 = v212 & 0xFFFE000000000002;
                v206 = v337;
                v205 = (char *)v346 + 16;
                v211 = v341;
                v209 = v353;
                v204 = v346;
                v208 = v367;
              }
              if (v221 == v212)
              {
                v208[v343++] = v202 | 0xFFFE000000000000;
LABEL_392:
                ++v202;
                v207 += 3;
                if (v210 == v202)
                  goto LABEL_421;
                continue;
              }
              v214 = (v203 + 3);
              *(_QWORD *)&v205[8 * v214] = v212;
              if (v204 && v212)
              {
                v332 = v213;
                if (v209[190] >= *((unsigned __int8 *)v204 + 7))
                {
                  v204 = v346;
                  JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v353 + 192), v346);
                  v209 = v353;
                  v208 = v367;
                }
                else
                {
                  v208 = v367;
                  v204 = v346;
                  v209 = v353;
                }
                v210 = v335;
                v211 = v341;
                v205 = (char *)v346 + 16;
                v206 = v337;
                v213 = v332;
              }
            }
            break;
          }
          v215 = v208[v207];
          *(_QWORD *)&v205[8 * (v203 + 4)] = v215;
          if (v215)
            v216 = (v215 & 0xFFFE000000000002) == 0;
          else
            v216 = 0;
          if (v216 && v209[190] >= *((unsigned __int8 *)v204 + 7))
          {
            v240 = v213;
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v209 + 48), v346);
            v213 = v240;
            v206 = v337;
            v205 = (char *)v346 + 16;
            v211 = v341;
            v209 = v353;
            v204 = v346;
            v208 = v367;
          }
          if (v213)
            goto LABEL_389;
          v217 = *(unsigned __int8 *)(v212 + 5);
          if (v217 == 3)
          {
            v220 = *(_DWORD *)(v212 + 12);
            if (!v220)
            {
              v227 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v212);
              v206 = v337;
              v205 = (char *)v346 + 16;
              v211 = v341;
              v209 = v353;
              v204 = v346;
              v208 = v367;
              v220 = v227;
            }
          }
          else if (v217 == 2)
          {
            v218 = (WTF::StringImpl **)(v212 + 8);
            if ((*(_BYTE *)(v212 + 8) & 1) != 0)
            {
              v229 = JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v212, v369);
              v206 = v337;
              v205 = (char *)v346 + 16;
              v211 = v341;
              v209 = v353;
              v204 = v346;
              v208 = v367;
              v218 = (WTF::StringImpl **)v229;
            }
            if (v209[20]
              && (v244 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v209),
                  v206 = v337,
                  v205 = (char *)v346 + 16,
                  v211 = v341,
                  v209 = v353,
                  v204 = v346,
                  v208 = v367,
                  (v244 & 1) != 0))
            {
              v220 = -1;
            }
            else
            {
              v219 = *((_DWORD *)*v218 + 4);
              if (v219 < 0x100)
              {
                v228 = WTF::StringImpl::hashSlowCase(*v218);
                v206 = v337;
                v205 = (char *)v346 + 16;
                v211 = v341;
                v209 = v353;
                v204 = v346;
                v208 = v367;
                v220 = v228;
              }
              else
              {
                v220 = v219 >> 8;
              }
            }
          }
          else
          {
LABEL_389:
            v222 = (v212 + ~(v212 << 32)) ^ ((unint64_t)(v212 + ~(v212 << 32)) >> 22);
            v223 = 9 * ((v222 + ~(v222 << 13)) ^ ((v222 + ~(v222 << 13)) >> 8));
            v224 = (v223 ^ (v223 >> 15)) + ~((v223 ^ (v223 >> 15)) << 27);
            v220 = (v224 >> 31) ^ v224;
          }
          if (!v209[20]
            || (v239 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v209),
                v206 = v337,
                v205 = (char *)v346 + 16,
                v211 = v341,
                v209 = v353,
                v204 = v346,
                v208 = v367,
                (v239 & 1) == 0))
          {
            v225 = (v220 & v206) + 4;
            v226 = *(_QWORD *)&v205[8 * v225];
            *(_QWORD *)&v205[8 * v225] = v214 | 0xFFFE000000000000;
            *(_QWORD *)&v205[8 * (v214 + 2)] = v226;
            v203 = v214;
            goto LABEL_392;
          }
LABEL_420:
          v346 = 0;
LABEL_421:
          if (*((_DWORD *)v353 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v353) & 1) != 0)
          {
            v186 = 0;
LABEL_582:
            v185 = v356;
            v8 = v358;
            v123 = v333;
            v121 = v334;
            goto LABEL_343;
          }
          v186 = v346;
          *v367 = v346;
          if (!v346)
            goto LABEL_582;
          if (((unint64_t)v346 & 0xFFFE000000000002) != 0
            || *((_DWORD *)v353 + 190) < *((unsigned __int8 *)v356 + 7))
          {
            v185 = v356;
            v8 = v358;
          }
          else
          {
            v185 = v356;
            JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v353 + 192), v356);
            v8 = v358;
          }
          v123 = v333;
          v121 = v334;
          v186 = v346;
LABEL_343:
          if (v121[20])
          {
            v306 = v123;
            v307 = v186;
            v308 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v121);
            v186 = v307;
            v123 = v306;
            if ((v308 & 1) != 0)
              goto LABEL_352;
          }
          v187 = (char *)v186 + 16;
          v188 = *((_QWORD *)v186 + 2);
          v189 = *((_DWORD *)v186 + 8);
          v190 = *((_DWORD *)v186 + 6);
          *((_QWORD *)v186 + 2) = v188 + 1;
          if (!v123)
          {
            v349 = v186;
            v361 = v8;
            if ((v363 + 0x2000000000000) >> 50)
            {
              v319 = (int)COERCE_DOUBLE(v363 - 0x2000000000000);
              if (COERCE_DOUBLE(v363 - 0x2000000000000) == (double)(int)v319)
                v363 = v319 | 0xFFFE000000000000;
            }
            if ((v363 & 0xFFFE000000000002) != 0)
              goto LABEL_612;
            v309 = *(unsigned __int8 *)(v363 + 5);
            if (v309 == 3)
            {
              v339 = *(_DWORD *)(v363 + 12);
              if (!v339)
                v339 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v363);
              goto LABEL_613;
            }
            if (v309 != 2)
            {
LABEL_612:
              v326 = (v363 + ~(v363 << 32)) ^ ((v363 + ~(v363 << 32)) >> 22);
              v327 = 9 * ((v326 + ~(v326 << 13)) ^ ((v326 + ~(v326 << 13)) >> 8));
              v328 = (v327 ^ (v327 >> 15)) + ~((v327 ^ (v327 >> 15)) << 27);
              v339 = (v328 >> 31) ^ v328;
            }
            else
            {
              v310 = (WTF::StringImpl **)(v363 + 8);
              if ((*(_BYTE *)(v363 + 8) & 1) != 0)
                v310 = (WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v363, v369);
              if (v121[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v121) & 1) != 0)
              {
                v312 = -1;
LABEL_549:
                v339 = v312;
              }
              else
              {
                v311 = *((_DWORD *)*v310 + 4);
                if (v311 >= 0x100)
                {
                  v312 = v311 >> 8;
                  goto LABEL_549;
                }
                v339 = WTF::StringImpl::hashSlowCase(*v310);
              }
            }
LABEL_613:
            v329 = v349;
            if (v121[20])
            {
              v331 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v121);
              v329 = v349;
              if ((v331 & 1) != 0)
                goto LABEL_352;
            }
            v192 = v329 != v356;
            v123 = v363;
            goto LABEL_615;
          }
          v191 = v350;
          if (v186 == v185)
          {
            v192 = 0;
            goto LABEL_347;
          }
          v349 = v186;
          v361 = v8;
          v192 = 1;
LABEL_615:
          v191 = (v339 & (v189 - 1)) + 4;
          v8 = v361;
          v186 = v349;
LABEL_347:
          v193 = (v189 + 3 * (v190 + v188) + 4);
          v194 = *(_QWORD *)&v187[8 * v191];
          *(_QWORD *)&v187[8 * v191] = v193 | 0xFFFE000000000000;
          *(_QWORD *)&v187[8 * (v193 + 2)] = v194;
          *(_QWORD *)&v187[8 * v193] = v123;
          if (v123 && (v123 & 0xFFFE000000000002) == 0 && v121[190] >= *((unsigned __int8 *)v186 + 7))
          {
            v314 = v186;
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v121 + 48), v186);
            v186 = v314;
          }
          *(_QWORD *)&v187[8 * (v193 + 1)] = Terminal;
          if (Terminal
            && (Terminal & 0xFFFE000000000002) == 0
            && v121[190] >= *((unsigned __int8 *)v186 + 7))
          {
            v315 = v186;
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v121 + 48), v186);
            v186 = v315;
          }
          if (v192)
          {
            *((_QWORD *)v365 + 2) = v186;
            if (v365)
            {
              if (v121[190] >= *((unsigned __int8 *)v365 + 7))
              {
                v179 = (JSC::Heap *)(v121 + 48);
                v180 = v365;
                goto LABEL_338;
              }
            }
          }
LABEL_352:
          LODWORD(v381) = v381 - 1;
          goto LABEL_353;
        case 12:
          goto LABEL_307;
        case 13:
          v368 = *(JSC::JSGlobalObject **)this;
          v97 = *(_QWORD *)(*(_QWORD *)this + 56);
          v362 = (JSCell *)v376[(v375 - 1)];
          if (!*((_QWORD *)v362 + 2))
          {
            v396 = *(WTF ***)(*(_QWORD *)this + 56);
            v149 = *(_QWORD *)(v97 + 41656);
            v150 = (int64x2_t *)JSC::tryAllocateCell<JSC::JSImmutableButterfly>(v97, 240);
            v151 = v150;
            if (v150)
            {
              JSC::JSImmutableButterfly::JSImmutableButterfly(v150, v149, 0x1Cu);
              if (*(_BYTE *)(v97 + 755))
                __dmb(0xAu);
              v151[1] = vdupq_n_s64(0xFFFE000000000000);
              v151[2].i64[0] = 0xFFFE000000000008;
            }
            else
            {
              JSC::throwOutOfMemoryError();
            }
            if (!*(_DWORD *)(v97 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v97) & 1) == 0)
            {
              *((_QWORD *)v362 + 2) = v151;
              if (v151)
              {
                if (*(_DWORD *)(v97 + 760) >= *((unsigned __int8 *)v362 + 7))
                  JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v97 + 192), v362);
              }
            }
          }
          if (*(_DWORD *)(v97 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v97) & 1) != 0)
            goto LABEL_307;
          v98 = (JSCell *)*((_QWORD *)v362 + 2);
          v99 = (_DWORD *)((char *)v98 + 16);
          v364 = (JSCell *)*((_QWORD *)v368 + 7);
          v366 = (_QWORD *)((char *)v98 + 16);
          if (!*((_DWORD *)v98 + 4))
          {
            v100 = 0;
            v354 = 0;
            v352 = -1;
LABEL_304:
            LODWORD(v107) = -1;
            goto LABEL_305;
          }
          v100 = Terminal;
          if ((Terminal + 0x2000000000000) >> 50)
          {
            v156 = (int)COERCE_DOUBLE(Terminal - 0x2000000000000);
            v100 = Terminal;
            if (COERCE_DOUBLE(Terminal - 0x2000000000000) == (double)(int)v156)
              v100 = v156 | 0xFFFE000000000000;
          }
          if ((v100 & 0xFFFE000000000002) != 0)
            goto LABEL_417;
          v101 = *(unsigned __int8 *)(v100 + 5);
          if (v101 == 3)
          {
            v354 = *(_DWORD *)(v100 + 12);
            if (!v354)
            {
              v177 = v100;
              v178 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v100);
              v100 = v177;
              v354 = v178;
            }
            goto LABEL_213;
          }
          if (v101 == 2)
          {
            v102 = (JSCell *)*((_QWORD *)v362 + 2);
            v103 = v100;
            v104 = (WTF::StringImpl **)(v100 + 8);
            if ((*(_BYTE *)(v100 + 8) & 1) != 0)
              v104 = (WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v100, v368);
            if (*((_DWORD *)v364 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v364) & 1) != 0)
            {
              v106 = -1;
LABEL_211:
              v354 = v106;
            }
            else
            {
              v105 = *((_DWORD *)*v104 + 4);
              if (v105 >= 0x100)
              {
                v106 = v105 >> 8;
                goto LABEL_211;
              }
              v354 = WTF::StringImpl::hashSlowCase(*v104);
            }
            v100 = v103;
            v98 = v102;
LABEL_213:
            v99 = v366;
            goto LABEL_214;
          }
LABEL_417:
          v233 = (v100 + ~(v100 << 32)) ^ ((v100 + ~(v100 << 32)) >> 22);
          v234 = 9 * ((v233 + ~(v233 << 13)) ^ ((v233 + ~(v233 << 13)) >> 8));
          v235 = (v234 ^ (v234 >> 15)) + ~((v234 ^ (v234 >> 15)) << 27);
          v354 = (v235 >> 31) ^ v235;
LABEL_214:
          if (*((_DWORD *)v364 + 20))
          {
            v293 = v100;
            v294 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v364);
            v99 = v366;
            v100 = v293;
            if ((v294 & 1) != 0)
            {
              if (*((_DWORD *)v364 + 20))
                JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v364);
              goto LABEL_307;
            }
          }
          v352 = ((*((_DWORD *)v98 + 8) - 1) & v354) + 4;
          v107 = *(_QWORD *)&v99[2 * v352];
          if (!v107)
            goto LABEL_304;
          v345 = v98;
          v108 = (JSC::VM *)*((_QWORD *)v368 + 7);
          v109 = (uint64_t *)((char *)v108 + 41840);
          if (v100 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v110 = v100 - 0x2000000000000;
          else
            v110 = (double)(int)v100;
          break;
        default:
          goto LABEL_5;
      }
      do
      {
        v111 = *(_QWORD *)&v99[2 * v107];
        if ((v111 & 0xFFFE000000000002) != 0)
          goto LABEL_220;
        v115 = *v109;
        if (!*v109)
        {
          v241 = v100;
          v115 = JSC::VM::orderedHashTableDeletedValueSlow(v108);
          v99 = v366;
          v100 = v241;
        }
        if (v115 != v111)
        {
LABEL_220:
          if (v100 == v111)
            goto LABEL_330;
          if (v100 >> 49)
          {
            if (v111 >> 49)
            {
              if (v111 >= 0xFFFE000000000000)
                v112 = (double)(int)v111;
              else
                *(_QWORD *)&v112 = v111 - 0x2000000000000;
              if (*(_QWORD *)&v110 == *(_QWORD *)&v112)
                goto LABEL_330;
            }
          }
          else
          {
            v113 = v100;
            v114 = JSC::JSValue::strictEqual((uint64_t)v368, v100, v111);
            v99 = v366;
            v100 = v113;
            if ((v114 & 1) != 0)
              goto LABEL_330;
          }
        }
        v107 = *(_QWORD *)&v99[2 * (v107 + 1)];
      }
      while (v107);
      LODWORD(v107) = -1;
LABEL_330:
      v98 = v345;
LABEL_305:
      if (*((_DWORD *)v364 + 20))
      {
        v247 = v100;
        v248 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v364);
        if ((_DWORD)v107 != -1)
          goto LABEL_307;
        v100 = v247;
        if ((v248 & 1) != 0)
          goto LABEL_307;
      }
      else if ((_DWORD)v107 != -1)
      {
        goto LABEL_307;
      }
      v249 = *((_DWORD *)v98 + 8);
      v250 = *((_DWORD *)v98 + 6);
      v251 = *((_QWORD *)v98 + 2);
      v252 = 0.75;
      if (v249 < 0x10000)
        v252 = 0.5;
      if ((float)(v252 * (float)v249) > (float)(v251 + v250))
      {
        v253 = v98;
        goto LABEL_446;
      }
      v342 = v251 + v250;
      v336 = v100;
      v347 = v98;
      v359 = v8;
      if (v249 >= 0x10000)
        v262 = 1;
      else
        v262 = 2;
      if (v250 >= v249 >> 1)
        v263 = 0;
      else
        v263 = v262;
      v264 = v249 << v263;
      v265 = *((_QWORD *)v368 + 7);
      v396 = (WTF **)v265;
      v351 = (JSC::VM *)v265;
      v340 = v265 + 41656;
      if ((3 * v264 + 4) < 0x10000001
        && (v266 = *(_QWORD *)(v265 + 41656),
            (v267 = (JSCell *)JSC::tryAllocateCell<JSC::JSImmutableButterfly>(v265, 8 * (3 * v264 + 4) + 16)) != 0))
      {
        v268 = v267;
        JSC::JSImmutableButterfly::JSImmutableButterfly(v267, v266, 3 * v264 + 4);
        if (*(_BYTE *)(v265 + 755))
          __dmb(0xAu);
        *((_QWORD *)v268 + 2) = v251 | 0xFFFE000000000000;
        *((_QWORD *)v268 + 3) = 0xFFFE000000000000;
        v344 = v268;
        *((_QWORD *)v268 + 4) = v264 | 0xFFFE000000000000;
      }
      else
      {
        JSC::throwOutOfMemoryError();
        v344 = 0;
      }
      if (*(_DWORD *)(v265 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v265) & 1) != 0)
      {
LABEL_495:
        v344 = 0;
LABEL_496:
        if (*((_DWORD *)v351 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v351) & 1) != 0)
        {
          v253 = 0;
        }
        else
        {
          v253 = v344;
          *v366 = v344;
          if (v344)
          {
            if (((unint64_t)v344 & 0xFFFE000000000002) != 0
              || *((_DWORD *)v351 + 190) < *((unsigned __int8 *)v347 + 7))
            {
              v8 = v359;
              v98 = v347;
            }
            else
            {
              v98 = v347;
              JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v351 + 192), v347);
              v8 = v359;
            }
            v100 = v336;
            v253 = v344;
            goto LABEL_446;
          }
        }
        v8 = v359;
        v98 = v347;
        v100 = v336;
LABEL_446:
        if (*((_DWORD *)v364 + 20))
        {
          v298 = v100;
          v299 = v253;
          v300 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v364);
          v253 = v299;
          v100 = v298;
          if ((v300 & 1) != 0)
            goto LABEL_307;
        }
        v254 = (char *)v253 + 16;
        v255 = *((_QWORD *)v253 + 2);
        v256 = *((_DWORD *)v253 + 8);
        v257 = *((_DWORD *)v253 + 6);
        *((_QWORD *)v253 + 2) = v255 + 1;
        if (v100)
        {
          if (v253 == v98)
          {
            v258 = 0;
            v259 = v352;
            goto LABEL_450;
          }
          v301 = v253;
          v360 = v8;
          v258 = 1;
LABEL_611:
          v259 = (v354 & (v256 - 1)) + 4;
          v8 = v360;
          v253 = v301;
LABEL_450:
          v260 = (v256 + 2 * (v257 + v255) + 4);
          v261 = *(_QWORD *)&v254[8 * v259];
          *(_QWORD *)&v254[8 * v259] = v260 | 0xFFFE000000000000;
          *(_QWORD *)&v254[8 * (v256 + 2 * (v257 + v255) + 5)] = v261;
          *(_QWORD *)&v254[8 * v260] = v100;
          if (v100
            && (v100 & 0xFFFE000000000002) == 0
            && *((_DWORD *)v364 + 190) >= *((unsigned __int8 *)v253 + 7))
          {
            v313 = v253;
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)((char *)v364 + 192), v253);
            v253 = v313;
          }
          if (v258)
          {
            *((_QWORD *)v362 + 2) = v253;
            if (v362)
            {
              if (*((_DWORD *)v364 + 190) >= *((unsigned __int8 *)v362 + 7))
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)((char *)v364 + 192), v362);
            }
          }
LABEL_307:
          v11 = (unsigned __int8 *)*((_QWORD *)this + 29);
          v155 = 13;
          if ((unint64_t)v11 < *((_QWORD *)this + 30))
          {
            *((_QWORD *)this + 29) = v11 + 1;
            v10 = *v11++;
            if (v10 == 32)
            {
              LODWORD(v375) = v375 - 1;
              goto LABEL_73;
            }
          }
          goto LABEL_11;
        }
        v301 = v253;
        v348 = v98;
        v360 = v8;
        if ((Terminal + 0x2000000000000) >> 50)
        {
          v318 = (int)COERCE_DOUBLE(Terminal - 0x2000000000000);
          if (COERCE_DOUBLE(Terminal - 0x2000000000000) == (double)(int)v318)
            Terminal = v318 | 0xFFFE000000000000;
        }
        if ((Terminal & 0xFFFE000000000002) != 0)
          goto LABEL_608;
        v302 = *(unsigned __int8 *)(Terminal + 5);
        if (v302 == 3)
        {
          v354 = *(_DWORD *)(Terminal + 12);
          if (!v354)
            v354 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)Terminal);
          goto LABEL_609;
        }
        if (v302 != 2)
        {
LABEL_608:
          v322 = (Terminal + ~(Terminal << 32)) ^ ((Terminal + ~(Terminal << 32)) >> 22);
          v323 = 9 * ((v322 + ~(v322 << 13)) ^ ((v322 + ~(v322 << 13)) >> 8));
          v324 = (v323 ^ (v323 >> 15)) + ~((v323 ^ (v323 >> 15)) << 27);
          v354 = (v324 >> 31) ^ v324;
        }
        else
        {
          v303 = (WTF::StringImpl **)(Terminal + 8);
          if ((*(_BYTE *)(Terminal + 8) & 1) != 0)
            v303 = (WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)Terminal, v368);
          if (*((_DWORD *)v364 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v364) & 1) != 0)
          {
            v305 = -1;
            goto LABEL_536;
          }
          v304 = *((_DWORD *)*v303 + 4);
          if (v304 >= 0x100)
          {
            v305 = v304 >> 8;
LABEL_536:
            v354 = v305;
            goto LABEL_609;
          }
          v354 = WTF::StringImpl::hashSlowCase(*v303);
        }
LABEL_609:
        v325 = v301;
        if (*((_DWORD *)v364 + 20))
        {
          v330 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v364);
          v325 = v301;
          if ((v330 & 1) != 0)
            goto LABEL_307;
        }
        v258 = v325 != v348;
        v100 = Terminal;
        goto LABEL_611;
      }
      if (!(_DWORD)v342)
        goto LABEL_496;
      v269 = 0;
      LODWORD(v270) = v264 + 2;
      v272 = v342;
      v271 = v344;
      v273 = (char *)v344 + 16;
      v274 = v264 - 1;
      v275 = v249 + 4;
      v276 = 2;
      v277 = v366;
      v278 = v351;
      v279 = v340;
      v338 = v274;
      while (1)
      {
        v280 = v277[v275];
        if ((v280 & 0xFFFE000000000002) != 0)
        {
          v270 = (v270 + 2);
          *(_QWORD *)&v273[8 * v270] = v280;
        }
        else
        {
          v287 = *(_QWORD *)(v279 + 184);
          if (!v287)
          {
            v287 = JSC::VM::orderedHashTableDeletedValueSlow(v278);
            v274 = v338;
            v273 = (char *)v344 + 16;
            v279 = v340;
            v272 = v342;
            v271 = v344;
            v277 = v366;
          }
          if (v287 == v280)
          {
            v277[v276++] = v269 | 0xFFFE000000000000;
            goto LABEL_475;
          }
          v270 = (v270 + 2);
          *(_QWORD *)&v273[8 * v270] = v280;
          if (v271 && v280 && *((_DWORD *)v278 + 190) >= *((unsigned __int8 *)v271 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v278 + 192), v344);
            v274 = v338;
            v273 = (char *)v344 + 16;
            v279 = v340;
            v272 = v342;
            v271 = v344;
            v277 = v366;
          }
          v288 = *(unsigned __int8 *)(v280 + 5);
          if (v288 == 3)
          {
            v284 = *(_DWORD *)(v280 + 12);
            if (!v284)
            {
              v291 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v280);
              v274 = v338;
              v273 = (char *)v344 + 16;
              v279 = v340;
              v272 = v342;
              v271 = v344;
              v277 = v366;
              v284 = v291;
            }
            goto LABEL_473;
          }
          if (v288 == 2)
          {
            v289 = (WTF::StringImpl **)(v280 + 8);
            if ((*(_BYTE *)(v280 + 8) & 1) != 0)
              v289 = (WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v280, v368);
            if (*((_DWORD *)v351 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v351) & 1) != 0)
            {
              v284 = -1;
            }
            else
            {
              v290 = *((_DWORD *)*v289 + 4);
              if (v290 < 0x100)
                v284 = WTF::StringImpl::hashSlowCase(*v289);
              else
                v284 = v290 >> 8;
            }
            v277 = v366;
            v272 = v342;
            v271 = v344;
            v278 = v351;
            v273 = (char *)v344 + 16;
            v279 = v340;
            v274 = v338;
            goto LABEL_473;
          }
        }
        v281 = (v280 + ~(v280 << 32)) ^ ((unint64_t)(v280 + ~(v280 << 32)) >> 22);
        v282 = 9 * ((v281 + ~(v281 << 13)) ^ ((v281 + ~(v281 << 13)) >> 8));
        v283 = (v282 ^ (v282 >> 15)) + ~((v282 ^ (v282 >> 15)) << 27);
        v284 = (v283 >> 31) ^ v283;
LABEL_473:
        if (*((_DWORD *)v278 + 20))
        {
          v292 = JSC::VM::hasExceptionsAfterHandlingTraps(v278);
          v274 = v338;
          v273 = (char *)v344 + 16;
          v279 = v340;
          v272 = v342;
          v271 = v344;
          v277 = v366;
          if ((v292 & 1) != 0)
            goto LABEL_495;
        }
        v285 = (v284 & v274) + 4;
        v286 = *(_QWORD *)&v273[8 * v285];
        *(_QWORD *)&v273[8 * v285] = v270 | 0xFFFE000000000000;
        *(_QWORD *)&v273[8 * (v270 + 1)] = v286;
LABEL_475:
        ++v269;
        v275 += 2;
        if (v272 == v269)
          goto LABEL_496;
      }
    }
LABEL_3:
    Terminal = WebCore::CloneDeserializer::readTerminal(this, a2, a3, a4);
    if (!Terminal)
      break;
LABEL_4:
    v5 = v373;
LABEL_5:
    if (!v5)
    {
      v57 = 0;
      goto LABEL_91;
    }
  }
  v73 = v8;
  v74 = (unsigned __int8 *)*((_QWORD *)this + 29);
  if ((unint64_t)v74 >= *((_QWORD *)this + 30))
    goto LABEL_162;
  *((_QWORD *)this + 29) = v74 + 1;
  v75 = *v74;
  if (v75 == 2)
  {
LABEL_128:
    if (v384 > 0x9C40)
    {
      Terminal = 0;
      v57 = 1;
      goto LABEL_91;
    }
    v45 = *(_QWORD *)(*(_QWORD *)this + 56);
    v46 = JSC::StructureCache::emptyObjectStructureForPrototype();
    v47 = 8 * *(unsigned __int8 *)(v46 + 14);
    v48 = JSC::allocateCell<JSC::JSFinalObject>(v45, v47 + 16);
    v49 = *(_DWORD *)(v46 + 8);
    *(_DWORD *)v48 = v46 >> 4;
    *(_DWORD *)(v48 + 4) = v49;
    *(_QWORD *)(v48 + 8) = 0;
    bzero((void *)(v48 + 16), v47);
    if (*(_BYTE *)(v45 + 755))
      __dmb(0xAu);
    v50 = *((unsigned int *)this + 30);
    if ((_DWORD)v50 == *((_DWORD *)this + 31)
      || (v51 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
          v51 != (WebCore::CloneDeserializer *)((char *)this + 144))
      && v51)
    {
      v92.super.isa = (Class)v48;
      if (JSC::MarkedVectorBase::slowAppend((WebCore::CloneDeserializer *)((char *)this + 120), v92) == 1)
      {
        *((_BYTE *)this + 112) = 1;
        goto LABEL_187;
      }
    }
    else
    {
      *((_QWORD *)v51 + v50) = v48;
      *((_DWORD *)this + 30) = v50 + 1;
    }
    if (!*((_BYTE *)this + 112))
    {
      v52.super.isa = (Class)v48;
      JSC::MarkedVector<JSC::JSObject *,32ul,WTF::CrashOnOverflow>::append((JSC::MarkedVectorBase *)&v384, v52);
LABEL_73:
      while (1)
      {
        v396 = 0;
        v397 = 0;
        v394 = 0;
        if ((WebCore::CloneDeserializer::readStringData(this, &v396, &v394, 1) & 1) == 0)
          goto LABEL_88;
        if (v397 >= *((unsigned int *)v396 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x194407030);
        }
        v53 = (WTF::StringImpl *)*((_QWORD *)*v396 + 2 * v397);
        if (v53)
        {
          if ((*((_BYTE *)v53 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v53 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v53 = v395;
          }
        }
        v54 = *(_DWORD *)v53;
        *(_DWORD *)v53 += 2;
        if (v54)
          *(_DWORD *)v53 = v54;
        else
          WTF::StringImpl::destroy(v53, (WTF::StringImpl *)a2);
        v395 = v53;
        v55 = WebCore::CloneDeserializer::readTerminal(this, a2, a3, a4);
        if (v55)
        {
          JSC::JSObject::putDirectMayBeIndex();
        }
        else
        {
          v393 = 8;
          v69 = v373;
          if (v373 == v372)
          {
            WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&i, (unint64_t)&v393);
          }
          else
          {
            *((_DWORD *)i + v373) = 8;
            v373 = v69 + 1;
          }
          v70 = HIDWORD(v388);
          if (HIDWORD(v388) == (_DWORD)v388)
          {
            WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier&>((uint64_t)&v387, (unint64_t)&v395);
          }
          else
          {
            v71 = v387;
            v72 = v395;
            if (v395)
              *(_DWORD *)v395 += 2;
            *((_QWORD *)v71 + v70) = v72;
            HIDWORD(v388) = v70 + 1;
          }
        }
        v56 = v395;
        v395 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v56 -= 2;
        }
        if (!v55)
          goto LABEL_3;
      }
    }
LABEL_187:
    __break(0xC471u);
    JUMPOUT(0x194405420);
  }
  if (v75 != 1)
  {
    if (v75 != 30)
    {
      if (v75 != 29)
        goto LABEL_162;
      if (v384 > 0x9C40)
      {
LABEL_416:
        Terminal = 0;
        v57 = 1;
        goto LABEL_163;
      }
      v167 = *(JSC::JSSet **)(*(_QWORD *)this + 56);
      v168 = *((_QWORD *)this + 27);
      v169 = *(_QWORD *)(v168 + 1552);
      if ((v169 & 1) != 0)
      {
        v320 = *(uint64_t (**)(WTF ***))(v169 & 0xFFFFFFFFFFFFFFFCLL);
        v321 = (WTF ***)(v168 - 16);
        if ((v168 & 8) == 0)
          v321 = (WTF ***)(v168 & 0xFFFFFFFFFFFFC000 | 8);
        v396 = *v321;
        v397 = v168;
        v398 = v168 + 1552;
        v169 = v320(&v396);
      }
      v170 = (objc_class *)JSC::JSSet::create(v167, v169, a3.super.isa);
      v171 = v170;
      v172 = *((unsigned int *)this + 30);
      if ((_DWORD)v172 == *((_DWORD *)this + 31)
        || (v173 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v173 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v173)
      {
        v297.super.isa = v170;
        if (JSC::MarkedVectorBase::slowAppend((WebCore::CloneDeserializer *)((char *)this + 120), v297) == 1)
        {
          *((_BYTE *)this + 112) = 1;
LABEL_516:
          __break(0xC471u);
          JUMPOUT(0x194406AD4);
        }
      }
      else
      {
        *((_QWORD *)v173 + v172) = v170;
        *((_DWORD *)this + 30) = v172 + 1;
      }
      if (*((_BYTE *)this + 112))
        goto LABEL_516;
      v174.super.isa = v171;
      JSC::MarkedVector<JSC::JSObject *,32ul,WTF::CrashOnOverflow>::append((JSC::MarkedVectorBase *)&v384, v174);
      v175 = v375;
      if ((_DWORD)v375 == HIDWORD(v375) || v376 != &v377[1] && v376)
      {
        v176.super.isa = v171;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v375, v176) == 1)
        {
          __break(0xC471u);
          JUMPOUT(0x194405DC0);
        }
      }
      else
      {
        v376[v375] = (uint64_t *)v171;
        LODWORD(v375) = v175 + 1;
      }
      goto LABEL_307;
    }
    if (v384 > 0x9C40)
      goto LABEL_416;
    v139 = *(JSC::JSMap **)(*(_QWORD *)this + 56);
    v140 = *((_QWORD *)this + 27);
    v141 = *(_QWORD *)(v140 + 1520);
    if ((v141 & 1) != 0)
    {
      v316 = *(uint64_t (**)(WTF ***))(v141 & 0xFFFFFFFFFFFFFFFCLL);
      v317 = (WTF ***)(v140 - 16);
      if ((v140 & 8) == 0)
        v317 = (WTF ***)(v140 & 0xFFFFFFFFFFFFC000 | 8);
      v396 = *v317;
      v397 = v140;
      v398 = v140 + 1520;
      v141 = v316(&v396);
    }
    v142 = (objc_class *)JSC::JSMap::create(v139, v141, a3.super.isa);
    v143 = v142;
    v144 = *((unsigned int *)this + 30);
    if ((_DWORD)v144 == *((_DWORD *)this + 31)
      || (v145 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
          v145 != (WebCore::CloneDeserializer *)((char *)this + 144))
      && v145)
    {
      v243.super.isa = v142;
      if (JSC::MarkedVectorBase::slowAppend((WebCore::CloneDeserializer *)((char *)this + 120), v243) == 1)
      {
        *((_BYTE *)this + 112) = 1;
LABEL_431:
        __break(0xC471u);
        JUMPOUT(0x194406514);
      }
    }
    else
    {
      *((_QWORD *)v145 + v144) = v142;
      *((_DWORD *)this + 30) = v144 + 1;
    }
    if (*((_BYTE *)this + 112))
      goto LABEL_431;
    v146.super.isa = v143;
    JSC::MarkedVector<JSC::JSObject *,32ul,WTF::CrashOnOverflow>::append((JSC::MarkedVectorBase *)&v384, v146);
    v147 = v378;
    if ((_DWORD)v378 == HIDWORD(v378) || v379 != (WTF *)&v380[1] && v379)
    {
      v148.super.isa = v143;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v378, v148) == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x194405A28);
      }
    }
    else
    {
      *((_QWORD *)v379 + v378) = v143;
      LODWORD(v378) = v147 + 1;
    }
LABEL_353:
    v11 = (unsigned __int8 *)*((_QWORD *)this + 29);
    v155 = 10;
    if ((unint64_t)v11 < *((_QWORD *)this + 30))
    {
      *((_QWORD *)this + 29) = v11 + 1;
      v12 = *v11++;
      if (v12 == 31)
      {
        LODWORD(v378) = v378 - 1;
        goto LABEL_73;
      }
    }
LABEL_11:
    *((_QWORD *)this + 29) = v11 - 1;
    LODWORD(v396) = v155;
    v13 = v373;
    if (v373 == v372)
    {
LABEL_236:
      WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&i, (unint64_t)&v396);
    }
    else
    {
      *((_DWORD *)i + v373) = v155;
      v373 = v13 + 1;
    }
    goto LABEL_3;
  }
LABEL_146:
  v73 = v8;
  if (*((_BYTE *)this + 8))
    goto LABEL_162;
  v14 = (unsigned int *)*((_QWORD *)this + 29);
  if ((unint64_t)v14 > *((_QWORD *)this + 30) - 4)
    goto LABEL_162;
  v16 = *v14;
  v15 = (JSC::Structure *)*v14;
  *((_QWORD *)this + 29) = v14 + 1;
  v17 = *((_QWORD *)this + 27);
  v18 = *(_QWORD *)(v17 + 56);
  v396 = (WTF **)v18;
  if (v16 >> 27)
    v19 = (int *)(v17 + 912);
  else
    v19 = (int *)(v17 + 896);
  v20 = *v19;
  if (v20)
    v21 = 16 * (v20 & 0xFFFFFFFE);
  else
    v21 = 0;
  if (!*(_DWORD *)(v18 + 80) || (v22 = 0, (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v18) & 1) == 0))
  {
    v22 = (objc_class *)JSC::JSArray::tryCreate((JSC::JSArray *)v18, v21, v15, v15, v9);
    if (!v22)
      JSC::throwOutOfMemoryError();
  }
  if (*(_QWORD *)(v370 + 16))
    goto LABEL_162;
  v23 = *((unsigned int *)this + 30);
  if ((_DWORD)v23 == *((_DWORD *)this + 31)
    || (v24 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
        v24 != (WebCore::CloneDeserializer *)((char *)this + 144))
    && v24)
  {
    v91.super.isa = v22;
    if (JSC::MarkedVectorBase::slowAppend((WebCore::CloneDeserializer *)((char *)this + 120), v91) == 1)
    {
      *((_BYTE *)this + 112) = 1;
LABEL_183:
      __break(0xC471u);
      JUMPOUT(0x1944053E0);
    }
  }
  else
  {
    *((_QWORD *)v24 + v23) = v22;
    *((_DWORD *)this + 30) = v23 + 1;
  }
  if (*((_BYTE *)this + 112))
    goto LABEL_183;
  v25 = v384;
  if ((_DWORD)v384 == HIDWORD(v384) || v385 != (WTF *)&v386[1] && v385)
  {
    v93.super.isa = v22;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v384, v93) == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x194405440);
    }
  }
  else
  {
    *((_QWORD *)v385 + v384) = v22;
    LODWORD(v384) = v25 + 1;
  }
  do
  {
LABEL_31:
    LODWORD(v396) = 0;
    if (*((_BYTE *)this + 8))
      goto LABEL_161;
    v26 = (int *)*((_QWORD *)this + 29);
    v27 = *((_QWORD *)this + 30) - 4;
    if ((unint64_t)v26 > v27)
      goto LABEL_161;
    v28 = *v26;
    LODWORD(v396) = *v26;
    *((_QWORD *)this + 29) = v26 + 1;
    v29 = *((_DWORD *)this + 62);
    if (v29 > 0xE || v29 == 12 && *((_DWORD *)this + 63) == 1)
    {
      if (v28 != -1)
        goto LABEL_35;
      if ((unint64_t)(v26 + 1) > v27)
        goto LABEL_161;
      LODWORD(v396) = v26[1];
      v84 = (int)v396;
      *((_QWORD *)this + 29) = v26 + 2;
      if (v84 == -1)
        goto LABEL_89;
      v85 = v84 == -3;
    }
    else
    {
      if (v28 == -1)
        goto LABEL_89;
      v85 = v28 == -3;
    }
    if (v85)
    {
      v34 = 16;
      continue;
    }
LABEL_35:
    v30 = (objc_class *)WebCore::CloneDeserializer::readTerminal(this, a2, a3, a4);
    if (v30)
    {
      v31.super.isa = v30;
      v32 = *((_QWORD *)v385 + (v384 - 1));
      v33 = *(_BYTE *)(v32 + 4) & 0x1F;
      if (v33 - 4 >= 0xA)
      {
        v86 = v33 > 3 || v33 == 2;
        if (v86 && (*(_BYTE *)(v32 + 4) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1944062A0);
        }
      }
      else if (*(_DWORD *)(*(_QWORD *)(v32 + 8) - 4) > v396)
      {
        JSC::JSObject::setIndexQuickly(v32, *(_DWORD **)(*(_QWORD *)this + 56), v396, v31);
LABEL_39:
        v34 = 11;
        continue;
      }
      JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
      goto LABEL_39;
    }
    if (*((_BYTE *)this + 8))
      goto LABEL_161;
    if (HIDWORD(v391) == (_DWORD)v391)
    {
      WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v390, (unint64_t)&v396);
    }
    else
    {
      *((_DWORD *)v390 + HIDWORD(v391)) = (_DWORD)v396;
      ++HIDWORD(v391);
    }
    LODWORD(v395) = 3;
    v79 = v373;
    if (v373 == v372)
    {
      WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&i, (unint64_t)&v395);
    }
    else
    {
      *((_DWORD *)i + v373) = 3;
      v373 = v79 + 1;
    }
    v34 = 17;
  }
  while (v34 == 11);
  if (v34 == 17)
    goto LABEL_3;
LABEL_42:
  while (1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)this + 56);
    v396 = 0;
    v397 = 0;
    v394 = 0;
    if ((WebCore::CloneDeserializer::readStringData(this, &v396, &v394, 1) & 1) == 0)
      break;
    if (v397 >= *((unsigned int *)v396 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x194406FF0);
    }
    v36 = v35 + 41912;
    v37 = (WTF::StringImpl *)*((_QWORD *)*v396 + 2 * v397);
    if (v37)
    {
      if ((*((_BYTE *)v37 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v37 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v37 = v395;
      }
    }
    v38 = *(_DWORD *)v37;
    *(_DWORD *)v37 += 2;
    if (v38)
      *(_DWORD *)v37 = v38;
    else
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
    v395 = v37;
    if (v37 == *(WTF::StringImpl **)(*(_QWORD *)(v36 + 40) + 1768))
    {
      __break(0xC471u);
      JUMPOUT(0x194405340);
    }
    v39 = WebCore::CloneDeserializer::readTerminal(this, a2, a3, a4);
    if (v39)
    {
      JSC::JSObject::putDirectMayBeIndex();
    }
    else
    {
      v393 = 5;
      v41 = v373;
      if (v373 == v372)
      {
        WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&i, (unint64_t)&v393);
      }
      else
      {
        *((_DWORD *)i + v373) = 5;
        v373 = v41 + 1;
      }
      v42 = HIDWORD(v388);
      if (HIDWORD(v388) == (_DWORD)v388)
      {
        WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier&>((uint64_t)&v387, (unint64_t)&v395);
      }
      else
      {
        v43 = v387;
        v44 = v395;
        if (v395)
          *(_DWORD *)v395 += 2;
        *((_QWORD *)v43 + v42) = v44;
        HIDWORD(v388) = v42 + 1;
      }
    }
    v40 = v395;
    v395 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (!v39)
      goto LABEL_3;
  }
LABEL_88:
  if (v394)
  {
LABEL_89:
    Terminal = *((_QWORD *)v385 + (v384 - 1));
    LODWORD(v384) = v384 - 1;
    goto LABEL_4;
  }
LABEL_161:
  v73 = v8;
LABEL_162:
  Terminal = 0;
  *((_BYTE *)this + 8) = 1;
  v57 = 3;
LABEL_163:
  v8 = v73;
LABEL_91:
  v58 = i;
  if (v374 != (_BYTE *)i && i != 0)
  {
    i = 0;
    v372 = 0;
    v166 = v57;
    WTF::fastFree(v58, a2);
    v57 = v166;
  }
  v60 = v377[0];
  if (v377[0])
  {
    i = (WTF *)&v375;
    v158 = v57;
    v159 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v377[0], (uint64_t *)&i);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v60, v159);
    v57 = v158;
  }
  if (v376 != &v377[1] && v376)
  {
    v87 = v57;
    WTF::fastFree((WTF *)v376, a2);
    v57 = v87;
  }
  v61 = v380[0];
  if (v380[0])
  {
    i = (WTF *)&v378;
    v160 = v57;
    v161 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v380[0], (uint64_t *)&i);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v61, v161);
    v57 = v160;
  }
  if (v379 != (WTF *)&v380[1] && v379)
  {
    v88 = v57;
    WTF::fastFree(v379, a2);
    v57 = v88;
  }
  v62 = v383[0];
  if (v383[0])
  {
    i = (WTF *)&v381;
    v162 = v57;
    v163 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v383[0], (uint64_t *)&i);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v62, v163);
    v57 = v162;
  }
  if (v382 != &v383[1] && v382)
  {
    v89 = v57;
    WTF::fastFree((WTF *)v382, a2);
    v57 = v89;
  }
  v63 = v386[0];
  if (v386[0])
  {
    i = (WTF *)&v384;
    v164 = v57;
    v165 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v386[0], (uint64_t *)&i);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v63, v165);
    v57 = v164;
  }
  if (v385 != (WTF *)&v386[1] && v385)
  {
    v90 = v57;
    WTF::fastFree(v385, a2);
    v57 = v90;
  }
  v64 = v387;
  if (HIDWORD(v388))
  {
    v94 = 8 * HIDWORD(v388);
    do
    {
      v95 = *(WTF::StringImpl **)v64;
      *(_QWORD *)v64 = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
        {
          v96 = v57;
          WTF::StringImpl::destroy(v95, (WTF::StringImpl *)a2);
          v57 = v96;
        }
        else
        {
          *(_DWORD *)v95 -= 2;
        }
      }
      v64 = (WTF *)((char *)v64 + 8);
      v94 -= 8;
    }
    while (v94);
    v64 = v387;
  }
  if (v389 != (_BYTE *)v64 && v64 != 0)
  {
    v387 = 0;
    LODWORD(v388) = 0;
    WTF::fastFree(v64, a2);
  }
  v66 = v390;
  if (v8 != v390 && v390 != 0)
  {
    v390 = 0;
    LODWORD(v391) = 0;
    WTF::fastFree(v66, a2);
  }
  return Terminal;
}

uint64_t WebCore::CloneDeserializer::readTerminal(WebCore::CloneDeserializer *this, void *a2, JSValue a3, JSC::ArrayBuffer *a4)
{
  unint64_t SlowCase;
  unint64_t v7;
  unsigned int *v8;
  unsigned int **v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _DWORD *v27;
  WebCore::MediaStreamTrackDataHolder *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::OffscreenCanvas *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  unsigned int *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  WTF *v68;
  _DWORD **v69;
  _QWORD *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  JSC::BooleanObject *v77;
  unint64_t v78;
  JSC::MarkedVectorBase *v79;
  uint64_t v80;
  WebCore::CloneDeserializer *v81;
  double v82;
  uint64_t v83;
  JSC::JSGlobalObject *v84;
  JSC::MarkedVectorBase *v85;
  uint64_t v86;
  WebCore::CloneDeserializer *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  JSC::JSGlobalObject *v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  signed int v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  WTF **v109;
  WebCore::JSDOMGlobalObject *v110;
  uint64_t v111;
  BOOL v112;
  char **v113;
  BOOL v114;
  const WTF::StringImpl *v116;
  JSC::BooleanObject *v117;
  unint64_t v118;
  JSC::MarkedVectorBase *v119;
  uint64_t v120;
  WebCore::CloneDeserializer *v121;
  double v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t Terminal;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  uint64_t v143;
  void *v144;
  unint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  JSC::MarkedVectorBase *v151;
  uint64_t v152;
  WebCore::CloneDeserializer *v153;
  JSC::MarkedVectorBase *v154;
  uint64_t v155;
  WebCore::CloneDeserializer *v156;
  _QWORD *v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double *v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  WTF *v176;
  WTF *v177;
  double v178;
  unsigned int *v179;
  uint64_t v180;
  int v181;
  _DWORD *v182;
  WTF::StringImpl *v183;
  int v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  WTF::StringImpl **v188;
  WTF::StringImpl **v189;
  _QWORD *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  WebCore::ScriptExecutionContext *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  _DWORD *v210;
  WTF *v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _DWORD *v218;
  WTF *v219;
  int v220;
  int v221;
  char File;
  _DWORD *v223;
  uint64_t v224;
  char *v225;
  _QWORD *v226;
  uint64_t v227;
  _DWORD *v228;
  uint64_t v229;
  CFTypeRef v230;
  unsigned int v231;
  unsigned int v232;
  signed int v233;
  char *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD *v243;
  WTF **v244;
  WebCore::JSDOMGlobalObject *v245;
  uint64_t v246;
  BOOL v247;
  char **v248;
  BOOL v249;
  const WTF::StringImpl *v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  CFTypeRef v256;
  WTF::DeferrableRefCountedBase *v257;
  WTF::DeferrableRefCountedBase *v258;
  WebCore::JSDOMGlobalObject *v259;
  WTF::DeferrableRefCountedBase *v260;
  double v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  JSC::ArrayBuffer *v268;
  JSC::MarkedVectorBase *v269;
  uint64_t v270;
  WebCore::CloneDeserializer *v271;
  WTF::DeferrableRefCountedBase *v272;
  size_t v273;
  char *v274;
  unsigned int v275;
  uint64_t v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  WebCore::CryptoKey *v279;
  const void *v280;
  JSC::JSGlobalObject *v281;
  uint64_t v282;
  uint64_t v283;
  BOOL v284;
  char **v285;
  uint64_t v286;
  BOOL v288;
  unsigned int v289;
  WTF *v290;
  WTF *v291;
  unsigned __int8 *v292;
  int *v293;
  unint64_t v294;
  unint64_t v295;
  unsigned int v296;
  _DWORD *v297;
  unsigned int v298;
  BOOL v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  uint64_t v303;
  WebCore::ScriptExecutionContext *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _DWORD *v309;
  WTF *v310;
  unint64_t v311;
  double v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  WTF *v322;
  size_t v323;
  void *v324;
  void *v325;
  WTF *v326;
  uint64_t v327;
  uint64_t v328;
  _DWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  size_t v335;
  uint64_t v336;
  void *v337;
  void *v338;
  bmalloc::api *v339;
  int v340;
  unint64_t v341;
  double v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  double *v347;
  double v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t (*v351)();
  JSC::MarkedVectorBase *v352;
  uint64_t v353;
  WebCore::CloneDeserializer *v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  WebCore::ScriptExecutionContext *v360;
  WTF::StringImpl **v361;
  void *v362;
  uint64_t v363;
  CFTypeRef v364;
  WebCore::RTCDataChannel *v365;
  WebCore::RTCDataChannel *v366;
  WTF::StringImpl *v367;
  WTF::StringImpl *v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  WTF *v378;
  WTF *v379;
  __int16 v380;
  double v381;
  uint64_t (*v382)();
  JSC::MarkedVectorBase *v383;
  uint64_t v384;
  WebCore::CloneDeserializer *v385;
  uint64_t v386;
  size_t v387;
  unsigned int *v388;
  _BYTE *v389;
  int v390;
  JSC::MarkedVectorBase *v391;
  uint64_t v392;
  WebCore::CloneDeserializer *v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  uint64_t v396;
  _DWORD *v397;
  char *v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  char v406;
  signed int v407;
  unsigned int v408;
  _DWORD *v409;
  _DWORD *v410;
  WTF::StringImpl *v411;
  char v412;
  WTF::StringImpl *v413;
  unsigned int *v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  unint64_t v418;
  uint64_t v419;
  unsigned int *v420;
  unsigned int v421;
  unsigned int *v422;
  unsigned int v423;
  unsigned int v424;
  WTF::StringImpl *v425;
  char v426;
  WTF::StringImpl *v427;
  unsigned int *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int v437;
  _QWORD *v438;
  CFTypeRef v439;
  uint64_t v440;
  unsigned int *v441;
  unsigned int v442;
  unsigned int v443;
  WTF::StringImpl *v444;
  int v445;
  uint64_t v446;
  __int128 v447;
  WebCore::ScriptExecutionContext *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450;
  const WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  const WTF::StringImpl **v456;
  int v457;
  unint64_t v458;
  WTF::StringImpl *v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unint64_t v463;
  int v464;
  WTF::String *v465;
  _DWORD *v466;
  int v467;
  uint64_t v468;
  WTF::StringImpl *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  void *v478;
  WTF *v479;
  size_t v480;
  void *v481;
  void *v482;
  WTF *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  WTF *v487;
  void *v488;
  WTF *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  void *v498;
  WTF *v499;
  size_t v500;
  void *v501;
  void *v502;
  WTF *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  WTF *v507;
  void *v508;
  WTF *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  WTF::StringImpl *v513;
  uint64_t v514;
  WebCore::RTCCertificate *v515;
  int v516;
  char v517;
  int v518;
  unsigned __int8 *v519;
  int v520;
  int v521;
  char *v522;
  unsigned __int8 *v523;
  BOOL v524;
  int v525;
  unint64_t v526;
  WTF *v527;
  WTF::StringImpl *v528;
  unsigned int v529;
  WTF *v530;
  void *v531;
  uint64_t v532;
  _DWORD **v533;
  uint64_t v534;
  _DWORD *v535;
  WTF *v536;
  WTF::StringImpl *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  size_t v545;
  int v546;
  uint64_t v547;
  WTF::StringImpl **v548;
  WTF::StringImpl *v549;
  WTF::StringImpl *v550;
  bmalloc::api *v551;
  void *v552;
  uint64_t v553;
  unsigned int v554;
  unsigned int v555;
  bmalloc::api *v556;
  void *v557;
  uint64_t v558;
  unsigned int v559;
  unsigned int v560;
  unsigned __int8 *v561;
  size_t v562;
  char *v563;
  uint64_t v564;
  void *v565;
  char *v566;
  WTF *v567;
  bmalloc::api *v568;
  void *v569;
  uint64_t v570;
  uint64_t v571;
  CFIndex v573;
  const __CFData *v574;
  const __CFData *v575;
  const __CFString *v576;
  const __CFString *v577;
  CGColorSpaceRef v578;
  CGColorSpaceRef v579;
  const void *v580;
  unint64_t v581;
  CFIndex v582;
  const __CFData *v583;
  const __CFString *v584;
  unint64_t v585;
  unsigned int *v586;
  uint64_t v587;
  unsigned int v588;
  JSC::JSGlobalObject *v589;
  WTF::DeferrableRefCountedBase *v590;
  float v591;
  uint64_t v592;
  WTF **v593;
  void *v594;
  _DWORD *v595;
  WTF **v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  BOOL v600;
  unint64_t v601;
  BOOL v602;
  _DWORD *v603;
  CFTypeRef v604;
  WTF **v605;
  WTF *v606;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  BOOL v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  BOOL v616;
  int v617;
  void *v618;
  uint64_t v619;
  uint64_t v620;
  JSValue v622;
  JSValue v623;
  JSValue v624;
  JSValue v625;
  WTF *v626;
  void *v627;
  JSValue v628;
  JSValue v629;
  JSValue v630;
  JSValue v631;
  unint64_t v632;
  char v633;
  size_t v634;
  WTF::StringImpl *v635;
  uint64_t v636;
  void *v637;
  WTF **v638;
  unsigned int *v639;
  unsigned int v640;
  char v641;
  unsigned __int8 *v642;
  unint64_t v643;
  char v644;
  unsigned __int8 *v645;
  unsigned int v646;
  unsigned int v647;
  unsigned int v648;
  uint64_t v649;
  unsigned int v650;
  char v651;
  size_t v652;
  char *v653;
  uint64_t v654;
  void *v655;
  uint64_t v656;
  unsigned int v657;
  _BOOL4 v658;
  size_t v659;
  char *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  JSValue v665;
  uint64_t (*v666)(CFTypeRef *);
  CFTypeRef *v667;
  uint64_t (*v668)(CFTypeRef *);
  CFTypeRef *v669;
  void (*v670)(CFTypeRef *);
  CFTypeRef *v671;
  unint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t v683;
  _DWORD *v684;
  BOOL v685;
  JSC::MarkedVectorBase *v686;
  uint64_t v687;
  WebCore::CloneDeserializer *v688;
  WTF::DeferrableRefCountedBase *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  BOOL v693;
  int v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  BOOL v698;
  int v699;
  void (*v700)(CFTypeRef *);
  CFTypeRef *v701;
  int v702;
  unsigned __int8 *v703;
  unint64_t v704;
  unint64_t v705;
  char v706;
  WTF::StringImpl *v707;
  unint64_t v708;
  unsigned int v709;
  size_t v710;
  WTF::StringImpl *v711;
  uint64_t v712;
  void *v713;
  _QWORD *v714;
  uint64_t v715;
  void (*v716)(CFTypeRef *);
  CFTypeRef *v717;
  _QWORD *v718;
  uint64_t v719;
  WTF *v720;
  void *v721;
  WTF *v722;
  const void *v723;
  JSValue v724;
  WebCore::OffscreenCanvas **v725;
  uint64_t v726;
  WebCore::OffscreenCanvas *v727;
  bmalloc::api *v728;
  void *v729;
  uint64_t v730;
  WTF *v731;
  WTF *v732;
  uint64_t v733;
  uint64_t *v734;
  uint64_t v735;
  uint64_t *v736;
  uint64_t v737;
  _QWORD *v738;
  uint64_t v739;
  unsigned int v740;
  int v741;
  unsigned int v742;
  size_t v743;
  char *v744;
  uint64_t v745;
  WTF **v746;
  char *v747;
  WTF::StringImpl *v748;
  size_t v749;
  unsigned int v750;
  uint64_t v751;
  WTF **v752;
  unsigned int *v753;
  unsigned __int8 *v754;
  size_t v755;
  WTF::StringImpl *v756;
  unsigned int v757;
  char v758;
  uint64_t v759;
  void *v760;
  void *v761;
  void *v762;
  uint64_t v763;
  _DWORD *v764;
  void *v765;
  _DWORD *v766;
  WTF::StringImpl *v767;
  unsigned int v768;
  uint64_t v769;
  void *v770;
  void *v771;
  void *v772;
  void *v773;
  uint64_t v774;
  uint64_t v775;
  WTF *v776;
  uint64_t v777;
  char *v778;
  size_t v779;
  WTF::StringImpl *v780;
  unsigned int v781;
  uint64_t v782;
  void *v783;
  _DWORD *v784;
  WTF::StringImpl *v785;
  size_t v786;
  unsigned int v787;
  uint64_t v788;
  void *v789;
  _DWORD *v790;
  WTF::StringImpl *v791;
  size_t v792;
  unsigned int v793;
  uint64_t v794;
  void *v795;
  _DWORD *v796;
  WTF::StringImpl *v797;
  size_t v798;
  unsigned int v799;
  uint64_t v800;
  void *v801;
  _DWORD *v802;
  WTF::StringImpl *v803;
  size_t v804;
  unsigned int v805;
  uint64_t v806;
  char *v807;
  WTF *v808;
  WTF *v809;
  WTF *v810;
  unsigned int *v811;
  unsigned int v812;
  uint64_t v813;
  uint64_t v814;
  void *v815;
  _DWORD *v816;
  unsigned int v817;
  WTF::StringImpl *v818;
  size_t v819;
  unsigned int v820;
  char *v821;
  size_t v822;
  unint64_t v823;
  unint64_t v824;
  _DWORD *v825;
  WTF::StringImpl *v826;
  size_t v827;
  unsigned int v828;
  char *v829;
  size_t v830;
  unint64_t v831;
  unint64_t v832;
  _DWORD *v833;
  WTF::StringImpl *v834;
  size_t v835;
  unsigned int v836;
  char *v837;
  size_t v838;
  unint64_t v839;
  unint64_t v840;
  unint64_t v841;
  unint64_t v842;
  WTF *v843;
  WTF *v844;
  void *v845;
  WTF *v846;
  size_t v847;
  void *v848;
  WTF *v849;
  unint64_t v850;
  unint64_t v851;
  WTF *v852;
  WTF *v853;
  void *v854;
  WTF *v855;
  size_t v856;
  void *v857;
  WTF *v858;
  unint64_t v859;
  unint64_t v860;
  WTF *v861;
  WTF *v862;
  void *v863;
  WTF *v864;
  size_t v865;
  void *v866;
  WTF *v867;
  _QWORD *v868;
  CFTypeRef v869;
  uint64_t v870;
  char *v871;
  void *v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  WTF *v876;
  void *v877;
  _DWORD *v878;
  _DWORD *v879;
  WTF::StringImpl *v880;
  uint64_t v881[2];
  WTF *v882;
  WTF *v883;
  void *v884;
  void *v885;
  size_t v886;
  WTF *v887;
  void *__src;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  CFTypeRef v892[2];
  __int128 v893;
  _BYTE v894[24];
  __int128 v895;
  __int128 v896;
  _BYTE v897[25];
  uint64_t v898;
  _BYTE *v899;
  _BYTE v900[64];
  uint64_t v901;
  uint64_t v902;
  JSC::JSGlobalObject *v903;
  BOOL v904;
  BOOL v905;
  WTF::StringImpl *v906;
  unsigned __int8 *v907;
  uint64_t v908;
  __int128 v909;
  __int128 v910;
  WTF **v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  uint64_t v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 *v920;
  __int128 *p_cf;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  WTF *v937;
  uint64_t v938;
  WTF::StringImpl *v939;
  uint64_t v940;
  char v941;
  WTF::StringImpl *v942;
  uint64_t v943;
  WTF **v944;
  char *v945;
  unsigned int v946;
  int v947;
  __int128 cf;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  __int128 v953;
  _DWORD *v954;
  WTF::StringImpl *v955;
  WTF **v956;
  unint64_t v957;
  WTF **v958;
  unint64_t v959;

  if ((unint64_t)v881 < *((_QWORD *)this + 26))
    return 0;
  v8 = (unsigned int *)*((_QWORD *)this + 29);
  v7 = *((_QWORD *)this + 30);
  v9 = (unsigned int **)((char *)this + 232);
  if ((unint64_t)v8 >= v7)
  {
    v10 = 255;
  }
  else
  {
    *v9 = (unsigned int *)((char *)v8 + 1);
    v10 = *(unsigned __int8 *)v8;
    v8 = (unsigned int *)((char *)v8 + 1);
  }
  v11 = *((_QWORD *)this + 27);
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSAudioWorkletGlobalScope::s_info && v14 != 0);
  }
  if (v13 && (v10 > 0x37 || ((1 << v10) & 0xC3800DFFFF0FFELL) == 0) && v10 != 255)
  {
LABEL_963:
    SlowCase = 0;
    *((_BYTE *)this + 8) = 1;
    return SlowCase;
  }
  SlowCase = 10;
  switch(v10)
  {
    case 3u:
      return SlowCase;
    case 4u:
      return 2;
    case 5u:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v123 = *v8;
      *v9 = v8 + 1;
      return v123 | 0xFFFE000000000000;
    case 6u:
      return 0xFFFE000000000000;
    case 7u:
      return 0xFFFE000000000001;
    case 8u:
      return 6;
    case 9u:
      return 7;
    case 0xAu:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 8)
        goto LABEL_963;
      v122 = *(double *)v8;
      *v9 = v8 + 2;
      if ((*(_QWORD *)&v122 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v123 = (int)v122, v122 == (double)(int)v123)
        && ((_DWORD)v123 || (*(_QWORD *)&v122 & 0x8000000000000000) == 0))
      {
        return v123 | 0xFFFE000000000000;
      }
      else
      {
        return *(_QWORD *)&v122 + 0x2000000000000;
      }
    case 0xBu:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 8)
        goto LABEL_963;
      *v9 = v8 + 2;
      v157 = *(_QWORD **)(*(_QWORD *)this + 56);
      v158 = v157 + 4753;
      v159 = *(_QWORD *)(v11 + 1488);
      if ((v159 & 1) != 0)
      {
        v670 = *(void (**)(CFTypeRef *))(v159 & 0xFFFFFFFFFFFFFFFCLL);
        v671 = (CFTypeRef *)(v11 - 16);
        if ((v11 & 8) == 0)
          v671 = (CFTypeRef *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
        v892[0] = *v671;
        v892[1] = (CFTypeRef)v11;
        *(_QWORD *)&v893 = v11 + 1488;
        v670(v892);
      }
      SlowCase = *v158;
      if (*v158 < v157[4754])
        goto LABEL_223;
      SlowCase = v157[4755];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v672 = *(_QWORD *)(SlowCase + 8) ^ v157[4756];
        v157[4754] = SlowCase + HIDWORD(v672);
        v157[4755] = SlowCase + (int)v672;
LABEL_223:
        *v158 = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      JSC::DateInstance::DateInstance();
      JSC::DateInstance::finishCreation();
      return SlowCase;
    case 0xCu:
      v892[0] = 0;
      if ((WebCore::CloneDeserializer::readFile((uint64_t)this, (uint64_t *)v892) & 1) != 0)
      {
        v71 = v892[0];
        if (*((_BYTE *)this + 225))
        {
          if (!v892[0])
            return 2;
          SlowCase = WebCore::wrap<WebCore::File>(*(_QWORD *)this, *((_QWORD *)this + 27), (uint64_t)v892[0]);
          goto LABEL_637;
        }
        SlowCase = 2;
      }
      else
      {
        SlowCase = 0;
        v71 = v892[0];
      }
      if (!v71)
        return SlowCase;
LABEL_637:
      if (v71[4] == 1)
        goto LABEL_733;
      --v71[4];
      return SlowCase;
    case 0xDu:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v221 = *v8;
      v220 = *v8;
      *v9 = v8 + 1;
      v892[0] = 0;
      v892[1] = 0;
      if (!v221)
        goto LABEL_352;
      while (1)
      {
        *(_QWORD *)&v951 = 0;
        File = WebCore::CloneDeserializer::readFile((uint64_t)this, (uint64_t *)&v951);
        if ((File & 1) != 0)
        {
          v223 = (_DWORD *)v951;
          if (*((_BYTE *)this + 225))
          {
            *(_QWORD *)&cf = v951;
            LODWORD(v224) = HIDWORD(v892[1]);
            if (HIDWORD(v892[1]) == LODWORD(v892[1]))
            {
              v225 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v892, HIDWORD(v892[1]) + 1, (unint64_t)&cf);
              v224 = HIDWORD(v892[1]);
              v226 = v892[0];
              v227 = *(_QWORD *)v225;
              *(_QWORD *)v225 = 0;
              v226[v224] = v227;
            }
            else
            {
              *(_QWORD *)&cf = 0;
              *((_QWORD *)v892[0] + HIDWORD(v892[1])) = v951;
            }
            HIDWORD(v892[1]) = v224 + 1;
            v228 = (_DWORD *)cf;
            *(_QWORD *)&cf = 0;
            if (v228)
            {
              if (v228[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v228 + 8))(v228);
              else
                --v228[4];
            }
            goto LABEL_351;
          }
        }
        else
        {
          v223 = (_DWORD *)v951;
        }
        if (v223)
        {
          if (v223[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v223 + 8))(v223);
            if ((File & 1) == 0)
            {
LABEL_596:
              SlowCase = 0;
              goto LABEL_597;
            }
            goto LABEL_351;
          }
          --v223[4];
        }
        if ((File & 1) == 0)
          goto LABEL_596;
LABEL_351:
        if (!--v220)
        {
LABEL_352:
          if (*((_BYTE *)this + 225))
          {
            v229 = bmalloc::api::isoAllocate();
            *(_QWORD *)v229 = 0;
            *(_DWORD *)(v229 + 8) = 1;
            *(CFTypeRef *)(v229 + 16) = v892[0];
            v230 = v892[1];
            v892[0] = 0;
            v892[1] = 0;
            *(_QWORD *)(v229 + 24) = v230;
            SlowCase = WebCore::wrap<WebCore::FileList>(*(_QWORD *)this, *((_QWORD *)this + 27), (WTF *)v229);
            if (*(_DWORD *)(v229 + 8) == 1)
            {
              v532 = *(unsigned int *)(v229 + 28);
              if ((_DWORD)v532)
              {
                v533 = *(_DWORD ***)(v229 + 16);
                v534 = 8 * v532;
                do
                {
                  v535 = *v533;
                  *v533 = 0;
                  if (v535)
                  {
                    if (v535[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v535 + 8))(v535);
                    else
                      --v535[4];
                  }
                  ++v533;
                  v534 -= 8;
                }
                while (v534);
              }
              v536 = *(WTF **)(v229 + 16);
              if (v536)
              {
                *(_QWORD *)(v229 + 16) = 0;
                *(_DWORD *)(v229 + 24) = 0;
                WTF::fastFree(v536, a2);
              }
              if (*(_QWORD *)v229)
              {
                *(_QWORD *)(*(_QWORD *)v229 + 8) = 3;
                *(_QWORD *)v229 = 0;
              }
              bmalloc::api::isoDeallocate((bmalloc::api *)v229, a2);
            }
            else
            {
              --*(_DWORD *)(v229 + 8);
            }
          }
          else
          {
            SlowCase = 2;
          }
LABEL_597:
          v395 = (WTF::StringImpl *)v892[0];
          if (HIDWORD(v892[1]))
          {
            v396 = 8 * HIDWORD(v892[1]);
            do
            {
              v397 = *(_DWORD **)v395;
              *(_QWORD *)v395 = 0;
              if (v397)
              {
                if (v397[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v397 + 8))(v397);
                else
                  --v397[4];
              }
              v395 = (WTF::StringImpl *)((char *)v395 + 8);
              v396 -= 8;
            }
            while (v396);
            v395 = (WTF::StringImpl *)v892[0];
          }
          if (v395)
          {
            v892[0] = 0;
            LODWORD(v892[1]) = 0;
            v394 = v395;
            goto LABEL_607;
          }
          return SlowCase;
        }
      }
    case 0xEu:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v103 = v7 - 4;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v105 = (unint64_t)(v8 + 1);
      v104 = *v8;
      *v9 = v8 + 1;
      if (v104 == -2)
      {
        v106 = *((_DWORD *)this + 71);
        if (v106 > 0xFF)
        {
          if (HIWORD(v106))
          {
            if (v105 > v103)
              goto LABEL_963;
            v108 = v8[1];
            *v9 = v8 + 2;
            v107 = v108 & 0xFFFFFF00;
          }
          else
          {
            if (v105 > v7 - 2)
              goto LABEL_963;
            LOWORD(v108) = *((_WORD *)v8 + 2);
            *v9 = (unsigned int *)((char *)v8 + 6);
            v107 = v108 & 0xFF00;
          }
        }
        else
        {
          if (v105 > v7 - 1)
            goto LABEL_963;
          v107 = 0;
          *v9 = (unsigned int *)((char *)v8 + 5);
          LOBYTE(v108) = *((_BYTE *)v8 + 4);
        }
        v460 = v107 | v108;
        if (v106 > v460)
          return WebCore::wrap<WebCore::ImageData>(*(JSC::JSGlobalObject **)this, v11, *(WTF **)(*((_QWORD *)this + 34) + 8 * v460));
        goto LABEL_963;
      }
      if (v105 > v103)
        goto LABEL_963;
      v386 = v8[1];
      *v9 = v8 + 2;
      if ((unint64_t)(v8 + 2) > v103)
        goto LABEL_963;
      v387 = v8[2];
      v388 = v8 + 3;
      *v9 = v8 + 3;
      if (v387 > (int)v7 - ((int)v8 + 12))
        goto LABEL_963;
      v389 = (char *)v388 + v387;
      *((_QWORD *)this + 29) = (char *)v388 + v387;
      if (*((_DWORD *)this + 62) < 8u)
      {
        LOBYTE(v390) = 0;
      }
      else
      {
        if ((unint64_t)v389 > v7 - 1)
          goto LABEL_963;
        *v9 = (unsigned int *)(v389 + 1);
        v390 = *v389;
        if (*v389 && v390 != 1)
          return 0;
      }
      if ((_DWORD)v387)
      {
        v461 = v104 >= 0 ? v104 : -v104;
        v462 = (int)v386 >= 0 ? v386 : -(int)v386;
        v463 = v462 * (unint64_t)v461;
        if ((v463 & 0xFFFFFFFF00000000) != 0 || v463 >> 30 || 4 * (_DWORD)v463 != (_DWORD)v387)
          goto LABEL_963;
      }
      if (!*((_BYTE *)this + 224))
        return 2;
      WebCore::ImageData::createUninitialized(v104, v386, v390, 0, (uint64_t)v892);
      v464 = v893;
      if ((_DWORD)v893)
      {
        SlowCase = 0;
        *((_BYTE *)this + 8) = 1;
        goto LABEL_1511;
      }
      v538 = *((_QWORD *)v892[0] + 2);
      if (!(_DWORD)v387)
      {
        JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::zeroFill(v538);
        goto LABEL_1501;
      }
      v539 = *(_QWORD *)(v538 + 32);
      if (!v539)
        goto LABEL_1430;
      v540 = *(_QWORD *)(v539 + 16);
      if (!v540)
        goto LABEL_1430;
      v541 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v541 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
      {
        if ((v540 & 0x3FFFFFFFFLL) + v541)
        {
          v542 = *(_QWORD *)(v538 + 24);
          if (v542)
          {
            if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
              goto LABEL_1524;
            goto LABEL_845;
          }
        }
        else
        {
LABEL_1430:
          v542 = 0;
        }
      }
      else
      {
        v542 = *(_QWORD *)(v538 + 24);
      }
      while (1)
      {
        memcpy((void *)v542, v8 + 3, v387);
LABEL_1501:
        if (!(_DWORD)v893)
        {
          v869 = v892[0];
          ++*(_DWORD *)v892[0];
          *(_QWORD *)&v951 = v869;
          v870 = *((unsigned int *)this + 71);
          if ((_DWORD)v870 == *((_DWORD *)this + 70))
          {
            v871 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 34, v870 + 1, (unint64_t)&v951);
            v873 = *((unsigned int *)this + 71);
            v874 = *((_QWORD *)this + 34);
            v875 = *(_QWORD *)v871;
            *(_QWORD *)v871 = 0;
            *(_QWORD *)(v874 + 8 * v873) = v875;
            v387 = v951;
            *((_DWORD *)this + 71) = v873 + 1;
            *(_QWORD *)&v951 = 0;
            if (v387)
            {
              if (*(_DWORD *)v387 == 1)
              {
                v879 = *(_DWORD **)(v387 + 16);
                *(_QWORD *)(v387 + 16) = 0;
                if (v879)
                {
                  if (*v879 == 1)
                    JSC::ArrayBufferView::operator delete();
                  else
                    --*v879;
                }
                WTF::fastFree((WTF *)v387, v872);
              }
              else
              {
                --*(_DWORD *)v387;
              }
            }
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)this + 34) + 8 * v870) = v869;
            *((_DWORD *)this + 71) = v870 + 1;
          }
          if (!(_DWORD)v893)
            break;
        }
        v542 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_1524:
        if (!*MEMORY[0x1E0CC10F0])
LABEL_845:
          v542 = (v542 & 0x3FFFFFFFFLL) + v541;
      }
      v876 = (WTF *)v892[0];
      v892[0] = 0;
      SlowCase = WebCore::wrap<WebCore::ImageData>(*(JSC::JSGlobalObject **)this, *((_QWORD *)this + 27), v876);
      if (*(_DWORD *)v876 == 1)
      {
        v878 = (_DWORD *)*((_QWORD *)v876 + 2);
        *((_QWORD *)v876 + 2) = 0;
        if (v878)
        {
          if (*v878 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v878;
        }
        WTF::fastFree(v876, v877);
      }
      else
      {
        --*(_DWORD *)v876;
      }
      v464 = v893;
LABEL_1511:
      if (v464 != -1)
        ((void (*)(__int128 *, CFTypeRef *))off_1E3393E40[v464])(&v951, v892);
      return SlowCase;
    case 0xFu:
      v951 = 0uLL;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)&v951, v892, 0))
        return SlowCase;
      cf = 0uLL;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)&cf, v892, 0))
        return SlowCase;
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v99 = (uint64_t *)*((_QWORD *)this + 29);
      v100 = *((_QWORD *)this + 30) - 8;
      if ((unint64_t)v99 > v100)
        goto LABEL_963;
      v101 = *v99;
      *((_QWORD *)this + 29) = v99 + 1;
      if (*((_DWORD *)this + 62) < 0xBu)
      {
        v102 = 0;
      }
      else
      {
        if ((unint64_t)(v99 + 1) > v100)
          goto LABEL_963;
        v102 = v99[1];
        *v9 = (unsigned int *)(v99 + 2);
      }
      if (!*((_BYTE *)this + 225))
        return 2;
      v446 = WebCore::executionContext(*(WebCore **)this, v98);
      v447 = v951;
      if (*((_QWORD *)&v951 + 1) >= (unint64_t)*(unsigned int *)(v951 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D7FCLL);
      }
      v448 = (WebCore::ScriptExecutionContext *)v446;
      v449 = *(WTF::StringImpl **)(*(_QWORD *)v951 + 16 * *((_QWORD *)&v951 + 1));
      if (v449)
        *(_DWORD *)v449 += 2;
      v939 = v449;
      MEMORY[0x19AEA52D4](v892, &v939, 0);
      v452 = v939;
      v939 = 0;
      if (v452)
      {
        if (*(_DWORD *)v452 == 2)
          WTF::StringImpl::destroy(v452, v450);
        else
          *(_DWORD *)v452 -= 2;
      }
      v453 = *((_QWORD *)&cf + 1);
      if (*((_QWORD *)&cf + 1) >= (unint64_t)*(unsigned int *)(cf + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D804);
      }
      if (*((_QWORD *)&v447 + 1) >= (unint64_t)*(unsigned int *)(v447 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D80CLL);
      }
      v454 = *(_QWORD *)cf;
      if (!*((_DWORD *)this + 83))
        goto LABEL_728;
      v455 = 0;
      v456 = (const WTF::StringImpl **)(*(_QWORD *)v447 + 16 * *((_QWORD *)&v447 + 1));
      do
      {
        v457 = WTF::equal(*(WTF **)(*((_QWORD *)this + 40) + 8 * v455), *v456, v451);
        v458 = *((unsigned int *)this + 83);
        if (v457)
          break;
        ++v455;
      }
      while (v455 < v458);
      if (v455 < v458)
      {
        if (v455 >= *((unsigned int *)this + 87))
        {
          __break(0xC471u);
          JUMPOUT(0x19440D840);
        }
        v459 = *(WTF::StringImpl **)(*((_QWORD *)this + 42) + 8 * v455);
        if (v459)
          *(_DWORD *)v459 += 2;
      }
      else
      {
LABEL_728:
        v459 = 0;
      }
      v465 = (WTF::String *)(v454 + 16 * v453);
      v939 = v459;
      v466 = (_DWORD *)bmalloc::api::isoAllocate();
      v468 = WebCore::Blob::Blob((uint64_t)v466, v467, v448, (const WTF::URL *)v892, v465, v101, 1, v102, (const WTF::URL *)&v939);
      WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v468 + 24));
      SlowCase = WebCore::wrap<WebCore::Blob>(*(_QWORD *)this, *((_QWORD *)this + 27), (uint64_t)v466);
      if (v466[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v466 + 8))(v466);
      else
        --v466[4];
      v469 = v939;
      v939 = 0;
      if (!v469)
        goto LABEL_833;
      goto LABEL_831;
    case 0x10u:
      v892[0] = 0;
      v892[1] = 0;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)v892, &v951, 0))
        return SlowCase;
      if (v892[1] >= (CFTypeRef)*((unsigned int *)v892[0] + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6A0);
      }
      return WebCore::CloneDeserializer::CachedString::jsString((WebCore::CloneDeserializer::CachedString *)(*(_QWORD *)v892[0] + 16 * (uint64_t)v892[1]), this);
    case 0x11u:
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 41968);
    case 0x12u:
      v892[0] = 0;
      v892[1] = 0;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)v892, &v951, 0))
        return SlowCase;
      v951 = 0uLL;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)&v951, &cf, 0))
        return SlowCase;
      if (*((_QWORD *)&v951 + 1) >= (unint64_t)*(unsigned int *)(v951 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D774);
      }
      if ((JSC::Yarr::parseFlags() & 0xFF0000) == 0)
        return 0;
      if (v892[1] >= (CFTypeRef)*((unsigned int *)v892[0] + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D7F4);
      }
      v160 = *(_QWORD *)(*(_QWORD *)this + 56);
      JSC::RegExp::create();
      SlowCase = *(_QWORD *)(v160 + 39344);
      if (SlowCase < *(_QWORD *)(v160 + 39352))
        goto LABEL_232;
      SlowCase = *(_QWORD *)(v160 + 39360);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v704 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v160 + 39368);
        *(_QWORD *)(v160 + 39352) = SlowCase + HIDWORD(v704);
        *(_QWORD *)(v160 + 39360) = SlowCase + (int)v704;
LABEL_232:
        *(_QWORD *)(v160 + 39344) = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      JSC::RegExpObject::RegExpObject();
      if (*(_BYTE *)(v160 + 755))
        __dmb(0xAu);
      return SlowCase;
    case 0x13u:
      v231 = *((_DWORD *)this + 30);
      if (v231 > 0xFF)
      {
        if (HIWORD(v231))
        {
          if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 4)
            goto LABEL_963;
          v407 = *v8;
          v233 = *v8;
          *v9 = v8 + 1;
          v232 = v407 & 0xFFFFFF00;
        }
        else
        {
          if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 2)
            goto LABEL_963;
          v380 = *(_WORD *)v8;
          LOWORD(v233) = *(_WORD *)v8;
          *v9 = (unsigned int *)((char *)v8 + 2);
          v232 = v380 & 0xFF00;
        }
      }
      else
      {
        if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 1)
          goto LABEL_963;
        v232 = 0;
        *v9 = (unsigned int *)((char *)v8 + 1);
        LOBYTE(v233) = *(_BYTE *)v8;
      }
      v408 = v232 | v233;
      if (v231 <= v408)
        return 10;
      else
        return *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v408);
    case 0x14u:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v17 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      v18 = *((_QWORD *)this + 36);
      goto LABEL_294;
    case 0x15u:
      if (*((_DWORD *)this + 62) > 9u)
      {
        v260 = 0;
        if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 8)
          goto LABEL_565;
        v381 = *(double *)v8;
        v262 = v8 + 2;
        v261 = v381;
      }
      else
      {
        v260 = 0;
        if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 4)
          goto LABEL_565;
        v263 = *v8;
        v262 = v8 + 1;
        *(_QWORD *)&v261 = v263;
      }
      *v9 = v262;
      if ((unint64_t)v262 + *(_QWORD *)&v261 > v7)
      {
LABEL_564:
        v260 = 0;
LABEL_565:
        SlowCase = 0;
        *((_BYTE *)this + 8) = 1;
        goto LABEL_576;
      }
      JSC::ArrayBuffer::tryCreate();
      v260 = (WTF::DeferrableRefCountedBase *)v892[0];
      *(CFTypeRef *)&v951 = v892[0];
      if (!v892[0])
        goto LABEL_565;
      *((_QWORD *)this + 29) += *(_QWORD *)&v261;
      v382 = *((_QWORD *)v260 + 4)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0;
      if (!JSC::JSGlobalObject::arrayBufferStructure(*((_QWORD *)this + 27), v382 != 0))
        goto LABEL_565;
      SlowCase = JSC::JSArrayBuffer::create();
      v384 = *((unsigned int *)this + 30);
      v383 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v384 == *((_DWORD *)this + 31)
        || (v385 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v385 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v385)
      {
        v631.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v383, v631) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_1031;
        }
      }
      else
      {
        *((_QWORD *)v385 + v384) = SlowCase;
        *(_DWORD *)v383 = v384 + 1;
      }
      if (*((_BYTE *)this + 112))
      {
LABEL_1031:
        __break(0xC471u);
        JUMPOUT(0x19440B580);
      }
      goto LABEL_575;
    case 0x16u:
      if ((unint64_t)v881 < *((_QWORD *)this + 26))
        goto LABEL_963;
      v124 = *((_QWORD *)this + 26);
      if (*((_DWORD *)this + 62) <= 9u)
      {
        if ((unint64_t)v881 < v124)
          goto LABEL_963;
        v125 = (char *)*((_QWORD *)this + 29);
        v126 = *((_QWORD *)this + 30);
        if ((unint64_t)v125 >= v126)
          goto LABEL_963;
        *((_QWORD *)this + 29) = v125 + 1;
        if (!*((_BYTE *)this + 8))
        {
          v127 = v126 - 4;
          if ((unint64_t)(v125 + 1) <= v127)
          {
            v128 = *v125;
            v129 = *(unsigned int *)(v125 + 1);
            *v9 = (unsigned int *)(v125 + 5);
            if ((unint64_t)(v125 + 5) > v127)
              goto LABEL_963;
            v130 = *(_DWORD *)(v125 + 5);
            *((_QWORD *)this + 29) = v125 + 9;
            Terminal = WebCore::CloneDeserializer::readTerminal(this);
            if (!Terminal
              || (Terminal & 0xFFFE000000000002) != 0
              || *(_BYTE *)(Terminal + 5) != 38
              || v128 > 0xB)
            {
              goto LABEL_963;
            }
            v132 = *(_QWORD *)(Terminal + 16);
            if (v132)
            {
              v133 = dword_1968DFAB0[v128];
              *(_DWORD *)v132 += 2;
              v134 = v130 / v133;
              if ((_DWORD)v134 * v133 == v130)
              {
                if (*(_BYTE *)(v132 + 64) && (v813 = *(_QWORD *)(v132 + 32)) != 0)
                  v135 = *(_QWORD *)(v813 + 32);
                else
                  v135 = *(_QWORD *)(v132 + 48);
                if (v135 >= v129)
                {
                  switch((int)v128)
                  {
                    case 0:
                      *(_QWORD *)&v951 = v132;
                      goto LABEL_958;
                    case 1:
                      *(_QWORD *)&v951 = v132;
                      v679 = v129;
                      v406 = 1;
                      goto LABEL_1130;
                    case 2:
                      *(_QWORD *)&v951 = v132;
                      v676 = v129;
                      v406 = 1;
                      goto LABEL_1124;
                    case 3:
                      *(_QWORD *)&v951 = v132;
                      v677 = v129;
                      v406 = 1;
                      goto LABEL_1126;
                    case 4:
                      *(_QWORD *)&v951 = v132;
                      v674 = v129;
                      v406 = 1;
                      goto LABEL_1120;
                    case 5:
                      *(_QWORD *)&v951 = v132;
                      v680 = v129;
                      v406 = 1;
                      goto LABEL_1132;
                    case 6:
                      *(_QWORD *)&v951 = v132;
                      v681 = v129;
                      v406 = 1;
                      goto LABEL_1134;
                    case 7:
                      *(_QWORD *)&v951 = v132;
                      v678 = v129;
                      v406 = 1;
                      goto LABEL_1128;
                    case 8:
                      *(_QWORD *)&v951 = v132;
                      v683 = v129;
                      v406 = 1;
                      goto LABEL_1138;
                    case 9:
                      *(_QWORD *)&v951 = v132;
                      v675 = v129;
                      v406 = 1;
                      goto LABEL_1122;
                    case 10:
                      *(_QWORD *)&v951 = v132;
                      v682 = v129;
                      v406 = 1;
                      goto LABEL_1136;
                    case 11:
                      *(_QWORD *)&v951 = v132;
                      v673 = v129;
                      v406 = 1;
                      goto LABEL_1118;
                    default:
                      goto LABEL_962;
                  }
                }
              }
              goto LABEL_962;
            }
LABEL_1431:
            SlowCase = 2;
LABEL_1146:
            v687 = *((unsigned int *)this + 30);
            v686 = (WebCore::CloneDeserializer *)((char *)this + 120);
            if ((_DWORD)v687 == *((_DWORD *)this + 31)
              || (v688 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
                  v688 != (WebCore::CloneDeserializer *)((char *)this + 144))
              && v688)
            {
              v724.super.isa = (Class)SlowCase;
              if (JSC::MarkedVectorBase::slowAppend(v686, v724) == 1)
              {
                *((_BYTE *)this + 112) = 1;
                goto LABEL_1150;
              }
            }
            else
            {
              *((_QWORD *)v688 + v687) = SlowCase;
              *(_DWORD *)v686 = v687 + 1;
            }
            if (!*((_BYTE *)this + 112))
              return SlowCase;
LABEL_1150:
            __break(0xC471u);
            JUMPOUT(0x19440BCF4);
          }
        }
LABEL_1231:
        *((_BYTE *)this + 8) = 1;
        goto LABEL_963;
      }
      if ((unint64_t)v881 < v124)
        goto LABEL_963;
      v398 = (char *)*((_QWORD *)this + 29);
      v399 = *((_QWORD *)this + 30);
      if ((unint64_t)v398 >= v399)
        goto LABEL_963;
      *((_QWORD *)this + 29) = v398 + 1;
      if (*((_BYTE *)this + 8))
        goto LABEL_1231;
      v400 = v399 - 8;
      if ((unint64_t)(v398 + 1) > v400)
        goto LABEL_1231;
      v401 = *v398;
      v402 = *(_QWORD *)(v398 + 1);
      *v9 = (unsigned int *)(v398 + 9);
      if ((unint64_t)(v398 + 9) > v400)
        goto LABEL_1231;
      v403 = *(_QWORD *)(v398 + 9);
      *((_QWORD *)this + 29) = v398 + 17;
      v404 = WebCore::CloneDeserializer::readTerminal(this);
      if (!v404 || (v404 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v404 + 5) != 38 || v401 > 0xB)
        goto LABEL_963;
      v132 = *(_QWORD *)(v404 + 16);
      if (!v132)
        goto LABEL_1431;
      v405 = qword_1968DFAE0[v401];
      *(_DWORD *)v132 += 2;
      if (v403 == -1)
      {
        if (*(_BYTE *)(v132 + 64))
        {
          v406 = 0;
          v134 = 0;
LABEL_950:
          v598 = *(_QWORD *)(v132 + 32);
          if (v598)
          {
            v599 = *(_QWORD *)(v598 + 32);
LABEL_953:
            v600 = v599 >= v402;
            v601 = v599 - v402;
            if (v600 && v601 >= v134)
            {
              switch((int)v401)
              {
                case 0:
                  *(_QWORD *)&v951 = v132;
LABEL_958:
                  JSC::DataView::wrappedAs();
                  if (v892[0])
                  {
                    SlowCase = JSC::ArrayBufferView::wrap((JSC::ArrayBufferView *)v892[0], *(JSC::JSGlobalObject **)this, *((JSC::JSGlobalObject **)this + 27));
                    v602 = SlowCase != 0;
                    v603 = v892[0];
                    v892[0] = 0;
                    if (v603)
                    {
                      if (*v603 == 1)
                        JSC::ArrayBufferView::operator delete();
                      else
                        --*v603;
                    }
                  }
                  else
                  {
                    SlowCase = 0;
                    v602 = 0;
                    v892[0] = 0;
                  }
                  v689 = (WTF::DeferrableRefCountedBase *)v951;
                  *(_QWORD *)&v951 = 0;
                  if (v689)
                    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v689);
                  if (!v602)
                    goto LABEL_963;
                  goto LABEL_1146;
                case 1:
                  *(_QWORD *)&v951 = v132;
                  v679 = v402;
LABEL_1130:
                  JSC::GenericTypedArrayView<JSC::Int8Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v679, v134, v406);
                  goto LABEL_1139;
                case 2:
                  *(_QWORD *)&v951 = v132;
                  v676 = v402;
LABEL_1124:
                  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v676, v134, v406);
                  goto LABEL_1139;
                case 3:
                  *(_QWORD *)&v951 = v132;
                  v677 = v402;
LABEL_1126:
                  JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v677, v134, v406);
                  goto LABEL_1139;
                case 4:
                  *(_QWORD *)&v951 = v132;
                  v674 = v402;
LABEL_1120:
                  JSC::GenericTypedArrayView<JSC::Int16Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v674, v134, v406);
                  goto LABEL_1139;
                case 5:
                  *(_QWORD *)&v951 = v132;
                  v680 = v402;
LABEL_1132:
                  JSC::GenericTypedArrayView<JSC::Uint16Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v680, v134, v406);
                  goto LABEL_1139;
                case 6:
                  *(_QWORD *)&v951 = v132;
                  v681 = v402;
LABEL_1134:
                  JSC::GenericTypedArrayView<JSC::Int32Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v681, v134, v406);
                  goto LABEL_1139;
                case 7:
                  *(_QWORD *)&v951 = v132;
                  v678 = v402;
LABEL_1128:
                  JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v678, v134, v406);
                  goto LABEL_1139;
                case 8:
                  *(_QWORD *)&v951 = v132;
                  v683 = v402;
LABEL_1138:
                  JSC::GenericTypedArrayView<JSC::Float32Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v683, v134, v406);
                  goto LABEL_1139;
                case 9:
                  *(_QWORD *)&v951 = v132;
                  v675 = v402;
LABEL_1122:
                  JSC::GenericTypedArrayView<JSC::Float64Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v675, v134, v406);
                  goto LABEL_1139;
                case 10:
                  *(_QWORD *)&v951 = v132;
                  v682 = v402;
LABEL_1136:
                  JSC::GenericTypedArrayView<JSC::BigInt64Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v682, v134, v406);
                  goto LABEL_1139;
                case 11:
                  *(_QWORD *)&v951 = v132;
                  v673 = v402;
LABEL_1118:
                  JSC::GenericTypedArrayView<JSC::BigUint64Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)v892, (WTF::DeferrableRefCountedBase **)&v951, v673, v134, v406);
LABEL_1139:
                  v684 = v892[0];
                  if (v892[0])
                  {
                    SlowCase = JSC::ArrayBufferView::wrap((JSC::ArrayBufferView *)v892[0], *(JSC::JSGlobalObject **)this, *((JSC::JSGlobalObject **)this + 27));
                    v685 = SlowCase != 0;
                    if (*v684 == 1)
                      JSC::ArrayBufferView::operator delete();
                    else
                      --*v684;
                  }
                  else
                  {
                    SlowCase = 0;
                    v685 = 0;
                  }
                  if ((_QWORD)v951)
                    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v951);
                  if (v685)
                    goto LABEL_1146;
                  goto LABEL_963;
                default:
                  goto LABEL_962;
              }
            }
            goto LABEL_962;
          }
LABEL_952:
          v599 = *(_QWORD *)(v132 + 48);
          goto LABEL_953;
        }
      }
      else
      {
        v134 = v403 / v405;
        if (v403 / v405 * v405 == v403)
        {
          v406 = 1;
          if (!*(_BYTE *)(v132 + 64))
            goto LABEL_952;
          goto LABEL_950;
        }
      }
LABEL_962:
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v132);
      goto LABEL_963;
    case 0x17u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v253 = *v8;
      v252 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      v254 = *((_DWORD *)this + 79);
      if (v254 <= v253)
        goto LABEL_963;
      if (!*(_QWORD *)(*((_QWORD *)this + 38) + 8 * v252))
      {
        if (*(_DWORD *)(*((_QWORD *)this + 37) + 12) <= v252)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7C4);
        }
        JSC::ArrayBuffer::create();
        if (*((_DWORD *)this + 79) <= v252)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7CCLL);
        }
        v255 = *((_QWORD *)this + 38);
        v256 = v892[0];
        v892[0] = 0;
        v257 = *(WTF::DeferrableRefCountedBase **)(v255 + 8 * v252);
        *(_QWORD *)(v255 + 8 * v252) = v256;
        if (v257)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v257);
        v258 = (WTF::DeferrableRefCountedBase *)v892[0];
        v892[0] = 0;
        if (v258)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v258);
        v254 = *((_DWORD *)this + 79);
      }
      if (v254 <= v252)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D700);
      }
      v259 = *(WebCore::JSDOMGlobalObject **)(*((_QWORD *)this + 38) + 8 * v252);
      if (!v259)
        return 2;
      return WebCore::toJS(*(WebCore **)this, *((_QWORD *)this + 27), v259, a4);
    case 0x18u:
      v77 = *(JSC::BooleanObject **)(*(_QWORD *)this + 56);
      v78 = *(_QWORD *)(v11 + 1472);
      if ((v78 & 1) != 0)
      {
        v666 = *(uint64_t (**)(CFTypeRef *))(v78 & 0xFFFFFFFFFFFFFFFCLL);
        v667 = (CFTypeRef *)(v11 - 16);
        if ((v11 & 8) == 0)
          v667 = (CFTypeRef *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
        v892[0] = *v667;
        v892[1] = (CFTypeRef)v11;
        *(_QWORD *)&v893 = v11 + 1472;
        v78 = v666(v892);
      }
      SlowCase = JSC::BooleanObject::create(v77, (JSC::VM *)v78, a3.super.isa);
      *(_QWORD *)(SlowCase + 16) = 7;
      v80 = *((unsigned int *)this + 30);
      v79 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v80 == *((_DWORD *)this + 31)
        || (v81 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v81 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v81)
      {
        v622.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v79, v622) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_1605;
        }
      }
      else
      {
        *((_QWORD *)v81 + v80) = SlowCase;
        *(_DWORD *)v79 = v80 + 1;
      }
      if (!*((_BYTE *)this + 112))
        return SlowCase;
LABEL_1605:
      __break(0xC471u);
      JUMPOUT(0x1944078A8);
    case 0x19u:
      v117 = *(JSC::BooleanObject **)(*(_QWORD *)this + 56);
      v118 = *(_QWORD *)(v11 + 1472);
      if ((v118 & 1) != 0)
      {
        v668 = *(uint64_t (**)(CFTypeRef *))(v118 & 0xFFFFFFFFFFFFFFFCLL);
        v669 = (CFTypeRef *)(v11 - 16);
        if ((v11 & 8) == 0)
          v669 = (CFTypeRef *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
        v892[0] = *v669;
        v892[1] = (CFTypeRef)v11;
        *(_QWORD *)&v893 = v11 + 1472;
        v118 = v668(v892);
      }
      SlowCase = JSC::BooleanObject::create(v117, (JSC::VM *)v118, a3.super.isa);
      *(_QWORD *)(SlowCase + 16) = 6;
      v120 = *((unsigned int *)this + 30);
      v119 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v120 == *((_DWORD *)this + 31)
        || (v121 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v121 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v121)
      {
        v623.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v119, v623) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_165;
        }
      }
      else
      {
        *((_QWORD *)v121 + v120) = SlowCase;
        *(_DWORD *)v119 = v120 + 1;
      }
      if (!*((_BYTE *)this + 112))
        return SlowCase;
LABEL_165:
      __break(0xC471u);
      JUMPOUT(0x194407D0CLL);
    case 0x1Au:
      v892[0] = 0;
      v892[1] = 0;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)v892, &v951, 0))
        return SlowCase;
      if (v892[1] >= (CFTypeRef)*((unsigned int *)v892[0] + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D698);
      }
      WebCore::CloneDeserializer::CachedString::jsString((WebCore::CloneDeserializer::CachedString *)(*(_QWORD *)v892[0] + 16 * (uint64_t)v892[1]), this);
      SlowCase = JSC::constructString();
      v86 = *((unsigned int *)this + 30);
      v85 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v86 == *((_DWORD *)this + 31)
        || (v87 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v87 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v87)
      {
        v629.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v85, v629) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_120;
        }
      }
      else
      {
        *((_QWORD *)v87 + v86) = SlowCase;
        *(_DWORD *)v85 = v86 + 1;
      }
      if (!*((_BYTE *)this + 112))
        return SlowCase;
LABEL_120:
      __break(0xC471u);
      JUMPOUT(0x1944079B8);
    case 0x1Bu:
      SlowCase = JSC::constructString();
      v152 = *((unsigned int *)this + 30);
      v151 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v152 == *((_DWORD *)this + 31)
        || (v153 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v153 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v153)
      {
        v624.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v151, v624) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_212;
        }
      }
      else
      {
        *((_QWORD *)v153 + v152) = SlowCase;
        *(_DWORD *)v151 = v152 + 1;
      }
      if (!*((_BYTE *)this + 112))
        return SlowCase;
LABEL_212:
      __break(0xC471u);
      JUMPOUT(0x1944080B8);
    case 0x1Cu:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 8)
        goto LABEL_963;
      v82 = *(double *)v8;
      *v9 = v8 + 2;
      if ((*(_QWORD *)&v82 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v83 = (int)v82, v82 == (double)(int)v83)
        && ((_DWORD)v83 || (*(_QWORD *)&v82 & 0x8000000000000000) == 0))
      {
        v84 = (JSC::JSGlobalObject *)(v83 | 0xFFFE000000000000);
      }
      else
      {
        v84 = (JSC::JSGlobalObject *)(*(_QWORD *)&v82 + 0x2000000000000);
      }
      SlowCase = JSC::constructNumber((JSC *)v11, v84, a3);
      v392 = *((unsigned int *)this + 30);
      v391 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v392 == *((_DWORD *)this + 31)
        || (v393 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v393 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v393)
      {
        v625.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v391, v625) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_591;
        }
      }
      else
      {
        *((_QWORD *)v393 + v392) = SlowCase;
        *(_DWORD *)v391 = v392 + 1;
      }
      if (!*((_BYTE *)this + 112))
        return SlowCase;
LABEL_591:
      __break(0xC471u);
      JUMPOUT(0x194409C1CLL);
    case 0x21u:
      v943 = 0;
      v942 = 0;
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v275 = *v8;
      v274 = (char *)(v8 + 1);
      v273 = v275;
      *v9 = (unsigned int *)v274;
      if (v275 > (int)v7 - (int)v274)
        goto LABEL_963;
      if ((_DWORD)v273)
      {
        if (v273 <= 0x10)
          v276 = 16;
        else
          v276 = v273;
        v277 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v276);
        LODWORD(v943) = v276;
        v942 = v277;
        memcpy(v277, v274, v273);
        HIDWORD(v943) = v273;
        v274 = (char *)*v9;
      }
      *((_QWORD *)this + 29) = &v274[v273];
      v278 = WebCore::executionContext(*(WebCore **)this, (JSC::JSGlobalObject *)a2);
      if (!v278
        || ((*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v278 + 400))(&v939, v278, &v942), !v941))
      {
        SlowCase = 0;
        *((_BYTE *)this + 8) = 1;
        goto LABEL_593;
      }
      v938 = 0;
      v937 = 0;
      v280 = *(const void **)this;
      v281 = (JSC::JSGlobalObject *)*((_QWORD *)this + 27);
      v951 = 0uLL;
      cf = 0uLL;
      v892[0] = v280;
      LOBYTE(v892[1]) = 0;
      LOBYTE(v893) = 0;
      *((_QWORD *)&v893 + 1) = 0x800000000;
      *(_QWORD *)v894 = &v894[16];
      *(_OWORD *)&v894[8] = 0u;
      v895 = 0u;
      v896 = 0u;
      memset(v897, 0, sizeof(v897));
      v898 = 0x800000000;
      v899 = &v900[8];
      v901 = 0;
      memset(v900, 0, sizeof(v900));
      v282 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v282)
        v282 = WTF::Thread::initializeCurrentTLS(0);
      v902 = *(_QWORD *)(v282 + 24) + 0x10000;
      v903 = v281;
      v283 = *(unsigned int *)(16 * (*(_DWORD *)v281 & 0xFFFFFFFE) + 0x4C);
      v284 = *(_DWORD *)(16 * (*(_DWORD *)v281 & 0xFFFFFFFE) + 0x4C) != 0;
      v285 = (char **)(16 * v283);
      if ((_DWORD)v283 && v285 != &WebCore::JSDOMGlobalObject::s_info)
      {
        v286 = 16 * v283;
        do
        {
          v286 = *(_QWORD *)(v286 + 16);
          v284 = v286 != 0;
        }
        while ((char **)v286 != &WebCore::JSDOMGlobalObject::s_info && v286 != 0);
      }
      v904 = v284;
      v288 = v285 != &WebCore::JSIDBSerializationGlobalObject::s_info && v284;
      v905 = v288;
      v906 = v939;
      v907 = (unsigned __int8 *)v939 + HIDWORD(v940);
      v908 = -1;
      v909 = 0u;
      v910 = 0u;
      v912 = 0u;
      v913 = 0u;
      v914 = 0u;
      v911 = &v937;
      v915 = 0;
      v916 = 0u;
      v917 = 0u;
      v918 = 0u;
      v919 = 0u;
      v920 = &v951;
      p_cf = &cf;
      v922 = 0u;
      v923 = 0u;
      v924 = 0u;
      v925 = 0u;
      v926 = 0u;
      v927 = 0u;
      v928 = 0u;
      v929 = 0u;
      v930 = 0u;
      v931 = 0u;
      v932 = 0u;
      v933 = 0u;
      v934 = 0u;
      v935 = 0u;
      v936 = 0u;
      if (LOBYTE(v892[1]) || v906 > (WTF::StringImpl *)(v907 - 4))
      {
        LOBYTE(v892[1]) = 1;
      }
      else
      {
        v289 = *(_DWORD *)v906;
        v906 = (WTF::StringImpl *)((char *)v906 + 4);
        LODWORD(v908) = v289 & 0xFFFFFF;
        HIDWORD(v908) = HIBYTE(v289);
      }
      if (HIDWORD(cf))
      {
        v734 = (uint64_t *)cf;
        v735 = 8 * HIDWORD(cf);
        do
        {
          v734 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v734, a2)+ 1;
          v735 -= 8;
        }
        while (v735);
      }
      v290 = (WTF *)cf;
      if ((_QWORD)cf)
      {
        *(_QWORD *)&cf = 0;
        DWORD2(cf) = 0;
        WTF::fastFree(v290, a2);
      }
      if (HIDWORD(v951))
      {
        v725 = (WebCore::OffscreenCanvas **)v951;
        v726 = 8 * HIDWORD(v951);
        do
        {
          v727 = *v725;
          *v725 = 0;
          if (v727)
          {
            if (*((_DWORD *)v727 + 6) == 1)
            {
              WebCore::OffscreenCanvas::~OffscreenCanvas(v727);
              bmalloc::api::isoDeallocate(v728, v729);
            }
            else
            {
              --*((_DWORD *)v727 + 6);
            }
          }
          ++v725;
          v726 -= 8;
        }
        while (v726);
      }
      v291 = (WTF *)v951;
      if ((_QWORD)v951)
      {
        *(_QWORD *)&v951 = 0;
        DWORD2(v951) = 0;
        WTF::fastFree(v291, a2);
      }
      if (LOBYTE(v892[1]))
        goto LABEL_801;
      v293 = (int *)v906;
      v292 = v907;
      v294 = (unint64_t)(v907 - 4);
      if (v906 > (WTF::StringImpl *)(v907 - 4))
        goto LABEL_801;
      v295 = (unint64_t)v906 + 4;
      v296 = *(_DWORD *)v906;
      v906 = (WTF::StringImpl *)((char *)v906 + 4);
      if (v296 > 1)
        goto LABEL_802;
      if (v908 < 0xE)
      {
        if (v295 > v294)
          goto LABEL_801;
        v516 = v293[1];
        v297 = v293 + 2;
        v906 = (WTF::StringImpl *)(v293 + 2);
        if (v516 <= 1)
        {
          v299 = v516 == 0;
LABEL_782:
          v517 = !v299;
          if ((unint64_t)v297 > v294)
            goto LABEL_801;
          v520 = *v297;
          v519 = (unsigned __int8 *)(v297 + 1);
          v518 = v520;
          v906 = (WTF::StringImpl *)v519;
          v521 = 0;
          if (v520)
          {
            v522 = (char *)(v907 - 1);
            v523 = v519;
            do
            {
              v524 = v523 > (unsigned __int8 *)v522;
              if (v523 > (unsigned __int8 *)v522)
                goto LABEL_801;
              v519 = v523 + 1;
              v906 = (WTF::StringImpl *)(v523 + 1);
              v525 = *v523;
              if (!v524)
              {
                switch(v525)
                {
                  case 0:
                    v521 |= 1u;
                    break;
                  case 1:
                    v521 |= 2u;
                    break;
                  case 2:
                    v521 |= 4u;
                    break;
                  case 3:
                    v521 |= 8u;
                    break;
                  case 4:
                    v521 |= 0x10u;
                    break;
                  case 5:
                    v521 |= 0x20u;
                    break;
                  case 6:
                    v521 |= 0x40u;
                    break;
                  case 7:
                    v521 |= 0x80u;
                    break;
                  default:
                    goto LABEL_802;
                }
              }
              v523 = v519;
            }
            while (--v518);
          }
          v526 = (unint64_t)(v907 - 1);
          if (v519 > v907 - 1)
          {
LABEL_801:
            LOBYTE(v892[1]) = 1;
            goto LABEL_802;
          }
          v561 = v519 + 1;
          v906 = (WTF::StringImpl *)(v519 + 1);
          if (*v519 > 5u)
            goto LABEL_802;
          switch(*v519)
          {
            case 0u:
              if ((unint64_t)v561 > v294)
                goto LABEL_801;
              v562 = *(unsigned int *)(v519 + 1);
              v563 = (char *)(v519 + 5);
              v906 = (WTF::StringImpl *)(v519 + 5);
              if (v562 > (int)v907 - ((int)v519 + 5))
                break;
              if ((_DWORD)v562)
              {
                if (v562 <= 0x10)
                  v564 = 16;
                else
                  v564 = v562;
                v565 = (void *)WTF::fastMalloc((WTF *)v564);
                memcpy(v565, v563, v562);
                v566 = (char *)v906 + v562;
                v906 = (WTF::StringImpl *)((char *)v906 + v562);
                if (LOBYTE(v892[1]))
                  goto LABEL_896;
                v292 = v907;
              }
              else
              {
                v565 = 0;
                LODWORD(v564) = 0;
                v566 = &v563[v562];
                v906 = (WTF::StringImpl *)&v563[v562];
              }
              if (v566 > (char *)v292 - 1)
              {
LABEL_896:
                LOBYTE(v892[1]) = 1;
LABEL_897:
                if (!v565)
                  break;
                v567 = (WTF *)v565;
                goto LABEL_899;
              }
              v906 = (WTF::StringImpl *)(v566 + 1);
              v705 = *v566;
              if (v705 > 0x17)
                goto LABEL_897;
              if ((_DWORD)v562)
              {
                v706 = byte_1968DFB40[v705];
                v638 = (WTF **)WTF::fastMalloc((WTF *)0x28);
                *((_DWORD *)v638 + 2) = 1;
                *((_WORD *)v638 + 6) = 524;
                *((_BYTE *)v638 + 14) = v517;
                *((_DWORD *)v638 + 4) = v521;
                *v638 = (WTF *)off_1E33973D0;
                *((_BYTE *)v638 + 20) = v706;
                v638[3] = (WTF *)v565;
                *((_DWORD *)v638 + 8) = v564;
                *((_DWORD *)v638 + 9) = v562;
                goto LABEL_1042;
              }
              if (v565)
              {
LABEL_1234:
                v722 = (WTF *)v565;
LABEL_1243:
                WTF::fastFree(v722, a2);
              }
              goto LABEL_1244;
            case 1u:
              if ((unint64_t)v561 > v526)
                goto LABEL_801;
              v906 = (WTF::StringImpl *)(v519 + 2);
              v650 = v519[1];
              if (v650 > 0x17)
                break;
              v651 = v650 - 6;
              if (v650 - 6 > 5 || ((0x3Bu >> v651) & 1) == 0)
                break;
              if ((unint64_t)(v519 + 2) > v294)
                goto LABEL_801;
              v652 = *(unsigned int *)(v519 + 2);
              v653 = (char *)(v519 + 6);
              v906 = (WTF::StringImpl *)(v519 + 6);
              if (v652 > (int)v907 - ((int)v519 + 6))
                break;
              if (!(_DWORD)v652)
              {
                v880 = (WTF::StringImpl *)&v653[v652];
                goto LABEL_1584;
              }
              if (v652 <= 0x10)
                v654 = 16;
              else
                v654 = v652;
              v655 = (void *)WTF::fastMalloc((WTF *)v654);
              memcpy(v655, v653, v652);
              v906 = (WTF::StringImpl *)((char *)v906 + v652);
              v656 = 8 * v652;
              if (8 * v652 == 128 || v656 == 256 || v656 == 192)
              {
                v638 = (WTF **)WTF::fastMalloc((WTF *)0x28);
                *((_DWORD *)v638 + 2) = 1;
                *((_BYTE *)v638 + 12) = 0xB0A090B0807uLL >> (8 * v651);
                *((_BYTE *)v638 + 13) = 2;
                *((_BYTE *)v638 + 14) = v517;
                *((_DWORD *)v638 + 4) = v521;
                *v638 = (WTF *)off_1E3397370;
                v638[3] = (WTF *)v655;
                *((_DWORD *)v638 + 8) = v654;
                *((_DWORD *)v638 + 9) = v652;
                goto LABEL_1042;
              }
              v722 = (WTF *)v655;
              goto LABEL_1243;
            case 2u:
              if ((unint64_t)v561 > v526)
                goto LABEL_801;
              v642 = v519 + 2;
              v906 = (WTF::StringImpl *)(v519 + 2);
              v643 = (char)v519[1];
              if (v643 > 0x17)
                break;
              v644 = byte_1968DFB40[v643];
              if (v908 < 0xE)
              {
                if ((unint64_t)v642 > v294)
                  goto LABEL_801;
                v702 = *(_DWORD *)(v519 + 2);
                v645 = v519 + 6;
                v906 = (WTF::StringImpl *)(v519 + 6);
                if (v702 > 1)
                  break;
                if (!v702)
                {
LABEL_1054:
                  LODWORD(v889) = 0;
                  v647 = 13;
LABEL_1055:
                  LODWORD(v890) = v647;
                  goto LABEL_1286;
                }
              }
              else
              {
                if ((unint64_t)v642 > v526)
                  goto LABEL_801;
                v645 = v519 + 3;
                v906 = (WTF::StringImpl *)(v519 + 3);
                v646 = v519[2];
                if (v646 > 1)
                  break;
                if (!v646)
                  goto LABEL_1054;
              }
              v703 = v645;
              if ((unint64_t)v645 > v526)
                goto LABEL_801;
              ++v645;
              v906 = (WTF::StringImpl *)(v703 + 1);
              v647 = *v703;
              if (v647 > 0x17)
                break;
              LODWORD(v890) = 13;
              LODWORD(v889) = 1;
              switch(v647)
              {
                case 0u:
                  v647 = 1;
                  LODWORD(v889) = 1;
                  goto LABEL_1055;
                case 1u:
                  v741 = 2;
                  goto LABEL_1285;
                case 2u:
                  v741 = 3;
                  goto LABEL_1285;
                case 3u:
                  v741 = 4;
                  goto LABEL_1285;
                case 4u:
                  v741 = 5;
                  goto LABEL_1285;
                case 5u:
                  v741 = 6;
                  goto LABEL_1285;
                case 6u:
                  v741 = 7;
                  goto LABEL_1285;
                case 7u:
                  v741 = 8;
                  goto LABEL_1285;
                case 9u:
                case 0xAu:
                case 0xBu:
                case 0xCu:
                  LODWORD(v889) = 1;
                  goto LABEL_1055;
                case 0xFu:
                  v741 = 14;
                  goto LABEL_1285;
                case 0x10u:
                  v741 = 15;
                  goto LABEL_1285;
                case 0x11u:
                  v741 = 16;
                  goto LABEL_1285;
                case 0x12u:
                  v741 = 17;
                  goto LABEL_1285;
                case 0x14u:
                  v741 = 18;
                  goto LABEL_1285;
                case 0x15u:
                  v741 = 19;
                  goto LABEL_1285;
                case 0x16u:
                  v741 = 20;
                  goto LABEL_1285;
                case 0x17u:
                  v741 = 21;
LABEL_1285:
                  LODWORD(v890) = v741;
                  LODWORD(v889) = 1;
                  break;
                default:
                  break;
              }
LABEL_1286:
              if ((unint64_t)v645 > v526)
                goto LABEL_801;
              v906 = (WTF::StringImpl *)(v645 + 1);
              v742 = *v645;
              if (v742 > 1)
                break;
              v958 = 0;
              v959 = 0;
              if ((unint64_t)(v645 + 1) > v294)
                goto LABEL_801;
              v743 = *(unsigned int *)(v645 + 1);
              v744 = (char *)(v645 + 5);
              v906 = (WTF::StringImpl *)(v645 + 5);
              if (v743 > (int)v907 - ((int)v645 + 5))
                break;
              if ((_DWORD)v743)
              {
                if (v743 <= 0x10)
                  v745 = 16;
                else
                  v745 = v743;
                v746 = (WTF **)WTF::fastMalloc((WTF *)v745);
                LODWORD(v959) = v745;
                v958 = v746;
                __src = v746;
                memcpy(v746, v744, v743);
                HIDWORD(v959) = v743;
                v747 = (char *)v906 + v743;
                v906 = (WTF::StringImpl *)((char *)v906 + v743);
                v956 = 0;
                v957 = 0;
                if (LOBYTE(v892[1]))
                  goto LABEL_1497;
                v292 = v907;
              }
              else
              {
                __src = 0;
                v747 = &v744[v743];
                v906 = (WTF::StringImpl *)v747;
                v956 = 0;
                v957 = 0;
              }
              if (v747 <= (char *)v292 - 4)
              {
                v750 = *(_DWORD *)v747;
                v748 = (WTF::StringImpl *)(v747 + 4);
                v749 = v750;
                v906 = v748;
                if (v750 > (int)v292 - (int)v748)
                  goto LABEL_1298;
                if ((_DWORD)v749)
                {
                  if (v749 <= 0x10)
                    v751 = 16;
                  else
                    v751 = v749;
                  v752 = (WTF **)WTF::fastMalloc((WTF *)v751);
                  LODWORD(v957) = v751;
                  v956 = v752;
                  v887 = (WTF *)v752;
                  memcpy(v752, v748, v749);
                  HIDWORD(v957) = v749;
                  v748 = v906;
                }
                else
                {
                  v887 = 0;
                }
                v753 = (unsigned int *)((char *)v748 + v749);
                v906 = (WTF::StringImpl *)((char *)v748 + v749);
                if (!v742)
                {
                  v759 = operator new();
                  *(_QWORD *)v759 = &off_1E3397430;
                  *(_BYTE *)(v759 + 8) = 0;
                  *(_QWORD *)(v759 + 16) = 0;
                  *(_QWORD *)(v759 + 24) = 0;
                  *(_DWORD *)(v759 + 28) = v743;
                  if ((_DWORD)v743)
                  {
                    v760 = (void *)WTF::fastMalloc((WTF *)v743);
                    *(_DWORD *)(v759 + 24) = v743;
                    *(_QWORD *)(v759 + 16) = v760;
                    memcpy(v760, __src, v743);
                  }
                  *(_QWORD *)(v759 + 32) = 0;
                  *(_QWORD *)(v759 + 40) = 0;
                  *(_DWORD *)(v759 + 44) = v749;
                  if ((_DWORD)v749)
                  {
                    v761 = (void *)WTF::fastMalloc((WTF *)v749);
                    *(_DWORD *)(v759 + 40) = v749;
                    *(_QWORD *)(v759 + 32) = v761;
                    memcpy(v761, v887, v749);
                  }
                  *(_QWORD *)(v759 + 48) = 0;
                  *(_QWORD *)(v759 + 56) = 0;
                  *(_OWORD *)(v759 + 72) = 0u;
                  *(_OWORD *)(v759 + 88) = 0u;
                  *(_OWORD *)(v759 + 104) = 0u;
                  *(_OWORD *)(v759 + 120) = 0u;
                  *(_OWORD *)(v759 + 136) = 0u;
                  *(_OWORD *)(v759 + 152) = 0u;
                  *(_OWORD *)(v759 + 168) = 0u;
                  WebCore::CryptoKeyRSA::create(v644, v890, v889, v759, v517, v521, (uint64_t *)&v951);
                  WebCore::CryptoKeyRSAComponents::~CryptoKeyRSAComponents((WebCore::CryptoKeyRSAComponents *)v759, v762);
                }
                v954 = 0;
                v955 = 0;
                if (LOBYTE(v892[1]) || (v754 = v907, v753 > (unsigned int *)v907 - 1))
                {
                  v758 = 0;
                  v638 = 0;
                  LOBYTE(v892[1]) = 1;
                  goto LABEL_1411;
                }
                v757 = *v753;
                v756 = (WTF::StringImpl *)(v753 + 1);
                v755 = v757;
                v906 = v756;
                if (v757 > (int)v907 - (int)v756)
                {
                  v758 = 0;
                  v638 = 0;
                  goto LABEL_1411;
                }
                if ((_DWORD)v755)
                {
                  if (v755 <= 0x10)
                    v763 = 16;
                  else
                    v763 = v755;
                  v764 = (_DWORD *)WTF::fastMalloc((WTF *)v763);
                  LODWORD(v955) = v763;
                  v954 = v764;
                  v765 = v764;
                  memcpy(v764, v756, v755);
                  HIDWORD(v955) = v755;
                  v766 = (_DWORD *)((char *)v906 + v755);
                  v906 = (WTF::StringImpl *)((char *)v906 + v755);
                  if (LOBYTE(v892[1]))
                    goto LABEL_1528;
                  v754 = v907;
                }
                else
                {
                  v765 = 0;
                  v766 = (_DWORD *)((char *)v756 + v755);
                  v906 = (WTF::StringImpl *)v766;
                }
                if (v766 <= (_DWORD *)v754 - 1)
                {
                  v768 = *v766;
                  v767 = (WTF::StringImpl *)(v766 + 1);
                  v906 = v767;
                  v886 = v768;
                  if (v768 != 1)
                  {
                    if (!(_DWORD)v886)
                    {
                      v769 = operator new();
                      *(_QWORD *)v769 = &off_1E3397430;
                      *(_BYTE *)(v769 + 8) = 1;
                      *(_QWORD *)(v769 + 16) = 0;
                      *(_QWORD *)(v769 + 24) = 0;
                      *(_DWORD *)(v769 + 28) = v743;
                      if ((_DWORD)v743)
                      {
                        v770 = (void *)WTF::fastMalloc((WTF *)v743);
                        *(_DWORD *)(v769 + 24) = v743;
                        *(_QWORD *)(v769 + 16) = v770;
                        memcpy(v770, __src, v743);
                      }
                      *(_QWORD *)(v769 + 32) = 0;
                      *(_QWORD *)(v769 + 40) = 0;
                      *(_DWORD *)(v769 + 44) = v749;
                      if ((_DWORD)v749)
                      {
                        v771 = (void *)WTF::fastMalloc((WTF *)v749);
                        *(_DWORD *)(v769 + 40) = v749;
                        *(_QWORD *)(v769 + 32) = v771;
                        memcpy(v771, v887, v749);
                      }
                      *(_QWORD *)(v769 + 48) = 0;
                      *(_QWORD *)(v769 + 56) = 0;
                      *(_DWORD *)(v769 + 60) = v755;
                      if ((_DWORD)v755)
                      {
                        v772 = (void *)WTF::fastMalloc((WTF *)v755);
                        *(_DWORD *)(v769 + 56) = v755;
                        *(_QWORD *)(v769 + 48) = v772;
                        memcpy(v772, v765, v755);
                      }
                      *(_BYTE *)(v769 + 64) = 0;
                      *(_OWORD *)(v769 + 72) = 0u;
                      *(_OWORD *)(v769 + 88) = 0u;
                      *(_OWORD *)(v769 + 104) = 0u;
                      *(_OWORD *)(v769 + 120) = 0u;
                      *(_OWORD *)(v769 + 136) = 0u;
                      *(_OWORD *)(v769 + 152) = 0u;
                      *(_OWORD *)(v769 + 168) = 0u;
                      WebCore::CryptoKeyRSA::create(v644, v890, v889, v769, v517, v521, (uint64_t *)&v951);
                      WebCore::CryptoKeyRSAComponents::~CryptoKeyRSAComponents((WebCore::CryptoKeyRSAComponents *)v769, v773);
                    }
                    v952 = 0u;
                    v953 = 0u;
                    v950 = 0u;
                    v951 = 0u;
                    cf = 0u;
                    v949 = 0u;
                    v946 = 0;
                    v945 = 0;
                    v777 = (v886 - 2);
                    v947 = v886 - 2;
                    if ((_DWORD)v886 == 2)
                    {
                      v778 = 0;
                    }
                    else
                    {
                      if (v777 >= 0x5555556)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19440D8CCLL);
                      }
                      v778 = (char *)WTF::fastMalloc((WTF *)(48 * v777));
                      v946 = 48 * (int)v777 / 0x30u;
                      v945 = v778;
                      bzero(v778, 48 * ((48 * v777 - 48) / 0x30uLL) + 48);
                      if (LOBYTE(v892[1]))
                        goto LABEL_1530;
                      v767 = v906;
                      v754 = v907;
                    }
                    if (v767 > (WTF::StringImpl *)(v754 - 4))
                      goto LABEL_1530;
                    v781 = *(_DWORD *)v767;
                    v780 = (WTF::StringImpl *)((char *)v767 + 4);
                    v779 = v781;
                    v906 = v780;
                    if (v781 <= (int)v754 - (int)v780)
                    {
                      if ((_DWORD)v779)
                      {
                        if (v779 <= 0x10)
                          v782 = 16;
                        else
                          v782 = v779;
                        v783 = (void *)WTF::fastMalloc((WTF *)v782);
                        DWORD2(v951) = v782;
                        *(_QWORD *)&v951 = v783;
                        memcpy(v783, v780, v779);
                        HIDWORD(v951) = v779;
                        v784 = (_DWORD *)((char *)v906 + v779);
                        v906 = (WTF::StringImpl *)v784;
                        if (LOBYTE(v892[1]))
                          goto LABEL_1530;
                        v754 = v907;
                      }
                      else
                      {
                        v784 = (_DWORD *)((char *)v780 + v779);
                        v906 = (WTF::StringImpl *)v784;
                      }
                      if (v784 > (_DWORD *)v754 - 1)
                        goto LABEL_1530;
                      v787 = *v784;
                      v785 = (WTF::StringImpl *)(v784 + 1);
                      v786 = v787;
                      v906 = v785;
                      if (v787 <= (int)v754 - (int)v785)
                      {
                        if ((_DWORD)v786)
                        {
                          if (v786 <= 0x10)
                            v788 = 16;
                          else
                            v788 = v786;
                          v789 = (void *)WTF::fastMalloc((WTF *)v788);
                          DWORD2(v952) = v788;
                          *(_QWORD *)&v952 = v789;
                          memcpy(v789, v785, v786);
                          HIDWORD(v952) = v786;
                          v790 = (_DWORD *)((char *)v906 + v786);
                          v906 = (WTF::StringImpl *)((char *)v906 + v786);
                          if (LOBYTE(v892[1]))
                            goto LABEL_1530;
                          v754 = v907;
                        }
                        else
                        {
                          v790 = (_DWORD *)((char *)v785 + v786);
                          v906 = (WTF::StringImpl *)v790;
                        }
                        if (v790 > (_DWORD *)v754 - 1)
                          goto LABEL_1530;
                        v793 = *v790;
                        v791 = (WTF::StringImpl *)(v790 + 1);
                        v792 = v793;
                        v906 = v791;
                        if (v793 <= (int)v754 - (int)v791)
                        {
                          if ((_DWORD)v792)
                          {
                            if (v792 <= 0x10)
                              v794 = 16;
                            else
                              v794 = v792;
                            v795 = (void *)WTF::fastMalloc((WTF *)v794);
                            DWORD2(cf) = v794;
                            *(_QWORD *)&cf = v795;
                            memcpy(v795, v791, v792);
                            HIDWORD(cf) = v792;
                            v796 = (_DWORD *)((char *)v906 + v792);
                            v906 = (WTF::StringImpl *)((char *)v906 + v792);
                            if (LOBYTE(v892[1]))
                              goto LABEL_1530;
                            v754 = v907;
                          }
                          else
                          {
                            v796 = (_DWORD *)((char *)v791 + v792);
                            v906 = (WTF::StringImpl *)v796;
                          }
                          if (v796 > (_DWORD *)v754 - 1)
                            goto LABEL_1530;
                          v799 = *v796;
                          v797 = (WTF::StringImpl *)(v796 + 1);
                          v798 = v799;
                          v906 = v797;
                          if (v799 <= (int)v754 - (int)v797)
                          {
                            if ((_DWORD)v798)
                            {
                              if (v798 <= 0x10)
                                v800 = 16;
                              else
                                v800 = v798;
                              v801 = (void *)WTF::fastMalloc((WTF *)v800);
                              DWORD2(v949) = v800;
                              *(_QWORD *)&v949 = v801;
                              memcpy(v801, v797, v798);
                              HIDWORD(v949) = v798;
                              v802 = (_DWORD *)((char *)v906 + v798);
                              v906 = (WTF::StringImpl *)((char *)v906 + v798);
                              if (LOBYTE(v892[1]))
                                goto LABEL_1530;
                              v754 = v907;
                            }
                            else
                            {
                              v802 = (_DWORD *)((char *)v797 + v798);
                              v906 = (WTF::StringImpl *)v802;
                            }
                            if (v802 <= (_DWORD *)v754 - 1)
                            {
                              v805 = *v802;
                              v803 = (WTF::StringImpl *)(v802 + 1);
                              v804 = v805;
                              v906 = v803;
                              if (v805 > (int)v754 - (int)v803)
                                goto LABEL_1384;
                              if ((_DWORD)v804)
                              {
                                if (v804 <= 0x10)
                                  v814 = 16;
                                else
                                  v814 = v804;
                                v815 = (void *)WTF::fastMalloc((WTF *)v814);
                                DWORD2(v950) = v814;
                                *(_QWORD *)&v950 = v815;
                                memcpy(v815, v803, v804);
                                HIDWORD(v950) = v804;
                                v803 = v906;
                              }
                              v816 = (_DWORD *)((char *)v803 + v804);
                              v906 = (WTF::StringImpl *)v816;
                              if (v886 < 3)
                              {
LABEL_1496:
                                v868 = (_QWORD *)operator new();
                                WebCore::CryptoKeyRSAComponents::CryptoKeyRSAComponents(v868, (uint64_t)&v958, (uint64_t)&v956, (uint64_t)&v954, (uint64_t)&v951, (const void **)&cf, (unsigned int *)&v945);
                                WebCore::CryptoKeyRSA::create(v644, v890, v889, (uint64_t)v868, v517, v521, (uint64_t *)&v944);
                                v638 = v944;
                                (*(void (**)(_QWORD *))(*v868 + 8))(v868);
                                LODWORD(v777) = v947;
                                v758 = 1;
                                v778 = v945;
                                goto LABEL_1385;
                              }
                              __src = 0;
                              if (v777 <= 2)
                                v817 = 2;
                              else
                                v817 = v777;
                              v884 = (void *)(48 * v886 - 96);
                              v885 = (void *)(48 * v817 - 96);
                              while (1)
                              {
                                if (v885 == __src)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19440D8D4);
                                }
                                if (LOBYTE(v892[1]) || v816 > (_DWORD *)v907 - 1)
                                  break;
                                v820 = *v816;
                                v818 = (WTF::StringImpl *)(v816 + 1);
                                v819 = v820;
                                v906 = v818;
                                if (v820 > (int)v907 - (int)v818)
                                  goto LABEL_1384;
                                if ((_DWORD)v819)
                                {
                                  v887 = (WTF *)((char *)__src + (_QWORD)v778);
                                  v821 = (char *)__src + (_QWORD)v778;
                                  v822 = *(unsigned int *)((char *)__src + (_QWORD)v778 + 104);
                                  v886 = *(unsigned int *)((char *)__src + (_QWORD)v778 + 108);
                                  v823 = v886 + v819;
                                  if (v886 + v819 > v822)
                                  {
                                    v841 = v822 + (v822 >> 2);
                                    if (v841 >= 0x10)
                                      v842 = v841 + 1;
                                    else
                                      v842 = 16;
                                    if (v842 <= v823)
                                      v842 = v886 + v819;
                                    v843 = (WTF *)v842;
                                    if (HIDWORD(v842))
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x19440D8F4);
                                    }
                                    v844 = (WTF *)*((_QWORD *)v887 + 12);
                                    v882 = v843;
                                    v883 = v844;
                                    v845 = (void *)WTF::fastMalloc(v843);
                                    v846 = v883;
                                    *((_DWORD *)v821 + 26) = (_DWORD)v882;
                                    v847 = v886;
                                    *((_QWORD *)v887 + 12) = v845;
                                    memcpy(v845, v846, v847);
                                    if (v883)
                                    {
                                      v849 = v883;
                                      if (*((WTF **)v887 + 12) == v883)
                                      {
                                        *((_QWORD *)v887 + 12) = 0;
                                        *((_DWORD *)v821 + 26) = 0;
                                      }
                                      WTF::fastFree(v849, v848);
                                    }
                                  }
                                  v824 = *((unsigned int *)v821 + 27);
                                  if (v823 < v824)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19440D8DCLL);
                                  }
                                  memcpy((void *)(*((_QWORD *)v887 + 12) + v824), v818, v819);
                                  *((_DWORD *)v821 + 27) = v823;
                                  v825 = (_DWORD *)((char *)v906 + v819);
                                  v906 = (WTF::StringImpl *)((char *)v906 + v819);
                                  if (LOBYTE(v892[1]))
                                    break;
                                }
                                else
                                {
                                  v825 = (_DWORD *)((char *)v818 + v819);
                                  v906 = (WTF::StringImpl *)v825;
                                }
                                if (v825 > (_DWORD *)v907 - 1)
                                  break;
                                v828 = *v825;
                                v826 = (WTF::StringImpl *)(v825 + 1);
                                v827 = v828;
                                v906 = v826;
                                if (v828 > (int)v907 - (int)v826)
                                  goto LABEL_1384;
                                if ((_DWORD)v827)
                                {
                                  v887 = (WTF *)((char *)__src + (_QWORD)v778);
                                  v829 = (char *)__src + (_QWORD)v778;
                                  v830 = *(unsigned int *)((char *)__src + (_QWORD)v778 + 120);
                                  v886 = *(unsigned int *)((char *)__src + (_QWORD)v778 + 124);
                                  v831 = v886 + v827;
                                  if (v886 + v827 > v830)
                                  {
                                    v850 = v830 + (v830 >> 2);
                                    if (v850 >= 0x10)
                                      v851 = v850 + 1;
                                    else
                                      v851 = 16;
                                    if (v851 <= v831)
                                      v851 = v886 + v827;
                                    v852 = (WTF *)v851;
                                    if (HIDWORD(v851))
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x19440D8FCLL);
                                    }
                                    v853 = (WTF *)*((_QWORD *)v887 + 14);
                                    v882 = v852;
                                    v883 = v853;
                                    v854 = (void *)WTF::fastMalloc(v852);
                                    v855 = v883;
                                    *((_DWORD *)v829 + 30) = (_DWORD)v882;
                                    v856 = v886;
                                    *((_QWORD *)v887 + 14) = v854;
                                    memcpy(v854, v855, v856);
                                    if (v883)
                                    {
                                      v858 = v883;
                                      if (*((WTF **)v887 + 14) == v883)
                                      {
                                        *((_QWORD *)v887 + 14) = 0;
                                        *((_DWORD *)v829 + 30) = 0;
                                      }
                                      WTF::fastFree(v858, v857);
                                    }
                                  }
                                  v832 = *((unsigned int *)v829 + 31);
                                  if (v831 < v832)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19440D8E4);
                                  }
                                  memcpy((void *)(*((_QWORD *)v887 + 14) + v832), v826, v827);
                                  *((_DWORD *)v829 + 31) = v831;
                                  v833 = (_DWORD *)((char *)v906 + v827);
                                  v906 = (WTF::StringImpl *)((char *)v906 + v827);
                                  if (LOBYTE(v892[1]))
                                    break;
                                }
                                else
                                {
                                  v833 = (_DWORD *)((char *)v826 + v827);
                                  v906 = (WTF::StringImpl *)v833;
                                }
                                if (v833 > (_DWORD *)v907 - 1)
                                  break;
                                v836 = *v833;
                                v834 = (WTF::StringImpl *)(v833 + 1);
                                v835 = v836;
                                v906 = v834;
                                if (v836 > (int)v907 - (int)v834)
                                  goto LABEL_1384;
                                if ((_DWORD)v835)
                                {
                                  v887 = (WTF *)((char *)__src + (_QWORD)v778);
                                  v837 = (char *)__src + (_QWORD)v778;
                                  v838 = *(unsigned int *)((char *)__src + (_QWORD)v778 + 136);
                                  v886 = *(unsigned int *)((char *)__src + (_QWORD)v778 + 140);
                                  v839 = v886 + v835;
                                  if (v886 + v835 > v838)
                                  {
                                    v859 = v838 + (v838 >> 2);
                                    if (v859 >= 0x10)
                                      v860 = v859 + 1;
                                    else
                                      v860 = 16;
                                    if (v860 <= v839)
                                      v860 = v886 + v835;
                                    v861 = (WTF *)v860;
                                    if (HIDWORD(v860))
                                      goto LABEL_1605;
                                    v862 = (WTF *)*((_QWORD *)v887 + 16);
                                    v882 = v861;
                                    v883 = v862;
                                    v863 = (void *)WTF::fastMalloc(v861);
                                    v864 = v883;
                                    *((_DWORD *)v837 + 34) = (_DWORD)v882;
                                    v865 = v886;
                                    *((_QWORD *)v887 + 16) = v863;
                                    memcpy(v863, v864, v865);
                                    if (v883)
                                    {
                                      v867 = v883;
                                      if (*((WTF **)v887 + 16) == v883)
                                      {
                                        *((_QWORD *)v887 + 16) = 0;
                                        *((_DWORD *)v837 + 34) = 0;
                                      }
                                      WTF::fastFree(v867, v866);
                                    }
                                  }
                                  v840 = *((unsigned int *)v837 + 35);
                                  if (v839 < v840)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19440D8ECLL);
                                  }
                                  memcpy((void *)(*((_QWORD *)v887 + 16) + v840), v834, v835);
                                  *((_DWORD *)v837 + 35) = v839;
                                  v834 = v906;
                                }
                                v816 = (_DWORD *)((char *)v834 + v835);
                                v906 = (WTF::StringImpl *)v816;
                                __src = (char *)__src + 48;
                                if (v884 == __src)
                                  goto LABEL_1496;
                              }
                            }
LABEL_1530:
                            v638 = 0;
                            v758 = 0;
                            LOBYTE(v892[1]) = 1;
LABEL_1385:
                            if ((_DWORD)v777)
                            {
                              v806 = 48 * v777;
                              v807 = v778 + 24;
                              do
                              {
                                v808 = (WTF *)*((_QWORD *)v807 + 1);
                                if (v808)
                                {
                                  *((_QWORD *)v807 + 1) = 0;
                                  *((_DWORD *)v807 + 4) = 0;
                                  WTF::fastFree(v808, a2);
                                }
                                v809 = (WTF *)*((_QWORD *)v807 - 1);
                                if (v809)
                                {
                                  *((_QWORD *)v807 - 1) = 0;
                                  *(_DWORD *)v807 = 0;
                                  WTF::fastFree(v809, a2);
                                }
                                v810 = (WTF *)*((_QWORD *)v807 - 3);
                                if (v810)
                                {
                                  *((_QWORD *)v807 - 3) = 0;
                                  *((_DWORD *)v807 - 4) = 0;
                                  WTF::fastFree(v810, a2);
                                }
                                v807 += 48;
                                v806 -= 48;
                              }
                              while (v806);
                              v778 = v945;
                            }
                            if (v778)
                            {
                              v945 = 0;
                              v946 = 0;
                              WTF::fastFree((WTF *)v778, a2);
                            }
                            if ((_QWORD)v950)
                              WTF::fastFree((WTF *)v950, a2);
                            if ((_QWORD)v949)
                              WTF::fastFree((WTF *)v949, a2);
                            if ((_QWORD)cf)
                              WTF::fastFree((WTF *)cf, a2);
                            if ((_QWORD)v953)
                              WTF::fastFree((WTF *)v953, a2);
                            if ((_QWORD)v952)
                              WTF::fastFree((WTF *)v952, a2);
                            if ((_QWORD)v951)
                              WTF::fastFree((WTF *)v951, a2);
                            v765 = v954;
                            if (v954)
                              goto LABEL_1410;
LABEL_1411:
                            v887 = (WTF *)v956;
                            if (v956)
                              WTF::fastFree(v887, a2);
                            if (v958)
                              WTF::fastFree((WTF *)v958, a2);
                            if ((v758 & 1) == 0)
                            {
                              if (!v638)
                                break;
                              v811 = (unsigned int *)(v638 + 1);
                              do
                                v812 = __ldaxr(v811);
                              while (__stlxr(v812 - 1, v811));
                              if (v812 != 1)
                                break;
                              SlowCase = 0;
                              v641 = 0;
                              goto LABEL_1046;
                            }
LABEL_1416:
                            if (!v638)
                            {
LABEL_1244:
                              SlowCase = 2;
                              goto LABEL_803;
                            }
LABEL_1042:
                            SlowCase = WebCore::toJS((WebCore *)v892[0], v903, (WebCore::JSDOMGlobalObject *)v638, v279);
                            v639 = (unsigned int *)(v638 + 1);
                            do
                              v640 = __ldaxr(v639);
                            while (__stlxr(v640 - 1, v639));
                            if (v640 != 1)
                              goto LABEL_803;
                            v641 = 1;
LABEL_1046:
                            atomic_store(1u, (unsigned int *)v638 + 2);
                            (*((void (**)(WTF **))*v638 + 1))(v638);
                            if ((v641 & 1) != 0)
                              goto LABEL_803;
                            break;
                          }
                        }
                      }
                    }
LABEL_1384:
                    v638 = 0;
                    v758 = 0;
                    goto LABEL_1385;
                  }
                  v638 = 0;
                  v758 = 0;
                  if (!v765)
                    goto LABEL_1411;
LABEL_1410:
                  WTF::fastFree((WTF *)v765, a2);
                  goto LABEL_1411;
                }
LABEL_1528:
                v638 = 0;
                v758 = 0;
                LOBYTE(v892[1]) = 1;
                if (!v765)
                  goto LABEL_1411;
                goto LABEL_1410;
              }
LABEL_1497:
              LOBYTE(v892[1]) = 1;
LABEL_1298:
              if (__src)
              {
                v567 = (WTF *)__src;
LABEL_899:
                WTF::fastFree(v567, a2);
              }
              break;
            case 3u:
              if ((unint64_t)v561 > v526)
                goto LABEL_801;
              v906 = (WTF::StringImpl *)(v519 + 2);
              v648 = v519[1];
              if (v648 > 0x17)
                break;
              if (v648 == 4)
              {
                v649 = 5;
              }
              else
              {
                if (v648 != 5)
                  break;
                v649 = 6;
              }
              v951 = 0uLL;
              if (!WebCore::CloneDeserializer::readStringData((WebCore::CloneDeserializer *)v892, (WTF ***)&v951, &cf, 0))break;
              if (LOBYTE(v892[1]))
                goto LABEL_801;
              v707 = v906;
              if (v906 > (WTF::StringImpl *)(v907 - 1))
                goto LABEL_801;
              v708 = (unint64_t)v906 + 1;
              v906 = (WTF::StringImpl *)((char *)v906 + 1);
              v709 = *(unsigned __int8 *)v707;
              if (v709 > 1)
                break;
              cf = 0uLL;
              if (v708 > (unint64_t)(v907 - 4))
                goto LABEL_801;
              v710 = *(unsigned int *)((char *)v707 + 1);
              v711 = (WTF::StringImpl *)((char *)v707 + 5);
              v906 = (WTF::StringImpl *)((char *)v707 + 5);
              if (v710 > (int)v907 - ((int)v707 + 5))
                break;
              if ((_DWORD)v710)
              {
                if (v710 <= 0x10)
                  v712 = 16;
                else
                  v712 = v710;
                v713 = (void *)WTF::fastMalloc((WTF *)v712);
                DWORD2(cf) = v712;
                *(_QWORD *)&cf = v713;
                memcpy(v713, v711, v710);
                HIDWORD(cf) = v710;
                v711 = v906;
              }
              v906 = (WTF::StringImpl *)((char *)v711 + v710);
              if (v709 == 1)
              {
                if (*((_QWORD *)&v951 + 1) >= (unint64_t)*(unsigned int *)(v951 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19440D8C4);
                }
                v738 = (_QWORD *)(*(_QWORD *)v951 + 16 * *((_QWORD *)&v951 + 1));
                v739 = WebCore::executionContext((WebCore *)v892[0], (JSC::JSGlobalObject *)a2);
                (*(void (**)(uint64_t))(*(_QWORD *)v739 + 136))(v739);
                if ((MEMORY[0x19AEA53F4](*v738, "P-256", 5) & 1) != 0)
                {
                  v740 = 0;
                }
                else if ((MEMORY[0x19AEA53F4](*v738, "P-384", 5) & 1) != 0)
                {
                  v740 = 1;
                }
                else
                {
                  if (!MEMORY[0x19AEA53F4](*v738, "P-521", 5))
                  {
                    v638 = 0;
LABEL_1341:
                    v776 = (WTF *)cf;
                    if ((_QWORD)cf)
                    {
                      *(_QWORD *)&cf = 0;
                      DWORD2(cf) = 0;
                      WTF::fastFree(v776, a2);
                    }
                    goto LABEL_1416;
                  }
                  v740 = 2;
                }
                WebCore::CryptoKeyEC::platformImportPkcs8(v649, v740, (unsigned int *)&cf, v517, v521, (uint64_t *)&v958);
              }
              else
              {
                if (*((_QWORD *)&v951 + 1) >= (unint64_t)*(unsigned int *)(v951 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19440D8BCLL);
                }
                v714 = (_QWORD *)(*(_QWORD *)v951 + 16 * *((_QWORD *)&v951 + 1));
                v715 = WebCore::executionContext((WebCore *)v892[0], (JSC::JSGlobalObject *)a2);
                (*(void (**)(uint64_t))(*(_QWORD *)v715 + 136))(v715);
                WebCore::CryptoKeyEC::importRaw(v649, v714, (uint64_t)&cf, v517, v521, (uint64_t *)&v958);
              }
              v638 = v958;
              goto LABEL_1341;
            case 4u:
              if ((unint64_t)v561 > v526)
                goto LABEL_801;
              v906 = (WTF::StringImpl *)(v519 + 2);
              v632 = (char)v519[1];
              if (v632 > 0x17)
                break;
              if ((unint64_t)(v519 + 2) > v294)
                goto LABEL_801;
              v633 = byte_1968DFB40[v632];
              v634 = *(unsigned int *)(v519 + 2);
              v635 = (WTF::StringImpl *)(v519 + 6);
              v906 = (WTF::StringImpl *)(v519 + 6);
              if (v634 > (int)v907 - ((int)v519 + 6))
                break;
              if ((_DWORD)v634)
              {
                if (v634 <= 0x10)
                  v636 = 16;
                else
                  v636 = v634;
                v637 = (void *)WTF::fastMalloc((WTF *)v636);
                memcpy(v637, v635, v634);
                v635 = v906;
              }
              else
              {
                v637 = 0;
                LODWORD(v636) = 0;
              }
              v906 = (WTF::StringImpl *)((char *)v635 + v634);
              v638 = (WTF **)WTF::fastMalloc((WTF *)0x28);
              *((_DWORD *)v638 + 2) = 1;
              *((_BYTE *)v638 + 12) = v633;
              *(_WORD *)((char *)v638 + 13) = 2;
              *((_DWORD *)v638 + 4) = v521;
              *v638 = (WTF *)off_1E3397450;
              v638[3] = (WTF *)v637;
              *((_DWORD *)v638 + 8) = v636;
              *((_DWORD *)v638 + 9) = v634;
              goto LABEL_1042;
            case 5u:
              if ((unint64_t)v561 > v526)
                goto LABEL_801;
              v906 = (WTF::StringImpl *)(v519 + 2);
              if (v519[1] != 22)
                break;
              if ((unint64_t)(v519 + 2) > v526)
                goto LABEL_801;
              v906 = (WTF::StringImpl *)(v519 + 3);
              v657 = v519[2];
              if (v657 > 1)
                break;
              v658 = v657 == 1;
              if ((unint64_t)(v519 + 3) > v294)
                goto LABEL_801;
              v659 = *(unsigned int *)(v519 + 3);
              v660 = (char *)(v519 + 7);
              v906 = (WTF::StringImpl *)(v519 + 7);
              if (v659 > (int)v907 - ((int)v519 + 7))
                break;
              if (!(_DWORD)v659)
              {
                v880 = (WTF::StringImpl *)&v660[v659];
LABEL_1584:
                v906 = v880;
                goto LABEL_1244;
              }
              if (v659 <= 0x10)
                v661 = 16;
              else
                v661 = v659;
              v565 = (void *)WTF::fastMalloc((WTF *)v661);
              memcpy(v565, v660, v659);
              v906 = (WTF::StringImpl *)((char *)v906 + v659);
              if ((_DWORD)v659 == 32)
              {
                v638 = (WTF **)WTF::fastMalloc((WTF *)0x28);
                *((_DWORD *)v638 + 2) = 1;
                *((_BYTE *)v638 + 12) = 20;
                *((_BYTE *)v638 + 13) = (v521 & 4) != 0;
                *((_BYTE *)v638 + 14) = v517;
                *v638 = (WTF *)off_1E3397400;
                *((_DWORD *)v638 + 4) = v521;
                *((_DWORD *)v638 + 5) = v658;
                v638[3] = (WTF *)v565;
                *((_DWORD *)v638 + 8) = v661;
                *((_DWORD *)v638 + 9) = 32;
                goto LABEL_1042;
              }
              goto LABEL_1234;
            default:
              goto LABEL_1244;
          }
        }
      }
      else
      {
        if (v295 > (unint64_t)(v907 - 1))
          goto LABEL_801;
        v297 = (int *)((char *)v293 + 5);
        v906 = (WTF::StringImpl *)((char *)v293 + 5);
        v298 = *((unsigned __int8 *)v293 + 4);
        if (v298 <= 1)
        {
          v299 = v298 == 0;
          goto LABEL_782;
        }
      }
LABEL_802:
      SlowCase = 0;
      *((_BYTE *)this + 8) = 1;
LABEL_803:
      WebCore::CloneDeserializer::~CloneDeserializer((WebCore::CloneDeserializer *)v892, a2);
      if (HIDWORD(v938))
      {
        v736 = (uint64_t *)v937;
        v737 = 8 * HIDWORD(v938);
        do
        {
          v736 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v736, a2)+ 1;
          v737 -= 8;
        }
        while (v737);
      }
      v527 = v937;
      if (v937)
      {
        v937 = 0;
        LODWORD(v938) = 0;
        WTF::fastFree(v527, a2);
      }
      if (v941)
      {
        v528 = v939;
        if (v939)
        {
          v939 = 0;
          LODWORD(v940) = 0;
          WTF::fastFree(v528, a2);
        }
      }
LABEL_593:
      v394 = v942;
      if (v942)
      {
        v942 = 0;
        LODWORD(v943) = 0;
        goto LABEL_607;
      }
      return SlowCase;
    case 0x22u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v264 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      v265 = *((_QWORD *)this + 44);
      if (!v265 || *(_DWORD *)(v265 + 12) <= v264 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 1963))
        goto LABEL_963;
      v266 = *(_QWORD *)(*(_QWORD *)v265 + 56 * v264);
      if (!v266
        || (v267 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
        && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        && !((v266 & 0x3FFFFFFFFLL) + v267))
      {
        __break(0xC471u);
        JUMPOUT(0x19440BEC0);
      }
      v893 = 0u;
      memset(v894, 0, 17);
      *(_OWORD *)v892 = 0u;
      JSC::ArrayBufferContents::shareWith();
      JSC::ArrayBuffer::create();
      SlowCase = WebCore::toJS(*(WebCore **)this, *((_QWORD *)this + 27), (WebCore::JSDOMGlobalObject *)v951, v268);
      v270 = *((unsigned int *)this + 30);
      v269 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v270 == *((_DWORD *)this + 31)
        || (v271 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v271 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v271)
      {
        v665.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v269, v665) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_1094;
        }
      }
      else
      {
        *((_QWORD *)v271 + v270) = SlowCase;
        *(_DWORD *)v269 = v270 + 1;
      }
      if (!*((_BYTE *)this + 112))
      {
        v272 = (WTF::DeferrableRefCountedBase *)v951;
        *(_QWORD *)&v951 = 0;
        if (v272)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v272);
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v892);
        return SlowCase;
      }
LABEL_1094:
      __break(0xC471u);
      JUMPOUT(0x19440B96CLL);
    case 0x23u:
      if (*((_DWORD *)this + 62) < 0xCu)
        goto LABEL_655;
      v892[0] = 0;
      v892[1] = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)v892, &v951, 0))
        goto LABEL_963;
      if (v892[1] >= (CFTypeRef)*((unsigned int *)v892[0] + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D76CLL);
      }
      v109 = (WTF **)(*(_QWORD *)v892[0] + 16 * (uint64_t)v892[1]);
      v110 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)this + 27);
      v111 = *(unsigned int *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x4C);
      v112 = *(_DWORD *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x4C) != 0;
      v113 = (char **)(16 * v111);
      if ((_DWORD)v111)
        v114 = v113 == &WebCore::JSDOMGlobalObject::s_info;
      else
        v114 = 1;
      if (!v114)
      {
        do
        {
          v113 = (char **)v113[2];
          v112 = v113 != 0;
        }
        while (v113 != &WebCore::JSDOMGlobalObject::s_info && v113 != 0);
      }
      if (v112)
        WebCore::JSDOMGlobalObject::agentClusterID(v110, &v951);
      else
        WebCore::JSDOMGlobalObject::defaultAgentClusterID(&v951);
      v412 = WTF::equal(*v109, (const WTF::StringImpl *)v951, v116);
      v413 = (WTF::StringImpl *)v951;
      *(_QWORD *)&v951 = 0;
      if (!v413)
        goto LABEL_654;
      if (*(_DWORD *)v413 == 2)
      {
        WTF::StringImpl::destroy(v413, v411);
        if ((v412 & 1) == 0)
          goto LABEL_963;
      }
      else
      {
        *(_DWORD *)v413 -= 2;
LABEL_654:
        if ((v412 & 1) == 0)
          goto LABEL_963;
      }
LABEL_655:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v414 = (unsigned int *)*((_QWORD *)this + 29);
      if ((unint64_t)v414 > *((_QWORD *)this + 30) - 4)
        goto LABEL_963;
      v415 = *v414;
      *((_QWORD *)this + 29) = v414 + 1;
      v416 = *((_QWORD *)this + 63);
      if (!v416)
        goto LABEL_963;
      v417 = *(_DWORD *)(v416 + 12);
      if (v417 <= v415)
        goto LABEL_963;
      v418 = *((_QWORD *)this + 27);
      v419 = *(_QWORD *)(v418 + 1392);
      if ((v419 & 1) != 0)
      {
        v700 = *(void (**)(CFTypeRef *))(v419 & 0xFFFFFFFFFFFFFFFCLL);
        v701 = (CFTypeRef *)(v418 - 16);
        if ((v418 & 8) == 0)
          v701 = (CFTypeRef *)(v418 & 0xFFFFFFFFFFFFC000 | 8);
        v892[0] = *v701;
        v892[1] = (CFTypeRef)v418;
        *(_QWORD *)&v893 = v418 + 1392;
        v700(v892);
        v416 = *((_QWORD *)this + 63);
        v417 = *(_DWORD *)(v416 + 12);
      }
      if (v417 <= v415)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D784);
      }
      v420 = *(unsigned int **)(*(_QWORD *)v416 + 8 * v415);
      do
        v421 = __ldaxr(v420);
      while (__stlxr(v421 + 1, v420));
      v892[0] = v420;
      SlowCase = JSC::JSWebAssemblyModule::create();
      v422 = (unsigned int *)v892[0];
      v892[0] = 0;
      if (v422)
      {
        do
        {
          v423 = __ldaxr(v422);
          v424 = v423 - 1;
        }
        while (__stlxr(v424, v422));
        if (!v424)
        {
          atomic_store(1u, v422);
          v394 = (WTF::StringImpl *)MEMORY[0x19AEA3D2C]();
          goto LABEL_607;
        }
      }
      return SlowCase;
    case 0x24u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v136 = v7 - 8;
      if ((unint64_t)v8 > v136)
        goto LABEL_963;
      v137 = *(double *)v8;
      *v9 = v8 + 2;
      if ((unint64_t)(v8 + 2) > v136)
        goto LABEL_963;
      v138 = *((_QWORD *)v8 + 1);
      *v9 = v8 + 4;
      if ((unint64_t)(v8 + 4) > v136)
        goto LABEL_963;
      v139 = *((_QWORD *)v8 + 2);
      *v9 = v8 + 6;
      if ((unint64_t)(v8 + 6) > v136)
        goto LABEL_963;
      v140 = *((_QWORD *)v8 + 3);
      *v9 = v8 + 8;
      v141 = *(_QWORD *)this;
      v142 = (double *)bmalloc::api::isoAllocate();
      *v142 = 0.0;
      *((_DWORD *)v142 + 2) = 1;
      v142[2] = v137;
      *((_QWORD *)v142 + 3) = v138;
      *((_QWORD *)v142 + 4) = v139;
      *((_QWORD *)v142 + 5) = v140;
      v892[0] = v142;
      v143 = WebCore::toJSNewlyCreated(v141, v11, (uint64_t *)v892);
      goto LABEL_499;
    case 0x25u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v161 = v7 - 8;
      if ((unint64_t)v8 > v161)
        goto LABEL_963;
      v162 = *(double *)v8;
      *v9 = v8 + 2;
      if ((unint64_t)(v8 + 2) > v161)
        goto LABEL_963;
      v163 = *((_QWORD *)v8 + 1);
      *v9 = v8 + 4;
      if ((unint64_t)(v8 + 4) > v161)
        goto LABEL_963;
      v164 = *((_QWORD *)v8 + 2);
      *v9 = v8 + 6;
      if ((unint64_t)(v8 + 6) > v161)
        goto LABEL_963;
      v165 = *((_QWORD *)v8 + 3);
      *v9 = v8 + 8;
      v166 = *(_QWORD *)this;
      v167 = (double *)bmalloc::api::isoAllocate();
      *v167 = 0.0;
      *((_DWORD *)v167 + 2) = 1;
      v167[2] = v162;
      *((_QWORD *)v167 + 3) = v163;
      *((_QWORD *)v167 + 4) = v164;
      *((_QWORD *)v167 + 5) = v165;
      v892[0] = v167;
      v143 = WebCore::toJSNewlyCreated(v166, (JSC::VM *)v11, (WebCore::JSDOMGlobalObject *)v892);
      goto LABEL_499;
    case 0x26u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v145 = v7 - 8;
      if ((unint64_t)v8 > v145)
        goto LABEL_963;
      v146 = *(double *)v8;
      *v9 = v8 + 2;
      if ((unint64_t)(v8 + 2) > v145)
        goto LABEL_963;
      v147 = *((_QWORD *)v8 + 1);
      *v9 = v8 + 4;
      if ((unint64_t)(v8 + 4) > v145)
        goto LABEL_963;
      v148 = *((_QWORD *)v8 + 2);
      *v9 = v8 + 6;
      if ((unint64_t)(v8 + 6) > v145)
        goto LABEL_963;
      v149 = *((_QWORD *)v8 + 3);
      *v9 = v8 + 8;
      v150 = (double *)bmalloc::api::isoAllocate();
      *v150 = 0.0;
      *((_DWORD *)v150 + 2) = 1;
      v150[2] = v146;
      *((_QWORD *)v150 + 3) = v147;
      *((_QWORD *)v150 + 4) = v148;
      *((_QWORD *)v150 + 5) = v149;
      v892[0] = v150;
      v143 = WebCore::createWrapper<WebCore::DOMRectReadOnly,WebCore::DOMRectReadOnly>(v11, (uint64_t *)v892);
      goto LABEL_499;
    case 0x27u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v341 = v7 - 8;
      if ((unint64_t)v8 > v341)
        goto LABEL_963;
      v342 = *(double *)v8;
      *v9 = v8 + 2;
      if ((unint64_t)(v8 + 2) > v341)
        goto LABEL_963;
      v343 = *((_QWORD *)v8 + 1);
      *v9 = v8 + 4;
      if ((unint64_t)(v8 + 4) > v341)
        goto LABEL_963;
      v344 = *((_QWORD *)v8 + 2);
      *v9 = v8 + 6;
      if ((unint64_t)(v8 + 6) > v341)
        goto LABEL_963;
      v345 = *((_QWORD *)v8 + 3);
      *v9 = v8 + 8;
      v346 = *(_QWORD *)this;
      v347 = (double *)bmalloc::api::isoAllocate();
      *v347 = 0.0;
      *((_DWORD *)v347 + 2) = 1;
      v347[2] = v342;
      *((_QWORD *)v347 + 3) = v343;
      *((_QWORD *)v347 + 4) = v344;
      *((_QWORD *)v347 + 5) = v345;
      v892[0] = v347;
      v143 = WebCore::toJSNewlyCreated(v346, (JSC::VM *)v11, (uint64_t *)v892);
      goto LABEL_499;
    case 0x28u:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 1)
        goto LABEL_963;
      v88 = (char *)v8 + 1;
      *v9 = (unsigned int *)((char *)v8 + 1);
      if (*(unsigned __int8 *)v8 > 1u)
        return 0;
      v89 = v7 - 8;
      if (*(_BYTE *)v8)
      {
        if ((unint64_t)v88 > v89)
          goto LABEL_963;
        v90 = *(_QWORD *)((char *)v8 + 1);
        *v9 = (unsigned int *)((char *)v8 + 9);
        if ((unint64_t)v8 + 9 > v89)
          goto LABEL_963;
        v91 = *(_QWORD *)((char *)v8 + 9);
        *v9 = (unsigned int *)((char *)v8 + 17);
        if ((unint64_t)v8 + 17 > v89)
          goto LABEL_963;
        v92 = *(_QWORD *)((char *)v8 + 17);
        *v9 = (unsigned int *)((char *)v8 + 25);
        if ((unint64_t)v8 + 25 > v89)
          goto LABEL_963;
        v93 = *(_QWORD *)((char *)v8 + 25);
        *v9 = (unsigned int *)((char *)v8 + 33);
        if ((unint64_t)v8 + 33 > v89)
          goto LABEL_963;
        v94 = *(_QWORD *)((char *)v8 + 33);
        *v9 = (unsigned int *)((char *)v8 + 41);
        if ((unint64_t)v8 + 41 > v89)
          goto LABEL_963;
        v95 = *(_QWORD *)((char *)v8 + 41);
        *v9 = (unsigned int *)((char *)v8 + 49);
        v96 = *(_QWORD *)this;
        v97 = (_DWORD *)bmalloc::api::isoAllocate();
        *(_QWORD *)v97 = 0;
        v97[2] = 1;
        *((_QWORD *)v97 + 2) = v90;
        *((_QWORD *)v97 + 3) = v91;
        *((_QWORD *)v97 + 4) = 0;
        *((_QWORD *)v97 + 5) = 0;
        *((_QWORD *)v97 + 6) = v92;
        *((_QWORD *)v97 + 7) = v93;
        *((_QWORD *)v97 + 8) = 0;
        *((_QWORD *)v97 + 9) = 0;
        *((_OWORD *)v97 + 5) = xmmword_1968DFA90;
        *((_OWORD *)v97 + 6) = unk_1968DFAA0;
        *((_QWORD *)v97 + 14) = v94;
        *((_QWORD *)v97 + 15) = v95;
        *((_OWORD *)v97 + 8) = xmmword_1968A14C0;
        *((_BYTE *)v97 + 144) = 1;
      }
      else
      {
        if ((unint64_t)v88 > v89)
          goto LABEL_963;
        v470 = *(_QWORD *)((char *)v8 + 1);
        *v9 = (unsigned int *)((char *)v8 + 9);
        if ((unint64_t)v8 + 9 > v89)
          goto LABEL_963;
        v471 = *(_QWORD *)((char *)v8 + 9);
        *v9 = (unsigned int *)((char *)v8 + 17);
        if ((unint64_t)v8 + 17 > v89)
          goto LABEL_963;
        v472 = *(_QWORD *)((char *)v8 + 17);
        *v9 = (unsigned int *)((char *)v8 + 25);
        if ((unint64_t)v8 + 25 > v89)
          goto LABEL_963;
        v473 = *(_QWORD *)((char *)v8 + 25);
        *v9 = (unsigned int *)((char *)v8 + 33);
        if ((unint64_t)v8 + 33 > v89)
          goto LABEL_963;
        v474 = *(_QWORD *)((char *)v8 + 33);
        *v9 = (unsigned int *)((char *)v8 + 41);
        if ((unint64_t)v8 + 41 > v89)
          goto LABEL_963;
        v475 = *(_QWORD *)((char *)v8 + 41);
        *v9 = (unsigned int *)((char *)v8 + 49);
        if ((unint64_t)v8 + 49 > v89)
          goto LABEL_963;
        v476 = *(_QWORD *)((char *)v8 + 49);
        *v9 = (unsigned int *)((char *)v8 + 57);
        if ((unint64_t)v8 + 57 > v89)
          goto LABEL_963;
        v477 = *(_QWORD *)((char *)v8 + 57);
        *v9 = (unsigned int *)((char *)v8 + 65);
        if ((unint64_t)v8 + 65 > v89)
          goto LABEL_963;
        v478 = *(void **)((char *)v8 + 65);
        *v9 = (unsigned int *)((char *)v8 + 73);
        if ((unint64_t)v8 + 73 > v89)
          goto LABEL_963;
        v479 = *(WTF **)((char *)v8 + 73);
        *v9 = (unsigned int *)((char *)v8 + 81);
        if ((unint64_t)v8 + 81 > v89)
          goto LABEL_963;
        v480 = *(_QWORD *)((char *)v8 + 81);
        *v9 = (unsigned int *)((char *)v8 + 89);
        if ((unint64_t)v8 + 89 > v89)
          goto LABEL_963;
        v481 = *(void **)((char *)v8 + 89);
        *v9 = (unsigned int *)((char *)v8 + 97);
        if ((unint64_t)v8 + 97 > v89)
          goto LABEL_963;
        v482 = *(void **)((char *)v8 + 97);
        *v9 = (unsigned int *)((char *)v8 + 105);
        if ((unint64_t)v8 + 105 > v89)
          goto LABEL_963;
        v483 = *(WTF **)((char *)v8 + 105);
        *v9 = (unsigned int *)((char *)v8 + 113);
        if ((unint64_t)v8 + 113 > v89)
          goto LABEL_963;
        v484 = *(_QWORD *)((char *)v8 + 113);
        *v9 = (unsigned int *)((char *)v8 + 121);
        if ((unint64_t)v8 + 121 > v89)
          goto LABEL_963;
        v883 = v483;
        v884 = v482;
        v885 = v481;
        v886 = v480;
        v887 = v479;
        __src = v478;
        v889 = v477;
        v890 = v476;
        v485 = *(_QWORD *)((char *)v8 + 121);
        *v9 = (unsigned int *)((char *)v8 + 129);
        v96 = *(_QWORD *)this;
        v97 = (_DWORD *)bmalloc::api::isoAllocate();
        *(_QWORD *)v97 = 0;
        v97[2] = 1;
        *((_QWORD *)v97 + 2) = v470;
        *((_QWORD *)v97 + 3) = v471;
        *((_QWORD *)v97 + 4) = v472;
        *((_QWORD *)v97 + 5) = v473;
        *((_QWORD *)v97 + 6) = v474;
        *((_QWORD *)v97 + 7) = v475;
        v486 = v889;
        *((_QWORD *)v97 + 8) = v890;
        *((_QWORD *)v97 + 9) = v486;
        v487 = v887;
        *((_QWORD *)v97 + 10) = __src;
        *((_QWORD *)v97 + 11) = v487;
        v488 = v885;
        *((_QWORD *)v97 + 12) = v886;
        *((_QWORD *)v97 + 13) = v488;
        v489 = v883;
        *((_QWORD *)v97 + 14) = v884;
        *((_QWORD *)v97 + 15) = v489;
        *((_QWORD *)v97 + 16) = v484;
        *((_QWORD *)v97 + 17) = v485;
        *((_BYTE *)v97 + 144) = 0;
      }
      v892[0] = v97;
      v143 = WebCore::toJSNewlyCreated(v96, v11, (uint64_t *)v892);
      goto LABEL_499;
    case 0x29u:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 1)
        goto LABEL_963;
      v234 = (char *)v8 + 1;
      *v9 = (unsigned int *)((char *)v8 + 1);
      if (*(unsigned __int8 *)v8 > 1u)
        return 0;
      v235 = v7 - 8;
      if (*(_BYTE *)v8)
      {
        if ((unint64_t)v234 > v235)
          goto LABEL_963;
        v236 = *(_QWORD *)((char *)v8 + 1);
        *v9 = (unsigned int *)((char *)v8 + 9);
        if ((unint64_t)v8 + 9 > v235)
          goto LABEL_963;
        v237 = *(_QWORD *)((char *)v8 + 9);
        *v9 = (unsigned int *)((char *)v8 + 17);
        if ((unint64_t)v8 + 17 > v235)
          goto LABEL_963;
        v238 = *(_QWORD *)((char *)v8 + 17);
        *v9 = (unsigned int *)((char *)v8 + 25);
        if ((unint64_t)v8 + 25 > v235)
          goto LABEL_963;
        v239 = *(_QWORD *)((char *)v8 + 25);
        *v9 = (unsigned int *)((char *)v8 + 33);
        if ((unint64_t)v8 + 33 > v235)
          goto LABEL_963;
        v240 = *(_QWORD *)((char *)v8 + 33);
        *v9 = (unsigned int *)((char *)v8 + 41);
        if ((unint64_t)v8 + 41 > v235)
          goto LABEL_963;
        v241 = *(_QWORD *)((char *)v8 + 41);
        *v9 = (unsigned int *)((char *)v8 + 49);
        v242 = *(_QWORD *)this;
        v243 = (_DWORD *)bmalloc::api::isoAllocate();
        *(_QWORD *)v243 = 0;
        v243[2] = 1;
        *((_QWORD *)v243 + 2) = v236;
        *((_QWORD *)v243 + 3) = v237;
        *((_QWORD *)v243 + 4) = 0;
        *((_QWORD *)v243 + 5) = 0;
        *((_QWORD *)v243 + 6) = v238;
        *((_QWORD *)v243 + 7) = v239;
        *((_QWORD *)v243 + 8) = 0;
        *((_QWORD *)v243 + 9) = 0;
        *((_OWORD *)v243 + 5) = xmmword_1968DFA90;
        *((_OWORD *)v243 + 6) = unk_1968DFAA0;
        *((_QWORD *)v243 + 14) = v240;
        *((_QWORD *)v243 + 15) = v241;
        *((_OWORD *)v243 + 8) = xmmword_1968A14C0;
        *((_BYTE *)v243 + 144) = 1;
      }
      else
      {
        if ((unint64_t)v234 > v235)
          goto LABEL_963;
        v490 = *(_QWORD *)((char *)v8 + 1);
        *v9 = (unsigned int *)((char *)v8 + 9);
        if ((unint64_t)v8 + 9 > v235)
          goto LABEL_963;
        v491 = *(_QWORD *)((char *)v8 + 9);
        *v9 = (unsigned int *)((char *)v8 + 17);
        if ((unint64_t)v8 + 17 > v235)
          goto LABEL_963;
        v492 = *(_QWORD *)((char *)v8 + 17);
        *v9 = (unsigned int *)((char *)v8 + 25);
        if ((unint64_t)v8 + 25 > v235)
          goto LABEL_963;
        v493 = *(_QWORD *)((char *)v8 + 25);
        *v9 = (unsigned int *)((char *)v8 + 33);
        if ((unint64_t)v8 + 33 > v235)
          goto LABEL_963;
        v494 = *(_QWORD *)((char *)v8 + 33);
        *v9 = (unsigned int *)((char *)v8 + 41);
        if ((unint64_t)v8 + 41 > v235)
          goto LABEL_963;
        v495 = *(_QWORD *)((char *)v8 + 41);
        *v9 = (unsigned int *)((char *)v8 + 49);
        if ((unint64_t)v8 + 49 > v235)
          goto LABEL_963;
        v496 = *(_QWORD *)((char *)v8 + 49);
        *v9 = (unsigned int *)((char *)v8 + 57);
        if ((unint64_t)v8 + 57 > v235)
          goto LABEL_963;
        v497 = *(_QWORD *)((char *)v8 + 57);
        *v9 = (unsigned int *)((char *)v8 + 65);
        if ((unint64_t)v8 + 65 > v235)
          goto LABEL_963;
        v498 = *(void **)((char *)v8 + 65);
        *v9 = (unsigned int *)((char *)v8 + 73);
        if ((unint64_t)v8 + 73 > v235)
          goto LABEL_963;
        v499 = *(WTF **)((char *)v8 + 73);
        *v9 = (unsigned int *)((char *)v8 + 81);
        if ((unint64_t)v8 + 81 > v235)
          goto LABEL_963;
        v500 = *(_QWORD *)((char *)v8 + 81);
        *v9 = (unsigned int *)((char *)v8 + 89);
        if ((unint64_t)v8 + 89 > v235)
          goto LABEL_963;
        v501 = *(void **)((char *)v8 + 89);
        *v9 = (unsigned int *)((char *)v8 + 97);
        if ((unint64_t)v8 + 97 > v235)
          goto LABEL_963;
        v502 = *(void **)((char *)v8 + 97);
        *v9 = (unsigned int *)((char *)v8 + 105);
        if ((unint64_t)v8 + 105 > v235)
          goto LABEL_963;
        v503 = *(WTF **)((char *)v8 + 105);
        *v9 = (unsigned int *)((char *)v8 + 113);
        if ((unint64_t)v8 + 113 > v235)
          goto LABEL_963;
        v504 = *(_QWORD *)((char *)v8 + 113);
        *v9 = (unsigned int *)((char *)v8 + 121);
        if ((unint64_t)v8 + 121 > v235)
          goto LABEL_963;
        v883 = v503;
        v884 = v502;
        v885 = v501;
        v886 = v500;
        v887 = v499;
        __src = v498;
        v889 = v497;
        v890 = v496;
        v505 = *(_QWORD *)((char *)v8 + 121);
        *v9 = (unsigned int *)((char *)v8 + 129);
        v242 = *(_QWORD *)this;
        v243 = (_DWORD *)bmalloc::api::isoAllocate();
        *(_QWORD *)v243 = 0;
        v243[2] = 1;
        *((_QWORD *)v243 + 2) = v490;
        *((_QWORD *)v243 + 3) = v491;
        *((_QWORD *)v243 + 4) = v492;
        *((_QWORD *)v243 + 5) = v493;
        *((_QWORD *)v243 + 6) = v494;
        *((_QWORD *)v243 + 7) = v495;
        v506 = v889;
        *((_QWORD *)v243 + 8) = v890;
        *((_QWORD *)v243 + 9) = v506;
        v507 = v887;
        *((_QWORD *)v243 + 10) = __src;
        *((_QWORD *)v243 + 11) = v507;
        v508 = v885;
        *((_QWORD *)v243 + 12) = v886;
        *((_QWORD *)v243 + 13) = v508;
        v509 = v883;
        *((_QWORD *)v243 + 14) = v884;
        *((_QWORD *)v243 + 15) = v509;
        *((_QWORD *)v243 + 16) = v504;
        *((_QWORD *)v243 + 17) = v505;
        *((_BYTE *)v243 + 144) = 0;
      }
      v892[0] = v243;
      v143 = WebCore::toJSNewlyCreated(v242, (JSC::VM *)v11, (WebCore::JSDOMGlobalObject *)v892);
LABEL_499:
      SlowCase = v143;
      v339 = (bmalloc::api *)v892[0];
      v892[0] = 0;
      if (v339)
      {
        v340 = *((_DWORD *)v339 + 2) - 1;
        if (*((_DWORD *)v339 + 2) == 1)
        {
          if (*(_QWORD *)v339)
          {
            *(_QWORD *)(*(_QWORD *)v339 + 8) = 3;
            *(_QWORD *)v339 = 0;
          }
LABEL_641:
          bmalloc::api::isoDeallocate(v339, v144);
        }
        else
        {
LABEL_501:
          *((_DWORD *)v339 + 2) = v340;
        }
      }
      return SlowCase;
    case 0x2Au:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v311 = v7 - 8;
      if ((unint64_t)v8 > v311)
        goto LABEL_963;
      v312 = *(double *)v8;
      *v9 = v8 + 2;
      if ((unint64_t)(v8 + 2) > v311)
        goto LABEL_963;
      v313 = *((_QWORD *)v8 + 1);
      *v9 = v8 + 4;
      if ((unint64_t)(v8 + 4) > v311)
        goto LABEL_963;
      v314 = *((_QWORD *)v8 + 2);
      *v9 = v8 + 6;
      if ((unint64_t)(v8 + 6) > v311)
        goto LABEL_963;
      v315 = *((_QWORD *)v8 + 3);
      *v9 = v8 + 8;
      if ((unint64_t)(v8 + 8) > v311)
        goto LABEL_963;
      v316 = *((_QWORD *)v8 + 4);
      *v9 = v8 + 10;
      if ((unint64_t)(v8 + 10) > v311)
        goto LABEL_963;
      v317 = *((_QWORD *)v8 + 5);
      *v9 = v8 + 12;
      if ((unint64_t)(v8 + 12) > v311)
        goto LABEL_963;
      v318 = *((_QWORD *)v8 + 6);
      *v9 = v8 + 14;
      if ((unint64_t)(v8 + 14) > v311)
        goto LABEL_963;
      v319 = *((_QWORD *)v8 + 7);
      *v9 = v8 + 16;
      if ((unint64_t)(v8 + 16) > v311)
        goto LABEL_963;
      v320 = *((_QWORD *)v8 + 8);
      *v9 = v8 + 18;
      if ((unint64_t)(v8 + 18) > v311)
        goto LABEL_963;
      v321 = (void *)*((_QWORD *)v8 + 9);
      *v9 = v8 + 20;
      if ((unint64_t)(v8 + 20) > v311)
        goto LABEL_963;
      v322 = (WTF *)*((_QWORD *)v8 + 10);
      *v9 = v8 + 22;
      if ((unint64_t)(v8 + 22) > v311)
        goto LABEL_963;
      v323 = *((_QWORD *)v8 + 11);
      *v9 = v8 + 24;
      if ((unint64_t)(v8 + 24) > v311)
        goto LABEL_963;
      v324 = (void *)*((_QWORD *)v8 + 12);
      *v9 = v8 + 26;
      if ((unint64_t)(v8 + 26) > v311)
        goto LABEL_963;
      v325 = (void *)*((_QWORD *)v8 + 13);
      *v9 = v8 + 28;
      if ((unint64_t)(v8 + 28) > v311)
        goto LABEL_963;
      v326 = (WTF *)*((_QWORD *)v8 + 14);
      *v9 = v8 + 30;
      if ((unint64_t)(v8 + 30) > v311)
        goto LABEL_963;
      v883 = v326;
      v884 = v325;
      v885 = v324;
      v886 = v323;
      v887 = v322;
      __src = v321;
      v889 = v320;
      v890 = v319;
      v327 = *((_QWORD *)v8 + 15);
      *v9 = v8 + 32;
      v328 = *(_QWORD *)this;
      v329 = (_DWORD *)bmalloc::api::isoAllocate();
      *(_QWORD *)v329 = 0;
      v329[2] = 1;
      v330 = bmalloc::api::isoAllocate();
      *(_QWORD *)v330 = 0;
      *(_DWORD *)(v330 + 8) = 1;
      *(double *)(v330 + 16) = v312;
      *(_QWORD *)(v330 + 24) = v313;
      *(_QWORD *)(v330 + 32) = v314;
      *(_QWORD *)(v330 + 40) = v315;
      *((_QWORD *)v329 + 2) = v330;
      v331 = bmalloc::api::isoAllocate();
      *(_QWORD *)v331 = 0;
      *(_DWORD *)(v331 + 8) = 1;
      *(_QWORD *)(v331 + 16) = v316;
      *(_QWORD *)(v331 + 24) = v317;
      v332 = v890;
      *(_QWORD *)(v331 + 32) = v318;
      *(_QWORD *)(v331 + 40) = v332;
      *((_QWORD *)v329 + 3) = v331;
      v333 = bmalloc::api::isoAllocate();
      *(_QWORD *)v333 = 0;
      *(_DWORD *)(v333 + 8) = 1;
      v334 = __src;
      *(_QWORD *)(v333 + 16) = v889;
      *(_QWORD *)(v333 + 24) = v334;
      v335 = v886;
      *(_QWORD *)(v333 + 32) = v887;
      *(_QWORD *)(v333 + 40) = v335;
      *((_QWORD *)v329 + 4) = v333;
      v336 = bmalloc::api::isoAllocate();
      *(_QWORD *)v336 = 0;
      *(_DWORD *)(v336 + 8) = 1;
      v337 = v884;
      *(_QWORD *)(v336 + 16) = v885;
      *(_QWORD *)(v336 + 24) = v337;
      *(_QWORD *)(v336 + 32) = v883;
      *(_QWORD *)(v336 + 40) = v327;
      *((_QWORD *)v329 + 5) = v336;
      v892[0] = v329;
      SlowCase = WebCore::toJSNewlyCreated(v328, v11, (uint64_t *)v892);
      v339 = (bmalloc::api *)v892[0];
      v892[0] = 0;
      if (!v339)
        return SlowCase;
      v340 = *((_DWORD *)v339 + 2) - 1;
      if (*((_DWORD *)v339 + 2) != 1)
        goto LABEL_501;
      WebCore::DOMQuad::~DOMQuad(v339, v338);
      goto LABEL_641;
    case 0x2Bu:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v58 = *v8;
      v57 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 93) <= v58)
        goto LABEL_963;
      v59 = *((_DWORD *)this + 97);
      if (v59 <= v57)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6C8);
      }
      if (*(_QWORD *)(*((_QWORD *)this + 47) + 8 * v57)
        || !*(_BYTE *)(*((_QWORD *)this + 45) + 24 * v57 + 16))
      {
        goto LABEL_87;
      }
      v60 = WebCore::executionContext(*(WebCore **)this, (JSC::JSGlobalObject *)a2);
      if (*((_DWORD *)this + 93) <= v57)
      {
        __break(0xC471u);
      }
      else
      {
        v61 = *((_QWORD *)this + 45) + 24 * v57;
        if (*(_BYTE *)(v61 + 16))
        {
          v62 = *(const void **)v61;
          *(_QWORD *)v61 = 0;
          v892[0] = v62;
          LOBYTE(v892[1]) = *(_BYTE *)(v61 + 8);
          WebCore::ImageBitmap::create(v60, (uint64_t *)v892, (uint64_t *)&v951);
          if (*((_DWORD *)this + 97) > v57)
          {
            v64 = *((_QWORD *)this + 47);
            v65 = v951;
            *(_QWORD *)&v951 = 0;
            v66 = *(_QWORD *)(v64 + 8 * v57);
            *(_QWORD *)(v64 + 8 * v57) = v65;
            if (!v66)
            {
LABEL_84:
              if (v892[0])
                (*(void (**)(CFTypeRef))(*(_QWORD *)v892[0] + 8))(v892[0]);
              v59 = *((_DWORD *)this + 97);
LABEL_87:
              if (v59 <= v57)
              {
                __break(0xC471u);
                JUMPOUT(0x19440D738);
              }
              v68 = *(WTF **)(*((_QWORD *)this + 47) + 8 * v57);
              if (!v68)
                return 2;
              return WebCore::wrap<WebCore::ImageBitmap>(*(_QWORD *)this, *((_QWORD *)this + 27), v68);
            }
            v67 = *(_DWORD *)(v66 + 8) - 1;
            if (*(_DWORD *)(v66 + 8) != 1)
            {
LABEL_83:
              *(_DWORD *)(v66 + 8) = v67;
              goto LABEL_84;
            }
            v570 = *(_QWORD *)(v66 + 16);
            *(_QWORD *)(v66 + 16) = 0;
            if (!v570)
            {
LABEL_999:
              if (*(_QWORD *)v66)
              {
                *(_QWORD *)(*(_QWORD *)v66 + 8) = 3;
                *(_QWORD *)v66 = 0;
              }
              bmalloc::api::isoDeallocate((bmalloc::api *)v66, v63);
              v66 = v951;
              *(_QWORD *)&v951 = 0;
              if (!v66)
                goto LABEL_84;
              v67 = *(_DWORD *)(v66 + 8) - 1;
              if (*(_DWORD *)(v66 + 8) != 1)
                goto LABEL_83;
              v619 = *(_QWORD *)(v66 + 16);
              *(_QWORD *)(v66 + 16) = 0;
              if (!v619)
              {
LABEL_1190:
                if (*(_QWORD *)v66)
                {
                  *(_QWORD *)(*(_QWORD *)v66 + 8) = 3;
                  *(_QWORD *)v66 = 0;
                }
                bmalloc::api::isoDeallocate((bmalloc::api *)v66, v618);
                goto LABEL_84;
              }
              v620 = *(_QWORD *)(v619 + 8);
              if (__ldaxr((unsigned __int8 *)v620))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v620))
              {
                goto LABEL_1178;
              }
              MEMORY[0x19AEA534C](v620);
LABEL_1178:
              v695 = *(_QWORD *)(v620 + 8);
              v696 = v695 - 1;
              *(_QWORD *)(v620 + 8) = v695 - 1;
              if (v695 == 1)
              {
                v775 = *(_QWORD *)(v620 + 16);
                v697 = *(_QWORD *)(v620 + 24);
                *(_QWORD *)(v620 + 24) = 0;
                v698 = v775 != 0;
              }
              else
              {
                v697 = 0;
                v698 = 1;
              }
              v699 = __ldxr((unsigned __int8 *)v620);
              if (v699 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v620))
                {
LABEL_1185:
                  if (!v696)
                  {
                    if (v697)
                      (*(void (**)(uint64_t))(*(_QWORD *)v697 + 8))(v697);
                    if (!v698)
                      WTF::fastFree((WTF *)v620, v618);
                  }
                  goto LABEL_1190;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v620);
              goto LABEL_1185;
            }
            v571 = *(_QWORD *)(v570 + 8);
            if (__ldaxr((unsigned __int8 *)v571))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v571))
            {
              goto LABEL_987;
            }
            MEMORY[0x19AEA534C](v571);
LABEL_987:
            v613 = *(_QWORD *)(v571 + 8);
            v614 = v613 - 1;
            *(_QWORD *)(v571 + 8) = v613 - 1;
            if (v613 == 1)
            {
              v733 = *(_QWORD *)(v571 + 16);
              v615 = *(_QWORD *)(v571 + 24);
              *(_QWORD *)(v571 + 24) = 0;
              v616 = v733 != 0;
            }
            else
            {
              v615 = 0;
              v616 = 1;
            }
            v617 = __ldxr((unsigned __int8 *)v571);
            if (v617 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v571))
              {
LABEL_994:
                if (!v614)
                {
                  if (v615)
                    (*(void (**)(uint64_t))(*(_QWORD *)v615 + 8))(v615);
                  if (!v616)
                    WTF::fastFree((WTF *)v571, v63);
                }
                goto LABEL_999;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v571);
            goto LABEL_994;
          }
LABEL_1581:
          __break(0xC471u);
          JUMPOUT(0x19440D824);
        }
      }
      __break(1u);
      goto LABEL_1581;
    case 0x2Cu:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 8)
        goto LABEL_963;
      v178 = *(double *)v8;
      *v9 = v8 + 2;
      v892[0] = 0;
      v892[1] = 0;
      if ((WebCore::CloneDeserializer::readStringData(this, (WTF ***)v892, &v951, 0) & 1) == 0)
        goto LABEL_963;
      v951 = 0uLL;
      if ((WebCore::CloneDeserializer::readStringData(this, (WTF ***)&v951, &cf, 0) & 1) == 0)
        goto LABEL_963;
      cf = 0uLL;
      if ((WebCore::CloneDeserializer::readStringData(this, (WTF ***)&cf, &v939, 0) & 1) == 0)
        goto LABEL_963;
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v179 = (unsigned int *)*((_QWORD *)this + 29);
      if ((unint64_t)v179 > *((_QWORD *)this + 30) - 4)
        goto LABEL_963;
      v181 = *v179;
      v180 = *v179;
      *v9 = v179 + 1;
      v940 = 0;
      v939 = 0;
      if (!v181)
        goto LABEL_772;
      if (v180 >> 28)
        goto LABEL_770;
      WTF::tryFastMalloc((WTF *)(16 * v180));
      if (!v958)
        goto LABEL_770;
      LODWORD(v940) = v180;
      v939 = (WTF::StringImpl *)v958;
      do
      {
        v958 = 0;
        v959 = 0;
        if ((WebCore::CloneDeserializer::readStringData(this, &v958, &v956, 0) & 1) == 0
          || (v956 = 0, v957 = 0, !WebCore::CloneDeserializer::readStringData(this, &v956, &v954, 0)))
        {
LABEL_770:
          SlowCase = 0;
          goto LABEL_848;
        }
        if (v959 >= *((unsigned int *)v958 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19440D740);
        }
        v182 = (_DWORD *)*((_QWORD *)*v958 + 2 * v959);
        if (v182)
          *v182 += 2;
        v954 = v182;
        if (v957 >= *((unsigned int *)v956 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19440D748);
        }
        v183 = (WTF::StringImpl *)*((_QWORD *)*v956 + 2 * v957);
        if (v183)
          *(_DWORD *)v183 += 2;
        v955 = v183;
        v184 = HIDWORD(v940);
        if (HIDWORD(v940) == (_DWORD)v940)
        {
          v185 = (_QWORD *)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v939, HIDWORD(v940) + 1, (unint64_t)&v954);
          v184 = HIDWORD(v940);
          v186 = (_QWORD *)((char *)v939 + 16 * HIDWORD(v940));
          v187 = *v185;
          *v185 = 0;
          v188 = (WTF::StringImpl **)(v185 + 1);
          *v186 = v187;
          v189 = (WTF::StringImpl **)(v186 + 1);
        }
        else
        {
          v190 = (_QWORD *)((char *)v939 + 16 * HIDWORD(v940));
          v954 = 0;
          *v190 = v182;
          v189 = (WTF::StringImpl **)(v190 + 1);
          v188 = &v955;
        }
        v191 = *v188;
        *v188 = 0;
        *v189 = v191;
        HIDWORD(v940) = v184 + 1;
        v192 = v955;
        v955 = 0;
        if (v192)
        {
          if (*(_DWORD *)v192 == 2)
            WTF::StringImpl::destroy(v192, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v192 -= 2;
        }
        v193 = (WTF::StringImpl *)v954;
        v954 = 0;
        if (v193)
        {
          if (*(_DWORD *)v193 == 2)
            WTF::StringImpl::destroy(v193, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v193 -= 2;
        }
        LODWORD(v180) = v180 - 1;
      }
      while ((_DWORD)v180);
LABEL_772:
      if (*((_BYTE *)this + 225))
      {
        if (*((_QWORD *)&v951 + 1) >= (unint64_t)*(unsigned int *)(v951 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19440D848);
        }
        WebCore::SecurityOrigin::createFromString((WTF::StringImpl **)(*(_QWORD *)v951 + 16 * *((_QWORD *)&v951 + 1)), (uint64_t *)&v956);
        if (v892[1] >= (CFTypeRef)*((unsigned int *)v892[0] + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19440D850);
        }
        v510 = *(_QWORD *)(*(_QWORD *)v892[0] + 16 * (uint64_t)v892[1]);
        *(_QWORD *)(*(_QWORD *)v892[0] + 16 * (uint64_t)v892[1]) = 0;
        if (*((_QWORD *)&cf + 1) >= (unint64_t)*(unsigned int *)(cf + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19440D858);
        }
        v511 = *(_QWORD *)(*(_QWORD *)cf + 16 * *((_QWORD *)&cf + 1));
        *(_QWORD *)(*(_QWORD *)cf + 16 * *((_QWORD *)&cf + 1)) = 0;
        v512 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v512 = 1;
        *(_QWORD *)(v512 + 8) = v956;
        *(double *)(v512 + 16) = v178;
        v513 = v939;
        v939 = 0;
        *(_QWORD *)(v512 + 24) = v513;
        v514 = v940;
        v940 = 0;
        *(_QWORD *)(v512 + 32) = v514;
        *(_QWORD *)(v512 + 40) = v510;
        *(_QWORD *)(v512 + 48) = v511;
        v958 = (WTF **)v512;
        SlowCase = WebCore::createWrapper<WebCore::RTCCertificate,WebCore::RTCCertificate>(*((_QWORD *)this + 27), (WTF **)&v958);
        v515 = (WebCore::RTCCertificate *)v958;
        v958 = 0;
        if (v515)
        {
          if (*(_DWORD *)v515 == 1)
          {
            WebCore::RTCCertificate::~RTCCertificate(v515, (WTF::StringImpl *)a2);
            WTF::fastFree(v626, v627);
          }
          else
          {
            --*(_DWORD *)v515;
          }
        }
      }
      else
      {
        v543 = *(_QWORD *)(*(_QWORD *)this + 56);
        v544 = JSC::StructureCache::emptyObjectStructureForPrototype();
        v545 = 8 * *(unsigned __int8 *)(v544 + 14);
        SlowCase = JSC::allocateCell<JSC::JSFinalObject>(v543, v545 + 16);
        v546 = *(_DWORD *)(v544 + 8);
        *(_DWORD *)SlowCase = v544 >> 4;
        *(_DWORD *)(SlowCase + 4) = v546;
        v891 = v544;
        *(_QWORD *)(SlowCase + 8) = 0;
        bzero((void *)(SlowCase + 16), v545);
        if (*(_BYTE *)(v543 + 755))
          __dmb(0xAu);
      }
LABEL_848:
      v394 = v939;
      if (HIDWORD(v940))
      {
        v547 = 16 * HIDWORD(v940);
        v548 = (WTF::StringImpl **)((char *)v939 + 8);
        do
        {
          v549 = *v548;
          *v548 = 0;
          if (v549)
          {
            if (*(_DWORD *)v549 == 2)
              WTF::StringImpl::destroy(v549, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v549 -= 2;
          }
          v550 = *(v548 - 1);
          *(v548 - 1) = 0;
          if (v550)
          {
            if (*(_DWORD *)v550 == 2)
              WTF::StringImpl::destroy(v550, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v550 -= 2;
          }
          v548 += 2;
          v547 -= 16;
        }
        while (v547);
        v394 = v939;
      }
      if (v394)
      {
        v939 = 0;
        LODWORD(v940) = 0;
LABEL_607:
        WTF::fastFree(v394, a2);
      }
      return SlowCase;
    case 0x2Du:
      v45 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v45 != -1)
      {
        v892[0] = &cf;
        *(_QWORD *)&v951 = v892;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v951, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      *(_QWORD *)&cf = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
        CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      if (*((_BYTE *)this + 8))
        goto LABEL_1236;
      v47 = *((_QWORD *)this + 29);
      v46 = *((_QWORD *)this + 30);
      if (v47 > v46 - 1)
        goto LABEL_1236;
      *v9 = (unsigned int *)(v47 + 1);
      v48 = v46 - 4;
      if (v47 + 1 > v46 - 4)
        goto LABEL_1236;
      v49 = *(_BYTE *)v47;
      v50 = *(unsigned int *)(v47 + 1);
      *v9 = (unsigned int *)(v47 + 5);
      if (v47 + 5 > v48)
        goto LABEL_1236;
      v51 = *(unsigned int *)(v47 + 5);
      *v9 = (unsigned int *)(v47 + 9);
      if (v47 + 9 > v46 - 8)
        goto LABEL_1236;
      v52 = *(double *)(v47 + 9);
      v53 = (unsigned int *)(v47 + 17);
      *v9 = (unsigned int *)(v47 + 17);
      if (*((_DWORD *)this + 62) < 9u)
        goto LABEL_929;
      if ((unint64_t)v53 >= v46)
        goto LABEL_1236;
      v54 = v47 + 18;
      *v9 = (unsigned int *)(v47 + 18);
      switch(*(_BYTE *)(v47 + 17))
      {
        case 0:
          v55 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v55 != -1)
          {
            v892[0] = &v939;
            *(_QWORD *)&v951 = v892;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v951, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v56 = &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          goto LABEL_926;
        case 1:
          v585 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
          if (v585 != -1)
          {
            v892[0] = &v939;
            *(_QWORD *)&v951 = v892;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, &v951, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v56 = &WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace;
          goto LABEL_926;
        case 2:
          v581 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
          if (v581 != -1)
          {
            v892[0] = &v939;
            *(_QWORD *)&v951 = v892;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v951, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v56 = &WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
LABEL_926:
          WTF::RetainPtr<CGColorSpace *>::operator=((const void **)&cf, (CFTypeRef *)v56);
          goto LABEL_927;
        case 3:
          if (v54 > v48)
            goto LABEL_1235;
          v582 = *(unsigned int *)(v47 + 18);
          *v9 = (unsigned int *)(v47 + 22);
          if (v582 > (int)v46 - ((int)v47 + 22))
            goto LABEL_1236;
          v583 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)(v47 + 22), v582, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
          if (!v583)
            goto LABEL_1236;
          v575 = v583;
          *v9 = (unsigned int *)((char *)*v9 + v582);
          v584 = CFStringCreateFromExternalRepresentation(0, v583, 0x8000100u);
          if (!v584)
            goto LABEL_922;
          v577 = v584;
          v578 = CGColorSpaceCreateWithName(v584);
          if (!v578)
            goto LABEL_921;
          goto LABEL_910;
        case 4:
          if (v54 <= v48)
          {
            v573 = *(unsigned int *)(v47 + 18);
            *v9 = (unsigned int *)(v47 + 22);
            if (v573 > (int)v46 - ((int)v47 + 22))
              goto LABEL_1236;
            v574 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)(v47 + 22), v573, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
            if (!v574)
              goto LABEL_1236;
            v575 = v574;
            *v9 = (unsigned int *)((char *)*v9 + v573);
            v576 = (const __CFString *)CFPropertyListCreateWithData(0, v574, 0, 0, 0);
            if (v576)
            {
              v577 = v576;
              v578 = CGColorSpaceCreateWithPropertyList(v576);
              if (v578)
              {
LABEL_910:
                v579 = v578;
                CFRetain(v578);
                v580 = (const void *)cf;
                *(_QWORD *)&cf = v579;
                if (v580)
                  CFRelease(v580);
                CFRelease(v579);
                CFRelease(v577);
                CFRelease(v575);
LABEL_927:
                if (!*((_BYTE *)this + 8))
                {
                  v53 = (unsigned int *)*((_QWORD *)this + 29);
                  v46 = *((_QWORD *)this + 30);
LABEL_929:
                  if ((unint64_t)v53 <= v46 - 4)
                  {
                    v588 = *v53;
                    v586 = v53 + 1;
                    v587 = v588;
                    *v9 = v586;
                    if ((unint64_t)v586 + v588 <= v46)
                    {
                      JSC::ArrayBuffer::tryCreate();
                      v590 = (WTF::DeferrableRefCountedBase *)v892[0];
                      if (v892[0])
                      {
                        *v9 = (unsigned int *)((char *)*v9 + v587);
                        if ((v49 & 1) != 0)
                        {
                          v591 = v52;
                          LODWORD(v939) = (int)(float)((float)(int)v50 * v591);
                          HIDWORD(v939) = (int)(float)((float)(int)v51 * v591);
                          v592 = WebCore::executionContext(*(WebCore **)this, v589);
                          *(float *)v892 = (float)(int)v50;
                          *((float *)v892 + 1) = (float)(int)v51;
                          v956 = (WTF **)cf;
                          if ((_QWORD)cf)
                            CFRetain((CFTypeRef)cf);
                          WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&v956, v592, (float *)v892, 0, (uint64_t *)&v958, v591);
                          v593 = v956;
                          v956 = 0;
                          if (v593)
                            CFRelease(v593);
                          if (v958)
                          {
                            LOWORD(v892[0]) = 0;
                            v892[1] = (CFTypeRef)cf;
                            if ((_QWORD)cf)
                              CFRetain((CFTypeRef)cf);
                            *(_QWORD *)&v951 = v590;
                            WebCore::ByteArrayPixelBuffer::tryCreate(v892, (unint64_t *)&v939, (WTF::DeferrableRefCountedBase **)&v951, &v954);
                            if ((_QWORD)v951)
                              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v951);
                            v595 = v954;
                            if (!v954)
                            {
                              SlowCase = 0;
                              *((_BYTE *)this + 8) = 1;
                              goto LABEL_966;
                            }
                            *(_QWORD *)&v951 = 0;
                            *((_QWORD *)&v951 + 1) = v50 | (v51 << 32);
                            v945 = 0;
                            (*((void (**)(WTF **, _DWORD *, __int128 *, char **, _QWORD))*v958 + 12))(v958, v954, &v951, &v945, 0);
                            v596 = v958;
                            v958 = 0;
                            v597 = bmalloc::api::isoAllocate();
                            *(_QWORD *)v597 = 0;
                            *(_DWORD *)(v597 + 8) = 1;
                            *(_QWORD *)(v597 + 16) = v596;
                            *(_QWORD *)(v597 + 24) = 0;
                            *(_BYTE *)(v597 + 32) = v49 & 6 | *(_BYTE *)(v597 + 32) & 0xF8 | 1;
                            SlowCase = WebCore::wrap<WebCore::ImageBitmap>(*(_QWORD *)this, *((_QWORD *)this + 27), (WTF *)v597);
                            if (*(_DWORD *)(v597 + 8) != 1)
                            {
                              --*(_DWORD *)(v597 + 8);
                              v954 = 0;
                              goto LABEL_945;
                            }
                            v662 = *(_QWORD *)(v597 + 16);
                            *(_QWORD *)(v597 + 16) = 0;
                            if (!v662)
                            {
LABEL_1172:
                              if (*(_QWORD *)v597)
                              {
                                *(_QWORD *)(*(_QWORD *)v597 + 8) = 3;
                                *(_QWORD *)v597 = 0;
                              }
                              bmalloc::api::isoDeallocate((bmalloc::api *)v597, v594);
                              v595 = v954;
                              if (!v954)
                              {
LABEL_966:
                                v604 = v892[1];
                                v892[1] = 0;
                                if (v604)
                                  CFRelease(v604);
                                v605 = v958;
                                v958 = 0;
                                if (!v605)
                                  goto LABEL_1237;
                                v606 = v605[1];
                                if (__ldaxr((unsigned __int8 *)v606))
                                {
                                  __clrex();
                                }
                                else if (!__stxr(1u, (unsigned __int8 *)v606))
                                {
                                  goto LABEL_973;
                                }
                                MEMORY[0x19AEA534C](v606);
LABEL_973:
                                v608 = *((_QWORD *)v606 + 1);
                                v609 = v608 - 1;
                                *((_QWORD *)v606 + 1) = v608 - 1;
                                if (v608 == 1)
                                {
                                  v730 = *((_QWORD *)v606 + 2);
                                  v610 = *((_QWORD *)v606 + 3);
                                  *((_QWORD *)v606 + 3) = 0;
                                  v611 = v730 != 0;
                                }
                                else
                                {
                                  v610 = 0;
                                  v611 = 1;
                                }
                                v612 = __ldxr((unsigned __int8 *)v606);
                                if (v612 == 1)
                                {
                                  if (!__stlxr(0, (unsigned __int8 *)v606))
                                  {
LABEL_980:
                                    if (!v609)
                                    {
                                      if (v610)
                                        (*(void (**)(uint64_t))(*(_QWORD *)v610 + 8))(v610);
                                      if (!v611)
                                        WTF::fastFree(v606, v594);
                                    }
                                    goto LABEL_1237;
                                  }
                                }
                                else
                                {
                                  __clrex();
                                }
                                WTF::Lock::unlockSlow(v606);
                                goto LABEL_980;
                              }
LABEL_945:
                              if (v595[2] == 1)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v595 + 8))(v595);
                              else
                                --v595[2];
                              goto LABEL_966;
                            }
                            v663 = *(_QWORD *)(v662 + 8);
                            if (__ldaxr((unsigned __int8 *)v663))
                            {
                              __clrex();
                            }
                            else if (!__stxr(1u, (unsigned __int8 *)v663))
                            {
                              goto LABEL_1160;
                            }
                            MEMORY[0x19AEA534C](v663);
LABEL_1160:
                            v690 = *(_QWORD *)(v663 + 8);
                            v691 = v690 - 1;
                            *(_QWORD *)(v663 + 8) = v690 - 1;
                            if (v690 == 1)
                            {
                              v774 = *(_QWORD *)(v663 + 16);
                              v692 = *(_QWORD *)(v663 + 24);
                              *(_QWORD *)(v663 + 24) = 0;
                              v693 = v774 != 0;
                            }
                            else
                            {
                              v692 = 0;
                              v693 = 1;
                            }
                            v694 = __ldxr((unsigned __int8 *)v663);
                            if (v694 == 1)
                            {
                              if (!__stlxr(0, (unsigned __int8 *)v663))
                              {
LABEL_1167:
                                if (!v691)
                                {
                                  if (v692)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v692 + 8))(v692);
                                  if (!v693)
                                    WTF::fastFree((WTF *)v663, v594);
                                }
                                goto LABEL_1172;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow((WTF::Lock *)v663);
                            goto LABEL_1167;
                          }
                        }
                        *((_BYTE *)this + 8) = 1;
                        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v590);
                        SlowCase = 0;
LABEL_1237:
                        v723 = (const void *)cf;
                        *(_QWORD *)&cf = 0;
                        if (v723)
                          CFRelease(v723);
                        return SlowCase;
                      }
                    }
                  }
                }
LABEL_1236:
                SlowCase = 0;
                *((_BYTE *)this + 8) = 1;
                goto LABEL_1237;
              }
LABEL_921:
              CFRelease(v577);
            }
LABEL_922:
            CFRelease(v575);
            goto LABEL_1236;
          }
LABEL_1235:
          *((_BYTE *)this + 8) = 1;
          goto LABEL_1236;
        default:
          goto LABEL_1236;
      }
    case 0x2Eu:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v34 = *v8;
      v33 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 101) <= v34)
        goto LABEL_963;
      v35 = *((_DWORD *)this + 105);
      if (v35 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6B8);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 51) + 8 * v33))
      {
        v36 = WebCore::executionContext(*(WebCore **)this, (JSC::JSGlobalObject *)a2);
        if (*((_DWORD *)this + 101) <= v33)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D79CLL);
        }
        WebCore::OffscreenCanvas::create(v36, (uint64_t **)(*((_QWORD *)this + 49) + 8 * v33), (uint64_t *)v892);
        v35 = *((_DWORD *)this + 105);
        if (v35 <= v33)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7A4);
        }
        v37 = *((_QWORD *)this + 51);
        v38 = *(WebCore::OffscreenCanvas **)(v37 + 8 * v33);
        *(CFTypeRef *)(v37 + 8 * v33) = v892[0];
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 1)
          {
            WebCore::OffscreenCanvas::~OffscreenCanvas(v38);
            bmalloc::api::isoDeallocate(v551, v552);
            v35 = *((_DWORD *)this + 105);
          }
          else
          {
            --*((_DWORD *)v38 + 6);
          }
        }
      }
      if (v35 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6C0);
      }
      v39 = *(_QWORD *)(*((_QWORD *)this + 51) + 8 * v33);
      if (!v39)
        return 2;
      v40 = *((_QWORD *)this + 27);
      v41 = *(_QWORD *)this;
      return WebCore::wrap<WebCore::OffscreenCanvas>(v41, v40, v39);
    case 0x2Fu:
      return WebCore::CloneDeserializer::readBigInt(this, (JSC::VM *)a2);
    case 0x30u:
      if (!WebCore::CloneDeserializer::readBigInt(this, (JSC::VM *)a2))
        return 0;
      SlowCase = JSC::BigIntObject::create();
      v155 = *((unsigned int *)this + 30);
      v154 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v155 == *((_DWORD *)this + 31)
        || (v156 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v156 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v156)
      {
        v628.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v154, v628) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_218;
        }
      }
      else
      {
        *((_QWORD *)v156 + v155) = SlowCase;
        *(_DWORD *)v154 = v155 + 1;
      }
      if (!*((_BYTE *)this + 112))
        return SlowCase;
LABEL_218:
      __break(0xC471u);
      JUMPOUT(0x194408130);
    case 0x31u:
      if (*((_DWORD *)this + 62) < 0xCu)
        goto LABEL_672;
      v892[0] = 0;
      v892[1] = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)v892, &v951, 0))
        goto LABEL_963;
      if (v892[1] >= (CFTypeRef)*((unsigned int *)v892[0] + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D77CLL);
      }
      v244 = (WTF **)(*(_QWORD *)v892[0] + 16 * (uint64_t)v892[1]);
      v245 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)this + 27);
      v246 = *(unsigned int *)(16 * (*(_DWORD *)v245 & 0xFFFFFFFE) + 0x4C);
      v247 = *(_DWORD *)(16 * (*(_DWORD *)v245 & 0xFFFFFFFE) + 0x4C) != 0;
      v248 = (char **)(16 * v246);
      if ((_DWORD)v246)
        v249 = v248 == &WebCore::JSDOMGlobalObject::s_info;
      else
        v249 = 1;
      if (!v249)
      {
        do
        {
          v248 = (char **)v248[2];
          v247 = v248 != 0;
        }
        while (v248 != &WebCore::JSDOMGlobalObject::s_info && v248 != 0);
      }
      if (v247)
        WebCore::JSDOMGlobalObject::agentClusterID(v245, &v951);
      else
        WebCore::JSDOMGlobalObject::defaultAgentClusterID(&v951);
      v426 = WTF::equal(*v244, (const WTF::StringImpl *)v951, v251);
      v427 = (WTF::StringImpl *)v951;
      *(_QWORD *)&v951 = 0;
      if (!v427)
        goto LABEL_671;
      if (*(_DWORD *)v427 == 2)
      {
        WTF::StringImpl::destroy(v427, v425);
        if ((v426 & 1) == 0)
          goto LABEL_963;
      }
      else
      {
        *(_DWORD *)v427 -= 2;
LABEL_671:
        if ((v426 & 1) == 0)
          goto LABEL_963;
      }
LABEL_672:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      v428 = (unsigned int *)*((_QWORD *)this + 29);
      if ((unint64_t)v428 > *((_QWORD *)this + 30) - 4)
        goto LABEL_963;
      v429 = *v428;
      *((_QWORD *)this + 29) = v428 + 1;
      v430 = *((_QWORD *)this + 64);
      if (!v430 || *(_DWORD *)(v430 + 12) <= v429 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 1963))
        goto LABEL_963;
      v431 = *(_QWORD *)(*(_QWORD *)this + 56);
      v432 = *((_QWORD *)this + 27);
      v433 = *(_QWORD *)(v432 + 1376);
      if ((v433 & 1) != 0)
      {
        v716 = *(void (**)(CFTypeRef *))(v433 & 0xFFFFFFFFFFFFFFFCLL);
        v717 = (CFTypeRef *)(v432 - 16);
        if ((v432 & 8) == 0)
          v717 = (CFTypeRef *)(v432 & 0xFFFFFFFFFFFFC000 | 8);
        v892[0] = *v717;
        v892[1] = (CFTypeRef)v432;
        *(_QWORD *)&v893 = v432 + 1376;
        v716(v892);
      }
      v434 = JSC::JSWebAssemblyMemory::tryCreate();
      if (*(_QWORD *)(v431 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x19440C144);
      }
      v435 = *((_QWORD *)this + 64);
      if (*(_DWORD *)(v435 + 12) <= v429)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D814);
      }
      SlowCase = v434;
      v436 = *(_QWORD *)(*(_QWORD *)v435 + 8 * v429);
      if (v436)
      {
        do
          v437 = __ldaxr((unsigned int *)v436);
        while (__stlxr(v437 + 1, (unsigned int *)v436));
        if (!*(_QWORD *)(v436 + 24))
        {
          *((_BYTE *)this + 8) = 1;
          do
            v529 = __ldaxr((unsigned int *)v436);
          while (__stlxr(v529 - 1, (unsigned int *)v436));
          if (v529 == 1)
          {
            atomic_store(1u, (unsigned int *)v436);
            v530 = (WTF *)MEMORY[0x19AEA39B4]();
            WTF::fastFree(v530, v531);
          }
          return 0;
        }
        *(_QWORD *)&v951 = v436;
        v438 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v438 = off_1E3393E60;
        v438[1] = v431;
        v438[2] = SlowCase;
        *(_QWORD *)&cf = v438;
        JSC::Wasm::Memory::create();
        v439 = v892[0];
        v892[0] = 0;
        v440 = cf;
        *(_QWORD *)&cf = 0;
        if (v440)
          (*(void (**)(uint64_t))(*(_QWORD *)v440 + 8))(v440);
        v441 = (unsigned int *)v951;
        *(_QWORD *)&v951 = 0;
        if (v441)
        {
          do
          {
            v442 = __ldaxr(v441);
            v443 = v442 - 1;
          }
          while (__stlxr(v443, v441));
          if (!v443)
          {
            atomic_store(1u, v441);
            v720 = (WTF *)MEMORY[0x19AEA39B4]();
            WTF::fastFree(v720, v721);
          }
        }
      }
      else
      {
        v718 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v718 = off_1E3393E60;
        v718[1] = v431;
        v718[2] = SlowCase;
        *(_QWORD *)&v951 = v718;
        JSC::Wasm::Memory::createZeroSized();
        v439 = v892[0];
        v892[0] = 0;
        v719 = v951;
        *(_QWORD *)&v951 = 0;
        if (v719)
          (*(void (**)(uint64_t))(*(_QWORD *)v719 + 8))(v719);
      }
      v892[0] = v439;
      JSC::JSWebAssemblyMemory::adopt();
      v444 = (WTF::StringImpl *)v892[0];
      v892[0] = 0;
      if (!v444)
        return SlowCase;
      v445 = *(_DWORD *)v444 - 1;
      if (*(_DWORD *)v444 == 1)
      {
        v394 = (WTF::StringImpl *)MEMORY[0x19AEA3D20]();
        goto LABEL_607;
      }
LABEL_835:
      *(_DWORD *)v444 = v445;
      return SlowCase;
    case 0x32u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v356 = *v8;
      v355 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 113) <= v356)
        goto LABEL_963;
      v357 = *((_DWORD *)this + 117);
      if (v357 <= v355)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D718);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 57) + 8 * v355))
      {
        v358 = *((_QWORD *)this + 55);
        v359 = *(_QWORD *)(v358 + 8 * v355);
        *(_QWORD *)(v358 + 8 * v355) = 0;
        v360 = (WebCore::ScriptExecutionContext *)WebCore::executionContext(*(WebCore **)this, (JSC::JSGlobalObject *)a2);
        v361 = (WTF::StringImpl **)(v359 + 16);
        WebCore::RTCDataChannel::create(v360, *(_QWORD *)v359, *(_QWORD *)(v359 + 8), (uint64_t *)(v359 + 16), (uint64_t *)(v359 + 24), *(unsigned __int8 *)(v359 + 56), (WebCore::ContextDestructionObserver **)v892);
        if (*((_DWORD *)this + 117) <= v355)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7E4);
        }
        v363 = *((_QWORD *)this + 57);
        v364 = v892[0];
        v892[0] = 0;
        v365 = *(WebCore::RTCDataChannel **)(v363 + 8 * v355);
        *(_QWORD *)(v363 + 8 * v355) = v364;
        if (v365)
        {
          if (*((_DWORD *)v365 + 6) == 1)
          {
            WebCore::RTCDataChannel::~RTCDataChannel(v365, v362);
            bmalloc::api::isoDeallocate(v556, v557);
          }
          else
          {
            --*((_DWORD *)v365 + 6);
          }
        }
        v366 = (WebCore::RTCDataChannel *)v892[0];
        v892[0] = 0;
        if (v366)
        {
          if (*((_DWORD *)v366 + 6) == 1)
          {
            WebCore::RTCDataChannel::~RTCDataChannel(v366, v362);
            bmalloc::api::isoDeallocate(v568, v569);
          }
          else
          {
            --*((_DWORD *)v366 + 6);
          }
        }
        v367 = *(WTF::StringImpl **)(v359 + 40);
        *(_QWORD *)(v359 + 40) = 0;
        if (v367)
        {
          if (*(_DWORD *)v367 == 2)
            WTF::StringImpl::destroy(v367, (WTF::StringImpl *)v362);
          else
            *(_DWORD *)v367 -= 2;
        }
        v368 = *v361;
        *v361 = 0;
        if (v368)
        {
          if (*(_DWORD *)v368 == 2)
            WTF::StringImpl::destroy(v368, (WTF::StringImpl *)v362);
          else
            *(_DWORD *)v368 -= 2;
        }
        WTF::fastFree((WTF *)v359, v362);
        v357 = *((_DWORD *)this + 117);
      }
      if (v357 <= v355)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D720);
      }
      v369 = *(_QWORD *)(*((_QWORD *)this + 57) + 8 * v355);
      if (!v369)
        return 2;
      return WebCore::wrap<WebCore::RTCDataChannel>(*(_QWORD *)this, *((JSC::VM **)this + 27), v369);
    case 0x33u:
      v892[0] = 0;
      v892[1] = 0;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)v892, &v951, 0))
        return SlowCase;
      v951 = 0uLL;
      SlowCase = 0;
      if (!WebCore::CloneDeserializer::readStringData(this, (WTF ***)&v951, &cf, 0))
        return SlowCase;
      if (v892[1] >= (CFTypeRef)*((unsigned int *)v892[0] + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D75CLL);
      }
      if (*((_QWORD *)&v951 + 1) >= (unint64_t)*(unsigned int *)(v951 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19440D764);
      }
      v69 = (_DWORD **)(*(_QWORD *)v892[0] + 16 * (uint64_t)v892[1]);
      v70 = (_QWORD *)(*(_QWORD *)v951 + 16 * *((_QWORD *)&v951 + 1));
      v71 = (_DWORD *)WTF::fastMalloc((WTF *)0x20);
      v72 = &byte_1E33A1C90;
      while (1)
      {
        v73 = *((_QWORD *)v72 - 3);
        v74 = v72 - 32;
        v75 = v73 ? v73 - 1 : 0;
        if (MEMORY[0x19AEA53F4](*v70, *((_QWORD *)v72 - 4), v75))
          break;
        v72 += 40;
        if (v74 + 40 == (char *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF10AtomStringES8_EEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix)
        {
          v76 = 0;
          goto LABEL_643;
        }
      }
      v76 = *v72;
LABEL_643:
      v71[2] = 1;
      *(_QWORD *)v71 = off_1E334F098;
      *((_BYTE *)v71 + 12) = v76;
      v409 = (_DWORD *)*v70;
      if (*v70)
        *v409 += 2;
      *((_QWORD *)v71 + 2) = v409;
      v410 = *v69;
      if (*v69)
        *v410 += 2;
      *((_QWORD *)v71 + 3) = v410;
      SlowCase = WebCore::wrap<WebCore::DOMException>(*(_QWORD *)this, *((_QWORD *)this + 27), v71);
      if (v71[2] == 1)
LABEL_733:
        (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 8))(v71);
      else
        --v71[2];
      return SlowCase;
    case 0x34u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v169 = *v8;
      v168 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 133) <= v169)
        goto LABEL_963;
      v170 = *((_DWORD *)this + 137);
      if (v170 <= v168)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6D0);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 67) + 8 * v168))
      {
        v171 = *((_QWORD *)this + 65);
        v172 = *(_QWORD *)(v171 + 8 * v168);
        *(_QWORD *)(v171 + 8 * v168) = 0;
        v173 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v173 = 1;
        *(_QWORD *)(v173 + 8) = v172;
        v170 = *((_DWORD *)this + 137);
        if (v170 <= v168)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7ACLL);
        }
        v175 = *((_QWORD *)this + 67);
        v176 = *(WTF **)(v175 + 8 * v168);
        *(_QWORD *)(v175 + 8 * v168) = v173;
        if (v176)
        {
          if (*(_DWORD *)v176 == 1)
          {
            v553 = *((_QWORD *)v176 + 1);
            *((_QWORD *)v176 + 1) = 0;
            if (v553)
            {
              do
              {
                v554 = __ldaxr((unsigned int *)v553);
                v555 = v554 - 1;
              }
              while (__stlxr(v555, (unsigned int *)v553));
              if (!v555)
              {
                atomic_store(1u, (unsigned int *)v553);
                v731 = *(WTF **)(v553 + 40);
                if (v731)
                {
                  *(_QWORD *)(v553 + 40) = 0;
                  *(_DWORD *)(v553 + 48) = 0;
                  WTF::fastFree(v731, v174);
                }
                WTF::fastFree((WTF *)v553, v174);
              }
            }
            WTF::fastFree(v176, v174);
            v170 = *((_DWORD *)this + 137);
          }
          else
          {
            --*(_DWORD *)v176;
          }
        }
      }
      if (v170 <= v168)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6D8);
      }
      v177 = *(WTF **)(*((_QWORD *)this + 67) + 8 * v168);
      if (!v177)
        return 2;
      return WebCore::wrap<WebCore::WebCodecsEncodedVideoChunk>(*(_QWORD *)this, *((_QWORD *)this + 27), v177);
    case 0x35u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v198 = *v8;
      v197 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 141) <= v198)
        goto LABEL_963;
      v199 = *((_DWORD *)this + 145);
      if (v199 <= v197)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6E0);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 71) + 8 * v197))
      {
        v200 = WebCore::executionContext(*(WebCore **)this, (JSC::JSGlobalObject *)a2);
        if (*((_DWORD *)this + 141) <= v197)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7B4);
        }
        v201 = (WebCore::ScriptExecutionContext *)v200;
        v202 = *((_QWORD *)this + 69) + 104 * v197;
        v203 = WTF::fastMalloc((WTF *)0xA0);
        *(_DWORD *)(v203 + 16) = 1;
        *(_QWORD *)v203 = &off_1E33A18C0;
        *(_QWORD *)(v203 + 8) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v203, v201);
        *(_QWORD *)v203 = &off_1E336D8D0;
        v204 = *(_QWORD *)v202;
        *(_QWORD *)v202 = 0;
        *(_QWORD *)(v203 + 24) = v204;
        v205 = *(_OWORD *)(v202 + 24);
        *(_OWORD *)(v203 + 32) = *(_OWORD *)(v202 + 8);
        *(_OWORD *)(v203 + 48) = v205;
        v206 = *(_OWORD *)(v202 + 40);
        v207 = *(_OWORD *)(v202 + 56);
        v208 = *(_OWORD *)(v202 + 88);
        *(_OWORD *)(v203 + 96) = *(_OWORD *)(v202 + 72);
        *(_OWORD *)(v203 + 112) = v208;
        *(_OWORD *)(v203 + 64) = v206;
        *(_OWORD *)(v203 + 80) = v207;
        *(_QWORD *)(v203 + 136) = 0;
        *(_QWORD *)(v203 + 144) = 0;
        *(_QWORD *)(v203 + 128) = 0;
        *(_BYTE *)(v203 + 152) = 0;
        v199 = *((_DWORD *)this + 145);
        if (v199 <= v197)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7BCLL);
        }
        v209 = *((_QWORD *)this + 71);
        v210 = *(_DWORD **)(v209 + 8 * v197);
        *(_QWORD *)(v209 + 8 * v197) = v203;
        if (v210)
        {
          if (v210[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v210 + 16))(v210);
            v199 = *((_DWORD *)this + 145);
          }
          else
          {
            --v210[4];
          }
        }
      }
      if (v199 <= v197)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6E8);
      }
      v211 = *(WTF **)(*((_QWORD *)this + 71) + 8 * v197);
      if (!v211)
        return 2;
      return WebCore::wrap<WebCore::WebCodecsVideoFrame>(*(_QWORD *)this, *((_QWORD *)this + 27), v211);
    case 0x36u:
      if (*((_BYTE *)this + 8))
        goto LABEL_564;
      if ((unint64_t)v8 > v7 - 8)
        goto LABEL_564;
      v348 = *(double *)v8;
      *v9 = v8 + 2;
      if ((unint64_t)(v8 + 2) > v7 - 8)
        goto LABEL_564;
      *v9 = v8 + 4;
      if ((unint64_t)v8 + *(_QWORD *)&v348 + 16 > v7)
        goto LABEL_564;
      JSC::ArrayBuffer::tryCreate();
      v260 = (WTF::DeferrableRefCountedBase *)v892[0];
      *(CFTypeRef *)&v951 = v892[0];
      if (!v892[0])
        goto LABEL_565;
      v349 = *((_QWORD *)v892[0] + 2);
      if (v349)
      {
        v350 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v350)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
            v349 = (v349 & 0x3FFFFFFFFLL) + v350;
        }
      }
      memcpy((void *)v349, *((const void **)this + 29), *(size_t *)&v348);
      *((_QWORD *)this + 29) += *(_QWORD *)&v348;
      v351 = *((_QWORD *)v260 + 4)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0;
      if (!JSC::JSGlobalObject::arrayBufferStructure(*((_QWORD *)this + 27), v351 != 0))
        goto LABEL_565;
      SlowCase = JSC::JSArrayBuffer::create();
      v353 = *((unsigned int *)this + 30);
      v352 = (WebCore::CloneDeserializer *)((char *)this + 120);
      if ((_DWORD)v353 == *((_DWORD *)this + 31)
        || (v354 = (WebCore::CloneDeserializer *)*((_QWORD *)this + 16),
            v354 != (WebCore::CloneDeserializer *)((char *)this + 144))
        && v354)
      {
        v630.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend(v352, v630) == 1)
        {
          *((_BYTE *)this + 112) = 1;
          goto LABEL_519;
        }
      }
      else
      {
        *((_QWORD *)v354 + v353) = SlowCase;
        *(_DWORD *)v352 = v353 + 1;
      }
      if (!*((_BYTE *)this + 112))
      {
LABEL_575:
        v260 = (WTF::DeferrableRefCountedBase *)v951;
LABEL_576:
        *(_QWORD *)&v951 = 0;
        if (v260)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v260);
        return SlowCase;
      }
LABEL_519:
      __break(0xC471u);
      JUMPOUT(0x194409814);
    case 0x37u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 1)
        goto LABEL_963;
      *v9 = (unsigned int *)((char *)v8 + 1);
      if (*(unsigned __int8 *)v8 >= 7u)
        goto LABEL_963;
      v892[0] = 0;
      if ((WebCore::CloneDeserializer::readNullableString((uint64_t)this, (WTF::StringImpl **)v892) & 1) == 0
        || *((_BYTE *)this + 8)
        || (v195 = *((_QWORD *)this + 29), v196 = *((_QWORD *)this + 30) - 4, v195 > v196)
        || (*v9 = (unsigned int *)(v195 + 4), v195 + 4 > v196))
      {
        SlowCase = 0;
        *((_BYTE *)this + 8) = 1;
      }
      else
      {
        *((_QWORD *)this + 29) = v195 + 8;
        *(_QWORD *)&v951 = 0;
        if ((WebCore::CloneDeserializer::readNullableString((uint64_t)this, (WTF::StringImpl **)&v951) & 1) != 0)
        {
          *(_QWORD *)&cf = 0;
          if ((WebCore::CloneDeserializer::readNullableString((uint64_t)this, (WTF::StringImpl **)&cf) & 1) != 0)
          {
            SlowCase = JSC::ErrorInstance::create();
          }
          else
          {
            SlowCase = 0;
            *((_BYTE *)this + 8) = 1;
          }
          v537 = (WTF::StringImpl *)cf;
          *(_QWORD *)&cf = 0;
          if (v537)
          {
            if (*(_DWORD *)v537 == 2)
              WTF::StringImpl::destroy(v537, v194);
            else
              *(_DWORD *)v537 -= 2;
          }
        }
        else
        {
          SlowCase = 0;
          *((_BYTE *)this + 8) = 1;
        }
        v469 = (WTF::StringImpl *)v951;
        *(_QWORD *)&v951 = 0;
        if (v469)
        {
LABEL_831:
          if (*(_DWORD *)v469 == 2)
            WTF::StringImpl::destroy(v469, v194);
          else
            *(_DWORD *)v469 -= 2;
        }
      }
LABEL_833:
      v444 = (WTF::StringImpl *)v892[0];
      v892[0] = 0;
      if (!v444)
        return SlowCase;
      v445 = *(_DWORD *)v444 - 2;
      if (*(_DWORD *)v444 != 2)
        goto LABEL_835;
      WTF::StringImpl::destroy(v444, v194);
      return SlowCase;
    case 0x38u:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v43 = *v8;
      v42 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      v44 = *((_QWORD *)this + 53);
      if (*(_DWORD *)(v44 + 12) <= v43)
        goto LABEL_963;
      v39 = *(_QWORD *)(*(_QWORD *)v44 + 8 * v42);
      if (!v39)
        return 2;
      v41 = *(_QWORD *)this;
      v40 = v11;
      return WebCore::wrap<WebCore::OffscreenCanvas>(v41, v40, v39);
    case 0x39u:
      if (*((_BYTE *)this + 8) || (unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v17 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      v18 = *((_QWORD *)this + 54);
LABEL_294:
      if (*(_DWORD *)(v18 + 12) <= v17)
        goto LABEL_963;
      return WebCore::wrap<WebCore::MessagePort>(*(_QWORD *)this, (JSC::VM *)v11, *(_QWORD *)(*(_QWORD *)v18 + 8 * v17));
    case 0x3Au:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v371 = *v8;
      v370 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 149) <= v371)
        goto LABEL_963;
      v372 = *((_DWORD *)this + 153);
      if (v372 <= v370)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D728);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 75) + 8 * v370))
      {
        v373 = *((_QWORD *)this + 73);
        v374 = *(_QWORD *)(v373 + 8 * v370);
        *(_QWORD *)(v373 + 8 * v370) = 0;
        v375 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v375 = 1;
        *(_QWORD *)(v375 + 8) = v374;
        v372 = *((_DWORD *)this + 153);
        if (v372 <= v370)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7ECLL);
        }
        v377 = *((_QWORD *)this + 75);
        v378 = *(WTF **)(v377 + 8 * v370);
        *(_QWORD *)(v377 + 8 * v370) = v375;
        if (v378)
        {
          if (*(_DWORD *)v378 == 1)
          {
            v558 = *((_QWORD *)v378 + 1);
            *((_QWORD *)v378 + 1) = 0;
            if (v558)
            {
              do
              {
                v559 = __ldaxr((unsigned int *)v558);
                v560 = v559 - 1;
              }
              while (__stlxr(v560, (unsigned int *)v558));
              if (!v560)
              {
                atomic_store(1u, (unsigned int *)v558);
                v732 = *(WTF **)(v558 + 40);
                if (v732)
                {
                  *(_QWORD *)(v558 + 40) = 0;
                  *(_DWORD *)(v558 + 48) = 0;
                  WTF::fastFree(v732, v376);
                }
                WTF::fastFree((WTF *)v558, v376);
              }
            }
            WTF::fastFree(v378, v376);
            v372 = *((_DWORD *)this + 153);
          }
          else
          {
            --*(_DWORD *)v378;
          }
        }
      }
      if (v372 <= v370)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D730);
      }
      v379 = *(WTF **)(*((_QWORD *)this + 75) + 8 * v370);
      if (!v379)
        return 2;
      return WebCore::wrap<WebCore::WebCodecsEncodedAudioChunk>(*(_QWORD *)this, *((_QWORD *)this + 27), v379);
    case 0x3Bu:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v301 = *v8;
      v300 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 157) <= v301)
        goto LABEL_963;
      v302 = *((_DWORD *)this + 161);
      if (v302 <= v300)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D708);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 79) + 8 * v300))
      {
        v303 = WebCore::executionContext(*(WebCore **)this, (JSC::JSGlobalObject *)a2);
        if (*((_DWORD *)this + 157) <= v300)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7D4);
        }
        v304 = (WebCore::ScriptExecutionContext *)v303;
        v305 = *((_QWORD *)this + 77);
        v306 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(v306 + 16) = 1;
        *(_QWORD *)v306 = &off_1E33A18C0;
        *(_QWORD *)(v306 + 8) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v306, v304);
        *(_QWORD *)v306 = &off_1E336C7C8;
        v307 = *(_QWORD *)(v305 + 8 * v300);
        *(_QWORD *)(v305 + 8 * v300) = 0;
        *(_QWORD *)(v306 + 24) = v307;
        *(_BYTE *)(v306 + 32) = 0;
        v302 = *((_DWORD *)this + 161);
        if (v302 <= v300)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D7DCLL);
        }
        v308 = *((_QWORD *)this + 79);
        v309 = *(_DWORD **)(v308 + 8 * v300);
        *(_QWORD *)(v308 + 8 * v300) = v306;
        if (v309)
        {
          if (v309[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v309 + 16))(v309);
            v302 = *((_DWORD *)this + 161);
          }
          else
          {
            --v309[4];
          }
        }
      }
      if (v302 <= v300)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D710);
      }
      v310 = *(WTF **)(*((_QWORD *)this + 79) + 8 * v300);
      if (!v310)
        return 2;
      return WebCore::wrap<WebCore::WebCodecsAudioData>(*(_QWORD *)this, *((_QWORD *)this + 27), v310);
    case 0x3Cu:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v20 = *v8;
      v19 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 165) <= v20)
        goto LABEL_963;
      v21 = *((_DWORD *)this + 169);
      if (v21 <= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6A8);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 83) + 8 * v19))
      {
        v22 = WebCore::executionContext(*(WebCore **)this, (JSC::JSGlobalObject *)a2);
        if (*((_DWORD *)this + 165) <= v19)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D78CLL);
        }
        v23 = *((_QWORD *)this + 81);
        v24 = *(_QWORD *)(v23 + 8 * v19);
        *(_QWORD *)(v23 + 8 * v19) = 0;
        *(_QWORD *)&v951 = v24;
        WebCore::MediaStreamTrack::create(v22, (uint64_t **)&v951, (WebCore::ContextDestructionObserver **)v892);
        if (*((_DWORD *)this + 169) <= v19)
        {
          __break(0xC471u);
          JUMPOUT(0x19440D794);
        }
        v26 = *((_QWORD *)this + 83);
        v27 = *(_DWORD **)(v26 + 8 * v19);
        *(CFTypeRef *)(v26 + 8 * v19) = v892[0];
        if (v27)
        {
          if (v27[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
          else
            --v27[6];
        }
        v28 = (WebCore::MediaStreamTrackDataHolder *)v951;
        *(_QWORD *)&v951 = 0;
        if (v28)
        {
          WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(v28, v25);
          WTF::fastFree(v29, v30);
        }
        v21 = *((_DWORD *)this + 169);
      }
      if (v21 <= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6B0);
      }
      v31 = *(_QWORD *)(*((_QWORD *)this + 83) + 8 * v19);
      if (!v31)
        return 2;
      return WebCore::wrap<WebCore::MediaStreamTrack>(*(_QWORD *)this, *((JSC::VM **)this + 27), v31);
    case 0x3Du:
      if (*((_BYTE *)this + 8))
        goto LABEL_963;
      if ((unint64_t)v8 > v7 - 4)
        goto LABEL_963;
      v213 = *v8;
      v212 = *v8;
      *((_QWORD *)this + 29) = v8 + 1;
      if (*((_DWORD *)this + 121) <= v213)
        goto LABEL_963;
      v214 = *((_DWORD *)this + 125);
      if (v214 <= v212)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6F0);
      }
      if (!*(_QWORD *)(*((_QWORD *)this + 61) + 8 * v212))
      {
        v215 = *((_QWORD *)this + 59);
        v216 = *(_QWORD *)(v215 + 8 * v212);
        *(_QWORD *)(v215 + 8 * v212) = 0;
        *(_BYTE *)(v216 + 12) = 0;
        v217 = *((_QWORD *)this + 61);
        v218 = *(_DWORD **)(v217 + 8 * v212);
        *(_QWORD *)(v217 + 8 * v212) = v216;
        if (v218)
        {
          if (v218[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v218 + 8))(v218);
            v214 = *((_DWORD *)this + 125);
          }
          else
          {
            --v218[2];
          }
        }
      }
      if (v214 <= v212)
      {
        __break(0xC471u);
        JUMPOUT(0x19440D6F8);
      }
      v219 = *(WTF **)(*((_QWORD *)this + 61) + 8 * v212);
      if (!v219)
        return 2;
      return WebCore::wrap<WebCore::MediaSourceHandle>(*(_QWORD *)this, *((_QWORD *)this + 27), v219);
    default:
      SlowCase = 0;
      *v9 = (unsigned int *)((char *)v8 - 1);
      return SlowCase;
  }
}

uint64_t WebCore::CloneDeserializer::readStringData(WebCore::CloneDeserializer *this, WTF ***a2, _BYTE *a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF **v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  WTF *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t StringIndex;
  WTF *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  if (*((_BYTE *)this + 8))
    return 0;
  v8 = (unsigned int *)*((_QWORD *)this + 29);
  v7 = *((_QWORD *)this + 30);
  v6 = (_QWORD *)((char *)this + 232);
  if ((unint64_t)v8 > v7 - 4)
    goto LABEL_36;
  v10 = *v8;
  v9 = *v8;
  *v6 = v8 + 1;
  if (v10 == -1)
  {
    v13 = 0;
    *a3 = 1;
    return v13;
  }
  if (v9 == -2)
  {
    StringIndex = WebCore::CloneDeserializer::readStringIndex(this);
    if (HIDWORD(StringIndex) && StringIndex < (unint64_t)*((unsigned int *)this + 67))
    {
      *a2 = (WTF **)((char *)this + 256);
      a2[1] = (WTF **)StringIndex;
      return 1;
    }
LABEL_36:
    v13 = 0;
    *((_BYTE *)this + 8) = 1;
    return v13;
  }
  v30 = 0;
  result = WebCore::CloneDeserializer::readString(v6, v7, (uint64_t *)&v30, v9 & 0x7FFFFFFF, v9 >> 31, a4);
  v13 = result;
  if ((result & 1) == 0)
  {
    *((_BYTE *)this + 8) = 1;
LABEL_18:
    v24 = v30;
    v30 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v12);
      else
        *(_DWORD *)v24 -= 2;
    }
    return v13;
  }
  v14 = (WTF **)((char *)this + 256);
  v15 = *((unsigned int *)this + 67);
  if ((_DWORD)v15 != *((_DWORD *)this + 66))
  {
    v21 = (WTF::StringImpl **)((char *)*v14 + 16 * v15);
LABEL_17:
    v22 = v30;
    v30 = 0;
    *v21 = v22;
    v21[1] = 0;
    v23 = (*((_DWORD *)this + 67) + 1);
    *((_DWORD *)this + 67) = v23;
    *a2 = v14;
    a2[1] = (WTF **)(v23 - 1);
    goto LABEL_18;
  }
  v16 = v15 + (v15 >> 2);
  if (v16 >= 0x10)
    v17 = v16 + 1;
  else
    v17 = 16;
  if (v17 <= v15 + 1)
    v18 = v15 + 1;
  else
    v18 = v17;
  if (!(v18 >> 28))
  {
    v19 = *v14;
    v20 = (WTF *)WTF::fastMalloc((WTF *)(16 * v18));
    *((_DWORD *)this + 66) = v18;
    *((_QWORD *)this + 32) = v20;
    if ((_DWORD)v15)
    {
      v26 = (WTF *)((char *)v19 + 16 * v15);
      v27 = v19;
      do
      {
        v28 = *(WTF::StringImpl **)v27;
        *(_QWORD *)v27 = 0;
        *(_QWORD *)v20 = v28;
        *((_QWORD *)v20 + 1) = *((_QWORD *)v27 + 1);
        WebCore::ContentType::~ContentType((WTF::StringImpl **)v27, v12);
        v27 = (WTF *)(v29 + 16);
        v20 = (WTF *)((char *)v20 + 16);
      }
      while (v27 != v26);
      v20 = *v14;
    }
    if (v19)
    {
      if (v20 == v19)
      {
        *((_QWORD *)this + 32) = 0;
        *((_DWORD *)this + 66) = 0;
      }
      WTF::fastFree(v19, v12);
      v20 = *v14;
    }
    v21 = (WTF::StringImpl **)((char *)v20 + 16 * *((unsigned int *)this + 67));
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CloneDeserializer::readString(_QWORD *a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, int a6)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24[7];

  if (a4 > 0x3FFFFFFE)
    return 0;
  v24[5] = v6;
  v24[6] = v7;
  v10 = a4;
  if (!a5)
  {
    if (a2 - *a1 < 2 * a4)
      return 0;
    if (a6)
    {
      WTF::AtomStringImpl::add();
      WTF::String::operator=(a3, v24);
    }
    else
    {
      WTF::String::String();
      v23 = v24[0];
      v24[0] = 0;
      v20 = (WTF::StringImpl *)*a3;
      *a3 = (uint64_t)v23;
      if (!v20)
        goto LABEL_32;
      v21 = *(_DWORD *)v20 - 2;
      if (*(_DWORD *)v20 != 2)
        goto LABEL_31;
      WTF::StringImpl::destroy(v20, v22);
    }
    v20 = v24[0];
    v24[0] = 0;
    if (!v20)
    {
LABEL_32:
      v10 *= 2;
      goto LABEL_8;
    }
    v21 = *(_DWORD *)v20 - 2;
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v19);
      goto LABEL_32;
    }
LABEL_31:
    *(_DWORD *)v20 = v21;
    goto LABEL_32;
  }
  if (a2 - *a1 < a4)
    return 0;
  if (a6)
  {
    WTF::AtomStringImpl::add();
    v17 = v24[0];
    if (v24[0])
      *(_DWORD *)v24[0] += 2;
    v18 = (WTF::StringImpl *)*a3;
    *a3 = (uint64_t)v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v17)
      goto LABEL_8;
    if (*(_DWORD *)v17 == 2)
    {
      v13 = v17;
      goto LABEL_23;
    }
    *(_DWORD *)v17 -= 2;
  }
  else
  {
    WTF::String::String();
    v12 = v24[0];
    v24[0] = 0;
    v13 = (WTF::StringImpl *)*a3;
    *a3 = (uint64_t)v12;
    if (v13)
    {
      v14 = *(_DWORD *)v13 - 2;
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        v13 = v24[0];
        v24[0] = 0;
        if (!v13)
          goto LABEL_8;
        v14 = *(_DWORD *)v13 - 2;
        if (*(_DWORD *)v13 == 2)
        {
LABEL_23:
          WTF::StringImpl::destroy(v13, v16);
          goto LABEL_8;
        }
      }
      *(_DWORD *)v13 = v14;
    }
  }
LABEL_8:
  *a1 += v10;
  return 1;
}

uint64_t JSC::JSObject::setIndexQuickly(uint64_t result, _DWORD *a2, uint64_t a3, JSValue a4)
{
  uint64_t v4;
  double isa_low;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;

  v4 = *(_QWORD *)(result + 8);
  switch(*(_BYTE *)(result + 4) & 0xF)
  {
    case 0:
    case 1:
      v8 = a3;
      return JSC::JSObject::setIndexQuicklyForTypedArray(result, v8, a4);
    case 4:
    case 5:
      if ((unint64_t)a4.super.isa > 0xFFFDFFFFFFFFFFFFLL)
        goto LABEL_9;
      result = JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)result, (JSC::VM *)a2, a3, a4);
      break;
    case 6:
    case 7:
      if (!((unint64_t)a4.super.isa >> 49))
        return JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)result, (JSC::VM *)a2, a3, a4);
      if ((unint64_t)a4.super.isa >= 0xFFFE000000000000)
        isa_low = (double)SLODWORD(a4.super.isa);
      else
        *(_QWORD *)&isa_low = (char *)a4.super.isa - 0x2000000000000;
      *(double *)(v4 + 8 * a3) = isa_low;
      if (*(_DWORD *)(v4 - 8) <= a3)
        *(_DWORD *)(v4 - 8) = a3 + 1;
      return result;
    case 8:
    case 9:
LABEL_9:
      *(JSValue *)(v4 + 8 * a3) = a4;
      if (*(_DWORD *)(v4 - 8) <= a3)
        *(_DWORD *)(v4 - 8) = a3 + 1;
      if (a4.super.isa
        && ((unint64_t)a4.super.isa & 0xFFFE000000000002) == 0
        && a2[190] >= *(unsigned __int8 *)(result + 7))
      {
        result = JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 48), (const JSCell *)result);
      }
      break;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
      v11 = a3;
      v10 = *(_QWORD *)(result + 8);
      v6 = v4 + 8 * a3;
      v7 = *(_QWORD *)(v6 + 16);
      *(JSValue *)(v6 + 16) = a4;
      if (a4.super.isa
        && ((unint64_t)a4.super.isa & 0xFFFE000000000002) == 0
        && a2[190] >= *(unsigned __int8 *)(result + 7))
      {
        result = JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 48), (const JSCell *)result);
      }
      if (!v7)
      {
        ++*(_DWORD *)(v10 + 12);
        if (*(_DWORD *)(v10 - 8) <= v11)
          *(_DWORD *)(v10 - 8) = v11 + 1;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19440DE68);
  }
  return result;
}

unint64_t JSC::JSArray::tryCreate(JSC::JSArray *this, unint64_t a2, JSC::Structure *a3, unsigned int a4, __n128 a5)
{
  int v5;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  double *v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;

  v5 = (int)a3;
  v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 65534
    || (v8 == 0xFFFF ? (v9 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84)) : (v9 = *(unsigned __int16 *)(a2 + 24)), v9 < 64))
  {
    v10 = 0;
  }
  else if ((v9 - 63) >= 5)
  {
    v27 = (v9 - 64) | ((v9 - 64) >> 1) | (((v9 - 64) | ((v9 - 64) >> 1)) >> 2);
    v28 = v27 | (v27 >> 4) | ((v27 | (v27 >> 4)) >> 8);
    v10 = (v28 | HIWORD(v28)) + 1;
  }
  else
  {
    v10 = 4;
  }
  v11 = *(_BYTE *)(a2 + 8) & 0xE;
  if (v11 <= 9)
  {
    if (a4 > 0x10000000)
      return 0;
    if (v8 == 65534)
      goto LABEL_41;
    if (v8 == 0xFFFF)
      v8 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v8 < 64)
    {
LABEL_41:
      v12 = 0;
    }
    else if ((v8 - 63) >= 5)
    {
      v29 = (v8 - 64) | ((v8 - 64) >> 1) | (((v8 - 64) | ((v8 - 64) >> 1)) >> 2);
      v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
      v12 = (v30 | HIWORD(v30)) + 1;
    }
    else
    {
      v12 = 4;
    }
    v13 = v12;
    if (a4 <= 3)
      LODWORD(v14) = 3;
    else
      LODWORD(v14) = a4;
    if (a4)
      v14 = v14;
    else
      v14 = 5;
    v15 = v14 + v12;
    v16 = 8 * v15;
    if (v15 > 9)
    {
      if (v15 <= 0x3EB)
        v17 = *(unsigned int *)(MEMORY[0x1E0CBE2A8] + (((unint64_t)(v16 + 23) >> 2) & 0x7FFFFFFFCLL));
      else
        v17 = v16 + 8;
    }
    else
    {
      v17 = (v16 + 23) & 0x1FFFFFFFF0;
    }
    v18 = v17 - 8 * v13 - 8;
    v19 = v18 & 0x7FFFFFFF8;
    if ((v18 & 0x7FFFFFFF8) + 8 * v10 + 8 <= 0x1F60
      && (v20 = *(_QWORD *)((char *)this + ((((v18 & 0x7FFFFFFF8) + 8 * v10 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v21 = *(unsigned int *)(v20 + 60);
      result = *(_QWORD *)(v20 + 24);
      if (result >= *(_QWORD *)(v20 + 32))
      {
        result = *(_QWORD *)(v20 + 40);
        if ((result & 1) == 0)
        {
          v32 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v20 + 48);
          *(_QWORD *)(v20 + 32) = result + HIDWORD(v32);
          *(_QWORD *)(v20 + 40) = result + (int)v32;
          *(_QWORD *)(v20 + 24) = result + v21;
LABEL_28:
          v23 = (double *)(v18 >> 3);
          if ((v18 >> 3) >= 0x10000001)
          {
            __break(0xC471u);
            JUMPOUT(0x19440E1C0);
          }
          v24 = (_DWORD *)(result + 8 * v10);
          v25 = (unint64_t)(v24 + 2);
          *v24 = v5;
          v24[1] = (_DWORD)v23;
          if (v11 == 6)
          {
            if (v23 <= 0x63)
            {
              if ((_DWORD)v23)
                memset_pattern16(v24 + 2, &unk_1968DEF30, v19);
            }
            else
            {
              JSC::clearArrayMemset((JSC *)(v24 + 2), v23);
            }
          }
          else if (v23 > 0x63)
          {
            JSC::clearArrayMemset();
          }
          else if ((_DWORD)v23)
          {
            bzero(v24 + 2, v19);
          }
          goto LABEL_33;
        }
        JSC::sanitizeStackForVM();
        result = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        *(_QWORD *)(v20 + 24) = result + v21;
      }
    }
    else
    {
      result = JSC::CompleteSubspace::allocateSlow();
    }
    if (!result)
      return result;
    goto LABEL_28;
  }
  result = (unint64_t)JSC::tryCreateArrayButterfly(this, 0, a3, a5);
  if (!result)
    return result;
  v25 = result;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
LABEL_33:
  result = *((_QWORD *)this + 4698);
  if (result < *((_QWORD *)this + 4699))
  {
LABEL_34:
    *((_QWORD *)this + 4698) = result + 16;
    goto LABEL_35;
  }
  result = *((_QWORD *)this + 4700);
  if ((result & 1) == 0)
  {
    v31 = *(_QWORD *)(result + 8) ^ *((_QWORD *)this + 4701);
    *((_QWORD *)this + 4699) = result + HIDWORD(v31);
    *((_QWORD *)this + 4700) = result + (int)v31;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)result = 0;
  v26 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v26;
  *(_QWORD *)(result + 8) = v25;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

WTF *WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resizeToFit(uint64_t a1, unint64_t a2)
{
  WTF *result;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (WTF *)WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  v6 = *(unsigned int *)(a1 + 12);
  if (v6 >= a2)
  {
    if (v6 != a2)
    {
      v11 = 32 * v6 - 32 * a2;
      v12 = *(_QWORD *)a1 + 32 * a2 + 16;
      do
      {
        result = *(WTF **)(v12 - 16);
        if ((WTF *)v12 != result && result != 0)
        {
          *(_QWORD *)(v12 - 16) = 0;
          *(_DWORD *)(v12 - 8) = 0;
          v17 = v12;
          v18 = v11;
          result = (WTF *)WTF::fastFree(result, v5);
          v12 = v17;
          v11 = v18;
        }
        v12 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 < a2)
    {
      v14 = v7 + (v7 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= a2)
        v16 = a2;
      else
        v16 = v15;
      result = (WTF *)WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v16);
    }
    if (*(_QWORD *)a1)
    {
      v8 = *(unsigned int *)(a1 + 12);
      if (v8 != a2)
      {
        v9 = 32 * a2 - 32 * v8;
        v10 = (_QWORD *)(*(_QWORD *)a1 + 32 * v8 + 16);
        do
        {
          *v10 = 0;
          v10[1] = 0;
          *(v10 - 2) = v10;
          *(v10 - 1) = 1;
          v10 += 4;
          v9 -= 32;
        }
        while (v9);
      }
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  int v17;
  char *v18;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 27))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = 0;
      v10 = 32 * v5;
      do
      {
        v11 = v8 + v9;
        v12 = (char *)v4 + v9;
        v13 = (void *)(v8 + v9 + 16);
        *(_QWORD *)v11 = v13;
        *(_QWORD *)(v11 + 8) = 1;
        v14 = (uint64_t)v4 + v9 + 16;
        v7 = *(void **)((char *)v4 + v9);
        if ((void *)v14 == v7)
        {
          memcpy(v13, v7, 8 * *((unsigned int *)v12 + 3));
        }
        else
        {
          *(_QWORD *)v12 = v14;
          *(_QWORD *)v11 = v7;
          v17 = *((_DWORD *)v12 + 2);
          *((_DWORD *)v12 + 2) = 1;
          *(_DWORD *)(v11 + 8) = v17;
        }
        v15 = *(_DWORD *)((char *)v4 + v9 + 12);
        *(_DWORD *)((char *)v4 + v9 + 12) = 0;
        *(_DWORD *)(v11 + 12) = v15;
        *(_BYTE *)(v8 + v9 + 24) = *((_BYTE *)v4 + v9 + 24);
        v16 = *(WTF **)((char *)v4 + v9);
        if ((WTF *)v14 != v16 && v16)
        {
          v18 = (char *)v4 + v9;
          *(_QWORD *)v18 = 0;
          *((_DWORD *)v18 + 2) = 0;
          WTF::fastFree(v16, v7);
        }
        v9 += 32;
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::HTMLStyleElement::~HTMLStyleElement(WebCore::HTMLStyleElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLStyleElement::~HTMLStyleElement(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  WebCore::InlineStyleSheetOwner *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (WebCore::HTMLStyleElement *)((char *)this + 112);
  WebCore::InlineStyleSheetOwner::clearDocumentData((uint64_t)this + 112, this);
  {
    if (dword_1ECE9068C)
    {
      v4 = (uint64_t *)qword_1ECE90680;
      v5 = 16 * dword_1ECE9068C;
      do
      {
        if (*v4 && *(WebCore::HTMLStyleElement **)(*v4 + 8) == this)
          v4 = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v4, v3);
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
    }
  }
  else
  {
    v8 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
  }
  if (dword_1ECE9069C)
  {
    v6 = (uint64_t *)qword_1ECE90690;
    v7 = 16 * dword_1ECE9069C;
    do
    {
      if (*v6 && *(WebCore::HTMLStyleElement **)(*v6 + 8) == this)
        v6 = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v6, v3);
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  WebCore::InlineStyleSheetOwner::~InlineStyleSheetOwner(v2, v3);
  WebCore::Element::~Element((uint64_t)this);
}

void WebCore::InlineStyleSheetOwner::~InlineStyleSheetOwner(WebCore::InlineStyleSheetOwner *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*((_QWORD *)this + 4))
    WebCore::InlineStyleSheetOwner::clearSheet(this, a2);
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebCore::InlineStyleSheetOwner::clearDocumentData(uint64_t this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = this;
  v4 = *(_QWORD *)(this + 32);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    this = *(_QWORD *)(v4 + 96);
    *(_QWORD *)(v4 + 96) = 0;
    if (this)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)this);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)this));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)this);
        v11 = *(unsigned int *)(this + 28);
        if ((_DWORD)v11)
        {
          v14 = this;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v11));
          this = v14;
        }
        v12 = *(WTF **)(this + 16);
        if (v12)
        {
          *(_QWORD *)(this + 16) = 0;
          *(_DWORD *)(this + 24) = 0;
          v13 = this;
          WTF::fastFree(v12, a2);
          this = v13;
        }
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    if (*(_DWORD *)(v4 + 8) == 1)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    else
      --*(_DWORD *)(v4 + 8);
  }
  v7 = *(_QWORD *)(v3 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      ++*(_DWORD *)(v8 + 8);
      this = WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>(v8 + 192, (uint64_t)a2);
      if ((_DWORD)this)
      {
        if (!*(_BYTE *)(v8 + 233))
        {
          *(_WORD *)(v8 + 232) = 256;
          if (*(_QWORD *)(v8 + 24))
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 1328) + 234) = 1;
        }
        if ((*(_QWORD *)(v8 + 112) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(v8 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          *(_QWORD *)(v8 + 104) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime(v8 + 80, v9 + 0.0);
        }
      }
      v10 = *(_DWORD *)(v8 + 8);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x19440E810);
      }
      *(_DWORD *)(v8 + 8) = v10 - 1;
    }
  }
  return this;
}

uint64_t WebCore::SWServer::addConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(*a2 + 32);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SWServer::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SWServer::Connection>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::SWServer::Connection>>((uint64_t)&v3, (uint64_t *)(a1 + 24), &v4, a2);
}

uint64_t WebCore::CookieJar::shouldIncludeSecureCookies(WebCore::CookieJar *this, const WebCore::Document *a2, const WTF::URL *a3)
{
  uint64_t result;

  LODWORD(result) = WTF::URL::protocolIs();
  if ((*((_BYTE *)this + 273) & 2) != 0)
    return 0;
  else
    return result;
}

WebCore::FrameSelection *WebCore::FrameSelection::FrameSelection(WebCore::FrameSelection *this, WebCore::Document *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  BOOL v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v28;

  v4 = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 257;
  *((_DWORD *)this + 7) = 0;
  *(_QWORD *)this = off_1E33AA2B0;
  if (a2)
  {
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v4)
    {
      do
        v28 = __ldaxr(v4);
      while (__stlxr(v28 + 1, v4));
    }
  }
  *((_QWORD *)this + 4) = v4;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 52) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) &= 0xF0u;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_BYTE *)this + 84) &= 0xF0u;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 100) &= 0xF0u;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) &= 0xF0u;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_BYTE *)this + 132) &= 0xF0u;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_BYTE *)this + 148) &= 0xF0u;
  *((_WORD *)this + 76) = 1;
  *((_BYTE *)this + 154) = *((_BYTE *)this + 154) & 0xFC | 1;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_BYTE *)this + 172) &= 0xF0u;
  *((_BYTE *)this + 176) = 1;
  *((_BYTE *)this + 184) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_BYTE *)this + 224) = 3;
  *(_QWORD *)((char *)this + 236) = 0;
  *(_QWORD *)((char *)this + 228) = 0;
  v5 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v5 = off_1E3404970;
  *(_QWORD *)(v5 + 8) = this;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 24) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E31FCB38;
  v9[1] = WebCore::CaretAnimator::scheduleAnimation;
  v9[2] = 0;
  v9[3] = v5;
  *(_QWORD *)(v5 + 72) = v9;
  *(_BYTE *)(v5 + 80) = 1;
  *(_DWORD *)(v5 + 84) = 1065353216;
  *(_WORD *)(v5 + 88) = 0;
  *(_BYTE *)(v5 + 90) = 0;
  if (WebCore::CaretAnimator::page((WebCore::CaretAnimator *)v5))
    v10 = *(_BYTE *)(WebCore::CaretAnimator::page((WebCore::CaretAnimator *)v5) + 568) != 0;
  else
    v10 = 0;
  *(_BYTE *)(v5 + 90) = v10;
  *(_QWORD *)v5 = off_1E3406FA0;
  *(_QWORD *)(v5 + 96) = 0;
  *((_QWORD *)this + 31) = v5;
  v11 = *((_WORD *)this + 128) & 0xFFFC | 2;
  *((_WORD *)this + 128) = v11;
  if (a2)
  {
    v12 = *((_QWORD *)a2 + 66);
    if (v12)
    {
      v12 = *(_QWORD *)(v12 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v14 + 72) + 16);
          if (v15)
          {
            v15 = *(_QWORD *)(v15 + 8);
            if (v15)
            {
              if (*(_BYTE *)(v15 + 144))
                v15 = 0;
            }
          }
          LOWORD(v12) = 4 * (v15 == v12);
        }
        else
        {
          LOWORD(v12) = 0;
        }
      }
    }
    v17 = v12 | v11 & 0xFFFA;
    *((_WORD *)this + 128) = v17;
    v16 = (_QWORD *)*((_QWORD *)a2 + 66);
    if (v16)
    {
      v16 = (_QWORD *)v16[1];
      if (v16)
      {
        v16 = (_QWORD *)v16[3];
        if (v16)
        {
          v16 = (_QWORD *)v16[1];
          if (v16)
            LOWORD(v16) = 8 * (*(_WORD *)(v16[9] + 26) & 1);
        }
      }
    }
  }
  else
  {
    LOWORD(v16) = 0;
    v17 = v11 & 0xFFFA;
  }
  *((_WORD *)this + 128) = v17 & 0xFE07 | (unsigned __int16)v16;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 68) = 0;
  v18 = *((_QWORD *)this + 4);
  if (v18
    && (v19 = *(_QWORD *)(v18 + 8)) != 0
    && ((v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 680) + 370)) != 0 ? (v21 = v20 == 3) : (v21 = 1), v21))
  {
    if ((v17 & 4) == 0)
      goto LABEL_38;
  }
  else
  {
    *((_BYTE *)this + 154) |= 2u;
    if ((v17 & 4) == 0)
      goto LABEL_38;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 528);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 24);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          if ((*(_WORD *)(*(_QWORD *)(v25 + 72) + 26) & 1) != 0)
          {
            WebCore::FrameSelection::setSelectionFromNone((uint64_t)this);
            v26 = 1;
            goto LABEL_39;
          }
        }
      }
    }
  }
LABEL_38:
  v26 = 0;
LABEL_39:
  WebCore::FrameSelection::setCaretVisible(this, v26);
  return this;
}

void WebCore::FrameLoader::loadWithDocumentLoader(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4, int a5, uint64_t *a6)
{
  NSObject *v10;
  uint64_t updated;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (*v32)();
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  const void *v55;
  unsigned int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  CFTypeRef v60;
  void *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  const WTF::StringImpl **v65;
  const WTF::StringImpl *v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  __int16 v70;
  void *v71;
  unsigned __int8 *v72;
  unsigned int *v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  unsigned int v76;
  WTF *v77;
  _QWORD *v78;
  WTF::StringImpl *v79;
  _QWORD *v80;
  WTF::StringImpl *v81;
  void *v82;
  WTF::StringImpl *v83;
  WTF *v84;
  uint64_t v85;
  WebCore::SecurityOrigin *v86;
  WebCore::SecurityOrigin *v87;
  WTF::StringImpl *v88;
  const WebCore::SecurityOrigin *v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  NSObject *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v104;
  _QWORD v106[3];
  _QWORD *v107;
  uint64_t v108[17];
  char v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  char v114;
  const void *v115;
  uint64_t v116;
  char v117;
  _QWORD v118[25];
  WTF *v119;
  _BYTE buf[12];
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  _BOOL4 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char v132;
  char v133;
  __int16 v134;
  char v135;
  int64x2_t v136;
  int64x2_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int64x2_t v141;
  uint64_t v142;
  char v143;
  __int16 v144;
  char v145;
  CFTypeRef cf;
  char v147;
  __int16 v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE7C860;
  updated = os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)updated)
  {
    v13 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v14 = v13[3];
    if (v14)
    {
      v14 = *(_QWORD *)(v14 + 8);
      if (v14)
      {
        if (*(_BYTE *)(v14 + 40))
          v14 = *(_QWORD *)(v14 + 32);
        else
          v14 = 0;
      }
    }
    v15 = v13[4];
    v16 = *(_QWORD *)(v13[16] + 8) == (_QWORD)v13;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v121 = 2048;
    v122 = v14;
    v123 = 2048;
    v124 = v15;
    v125 = 1024;
    v126 = v16;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadWithDocumentLoader: frame load started", buf, 0x26u);
  }
  *(_BYTE *)(a1 + 404) = 0;
  v17 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v18 = (unsigned int *)(v17 + 1);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v104 = *a6;
  *a6 = 0;
  if (*(_DWORD *)(a1 + 212))
    goto LABEL_156;
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (*(_BYTE *)(*(_QWORD *)(v20 + 304) + 33))
    goto LABEL_156;
  v21 = (unsigned int *)(v20 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = *(_QWORD *)(*(_QWORD *)(v20 + 128) + 8);
  if (v23)
    v24 = *(_BYTE *)(v23 + 144) == 0;
  else
    v24 = 0;
  if (v24)
  {
    v25 = (*(_DWORD *)(v23 + 608) | WebCore::NavigationDisabler::s_globalNavigationDisableCount) == 0;
    do
    {
      v26 = __ldaxr(v21);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v21));
    if (!v27)
    {
LABEL_142:
      atomic_store(1u, v21);
      v91 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v91 = off_1E31FE290;
      v91[1] = v21;
      *(_QWORD *)buf = v91;
      WTF::ensureOnMainThread();
      updated = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (updated)
        updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)updated + 8))(updated);
      if (!v25)
        goto LABEL_156;
      goto LABEL_20;
    }
    if (!v25)
      goto LABEL_156;
  }
  else
  {
    do
      v90 = __ldaxr(v21);
    while (__stlxr(v90 - 1, v21));
    if (v90 == 1)
    {
      LOBYTE(v25) = 1;
      goto LABEL_142;
    }
  }
LABEL_20:
  v28 = v17[37];
  if (v28)
  {
    v29 = *(_DWORD **)(v28 + 736);
    if (v29)
      *v29 += 2;
    updated = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v29;
    if (updated)
    {
      if (*(_DWORD *)updated == 2)
        updated = WTF::StringImpl::destroy((WTF::StringImpl *)updated, v12);
      else
        *(_DWORD *)updated -= 2;
    }
    v30 = *(_OWORD *)(v28 + 744);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(v28 + 760);
    *(_OWORD *)(a1 + 360) = v30;
  }
  v31 = a2 + 872;
  if ((*(_BYTE *)(a2 + 1056) & 1) == 0)
  {
    updated = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 872));
    *(_BYTE *)(a2 + 1056) |= 1u;
  }
  if (*(_BYTE *)(a1 + 156))
  {
    if (*(_QWORD *)(a1 + 352))
    {
      v65 = (const WTF::StringImpl **)WTF::aboutBlankURL((WTF *)updated);
      if ((WTF::equal(*(WTF **)(a1 + 352), *v65, v66) & 1) == 0)
        *(_BYTE *)(a1 + 156) = 0;
    }
  }
  if (*(_QWORD **)(v17[16] + 8) == v17)
  {
    v92 = v17[3];
    if (v92)
    {
      v93 = *(uint64_t **)(v92 + 8);
      if (v93)
      {
        ++*(_DWORD *)v93;
        v94 = qword_1ECE7C860;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
        {
          v95 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
          v96 = v95[3];
          if (v96)
          {
            v96 = *(_QWORD *)(v96 + 8);
            if (v96)
            {
              if (*(_BYTE *)(v96 + 40))
                v96 = *(_QWORD *)(v96 + 32);
              else
                v96 = 0;
            }
          }
          v97 = v95[4];
          v98 = *(_QWORD *)(v95[16] + 8) == (_QWORD)v95;
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = a1;
          v121 = 2048;
          v122 = v96;
          v123 = 2048;
          v124 = v97;
          v125 = 1024;
          v126 = v98;
          _os_log_impl(&dword_1940B8000, v94, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadWithDocumentLoader: main frame load started", buf, 0x26u);
        }
        WebCore::Page::mainFrameLoadStarted((uint64_t)v93, (const WTF::URL *)(a2 + 872), a3);
        WebCore::PerformanceLogging::didReachPointOfInterest(v93[150], 0);
        WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v93);
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + 26) = a3;
  if (a3 - 1 <= 2 && !*(_QWORD *)(v17[23] + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x19440F788);
  }
  if (*a4)
    v32 = WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>>::unspecifiedBoolTypeInstance;
  else
    v32 = 0;
  v33 = a3;
  if ((*(_BYTE *)(a2 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 872));
    *(_BYTE *)(a2 + 1056) |= 1u;
    v33 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 26);
  }
  if (v32 && !WTF::equalLettersIgnoringASCIICase((uint64_t *)(a2 + 960), "get", 4uLL)
    || v33 <= 9 && ((1 << v33) & 0x330) != 0
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 3362) == 2
    || (*(_BYTE *)(a2 + 880) & 1) == 0
    || !*(_QWORD *)v31
    || *(_DWORD *)(*(_QWORD *)v31 + 4) <= *(_DWORD *)(a2 + 908)
    || !WTF::equalIgnoringFragmentIdentifier()
    || (v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296),
        ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 392))(v67) & 1) != 0)
    || (*(_DWORD *)(a1 + 64) - 3) > 0xFFFFFFFD)
  {
    v34 = v17[7];
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 8);
      if (v35)
      {
        if (!*(_BYTE *)(v35 + 144))
        {
          v36 = (unsigned int *)(v35 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
          v38 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v35 + 280) + 88) + 1624);
          if (v38)
            *v38 += 2;
          v39 = *(WTF::StringImpl **)(a2 + 1624);
          *(_QWORD *)(a2 + 1624) = v38;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v12);
            else
              *(_DWORD *)v39 -= 2;
          }
          do
          {
            v40 = __ldaxr(v36);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v36));
          if (!v41)
          {
            atomic_store(1u, v36);
            v101 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v101 = off_1E31FE290;
            v101[1] = v36;
            *(_QWORD *)buf = v101;
            WTF::ensureOnMainThread();
            v102 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v102)
              (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
          }
        }
      }
    }
    WebCore::PolicyChecker::stopCheck(*(WebCore::PolicyChecker **)(a1 + 24));
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)buf = a2;
    WebCore::FrameLoader::setPolicyDocumentLoader(a1, (WebCore::DocumentLoader **)buf, 0);
    if (*(_QWORD *)buf)
    {
      if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
        (*(void (**)(void))(**(_QWORD **)buf + 24))();
      else
        --*(_DWORD *)(*(_QWORD *)buf + 24);
    }
    if (!*(_BYTE *)(a2 + 1856))
      goto LABEL_61;
    v42 = *(_QWORD *)(a2 + 1632);
    if (!v42 || !*(_DWORD *)(v42 + 4))
      goto LABEL_61;
    v64 = a2 + 1872;
    if ((*(_BYTE *)(a2 + 2056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 1872));
      *(_BYTE *)(a2 + 2056) |= 1u;
    }
    if (!*(_QWORD *)v64 || !*(_DWORD *)(*(_QWORD *)v64 + 4))
    {
LABEL_61:
      v43 = v17[37];
      if (v43)
        *(_DWORD *)(v43 + 24) += 2;
      WebCore::NavigationAction::NavigationAction((uint64_t)buf, v43, a2 + 872, 1, *(_BYTE *)(a2 + 3532), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 26), v32 != 0, 0, 0, MEMORY[0x1E0CBF2F8]);
      if (*(_DWORD *)(v43 + 24) == 2)
      {
        if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v43);
      }
      else
      {
        *(_DWORD *)(v43 + 24) -= 2;
      }
      if ((a3 - 1) < 3u)
      {
        v44 = 3;
      }
      else if (a3 <= 9 && ((1 << a3) & 0x310) != 0)
      {
        v44 = 2;
      }
      else
      {
        v44 = a3 == 7;
      }
      v148 = v44 | 0x100;
      WebCore::NavigationAction::operator=(a2 + 1632, (uint64_t *)buf);
      v46 = *(_QWORD *)(a2 + 16);
      if (!v46
        || (v47 = *(_QWORD **)(v46 + 8)) == 0
        || *(_QWORD **)(v47[16] + 8) == v47
        || *(_QWORD *)(v47[35] + 88) == a2
        && (v85 = v47[37]) != 0
        && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v85 + 192), v45),
            v87 = v86,
            WebCore::Document::topOrigin((WebCore::Document *)v85, v88),
            WebCore::SecurityOrigin::isSameOriginAs(v87, v89)))
      {
        v48 = *(_BYTE *)(a2 + 3530);
      }
      else
      {
        v48 = 0;
      }
      *(_BYTE *)(a2 + 2503) = v48;
      WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v45);
    }
    v49 = (_QWORD *)v17[19];
    ++*(_DWORD *)v49;
    WebCore::NavigationScheduler::cancel(v49, (WebCore::Frame *)1);
    if (!*(_DWORD *)v49)
    {
      __break(0xC471u);
      JUMPOUT(0x19440F84CLL);
    }
    --*(_DWORD *)v49;
    if (!*(_BYTE *)(a1 + 349))
    {
      v50 = *(unsigned __int8 **)(a1 + 24);
      if (v50[26] - 1 <= 2 && !*(_QWORD *)(v17[23] + 32))
      {
        __break(0xC471u);
        JUMPOUT(0x19440F800);
      }
      WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v108, (const WebCore::ResourceRequestBase::RequestData *)(a2 + 872));
      v51 = *(_DWORD **)(a2 + 1024);
      if (v51)
        *v51 += 2;
      v110 = v51;
      v52 = *(_DWORD **)(a2 + 1032);
      if (v52)
        *v52 += 2;
      v111 = v52;
      v53 = *(_DWORD **)(a2 + 1040);
      if (v53)
        ++*v53;
      v54 = *(_QWORD *)(a2 + 1048);
      v112 = v53;
      v113 = v54;
      v114 = *(_BYTE *)(a2 + 1056);
      v55 = *(const void **)(a2 + 1064);
      v115 = v55;
      if (v55)
        CFRetain(v55);
      *(_QWORD *)buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
      v133 = 0;
      v134 = 0;
      v127 = 0u;
      v128 = 0u;
      v129 = 0u;
      v130 = 0u;
      v131 = 0u;
      v132 = 0;
      v136 = vdupq_n_s64(0x7FF8000000000000uLL);
      v137 = v136;
      v139 = 0;
      v138 = 0;
      v141 = v136;
      v140 = 0x8000000000000000;
      v142 = 0x7FF8000000000000;
      v143 &= 0xF0u;
      v144 &= 0xC000u;
      v145 = v145 & 0xF8 | 2;
      cf = 0;
      v147 = 0;
      v135 = v135 & 0xC0 | 5;
      do
        v56 = __ldaxr(v18);
      while (__stlxr(v56 + 1, v18));
      v57 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v57 = &off_1E33F6000;
      *(_QWORD *)(v57 + 8) = a1;
      *(_QWORD *)(v57 + 16) = v17;
      *(_BYTE *)(v57 + 24) = a5;
      *(_QWORD *)(v57 + 32) = v104;
      v118[0] = v57;
      WebCore::PolicyChecker::checkNavigationPolicy((WebCore::NavigationAction *)v50, (uint64_t)v108, (uint64_t)buf, a2, a4, v118, 1);
      v59 = v118[0];
      v118[0] = 0;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      v60 = cf;
      cf = 0;
      if (v60)
        CFRelease(v60);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v58);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v108, v61);
      goto LABEL_91;
    }
    WebCore::FrameLoader::continueLoadAfterNavigationPolicy(a1, (WebCore::ResourceRequest *)(a2 + 872), *a4, 0, a5);
  }
  else
  {
    v68 = *(_DWORD **)(a1 + 88);
    if (v68)
      ++v68[6];
    v69 = v17[37];
    if (v69)
      *(_DWORD *)(v69 + 24) += 2;
    v108[0] = v69;
    WebCore::NavigationAction::NavigationAction((uint64_t)buf, v69, a2 + 872, 1, *(_BYTE *)(a2 + 3532), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 26), v32 != 0, 0, 0, MEMORY[0x1E0CBF2F8]);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v108);
    if ((a3 - 1) < 3u)
    {
      v70 = 3;
    }
    else if (a3 <= 9 && ((1 << a3) & 0x310) != 0)
    {
      v70 = 2;
    }
    else
    {
      v70 = a3 == 7;
    }
    v148 = v70 | 0x100;
    WebCore::DocumentLoader::setTriggeringAction((uint64_t)v68, (uint64_t *)buf);
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v108);
    WebCore::ResourceRequest::operator=((uint64_t)(v68 + 268), (uint64_t)v108);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v108, v71);
    WebCore::PolicyChecker::stopCheck(*(WebCore::PolicyChecker **)(a1 + 24));
    v72 = *(unsigned __int8 **)(a1 + 24);
    if (v72[26] - 1 <= 2 && !*(_QWORD *)(v17[23] + 32))
    {
      __break(0xC471u);
      JUMPOUT(0x19440F98CLL);
    }
    v119 = 0;
    if (*(_BYTE *)(a2 + 1856))
    {
      v73 = *(unsigned int **)(a2 + 1672);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 + 1, v73));
      v108[0] = (uint64_t)v73;
      WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=<WebCore::SecurityOrigin>((uint64_t *)&v119, (WTF::StringImpl *)v108);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v108, v75);
      v72 = *(unsigned __int8 **)(a1 + 24);
    }
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v118, (const WebCore::ResourceRequest *)(a2 + 872));
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v108);
    v116 = 0;
    v117 = 0;
    v109 = v109 & 0xF1 | 4;
    v106[0] = a1;
    do
      v76 = __ldaxr(v18);
    while (__stlxr(v76 + 1, v18));
    v77 = v119;
    v119 = 0;
    v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v78 = &off_1E33F5FD8;
    v78[1] = v106[0];
    v78[2] = v17;
    v106[1] = 0;
    v106[2] = 0;
    v78[3] = v77;
    v107 = v78;
    WebCore::PolicyChecker::checkNavigationPolicy((WebCore::NavigationAction *)v72, (uint64_t)v118, (uint64_t)v108, (uint64_t)v68, a4, &v107, 0);
    v80 = v107;
    v107 = 0;
    if (v80)
      (*(void (**)(_QWORD *))(*v80 + 8))(v80);
    WebCore::FrameLoader::loadWithDocumentLoader(WebCore::DocumentLoader *,WebCore::FrameLoadType,WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>> &&,WebCore::AllowNavigationToInvalidURL,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v106, v79);
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v108, v81);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v118, v82);
    v84 = v119;
    v119 = 0;
    if (v84)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v84, v83);
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v83);
    if (v68)
    {
      if (v68[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 24))(v68);
      else
        --v68[6];
    }
  }
LABEL_156:
  if (v104)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  }
  if (v17)
  {
    do
    {
LABEL_91:
      v62 = __ldaxr(v18);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v18));
    if (!v63)
    {
      atomic_store(1u, v18);
      v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v99 = off_1E31FE290;
      v99[1] = v18;
      *(_QWORD *)buf = v99;
      WTF::ensureOnMainThread();
      v100 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v100)
        (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
    }
  }
}

uint64_t WebCore::PerformanceLogging::didReachPointOfInterest(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  NSObject *v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (!v4
    || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 280) + 16) + 1072))(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 16)),
        (result & 1) == 0))
  {
    v6 = qword_1ECE7C680;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C680, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 == 1)
      {
        v7 = "MainFrameLoadCompleted";
      }
      else
      {
        if (a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19440FB80);
        }
        v7 = "MainFrameLoadStarted";
      }
      *(_DWORD *)buf = 136315138;
      v18 = v7;
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "Memory usage info dump at %s:", buf, 0xCu);
    }
    WebCore::PerformanceLogging::memoryUsageStatistics(0, (uint64_t)&v14);
    result = (uint64_t)v14;
    if (v16)
    {
      v9 = qword_1ECE7C680;
      v10 = 24 * v16;
      v11 = (uint64_t *)((char *)v14 + 16);
      do
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v12 = (const char *)*(v11 - 2);
          v13 = *v11;
          *(_DWORD *)buf = 136315394;
          v18 = v12;
          v19 = 2048;
          v20 = v13;
          _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "  %s: %zu", buf, 0x16u);
          v9 = qword_1ECE7C680;
        }
        v11 += 3;
        v10 -= 24;
      }
      while (v10);
      result = (uint64_t)v14;
    }
    if (result)
    {
      v14 = 0;
      v15 = 0;
      return WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

unsigned int **WebCore::PerformanceLogging::memoryUsageStatistics@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  WebCore::Page *v4;
  WebCore::BackForwardCache *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  JSC::Heap *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v43[8];
  unsigned int *v44;
  __int128 v45;
  unint64_t v46;

  v4 = (WebCore::Page *)WTF::fastMalloc((WTF *)0x300);
  *(_DWORD *)(a2 + 8) = 32;
  *(_QWORD *)a2 = v4;
  v5 = (WebCore::BackForwardCache *)WebCore::Page::nonUtilityPageCount(v4);
  *(_QWORD *)v4 = "page_count";
  *((_QWORD *)v4 + 1) = 11;
  *((_QWORD *)v4 + 2) = v5;
  v6 = *WebCore::BackForwardCache::singleton(v5);
  if (v6)
    v6 = *(unsigned int *)(v6 - 12);
  *((_QWORD *)v4 + 3) = "backforward_cache_page_count";
  *((_QWORD *)v4 + 4) = 29;
  *((_QWORD *)v4 + 5) = v6;
  v7 = WebCore::Document::allDocuments((uint64_t **)&v45);
  v8 = *(_QWORD *)v45;
  if (*(_QWORD *)v45)
    v8 = *(unsigned int *)(v8 - 12);
  *((_QWORD *)v4 + 6) = "document_count";
  *((_QWORD *)v4 + 7) = 15;
  *((_QWORD *)v4 + 8) = v8;
  *(_DWORD *)(a2 + 12) = 3;
  v9 = (unsigned int *)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
    v9 = (unsigned int *)WebCore::commonVMSlow((WebCore *)v7);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v44 = v9;
  MEMORY[0x19AEA3294](v43, v9);
  v11 = JSC::Heap::capacity((JSC::Heap *)(v9 + 48));
  *(_QWORD *)&v45 = "javascript_gc_heap_capacity_mb";
  *((_QWORD *)&v45 + 1) = 31;
  v46 = v11 >> 20;
  v12 = *(_DWORD *)(a2 + 12);
  if (v12 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a2, (unint64_t)&v45);
  }
  else
  {
    v13 = v12 + 1;
    v14 = *(_QWORD *)a2 + 24 * v12;
    v15 = v46;
    *(_OWORD *)v14 = v45;
    *(_QWORD *)(v14 + 16) = v15;
    *(_DWORD *)(a2 + 12) = v13;
  }
  v16 = (JSC::Heap *)(v44 + 48);
  v17 = JSC::Heap::extraMemorySize((JSC::Heap *)(v44 + 48));
  *(_QWORD *)&v45 = "javascript_gc_heap_extra_memory_size_mb";
  *((_QWORD *)&v45 + 1) = 40;
  v46 = v17 >> 20;
  v18 = *(_DWORD *)(a2 + 12);
  if (v18 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a2, (unint64_t)&v45);
  }
  else
  {
    v19 = v18 + 1;
    v20 = *(_QWORD *)a2 + 24 * v18;
    v21 = v46;
    *(_OWORD *)v20 = v45;
    *(_QWORD *)(v20 + 16) = v21;
    *(_DWORD *)(a2 + 12) = v19;
  }
  if (a1)
  {
    v22 = JSC::Heap::size(v16);
    *(_QWORD *)&v45 = "javascript_gc_heap_size_mb";
    *((_QWORD *)&v45 + 1) = 27;
    v46 = v22 >> 20;
    v23 = *(_DWORD *)(a2 + 12);
    if (v23 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a2, (unint64_t)&v45);
    }
    else
    {
      v24 = v23 + 1;
      v25 = *(_QWORD *)a2 + 24 * v23;
      v26 = v46;
      *(_OWORD *)v25 = v45;
      *(_QWORD *)(v25 + 16) = v26;
      *(_DWORD *)(a2 + 12) = v24;
    }
    v27 = JSC::Heap::objectCount(v16);
    *(_QWORD *)&v45 = "javascript_gc_object_count";
    *((_QWORD *)&v45 + 1) = 27;
    v46 = v27;
    v28 = *(_DWORD *)(a2 + 12);
    if (v28 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a2, (unint64_t)&v45);
    }
    else
    {
      v29 = v28 + 1;
      v30 = *(_QWORD *)a2 + 24 * v28;
      v31 = v46;
      *(_OWORD *)v30 = v45;
      *(_QWORD *)(v30 + 16) = v31;
      *(_DWORD *)(a2 + 12) = v29;
    }
    v32 = JSC::Heap::protectedObjectCount(v16);
    *(_QWORD *)&v45 = "javascript_gc_protected_object_count";
    *((_QWORD *)&v45 + 1) = 37;
    v46 = v32;
    v33 = *(_DWORD *)(a2 + 12);
    if (v33 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a2, (unint64_t)&v45);
    }
    else
    {
      v34 = v33 + 1;
      v35 = *(_QWORD *)a2 + 24 * v33;
      v36 = v46;
      *(_OWORD *)v35 = v45;
      *(_QWORD *)(v35 + 16) = v36;
      *(_DWORD *)(a2 + 12) = v34;
    }
    v37 = JSC::Heap::protectedGlobalObjectCount(v16);
    *(_QWORD *)&v45 = "javascript_gc_protected_global_object_count";
    *((_QWORD *)&v45 + 1) = 44;
    v46 = v37;
    v38 = *(_DWORD *)(a2 + 12);
    if (v38 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a2, (unint64_t)&v45);
    }
    else
    {
      v39 = v38 + 1;
      v40 = *(_QWORD *)a2 + 24 * v38;
      v41 = v46;
      *(_OWORD *)v40 = v45;
      *(_QWORD *)(v40 + 16) = v41;
      *(_DWORD *)(a2 + 12) = v39;
    }
  }
  WebCore::PerformanceLogging::getPlatformMemoryUsageStatistics(a2);
  MEMORY[0x19AEA32A0](v43);
  return WTF::Ref<JSC::VM,WTF::RawPtrTraits<JSC::VM>,WTF::DefaultRefDerefTraits<JSC::VM>>::~Ref(&v44);
}

uint64_t *WebCore::BackForwardCache::singleton(WebCore::BackForwardCache *this)
{
  {
    WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
  }
  return &WebCore::BackForwardCache::singleton(void)::globalBackForwardCache;
}

uint64_t *WebCore::Document::allDocuments@<X0>(uint64_t **a1@<X8>)
{
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  return WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::values(&WebCore::Document::allDocumentsMap(void)::documents, a1);
}

uint64_t WebCore::Page::nonUtilityPageCount(WebCore::Page *this)
{
  return WebCore::gNonUtilityPageCount;
}

uint64_t WebCore::Document::removeFromDocumentsMap(uint64_t this)
{
  unint64_t v1;
  unint64_t v2;
  void *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  BOOL v27;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];

  {
    if (WebCore::Document::allDocumentsMap(void)::documents)
    {
      v2 = *(_QWORD *)(this + 416);
      v1 = *(_QWORD *)(this + 424);
      v3 = *(void **)(this + 432);
      v4 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 8);
      v5 = (v1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v1 - 1640531527) << 16) ^ ((unsigned __int16)v1
                                                                                              - 1640531527);
      v6 = (v1 >> 37) & 0x7FFF800 ^ ((v5 + WORD2(v1) + (v5 >> 11)) << 16) ^ (v5 + WORD2(v1) + (v5 >> 11));
      v7 = (v2 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v2 + (v6 >> 11)) << 16) ^ (v6 + (unsigned __int16)v2 + (v6 >> 11));
      v8 = (v2 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(v2) + (v7 >> 11)) << 16) ^ (v7 + WORD2(v2) + (v7 >> 11));
      v9 = (v8 + (v8 >> 11)) ^ (8 * (v8 + (v8 >> 11)));
      v10 = (v9 + (v9 >> 5)) ^ (4 * (v9 + (v9 >> 5)));
      v11 = (v10 + (v10 >> 15)) ^ ((v10 + (v10 >> 15)) << 10);
      if (!v11)
        v11 = 0x800000;
      v12 = v4 & v11;
      v13 = (uint64_t *)(WebCore::Document::allDocumentsMap(void)::documents + 48 * (v4 & v11));
      v14 = *v13;
      this = v13[1];
      v15 = this == v1 && v14 == v2;
      v16 = (void *)v13[2];
      if (v15 && v16 == v3)
      {
LABEL_13:
        v18 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
      }
      else
      {
        v26 = 1;
        while (v14 | this || v16)
        {
          v12 = (v12 + v26) & v4;
          v13 = (uint64_t *)(WebCore::Document::allDocumentsMap(void)::documents + 48 * v12);
          v14 = *v13;
          this = v13[1];
          v27 = this == v1 && v14 == v2;
          v16 = (void *)v13[2];
          ++v26;
          if (v27 && v16 == v3)
            goto LABEL_13;
        }
        v18 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
        v13 = (uint64_t *)(WebCore::Document::allDocumentsMap(void)::documents + 48 * v18);
      }
      if ((uint64_t *)(WebCore::Document::allDocumentsMap(void)::documents + 48 * v18) != v13)
      {
        *v13 = 1;
        v13[1] = 0;
        v13[2] = -1;
        this = v13[4];
        v13[4] = 0;
        if (this)
        {
          do
          {
            v22 = __ldaxr((unsigned int *)this);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, (unsigned int *)this));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)this);
            v24 = *(unsigned int *)(this + 28);
            if ((_DWORD)v24)
            {
              v37 = this;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v24));
              this = v37;
            }
            v25 = *(WTF **)(this + 16);
            if (v25)
            {
              *(_QWORD *)(this + 16) = 0;
              *(_DWORD *)(this + 24) = 0;
              v36 = this;
              WTF::fastFree(v25, v16);
              this = v36;
            }
            this = WTF::fastFree((WTF *)this, v16);
          }
        }
        ++*(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 16);
        if (WebCore::Document::allDocumentsMap(void)::documents)
          v19 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) - 1;
        else
          v19 = -1;
        *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) = v19;
        if (WebCore::Document::allDocumentsMap(void)::documents)
        {
          v20 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
          if (6 * *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) < v20 && v20 >= 9)
            this = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v20 >> 1);
        }
      }
    }
  }
  else
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  if (WebCore::staticSharedLogger(void)::logger)
  {
    v35 = WebCore::staticSharedLogger(void)::logger;
    {
      if (WebCore::Document::allDocumentsMap(void)::documents
        && *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12))
      {
        v29 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(&WebCore::Document::allDocumentsMap(void)::documents);
        if (WebCore::Document::allDocumentsMap(void)::documents)
        {
          v31 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
          v32 = WebCore::Document::allDocumentsMap(void)::documents + 48 * v31;
        }
        else
        {
          v32 = 0;
          v31 = 0;
        }
        v38[0] = &WebCore::Document::allDocumentsMap(void)::documents;
        v38[1] = v29;
        v38[2] = v30;
        v38[3] = v32;
        v38[4] = WebCore::Document::allDocumentsMap(void)::documents + 48 * v31;
        this = WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WebCore::Document::configureSharedLogger(void)::$_0>(v38);
        v33 = this;
        goto LABEL_51;
      }
    }
    else
    {
      WebCore::Document::allDocumentsMap(void)::documents = 0;
    }
    v33 = 0;
LABEL_51:
    {
      v34 = WebCore::sharedLoggerOwner(void)::owner;
    }
    else
    {
      this = WTF::cryptographicallyRandomNumber<unsigned int>();
      v34 = this;
      WebCore::sharedLoggerOwner(void)::owner = this;
    }
    if (*(_QWORD *)(v35 + 16) == v34)
      *(_BYTE *)(v35 + 12) = v33;
  }
  return this;
}

uint64_t WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>(uint64_t a1)
{
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = atomic_load(&WebCore::BackForwardCache::BackForwardCache(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::BackForwardCache::BackForwardCache(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BackForwardCache::BackForwardCache(void)::$_0 &&>>);
  }
  return a1;
}

WTF::StringImpl *WebCore::Page::mainFrameLoadStarted(uint64_t a1, const WTF::URL *a2, char a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  char v10;

  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v9, a2);
  v10 = a3;
  v6 = a1 + 1176;
  if ((*(_WORD *)(a1 + 658) & 4) != 0)
  {
    std::optional<WebCore::Page::Navigation>::operator=[abi:sn180100](v6, v5);
    WebCore::Page::logNavigation(a1, &v9);
  }
  else
  {
    std::optional<WebCore::Page::Navigation>::operator=[abi:sn180100]<WebCore::Page::Navigation&,void>(v6, (WTF::StringImpl *)&v9);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::NavigationAction::NavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, unsigned int a6, char a7, const WebCore::MouseEvent *a8, char a9, _DWORD **a10)
{
  uint64_t v16;
  _DWORD *v17;
  WebCore::SecurityContext *v18;
  unsigned int *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  unsigned int v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  char v70;
  _DWORD **v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  WTF::StringImpl *v75;
  const WebCore::MouseEvent *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  const WebCore::MouseEvent *v85;
  unsigned int v86;
  char v89;
  _BYTE v90[40];
  WTF *v91[2];
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  __int16 v96;
  __int128 v97;
  __int16 v98;
  __int128 v99;
  char v100;
  __int128 v101;
  _OWORD v102[5];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v16 = a1 + 440;
  v17 = *(_DWORD **)(a2 + 736);
  if (v17)
    *v17 += 2;
  *(_QWORD *)v90 = v17;
  *(_OWORD *)&v90[8] = *(_OWORD *)(a2 + 744);
  *(_OWORD *)&v90[24] = *(_OWORD *)(a2 + 760);
  v18 = (WebCore::SecurityContext *)(a2 + 192);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), (WTF::StringImpl *)a2);
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v91[0] = (WTF *)v19;
  WebCore::Document::topOrigin((WebCore::Document *)a2, v20);
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 + 1, v22));
  v91[1] = (WTF *)v22;
  WebCore::ContentSecurityPolicy::responseHeaders(*(_QWORD *)(a2 + 208), v23, (uint64_t)&v92);
  v96 = *(_WORD *)(a2 + 216);
  v25 = *(_DWORD **)(a2 + 224);
  if (v25)
    *v25 += 2;
  *(_QWORD *)&v97 = v25;
  v26 = *(_DWORD **)(a2 + 232);
  if (v26)
    *v26 += 2;
  *((_QWORD *)&v97 + 1) = v26;
  v27 = (**(uint64_t (***)(uint64_t))v18)(a2 + 192);
  v98 = *(_WORD *)v27;
  v28 = *(_DWORD **)(v27 + 8);
  if (v28)
    *v28 += 2;
  *(_QWORD *)&v99 = v28;
  v29 = *(_DWORD **)(v27 + 16);
  if (v29)
    *v29 += 2;
  *((_QWORD *)&v99 + 1) = v29;
  v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 192) + 8))(a2 + 192);
  v101 = *(_OWORD *)(a2 + 3464);
  *(_QWORD *)&v102[0] = *(_QWORD *)(a2 + 3480);
  v31 = *(_QWORD *)(a2 + 528);
  v32 = 0uLL;
  v33 = 0uLL;
  if (v31)
  {
    v34 = *(_QWORD *)(v31 + 8);
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 24);
      if (v35)
      {
        v36 = *(int8x16_t **)(v35 + 8);
        if (v36)
        {
          v37 = v36[2];
          v38.i64[0] = -256;
          v38.i64[1] = -256;
          v33 = vandq_s8(v37, v38);
          v39.i64[0] = 255;
          v39.i64[1] = 255;
          v32 = vandq_s8(v37, v39);
        }
      }
    }
  }
  v40 = vorrq_s8(v32, v33);
  v41 = *(_OWORD *)(a2 + 416);
  v42 = *(_OWORD *)(a2 + 432);
  *(int8x16_t *)((char *)v102 + 8) = v40;
  *(_OWORD *)((char *)&v102[1] + 8) = v41;
  *(_OWORD *)((char *)&v102[2] + 8) = v42;
  DWORD2(v102[3]) = *(_DWORD *)(a2 + 268);
  v43 = *(_QWORD *)v90;
  *(_QWORD *)v90 = 0;
  *(_QWORD *)a1 = v43;
  v40.i32[0] = *(_DWORD *)&v90[8];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v90[8];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v90[24];
  *(_DWORD *)&v90[8] = v40.i32[0] & 0xFFFFFFFE;
  v44 = *(_OWORD *)v91;
  *(_OWORD *)v91 = 0uLL;
  *(_OWORD *)(a1 + 40) = v44;
  *(_QWORD *)(a1 + 56) = v92;
  *(_QWORD *)&v44 = v93;
  v92 = 0;
  v93 = 0;
  *(_QWORD *)(a1 + 64) = v44;
  LODWORD(v43) = v94;
  *(_BYTE *)(a1 + 76) = v95;
  *(_DWORD *)(a1 + 72) = v43;
  *(_WORD *)(a1 + 80) = v96;
  v45 = v97;
  v97 = 0uLL;
  *(_OWORD *)(a1 + 88) = v45;
  *(_WORD *)(a1 + 104) = v98;
  v46 = v99;
  v99 = 0uLL;
  *(_OWORD *)(a1 + 112) = v46;
  *(_BYTE *)(a1 + 128) = v100;
  v47 = v102[0];
  *(_OWORD *)(a1 + 136) = v101;
  v48 = v102[1];
  v49 = v102[2];
  *(_OWORD *)(a1 + 196) = *(_OWORD *)((char *)&v102[2] + 12);
  *(_OWORD *)(a1 + 184) = v49;
  *(_OWORD *)(a1 + 168) = v48;
  *(_OWORD *)(a1 + 152) = v47;
  *(_BYTE *)(a1 + 224) = 1;
  WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)&v92, v30);
  v51 = v91[1];
  v91[1] = 0;
  if (v51)
  {
    do
    {
      v52 = __ldaxr((unsigned int *)v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)v51));
    if (!v53)
    {
      atomic_store(1u, (unsigned int *)v51);
      v79 = (WTF::StringImpl *)*((_QWORD *)v51 + 6);
      *((_QWORD *)v51 + 6) = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v50);
        else
          *(_DWORD *)v79 -= 2;
      }
      v80 = (WTF::StringImpl *)*((_QWORD *)v51 + 5);
      *((_QWORD *)v51 + 5) = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v50);
        else
          *(_DWORD *)v80 -= 2;
      }
      v81 = *((unsigned int *)v51 + 8);
      if ((_DWORD)v81 != -1)
        ((void (*)(char *, char *))off_1E33F6940[v81])(&v89, (char *)v51 + 8);
      *((_DWORD *)v51 + 8) = -1;
      WTF::fastFree(v51, v50);
    }
  }
  v54 = v91[0];
  v91[0] = 0;
  if (v54)
  {
    do
    {
      v55 = __ldaxr((unsigned int *)v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, (unsigned int *)v54));
    if (!v56)
    {
      atomic_store(1u, (unsigned int *)v54);
      v82 = (WTF::StringImpl *)*((_QWORD *)v54 + 6);
      *((_QWORD *)v54 + 6) = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v50);
        else
          *(_DWORD *)v82 -= 2;
      }
      v83 = (WTF::StringImpl *)*((_QWORD *)v54 + 5);
      *((_QWORD *)v54 + 5) = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v50);
        else
          *(_DWORD *)v83 -= 2;
      }
      v84 = *((unsigned int *)v54 + 8);
      if ((_DWORD)v84 != -1)
        ((void (*)(char *, char *))off_1E33F6940[v84])(&v89, (char *)v54 + 8);
      *((_DWORD *)v54 + 8) = -1;
      WTF::fastFree(v54, v50);
    }
  }
  v57 = *(WTF::StringImpl **)v90;
  *(_QWORD *)v90 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v50);
    else
      *(_DWORD *)v57 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(a1 + 240), (const WebCore::ResourceRequestBase::RequestData *)a3);
  v62 = *(_DWORD **)(a3 + 152);
  if (v62)
    *v62 += 2;
  *(_QWORD *)(a1 + 392) = v62;
  v63 = *(_DWORD **)(a3 + 160);
  if (v63)
    *v63 += 2;
  *(_QWORD *)(a1 + 400) = v63;
  v64 = *(_DWORD **)(a3 + 168);
  if (v64)
    ++*v64;
  *(_QWORD *)(a1 + 408) = v64;
  v65 = *(_QWORD *)(a3 + 176);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a3 + 184);
  *(_QWORD *)(a1 + 416) = v65;
  v66 = *(_QWORD *)(a3 + 192);
  *(_QWORD *)(a1 + 432) = v66;
  if (v66)
    v66 = (uint64_t)CFRetain((CFTypeRef)v66);
  if (a8)
  {
    v85 = a8;
    while (1)
    {
      v66 = (*(uint64_t (**)(const WebCore::MouseEvent *))(*(_QWORD *)v85 + 80))(v85);
      if ((v66 & 1) != 0)
        break;
      v66 = (*(uint64_t (**)(const WebCore::MouseEvent *))(*(_QWORD *)v85 + 88))(v85);
      if ((v66 & 1) != 0)
        break;
      v67 = 0;
      v68 = 0;
      v85 = (const WebCore::MouseEvent *)*((_QWORD *)v85 + 8);
      if (!v85)
        goto LABEL_39;
    }
    v67 = (*((_DWORD *)v85 + 5) >> 9) & 1;
    v86 = *((unsigned __int8 *)v85 + 84);
    v58 = (v86 >> 3) & 1;
    v60 = (v86 >> 1) & 1;
    v59 = v86 & 1;
    v61 = (v86 >> 2) & 1;
    v68 = 1;
  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
LABEL_39:
  *(_DWORD *)v16 = (v60 << 16) | (v59 << 24) | (v58 << 8) | v67;
  *(_WORD *)(v16 + 4) = (((unint64_t)v61 << 32) | (v68 << 40)) >> 32;
  if (a8)
  {
    v77 = a8;
    while (1)
    {
      v66 = (*(uint64_t (**)(const WebCore::MouseEvent *))(*(_QWORD *)v77 + 88))(v77);
      if ((v66 & 1) != 0)
        break;
      v77 = (const WebCore::MouseEvent *)*((_QWORD *)v77 + 8);
      if (!v77)
        goto LABEL_40;
    }
    v66 = (uint64_t)WebCore::NavigationAction::MouseEventData::MouseEventData((WebCore::NavigationAction::MouseEventData *)v90, v77);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)v90;
    *(_OWORD *)(a1 + 460) = *(_OWORD *)&v90[12];
    *(_BYTE *)(a1 + 476) = 1;
  }
  else
  {
LABEL_40:
    *(_BYTE *)(a1 + 448) = 0;
    *(_BYTE *)(a1 + 476) = 0;
  }
  if (WTF::isMainThread((WTF *)v66))
  {
    v70 = a9;
    v69 = a4;
    v71 = a10;
    {
      v72 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v72 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v72 = 0;
    v70 = a9;
    v69 = a4;
    v71 = a10;
  }
  *(_QWORD *)(a1 + 480) = v72;
  v73 = *v71;
  if (*v71)
    *v73 += 2;
  *(_QWORD *)(a1 + 488) = v73;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  if (!a8 && (a7 & 1) == 0)
  {
    if (a6 <= 9 && ((1 << a6) & 0x310) != 0)
    {
      a7 = 3;
    }
    else if (a6 - 1 >= 3)
    {
      a7 = 5;
    }
    else
    {
      a7 = 2;
    }
  }
  *(_BYTE *)(a1 + 868) = a7;
  *(_WORD *)(a1 + 869) = 0;
  *(_BYTE *)(a1 + 871) = v70;
  *(_BYTE *)(a1 + 872) = v69;
  if ((*(_BYTE *)(a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    *(_BYTE *)(a3 + 184) |= 1u;
  }
  if ((WTF::URL::protocolIs() & 1) != 0 || (WTF::URL::protocolIs() & 1) != 0)
  {
    LOBYTE(v74) = 1;
  }
  else
  {
    v74 = WTF::URL::protocolIs();
    if (v74)
    {
      WebCore::SecurityContext::securityOrigin(v18, v75);
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      LOBYTE(v74) = WebCore::SecurityOrigin::canRequest(v78, (WebCore::ThreadableBlobRegistry *)a3, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
    }
  }
  *(_BYTE *)(a1 + 873) = v74;
  *(_WORD *)(a1 + 874) = 0;
  *(_BYTE *)(a1 + 876) = a5;
  *(_DWORD *)(v16 + 437) = 0x1000000;
  return a1;
}

void WebCore::FrameLoader::closeURL(WebCore::FrameLoader *this)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Editor *v12;
  void *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  void *v16;

  v2 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184);
  ++*v2;
  WebCore::HistoryController::saveDocumentState((uint64_t)v2);
  if (!*v2)
  {
    __break(0xC471u);
    JUMPOUT(0x194410C54);
  }
  --*v2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = *(_QWORD *)(v3 + 296);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v3 + 24);
  if (v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16) + 1352))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16)) & 1) != 0)
  {
    WebCore::FrameLoader::stopLoading(this, 0);
    if (!v4)
      return;
  }
  else
  {
    if (!v4)
    {
      WebCore::FrameLoader::stopLoading(this, 1);
      return;
    }
    if (*(_BYTE *)(v4 + 3362))
      v7 = 1;
    else
      v7 = 2;
    WebCore::FrameLoader::stopLoading(this, v7);
  }
  v8 = *(_QWORD *)(v4 + 3056);
  if (!v8)
  {
    v12 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v12, (WebCore::Document *)v4);
    v14 = *(WebCore::Editor **)(v4 + 3056);
    *(_QWORD *)(v4 + 3056) = v12;
    if (v14)
    {
      WebCore::Editor::~Editor(v14, v13);
      if (*(_DWORD *)v15)
      {
        *(_QWORD *)(v15 + 496) = 0;
        *(_OWORD *)(v15 + 464) = 0u;
        *(_OWORD *)(v15 + 480) = 0u;
        *(_OWORD *)(v15 + 432) = 0u;
        *(_OWORD *)(v15 + 448) = 0u;
        *(_OWORD *)(v15 + 400) = 0u;
        *(_OWORD *)(v15 + 416) = 0u;
        *(_OWORD *)(v15 + 368) = 0u;
        *(_OWORD *)(v15 + 384) = 0u;
        *(_OWORD *)(v15 + 336) = 0u;
        *(_OWORD *)(v15 + 352) = 0u;
        *(_OWORD *)(v15 + 304) = 0u;
        *(_OWORD *)(v15 + 320) = 0u;
        *(_OWORD *)(v15 + 272) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_OWORD *)(v15 + 240) = 0u;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_OWORD *)(v15 + 224) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)(v15 + 160) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 80) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)v15 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v15, v16);
      }
    }
    v8 = *(_QWORD *)(v4 + 3056);
  }
  v9 = *(_DWORD *)v8 + 1;
  *(_DWORD *)v8 = v9;
  v10 = *(_QWORD *)(v8 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 376))(v11);
      v9 = *(_DWORD *)v8;
    }
  }
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x194410C74);
  }
  *(_DWORD *)v8 = v9 - 1;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

uint64_t WebCore::HistoryController::saveDocumentState(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  WebCore::SecurityOrigin *v20;
  WebCore::SecurityOrigin *v21;
  WTF::StringImpl *v22;
  const WebCore::SecurityOrigin *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (v1 && !*(_BYTE *)(v1 + 144))
  {
    v2 = (unsigned int *)(v1 + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    v4 = *(_DWORD **)(v1 + 280);
    v5 = (*v4)++;
    if (v5 == -1)
    {
      this = 286;
      __break(0xC471u);
    }
    else
    {
      v6 = v4[16];
      *v4 = v5;
      if (v6)
      {
        v7 = 16;
        if (!*(_BYTE *)(this + 40))
          v7 = 24;
        v8 = *(_QWORD *)(this + v7);
        if (v8)
        {
          ++*(_DWORD *)v8;
          v9 = *(_QWORD *)(v1 + 296);
          *(_DWORD *)(v9 + 24) += 2;
          this = WebCore::HistoryItem::isCurrentDocument((WebCore::HistoryItem *)v8, (WebCore::Document *)v9);
          if ((_DWORD)this && *(_QWORD *)(v9 + 1944) && !*(_BYTE *)(v9 + 3405))
          {
            v11 = *(_QWORD *)(v9 + 528);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 8);
              if (v12)
              {
                v13 = *(_QWORD *)(*(_QWORD *)(v12 + 280) + 88);
                if (v13)
                {
                  if (*(_QWORD *)(v12 + 296) == v9)
                  {
                    ++*(_DWORD *)(v13 + 24);
                    v14 = *(_QWORD **)(v13 + 16);
                    if (v14)
                    {
                      v14 = (_QWORD *)v14[1];
                      if (v14)
                      {
                        if (*(_QWORD **)(v14[16] + 8) == v14
                          || *(_QWORD *)(v14[35] + 88) == v13
                          && (v19 = v14[37]) != 0
                          && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v19 + 192), v10),
                              v21 = v20,
                              WebCore::Document::topOrigin((WebCore::Document *)v19, v22),
                              WebCore::SecurityOrigin::isSameOriginAs(v21, v23)))
                        {
                          LOBYTE(v14) = *(_BYTE *)(v13 + 3530);
                        }
                        else
                        {
                          LOBYTE(v14) = 0;
                        }
                      }
                    }
                    *(_BYTE *)(v8 + 120) = (_BYTE)v14;
                    if (*(_DWORD *)(v13 + 24) == 1)
                      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
                    else
                      --*(_DWORD *)(v13 + 24);
                  }
                }
              }
            }
            if (*(_QWORD *)(v9 + 1352))
            {
              WebCore::FormController::formElementsState((const WebCore::Document *)v9, (uint64_t)&v29);
            }
            else
            {
              v29 = 0;
              v30 = 0;
            }
            WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v8 + 104), (unsigned int *)&v29);
            if (HIDWORD(v30))
            {
              v26 = v29;
              v27 = 8 * HIDWORD(v30);
              do
              {
                v28 = *(WTF::StringImpl **)v26;
                *(_QWORD *)v26 = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2)
                    WTF::StringImpl::destroy(v28, v15);
                  else
                    *(_DWORD *)v28 -= 2;
                }
                v26 = (WTF *)((char *)v26 + 8);
                v27 -= 8;
              }
              while (v27);
            }
            this = (uint64_t)v29;
            if (v29)
            {
              v29 = 0;
              LODWORD(v30) = 0;
              this = WTF::fastFree((WTF *)this, v15);
            }
          }
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
          if (*(_DWORD *)v8 == 1)
          {
            WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)v8);
            this = WTF::fastFree(v24, v25);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
      }
      do
      {
        v16 = __ldaxr(v2);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v2));
      if (!v17)
      {
        atomic_store(1u, v2);
        v18 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v18 = off_1E31FE290;
        *((_QWORD *)v18 + 1) = v2;
        v29 = v18;
        WTF::ensureOnMainThread();
        this = (uint64_t)v29;
        v29 = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

void *WebCore::FrameLoader::stopLoading(WebCore::FrameLoader *this, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::Page *v17;
  int v18;
  uint64_t v19;
  WebCore::Page *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::MonotonicTime *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::LocalDOMWindow *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  WebCore::Page *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  WebCore::Page *v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  void *result;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  WebCore::SecurityContext *v63;
  WTF *v64;
  void *v65;
  WTF *v66;
  void *v67;
  WTF *v68;
  void *v69;
  _DWORD *v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  WTF *v77;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (v7)
  {
    v70 = *(_DWORD **)(v7 + 728);
    if (v70)
    {
      ++v70[2];
      (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 104))(v70);
      if (v70[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 8))(v70);
      else
        --v70[2];
    }
  }
  if (a2)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (*(_QWORD *)(v8 + 296))
    {
      if (!*((_DWORD *)this + 53))
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
        {
          v11 = *(_QWORD *)(v10 + 16);
          if (v11)
            goto LABEL_145;
          v11 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v11 = 1;
          *(_QWORD *)(v11 + 8) = v10;
          v13 = *(unsigned int **)(v10 + 16);
          *(_QWORD *)(v10 + 16) = v11;
          if (!v13)
            goto LABEL_145;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, v12);
          }
          v11 = *(_QWORD *)(v10 + 16);
          if (v11)
          {
LABEL_145:
            do
              v16 = __ldaxr((unsigned int *)v11);
            while (__stlxr(v16 + 1, (unsigned int *)v11));
            v17 = *(WebCore::Page **)(v11 + 8);
            if (v17)
            {
              v18 = (*(_DWORD *)v17)++;
              ++*((_DWORD *)v17 + 217);
              if (v18)
              {
                *(_DWORD *)v17 = v18;
              }
              else
              {
                WebCore::Page::~Page(v17);
                WTF::fastFree(v68, v69);
              }
            }
          }
        }
        else
        {
          v11 = 0;
        }
        v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
        if (v19)
          v20 = *(WebCore::Page **)(v19 + 8);
        else
          v20 = 0;
        WebCore::ForbidSynchronousLoadsScope::ForbidSynchronousLoadsScope((WebCore::ForbidSynchronousLoadsScope *)&v77, v20);
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
        if (v22)
        {
          v74 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v22);
          v23 = v74;
          if (v74)
          {
            do
              v75 = __ldaxr((unsigned int *)v74);
            while (__stlxr(v75 + 1, (unsigned int *)v74));
            v76 = *(_QWORD *)(v74 + 8);
            if (v76)
              ++*(_DWORD *)(v76 + 3340);
          }
        }
        else
        {
          v23 = 0;
        }
        if (*((_BYTE *)this + 209) && !*((_BYTE *)this + 210))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296) + 1248);
          if (v24
            && (*(_WORD *)(v24 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            *(_DWORD *)(v24 + 24) += 2;
            WebCore::HTMLInputElement::endEditing((WebCore::HTMLInputElement *)v24);
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
          }
          if (!*((_DWORD *)this + 53))
          {
            v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
            *(_DWORD *)(v25 + 24) += 2;
            if (a2 == 2)
            {
              *((_DWORD *)this + 53) = 2;
              WebCore::Document::dispatchPagehideEvent((WebCore::EventTarget *)v25, *(_BYTE *)(v25 + 3362) == 1);
            }
            v26 = (WebCore *)WebCore::Document::setVisibilityHiddenDueToDismissal((_BYTE *)v25, 1);
            if (!*(_BYTE *)(v25 + 3362))
            {
              v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v27 || (v28 = *(_QWORD *)(v27 + 96)) == 0)
                v28 = WebCore::threadGlobalDataSlow(v26);
              v29 = *(_QWORD *)(v28 + 40);
              if (!v29)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v28);
                v29 = *(_QWORD *)(v28 + 40);
              }
              v30 = bmalloc::api::isoAllocate();
              v31 = (WTF::MonotonicTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v30);
              *(_DWORD *)(v30 + 16) = 1;
              *(_QWORD *)v30 = off_1E33A4B48;
              *(_QWORD *)(v30 + 8) = 0;
              *(_DWORD *)(v30 + 20) = *(_DWORD *)(v30 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v29 + 2168) != 0);
              v33 = *(_DWORD **)(v29 + 2168);
              if (v33)
                *v33 += 2;
              *(_QWORD *)(v30 + 24) = v33;
              *(_QWORD *)(v30 + 32) = 0;
              *(_QWORD *)(v30 + 40) = 0;
              *(_QWORD *)(v30 + 48) = 0;
              *(_QWORD *)(v30 + 56) = v32;
              *(_QWORD *)(v30 + 64) = 0;
              v34 = *((_QWORD *)this + 12);
              if (v34)
              {
                ++*(_DWORD *)(v34 + 24);
                v35 = v34 + 2728;
                *((_DWORD *)this + 53) = 3;
                if (*(double *)(v34 + 2744) == 0.0)
                {
                  WTF::MonotonicTime::now(v31);
                  *(_QWORD *)(v34 + 2744) = v36;
                }
              }
              else
              {
                v35 = 0;
                *((_DWORD *)this + 53) = 3;
              }
              v37 = *(WebCore::LocalDOMWindow **)(v25 + 696);
              if (v37)
              {
                ++*((_DWORD *)v37 + 6);
                v38 = WebCore::LocalDOMWindow::dispatchEvent(v37, (WebCore::Event *)v30, (WebCore::EventTarget *)v25);
                if (*((_DWORD *)v37 + 6) == 1)
                  v38 = (WTF *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v37 + 72))(v37);
                else
                  --*((_DWORD *)v37 + 6);
              }
              else
              {
                v38 = WebCore::LocalDOMWindow::dispatchEvent(0, (WebCore::Event *)v30, (WebCore::EventTarget *)v25);
              }
              if (v34)
              {
                if (*(double *)(v35 + 24) == 0.0)
                {
                  WTF::MonotonicTime::now(v38);
                  *(_QWORD *)(v35 + 24) = v39;
                }
                if (*(_DWORD *)(v34 + 24) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
                else
                  --*(_DWORD *)(v34 + 24);
              }
              if (*(_DWORD *)(v30 + 16) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              else
                --*(_DWORD *)(v30 + 16);
            }
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
          *((_DWORD *)this + 53) = 0;
          *((_BYTE *)this + 210) = 1;
        }
        v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
        if (v40 && !*(_BYTE *)(v40 + 3362))
        {
          if ((*((_DWORD *)this + 16) - 1) > 1 || (v62 = *((_QWORD *)this + 12)) == 0)
          {
LABEL_61:
            *(_DWORD *)(v40 + 24) += 2;
            WebCore::Document::removeAllEventListeners((WebCore::Document *)v40, v21);
            if (*(_DWORD *)(v40 + 24) == 2)
            {
              if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v40);
            }
            else
            {
              *(_DWORD *)(v40 + 24) -= 2;
            }
            goto LABEL_63;
          }
          v63 = (WebCore::SecurityContext *)(v40 + 192);
          if ((*(_BYTE *)(v62 + 1056) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v62 + 872));
            *(_BYTE *)(v62 + 1056) |= 1u;
          }
          if ((WebCore::SecurityContext::isSecureTransitionTo(v63, (const WTF::URL *)(v62 + 872)) & 1) == 0)
          {
            v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
            if (!v40)
            {
              WebCore::Document::removeAllEventListeners(0, v21);
              goto LABEL_63;
            }
            goto LABEL_61;
          }
        }
LABEL_63:
        if (v23)
        {
          v41 = *(_QWORD *)(v23 + 8);
          if (v41)
            --*(_DWORD *)(v41 + 3340);
          do
          {
            v42 = __ldaxr((unsigned int *)v23);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, (unsigned int *)v23));
          if (!v43)
          {
            atomic_store(1u, (unsigned int *)v23);
            v72 = *(unsigned int *)(v23 + 28);
            if ((_DWORD)v72)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v72));
            v73 = *(WTF **)(v23 + 16);
            if (v73)
            {
              *(_QWORD *)(v23 + 16) = 0;
              *(_DWORD *)(v23 + 24) = 0;
              WTF::fastFree(v73, v21);
            }
            WTF::fastFree((WTF *)v23, v21);
          }
        }
        v44 = (unsigned int *)v77;
        if (!v77)
          goto LABEL_76;
        v45 = (WebCore::Page *)*((_QWORD *)v77 + 1);
        if (v45)
        {
          v46 = (*(_DWORD *)v45)++;
          --*((_DWORD *)v45 + 218);
          if (!v46)
          {
            WebCore::Page::~Page(v45);
            WTF::fastFree(v64, v65);
            v44 = (unsigned int *)v77;
            v77 = 0;
            if (!v44)
            {
LABEL_76:
              if (v11)
              {
                v49 = *(WebCore::Page **)(v11 + 8);
                if (v49)
                {
                  v50 = (*(_DWORD *)v49)++;
                  --*((_DWORD *)v49 + 217);
                  if (v50)
                  {
                    *(_DWORD *)v49 = v50;
                  }
                  else
                  {
                    WebCore::Page::~Page(v49);
                    WTF::fastFree(v66, v67);
                  }
                }
                do
                {
                  v51 = __ldaxr((unsigned int *)v11);
                  v52 = v51 - 1;
                }
                while (__stlxr(v52, (unsigned int *)v11));
                if (!v52)
                {
                  atomic_store(1u, (unsigned int *)v11);
                  WTF::fastFree((WTF *)v11, v21);
                }
              }
              goto LABEL_83;
            }
            do
            {
LABEL_73:
              v47 = __ldaxr(v44);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v44));
            if (!v48)
            {
              atomic_store(1u, v44);
              WTF::fastFree((WTF *)v44, v21);
            }
            goto LABEL_76;
          }
          *(_DWORD *)v45 = v46;
        }
        v77 = 0;
        goto LABEL_73;
      }
    }
  }
LABEL_83:
  *((_BYTE *)this + 216) = 1;
  *((_BYTE *)this + 209) = 1;
  v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (v53)
  {
    v54 = *(_DWORD *)(v53 + 24);
    *(_DWORD *)(v53 + 24) = v54 + 2;
    if (*(_BYTE *)(v53 + 3389))
    {
      WebCore::FrameLoader::finishedParsing(this);
      WebCore::Document::setParsing((WebCore::Document *)v53, 0);
      v54 = *(_DWORD *)(v53 + 24) - 2;
    }
    if (v54)
    {
      *(_DWORD *)(v53 + 24) = v54;
    }
    else if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v53);
    }
  }
  v55 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (v55)
  {
    v56 = *(_DWORD *)(v55 + 24);
    *(_DWORD *)(v55 + 24) = v56 + 2;
    {
      WebCore::DatabaseManager::singleton(void)::instance = 0;
      *(_QWORD *)&byte_1ECE88AF0 = 1;
      qword_1ECE88AF8 = 0;
    }
    v57 = *(_QWORD *)(v55 + 360);
    if (v57)
    {
      WebCore::DatabaseContext::stopDatabases(v57, 0);
      v56 = *(_DWORD *)(v55 + 24) - 2;
    }
    if (v56)
    {
      *(_DWORD *)(v55 + 24) = v56;
    }
    else if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v55);
    }
  }
  WebCore::PolicyChecker::stopCheck(*((WebCore::PolicyChecker **)this + 3));
  v58 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 152);
  ++*(_DWORD *)v58;
  result = WebCore::NavigationScheduler::cancel(v58, 0);
  if (!*(_DWORD *)v58)
  {
    __break(0xC471u);
    JUMPOUT(0x1944116B0);
  }
  --*(_DWORD *)v58;
  if (v4)
  {
    do
    {
      v60 = __ldaxr(v5);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v5));
    if (!v61)
    {
      atomic_store(1u, v5);
      v71 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v71 = off_1E33F5E98;
      *((_QWORD *)v71 + 1) = v5;
      v77 = v71;
      WTF::ensureOnMainThread();
      result = v77;
      v77 = 0;
      if (result)
        return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::SecurityContext::isSecureTransitionTo(WebCore::SecurityContext *this, const WTF::URL *a2)
{
  uint64_t v4;
  WebCore::SecurityOrigin *v5;
  WebCore::SecurityOrigin *v6;
  WTF::StringImpl *v7;
  uint64_t isSameOriginDomain;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  char v18;
  WebCore::SecurityOrigin *v19;

  if (!*((_BYTE *)this + 82))
    return 1;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    WebCore::SecurityOrigin::createOpaque((uint64_t *)&v19);
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v19;
    v13 = (uint64_t *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v13 + 1, v12);
        WTF::fastFree((WTF *)v13, v17);
        v4 = *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  v5 = *(WebCore::SecurityOrigin **)(v4 + 8);
  WebCore::SecurityOrigin::create(a2, (uint64_t *)&v19);
  v6 = v19;
  isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v5, v19);
  v19 = 0;
  do
  {
    v9 = __ldaxr((unsigned int *)v6);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v6));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)v6);
    v14 = (WTF::StringImpl *)*((_QWORD *)v6 + 6);
    *((_QWORD *)v6 + 6) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = (WTF::StringImpl *)*((_QWORD *)v6 + 5);
    *((_QWORD *)v6 + 5) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v7);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *((unsigned int *)v6 + 8);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v16])(&v18, (char *)v6 + 8);
    *((_DWORD *)v6 + 8) = -1;
    WTF::fastFree(v6, v7);
  }
  return isSameOriginDomain;
}

_BYTE *WebCore::Document::setVisibilityHiddenDueToDismissal(_BYTE *this, int a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;

  if (this[3437] != a2)
  {
    v2 = this;
    this[3437] = a2;
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
      v4 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = *(_QWORD *)(v4 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
      v5 = *(_QWORD *)(v4 + 40);
    }
    v6 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    *(_QWORD *)v6 = off_1E33A4B48;
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8202;
    v9 = *(_QWORD *)(v5 + 2248) != 0;
    *(_DWORD *)(v6 + 16) = 1;
    *(_DWORD *)(v6 + 20) = v8 | v9;
    v10 = *(_DWORD **)(v5 + 2248);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v6 + 24) = v10;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = 0;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v2 + 48))(v2, v6);
    if (*(_DWORD *)(v6 + 16) == 1)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 16);
  }
  return this;
}

WebCore::EventTarget *WebCore::Document::dispatchPagehideEvent(WebCore::EventTarget *result, char a2)
{
  WebCore::EventTarget *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  WebCore::LocalDOMWindow *v11;

  if (*((_BYTE *)result + 3356) != 2)
  {
    v3 = result;
    *((_BYTE *)result + 3356) = 2;
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow(result);
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    v7 = bmalloc::api::isoAllocate();
    result = (WebCore::EventTarget *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
    *(_QWORD *)(v7 + 8) = 0;
    v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x288206 | (*(_QWORD *)(v6 + 1400) != 0);
    *(_DWORD *)(v7 + 16) = 1;
    *(_DWORD *)(v7 + 20) = v9;
    v10 = *(_DWORD **)(v6 + 1400);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v7 + 24) = v10;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = v8;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)v7 = off_1E33A65D0;
    *(_BYTE *)(v7 + 72) = a2;
    v11 = (WebCore::LocalDOMWindow *)*((_QWORD *)v3 + 87);
    if (v11)
    {
      ++*((_DWORD *)v11 + 6);
      result = WebCore::LocalDOMWindow::dispatchEvent(v11, (WebCore::Event *)v7, v3);
      if (*((_DWORD *)v11 + 6) == 1)
        result = (WebCore::EventTarget *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v11 + 72))(v11);
      else
        --*((_DWORD *)v11 + 6);
    }
    if (*(_DWORD *)(v7 + 16) == 1)
      return (WebCore::EventTarget *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    else
      --*(_DWORD *)(v7 + 16);
  }
  return result;
}

WebCore::ForbidSynchronousLoadsScope *WebCore::ForbidSynchronousLoadsScope::ForbidSynchronousLoadsScope(WebCore::ForbidSynchronousLoadsScope *this, WebCore::Page *a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::Page *v10;
  int v11;
  WTF *v13;
  void *v14;

  if (!a2)
    goto LABEL_13;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    goto LABEL_17;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  if (!v6)
    goto LABEL_17;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
LABEL_17:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
    *(_QWORD *)this = v4;
    v10 = *(WebCore::Page **)(v4 + 8);
    if (v10)
    {
      v11 = (*(_DWORD *)v10)++;
      ++*((_DWORD *)v10 + 218);
      if (v11)
      {
        *(_DWORD *)v10 = v11;
      }
      else
      {
        WebCore::Page::~Page(v10);
        WTF::fastFree(v13, v14);
      }
    }
  }
  else
  {
LABEL_13:
    *(_QWORD *)this = 0;
  }
  return this;
}

void WebCore::PageTransitionEvent::~PageTransitionEvent(WebCore::PageTransitionEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unint64_t WebCore::RenderBox::availableLogicalHeight(WebCore::RenderObject *this, const WebCore::RenderBox *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Length *v6;
  WebCore::Length *v7;
  WebCore::Length *v8;
  uint64_t v9;
  char *v10;
  WebCore::RenderObject *v11;
  uint64_t *v12;
  WebCore::RenderObject *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  float v25;
  double v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  WebCore::RenderObject *v45;
  int Fragment;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  int i;
  uint64_t v55;
  BOOL v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  float v72;
  double v73;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  int v86;
  void *v87;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  double *v114;
  double *v115;
  int v116;
  int v117;
  BOOL v118;
  char *v119;
  int v120;
  char v121;
  double v122;
  double v123;
  int v125;
  unint64_t v126;
  int v127;
  int v128;
  double v129;
  unsigned int v131;
  unint64_t v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  WebCore::RenderObject *v147;
  uint64_t v148;
  char *v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  unsigned int v161;
  int v162;
  BOOL v163;
  unint64_t v164;
  char *v165;
  unsigned int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  WebCore::RenderObject *v188;
  unsigned int v189;
  uint64_t v190;
  void *v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned __int8 v203;
  char v204;
  char v205;

  v4 = *((_QWORD *)this + 11);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = (WebCore::Length *)(v5 + 4);
  v7 = (WebCore::Length *)(v5 + 12);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v8 = v7;
  else
    v8 = v6;
  if (*((_BYTE *)this + 46) != 37
    || ((v161 = *((unsigned __int8 *)v8 + 4), v27 = v161 > 0xB, v162 = (1 << v161) & 0x809, !v27)
      ? (v163 = v162 == 0)
      : (v163 = 1),
        v163))
  {
    v9 = *((_QWORD *)this + 4);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
      {
        if (v10[45] < 0 && (*((_BYTE *)this + 21) & 4) == 0)
        {
          v62 = WebCore::RenderFlexibleBox::usedChildOverridingLogicalHeightForPercentageResolution((WebCore::RenderFlexibleBox *)v10, this);
          if ((v62 & 0xFF00000000) != 0)
          {
            v29 = WebCore::RenderBox::overridingContentLogicalHeight((uint64_t)this, v62);
            goto LABEL_41;
          }
          v4 = *((_QWORD *)this + 11);
        }
      }
    }
    if (((*(_DWORD *)(*(_QWORD *)(v4 + 32) + 148) >> 5) & 3u) - 1 > 1
      || *((unsigned __int8 *)this + 46) - 36 < 5
      || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(this, a2))
    {
      goto LABEL_9;
    }
    v83 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v84 = (unsigned int *)(v83 + 4);
    v85 = (unsigned int *)(v83 + 12);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v84 = v85;
    v205 = 0;
    v203 = *((_BYTE *)v84 + 4);
    v86 = v203;
    v204 = *((_BYTE *)v84 + 5);
    if (v203 - 2 >= 9)
    {
      if (!v203)
        goto LABEL_171;
      v87 = 0;
      if (v203 == 11)
      {
        v87 = (void *)*v84;
        v202 = *v84;
        WebCore::Length::ref(&v202);
        goto LABEL_147;
      }
    }
    else
    {
      v87 = (void *)*v84;
    }
    if (v203 - 7 < 4)
      goto LABEL_171;
LABEL_147:
    if ((v86 & 0xFFFFFFF7) != 3 || (*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
    {
      if (v86 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v87);
      }
    }
    else
    {
      LODWORD(v198) = 100;
      WORD2(v198) = 3;
      BYTE6(v198) = 0;
      v126 = (unint64_t)WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)&v198, 1) >> 32;
      if (v86 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v87);
      }
      if (!v126)
      {
LABEL_171:
        v97 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1048))(this);
        v98 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 960))(this);
        v99 = v97 + v98;
        if (__OFADD__(v97, v98))
          v99 = (v97 >> 31) + 0x7FFFFFFF;
        v100 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1056))(this);
        v101 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 968))(this);
        v102 = v100 + v101;
        if (__OFADD__(v100, v101))
          v102 = (v100 >> 31) + 0x7FFFFFFF;
        v103 = v99 + v102;
        if (__OFADD__(v99, v102))
          v103 = (v99 >> 31) + 0x7FFFFFFF;
        v104 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1064))(this);
        v105 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1072))(this);
        v106 = v104 + v105;
        if (__OFADD__(v104, v105))
          v106 = (v104 >> 31) + 0x7FFFFFFF;
        v107 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 976))(this);
        v108 = v106 + v107;
        if (__OFADD__(v106, v107))
          v108 = (v106 >> 31) + 0x7FFFFFFF;
        v109 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 984))(this);
        v110 = v108 + v109;
        if (__OFADD__(v108, v109))
          v110 = (v108 >> 31) + 0x7FFFFFFF;
        v111 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
        v112 = *((_QWORD *)this + 11);
        v113 = *(_QWORD *)(v112 + 32);
        v114 = (double *)(v113 + 112);
        if (v111 >= 4)
          v115 = (double *)(v113 + 112);
        else
          v115 = (double *)(v113 + 104);
        if (v111 >= 4)
          v114 = (double *)(v113 + 104);
        v116 = *(_DWORD *)(v113 + 148) & 0x60;
        if (v116 == 64)
          LOBYTE(v117) = 0;
        else
          v117 = (*(unsigned __int8 *)(*(_QWORD *)(v112 + 8) + 68) >> 2) & 1;
        v118 = v111 >= 4;
        v119 = (char *)this + 164;
        if (v118)
          v119 = (char *)this + 160;
        v120 = *(_DWORD *)v119;
        v56 = v116 == 32;
        v121 = v117 ^ 1;
        if (!v56)
          v121 = 1;
        v122 = *v114 / *v115;
        if ((v121 & 1) == 0 && (*((_BYTE *)this + 52) & 7) != 3)
        {
          v123 = (double)v120 * 0.015625 / v122 * 64.0;
          if (v123 < 2147483650.0 && v123 > -2147483650.0)
            goto LABEL_201;
          if (v123 >= 2147483650.0)
          {
            v125 = 0x7FFFFFFF;
          }
          else
          {
            if (v123 > -2147483650.0)
            {
LABEL_201:
              v125 = (int)v123;
              goto LABEL_202;
            }
            v125 = 0x80000000;
          }
LABEL_202:
          if (v125 <= v103)
            v30 = v103;
          else
            v30 = v125;
          goto LABEL_221;
        }
        v22 = __OFSUB__(v120, v110);
        v127 = v120 - v110;
        v128 = (v120 >> 31) + 0x7FFFFFFF;
        if (v22)
          v127 = v128;
        v129 = (double)v127 * 0.015625 / v122 * 64.0;
        if (v129 < 2147483650.0 && v129 > -2147483650.0)
          goto LABEL_218;
        if (v129 >= 2147483650.0)
        {
          v131 = 0x7FFFFFFF;
        }
        else
        {
          if (v129 > -2147483650.0)
          {
LABEL_218:
            v131 = (int)v129;
            goto LABEL_219;
          }
          v131 = 0x80000000;
        }
LABEL_219:
        v30 = v131 + v103;
        if (__OFADD__(v131, v103))
          v30 = (v131 >> 31) + 0x7FFFFFFF;
LABEL_221:
        if (!(_DWORD)a2)
        {
          v132 = (v30 - v103);
          if (__OFSUB__((_DWORD)v30, v103))
LABEL_259:
            v30 = (v30 >> 31) + 0x7FFFFFFF;
          else
LABEL_223:
            v30 = v132;
        }
        goto LABEL_42;
      }
    }
LABEL_9:
    if ((*((_BYTE *)v8 + 4) & 0xF7) == 3
      && (*((_DWORD *)this + 5) & 0x1800000) == 0x1000000
      && ((*((_BYTE *)this + 52) & 7) != 1 || (*((_BYTE *)this + 53) & 2) == 0))
    {
      v11 = WebCore::RenderObject::containingBlock(this);
      if (((*((_BYTE *)v11 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
      {
        v12 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
        if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
        {
          ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalHeightMap + 8);
          v47 = *((_QWORD *)this + 1);
          if (v47 && *(_QWORD *)(v47 + 8))
          {
            v48 = *v12;
            if (*v12)
            {
              v49 = *(_DWORD *)(v48 - 8);
              v50 = (~(v47 << 32) + v47) ^ ((unint64_t)(~(v47 << 32) + v47) >> 22);
              v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
              v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
              v53 = v49 & ((v52 >> 31) ^ v52);
              for (i = 1; ; ++i)
              {
                v55 = *(_QWORD *)(v48 + 16 * v53);
                if (!v55)
                {
                  v58 = *(unsigned int *)(v48 - 4);
                  v59 = v48 + 16 * v58;
                  v60 = v59;
                  goto LABEL_83;
                }
                v56 = v55 != -1 && v55 == v47;
                if (v56)
                  break;
                v53 = (v53 + i) & v49;
              }
              v59 = v48 + 16 * v53;
              v58 = *(unsigned int *)(v48 - 4);
              v60 = v48 + 16 * v58;
LABEL_83:
              v199 = v59;
              v200 = v60;
              v61 = v48 + 16 * v58;
            }
            else
            {
              v59 = 0;
              v60 = 0;
              v61 = 0;
              v199 = 0;
              v200 = 0;
            }
            v201 = v61;
LABEL_85:
            while (v59 != v61 && !*(_QWORD *)(*(_QWORD *)v59 + 8))
            {
              v81 = v59 + 16;
              v199 = v81;
              v59 = v60;
              if (v81 != v60)
              {
                v59 = v81;
                while ((unint64_t)(*(_QWORD *)v59 + 1) <= 1)
                {
                  v59 += 16;
                  v199 = v59;
                  if (v59 == v60)
                  {
                    v59 = v60;
                    goto LABEL_85;
                  }
                }
              }
            }
          }
          else
          {
            WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v198, v12);
            v48 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
          }
          if (v48)
            v48 += 16 * *(unsigned int *)(v48 - 4);
          if (v199 != v48)
          {
            v24 = *(_QWORD *)(v199 + 8);
            if ((v24 & 0xFF00000000) != 0)
              goto LABEL_32;
          }
        }
        if ((*((_BYTE *)v11 + 45) & 4) != 0)
        {
          if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
            goto LABEL_17;
          v45 = this;
          if ((*((_BYTE *)this + 45) & 2) != 0)
            v45 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
          if ((*((_QWORD *)v45 + 12) & 0x380000) == 0x300000 && *((_BYTE *)v11 + 46) == 49)
          {
            Fragment = WebCore::RenderView::clientLogicalHeightForFixedPosition(v11);
          }
          else
          {
LABEL_17:
            v13 = v11;
            if ((*((_BYTE *)v11 + 45) & 0x40) == 0)
              v13 = WebCore::RenderObject::containingBlock(v11);
            v14 = *(_QWORD *)v13;
            if (((*((_DWORD *)v13 + 31) >> 13) & 6u) - 2 < 4)
            {
              v192 = *((_DWORD *)v13 + 40);
              v193 = (*(uint64_t (**)(WebCore::RenderObject *))(v14 + 1016))(v13);
              v194 = v192 - v193;
              if (__OFSUB__(v192, v193))
                v194 = (v192 >> 31) + 0x7FFFFFFF;
              v195 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v13 + 1024))(v13);
              v19 = v194 - v195;
              if (__OFSUB__(v194, v195))
                v19 = (v194 >> 31) + 0x7FFFFFFF;
              v20 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v13 + 1352))(v13);
            }
            else
            {
              v15 = *((_DWORD *)v13 + 41);
              v16 = (*(uint64_t (**)(WebCore::RenderObject *))(v14 + 1000))(v13);
              v17 = v15 - v16;
              if (__OFSUB__(v15, v16))
                v17 = (v15 >> 31) + 0x7FFFFFFF;
              v18 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v13 + 1008))(v13);
              v19 = v17 - v18;
              if (__OFSUB__(v17, v18))
                v19 = (v17 >> 31) + 0x7FFFFFFF;
              v20 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v13 + 1360))(v13);
            }
            v21 = v20 << 6;
            if (v20 < -33554432)
              v21 = 0x80000000;
            if (v20 > 0x1FFFFFF)
              v21 = 0x7FFFFFFF;
            v22 = __OFSUB__(v19, v21);
            v23 = v19 - v21;
            if (v22)
              v23 = (v19 >> 31) + 0x7FFFFFFF;
            LODWORD(v24) = v23 & ~(v23 >> 31);
            if ((*((_BYTE *)this + 23) & 0x10) == 0)
              goto LABEL_32;
            v190 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 648))(this);
            if (!v190
              || ((*(_BYTE *)(v190 + 21) & 0x10) == 0) != ((*((_BYTE *)v11 + 21) & 0x10) == 0)
              || (*((_BYTE *)v11 + 52) & 7) != 1
              || (*((_BYTE *)v11 + 53) & 2) == 0)
            {
              goto LABEL_32;
            }
            Fragment = WebCore::RenderFragmentedFlow::contentLogicalHeightOfFirstFragment(v11, v191);
          }
        }
        else
        {
          if ((*((_BYTE *)v11 + 45) & 0x20) == 0)
          {
            LODWORD(v24) = 0;
            goto LABEL_32;
          }
          Fragment = WebCore::RenderInline::innerPaddingBoxHeight(v11, (WebCore::RenderObject *)v12);
        }
      }
      else
      {
        Fragment = WebCore::RenderBox::containingBlockLogicalWidthForPositioned(this, v11, 0, 0);
      }
      LODWORD(v24) = Fragment;
LABEL_32:
      if (*((_BYTE *)v8 + 4) != 4)
      {
        v28 = 0;
        switch(*((_BYTE *)v8 + 4))
        {
          case 0:
          case 1:
          case 9:
            v28 = v24;
            break;
          case 3:
            v57 = *(float *)v8;
            if (!*((_BYTE *)v8 + 6))
              v57 = (float)*(int *)v8;
            v25 = (float)((float)((float)(int)v24 * 0.015625) * v57) / 100.0;
            goto LABEL_35;
          case 0xB:
            WebCore::Length::nonNanCalculatedValue(v8, (float)(int)v24 * 0.015625);
            goto LABEL_35;
          default:
            goto LABEL_40;
        }
        goto LABEL_40;
      }
      v25 = *(float *)v8;
      if (!*((_BYTE *)v8 + 6))
        v25 = (float)*(int *)v8;
LABEL_35:
      v26 = v25 * 64.0;
      v27 = v26 >= 2147483650.0 || v26 <= -2147483650.0;
      if (!v27)
        goto LABEL_39;
      if (v26 >= 2147483650.0)
      {
        v28 = 0x7FFFFFFF;
        goto LABEL_40;
      }
      if (v26 <= -2147483650.0)
        v28 = 0x80000000;
      else
LABEL_39:
        v28 = (int)v26;
LABEL_40:
      v29 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 1272))(this, v28 | 0x100000000);
LABEL_41:
      v30 = v29;
      goto LABEL_42;
    }
    v75 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing(this, 0, (uint64_t)v8, 0);
    if (HIDWORD(v75))
    {
      v76 = (*(uint64_t (**)(WebCore::RenderObject *, unint64_t))(*(_QWORD *)this + 1272))(this, v75);
      v77 = 1360;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        v77 = 1352;
      v78 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + v77))(this);
      v79 = v78 << 6;
      if (v78 < -33554432)
        v79 = 0x80000000;
      if (v78 > 0x1FFFFFF)
        v79 = 0x7FFFFFFF;
      v22 = __OFSUB__(v76, v79);
      v80 = v76 - v79;
      if (v22)
        v80 = (v76 >> 31) + 0x7FFFFFFF;
      v30 = v80 & ~(v80 >> 31);
      goto LABEL_42;
    }
    if ((*((_BYTE *)this + 45) & 0x40) != 0)
    {
      v133 = *((_DWORD *)this + 4);
      v134 = *((_DWORD *)this + 5);
      *((_DWORD *)this + 4) = v133 + 1;
      if ((v134 & 0x1800000) == 0x1000000)
      {
        v135 = *((_DWORD *)this + 31);
        v136 = ((v135 >> 13) & 6) - 2;
        v137 = *((_QWORD *)this + 11);
        v138 = *(_QWORD *)(v137 + 8);
        v139 = v138 + 4;
        v140 = v138 + 12;
        if (v136 < 4)
          v140 = v139;
        if (!*(_BYTE *)(v140 + 4))
        {
          v141 = *(_QWORD *)(v137 + 24);
          v142 = (unsigned __int16)v135 >> 13;
          v143 = (v142 - 1) > 4 ? 0 : qword_1969FC6C8[v142 - 1];
          v144 = v141 + 8;
          if (*(_BYTE *)(v144 + 8 * v143 + 4))
          {
            v168 = v142 - 1;
            v169 = v168 > 4 ? 2 : qword_1969FC6F0[v168];
            if (*(_BYTE *)(v144 + 8 * v169 + 4))
            {
              if (v136 < 4)
                v170 = (char *)this + 160;
              else
                v170 = (char *)this + 164;
              (*(void (**)(uint64_t *__return_ptr, WebCore::RenderObject *, _QWORD, _QWORD))(*(_QWORD *)this + 1312))(&v198, this, *(unsigned int *)v170, 0);
              v171 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(this);
              v172 = v198 - v171;
              if (__OFSUB__((_DWORD)v198, v171))
                v172 = (v198 >> 31) + 0x7FFFFFFF;
              v173 = 1360;
              if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
                v173 = 1352;
              v174 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + v173))(this);
              if (v174 >= -33554432)
                v175 = v174 << 6;
              else
                v175 = 0x80000000;
              if (v174 > 0x1FFFFFF)
                v175 = 0x7FFFFFFF;
              v30 = v172 - v175;
              if (__OFSUB__(v172, v175))
                v30 = (v172 >> 31) + 0x7FFFFFFF;
              v176 = *((_DWORD *)this + 4);
              if (v176)
              {
                *((_DWORD *)this + 4) = v176 - 1;
                goto LABEL_42;
              }
LABEL_320:
              __break(0xC471u);
              JUMPOUT(0x194412C70);
            }
          }
        }
      }
      if (v133 == -1)
        goto LABEL_320;
      *((_DWORD *)this + 4) = v133;
    }
    if (((*((_BYTE *)this + 21) & 0x10) == 0) == ((*((_BYTE *)WebCore::RenderObject::containingBlock(this) + 21) & 0x10) == 0))
    {
      v145 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
      if (!v146 || (v30 = v145, (v145 & 0xFF00000000) == 0))
      {
        v147 = WebCore::RenderObject::containingBlock(this);
        if (v147)
        {
          v148 = (*(uint64_t (**)(WebCore::RenderObject *, const WebCore::RenderBox *))(*(_QWORD *)v147
                                                                                                + 1344))(v147, a2);
LABEL_241:
          v30 = v148;
          goto LABEL_242;
        }
        v30 = 0;
      }
LABEL_242:
      if (!(_DWORD)a2)
      {
        v197 = 3;
        switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
        {
          case 1:
            v149 = (char *)this + 168;
            v150 = *((_DWORD *)this + 44);
LABEL_348:
            v196 = 0;
            goto LABEL_247;
          case 2:
          case 4:
            goto LABEL_245;
          case 3:
          case 5:
            v197 = 1;
            goto LABEL_245;
          default:
            v197 = 0;
LABEL_245:
            v149 = (char *)this + 168;
            v150 = *((_DWORD *)this + v197 + 42);
            v196 = 3;
            switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
            {
              case 1:
                goto LABEL_348;
              case 2:
              case 4:
                v196 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v196 = 2;
                break;
            }
LABEL_247:
            v151 = *(_DWORD *)&v149[4 * v196];
            v152 = v150 + v151;
            if (__OFADD__(v150, v151))
              v152 = (v150 >> 31) + 0x7FFFFFFF;
            v153 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1048))(this);
            v154 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 960))(this);
            v155 = v153 + v154;
            if (__OFADD__(v153, v154))
              v155 = (v153 >> 31) + 0x7FFFFFFF;
            v156 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1056))(this);
            v157 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 968))(this);
            v158 = v156 + v157;
            if (__OFADD__(v156, v157))
              v158 = (v156 >> 31) + 0x7FFFFFFF;
            v22 = __OFADD__(v155, v158);
            v159 = v155 + v158;
            if (v22)
              v159 = (v155 >> 31) + 0x7FFFFFFF;
            v22 = __OFADD__(v152, v159);
            v160 = v152 + v159;
            if (v22)
              v160 = (v152 >> 31) + 0x7FFFFFFF;
            v22 = __OFSUB__((_DWORD)v30, v160);
            v132 = (v30 - v160);
            if (!v22)
              goto LABEL_223;
            goto LABEL_259;
        }
      }
      goto LABEL_42;
    }
    v148 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1144))(this);
    goto LABEL_241;
  }
  v164 = WebCore::RenderBox::overridingLogicalHeight(this);
  if (!HIDWORD(v164))
  {
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v165 = (char *)this + 160;
    else
      v165 = (char *)this + 164;
    v166 = *(_DWORD *)v165;
    v167 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(this);
    v30 = v166 - v167;
    if (!__OFSUB__(v166, v167))
      goto LABEL_42;
LABEL_310:
    v30 = (v166 >> 31) + 0x7FFFFFFF;
    goto LABEL_42;
  }
  v177 = v164;
  v178 = WebCore::RenderBoxModelObject::computedCSSPaddingBefore(this);
  v179 = v177 - v178;
  if (__OFSUB__(v177, v178))
    v179 = (v177 >> 31) + 0x7FFFFFFF;
  v180 = WebCore::RenderBoxModelObject::computedCSSPaddingAfter(this);
  v181 = v179 - v180;
  if (__OFSUB__(v179, v180))
    v181 = (v179 >> 31) + 0x7FFFFFFF;
  v182 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1048))(this);
  v183 = v181 - v182;
  if (__OFSUB__(v181, v182))
    v183 = (v181 >> 31) + 0x7FFFFFFF;
  v184 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1056))(this);
  v166 = v183 - v184;
  if (__OFSUB__(v183, v184))
    v166 = (v183 >> 31) + 0x7FFFFFFF;
  v185 = 1360;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v185 = 1352;
  v186 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + v185))(this);
  if (v186 >= -33554432)
    v187 = v186 << 6;
  else
    v187 = 0x80000000;
  if (v186 > 0x1FFFFFF)
    v187 = 0x7FFFFFFF;
  v30 = v166 - v187;
  if (__OFSUB__(v166, v187))
    goto LABEL_310;
LABEL_42:
  v31 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    if (*(_BYTE *)(v31 + 32) == 13)
      goto LABEL_44;
    v89 = v31 + 28;
  }
  else
  {
    if (*(_BYTE *)(v31 + 48) == 13)
      goto LABEL_44;
    v89 = v31 + 44;
  }
  v90 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing(this, 2, v89, 0);
  if (HIDWORD(v90))
  {
    v91 = (*(uint64_t (**)(WebCore::RenderObject *, unint64_t))(*(_QWORD *)this + 1272))(this, v90);
    v92 = 1360;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v92 = 1352;
    v93 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + v92))(this);
    v94 = v93 << 6;
    if (v93 < -33554432)
      v94 = 0x80000000;
    if (v93 > 0x1FFFFFF)
      v94 = 0x7FFFFFFF;
    v22 = __OFSUB__(v91, v94);
    v95 = v91 - v94;
    if (v22)
      v95 = (v91 >> 31) + 0x7FFFFFFF;
    v96 = v95 & ~(v95 >> 31);
    if (v96 >= (int)v30)
      v30 = v30;
    else
      v30 = v96;
  }
LABEL_44:
  v32 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v33 = (unsigned __int8 *)(v32 + 20);
  v34 = (unsigned __int8 *)(v32 + 36);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v35 = v34;
  else
    v35 = v33;
  v36 = v35[4];
  if (!v35[4])
  {
    v37 = 0x100000000;
    v38 = v35[4];
    goto LABEL_49;
  }
  if ((v36 - 5) >= 6)
  {
    if (v36 != 4)
    {
      if ((v36 & 0xFFFFFFF7) != 3)
        return v30;
      v82 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)v35, 1);
      LOBYTE(v36) = v82;
      v38 = v82 & 0xFFFFFF00;
      v71 = v82 & 0x100000000;
      goto LABEL_104;
    }
    v72 = *(float *)v35;
    if (!v35[6])
      v72 = (float)*(int *)v35;
    v73 = v72 * 64.0;
    if (v73 < 2147483650.0 && v73 > -2147483650.0)
      goto LABEL_114;
    if (v73 >= 2147483650.0)
    {
      v36 = 0x7FFFFFFF;
      goto LABEL_115;
    }
    if (v73 <= -2147483650.0)
      v36 = 0x80000000;
    else
LABEL_114:
      v36 = (int)v73;
LABEL_115:
    v38 = v36 & 0xFFFFFF00;
    v37 = 0x100000000;
    goto LABEL_49;
  }
  v63 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1048))(this);
  v64 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 960))(this);
  v65 = v63 + v64;
  if (__OFADD__(v63, v64))
    v65 = (v63 >> 31) + 0x7FFFFFFF;
  v66 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1056))(this);
  v67 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 968))(this);
  v68 = v66 + v67;
  if (__OFADD__(v66, v67))
    v68 = (v66 >> 31) + 0x7FFFFFFF;
  v69 = v65 + v68;
  if (__OFADD__(v65, v68))
    v69 = (v65 >> 31) + 0x7FFFFFFF;
  LOBYTE(v70) = 0;
  v71 = 0;
  if ((v36 - 7) >= 2)
  {
    v38 = 0;
    if (v36 != 10)
    {
      if ((v36 - 5) >= 2)
      {
        if (v36 == 9)
        {
          v188 = WebCore::RenderObject::containingBlock(this);
          v189 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v188 + 1344))(v188, 0);
          v70 = v189 - v69;
          if (__OFSUB__(v189, v69))
            v70 = (v189 >> 31) + 0x7FFFFFFF;
          v38 = v70 & 0xFFFFFF00;
        }
        else
        {
          LOBYTE(v70) = 0;
          v38 = 0;
        }
        v71 = 0x100000000;
      }
      else
      {
        v71 = 0;
        LOBYTE(v70) = 0;
        v38 = 0;
      }
    }
  }
  else
  {
    v38 = 0;
  }
  LOBYTE(v36) = v38 | v70;
LABEL_104:
  if ((v71 & 0x100000000) == 0)
    return v30;
  v37 = v71 & 0x100000000;
LABEL_49:
  v39 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 1272))(this, v37 | v36 | v38);
  v40 = 1360;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v40 = 1352;
  v41 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + v40))(this);
  v42 = v41 << 6;
  if (v41 < -33554432)
    v42 = 0x80000000;
  if (v41 > 0x1FFFFFF)
    v42 = 0x7FFFFFFF;
  v22 = __OFSUB__(v39, v42);
  v43 = v39 - v42;
  if (v22)
    v43 = (v39 >> 31) + 0x7FFFFFFF;
  if (v43 <= (int)v30)
    v43 = v30;
  return v43 & ~(v43 >> 31);
}

uint64_t WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing(WebCore::RenderBox *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  float v23;
  double v24;
  WebCore::RenderObject *v25;

  v6 = *(unsigned __int8 *)(a3 + 4);
  if (*(_BYTE *)(a3 + 4))
  {
    if ((v6 - 5) >= 6)
    {
      if (v6 == 4)
      {
        v23 = *(float *)a3;
        if (!*(_BYTE *)(a3 + 6))
          v23 = (float)*(int *)a3;
        v24 = v23 * 64.0;
        if (v24 >= 2147483650.0)
        {
          LODWORD(v8) = 0x7FFFFFFF;
        }
        else if (v24 <= -2147483650.0)
        {
          LODWORD(v8) = 0x80000000;
        }
        else
        {
          LODWORD(v8) = (int)v24;
        }
        goto LABEL_33;
      }
      if ((v6 & 0xFFFFFFF7) == 3)
      {
        v8 = WebCore::RenderBox::computePercentageLogicalHeight(a1, a3, 1);
        LODWORD(v7) = v8 & 0xFFFFFF00;
        v9 = v8 & 0x100000000;
        return v9 & 0x100000000 | v7 | v8;
      }
LABEL_48:
      v9 = 0;
      LOBYTE(v8) = 0;
      LODWORD(v7) = 0;
      return v9 & 0x100000000 | v7 | v8;
    }
    v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1048))(a1);
    v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 960))(a1);
    if (__OFADD__(v11, v12))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    else
      v13 = v11 + v12;
    v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1056))(a1);
    v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 968))(a1);
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      v16 = (v14 >> 31) + 0x7FFFFFFF;
    v17 = __OFADD__(v13, v16);
    v18 = v13 + v16;
    if (v17)
      v19 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v19 = v18;
    if ((v6 - 7) < 2 || v6 == 10 || (v6 - 5) <= 1)
    {
      if ((a4 & 0xFF00000000) == 0)
      {
        v9 = 0;
        LOBYTE(v8) = 0;
        LODWORD(v7) = 0;
        goto LABEL_26;
      }
      LODWORD(v8) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)a1 + 1280))(a1, a4);
    }
    else
    {
      if (v6 != 9)
      {
        LOBYTE(v8) = 0;
        LODWORD(v7) = 0;
        goto LABEL_25;
      }
      v25 = WebCore::RenderObject::containingBlock(a1);
      LODWORD(v8) = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v25 + 1344))(v25, 0);
      if (__OFSUB__((_DWORD)v8, v19))
        LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v8) = v8 - v19;
    }
    LODWORD(v7) = v8 & 0xFFFFFF00;
LABEL_25:
    v9 = 0x100000000;
LABEL_26:
    LOBYTE(v8) = v7 | v8;
    return v9 & 0x100000000 | v7 | v8;
  }
  if (a2 != 1)
    goto LABEL_48;
  if ((a4 & 0xFF00000000) == 0)
    goto LABEL_7;
  v7 = *((_QWORD *)a1 + 4);
  if (!v7)
  {
    LOBYTE(v8) = 0;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_8;
  if ((*(char *)(v8 + 45) & 0x80000000) == 0 || (*((_DWORD *)a1 + 5) & 0x400) != 0)
    goto LABEL_7;
  v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 32) + 16) + 20);
  v21 = (v20 >> 1) & 1;
  v22 = (v20 & 2) == 0;
  if ((*(_BYTE *)(v8 + 21) & 0x10) != 0)
    v22 = v21;
  if (v22 == (*((_DWORD *)a1 + 5) & 0x1000u) >> 12)
  {
    LODWORD(v8) = WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild((WebCore::RenderFlexibleBox *)v8, a1);
    if ((_DWORD)v8)
    {
      LODWORD(v8) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)a1 + 1280))(a1, a4);
LABEL_33:
      LODWORD(v7) = v8 & 0xFFFFFF00;
      goto LABEL_9;
    }
  }
  else
  {
LABEL_7:
    LOBYTE(v8) = 0;
  }
LABEL_8:
  LODWORD(v7) = 0;
LABEL_9:
  v9 = 0x100000000;
  return v9 & 0x100000000 | v7 | v8;
}

void WebCore::HTMLAnchorElement::~HTMLAnchorElement(WebCore::HTMLAnchorElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLAnchorElement::~HTMLAnchorElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;

  *(_QWORD *)this = off_1E33B3458;
  *((_QWORD *)this + 14) = &unk_1E33B3958;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)(v3 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v9 = *(WTF **)(v3 + 24);
    if ((WTF *)(v3 + 40) != v9 && v9 != 0)
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::Element::~Element((uint64_t)this);
}

void WebCore::HTMLLinkElement::~HTMLLinkElement(WebCore::HTMLLinkElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLLinkElement::~HTMLLinkElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::CSSStyleSheet *v3;
  uint64_t v4;
  WebCore::CachedResource *v5;
  WebCore::Style::Scope *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 25);
  if (v3)
    WebCore::CSSStyleSheet::clearOwnerNode(v3, a2);
  v4 = *((_QWORD *)this + 24);
  if (v4)
  {
    v5 = *(WebCore::CachedResource **)(v4 + 8);
    if (v5)
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this + 14);
  }
  v6 = (WebCore::Style::Scope *)*((_QWORD *)this + 23);
  if (v6)
    WebCore::Style::Scope::removeStyleSheetCandidateNode(v6, this);
  {
    if (dword_1ECE9061C)
    {
      v35 = (uint64_t *)qword_1ECE90610;
      v36 = 16 * dword_1ECE9061C;
      do
      {
        if (*v35 && *(WebCore::HTMLLinkElement **)(*v35 + 8) == this)
          v35 = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v35, a2);
        v35 += 2;
        v36 -= 16;
      }
      while (v36);
    }
  }
  else
  {
    v39 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
  }
  if (dword_1ECE9062C)
  {
    v37 = (uint64_t *)qword_1ECE90620;
    v38 = 16 * dword_1ECE9062C;
    do
    {
      if (*v37 && *(WebCore::HTMLLinkElement **)(*v37 + 8) == this)
        v37 = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v37, a2);
      v37 += 2;
      v38 -= 16;
    }
    while (v38);
  }
  v7 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 48);
    *(_QWORD *)(v7 + 48) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(unsigned int *)(v7 + 36);
    if ((_DWORD)v9)
    {
      v10 = *(WTF::StringImpl ***)(v7 + 24);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    v13 = *(WTF **)(v7 + 24);
    if ((WTF *)(v7 + 40) != v13 && v13 != 0)
    {
      *(_QWORD *)(v7 + 24) = 0;
      *(_DWORD *)(v7 + 32) = 0;
      WTF::fastFree(v13, a2);
    }
    WTF::fastFree((WTF *)v7, a2);
  }
  v15 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 48);
    *(_QWORD *)(v15 + 48) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *(unsigned int *)(v15 + 36);
    if ((_DWORD)v17)
    {
      v18 = *(WTF::StringImpl ***)(v15 + 24);
      v19 = 8 * v17;
      do
      {
        v20 = *v18;
        *v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
    v21 = *(WTF **)(v15 + 24);
    if ((WTF *)(v15 + 40) != v21 && v21 != 0)
    {
      *(_QWORD *)(v15 + 24) = 0;
      *(_DWORD *)(v15 + 32) = 0;
      WTF::fastFree(v21, a2);
    }
    WTF::fastFree((WTF *)v15, a2);
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 24, a2);
  WebCore::LinkLoader::~LinkLoader((unsigned int **)this + 18);
  v29 = *((_QWORD *)this + 17);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 0;
    v30 = (unsigned int *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v28);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
  }
  *((_QWORD *)this + 14) = &off_1E33F87C8;
  v33 = *((_QWORD *)this + 15);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 0;
    v34 = (WTF *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v28);
      else
        --*(_DWORD *)v34;
    }
  }
  else
  {
    *((_QWORD *)this + 15) = 0;
  }
  WebCore::Element::~Element((uint64_t)this);
}

uint64_t WebCore::ViewportConfiguration::setViewportArguments(WebCore::ViewportConfiguration *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;

  if (*((float *)this + 35) == *((float *)a2 + 1)
    && *((float *)this + 36) == *((float *)a2 + 2)
    && *((float *)this + 37) == *((float *)a2 + 3)
    && *((float *)this + 38) == *((float *)a2 + 4)
    && *((float *)this + 39) == *((float *)a2 + 5)
    && *((float *)this + 40) == *((float *)a2 + 6)
    && *((float *)this + 41) == *((float *)a2 + 7)
    && *((float *)this + 42) == *((float *)a2 + 8)
    && *((float *)this + 43) == *((float *)a2 + 9)
    && *((float *)this + 44) == *((float *)a2 + 10)
    && *((float *)this + 45) == *((float *)a2 + 11)
    && *((float *)this + 46) == *((float *)a2 + 12)
    && *((unsigned __int8 *)this + 188) == *((unsigned __int8 *)a2 + 52)
    && *((unsigned __int8 *)this + 189) == *((unsigned __int8 *)a2 + 53))
  {
    return 0;
  }
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)((char *)this + 182) = *(_QWORD *)((char *)a2 + 46);
  *(_OWORD *)((char *)this + 152) = v5;
  *(_OWORD *)((char *)this + 168) = v6;
  *(_OWORD *)((char *)this + 136) = v4;
  if (*((_BYTE *)this + 236))
  {
    v7 = *((float *)this + 41);
    if (v7 > 0.0)
    {
      v8 = *((float *)this + 35);
      if (v8 > 0.0)
      {
        v9 = v7 * v8;
        if (v7 > 1.2)
          v7 = 1.2;
        *((float *)this + 41) = v7;
        *((float *)this + 35) = v9 / v7;
      }
    }
  }
  WebCore::ViewportConfiguration::updateDefaultConfiguration(this);
  v10 = *((float *)this + 32);
  if (v10 == 0.0 || (v11 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v11 == 0.0))
  {
    v12 = *((double *)this + 25);
  }
  else
  {
    if (v11 < v10)
      v11 = v10;
    v12 = *((double *)this + 25) * v10 / v11;
  }
  v13 = v12;
  v14 = v10 / v13;
  v15 = *((float *)this + 33) / v13;
  *((float *)this + 30) = v14;
  *((float *)this + 31) = v15;
  if (v10 < 0.0 && v10 > 0.0 && (*((_BYTE *)this + 192) & 1) == 0)
  {
    *((_DWORD *)this + 30) = 0;
    *((float *)this + 31) = roundf(v15 * (float)(0.0 / v14));
  }
  WebCore::ViewportConfiguration::updateConfiguration(this);
  return 1;
}

double WebCore::Style::Resolver::applyMatchedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  const char **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  WebCore::Node *v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int *v56;
  int v57;
  int *v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  uint64_t v62;
  int v63;
  int v64;
  BOOL v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t k;
  int v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WebCore::Node *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  const WebCore::RenderStyle *v87;
  WebCore::Node *v88;
  WebCore::Node *v89;
  __int8 v90;
  uint64_t *v91;
  unint64_t i;
  _WORD *v93;
  int v94;
  int v95;
  WebCore::Node *v96;
  unint64_t v97;
  _WORD *v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  _OWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  const WebCore::RenderStyle *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  const char **v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  WTF::StringImpl *v121;
  char v122;
  double result;
  uint64_t v124;
  unsigned __int16 *v125;
  int v126;
  uint64_t v127;
  int v128;
  int j;
  unsigned int v130;
  uint64_t v131;
  WTF::StringImpl *v133;
  WebCore::Document *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WebCore::Document *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unint64_t StatusReg;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  WTF::Thread *v148;
  const char *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  const char **v154;
  uint64_t v155;
  int v156;
  const WTF::StringImpl *v157;
  const WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WebCore::SVGRenderStyle *v163;
  const WebCore::SVGRenderStyle *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  _DWORD *v182;
  WebCore::RenderStyle *v183;
  WTF *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  unint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  unint64_t v195;
  int v196;
  int v197;
  unsigned int *v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int *v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  _OWORD *v206;
  unint64_t v207;
  unint64_t v208;
  WebCore *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _WORD *v213;
  int v214;
  _WORD *v215;
  int v216;
  _WORD *v217;
  int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  _DWORD *v228;
  _DWORD *v229;
  _DWORD *v230;
  _DWORD *v231;
  uint64_t v232;
  uint64_t v233;
  WebCore::Node *v234;
  uint64_t v235;
  void *v236;
  WebCore::Node *v237;
  WebCore::Node *v238;
  WebCore::RenderStyle *v239;
  WTF *v240;
  unint64_t v241;
  int v242;
  char v243;
  WTF::AtomString *v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  unsigned int *v248;
  _QWORD *v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  __int16 *v260;
  _QWORD *v261;
  unint64_t *v262;
  unint64_t v263;
  const char **v264;
  unsigned int v265;
  WebCore::RenderStyle *v266;
  char v267;
  WebCore::Node *v268;
  uint64_t v269;
  uint64_t v270;
  WebCore::Node *v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  _OWORD v275[4];
  unsigned __int16 v276;
  const WebCore::RenderStyle *v277;
  unint64_t v278;
  const WebCore::RenderStyle *v279;
  unsigned __int16 v280;
  const WebCore::RenderStyle *v281;
  unint64_t v282;
  const WebCore::RenderStyle *v283;
  unsigned __int16 v284;
  const WebCore::RenderStyle *v285;
  unint64_t v286;
  const WebCore::RenderStyle *v287;
  uint64_t v288;
  int64x2_t v289[43];
  unsigned int v290;
  WTF::StringImpl *v291;
  _BYTE v292[16];
  uint64_t v293;
  WebCore::Document *v294;
  uint64_t v295;
  uint64_t v296;
  _WORD *v297;
  int v298;
  char v299;
  WTF::AtomString *v300;
  unsigned int v301;
  WTF::StringImpl *v302;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = (uint64_t)v3;
  v6 = (unint64_t)v5;
  v7 = v2;
  v8 = (const char **)v5[2];
  v266 = (WebCore::RenderStyle *)v5[1];
  v9 = *v5;
  v261 = (_QWORD *)*v5;
  v262 = v5;
  v260 = (__int16 *)v3;
  v263 = v2;
  v264 = v8;
  if (v3[1])
    goto LABEL_65;
  v10 = *((_QWORD *)v8[3] + 27);
  v11 = *((unsigned int *)v3 + 5);
  v12 = *((unsigned int *)v3 + 9);
  if (v11 | v12)
    goto LABEL_3;
  v75 = *((unsigned int *)v3 + 13);
  if (!(_DWORD)v75)
  {
LABEL_65:
    v58 = 0;
    v265 = 0;
    goto LABEL_66;
  }
  v76 = 16 * v75;
  v77 = (unsigned __int8 *)(*((_QWORD *)v3 + 5) + 15);
  while (1)
  {
    v78 = *v77;
    v77 += 16;
    if (v78 == 2)
      break;
    v76 -= 16;
    if (!v76)
      goto LABEL_65;
  }
LABEL_3:
  v13 = *v3;
  LODWORD(v14) = ((v13 - 1640531527) ^ ((v13 - 1640531527) << 16))
               + (((v13 - 1640531527) ^ ((v13 - 1640531527) << 16)) >> 11);
  v15 = (unsigned __int16 *)*((_QWORD *)v3 + 7);
  v16 = *((unsigned int *)v3 + 17);
  if ((_DWORD)v16)
    goto LABEL_165;
  while (1)
  {
    v17 = *(_QWORD *)(v4 + 8);
    if ((_DWORD)v11)
    {
      v18 = 16 * v11;
      v19 = (_BYTE *)(v17 + 15);
      do
      {
        if (*v19 != 1)
        {
          v20 = *(_QWORD *)(v19 - 15);
          v21 = (v20 >> 5) & 0x7FFF800 ^ (((_DWORD)v14 + (unsigned __int16)v20) << 16) ^ ((_DWORD)v14 + (unsigned __int16)v20);
          LODWORD(v20) = (v20 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v20) + (v21 >> 11)) << 16) ^ (v21
                                                                                             + WORD2(v20)
                                                                                             + (v21 >> 11));
          LODWORD(v20) = v20 + *(v19 - 7) + (v20 >> 11);
          LODWORD(v20) = (v20 ^ ((_DWORD)v20 << 16))
                       + *(v19 - 6)
                       + ((v20 ^ ((_DWORD)v20 << 16)) >> 11);
          LODWORD(v20) = (v20 ^ ((_DWORD)v20 << 16))
                       + *(v19 - 5)
                       + ((v20 ^ ((_DWORD)v20 << 16)) >> 11);
          LODWORD(v20) = (v20 ^ ((_DWORD)v20 << 16))
                       + *(v19 - 4)
                       + ((v20 ^ ((_DWORD)v20 << 16)) >> 11);
          LODWORD(v20) = (v20 ^ ((_DWORD)v20 << 16))
                       + *(unsigned __int16 *)(v19 - 3)
                       + ((v20 ^ ((_DWORD)v20 << 16)) >> 11);
          LODWORD(v20) = (v20 ^ ((_DWORD)v20 << 16))
                       + *(v19 - 1)
                       + ((v20 ^ ((_DWORD)v20 << 16)) >> 11);
          LODWORD(v14) = (v20 ^ ((_DWORD)v20 << 16)) + ((v20 ^ ((_DWORD)v20 << 16)) >> 11);
        }
        v19 += 16;
        v18 -= 16;
      }
      while (v18);
    }
    v22 = *(_QWORD *)(v4 + 24);
    if ((_DWORD)v12)
    {
      v23 = 16 * v12;
      v24 = (_BYTE *)(v22 + 15);
      do
      {
        if (*v24 != 1)
        {
          v25 = *(_QWORD *)(v24 - 15);
          v26 = (v25 >> 5) & 0x7FFF800 ^ (((_DWORD)v14 + (unsigned __int16)v25) << 16) ^ ((_DWORD)v14 + (unsigned __int16)v25);
          v27 = (v25 >> 37) & 0x7FFF800 ^ ((v26 + WORD2(v25) + (v26 >> 11)) << 16) ^ (v26 + WORD2(v25) + (v26 >> 11));
          v28 = v27 + *(v24 - 7) + (v27 >> 11);
          v29 = (v28 ^ (v28 << 16)) + *(v24 - 6) + ((v28 ^ (v28 << 16)) >> 11);
          v30 = (v29 ^ (v29 << 16)) + *(v24 - 5) + ((v29 ^ (v29 << 16)) >> 11);
          v31 = (v30 ^ (v30 << 16)) + *(v24 - 4) + ((v30 ^ (v30 << 16)) >> 11);
          v32 = (v31 ^ (v31 << 16)) + *(unsigned __int16 *)(v24 - 3) + ((v31 ^ (v31 << 16)) >> 11);
          v33 = ((v32 ^ (v32 << 16)) + *(v24 - 1) + ((v32 ^ (v32 << 16)) >> 11)) ^ (((v32 ^ (v32 << 16)) + *(v24 - 1) + ((v32 ^ (v32 << 16)) >> 11)) << 16);
          LODWORD(v14) = v33 + (v33 >> 11);
        }
        v24 += 16;
        v23 -= 16;
      }
      while (v23);
    }
    v34 = *(_QWORD *)(v4 + 40);
    v35 = *(unsigned int *)(v4 + 52);
    if ((_DWORD)v35)
    {
      v36 = 16 * v35;
      v37 = (_BYTE *)(v34 + 15);
      do
      {
        if (*v37 != 1)
        {
          v38 = *(_QWORD *)(v37 - 15);
          v39 = (v38 >> 5) & 0x7FFF800 ^ (((_DWORD)v14 + (unsigned __int16)v38) << 16) ^ ((_DWORD)v14 + (unsigned __int16)v38);
          v40 = (v38 >> 37) & 0x7FFF800 ^ ((v39 + WORD2(v38) + (v39 >> 11)) << 16) ^ (v39 + WORD2(v38) + (v39 >> 11));
          v41 = v40 + *(v37 - 7) + (v40 >> 11);
          v42 = (v41 ^ (v41 << 16)) + *(v37 - 6) + ((v41 ^ (v41 << 16)) >> 11);
          v43 = (v42 ^ (v42 << 16)) + *(v37 - 5) + ((v42 ^ (v42 << 16)) >> 11);
          v44 = (v43 ^ (v43 << 16)) + *(v37 - 4) + ((v43 ^ (v43 << 16)) >> 11);
          v45 = (v44 ^ (v44 << 16)) + *(unsigned __int16 *)(v37 - 3) + ((v44 ^ (v44 << 16)) >> 11);
          v46 = ((v45 ^ (v45 << 16)) + *(v37 - 1) + ((v45 ^ (v45 << 16)) >> 11)) ^ (((v45 ^ (v45 << 16)) + *(v37 - 1) + ((v45 ^ (v45 << 16)) >> 11)) << 16);
          LODWORD(v14) = v46 + (v46 >> 11);
        }
        v37 += 16;
        v36 -= 16;
      }
      while (v36);
    }
    v47 = (v10 >> 5) & 0x7FFF800 ^ (((_DWORD)v14 + (v10 & 0xFFF8)) << 16) ^ ((_DWORD)v14 + (v10 & 0xFFF8));
    v48 = (v10 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v10) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v10) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    v52 = v51 ? v51 : 0x800000;
    v53 = *(_QWORD *)(v7 + 424);
    v265 = v52;
    if (v53)
    {
      v54 = *(_DWORD *)(v53 - 8);
      v55 = v54 & v52;
      v56 = (int *)(v53 + 112 * (v54 & v52));
      v57 = *v56;
      if (*v56 != v52)
      {
        v95 = 1;
        while (v57)
        {
          v55 = (v55 + v95) & v54;
          v56 = (int *)(v53 + 112 * v55);
          v57 = *v56;
          ++v95;
          if (*v56 == v265)
            goto LABEL_24;
        }
        v56 = (int *)(v53 + 112 * *(unsigned int *)(v53 - 4));
      }
LABEL_24:
      if (v56 != (int *)(v53 + 112 * *(unsigned int *)(v53 - 4)))
      {
        v58 = v56 + 2;
        if (v13 == *((unsigned __int8 *)v56 + 8)
          && *(unsigned __int8 *)(v4 + 2) == *((unsigned __int8 *)v56 + 10)
          && (_DWORD)v11 == v56[7])
        {
          if (!(_DWORD)v11)
            goto LABEL_295;
          v186 = *((_QWORD *)v56 + 2);
          if (*(_QWORD *)v17 == *(_QWORD *)v186
            && *(unsigned __int8 *)(v17 + 8) == *(unsigned __int8 *)(v186 + 8)
            && *(unsigned __int8 *)(v17 + 9) == *(unsigned __int8 *)(v186 + 9)
            && *(unsigned __int8 *)(v17 + 10) == *(unsigned __int8 *)(v186 + 10)
            && (*(_BYTE *)(v17 + 11) == 0) != (*(_BYTE *)(v186 + 11) != 0)
            && *(unsigned __int16 *)(v17 + 12) == *(unsigned __int16 *)(v186 + 12)
            && (*(_BYTE *)(v17 + 14) == 0) != (*(_BYTE *)(v186 + 14) != 0))
          {
            v187 = 0;
            v188 = 0;
            v189 = 1;
            do
            {
              if (*(unsigned __int8 *)(v17 + v187 + 15) != *(unsigned __int8 *)(v186 + v187 + 15))
                break;
              v188 = v189 >= v11;
              if (16 * v11 - 16 == v187)
                break;
              if (*(_QWORD *)(v17 + v187 + 16) != *(_QWORD *)(v186 + v187 + 16))
                break;
              if (*(unsigned __int8 *)(v17 + v187 + 24) != *(unsigned __int8 *)(v186 + v187 + 24))
                break;
              if (*(unsigned __int8 *)(v17 + v187 + 25) != *(unsigned __int8 *)(v186 + v187 + 25))
                break;
              if (*(unsigned __int8 *)(v17 + v187 + 26) != *(unsigned __int8 *)(v186 + v187 + 26))
                break;
              if ((*(_BYTE *)(v17 + v187 + 27) == 0) == (*(_BYTE *)(v186 + v187 + 27) != 0))
                break;
              if (*(unsigned __int16 *)(v17 + v187 + 28) != *(unsigned __int16 *)(v186 + v187 + 28))
                break;
              v190 = *(_BYTE *)(v17 + v187 + 30) == 0;
              v191 = *(_BYTE *)(v186 + v187 + 30) != 0;
              ++v189;
              v187 += 16;
            }
            while (v190 != v191);
            if (v188)
            {
LABEL_295:
              if ((_DWORD)v12 == v56[11])
              {
                if (!(_DWORD)v12)
                  goto LABEL_31;
                v192 = *((_QWORD *)v56 + 4);
                if (*(_QWORD *)v22 == *(_QWORD *)v192
                  && *(unsigned __int8 *)(v22 + 8) == *(unsigned __int8 *)(v192 + 8)
                  && *(unsigned __int8 *)(v22 + 9) == *(unsigned __int8 *)(v192 + 9)
                  && *(unsigned __int8 *)(v22 + 10) == *(unsigned __int8 *)(v192 + 10)
                  && (*(_BYTE *)(v22 + 11) == 0) != (*(_BYTE *)(v192 + 11) != 0)
                  && *(unsigned __int16 *)(v22 + 12) == *(unsigned __int16 *)(v192 + 12)
                  && (*(_BYTE *)(v22 + 14) == 0) != (*(_BYTE *)(v192 + 14) != 0))
                {
                  v193 = 0;
                  v194 = 0;
                  v195 = 1;
                  do
                  {
                    if (*(unsigned __int8 *)(v22 + v193 + 15) != *(unsigned __int8 *)(v192 + v193 + 15))
                      break;
                    v194 = v195 >= v12;
                    if (16 * v12 - 16 == v193)
                      break;
                    if (*(_QWORD *)(v22 + v193 + 16) != *(_QWORD *)(v192 + v193 + 16))
                      break;
                    if (*(unsigned __int8 *)(v22 + v193 + 24) != *(unsigned __int8 *)(v192 + v193 + 24))
                      break;
                    if (*(unsigned __int8 *)(v22 + v193 + 25) != *(unsigned __int8 *)(v192 + v193 + 25))
                      break;
                    if (*(unsigned __int8 *)(v22 + v193 + 26) != *(unsigned __int8 *)(v192 + v193 + 26))
                      break;
                    if ((*(_BYTE *)(v22 + v193 + 27) == 0) == (*(_BYTE *)(v192 + v193 + 27) != 0))
                      break;
                    if (*(unsigned __int16 *)(v22 + v193 + 28) != *(unsigned __int16 *)(v192 + v193 + 28))
                      break;
                    v196 = *(_BYTE *)(v22 + v193 + 30) == 0;
                    v197 = *(_BYTE *)(v192 + v193 + 30) != 0;
                    ++v195;
                    v193 += 16;
                  }
                  while (v196 != v197);
                  if (v194)
                  {
LABEL_31:
                    if ((_DWORD)v16 == v56[19])
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_296:
    v58 = 0;
LABEL_66:
    v66 = 3;
    v267 = 1;
LABEL_67:
    v79 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
    if (v79 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
      || v79 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
      || v79 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)
      || v79 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
      || v79 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
      || v79 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
    {
      goto LABEL_353;
    }
    v80 = **(_QWORD **)(v9 + 40);
    if (v80 && (*(_WORD *)(v80 + 28) & 0x80) != 0 && !*(_BYTE *)(v80 + 193))
    {
      v219 = *(_QWORD *)(v9 + 104);
      if (v219
        && ((v220 = *(_DWORD *)(v219 + 4), (v220 & 1) != 0)
          ? (v221 = *(_QWORD *)(v219 + 40), LODWORD(v222) = *(_DWORD *)(v219 + 52))
          : (v221 = v219 + 32, LODWORD(v222) = v220 >> 5),
            (_DWORD)v222))
      {
        v222 = v222;
        v223 = (_QWORD *)(v221 + 8);
        while (1)
        {
          v224 = *(v223 - 1);
          if (v224 == WebCore::HTMLNames::useragentpartAttr
            || *(_QWORD *)(v224 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
            && *(_QWORD *)(v224 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
          {
            break;
          }
          v223 += 2;
          if (!--v222)
          {
            v223 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v223 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      {
        v273 = "-webkit-list-button";
        v274 = 20;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitListButton(void)::webkitListButton, (uint64_t)&v273);
      }
      v65 = *v223 == WebCore::UserAgentParts::webkitListButton(void)::webkitListButton;
      v4 = (uint64_t)v260;
      if (v65)
      {
LABEL_353:
        v225 = WTF::fastMalloc((WTF *)0x40);
        v226 = v7;
        v227 = v225;
        *(_DWORD *)v225 = 0;
        v228 = (_DWORD *)*((_QWORD *)v266 + 1);
        ++*v228;
        *(_QWORD *)(v225 + 8) = v228;
        *(_QWORD *)(v225 + 16) = *((_QWORD *)v266 + 2);
        v229 = (_DWORD *)*((_QWORD *)v266 + 3);
        ++*v229;
        *(_QWORD *)(v225 + 24) = v229;
        v230 = (_DWORD *)*((_QWORD *)v266 + 4);
        ++*v230;
        *(_QWORD *)(v225 + 32) = v230;
        *(_QWORD *)(v225 + 40) = *((_QWORD *)v266 + 5);
        *(_QWORD *)(v225 + 48) = 0;
        v231 = (_DWORD *)*((_QWORD *)v266 + 7);
        ++*v231;
        *(_QWORD *)(v225 + 56) = v231;
        v232 = *(_QWORD *)(v226 + 16);
        if (v232)
          v232 = *(_QWORD *)(v232 + 8);
        *(_DWORD *)(v232 + 24) += 2;
        v233 = *(_QWORD *)(v6 + 16);
        v268 = (WebCore::Node *)v232;
        v269 = v233;
        v270 = *(_QWORD *)(v6 + 32);
        v234 = *(WebCore::Node **)v6;
        if (*(_QWORD *)v6)
          *((_DWORD *)v234 + 6) += 2;
        v235 = *(_QWORD *)(v6 + 48);
        v271 = v234;
        v272 = v235;
        WebCore::Style::Builder::Builder((unsigned __int8 *)&v273, v225, (uint64_t *)&v268, v4, 1, 3u, 0);
        v237 = v271;
        v271 = 0;
        if (v237)
        {
          if (*((_DWORD *)v237 + 6) == 2)
          {
            if ((*((_WORD *)v237 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v237);
          }
          else
          {
            *((_DWORD *)v237 + 6) -= 2;
          }
        }
        v238 = v268;
        v268 = 0;
        if (v238)
        {
          if (*((_DWORD *)v238 + 6) == 2)
          {
            if ((*((_WORD *)v238 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v238);
          }
          else
          {
            *((_DWORD *)v238 + 6) -= 2;
          }
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v289[0]), (int32x4_t)vceqzq_s64(v289[1]))))) & 1) != 0|| *(_OWORD *)&v289[2] != 0|| v290)
        {
          WebCore::Style::Builder::applyTopPriorityProperties((WebCore::Style::Builder *)&v273);
          WebCore::Style::Builder::applyHighPriorityProperties((WebCore::Style::Builder *)&v273);
          WebCore::Style::Builder::applyNonHighPriorityProperties((WebCore::Style::Builder *)&v273);
        }
        v239 = *(WebCore::RenderStyle **)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v227;
        v7 = v263;
        if (v239)
        {
          WebCore::RenderStyle::~RenderStyle(v239, v236);
          if (*(_DWORD *)v240)
          {
            *((_OWORD *)v240 + 2) = 0u;
            *((_OWORD *)v240 + 3) = 0u;
            *(_OWORD *)v240 = 0u;
            *((_OWORD *)v240 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v240, v236);
          }
        }
        WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)&v273, (WTF::StringImpl *)v236);
      }
    }
    v81 = *(_QWORD *)(v6 + 8);
    v82 = *(_QWORD *)(v7 + 16);
    if (v82)
      v82 = *(_QWORD *)(v82 + 8);
    *(_DWORD *)(v82 + 24) += 2;
    v83 = *(_QWORD *)(v6 + 16);
    v268 = (WebCore::Node *)v82;
    v269 = v83;
    v270 = *(_QWORD *)(v6 + 32);
    v84 = *(WebCore::Node **)v6;
    if (*(_QWORD *)v6)
      *((_DWORD *)v84 + 6) += 2;
    v85 = *(_QWORD *)(v6 + 48);
    v271 = v84;
    v272 = v85;
    WebCore::Style::Builder::Builder((unsigned __int8 *)&v273, v81, (uint64_t *)&v268, v4, 4, v66, 0);
    v88 = v271;
    v271 = 0;
    if (v88)
    {
      if (*((_DWORD *)v88 + 6) == 2)
      {
        if ((*((_WORD *)v88 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v88);
      }
      else
      {
        *((_DWORD *)v88 + 6) -= 2;
      }
    }
    v89 = v268;
    v268 = 0;
    if (v89)
    {
      if (*((_DWORD *)v89 + 6) == 2)
      {
        if ((*((_WORD *)v89 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v89);
      }
      else
      {
        *((_DWORD *)v89 + 6) -= 2;
      }
    }
    if (v291 && *((_DWORD *)v291 - 3))
    {
      WebCore::Style::Builder::applyPropertiesImpl<(WebCore::Style::Builder::CustomPropertyCycleTracking)0>((unint64_t)&v273, 2, 4);
    }
    else
    {
      v90 = v289[0].i8[0];
      if ((v289[0].i8[0] & 4) != 0)
      {
        v213 = v297;
        v87 = v277;
        v297 = &v276;
        if (v277)
        {
          v214 = v298;
          v298 = 0;
          WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v276, (unint64_t)v277, 0);
          v298 = v214;
        }
        if ((*(_BYTE *)(v293 + 45) & 0xC) != 0)
        {
          if (v278)
          {
            v298 = 1;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v276, v278, 1u);
          }
          v87 = v279;
          if (v279)
          {
            v298 = 2;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v276, (unint64_t)v279, 2u);
          }
          v298 = 0;
        }
        v297 = v213;
        v90 = v289[0].i8[0];
      }
      if ((v90 & 8) != 0)
      {
        v215 = v297;
        v87 = v281;
        v297 = &v280;
        if (v281)
        {
          v216 = v298;
          v298 = 0;
          WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v280, (unint64_t)v281, 0);
          v298 = v216;
        }
        if ((*(_BYTE *)(v293 + 45) & 0xC) != 0)
        {
          if (v282)
          {
            v298 = 1;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v280, v282, 1u);
          }
          v87 = v283;
          if (v283)
          {
            v298 = 2;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v280, (unint64_t)v283, 2u);
          }
          v298 = 0;
        }
        v297 = v215;
        v90 = v289[0].i8[0];
      }
      if ((v90 & 0x10) != 0)
      {
        v217 = v297;
        v87 = v285;
        v297 = &v284;
        if (v285)
        {
          v218 = v298;
          v298 = 0;
          WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v284, (unint64_t)v285, 0);
          v298 = v218;
        }
        if ((*(_BYTE *)(v293 + 45) & 0xC) != 0)
        {
          if (v286)
          {
            v298 = 1;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v284, v286, 1u);
          }
          v87 = v287;
          if (v287)
          {
            v298 = 2;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)v284, (unint64_t)v287, 2u);
          }
          v298 = 0;
        }
        v297 = v217;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(v293 + 24) + 236) & 0x18) == 0x10)
    {
      if (v295)
      {
        v15 = (unsigned __int16 *)*(unsigned __int16 *)(v295 + 28);
        if ((v15 & 0x10) != 0)
        {
          v15 = *(unsigned __int16 **)(WebCore::HTMLNames::rtTag + 24);
          if (*(unsigned __int16 **)(*(_QWORD *)(v295 + 96) + 24) == v15)
          {
            *(_DWORD *)(v293 + 40) = *(_DWORD *)(v293 + 40) & 0xFFFFFC3F | 0x80;
            v256 = *(_DWORD *)(v293 + 44);
            v15 = (unsigned __int16 *)(((v256 >> 13) & 6) - 2);
            if (v15 >= 4)
              *(_DWORD *)(v293 + 44) = v256 & 0xFFFF1FFF | 0x4000;
          }
        }
      }
    }
    if (v291 && *((_DWORD *)v291 - 3))
    {
      WebCore::Style::Builder::applyPropertiesImpl<(WebCore::Style::Builder::CustomPropertyCycleTracking)0>((unint64_t)&v273, 5, 38);
    }
    else
    {
      v16 = (unint64_t)&v273;
      v91 = &v288;
      for (i = 5; i != 39; ++i)
      {
        if (((*(unint64_t *)((char *)v289[0].i64 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
        {
          v93 = v297;
          v297 = v91;
          v87 = (const WebCore::RenderStyle *)v91[1];
          if (v87)
          {
            v94 = v298;
            v298 = 0;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v91, (unint64_t)v87, 0);
            v298 = v94;
          }
          if ((*(_BYTE *)(v293 + 45) & 0xC) != 0)
          {
            v241 = v91[2];
            if (v241)
            {
              v298 = 1;
              WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v91, v241, 1u);
            }
            v87 = (const WebCore::RenderStyle *)v91[3];
            if (v87)
            {
              v298 = 2;
              WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v91, (unint64_t)v87, 2u);
            }
            v298 = 0;
          }
          v297 = v93;
        }
        v91 += 4;
      }
    }
    v8 = &v273;
    LODWORD(v14) = (_DWORD)v294;
    v96 = (WebCore::Node *)*((_QWORD *)v294 + 331);
    if (!v96)
    {
      v14 = (WebCore::Node *)WebCore::Document::ensureFontSelector(v294);
      v96 = v14;
    }
    v6 = v7 + 416;
    if (v299 || !*(_QWORD *)(*(_QWORD *)(v293 + 32) + 248))
    {
      WebCore::Style::BuilderState::updateFontForTextSizeAdjust((WebCore::Style::BuilderState *)v292);
      WebCore::Style::BuilderState::updateFontForGenericFamilyChange((WebCore::Style::BuilderState *)v292);
      WebCore::Style::BuilderState::updateFontForZoomChange((WebCore::Style::BuilderState *)v292);
      WebCore::Style::BuilderState::updateFontForOrientationChange((WebCore::Style::BuilderState *)v292);
      v8 = (const char **)(*(_QWORD *)(v293 + 32) + 32);
      ++*((_DWORD *)v96 + 2);
      v268 = v96;
      v210 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v210 || (v211 = *(_QWORD *)(v210 + 96)) == 0)
        v211 = WebCore::threadGlobalDataSlow(v209);
      v212 = *(_QWORD *)(v211 + 80);
      if (!v212)
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v211);
        v212 = *(_QWORD *)(v211 + 80);
      }
      WebCore::FontCache::updateFontCascade(v212, (uint64_t)v8, &v268);
      v14 = v268;
      v268 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 2) == 1)
          LODWORD(v14) = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v14 + 8))(v14);
        else
          --*((_DWORD *)v14 + 2);
      }
      v299 = 0;
    }
    if ((v267 & 1) == 0)
    {
      v109 = *((_QWORD *)v266 + 3);
      v110 = (const WebCore::RenderStyle *)*((_QWORD *)v58 + 10);
      v111 = *((_QWORD *)v110 + 3);
      if (*(float *)(v109 + 184) != *(float *)(v111 + 184)
        || *(unsigned __int16 *)(v109 + 302) != *(unsigned __int16 *)(v111 + 302)
        || (LODWORD(v14) = WebCore::CSSPrimitiveValue::equalForLengthResolution(v266, v110, v87),
            (v14 & 1) == 0))
      {
        WebCore::Style::MatchedDeclarationsCache::remove((WebCore::Style::MatchedDeclarationsCache *)(v7 + 416), (void *)v265);
        WebCore::Style::Resolver::applyMatchedProperties(v7, v262, v260);
LABEL_162:
        WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)&v273, v86);
        return result;
      }
    }
    v259 = v7 + 416;
    if (v291 && *((_DWORD *)v291 - 3))
    {
      WebCore::Style::Builder::applyPropertiesImpl<(WebCore::Style::Builder::CustomPropertyCycleTracking)0>((unint64_t)&v273, 39, 350);
LABEL_146:
      v10 = v290;
      if (!v290)
      {
LABEL_153:
        if (!v291)
        {
          v116 = 0;
          LODWORD(v117) = 0;
          v118 = v264;
          goto LABEL_155;
        }
        v117 = *((unsigned int *)v291 - 1);
        v119 = (WTF::StringImpl *)((char *)v291 + 40 * v117);
        v118 = v264;
        if (*((_DWORD *)v291 - 3))
        {
          v116 = v291;
          v120 = v263;
          if ((_DWORD)v117)
          {
            v127 = 40 * v117;
            v116 = v291;
            while ((unint64_t)(*(_QWORD *)v116 + 1) <= 1)
            {
              v116 = (WTF::StringImpl *)((char *)v116 + 40);
              v127 -= 40;
              if (!v127)
              {
                v116 = v119;
                goto LABEL_174;
              }
            }
          }
        }
        else
        {
          v116 = (WTF::StringImpl *)((char *)v291 + 40 * v117);
LABEL_155:
          v119 = (WTF::StringImpl *)((char *)v291 + 40 * v117);
          v120 = v263;
        }
        if (v291)
        {
LABEL_174:
          v121 = (WTF::StringImpl *)((char *)v291 + 40 * *((unsigned int *)v291 - 1));
          if (v121 == v116)
            goto LABEL_158;
        }
        else
        {
          v121 = 0;
          if (!v116)
          {
LABEL_158:
            if (v301)
            {
              v244 = v300;
              v245 = 8 * v301;
              do
              {
                if (*(_DWORD *)(v120 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                  WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v120 + 32));
                WTF::AtomString::convertToASCIILowercase(v244);
                WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::add((uint64_t *)(v120 + 104), (WTF::StringImpl *)&v302, (uint64_t)&v268);
                v247 = v302;
                v302 = 0;
                if (v247)
                {
                  if (*(_DWORD *)v247 == 2)
                    WTF::StringImpl::destroy(v247, v246);
                  else
                    *(_DWORD *)v247 -= 2;
                }
                WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)(v120 + 88), v244, (uint64_t)&v268);
                WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)(v120 + 96), v244, (uint64_t)&v268);
                v244 = (WTF::AtomString *)((char *)v244 + 8);
                v245 -= 8;
              }
              while (v245);
            }
            v122 = v267;
            if (!v265)
              v122 = 0;
            if ((v122 & 1) != 0
              && WebCore::Style::MatchedDeclarationsCache::isCacheable((uint64_t)v261, (uint64_t)v266, (uint64_t)v118, v262[6]))
            {
              WebCore::Style::MatchedDeclarationsCache::add(v259, v266, v118, (_QWORD *)v262[5], v265, v260);
            }
            goto LABEL_162;
          }
        }
        do
        {
          if (v296)
          {
            v128 = 0;
            for (j = *(_DWORD *)(*(_QWORD *)v116 + 16) >> 8; ; j = v128 + v130)
            {
              v130 = j & *(_DWORD *)(v296 - 8);
              v131 = *(_QWORD *)(v296 + 8 * v130);
              if (!v131)
                break;
              if (v131 != -1 && v131 == *(_QWORD *)v116)
                goto LABEL_184;
              ++v128;
            }
          }
          WebCore::Style::Builder::applyCustomPropertyImpl((uint64_t)&v273, v116, (uint64_t)v116 + 8);
LABEL_184:
          v133 = (WTF::StringImpl *)((char *)v116 + 40);
          v116 = v119;
          if (v133 != v119)
          {
            v116 = v133;
            while ((unint64_t)(*(_QWORD *)v116 + 1) <= 1)
            {
              v116 = (WTF::StringImpl *)((char *)v116 + 40);
              if (v116 == v119)
              {
                v116 = v119;
                break;
              }
            }
          }
        }
        while (v116 != v121);
        goto LABEL_158;
      }
      v4 = (uint64_t)&v273;
      v112 = 2 * v290;
      v113 = 15220;
      v7 = 1;
      while (1)
      {
        v9 = *(unsigned __int16 *)((char *)&v273 + v113);
        if (v9 >= 0x1CB)
          break;
        v8 = (const char **)&v275[2 * v9];
        v6 = (unint64_t)v297;
        v297 = v8;
        v114 = (unint64_t)v8[1];
        if (v114)
        {
          v115 = v298;
          v298 = 0;
          WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v114, 0);
          v298 = v115;
        }
        v10 = *(unsigned __int8 *)(v293 + 45);
        if ((v10 & 0xC) != 0)
        {
          v206 = &v275[2 * v9];
          v207 = *((_QWORD *)v206 + 2);
          if (v207)
          {
            v298 = 1;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v207, 1u);
          }
          v208 = *((_QWORD *)v206 + 3);
          if (v208)
          {
            v298 = 2;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v208, 2u);
          }
          v298 = 0;
        }
        v297 = (_WORD *)v6;
        v113 += 2;
        v112 -= 2;
        if (!v112)
          goto LABEL_153;
      }
    }
    else
    {
      v97 = v289[0].i64[0] & 0xFFFFFF8000000000;
      if ((v289[0].i64[0] & 0xFFFFFF8000000000) != 0)
      {
        v98 = v297;
        do
        {
          v6 = __clz(__rbit64(v97));
          v8 = (const char **)&v275[2 * v6];
          v297 = v8;
          v99 = (unint64_t)v8[1];
          if (v99)
          {
            v100 = v298;
            v298 = 0;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v99, 0);
            v298 = v100;
          }
          if ((*(_BYTE *)(v293 + 45) & 0xC) != 0)
          {
            v6 = (unint64_t)&v275[2 * v6];
            v101 = *(_QWORD *)(v6 + 16);
            if (v101)
            {
              v298 = 1;
              WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v101, 1u);
            }
            v102 = *(_QWORD *)(v6 + 24);
            if (v102)
            {
              v298 = 2;
              WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v102, 2u);
            }
            v298 = 0;
          }
          v297 = v98;
          v97 &= v97 - 1;
        }
        while (v97);
      }
      v4 = 0;
      while (1)
      {
        v9 = v4 + 1;
        v7 = v289[0].u64[v4 + 1];
        if (v7)
          break;
LABEL_126:
        v65 = v4++ == 4;
        if (v65)
          goto LABEL_146;
      }
      while (1)
      {
        v10 = __clz(__rbit64(v7)) | (v9 << 6);
        v16 = (unsigned __int16)v10;
        if ((unsigned __int16)v10 >= 0x1CBu)
          break;
        v103 = (unsigned __int16)v10;
        v8 = (const char **)&v275[2 * (unsigned __int16)v10];
        v6 = (unint64_t)v297;
        v297 = v8;
        v104 = (unint64_t)v8[1];
        if (v104)
        {
          v105 = v298;
          v298 = 0;
          WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v104, 0);
          v298 = v105;
        }
        if ((*(_BYTE *)(v293 + 45) & 0xC) != 0)
        {
          v106 = &v275[2 * v103];
          v107 = *((_QWORD *)v106 + 2);
          if (v107)
          {
            v298 = 1;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v107, 1u);
          }
          v108 = *((_QWORD *)v106 + 3);
          if (v108)
          {
            v298 = 2;
            WebCore::Style::Builder::applyProperty((unint64_t)&v273, (WTF::StringImpl *)*(unsigned __int16 *)v8, v108, 2u);
          }
          v298 = 0;
          v297 = (_WORD *)v6;
          v7 &= v7 - 1;
          if (!v7)
            goto LABEL_126;
        }
        else
        {
          v297 = (_WORD *)v6;
          v7 &= v7 - 1;
          if (!v7)
            goto LABEL_126;
        }
      }
    }
    __break(1u);
LABEL_165:
    v124 = 2 * v16;
    v125 = v15;
    do
    {
      v126 = *v125++;
      LODWORD(v14) = (((_DWORD)v14 + v126) ^ (((_DWORD)v14 + v126) << 16))
                   + ((((_DWORD)v14 + v126) ^ (((_DWORD)v14 + v126) << 16)) >> 11);
      v124 -= 2;
    }
    while (v124);
  }
  if ((_DWORD)v16)
  {
    v59 = 2 * v16 - 2;
    v60 = v15;
    v61 = (unsigned __int16 *)*((_QWORD *)v56 + 8);
    while (1)
    {
      v62 = v59;
      v63 = *v60;
      if (v63 == 1)
        goto LABEL_296;
      v64 = *v61;
      v65 = v64 != 1 && v63 == v64;
      if (!v65)
        goto LABEL_296;
      ++v60;
      ++v61;
      v59 = v62 - 2;
      if (!v62)
        goto LABEL_41;
    }
  }
  v61 = (unsigned __int16 *)*((_QWORD *)v56 + 8);
  v60 = v15;
LABEL_41:
  v66 = 3;
  v267 = 1;
  if (v60 != &v15[v16] || v61 != (unsigned __int16 *)(*((_QWORD *)v56 + 8) + 2 * v16))
  {
LABEL_452:
    v58 = 0;
    goto LABEL_67;
  }
  if ((_DWORD)v35 != v56[15])
    goto LABEL_296;
  v67 = *((_QWORD *)v56 + 6);
  if ((_DWORD)v35)
  {
    for (k = 0; ; k += 16)
    {
      v69 = *(unsigned __int8 *)(v34 + k + 15);
      v70 = *(unsigned __int8 *)(v67 + k + 15);
      if (v69 != 1 || v70 != 1)
      {
        if (*(_QWORD *)(v34 + k) != *(_QWORD *)(v67 + k)
          || *(unsigned __int8 *)(v34 + k + 8) != *(unsigned __int8 *)(v67 + k + 8)
          || *(unsigned __int8 *)(v34 + k + 9) != *(unsigned __int8 *)(v67 + k + 9)
          || *(unsigned __int8 *)(v34 + k + 10) != *(unsigned __int8 *)(v67 + k + 10)
          || (*(_BYTE *)(v34 + k + 11) == 0) == (*(_BYTE *)(v67 + k + 11) != 0)
          || *(unsigned __int16 *)(v34 + k + 12) != *(unsigned __int16 *)(v67 + k + 12))
        {
          goto LABEL_296;
        }
        v66 = 3;
        v267 = 1;
        if ((*(_BYTE *)(v34 + k + 14) == 0) == (*(_BYTE *)(v67 + k + 14) != 0) || v69 != v70)
          goto LABEL_452;
      }
      v72 = k + 16;
      if (16 * v35 - 16 == k)
        break;
    }
    v73 = v34 + v72;
    v74 = v67 + v72;
  }
  else
  {
    v74 = *((_QWORD *)v56 + 6);
    v73 = *(_QWORD *)(v4 + 40);
  }
  v66 = 3;
  v267 = 1;
  if (v73 != v34 + 16 * v35 || v74 != v67 + 16 * v35)
    goto LABEL_452;
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v56 + 12) + 24) + 216) != v10)
    goto LABEL_296;
  v134 = *(WebCore::Document **)(*(_QWORD *)(v9 + 40) + 8);
  if (*((_QWORD *)v134 + 159) == v9
    || (v135 = *((_QWORD *)v266 + 1), v136 = *(_QWORD *)(v135 + 40), *(_QWORD *)(v136 + 592))
    || (*(_BYTE *)(*(_QWORD *)(v135 + 32) + 148) & 1) != 0
    || (v137 = *(_QWORD *)(v6 + 48), v138 = *((_QWORD *)v266 + 2), (v138 & 0xF80000000000) != 0)
    && (*(_BYTE *)(*((_QWORD *)v8[1] + 4) + 148) & 1) != 0
    || *(float *)(v136 + 588) != 1.0
    || (*((_BYTE *)v266 + 45) & 0xE0) != 0)
  {
    v267 = 0;
    v66 = 3;
    goto LABEL_67;
  }
  v267 = 0;
  v66 = 3;
  if ((v138 & 0x40000000) != 0 || (*((_DWORD *)v266 + 10) & 0x4000000) != 0)
    goto LABEL_67;
  if (!v137)
    goto LABEL_209;
  ++*(_DWORD *)(v137 + 8);
  if ((*(_QWORD *)(v9 + 16) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_209;
  if (!*(_QWORD *)((*(_QWORD *)(v9 + 16) & 0xFFFFFFFFFFFFLL) + 8))
    goto LABEL_209;
  v273 = (const char *)(*(_QWORD *)(v9 + 16) & 0xFFFFFFFFFFFFLL);
  if (!*(_QWORD *)v137)
    goto LABEL_209;
  if (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WebCore::WeakPtrImplWithEventTargetData const*>((uint64_t *)v137, &v273))
  {
    v267 = 0;
    v66 = 3;
    v9 = (unint64_t)v261;
    v6 = (unint64_t)v262;
    v4 = (uint64_t)v260;
    v7 = v263;
    goto LABEL_67;
  }
  v9 = (unint64_t)v261;
  v6 = (unint64_t)v262;
  v134 = *(WebCore::Document **)(v261[5] + 8);
LABEL_209:
  v139 = (WebCore::Document *)*((_QWORD *)v134 + 331);
  if (!v139)
  {
    v134 = (WebCore::Document *)WebCore::Document::ensureFontSelector(v134);
    v139 = v134;
  }
  v140 = *((_QWORD *)v266 + 4);
  v141 = *(_QWORD *)(v140 + 248);
  if (!v141)
    goto LABEL_299;
  v142 = *(unsigned __int16 *)(v141 + 148);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v144 = *(_QWORD *)(StatusReg + 736);
  if (v144)
  {
    v145 = *(_QWORD *)(v144 + 96);
    if (v145)
      goto LABEL_214;
LABEL_430:
    v145 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v145 + 8) = 1;
    v248 = (unsigned int *)(v145 + 8);
    *(_QWORD *)v145 = off_1E31F4A70;
    v249 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v249 = 0;
    *(_QWORD *)(v145 + 16) = v249;
    *(_QWORD *)v145 = off_1E3407108;
    *(_BYTE *)(v145 + 24) = 0;
    *(_QWORD *)(v145 + 32) = 0;
    *(_QWORD *)(v145 + 40) = 0;
    v250 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v250 + 28) = 0;
    *(_QWORD *)(v250 + 32) = 0;
    *(_QWORD *)(v250 + 8) = 0;
    *(_QWORD *)(v250 + 16) = 0;
    *(_QWORD *)v250 = 0;
    *(_WORD *)(v250 + 24) = 0;
    if (WTF::isUIThread((WTF *)v250))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v250, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v145 + 48) = v250;
    *(_OWORD *)(v145 + 56) = 0u;
    *(_OWORD *)(v145 + 72) = 0u;
    *(_BYTE *)(v145 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v145;
      do
        v251 = __ldaxr(v248);
      while (__stlxr(v251 + 1, v248));
    }
    v252 = *(unsigned int **)(v144 + 96);
    *(_QWORD *)(v144 + 96) = v145;
    if (v252)
    {
      v253 = v252 + 2;
      v9 = (unint64_t)v261;
      v6 = (unint64_t)v262;
      do
      {
        v254 = __ldaxr(v253);
        v255 = v254 - 1;
      }
      while (__stlxr(v255, v253));
      if (!v255)
      {
        atomic_store(1u, v252 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v252 + 8))(v252);
      }
    }
    else
    {
      v9 = (unint64_t)v261;
      v6 = (unint64_t)v262;
    }
  }
  else
  {
    v144 = WTF::Thread::initializeCurrentTLS(v134);
    v145 = *(_QWORD *)(v144 + 96);
    if (!v145)
      goto LABEL_430;
  }
LABEL_214:
  v146 = *(_QWORD *)(v145 + 80);
  if (!v146)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v145);
    v146 = *(_QWORD *)(v145 + 80);
  }
  if (v142 != *(unsigned __int16 *)(v146 + 120))
    goto LABEL_299;
  v147 = *(_DWORD *)(*(_QWORD *)(v140 + 248) + 144);
  v148 = (WTF::Thread *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v139 + 80))(v139);
  if (v147 != (_DWORD)v148)
    goto LABEL_299;
  v149 = v264[4];
  v150 = *((_QWORD *)v149 + 31);
  if (!v150)
    goto LABEL_299;
  v151 = *(unsigned __int16 *)(v150 + 148);
  v152 = *(_QWORD *)(StatusReg + 736);
  if (!v152)
    v152 = WTF::Thread::initializeCurrentTLS(v148);
  v153 = *(_QWORD *)(v152 + 96);
  v154 = v264;
  if (!v153)
  {
    v153 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v153 + 8) = 1;
    v198 = (unsigned int *)(v153 + 8);
    *(_QWORD *)v153 = off_1E31F4A70;
    v199 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v199 = 0;
    *(_QWORD *)(v153 + 16) = v199;
    *(_QWORD *)v153 = off_1E3407108;
    *(_BYTE *)(v153 + 24) = 0;
    *(_QWORD *)(v153 + 32) = 0;
    *(_QWORD *)(v153 + 40) = 0;
    v200 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v200 + 28) = 0;
    *(_QWORD *)(v200 + 32) = 0;
    *(_QWORD *)(v200 + 8) = 0;
    *(_QWORD *)(v200 + 16) = 0;
    *(_QWORD *)v200 = 0;
    *(_WORD *)(v200 + 24) = 0;
    if (WTF::isUIThread((WTF *)v200))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v200, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v153 + 48) = v200;
    *(_OWORD *)(v153 + 56) = 0u;
    *(_OWORD *)(v153 + 72) = 0u;
    *(_BYTE *)(v153 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v153;
      do
        v201 = __ldaxr(v198);
      while (__stlxr(v201 + 1, v198));
    }
    v202 = *(unsigned int **)(v152 + 96);
    *(_QWORD *)(v152 + 96) = v153;
    if (v202)
    {
      v203 = v202 + 2;
      v154 = v264;
      do
      {
        v204 = __ldaxr(v203);
        v205 = v204 - 1;
      }
      while (__stlxr(v205, v203));
      if (!v205)
      {
        atomic_store(1u, v202 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v202 + 8))(v202);
      }
    }
    else
    {
      v154 = v264;
    }
  }
  v155 = *(_QWORD *)(v153 + 80);
  if (!v155)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v153);
    v155 = *(_QWORD *)(v153 + 80);
  }
  if (v151 != *(unsigned __int16 *)(v155 + 120))
  {
    v267 = 0;
    v66 = 3;
    v9 = (unint64_t)v261;
    v6 = (unint64_t)v262;
    goto LABEL_300;
  }
  v156 = *(_DWORD *)(*((_QWORD *)v149 + 31) + 144);
  v9 = (unint64_t)v261;
  v6 = (unint64_t)v262;
  if (v156 != (*(unsigned int (**)(WebCore::Document *))(*(_QWORD *)v139 + 80))(v139))
  {
LABEL_299:
    v267 = 0;
    v66 = 3;
LABEL_300:
    v58 = v56 + 2;
    v4 = (uint64_t)v260;
    v7 = v263;
    goto LABEL_67;
  }
  WebCore::RenderStyle::copyNonInheritedFrom(v266, *((const WebCore::RenderStyle **)v56 + 11), v157);
  v159 = *((_QWORD *)v56 + 12);
  v160 = *(_QWORD *)(*((_QWORD *)v56 + 11) + 16);
  if (((*(_DWORD *)(v159 + 40) ^ *((_DWORD *)v154 + 10)) & 0x7FFFFFFF) != 0
    || ((*(_DWORD *)(v159 + 44) ^ *((_DWORD *)v154 + 11)) & 0x3FFFFF) != 0
    || (v161 = (uint64_t)v154[4], v162 = *(_QWORD *)(v159 + 32), v161 != v162)
    && (!WebCore::StyleInheritedData::fastPathInheritedEqual((uint64_t)v154[4], *(_QWORD *)(v159 + 32))
     || !WebCore::StyleInheritedData::nonFastPathInheritedEqual(v161, v162))
    || (v163 = (WebCore::SVGRenderStyle *)v154[7], v164 = *(const WebCore::SVGRenderStyle **)(v159 + 56), v163 != v164)
    && (WebCore::SVGRenderStyle::inheritedEqual(v163, v164, v158), !v242)
    || (v165 = (uint64_t)v154[3], v166 = *(_QWORD *)(v159 + 24), v165 != v166)
    && !WebCore::StyleRareInheritedData::operator==(v165, v166))
  {
    v7 = v263;
    if ((*((_BYTE *)v266 + 20) & 0x20) == 0 || (v160 & 0x1000000000) == 0)
    {
      v243 = 2;
      v58 = v56 + 2;
      if ((v160 & 0x1000000000) == 0)
        goto LABEL_382;
LABEL_428:
      v243 |= 4u;
LABEL_382:
      v267 = 0;
      v4 = (uint64_t)v260;
      if (*((_DWORD *)v260 + 17))
        v66 = v243 | 0x40;
      else
        v66 = v243;
      goto LABEL_67;
    }
    v257 = (uint64_t *)WebCore::RenderStyle::color((WebCore::RenderStyle *)v154);
    v258 = (uint64_t *)WebCore::RenderStyle::color(*((WebCore::RenderStyle **)v56 + 12));
    if (WebCore::operator==(v257, v258))
      v243 = 2;
    else
      v243 = 3;
LABEL_427:
    v58 = v56 + 2;
    goto LABEL_428;
  }
  v167 = *(_DWORD *)(v262[1] + 44);
  WebCore::RenderStyle::inheritFrom(v266, *((const WebCore::RenderStyle **)v56 + 11), v158);
  *((_DWORD *)v266 + 11) = *((_DWORD *)v266 + 11) & 0xFFFFF3FF | (((v167 >> 10) & 3) << 10);
  v7 = v263;
  if ((v160 & 0x1000000000) != 0)
  {
    v243 = 0;
    goto LABEL_427;
  }
  v58 = v56 + 2;
  if (*((_DWORD *)v260 + 17))
  {
    v243 = 0;
    goto LABEL_382;
  }
  v168 = (_QWORD *)*((_QWORD *)v56 + 13);
  if (v168)
  {
    v169 = *(_QWORD *)(v261[12] + 24);
    if (v169 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
      || v169 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
      || v169 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)
      || v169 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)
      || v169 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
      || v169 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
    {
      goto LABEL_256;
    }
    v170 = *(_QWORD *)v261[5];
    if (v170 && (*(_WORD *)(v170 + 28) & 0x80) != 0 && !*(_BYTE *)(v170 + 193))
    {
      v171 = v261[13];
      if (v171
        && ((v172 = *(_DWORD *)(v171 + 4), (v172 & 1) != 0)
          ? (v173 = *(_QWORD *)(v171 + 40), LODWORD(v174) = *(_DWORD *)(v171 + 52))
          : (v173 = v171 + 32, LODWORD(v174) = v172 >> 5),
            (_DWORD)v174))
      {
        v174 = v174;
        v175 = (_QWORD *)(v173 + 8);
        while (1)
        {
          v176 = *(v175 - 1);
          if (v176 == WebCore::HTMLNames::useragentpartAttr
            || *(_QWORD *)(v176 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
            && *(_QWORD *)(v176 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
          {
            break;
          }
          v175 += 2;
          if (!--v174)
          {
            v175 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v175 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      {
        v273 = "-webkit-list-button";
        v274 = 20;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitListButton(void)::webkitListButton, (uint64_t)&v273);
      }
      v6 = (unint64_t)v262;
      if (*v175 == WebCore::UserAgentParts::webkitListButton(void)::webkitListButton)
      {
        v168 = (_QWORD *)*((_QWORD *)v56 + 13);
LABEL_256:
        v178 = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)v178 = 0;
        v179 = (_DWORD *)v168[1];
        ++*v179;
        *(_QWORD *)(v178 + 8) = v179;
        *(_QWORD *)(v178 + 16) = v168[2];
        v180 = (_DWORD *)v168[3];
        ++*v180;
        *(_QWORD *)(v178 + 24) = v180;
        v181 = (_DWORD *)v168[4];
        ++*v181;
        *(_QWORD *)(v178 + 32) = v181;
        *(_QWORD *)(v178 + 40) = v168[5];
        *(_QWORD *)(v178 + 48) = 0;
        v182 = (_DWORD *)v168[7];
        ++*v182;
        *(_QWORD *)(v178 + 56) = v182;
        v183 = *(WebCore::RenderStyle **)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v178;
        if (v183)
        {
          WebCore::RenderStyle::~RenderStyle(v183, v177);
          if (*(_DWORD *)v184)
          {
            result = 0.0;
            *((_OWORD *)v184 + 2) = 0u;
            *((_OWORD *)v184 + 3) = 0u;
            *(_OWORD *)v184 = 0u;
            *((_OWORD *)v184 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v184, v185);
          }
        }
      }
    }
  }
  return result;
}

void WebCore::Style::Builder::~Builder(WebCore::Style::Builder *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WebCore::Style::PropertyCascade **v33;
  WebCore::Style::PropertyCascade *v34;
  WTF *v35;
  void *v36;
  char v37;
  char *v38;
  char v39;

  v3 = *((unsigned int *)this + 3949);
  if ((_DWORD)v3)
  {
    v29 = (WTF::StringImpl **)*((_QWORD *)this + 1973);
    v30 = 8 * v3;
    do
    {
      v31 = *v29;
      *v29 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, a2);
        else
          *(_DWORD *)v31 -= 2;
      }
      ++v29;
      v30 -= 8;
    }
    while (v30);
  }
  v4 = (WTF *)*((_QWORD *)this + 1973);
  if (v4)
  {
    *((_QWORD *)this + 1973) = 0;
    *((_DWORD *)this + 3948) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1952);
  if (v5)
  {
    v17 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WTF::StringImpl **)*((_QWORD *)this + 1952);
      do
      {
        v19 = *v18;
        if (*v18 != (WTF::StringImpl *)-1)
        {
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, a2);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        ++v18;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 1951);
  if (v6)
  {
    v20 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v20)
    {
      v21 = (WTF::StringImpl **)*((_QWORD *)this + 1951);
      do
      {
        v22 = *v21;
        if (*v21 != (WTF::StringImpl *)-1)
        {
          *v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, a2);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
        ++v21;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *((_QWORD *)this + 1950);
  if (v7)
  {
    v23 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v23)
    {
      v24 = (WTF::StringImpl **)*((_QWORD *)this + 1950);
      do
      {
        v25 = *v24;
        if (*v24 != (WTF::StringImpl *)-1)
        {
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, a2);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        ++v24;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v8 = *((_QWORD *)this + 1945);
  *((_QWORD *)this + 1945) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 1939);
  *((_QWORD *)this + 1939) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 1936);
  *((_QWORD *)this + 1936) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *((_QWORD *)this + 1932);
  if (v11)
    goto LABEL_85;
  while (1)
  {
    v12 = *((_QWORD *)this + 1931);
    if (v12)
    {
      v26 = *(unsigned int *)(v12 - 4);
      if ((_DWORD)v26)
      {
        v27 = (WTF::StringImpl **)*((_QWORD *)this + 1931);
        do
        {
          v28 = *v27;
          if (*v27 != (WTF::StringImpl *)-1)
          {
            if (v28)
            {
              *v27 = 0;
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, a2);
              else
                *(_DWORD *)v28 -= 2;
            }
            else
            {
              *v27 = 0;
            }
          }
          v27 += 5;
          --v26;
        }
        while (v26);
      }
      WTF::fastFree((WTF *)(v12 - 16), a2);
    }
    if (!*((_BYTE *)this + 40))
      break;
    v13 = *((_QWORD *)this + 3);
    if (!v13)
      break;
    v14 = *(unsigned int *)(v13 - 4);
    if (!(_DWORD)v14)
    {
LABEL_29:
      WTF::fastFree((WTF *)(v13 - 16), a2);
      return;
    }
    v11 = *((_QWORD *)this + 3);
    while (1)
    {
      v15 = *(unsigned int *)(v11 + 8);
      if ((_DWORD)v15 == -1)
        break;
      v38 = &v37;
      if ((((uint64_t (*)(char **, uint64_t))off_1E344FF58[v15])(&v38, v11) & 1) == 0)
      {
        v16 = *(unsigned int *)(v11 + 8);
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, uint64_t))off_1E344FF78[v16])(&v39, v11);
        *(_DWORD *)(v11 + 8) = -1;
      }
      v11 += 16;
      if (!--v14)
        goto LABEL_29;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
    v32 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v32)
    {
      v33 = (WebCore::Style::PropertyCascade **)(v11 + 16);
      do
      {
        if (*((_DWORD *)v33 - 4) != -1)
        {
          v34 = *v33;
          *v33 = 0;
          if (v34)
          {
            WebCore::Style::PropertyCascade::~PropertyCascade(v34, a2);
            WTF::fastFree(v35, v36);
          }
        }
        v33 += 3;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
}

uint64_t WebCore::Style::PropertyCascade::addMatch(uint64_t a1, uint64_t *a2, unsigned __int8 a3, int a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (**v17)();
  uint64_t *v18;
  __n128 v19;
  uint64_t v20;
  __int8 *v21;
  unint64_t v22;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  uint64_t (**v31)();
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)();
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int j;
  int v43;
  unsigned __int16 *v44;
  uint64_t v45;
  _BOOL4 v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  BOOL v53;
  uint64_t (**v54)();
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 v58;
  int v59;
  uint64_t v60;
  uint64_t (**v61)();
  __n128 *v62;
  uint64_t v63;
  __n128 *v64;
  _DWORD *v65;
  unsigned int v66;
  int k;
  unsigned int v68;
  __n128 *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 *v73;
  BOOL v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t (**v85)();
  uint64_t v86;
  _OWORD *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int i;
  unsigned int v93;
  uint64_t v94;
  uint64_t (**v96)();
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  BOOL v104;
  uint64_t (**v105)();
  int v106;
  _BOOL4 v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  WTF::StringImpl *v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned __int16 *v132;
  uint64_t v133;
  _BOOL4 v135;
  BOOL v138;
  int v139;
  unsigned __int16 *v140;
  int v141;
  unsigned __int16 *v142;
  int v143;
  int v144;
  uint64_t *v145;
  uint64_t (**v146)();
  int v147;
  int v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t (**v154)();
  unsigned int v155;
  unsigned __int16 *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  __int8 *v160;
  _QWORD v161[3];
  unsigned __int8 v162;
  __n128 v163;
  __n128 v164;
  char v165;
  _QWORD v166[2];

  LODWORD(v6) = a4;
  v162 = a3;
  v161[0] = a1;
  v161[1] = a2;
  v161[2] = &v162;
  if (*(_BYTE *)(a1 + 14)
    && !WebCore::Style::PropertyCascade::addMatch(WebCore::Style::MatchedProperties const&,WebCore::Style::CascadeLevel,BOOL)::$_0::operator()((uint64_t)v161)
    || *((_BYTE *)a2 + 14) && (*(_BYTE *)(a1 + 8) & 0x20) == 0)
  {
    LOBYTE(v10) = 0;
    return v10 & 1;
  }
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16 *)(a1 + 15440);
  v12 = *((unsigned __int8 *)a2 + 9);
  v13 = *a2;
  v14 = *a2 + 8;
  v15 = a1 + 14784;
  v16 = (_QWORD *)(a1 + 14736);
  v17 = (uint64_t (**)())(a1 + 48);
  v18 = (uint64_t *)(a1 + 15448);
  v19 = 0uLL;
  v20 = 40;
  v21 = &v163.n128_i8[8];
  v22 = *(unsigned int *)(*a2 + 4);
  if ((v22 & 8) == 0)
    goto LABEL_11;
  do
  {
    while (1)
    {
      if (*(_DWORD *)(v13 + 28) <= v9)
        return v10 & 1;
      v24 = *(_QWORD *)(v13 + 16) + 16 * v9;
      v26 = *(_QWORD *)(v24 + 8);
LABEL_13:
      v27 = *(_WORD *)v24;
      if ((*(_WORD *)v24 & 0x2000) != 0)
      {
        v10 = 1;
        if (!(_DWORD)v6)
          goto LABEL_81;
      }
      else if ((v6 & 1) != 0)
      {
        goto LABEL_81;
      }
      v28 = v27 & 0x3FF;
      if ((_DWORD)v12 == 1)
      {
        switch(v27 & 0x3FF)
        {
          case 1:
          case 5:
          case 6:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x24:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x37:
          case 0x65:
          case 0x8D:
          case 0x99:
          case 0x9A:
          case 0xBF:
          case 0xF7:
          case 0x100:
          case 0x103:
          case 0x104:
          case 0x105:
          case 0x10A:
          case 0x10B:
          case 0x10E:
          case 0x10F:
          case 0x117:
          case 0x118:
          case 0x119:
          case 0x11A:
          case 0x11B:
          case 0x11D:
          case 0x126:
          case 0x129:
          case 0x15E:
          case 0x1C0:
          case 0x1EC:
          case 0x1ED:
          case 0x1F8:
          case 0x217:
          case 0x21C:
            goto LABEL_20;
          default:
            goto LABEL_81;
        }
      }
      if ((_DWORD)v12 != 2)
        break;
      if ((v27 & 0x3FFu) <= 0x15F)
      {
        switch(v27 & 0x3FF)
        {
          case 1:
          case 5:
          case 8:
          case 0xD:
          case 0x10:
          case 0x15:
          case 0x1C:
          case 0x3B:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x9A:
          case 0xB7:
          case 0xBA:
          case 0xBB:
          case 0xBC:
          case 0xBD:
          case 0xC5:
          case 0xEB:
          case 0xEE:
          case 0xEF:
          case 0xF2:
          case 0xFF:
          case 0x10A:
          case 0x10E:
          case 0x10F:
          case 0x125:
          case 0x126:
            goto LABEL_20;
          default:
            goto LABEL_81;
        }
      }
      if ((v28 - 483) <= 0x39 && ((1 << (v27 + 29)) & 0x200000040000201) != 0
        || (v28 - 352) < 2
        || (v28 - 461) < 2)
      {
        break;
      }
LABEL_81:
      v9 = (v9 + 1);
      v22 = *(unsigned int *)(v13 + 4);
      if ((v22 & 8) == 0)
        goto LABEL_11;
    }
LABEL_20:
    v29 = *(unsigned __int8 *)(a1 + 8);
    if ((~v29 & 3) == 0 || (v29 & 0x40) != 0 && *((_BYTE *)a2 + 15) == 1)
      goto LABEL_21;
    if ((_DWORD)v28 == 1)
    {
      if (((*(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16)) & 0x3F800) != 0xE800)
      {
        __break(0xC471u);
        goto LABEL_192;
      }
      v89 = *(_QWORD *)(a1 + 15448);
      if (v89)
      {
        v90 = 0;
        v91 = *(_QWORD *)(v26 + 8);
        for (i = *(_DWORD *)(v91 + 16) >> 8; ; i = v90 + v93)
        {
          v93 = i & *(_DWORD *)(v89 - 8);
          v94 = *(_QWORD *)(v89 + 40 * v93);
          if (!v94)
            break;
          if (v94 != -1 && v94 == v91)
            goto LABEL_21;
          ++v90;
        }
      }
      goto LABEL_32;
    }
    if (v28 > 0x15E)
    {
      if ((unint64_t)(v28 - 351) >= 0x6C)
        goto LABEL_192;
      if (*(_DWORD *)(v15 + 4 * (v28 - 351)))
        goto LABEL_71;
LABEL_32:
      if ((v29 & 0x18) == 0)
      {
        if ((*(_WORD *)v24 & 0x8000) == 0 || (v29 & 2) == 0)
        {
          if ((v29 & 4) == 0
            || ((*(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16)) & 0x3F800) != 0
            || ((*(_WORD *)(v26 + 4) & 0x7F) == 0x50 ? (v74 = *(unsigned __int16 *)(v26 + 8) == 1) : (v74 = 0), !v74))
          {
            if (v27 < 0 || (v29 & 1) == 0)
            {
              if (v28 < 0x15F || !*(_DWORD *)(a1 + 15216))
                goto LABEL_81;
LABEL_71:
              if (v28 < 0x1CB)
              {
                v54 = &v17[4 * v28];
                v55 = v28 - 351;
                if (!*(_DWORD *)(v15 + 4 * v55))
                {
                  v54[1] = 0;
                  v54[2] = 0;
                  v54[3] = 0;
                  v56 = *v11;
                  if (v56 >= v28)
                    LOWORD(v56) = v28;
                  *v11 = v56;
                  v57 = v11[1];
                  if (v57 <= v28)
                    LOWORD(v57) = v28;
                  v11[1] = v57;
                }
                v58 = v162;
                v59 = *(_DWORD *)(a1 + 15216) + 1;
                *(_DWORD *)(a1 + 15216) = v59;
                *(_DWORD *)(v15 + 4 * v55) = v59;
                *(_WORD *)v54 = v28;
                *((_BYTE *)v54 + 2) = v58;
                *((_BYTE *)v54 + 3) = *((_BYTE *)a2 + 10);
                *((_WORD *)v54 + 2) = *((_WORD *)a2 + 6);
                *((_BYTE *)v54 + 6) = *((_BYTE *)a2 + 11);
                v60 = *((unsigned __int8 *)a2 + 8);
                if ((_DWORD)v60 == 3)
                {
                  v61 = &v17[4 * v28];
                  a5 = (__n128)vdupq_n_s64(v26);
                  *(__n128 *)(v61 + 1) = a5;
                  v62 = (__n128 *)(v61 + 3);
                  goto LABEL_80;
                }
                if (v60 < 3)
                {
                  v62 = (__n128 *)(&v17[4 * v28 + 1] + v60);
                  v20 = 40;
                  goto LABEL_190;
                }
              }
              goto LABEL_192;
            }
          }
        }
        goto LABEL_21;
      }
      v147 = (*(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16)) & 0x3F800;
      v154 = v17;
      v159 = v16;
      v160 = v21;
      v157 = v14;
      v158 = v15;
      v152 = v6;
      v153 = v12;
      v156 = v11;
      v155 = v10;
      if (v147 != 59392)
      {
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_192;
        v36 = *(uint64_t **)(a1 + 16);
        v163.n128_u16[0] = v28;
        v163.n128_u32[2] = 0;
        v37 = *v36;
        v38 = 0;
        if (v37)
        {
          v39 = 0;
          v40 = *(unsigned int *)(v37 - 8);
          v41 = 9 * ((~((_DWORD)v28 << 15) + v28) ^ ((~((_DWORD)v28 << 15) + v28) >> 10));
          for (j = ((v41 ^ (v41 >> 6)) + ~((v41 ^ (v41 >> 6)) << 11)) ^ (((v41 ^ (v41 >> 6))
                                                                         + ~((v41 ^ (v41 >> 6)) << 11)) >> 16);
                ;
                j = v39 + v43)
          {
            v43 = j & v40;
            v44 = (unsigned __int16 *)(v37 + 16 * (j & v40));
            v45 = *((unsigned int *)v44 + 2);
            v47 = v38 == v45 && v38 != 0xFFFFFFFF;
            if ((_DWORD)v45 == -1 || !v47)
            {
              if (v45 == 0xFFFFFFFFLL)
                LOBYTE(v47) = v38 == 0xFFFFFFFF;
              if (v47)
                goto LABEL_145;
            }
            else
            {
              v148 = v43;
              v150 = (uint64_t *)v26;
              v151 = v13;
              v49 = v40;
              v50 = v37;
              v51 = v18;
              v166[0] = &v165;
              if (((unsigned int (*)(_QWORD *, unsigned __int16 *, __n128 *, __n128, __n128, __n128))off_1E344FF68[v38])(v166, v44, &v163, a5, a6, v19))
              {
                v38 = v163.n128_u32[2];
                v18 = v51;
                v19 = 0uLL;
                v11 = v156;
                v14 = v157;
                v12 = v153;
                v17 = v154;
                v15 = v158;
                v16 = v159;
                v20 = 40;
                v26 = (unint64_t)v150;
                v13 = v151;
LABEL_145:
                if (v38 != 0xFFFFFFFF)
                {
                  v112 = v18;
                  ((void (*)(_QWORD *, __n128 *, __n128, __n128, __n128))off_1E344FF78[v38])(v166, &v163, a5, a6, v19);
                  v20 = 40;
                  v15 = v158;
                  v16 = v159;
                  v17 = v154;
                  v11 = v156;
                  v14 = v157;
                  v12 = v153;
                  v19 = 0uLL;
                  v18 = v112;
                }
                v6 = v152;
                v21 = v160;
LABEL_148:
                v10 = v155;
                if ((*(_BYTE *)(a1 + 8) & 8) == 0 || (*(_WORD *)v24 & 0x2000) == 0)
                  goto LABEL_81;
                goto LABEL_150;
              }
              v45 = *((unsigned int *)v44 + 2);
              v38 = v163.n128_u32[2];
              v18 = v51;
              v19 = 0uLL;
              v11 = v156;
              v14 = v157;
              v12 = v153;
              v17 = v154;
              v15 = v158;
              v16 = v159;
              v20 = 40;
              v37 = v50;
              v40 = v49;
              v26 = (unint64_t)v150;
              v13 = v151;
              v43 = v148;
            }
            if (v45)
              v53 = 0;
            else
              v53 = *v44 == 0;
            if (v53)
            {
              if (v38 != 0xFFFFFFFF)
              {
                v75 = v18;
                ((void (*)(_QWORD *, __n128 *, __n128, __n128, __n128))off_1E344FF78[v38])(v166, &v163, a5, a6, v19);
                v20 = 40;
                v15 = v158;
                v16 = v159;
                v17 = v154;
                v11 = v156;
                v14 = v157;
                v12 = v153;
                v19 = 0uLL;
                v18 = v75;
              }
              v38 = 0;
              v6 = v152;
              v10 = v155;
              v21 = v160;
              goto LABEL_62;
            }
            ++v39;
          }
        }
        v6 = v6;
        v10 = v10;
        goto LABEL_62;
      }
      v145 = v18;
      v146 = (uint64_t (**)())(v27 & 0x3FF);
      v28 = (uint64_t)off_1E344FF78;
      v151 = v13;
      if (!*(_BYTE *)(a1 + 40))
        goto LABEL_192;
      v6 = v10;
      v125 = *(uint64_t **)(a1 + 16);
      v126 = *(WTF::StringImpl **)(v26 + 8);
      if (v126)
      {
        v127 = *(_DWORD *)v126;
        *(_DWORD *)v126 += 2;
        v163.n128_u64[0] = (unint64_t)v126;
        v163.n128_u32[2] = 1;
        v128 = *v125;
        if (!*v125)
          goto LABEL_266;
LABEL_229:
        v149 = 0;
        LODWORD(v150) = *(_DWORD *)(v128 - 8);
        v129 = *((_DWORD *)v126 + 4) >> 8;
        v130 = 1;
        while (1)
        {
          v131 = v129 & v150;
          v132 = (unsigned __int16 *)(v128 + 16 * (v129 & v150));
          v133 = *((unsigned int *)v132 + 2);
          v135 = v130 == v133 && v130 != 0xFFFFFFFFLL;
          if ((_DWORD)v133 == -1 || !v135)
          {
            if (v133 == 0xFFFFFFFFLL)
              LOBYTE(v135) = v130 == 0xFFFFFFFFLL;
            if (v135)
              goto LABEL_262;
          }
          else
          {
            v166[0] = &v165;
            if (((unsigned int (*)(_QWORD *, uint64_t, __n128 *, __n128, __n128, __n128))off_1E344FF68[v130])(v166, v128 + 16 * v131, &v163, a5, a6, v19))
            {
              v130 = v163.n128_u32[2];
LABEL_262:
              if (v130 != 0xFFFFFFFFLL)
                ((void (*)(_QWORD *, __n128 *, __n128, __n128, __n128))off_1E344FF78[v130])(v166, &v163, a5, a6, v19);
              v11 = v156;
              v14 = v157;
              v6 = v152;
              v12 = v153;
              v13 = v151;
              v15 = v158;
              v17 = v154;
              v20 = 40;
              v21 = v160;
              v18 = v145;
              v28 = (uint64_t)v146;
              v19 = 0uLL;
              goto LABEL_148;
            }
            v133 = *((unsigned int *)v132 + 2);
            v130 = v163.n128_u32[2];
          }
          if (v133)
            v138 = 0;
          else
            v138 = *v132 == 0;
          if (v138)
          {
            if (v130 != 0xFFFFFFFFLL)
              ((void (*)(_QWORD *, __n128 *, __n128, __n128, __n128))off_1E344FF78[v130])(v166, &v163, a5, a6, v19);
            goto LABEL_254;
          }
          v129 = ++v149 + v131;
        }
      }
      v163.n128_u64[0] = 0;
      v163.n128_u32[2] = 1;
      v128 = *v125;
      if (*v125)
        goto LABEL_229;
LABEL_254:
      while (1)
      {
        v38 = v26;
        v10 = v6;
        v11 = v156;
        v14 = v157;
        v6 = v152;
        v12 = v153;
        v13 = v151;
        v15 = v158;
        v16 = v159;
        v17 = v154;
        v20 = 40;
        v21 = v160;
        v18 = v145;
        v28 = (uint64_t)v146;
        v19 = 0uLL;
LABEL_62:
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_192;
        if (!*(_BYTE *)(a1 + 32)
          || (v147 != 59392 || *(_DWORD *)(v38 + 72))
          && (v139 = (*(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16)) & 0x3F800, v139 != 94208)
          && v139 != 114688)
        {
          if (!*(_BYTE *)(a1 + 33) && !*(_BYTE *)(a1 + 34))
            goto LABEL_81;
          v145 = v18;
          v146 = (uint64_t (**)())v28;
          v120 = v15;
          v121 = v14;
          v28 = v12;
          v6 = (uint64_t)v11;
          v150 = (uint64_t *)v26;
          WebCore::CSSValue::computedStyleDependencies((WebCore::CSSValue *)v26, (uint64_t)&v163);
          if (!*(_BYTE *)(a1 + 40))
            goto LABEL_192;
          if (*(_BYTE *)(a1 + 33) && (v123 = v163.n128_u32[3]) != 0)
          {
            v140 = (unsigned __int16 *)v163.n128_u64[0];
            while (1)
            {
              v141 = *v140++;
              if (v141 == 13)
                break;
              if (!--v123)
                goto LABEL_223;
            }
          }
          else
          {
LABEL_223:
            if (!*(_BYTE *)(a1 + 34) || (v124 = v163.n128_u32[3]) == 0)
            {
LABEL_225:
              WebCore::ComputedStyleDependencies::~ComputedStyleDependencies((WebCore::ComputedStyleDependencies *)&v163, v122);
              v11 = (unsigned __int16 *)v6;
              v12 = v28;
              v14 = v121;
              v15 = v120;
              v16 = v159;
              v21 = v160;
              v17 = v154;
              v20 = 40;
              LODWORD(v6) = v152;
              v18 = v145;
              v19 = 0uLL;
              v9 = (v9 + 1);
              goto LABEL_10;
            }
            v142 = (unsigned __int16 *)v163.n128_u64[0];
            while (1)
            {
              v143 = *v142++;
              if (v143 == 154)
                break;
              if (!--v124)
                goto LABEL_225;
            }
          }
          WebCore::ComputedStyleDependencies::~ComputedStyleDependencies((WebCore::ComputedStyleDependencies *)&v163, v122);
          v18 = v145;
          v28 = (uint64_t)v146;
        }
LABEL_150:
        v144 = v9;
        v145 = v18;
        v151 = v13;
        v146 = (uint64_t (**)())v28;
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_192;
        v101 = *(_QWORD *)(a1 + 24);
        v150 = (uint64_t *)(a1 + 24);
        v163.n128_u16[0] = v28;
        v163.n128_u32[2] = 0;
        if (v101
          || (WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(v150, 8u, 0), (v101 = *v150) != 0))
        {
          v102 = *(_DWORD *)(v101 - 8);
        }
        else
        {
          v102 = 0;
        }
        if (v163.n128_u32[2] != -1)
          break;
LABEL_265:
        v126 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_266:
        v163.n128_u64[0] = 0;
        if (v127)
          *(_DWORD *)v126 = v127;
        else
          WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v20);
      }
      v166[0] = &v165;
      v6 = ((unsigned int (*)(_QWORD *, __n128 *))off_1E344FF88[v163.n128_u32[2]])(v166, &v163) & v102;
      v28 = v101 + 16 * v6;
      v9 = v28 + 8;
      v103 = *(unsigned int *)(v28 + 8);
      if (*(_DWORD *)(v28 + 8))
        v104 = 0;
      else
        v104 = *(unsigned __int16 *)v28 == 0;
      if (v104)
        goto LABEL_193;
      v105 = 0;
      v106 = 1;
      do
      {
        v108 = v163.n128_u32[2] == v103 && v163.n128_u32[2] != 0xFFFFFFFFLL;
        if (v103 == 0xFFFFFFFFLL || !v108)
        {
          v109 = v163.n128_u32[2] == 0xFFFFFFFFLL;
          if (v103 != 0xFFFFFFFFLL)
            v109 = v108;
          if (v109)
            goto LABEL_211;
        }
        else
        {
          v166[0] = &v165;
          if ((((uint64_t (*)(_QWORD *, uint64_t, __n128 *))off_1E344FF68[v103])(v166, v28, &v163) & 1) != 0)
            goto LABEL_211;
          v103 = *(unsigned int *)v9;
        }
        if (v103 == 0xFFFFFFFFLL)
          goto LABEL_265;
        v166[0] = &v165;
        if (((unsigned int (*)(_QWORD *, uint64_t))off_1E344FF58[v103])(v166, v28))
          v105 = (uint64_t (**)())v28;
        v6 = ((_DWORD)v6 + v106) & v102;
        v28 = v101 + 16 * v6;
        v9 = v28 + 8;
        v103 = *(unsigned int *)(v28 + 8);
        ++v106;
      }
      while (*(_DWORD *)(v28 + 8) || *(_WORD *)v28);
      if (!v105)
        goto LABEL_193;
      *v105 = 0;
      v105[1] = 0;
      --*(_DWORD *)(*v150 - 16);
      v110 = *((unsigned int *)v105 + 2);
      v111 = v163.n128_u32[2];
      if ((_DWORD)v110 == -1)
      {
        if (v163.n128_u32[2] != 0xFFFFFFFFLL)
          goto LABEL_201;
      }
      else
      {
        if (v163.n128_u32[2] != 0xFFFFFFFFLL)
          goto LABEL_201;
LABEL_195:
        ((void (*)(_QWORD *, uint64_t (**)()))off_1E344FF78[v110])(v166, v105);
        *((_DWORD *)v105 + 2) = -1;
      }
LABEL_202:
      v113 = *v150;
      if (*v150)
        v114 = *(_DWORD *)(v113 - 12) + 1;
      else
        v114 = 1;
      *(_DWORD *)(v113 - 12) = v114;
      v115 = *v150;
      if (*v150)
        v116 = *(_DWORD *)(v115 - 12);
      else
        v116 = 0;
      v117 = (*(_DWORD *)(v115 - 16) + v116);
      v118 = *(unsigned int *)(v115 - 4);
      if (v118 > 0x400)
      {
        if (v118 > 2 * v117)
          goto LABEL_211;
      }
      else
      {
        if (3 * v118 > 4 * v117)
        {
LABEL_211:
          if (v163.n128_u32[2] != -1)
            ((void (*)(_QWORD *, __n128 *))off_1E344FF78[v163.n128_u32[2]])(v166, &v163);
          v10 = v155;
          LODWORD(v9) = v144;
          v18 = v145;
          v11 = v156;
          v14 = v157;
          LODWORD(v6) = v152;
          v12 = v153;
          v13 = v151;
          v15 = v158;
          v16 = v159;
          v17 = v154;
          v20 = 40;
          v21 = v160;
          v28 = (uint64_t)v146;
          v19 = 0uLL;
LABEL_21:
          if (v28 > 0x15E)
            goto LABEL_71;
          goto LABEL_22;
        }
        if (!(_DWORD)v118)
        {
          v119 = 8;
LABEL_210:
          WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(v150, v119, (unsigned __int16 *)v105);
          goto LABEL_211;
        }
      }
      v119 = (_DWORD)v118 << (6 * *(_DWORD *)(v115 - 12) >= (2 * v118));
      goto LABEL_210;
    }
    if (((*(_QWORD *)((char *)v16 + (((unint64_t)(v27 & 0x3FF) >> 3) & 0x78)) >> v27) & 1) == 0)
      goto LABEL_32;
LABEL_22:
    v30 = v162;
    if ((_DWORD)v28 != 1)
    {
      v31 = &v17[4 * v28];
      v32 = ((unint64_t)v28 >> 3) & 0x78;
      v33 = *(_QWORD *)((char *)v16 + v32);
      *(_QWORD *)((char *)v16 + v32) = v33 | (1 << v28);
      if ((v33 & (1 << v28)) == 0)
      {
        v31[1] = 0;
        v31[2] = 0;
        v31[3] = 0;
      }
      *(_WORD *)v31 = v28;
      *((_BYTE *)v31 + 2) = v30;
      *((_BYTE *)v31 + 3) = *((_BYTE *)a2 + 10);
      *((_WORD *)v31 + 2) = *((_WORD *)a2 + 6);
      *((_BYTE *)v31 + 6) = *((_BYTE *)a2 + 11);
      v34 = *((unsigned __int8 *)a2 + 8);
      if ((_DWORD)v34 == 3)
      {
        v35 = &v17[4 * v28];
        a5 = (__n128)vdupq_n_s64(v26);
        *(__n128 *)(v35 + 1) = a5;
        v35[3] = (uint64_t (*)())v26;
        v20 = 40;
        v9 = (v9 + 1);
      }
      else
      {
        if (v34 >= 3)
          goto LABEL_192;
        *(&v17[4 * v28 + 1] + v34) = (uint64_t (*)())v26;
        v20 = 40;
        v19 = 0uLL;
        v9 = (v9 + 1);
      }
      goto LABEL_10;
    }
    *v16 |= 2uLL;
    if (((*(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16)) & 0x3F800) != 0xE800)
    {
      __break(0xC471u);
      JUMPOUT(0x1944166F4);
    }
    v63 = *(_QWORD *)(a1 + 15448);
    v160 = v21;
    if (v63)
      goto LABEL_127;
    v155 = v10;
    v84 = v18;
    v156 = v11;
    v157 = v14;
    v85 = (uint64_t (**)())v12;
    v28 = (uint64_t)v17;
    v158 = v15;
    v159 = v16;
    v86 = WTF::fastMalloc((WTF *)0x150);
    v20 = 40;
    v15 = v158;
    v17 = (uint64_t (**)())v28;
    v11 = v156;
    v14 = v157;
    v12 = (unint64_t)v85;
    v19 = 0uLL;
    v18 = v84;
    v10 = v155;
    *(_OWORD *)(v86 + 16) = 0u;
    *(_OWORD *)(v86 + 32) = 0u;
    v87 = (_OWORD *)(v86 + 16);
    v87[2] = 0u;
    v87[3] = 0u;
    v87[4] = 0u;
    v87[5] = 0u;
    v87[6] = 0u;
    v87[7] = 0u;
    v87[8] = 0u;
    v87[9] = 0u;
    v87[10] = 0u;
    v87[11] = 0u;
    v87[12] = 0u;
    v87[13] = 0u;
    v87[14] = 0u;
    v87[15] = 0u;
    v87[16] = 0u;
    v87[17] = 0u;
    v87[18] = 0u;
    v87[19] = 0u;
    *v18 = (uint64_t)v87;
    *((_DWORD *)v87 - 1) = 8;
    *(_DWORD *)(*v18 - 8) = 7;
    *(_DWORD *)(*v18 - 16) = 0;
    *(_DWORD *)(*v18 - 12) = 0;
    v63 = *v18;
    if (*v18)
LABEL_127:
      v88 = *(_DWORD *)(v63 - 8);
    else
      v88 = 0;
    v64 = 0;
    v65 = *(_DWORD **)(v26 + 8);
    v66 = v65[4] >> 8;
    for (k = 1; ; ++k)
    {
      v68 = v66 & v88;
      v69 = (__n128 *)(v63 + 40 * v68);
      v70 = (_DWORD *)v69->n128_u64[0];
      if (v69->n128_u64[0] == -1)
      {
        v64 = (__n128 *)(v63 + 40 * v68);
        goto LABEL_90;
      }
      if (!v70)
        break;
      if (v70 == v65)
      {
        v71 = v63 + 40 * v68;
        *(_WORD *)(v71 + 8) = 1;
        *(_BYTE *)(v71 + 10) = v30;
        *(_BYTE *)(v71 + 11) = *((_BYTE *)a2 + 10);
        *(_WORD *)(v71 + 12) = *((_WORD *)a2 + 6);
        *(_BYTE *)(v71 + 14) = *((_BYTE *)a2 + 11);
        v72 = *((unsigned __int8 *)a2 + 8);
        v21 = v160;
        if ((_DWORD)v72 == 3)
        {
          v73 = (__n128 *)(v63 + 40 * v68);
          a5 = (__n128)vdupq_n_s64(v26);
          v73[1] = a5;
          v62 = v73 + 2;
          v20 = 40;
          goto LABEL_80;
        }
        if (v72 < 3)
        {
          v62 = (__n128 *)(v63 + 40 * v68 + 8 * v72 + 16);
          v20 = 40;
LABEL_190:
          v19 = 0uLL;
LABEL_80:
          v62->n128_u64[0] = v26;
          goto LABEL_81;
        }
LABEL_192:
        __break(1u);
LABEL_193:
        v111 = v163.n128_u32[2];
        if (v163.n128_u32[2] == -1)
        {
          v110 = 0;
          v105 = (uint64_t (**)())v28;
          goto LABEL_195;
        }
        v105 = (uint64_t (**)())v28;
LABEL_201:
        v166[0] = v105;
        ((void (*)(_QWORD *, uint64_t (**)(), __n128 *))off_1E344FF98[v111])(v166, v105, &v163);
        goto LABEL_202;
      }
LABEL_90:
      v66 = k + v68;
    }
    if (v64)
    {
      v64[2].n128_u64[0] = 0;
      *v64 = v19;
      v64[1] = v19;
      --*(_DWORD *)(*v18 - 16);
      v65 = *(_DWORD **)(v26 + 8);
      v69 = v64;
    }
    if (v65)
      *v65 += 2;
    v69->n128_u64[0] = (unint64_t)v65;
    *(_QWORD *)v160 = 0;
    *((_QWORD *)v160 + 1) = 0;
    *((_QWORD *)v160 + 2) = 0;
    v163.n128_u16[0] = 1;
    v163.n128_u8[2] = v30;
    v163.n128_u8[3] = *((_BYTE *)a2 + 10);
    v163.n128_u16[2] = *((_WORD *)a2 + 6);
    v163.n128_u8[6] = *((_BYTE *)a2 + 11);
    v76 = *((unsigned __int8 *)a2 + 8);
    if ((_DWORD)v76 == 3)
    {
      v77 = &v164.n128_u64[1];
      v163.n128_u64[1] = v26;
      v164.n128_u64[0] = v26;
    }
    else
    {
      if (v76 >= 3)
        goto LABEL_192;
      v77 = (unint64_t *)&v160[8 * v76];
      v20 = 40;
      v19 = 0uLL;
    }
    *v77 = v26;
    a5 = v163;
    a6 = v164;
    *(__n128 *)((char *)v69 + 24) = v164;
    *(__n128 *)((char *)v69 + 8) = a5;
    v78 = *v18;
    if (*v18)
      v79 = *(_DWORD *)(v78 - 12) + 1;
    else
      v79 = 1;
    *(_DWORD *)(v78 - 12) = v79;
    v80 = *v18;
    if (*v18)
      v81 = *(_DWORD *)(v80 - 12);
    else
      v81 = 0;
    v82 = (*(_DWORD *)(v80 - 16) + v81);
    v83 = *(unsigned int *)(v80 - 4);
    if (v83 > 0x400)
    {
      if (v83 > 2 * v82)
        goto LABEL_125;
    }
    else
    {
      if (3 * v83 > 4 * v82)
      {
LABEL_125:
        v21 = v160;
        v9 = (v9 + 1);
        goto LABEL_10;
      }
      if (!(_DWORD)v83)
      {
        v158 = v15;
        v159 = v16;
        v154 = v17;
        v157 = v14;
        v96 = (uint64_t (**)())v12;
        v97 = v11;
        v98 = v10;
        v99 = 8;
        goto LABEL_143;
      }
    }
    v158 = v15;
    v159 = v16;
    v154 = v17;
    v157 = v14;
    v96 = (uint64_t (**)())v12;
    v97 = v11;
    v98 = v10;
    v99 = (_DWORD)v83 << (6 * *(_DWORD *)(v80 - 12) >= (2 * v83));
LABEL_143:
    v100 = v18;
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::Style::PropertyCascade::Property>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::Style::PropertyCascade::Property>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::Style::PropertyCascade::Property,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::Style::PropertyCascade::Property>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v18, v99);
    v18 = v100;
    v19 = 0uLL;
    v10 = v98;
    v11 = v97;
    v12 = (unint64_t)v96;
    v14 = v157;
    v15 = v158;
    v17 = v154;
    v16 = v159;
    v21 = v160;
    v20 = 40;
    v9 = (v9 + 1);
LABEL_10:
    v22 = *(unsigned int *)(v13 + 4);
  }
  while ((v22 & 8) != 0);
LABEL_11:
  if (v9 < v22 >> 4)
  {
    v24 = v14 + 2 * v9;
    v25 = (unsigned int *)(v14 + 5 * v9 + ((v22 >> 3) & 0x1FFFFFFE));
    v26 = *v25 | ((unint64_t)*((unsigned __int8 *)v25 + 4) << 32);
    goto LABEL_13;
  }
  return v10 & 1;
}

void WebCore::Style::MatchedDeclarationsCache::add(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5, __int16 *a6)
{
  unsigned int v11;
  double v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  void *v28;
  _BYTE v29[24];
  __int16 v30[40];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v34 = a5;
  v11 = *(_DWORD *)(a1 + 72) + 1;
  *(_DWORD *)(a1 + 72) = v11;
  if (v11 >= 0x64
    && ((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    *(_QWORD *)(a1 + 40) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    WebCore::TimerBase::setNextFireTime(a1 + 16, v12 + 60.0);
  }
  WebCore::Style::MatchResult::MatchResult((uint64_t)v30, a6);
  v13 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v13 = 0;
  v14 = (_DWORD *)a2[1];
  ++*v14;
  *(_QWORD *)(v13 + 8) = v14;
  *(_QWORD *)(v13 + 16) = a2[2];
  v15 = (_DWORD *)a2[3];
  ++*v15;
  *(_QWORD *)(v13 + 24) = v15;
  v16 = (_DWORD *)a2[4];
  ++*v16;
  *(_QWORD *)(v13 + 32) = v16;
  *(_QWORD *)(v13 + 40) = a2[5];
  *(_QWORD *)(v13 + 48) = 0;
  v17 = (_DWORD *)a2[7];
  ++*v17;
  *(_QWORD *)(v13 + 56) = v17;
  v31 = v13;
  v18 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v18 = 0;
  v19 = (_DWORD *)a3[1];
  ++*v19;
  *(_QWORD *)(v18 + 8) = v19;
  *(_QWORD *)(v18 + 16) = a3[2];
  v20 = (_DWORD *)a3[3];
  ++*v20;
  *(_QWORD *)(v18 + 24) = v20;
  v21 = (_DWORD *)a3[4];
  ++*v21;
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = a3[5];
  *(_QWORD *)(v18 + 48) = 0;
  v22 = (_DWORD *)a3[7];
  ++*v22;
  *(_QWORD *)(v18 + 56) = v22;
  v32 = v18;
  if (a4)
  {
    v23 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v23 = 0;
    v24 = (_DWORD *)a4[1];
    ++*v24;
    *(_QWORD *)(v23 + 8) = v24;
    *(_QWORD *)(v23 + 16) = a4[2];
    v25 = (_DWORD *)a4[3];
    ++*v25;
    *(_QWORD *)(v23 + 24) = v25;
    v26 = (_DWORD *)a4[4];
    ++*v26;
    *(_QWORD *)(v23 + 32) = v26;
    *(_QWORD *)(v23 + 40) = a4[5];
    *(_QWORD *)(v23 + 48) = 0;
    v27 = (_DWORD *)a4[7];
    ++*v27;
    *(_QWORD *)(v23 + 56) = v27;
  }
  else
  {
    v23 = 0;
  }
  v33 = v23;
  WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::add<WebCore::Style::MatchedDeclarationsCache::Entry>((uint64_t *)(a1 + 8), &v34, v30, (uint64_t)v29);
  WebCore::Style::MatchedDeclarationsCache::Entry::~Entry((WebCore::Style::MatchedDeclarationsCache::Entry *)v30, v28);
}

uint64_t WebCore::Style::MatchResult::MatchResult(uint64_t a1, __int16 *a2)
{
  __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  void *v24;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  v5 = *((unsigned int *)a2 + 5);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 28)
      goto LABEL_23;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v7)
    {
      v8 = *((_QWORD *)a2 + 1);
      v9 = v8 + 16 * v7;
      do
      {
        v10 = *(_DWORD **)v8;
        *v10 = **(_DWORD **)v8 + 1;
        *v6 = v10;
        v6[1] = *(_QWORD *)(v8 + 8);
        v8 += 16;
        v6 += 2;
      }
      while (v8 != v9);
    }
  }
  v11 = *((unsigned int *)a2 + 9);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1944170B0);
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v11));
    *(_DWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 24) = v12;
    v13 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v13)
    {
      v14 = *((_QWORD *)a2 + 3);
      v15 = v14 + 16 * v13;
      do
      {
        v16 = *(_DWORD **)v14;
        *v16 = **(_DWORD **)v14 + 1;
        *v12 = v16;
        v12[1] = *(_QWORD *)(v14 + 8);
        v14 += 16;
        v12 += 2;
      }
      while (v14 != v15);
    }
  }
  v17 = *((unsigned int *)a2 + 13);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v17;
  if ((_DWORD)v17)
  {
    if (v17 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1944170B8);
    }
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v17));
    *(_DWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 40) = v18;
    v19 = *((unsigned int *)a2 + 13);
    if ((_DWORD)v19)
    {
      v20 = *((_QWORD *)a2 + 5);
      v21 = v20 + 16 * v19;
      do
      {
        v22 = *(_DWORD **)v20;
        *v22 = **(_DWORD **)v20 + 1;
        *v18 = v22;
        v18[1] = *(_QWORD *)(v20 + 8);
        v20 += 16;
        v18 += 2;
      }
      while (v20 != v21);
    }
  }
  v23 = *((unsigned int *)a2 + 17);
  v24 = (void *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_DWORD *)(a1 + 64) = 4;
  *(_DWORD *)(a1 + 68) = v23;
  if (v23 >= 5)
  {
    if ((v23 & 0x80000000) == 0)
    {
      v24 = (void *)WTF::fastMalloc((WTF *)(2 * v23));
      *(_DWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 56) = v24;
      goto LABEL_17;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1944170A8);
  }
LABEL_17:
  memcpy(v24, *((const void **)a2 + 7), 2 * *((unsigned int *)a2 + 17));
  return a1;
}

void WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::add<WebCore::Style::MatchedDeclarationsCache::Entry>(uint64_t *a1@<X0>, int *a2@<X1>, __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  __int16 *v28;
  int v29;
  int v30;
  uint64_t v31;
  WebCore::RenderStyle *v32;
  WTF *v33;
  uint64_t v34;
  WebCore::RenderStyle *v35;
  WTF *v36;
  uint64_t v37;
  WebCore::RenderStyle *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unsigned int v50;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 & v10;
  v13 = v8 + 112 * v12;
  v14 = *(_DWORD *)v13;
  if (*(_DWORD *)v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v11)
      {
        if ((v9 & 1) != 0)
          v50 = 0;
        else
          v50 = *(_DWORD *)(v8 - 4);
        v48 = 0;
        v47 = v8 + 112 * v50;
        goto LABEL_42;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v10;
      v13 = v8 + 112 * v12;
      v14 = *(_DWORD *)v13;
      ++v16;
    }
    while (*(_DWORD *)v13);
    if (v15)
    {
      *(_DWORD *)v15 = 0;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 24) = 0u;
      *(_OWORD *)(v15 + 8) = 0u;
      *(_QWORD *)(v15 + 64) = v15 + 80;
      *(_DWORD *)(v15 + 72) = 4;
      *(_QWORD *)(v15 + 96) = 0;
      *(_QWORD *)(v15 + 104) = 0;
      *(_QWORD *)(v15 + 88) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v13 = v15;
    }
  }
  *(_DWORD *)v13 = v11;
  v17 = *a3;
  *(_BYTE *)(v13 + 10) = *((_BYTE *)a3 + 2);
  *(_WORD *)(v13 + 8) = v17;
  v18 = *(unsigned int *)(v13 + 28);
  if ((_DWORD)v18)
    WTF::VectorTypeOperations<WebCore::Style::MatchedProperties>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 16 * v18));
  v19 = *(WTF **)(v13 + 16);
  if (v19)
  {
    *(_QWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 24) = 0;
    WTF::fastFree(v19, a2);
  }
  v20 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(v13 + 16) = v20;
  LODWORD(v20) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(v13 + 24) = v20;
  LODWORD(v20) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(v13 + 28) = v20;
  v21 = *(unsigned int *)(v13 + 44);
  if ((_DWORD)v21)
    WTF::VectorTypeOperations<WebCore::Style::MatchedProperties>::destruct(*(WTF::StringImpl **)(v13 + 32), (WTF::StringImpl *)(*(_QWORD *)(v13 + 32) + 16 * v21));
  v22 = *(WTF **)(v13 + 32);
  if (v22)
  {
    *(_QWORD *)(v13 + 32) = 0;
    *(_DWORD *)(v13 + 40) = 0;
    WTF::fastFree(v22, a2);
  }
  v23 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 3) = 0;
  *(_QWORD *)(v13 + 32) = v23;
  LODWORD(v23) = *((_DWORD *)a3 + 8);
  *((_DWORD *)a3 + 8) = 0;
  *(_DWORD *)(v13 + 40) = v23;
  LODWORD(v23) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 9) = 0;
  *(_DWORD *)(v13 + 44) = v23;
  v24 = *(unsigned int *)(v13 + 60);
  if ((_DWORD)v24)
    WTF::VectorTypeOperations<WebCore::Style::MatchedProperties>::destruct(*(WTF::StringImpl **)(v13 + 48), (WTF::StringImpl *)(*(_QWORD *)(v13 + 48) + 16 * v24));
  v25 = *(WTF **)(v13 + 48);
  if (v25)
  {
    *(_QWORD *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    WTF::fastFree(v25, a2);
  }
  v26 = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 5) = 0;
  *(_QWORD *)(v13 + 48) = v26;
  LODWORD(v26) = *((_DWORD *)a3 + 12);
  *((_DWORD *)a3 + 12) = 0;
  *(_DWORD *)(v13 + 56) = v26;
  LODWORD(v26) = *((_DWORD *)a3 + 13);
  *((_DWORD *)a3 + 13) = 0;
  *(_DWORD *)(v13 + 60) = v26;
  v27 = *(WTF **)(v13 + 64);
  if (v27 != (WTF *)(v13 + 80))
  {
    if (v27)
    {
      *(_QWORD *)(v13 + 64) = 0;
      *(_DWORD *)(v13 + 72) = 0;
      WTF::fastFree(v27, a2);
    }
    *(_QWORD *)(v13 + 64) = v13 + 80;
  }
  v28 = (__int16 *)*((_QWORD *)a3 + 7);
  if (v28 == a3 + 36)
  {
    memcpy((void *)(v13 + 80), v28, 2 * *((unsigned int *)a3 + 17));
    v29 = *((_DWORD *)a3 + 16);
  }
  else
  {
    *((_QWORD *)a3 + 7) = a3 + 36;
    *(_QWORD *)(v13 + 64) = v28;
    v29 = *((_DWORD *)a3 + 16);
    *((_DWORD *)a3 + 16) = 4;
  }
  *(_DWORD *)(v13 + 72) = v29;
  v30 = *((_DWORD *)a3 + 17);
  *((_DWORD *)a3 + 17) = 0;
  *(_DWORD *)(v13 + 76) = v30;
  v31 = *((_QWORD *)a3 + 10);
  *((_QWORD *)a3 + 10) = 0;
  v32 = *(WebCore::RenderStyle **)(v13 + 88);
  *(_QWORD *)(v13 + 88) = v31;
  if (v32)
  {
    WebCore::RenderStyle::~RenderStyle(v32, v28);
    if (*(_DWORD *)v33)
    {
      *((_OWORD *)v33 + 2) = 0u;
      *((_OWORD *)v33 + 3) = 0u;
      *(_OWORD *)v33 = 0u;
      *((_OWORD *)v33 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v33, v28);
    }
  }
  v34 = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 11) = 0;
  v35 = *(WebCore::RenderStyle **)(v13 + 96);
  *(_QWORD *)(v13 + 96) = v34;
  if (v35)
  {
    WebCore::RenderStyle::~RenderStyle(v35, v28);
    if (*(_DWORD *)v36)
    {
      *((_OWORD *)v36 + 2) = 0u;
      *((_OWORD *)v36 + 3) = 0u;
      *(_OWORD *)v36 = 0u;
      *((_OWORD *)v36 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v36, v28);
    }
  }
  v37 = *((_QWORD *)a3 + 12);
  *((_QWORD *)a3 + 12) = 0;
  v38 = *(WebCore::RenderStyle **)(v13 + 104);
  *(_QWORD *)(v13 + 104) = v37;
  if (v38)
  {
    WebCore::RenderStyle::~RenderStyle(v38, v28);
    if (*(_DWORD *)v39)
    {
      *((_OWORD *)v39 + 2) = 0u;
      *((_OWORD *)v39 + 3) = 0u;
      *(_OWORD *)v39 = 0u;
      *((_OWORD *)v39 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v39, v40);
    }
  }
  v41 = *a1;
  if (*a1)
    v42 = *(_DWORD *)(v41 - 12) + 1;
  else
    v42 = 1;
  *(_DWORD *)(v41 - 12) = v42;
  v43 = *a1;
  if (*a1)
    v44 = *(_DWORD *)(v43 - 12);
  else
    v44 = 0;
  v45 = (*(_DWORD *)(v43 - 16) + v44);
  v46 = *(unsigned int *)(v43 - 4);
  if (v46 > 0x400)
  {
    if (v46 > 2 * v45)
      goto LABEL_41;
    goto LABEL_44;
  }
  if (3 * v46 <= 4 * v45)
  {
    if (!(_DWORD)v46)
    {
      v49 = 8;
LABEL_48:
      v13 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v49, (int *)v13);
      v43 = *a1;
      if (*a1)
        LODWORD(v46) = *(_DWORD *)(v43 - 4);
      else
        LODWORD(v46) = 0;
      goto LABEL_41;
    }
LABEL_44:
    v49 = (_DWORD)v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
    goto LABEL_48;
  }
LABEL_41:
  v47 = v43 + 112 * v46;
  v48 = 1;
LABEL_42:
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v47;
  *(_BYTE *)(a4 + 16) = v48;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Style::MatchedDeclarationsCache::Entry *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t result;
  uint64_t v42;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(112 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 80;
    do
    {
      *(_DWORD *)(v10 - 64) = 0;
      *(_OWORD *)(v10 - 8) = 0uLL;
      *(_OWORD *)(v10 + 8) = 0uLL;
      *(_OWORD *)(v10 - 56) = 0uLL;
      *(_OWORD *)(v10 - 40) = 0uLL;
      *(_OWORD *)(v10 - 24) = 0uLL;
      *(_QWORD *)v10 = v10 + 16;
      *(_DWORD *)(v10 + 8) = 4;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v10 += 112;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v42 = v5;
    do
    {
      v13 = (int *)(v4 + 112 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          do
          {
            v18 = v14 & v16;
            v19 = (int *)(v15 + 112 * (v14 & v16));
            v14 = ++v17 + (v14 & v16);
          }
          while (*v19);
          v20 = v15 + 112 * v18;
          WebCore::Style::MatchedDeclarationsCache::Entry::~Entry((WebCore::Style::MatchedDeclarationsCache::Entry *)(v20 + 8), v8);
          *v19 = *v13;
          v21 = v4 + 112 * v11;
          v23 = *(_WORD *)(v21 + 8);
          v22 = (WebCore::Style::MatchedDeclarationsCache::Entry *)(v21 + 8);
          *(_BYTE *)(v20 + 10) = *(_BYTE *)(v21 + 10);
          *(_WORD *)(v20 + 8) = v23;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)(v20 + 24) = 0;
          v24 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v20 + 16) = v24;
          LODWORD(v24) = *(_DWORD *)(v21 + 24);
          *(_DWORD *)(v21 + 24) = 0;
          *(_DWORD *)(v20 + 24) = v24;
          LODWORD(v24) = *(_DWORD *)(v21 + 28);
          *(_DWORD *)(v21 + 28) = 0;
          *(_DWORD *)(v20 + 28) = v24;
          *(_QWORD *)(v20 + 32) = 0;
          *(_QWORD *)(v20 + 40) = 0;
          v25 = *(_QWORD *)(v21 + 32);
          *(_QWORD *)(v21 + 32) = 0;
          *(_QWORD *)(v20 + 32) = v25;
          LODWORD(v25) = *(_DWORD *)(v21 + 40);
          *(_DWORD *)(v21 + 40) = 0;
          *(_DWORD *)(v20 + 40) = v25;
          LODWORD(v25) = *(_DWORD *)(v21 + 44);
          *(_DWORD *)(v21 + 44) = 0;
          *(_DWORD *)(v20 + 44) = v25;
          *(_QWORD *)(v20 + 48) = 0;
          *(_QWORD *)(v20 + 56) = 0;
          v26 = *(_QWORD *)(v21 + 48);
          *(_QWORD *)(v21 + 48) = 0;
          *(_QWORD *)(v20 + 48) = v26;
          LODWORD(v26) = *(_DWORD *)(v21 + 56);
          *(_DWORD *)(v21 + 56) = 0;
          *(_DWORD *)(v20 + 56) = v26;
          LODWORD(v26) = *(_DWORD *)(v21 + 60);
          *(_DWORD *)(v21 + 60) = 0;
          *(_QWORD *)(v20 + 72) = 4;
          v27 = (_DWORD *)(v20 + 72);
          *(v27 - 3) = v26;
          *((_QWORD *)v27 - 1) = v27 + 2;
          v30 = *(_QWORD **)(v21 + 64);
          v29 = (_QWORD *)(v21 + 64);
          v28 = v30;
          if (v30 == v29 + 2)
          {
            memcpy(v27 + 2, v28, 2 * *(unsigned int *)(v4 + 112 * v11 + 76));
          }
          else
          {
            *v29 = v29 + 2;
            *((_QWORD *)v27 - 1) = v28;
            v37 = v4 + 112 * v11;
            v38 = *(_DWORD *)(v37 + 72);
            *(_DWORD *)(v37 + 72) = 4;
            *v27 = v38;
          }
          v31 = v4 + 112 * v11;
          v32 = *(_DWORD *)(v31 + 76);
          *(_DWORD *)(v31 + 76) = 0;
          v27[1] = v32;
          v33 = (_QWORD *)(v15 + 112 * v18);
          v34 = *(_QWORD *)(v31 + 88);
          *(_QWORD *)(v31 + 88) = 0;
          v33[11] = v34;
          v35 = *(_QWORD *)(v31 + 96);
          *(_QWORD *)(v31 + 96) = 0;
          v33[12] = v35;
          v36 = *(_QWORD *)(v31 + 104);
          *(_QWORD *)(v31 + 104) = 0;
          v33[13] = v36;
          WebCore::Style::MatchedDeclarationsCache::Entry::~Entry(v22, v28);
          if (v13 == a3)
            v12 = v15 + 112 * v18;
        }
      }
      else
      {
        WebCore::Style::MatchedDeclarationsCache::Entry::~Entry((WebCore::Style::MatchedDeclarationsCache::Entry *)(v4 + 112 * v11 + 8), v8);
      }
      ++v11;
    }
    while (v11 != v42);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WebCore::Style::PropertyCascade::AnimationLayer::AnimationLayer(uint64_t a1, char ***a2)
{
  char **v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char **v10;
  char **v11;
  char **v12;
  uint64_t v13;
  char **v15;
  char **v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char **v22;
  uint64_t v23;
  _BOOL4 v25;
  BOOL v27;
  char v28;
  char **v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  char **v35;
  uint64_t v36;
  _BOOL4 v38;
  BOOL v40;
  char v41;
  char **v43;
  unsigned int v44;
  char v45;
  char *v46;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 15) = 0;
  v4 = *a2;
  if (!*a2)
  {
    v10 = 0;
    v5 = 0;
    goto LABEL_93;
  }
  v5 = *((unsigned int *)v4 - 1);
  v6 = &v4[2 * v5];
  if (!*((_DWORD *)v4 - 3))
    goto LABEL_104;
  if (!(_DWORD)v5)
  {
    v10 = *a2;
    goto LABEL_15;
  }
  v7 = 16 * v5;
  while (1)
  {
    v8 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v8 || *(_WORD *)v4 != 0)
      break;
LABEL_10:
    v4 += 2;
    v7 -= 16;
    if (!v7)
    {
      v4 = v6;
LABEL_14:
      v10 = v4;
      v4 = *a2;
      goto LABEL_15;
    }
  }
  if ((_DWORD)v8 != -1)
  {
    v43 = &v46;
    if (!((unsigned int (*)(char ***, char **))off_1E344FF58[v8])(&v43, v4))
      goto LABEL_14;
    goto LABEL_10;
  }
LABEL_103:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_104:
  v10 = v6;
LABEL_93:
  v6 = &v4[2 * v5];
LABEL_15:
  if (v4)
    v11 = &v4[2 * *((unsigned int *)v4 - 1)];
  else
    v11 = 0;
  if (v11 != v10)
  {
    v4 = &v46;
    while (*((_DWORD *)v10 + 2) != 1)
    {
      v12 = v10 + 2;
      v10 = v6;
      if (v12 != v6)
      {
        v10 = v12;
        while (1)
        {
          v13 = *((unsigned int *)v10 + 2);
          if ((_DWORD)v13 || *(_WORD *)v10 != 0)
          {
            if ((_DWORD)v13 == -1)
              goto LABEL_103;
            v43 = &v46;
            if (!((unsigned int (*)(char ***, char **))off_1E344FF58[v13])(&v43, v10))
              break;
          }
          v10 += 2;
          if (v10 == v6)
          {
            v10 = v6;
            break;
          }
        }
      }
      if (v10 == v11)
        goto LABEL_34;
    }
    v11 = v10;
LABEL_34:
    v4 = *a2;
  }
  if (v4)
    v15 = &v4[2 * *((unsigned int *)v4 - 1)];
  else
    v15 = 0;
  *(_BYTE *)(a1 + 16) = v11 != v15;
  LOWORD(v43) = 13;
  v44 = 0;
  v16 = *a2;
  v17 = 0;
  if (!*a2)
  {
    *(_BYTE *)(a1 + 17) = 0;
    goto LABEL_63;
  }
  v18 = 0;
  v19 = *((_DWORD *)v16 - 2);
  v20 = -1857171129;
  while (2)
  {
    v21 = v20 & v19;
    v22 = &v16[2 * (v20 & v19)];
    v23 = *((unsigned int *)v22 + 2);
    v25 = v17 == v23 && v17 != 0xFFFFFFFFLL;
    if ((_DWORD)v23 == -1 || !v25)
    {
      if (v23 == 0xFFFFFFFFLL)
        LOBYTE(v25) = v17 == 0xFFFFFFFFLL;
      if (v25)
        goto LABEL_98;
      goto LABEL_56;
    }
    v46 = &v45;
    if (!((unsigned int (*)(char **, char **, char ***))off_1E344FF68[v17])(&v46, &v16[2 * v21], &v43))
    {
      v23 = *((unsigned int *)v22 + 2);
      v17 = v44;
LABEL_56:
      if (v23)
        v27 = 0;
      else
        v27 = *(unsigned __int16 *)v22 == 0;
      if (v27)
      {
        v28 = 0;
        goto LABEL_62;
      }
      v20 = ++v18 + v21;
      continue;
    }
    break;
  }
  v17 = v44;
LABEL_98:
  v28 = 1;
LABEL_62:
  *(_BYTE *)(a1 + 17) = v28;
  if (v17 != 0xFFFFFFFFLL)
LABEL_63:
    ((void (*)(char **, char ***))off_1E344FF78[v17])(&v46, &v43);
  LOWORD(v43) = 154;
  v44 = 0;
  v29 = *a2;
  if (!*a2)
  {
    v30 = 0;
    *(_BYTE *)(a1 + 18) = 0;
    goto LABEL_90;
  }
  v30 = 0;
  v31 = 0;
  v32 = *((_DWORD *)v29 - 2);
  v33 = 455781686;
  while (2)
  {
    v34 = v33 & v32;
    v35 = &v29[2 * (v33 & v32)];
    v36 = *((unsigned int *)v35 + 2);
    v38 = v30 == v36 && v30 != 0xFFFFFFFFLL;
    if ((_DWORD)v36 == -1 || !v38)
    {
      if (v36 == 0xFFFFFFFFLL)
        LOBYTE(v38) = v30 == 0xFFFFFFFFLL;
      if (v38)
        goto LABEL_100;
      goto LABEL_83;
    }
    v46 = &v45;
    if (!((unsigned int (*)(char **, char **, char ***))off_1E344FF68[v30])(&v46, &v29[2 * v34], &v43))
    {
      v36 = *((unsigned int *)v35 + 2);
      v30 = v44;
LABEL_83:
      if (v36)
        v40 = 0;
      else
        v40 = *(unsigned __int16 *)v35 == 0;
      if (v40)
      {
        v41 = 0;
        goto LABEL_89;
      }
      v33 = ++v31 + v34;
      continue;
    }
    break;
  }
  v30 = v44;
LABEL_100:
  v41 = 1;
LABEL_89:
  *(_BYTE *)(a1 + 18) = v41;
  if (v30 != 0xFFFFFFFFLL)
LABEL_90:
    ((void (*)(char **, char ***))off_1E344FF78[v30])(&v46, &v43);
  return a1;
}

void WebCore::RenderStyle::inheritedEqual(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::SVGRenderStyle *v7;
  const WebCore::SVGRenderStyle *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (((*((_DWORD *)a2 + 10) ^ *((_DWORD *)this + 10)) & 0x7FFFFFFF) == 0
    && ((*((_DWORD *)a2 + 11) ^ *((_DWORD *)this + 11)) & 0x3FFFFF) == 0)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *((_QWORD *)a2 + 4);
    if (v5 == v6
      || WebCore::StyleInheritedData::fastPathInheritedEqual(*((_QWORD *)this + 4), *((_QWORD *)a2 + 4))
      && WebCore::StyleInheritedData::nonFastPathInheritedEqual(v5, v6))
    {
      v7 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      v8 = (const WebCore::SVGRenderStyle *)*((_QWORD *)a2 + 7);
      if (v7 == v8 || (WebCore::SVGRenderStyle::inheritedEqual(v7, v8, a3), v11))
      {
        v9 = *((_QWORD *)this + 3);
        v10 = *((_QWORD *)a2 + 3);
        if (v9 != v10)
          WebCore::StyleRareInheritedData::operator==(v9, v10);
      }
    }
  }
}

const WebCore::RenderStyle *WebCore::RenderStyle::copyNonInheritedFrom(const WebCore::RenderStyle *this, const WebCore::RenderStyle *a2, const WTF::StringImpl *a3)
{
  const WebCore::RenderStyle *v3;
  const WebCore::RenderStyle *v4;
  _DWORD *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BOOL4 v29;
  WebCore::StyleRareNonInheritedData *v30;
  WebCore::StyleMiscNonInheritedData *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int *v41;
  _DWORD *v42;
  unsigned int *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  WebCore::SVGRenderStyle *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::FillLayer *v62;
  WebCore::NinePieceImage::Data *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  int v71;
  _BOOL4 v73;
  WTF *v74;
  void *v75;
  _BOOL4 v76;
  _BOOL4 v77;
  const WTF::StringImpl *v78;
  const WebCore::RenderStyle *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  _BOOL4 v92;
  WTF *v93;
  void *v94;
  WTF *v95;
  void *v96;
  _BOOL4 v97;
  char v98;
  char *v99;

  v3 = a2;
  v4 = this;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  ++*v5;
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v30 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v6 + 5);
      *((_QWORD *)v6 + 5) = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v30, a2);
          WTF::fastFree(v58, v59);
        }
        else
        {
          --*(_DWORD *)v30;
        }
      }
      v31 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v6 + 4);
      *((_QWORD *)v6 + 4) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v31, a2);
          WTF::fastFree(v68, v69);
        }
        else
        {
          --*(_DWORD *)v31;
        }
      }
      v32 = *((_QWORD *)v6 + 3);
      *((_QWORD *)v6 + 3) = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
        {
          if (*(_BYTE *)(v32 + 268) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 264));
          }
          if (*(_BYTE *)(v32 + 260) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 256));
          }
          if (*(_BYTE *)(v32 + 252) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 248));
          }
          if (*(_BYTE *)(v32 + 244) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 240));
          }
          if (*(_BYTE *)(v32 + 236) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 232));
          }
          if (*(_BYTE *)(v32 + 228) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 224));
          }
          if (*(_BYTE *)(v32 + 220) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 216));
          }
          if (*(_BYTE *)(v32 + 212) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 208));
          }
          v63 = *(WebCore::NinePieceImage::Data **)(v32 + 200);
          *(_QWORD *)(v32 + 200) = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 1)
            {
              WebCore::NinePieceImage::Data::~Data(v63);
              WTF::fastFree(v95, v96);
            }
            else
            {
              --*(_DWORD *)v63;
            }
          }
          v64 = *(unsigned int *)(v32 + 184);
          if ((_DWORD)v64 != -1)
            ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v64])(&v99, v32 + 176);
          *(_DWORD *)(v32 + 184) = -1;
          v65 = *(unsigned int *)(v32 + 160);
          if ((_DWORD)v65 != -1)
            ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v65])(&v99, v32 + 152);
          *(_DWORD *)(v32 + 160) = -1;
          v66 = *(unsigned int *)(v32 + 136);
          if ((_DWORD)v66 != -1)
            ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v66])(&v99, v32 + 128);
          *(_DWORD *)(v32 + 136) = -1;
          v67 = *(unsigned int *)(v32 + 112);
          if ((_DWORD)v67 != -1)
            ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v67])(&v99, v32 + 104);
          *(_DWORD *)(v32 + 112) = -1;
          if (*(_BYTE *)(v32 + 100) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 96));
          }
          if (*(_BYTE *)(v32 + 92) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 88));
          }
          if (*(_BYTE *)(v32 + 84) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 80));
          }
          if (*(_BYTE *)(v32 + 76) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 72));
          }
          if (*(_BYTE *)(v32 + 68) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 64));
          }
          if (*(_BYTE *)(v32 + 60) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 56));
          }
          if (*(_BYTE *)(v32 + 52) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 48));
          }
          if (*(_BYTE *)(v32 + 44) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 40));
          }
          if (*(_BYTE *)(v32 + 36) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 32));
          }
          if (*(_BYTE *)(v32 + 28) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 24));
          }
          if (*(_BYTE *)(v32 + 20) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 16));
          }
          if (*(_BYTE *)(v32 + 12) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 8));
          }
          WTF::fastFree((WTF *)v32, a2);
        }
        else
        {
          --*(_DWORD *)v32;
        }
      }
      v33 = *((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
        {
          v60 = *(unsigned int *)(v33 + 40);
          if ((_DWORD)v60 != -1)
            ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v60])(&v99, v33 + 32);
          *(_DWORD *)(v33 + 40) = -1;
          v61 = *(unsigned int *)(v33 + 24);
          if ((_DWORD)v61 != -1)
            ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v61])(&v99, v33 + 16);
          *(_DWORD *)(v33 + 24) = -1;
          v62 = *(WebCore::FillLayer **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 1)
            {
              WebCore::FillLayer::~FillLayer(v62);
              WTF::fastFree(v93, v94);
            }
            else
            {
              --*(_DWORD *)v62;
            }
          }
          WTF::fastFree((WTF *)v33, a2);
        }
        else
        {
          --*(_DWORD *)v33;
        }
      }
      v34 = *((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
        {
          if (*(_BYTE *)(v34 + 56) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + 52));
          }
          if (*(_BYTE *)(v34 + 48) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + 44));
          }
          if (*(_BYTE *)(v34 + 40) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + 36));
          }
          if (*(_BYTE *)(v34 + 32) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + 28));
          }
          if (*(_BYTE *)(v34 + 24) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + 20));
          }
          if (*(_BYTE *)(v34 + 16) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + 12));
          }
          if (*(_BYTE *)(v34 + 8) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v34 + 4));
          }
          WTF::fastFree((WTF *)v34, a2);
        }
        else
        {
          --*(_DWORD *)v34;
        }
      }
      this = (const WebCore::RenderStyle *)WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = *((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFE0 | *((_QWORD *)v3 + 2) & 0x1FLL;
  *((_QWORD *)v4 + 2) = v7;
  v8 = v7 & 0xFFFFFFFFFFFFFC1FLL | (32 * ((*((_QWORD *)v3 + 2) >> 5) & 0x1FLL));
  *((_QWORD *)v4 + 2) = v8;
  v9 = v8 & 0xFFFFFFFFFFFFE3FFLL | (((*((_QWORD *)v3 + 2) >> 10) & 7) << 10);
  *((_QWORD *)v4 + 2) = v9;
  v10 = v9 & 0xFFFFFFFFFFFF1FFFLL | ((unint64_t)(HIBYTE(*((_WORD *)v3 + 8)) >> 5) << 13);
  *((_QWORD *)v4 + 2) = v10;
  v11 = v10 & 0xFFFFFFFFFFF8FFFFLL | (((*((_QWORD *)v3 + 2) >> 16) & 7) << 16);
  *((_QWORD *)v4 + 2) = v11;
  v12 = v11 & 0xFFFFFFFFFFC7FFFFLL | (((*((_QWORD *)v3 + 2) >> 19) & 7) << 19);
  *((_QWORD *)v4 + 2) = v12;
  v13 = v12 & 0xFFFFFFFFFE3FFFFFLL | (((*((_QWORD *)v3 + 2) >> 22) & 7) << 22);
  *((_QWORD *)v4 + 2) = v13;
  v14 = v13 & 0xFFFFFFFFF1FFFFFFLL | (((*((_QWORD *)v3 + 2) >> 25) & 7) << 25);
  *((_QWORD *)v4 + 2) = v14;
  v15 = v14 & 0xFFFFFFFFEFFFFFFFLL | (((*((_QWORD *)v3 + 2) >> 28) & 1) << 28);
  *((_QWORD *)v4 + 2) = v15;
  v16 = v15 & 0xFFFFFFF0FFFFFFFFLL | ((HIDWORD(*((_QWORD *)v3 + 2)) & 0xFLL) << 32);
  *((_QWORD *)v4 + 2) = v16;
  v17 = v16 & 0xFFFFFFFFDFFFFFFFLL | (((*((_QWORD *)v3 + 2) >> 29) & 1) << 29);
  *((_QWORD *)v4 + 2) = v17;
  v18 = v17 & 0xFFFFFFFFBFFFFFFFLL | (((*((_QWORD *)v3 + 2) >> 30) & 1) << 30);
  *((_QWORD *)v4 + 2) = v18;
  v19 = v18 & 0xFFFFFFEFFFFFFFFFLL | (((*((_QWORD *)v3 + 2) >> 36) & 1) << 36);
  *((_QWORD *)v4 + 2) = v19;
  v20 = v19 & 0xFFFFFFDFFFFFFFFFLL | (((*((_QWORD *)v3 + 2) >> 37) & 1) << 37);
  *((_QWORD *)v4 + 2) = v20;
  v21 = v20 & 0xFFFFFFBFFFFFFFFFLL | (((*((_QWORD *)v3 + 2) >> 38) & 1) << 38);
  *((_QWORD *)v4 + 2) = v21;
  *((_QWORD *)v4 + 2) = v21 & 0xFFFFFFFF7FFFFFFFLL | (((*((_QWORD *)v3 + 2) >> 31) & 1) << 31);
  v22 = *((_QWORD *)v4 + 7);
  v23 = *((_QWORD *)v3 + 7);
  if (v22 != v23)
  {
    v24 = *(_QWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v23 + 16);
    if (v24 != v25)
    {
      if (*(float *)(v24 + 4) != *(float *)(v25 + 4))
        goto LABEL_38;
      v26 = *(unsigned int *)(v24 + 16);
      v27 = *(_DWORD *)(v25 + 16);
      v29 = v27 == (_DWORD)v26 && v27 != -1;
      if ((_DWORD)v26 == -1 || !v29)
      {
        v35 = v27 == -1;
        if ((_DWORD)v26 == -1)
          v36 = v35;
        else
          v36 = v29;
        if (!v36)
          goto LABEL_38;
      }
      else
      {
        v99 = &v98;
        if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v26])(&v99, v24 + 8, v25 + 8) & 1) == 0)goto LABEL_38;
      }
      v70 = *(unsigned int *)(v24 + 32);
      v71 = *(_DWORD *)(v25 + 32);
      v73 = v71 == (_DWORD)v70 && v71 != -1;
      if ((_DWORD)v70 == -1 || !v73)
      {
        v76 = v71 == -1;
        if ((_DWORD)v70 == -1)
          v77 = v76;
        else
          v77 = v73;
        if (!v77)
          goto LABEL_38;
      }
      else
      {
        v99 = &v98;
        if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v70])(&v99, v24 + 24, v25 + 24) & 1) == 0)goto LABEL_38;
      }
      if (!WTF::equal(*(WTF **)(v24 + 40), *(const WTF::StringImpl **)(v25 + 40), a3)
        || !WTF::equal(*(WTF **)(v24 + 48), *(const WTF::StringImpl **)(v25 + 48), v78)
        || *(unsigned __int8 *)(v24 + 56) != *(unsigned __int8 *)(v25 + 56)
        || *(unsigned __int8 *)(v24 + 57) != *(unsigned __int8 *)(v25 + 57))
      {
        goto LABEL_38;
      }
    }
    v79 = *(const WebCore::RenderStyle **)(v22 + 24);
    a2 = *(const WebCore::RenderStyle **)(v23 + 24);
    if (v79 != a2)
    {
      WebCore::StyleStrokeData::operator==((uint64_t)v79, (uint64_t)a2, a3);
      if (!v88)
        goto LABEL_38;
    }
    v80 = *(_QWORD *)(v22 + 32);
    v81 = *(_QWORD *)(v23 + 32);
    if (v80 != v81
      && (*(float *)(v80 + 4) != *(float *)(v81 + 4)
       || (unsigned __int16)*(_DWORD *)(v80 + 8) != (unsigned __int16)*(_DWORD *)(v81 + 8)))
    {
      goto LABEL_38;
    }
    v82 = *(_QWORD *)(v22 + 48);
    v83 = *(_QWORD *)(v23 + 48);
    if (v82 == v83)
    {
LABEL_133:
      v84 = *(_QWORD *)(v22 + 56);
      v85 = *(_QWORD *)(v23 + 56);
      if (v84 == v85 || WebCore::StyleMiscData::operator==(v84, v85))
      {
        v86 = *(_QWORD *)(v22 + 64);
        v87 = *(_QWORD *)(v23 + 64);
        if (v86 == v87 || WebCore::StyleLayoutData::operator==(v86, v87))
        {
          this = *(const WebCore::RenderStyle **)(v22 + 40);
          a2 = *(const WebCore::RenderStyle **)(v23 + 40);
          if (this == a2
            || (this = (const WebCore::RenderStyle *)WebCore::StyleInheritedResourceData::operator==((WTF **)this, (const WTF::StringImpl **)a2, a3), (_DWORD)this))
          {
            if (*(unsigned __int16 *)(v22 + 4) == *(unsigned __int16 *)(v23 + 4)
              && *(_DWORD *)(v22 + 8) == *(_DWORD *)(v23 + 8))
            {
              return this;
            }
          }
        }
      }
      goto LABEL_38;
    }
    if (*(float *)(v82 + 4) == *(float *)(v83 + 4))
    {
      v89 = *(unsigned int *)(v82 + 16);
      v90 = *(_DWORD *)(v83 + 16);
      v92 = v90 == (_DWORD)v89 && v90 != -1;
      if ((_DWORD)v89 == -1 || !v92)
      {
        v97 = v90 == -1;
        if ((_DWORD)v89 != -1)
          v97 = v92;
        if (!v97)
          goto LABEL_38;
        goto LABEL_133;
      }
      v99 = &v98;
      if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v89])(&v99, v82 + 8, v83 + 8) & 1) != 0)goto LABEL_133;
    }
LABEL_38:
    v37 = *((_QWORD *)v4 + 7);
    if (*(_DWORD *)v37 == 1)
    {
      v38 = *((_QWORD *)v4 + 7);
    }
    else
    {
      v38 = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)v38 = 1;
      *(_DWORD *)(v38 + 4) = *(_DWORD *)(v37 + 4);
      *(_DWORD *)(v38 + 8) = *(_DWORD *)(v37 + 8);
      v45 = *(_DWORD **)(v37 + 16);
      ++*v45;
      *(_QWORD *)(v38 + 16) = v45;
      v46 = *(_DWORD **)(v37 + 24);
      ++*v46;
      *(_QWORD *)(v38 + 24) = v46;
      v47 = *(_DWORD **)(v37 + 32);
      ++*v47;
      *(_QWORD *)(v38 + 32) = v47;
      v48 = *(_DWORD **)(v37 + 40);
      ++*v48;
      *(_QWORD *)(v38 + 40) = v48;
      v49 = *(_DWORD **)(v37 + 48);
      ++*v49;
      *(_QWORD *)(v38 + 48) = v49;
      v50 = *(_DWORD **)(v37 + 56);
      ++*v50;
      *(_QWORD *)(v38 + 56) = v50;
      v51 = *(_DWORD **)(v37 + 64);
      ++*v51;
      *(_QWORD *)(v38 + 64) = v51;
      v52 = (WebCore::SVGRenderStyle *)*((_QWORD *)v4 + 7);
      *((_QWORD *)v4 + 7) = v38;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          WebCore::SVGRenderStyle::~SVGRenderStyle(v52, a2);
          WTF::fastFree(v74, v75);
          v38 = *((_QWORD *)v4 + 7);
        }
        else
        {
          --*(_DWORD *)v52;
        }
      }
    }
    v39 = *((_QWORD *)v3 + 7);
    *(_DWORD *)(v38 + 8) = *(_DWORD *)(v39 + 8);
    v40 = *(_DWORD **)(v39 + 48);
    ++*v40;
    v41 = *(unsigned int **)(v38 + 48);
    *(_QWORD *)(v38 + 48) = v40;
    if (v41)
    {
      if (*v41 == 1)
      {
        v55 = v41[4];
        if ((_DWORD)v55 != -1)
          ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v55])(&v99, v41 + 2);
        v41[4] = -1;
        WTF::fastFree((WTF *)v41, a2);
      }
      else
      {
        --*v41;
      }
    }
    v42 = *(_DWORD **)(v39 + 56);
    ++*v42;
    v43 = *(unsigned int **)(v38 + 56);
    *(_QWORD *)(v38 + 56) = v42;
    if (v43)
    {
      if (*v43 == 1)
      {
        v53 = v43[8];
        if ((_DWORD)v53 != -1)
          ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v53])(&v99, v43 + 6);
        v43[8] = -1;
        v54 = v43[4];
        if ((_DWORD)v54 != -1)
          ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v54])(&v99, v43 + 2);
        v43[4] = -1;
        WTF::fastFree((WTF *)v43, a2);
      }
      else
      {
        --*v43;
      }
    }
    v44 = *(_DWORD **)(v39 + 64);
    ++*v44;
    this = *(const WebCore::RenderStyle **)(v38 + 64);
    *(_QWORD *)(v38 + 64) = v44;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::StyleLayoutData::~StyleLayoutData(this);
        return (const WebCore::RenderStyle *)WTF::fastFree(v56, v57);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  return this;
}

uint64_t ___ZN7WebCoreL62initMediaAccessibilityMACaptionAppearanceCopySelectedLanguagesE25MACaptionAppearanceDomain_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceCopySelectedLanguages");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopySelectedLanguages = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain))result;
  if (!result)
  {
    result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL55initMediaAccessibilityMACaptionAppearanceGetDisplayTypeE25MACaptionAppearanceDomain_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceGetDisplayType");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetDisplayType = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initUIKitUIAccessibilityIsInvertColorsEnabledEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityIsInvertColorsEnabled");
  PAL::softLinkUIKitUIAccessibilityIsInvertColorsEnabled = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 70;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::LocalFrameView::setScrollPinningBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t v6;
  uint64_t v8;

  *(_BYTE *)(a1 + 1329) = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 24);
  if (v3)
  {
    v4 = *(WebCore::Page **)(v3 + 8);
    if (v4)
    {
      v6 = WebCore::Page::scrollingCoordinator(v4);
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 432))(v6, a2);
    }
  }
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1);
  return WebCore::ScrollView::updateScrollbars(a1, (const WebCore::IntPoint *)&v8);
}

void WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchPendingEvents(WTF **this, _QWORD *a2)
{
  uint64_t v4;
  WTF *v5;
  int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  WebCore **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WebCore **v14;
  WebCore *v15;
  _QWORD *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF *v22;

  if (!*((_DWORD *)this + 21))
  {
    if (((unint64_t)this[4] & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)this);
      v4 = *((unsigned int *)this + 21);
      v5 = this[7];
      v6 = *((_DWORD *)this + 16);
      v7 = *((_DWORD *)this + 17);
      this[7] = 0;
      this[8] = 0;
      if ((_DWORD)v4)
        WTF::VectorTypeOperations<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::DispatchTask>::destruct(this[9], (WTF *)((char *)this[9] + 16 * v4));
    }
    else
    {
      v5 = this[7];
      v6 = *((_DWORD *)this + 16);
      v7 = *((_DWORD *)this + 17);
      this[7] = 0;
      this[8] = 0;
    }
    v8 = this[9];
    if (v8)
    {
      this[9] = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v8, a2);
    }
    this[9] = v5;
    *((_DWORD *)this + 20) = v6;
    *((_DWORD *)this + 21) = v7;
    if (v7)
    {
      if (a2)
      {
        v12 = 16 * v7;
        v13 = (WTF::StringImpl **)((char *)v5 + 8);
        do
        {
          v14 = (WebCore **)*(v13 - 1);
          if (v14 && v14[1])
          {
            *(v13 - 1) = 0;
            v15 = v14[1];
            v16 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 2) + 8) + 40) + 8) + 528);
            if (v16)
            {
              v16 = (_QWORD *)v16[1];
              if (v16)
              {
                v16 = (_QWORD *)v16[3];
                if (v16)
                  v16 = (_QWORD *)v16[1];
              }
            }
            if (v16 == a2)
              WebCore::ImageLoader::dispatchPendingEvent(v14[1], v13);
            else
              WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchEventSoon((uint64_t)this, v15, v13);
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree((WTF *)v14, a2);
            else
              --*(_DWORD *)v14;
          }
          v13 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      else
      {
        v9 = 16 * v7;
        v10 = (_QWORD *)((char *)v5 + 8);
        do
        {
          v11 = (WebCore **)*(v10 - 1);
          if (v11 && v11[1])
          {
            *(v10 - 1) = 0;
            WebCore::ImageLoader::dispatchPendingEvent(v11[1], v10);
            if (*(_DWORD *)v11 == 1)
              WTF::fastFree((WTF *)v11, a2);
            else
              --*(_DWORD *)v11;
          }
          v10 += 2;
          v9 -= 16;
        }
        while (v9);
      }
      v6 = *((_DWORD *)this + 20);
    }
    if (v6)
    {
      v17 = *((unsigned int *)this + 21);
      v18 = this[9];
      if ((_DWORD)v17)
      {
        v19 = 16 * v17;
        v20 = (WTF::StringImpl **)((char *)v18 + 8);
        do
        {
          v21 = *v20;
          *v20 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = *(v20 - 1);
          *(v20 - 1) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
              WTF::fastFree(v22, a2);
            else
              --*(_DWORD *)v22;
          }
          v20 += 2;
          v19 -= 16;
        }
        while (v19);
        *((_DWORD *)this + 21) = 0;
        v18 = this[9];
      }
      if (v18)
      {
        this[9] = 0;
        *((_DWORD *)this + 20) = 0;
        WTF::fastFree(v18, a2);
      }
    }
  }
}

WebCore *WebCore::ImageLoader::dispatchPendingEvent(WebCore *result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;

  v3 = (uint64_t)result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(WebCore **)(v5 + 96)) == 0)
  {
    result = (WebCore *)WebCore::threadGlobalDataSlow(result);
    v6 = result;
  }
  v7 = *((_QWORD *)v6 + 5);
  if (!v7)
  {
    result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *((_QWORD *)v6 + 5);
  }
  if (*a2 == *(_QWORD *)(v7 + 1104) && (*(_BYTE *)(v3 + 128) & 2) != 0)
  {
    v8 = *(_QWORD *)(v3 + 24);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 8))
      {
        *(_BYTE *)(v3 + 128) &= ~2u;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 40) + 8);
        if (*(_QWORD *)(v9 + 1944) && !*(_BYTE *)(v9 + 3405))
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
        result = (WebCore *)WebCore::ImageLoader::updatedHasPendingEvent(v3);
      }
    }
  }
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (v11 = *(WebCore **)(v10 + 96)) == 0)
  {
    result = (WebCore *)WebCore::threadGlobalDataSlow(result);
    v11 = result;
  }
  v12 = *((_QWORD *)v11 + 5);
  if (!v12)
  {
    result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *((_QWORD *)v11 + 5);
  }
  if (*a2 == *(_QWORD *)(v12 + 784))
    return (WebCore *)WebCore::ImageLoader::dispatchPendingErrorEvent(v3, a2);
  return result;
}

uint64_t WebCore::HTMLImageLoader::dispatchLoadEvent(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  char **v20;
  char *v21;

  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
    if (v3 == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
      return this;
    if (v3 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      this = WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [2]>::contains<WTF::String>((unsigned __int8 ***)WebCore::MIMETypeRegistry::isPDFMIMEType(WTF::String const&)::set, (uint64_t *)(v2 + 208));
      if ((this & 1) != 0)
        return this;
    }
  }
  v4 = *(_QWORD *)(v1 + 24);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8), (*(_WORD *)(v5 + 557) >> 5) - 3 > 1))
  {
    v11 = *(uint64_t **)(v5 + 400);
    if (!v11)
    {
      v12 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v12 != -1)
      {
        v21 = &v19;
        v20 = &v21;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v11 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v11, 1);
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
    if (*((__int16 *)v11 + 68) < 400
      || (*(_WORD *)(v6 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      v10 = (_QWORD *)(v15 + 1104);
      goto LABEL_27;
    }
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
  }
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = (_QWORD *)(v9 + 784);
LABEL_27:
  v16 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
  *(_DWORD *)(v16 + 16) = 1;
  *(_QWORD *)v16 = off_1E33A4B48;
  *(_QWORD *)(v16 + 8) = 0;
  *(_DWORD *)(v16 + 20) = *(_DWORD *)(v16 + 20) & 0xFFC00000 | 0x1E8200 | (*v10 != 0);
  v18 = (_DWORD *)*v10;
  if (*v10)
    *v18 += 2;
  *(_QWORD *)(v16 + 24) = v18;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = 0;
  this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v16);
  if (*(_DWORD *)(v16 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  --*(_DWORD *)(v16 + 16);
  return this;
}

WTF::StringImpl *WebCore::ImageLoader::updateFromElement(uint64_t a1, int a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __int16 v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  __int128 v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WebCore::Document *v79;
  char v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WebCore::InspectorDOMAgent *v83;
  void *v85;
  WebCore::Node *v86;
  WebCore::Node *v87;
  char v88;
  WTF *isLazyLoadable;
  uint64_t isMainThread;
  uint64_t v91;
  uint64_t *v92;
  void *v93;
  uint64_t v94;
  _BOOL4 v95;
  _QWORD *v96;
  WebCore::CachedResource *v97;
  void *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  void *v102;
  CFTypeRef v103;
  WebCore::FormData *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  WTF::StringImpl **v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  char v129;
  WebCore::CachedResource *v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  uint64_t v146;
  WebCore::SecurityOrigin *v147;
  uint64_t v148;
  int v149;
  int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  char v155;
  WTF::StringImpl *v156;
  __int128 v157;
  __int128 v158;
  _QWORD v159[7];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  int v163;
  char v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WebCore::FormData *v167;
  int v168;
  char v169;
  char v170;
  CFTypeRef cf;
  WTF::StringImpl *v172;
  __int128 v173;
  __int128 v174;
  WTF::StringImpl *v175;
  unsigned int *v176;
  WTF::StringImpl *v177;
  unsigned int *v178;
  WebCore::CachedResourceLoader *v179;
  _BYTE v180[80];
  unsigned int v181;
  WTF::StringImpl *v182[26];
  unsigned __int8 v183;
  unsigned __int8 v184;
  WebCore::Node *v185;
  char v186;
  _BYTE v187[7];
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  char v196;
  __int16 v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  result = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8);
  v4 = *(_QWORD *)(*((_QWORD *)result + 5) + 8);
  v5 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  if (!*(_QWORD *)(v4 + 1944) || *(_BYTE *)(v4 + 3405))
    goto LABEL_27;
  result = *(WTF::StringImpl **)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 640))(result);
  if (result)
    *(_DWORD *)result += 2;
  v177 = result;
  v9 = (WTF::StringImpl **)(a1 + 96);
  v8 = *(WTF::StringImpl **)(a1 + 96);
  if (v8 && *((_DWORD *)v8 + 1) && result == v8)
    goto LABEL_22;
  v176 = 0;
  if (!result)
    goto LABEL_20;
  v10 = (unsigned __int8 *)*((_QWORD *)result + 1);
  v11 = *((unsigned int *)result + 1);
  if ((*((_BYTE *)result + 16) & 4) != 0)
  {
    if ((_DWORD)v11)
    {
      do
      {
        v12 = *v10;
        v13 = v12 > 0x20;
        v14 = (1 << v12) & 0x100003600;
        if (v13 || v14 == 0)
          goto LABEL_45;
        ++v10;
      }
      while (--v11);
    }
  }
  else if ((_DWORD)v11)
  {
    v18 = 2 * v11;
    while (1)
    {
      v19 = *(unsigned __int16 *)v10;
      v13 = v19 > 0x20;
      v20 = (1 << v19) & 0x100003600;
      if (v13 || v20 == 0)
        break;
      v10 += 2;
      v18 -= 2;
      if (!v18)
        goto LABEL_14;
    }
LABEL_45:
    {
      WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
    }
    *(_DWORD *)v187 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
    *(_DWORD *)&v187[3] = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                 + 3);
    v22 = qword_1ECE90818;
    if (qword_1ECE90818)
      *(_DWORD *)qword_1ECE90818 += 2;
    v188 = v22;
    v189 = xmmword_1ECE90820;
    v190 = *(_OWORD *)algn_1ECE90830;
    v23 = dword_1ECE90854;
    v192 = 0;
    v193 = 0;
    v191 = qword_1ECE90840;
    v194 = dword_1ECE90854;
    if (dword_1ECE90854)
    {
      if (dword_1ECE90854 >> 28)
      {
        __break(0xC471u);
        goto LABEL_309;
      }
      v135 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
      v193 = v23;
      v192 = v135;
      if (dword_1ECE90854)
      {
        v136 = qword_1ECE90848;
        v137 = qword_1ECE90848 + 16 * dword_1ECE90854;
        do
        {
          v138 = *(_DWORD **)v136;
          if (*(_QWORD *)v136)
            *v138 += 2;
          *(_QWORD *)v135 = v138;
          *(_BYTE *)(v135 + 8) = *(_BYTE *)(v136 + 8);
          v136 += 16;
          v135 += 16;
        }
        while (v136 != v137);
      }
    }
    v195 = dword_1ECE90858;
    v196 = byte_1ECE9085C;
    LOBYTE(v197) = 0;
    v200 = 0;
    if (byte_1ECE90878)
    {
      v197 = word_1ECE90860;
      v24 = qword_1ECE90868;
      if (qword_1ECE90868)
        *(_DWORD *)qword_1ECE90868 += 2;
      v198 = v24;
      v25 = qword_1ECE90870;
      if (qword_1ECE90870)
        *(_DWORD *)qword_1ECE90870 += 2;
      v199 = v25;
      v200 = 1;
    }
    v201 = xmmword_1ECE90880;
    v26 = qword_1ECE90890;
    if (qword_1ECE90890)
      *(_DWORD *)qword_1ECE90890 += 2;
    v202 = v26;
    v27 = *(_QWORD *)(a1 + 16);
    v28 = **(_QWORD **)(*(_QWORD *)(v27 + 8) + 40);
    if (v28)
      v29 = (*(_WORD *)(v28 + 28) & 0x80) == 0;
    else
      v29 = 1;
    if (v29)
    {
      v115 = 256;
      v114 = *(_DWORD *)((char *)&v201 + 2);
    }
    else
    {
      v114 = *(_DWORD *)((char *)&v201 + 2);
      v115 = (*(_BYTE *)(v28 + 193) != 0) << 8;
    }
    *(_DWORD *)((char *)&v201 + 2) = v115 | v114 & 0xFFFFFEFF;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v27 + 8) + 200))(*(_QWORD *)(v27 + 8)))
      v30 = 0x800000;
    else
      v30 = 0;
    *(_DWORD *)((char *)&v201 + 2) = *(_DWORD *)((_BYTE *)&v201 + 2) & 0xFF7FF7FF | v30;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)))
      v31 = 0x10000;
    else
      v31 = 0;
    *(_DWORD *)((char *)&v201 + 2) = *(_DWORD *)((_BYTE *)&v201 + 2) & 0xFFFCFFFF | v31;
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((*(_BYTE *)(v32 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      *(_DWORD *)(v32 + 24) += 2;
      v33 = *(_QWORD *)(v32 + 104);
      if (v33
        && ((v34 = *(_DWORD *)(v33 + 4), (v34 & 1) != 0)
          ? (v35 = *(_QWORD *)(v33 + 40), LODWORD(v36) = *(_DWORD *)(v33 + 52))
          : (v35 = v33 + 32, LODWORD(v36) = v34 >> 5),
            (_DWORD)v36))
      {
        v36 = v36;
        v37 = (uint64_t *)(v35 + 8);
        while (1)
        {
          v38 = *(v37 - 1);
          if (v38 == WebCore::HTMLNames::referrerpolicyAttr
            || *(_QWORD *)(v38 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
            && *(_QWORD *)(v38 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
          {
            break;
          }
          v37 += 2;
          if (!--v36)
          {
            v37 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v37 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v39 = *v37;
      if (v39)
      {
        v40 = *(unsigned __int16 **)(v39 + 8);
        v41 = *(unsigned int *)(v39 + 4) | ((unint64_t)((*(_DWORD *)(v39 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v40 = 0;
        v41 = 0x100000000;
      }
      v42 = 2;
      v43 = (unsigned __int16)WebCore::parseReferrerPolicy(v40, v41, 2);
      if (v43 <= 0x100)
        LOBYTE(v43) = 0;
      v187[5] = v43;
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 8) + 680) + 672) & 0x8000000000000000) != 0)
      {
        v44 = *(_QWORD *)(v32 + 104);
        if (v44
          && ((v45 = *(_DWORD *)(v44 + 4), (v45 & 1) != 0)
            ? (v46 = *(_QWORD *)(v44 + 40), LODWORD(v47) = *(_DWORD *)(v44 + 52))
            : (v46 = v44 + 32, LODWORD(v47) = v45 >> 5),
              (_DWORD)v47))
        {
          v47 = v47;
          v48 = (uint64_t *)(v46 + 8);
          while (1)
          {
            v49 = *(v48 - 1);
            if (v49 == WebCore::HTMLNames::fetchpriorityAttr
              || *(_QWORD *)(v49 + 24) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 24)
              && *(_QWORD *)(v49 + 32) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 32))
            {
              break;
            }
            v48 += 2;
            if (!--v47)
            {
              v48 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
        }
        else
        {
          v48 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        }
        v50 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>(v48);
        if ((v50 & 0xFF00) != 0)
          v51 = v50;
        else
          v51 = 2;
        v42 = v51;
      }
      v52 = *(_DWORD *)((_BYTE *)&v201 + 2) & 0xF9FFFFFF | ((v42 & 3) << 25);
      *(_DWORD *)((char *)&v201 + 2) = v52;
      v53 = *(_QWORD *)(v32 + 104);
      if (v53
        && ((v54 = *(_DWORD *)(v53 + 4), (v54 & 1) != 0)
          ? (v55 = *(_QWORD *)(v53 + 40), LODWORD(v56) = *(_DWORD *)(v53 + 52))
          : (v55 = v53 + 32, LODWORD(v56) = v54 >> 5),
            (_DWORD)v56))
      {
        v56 = v56;
        v57 = (_QWORD *)(v55 + 8);
        while (1)
        {
          v58 = *(v57 - 1);
          if (v58 == WebCore::HTMLNames::srcsetAttr
            || *(_QWORD *)(v58 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 24)
            && *(_QWORD *)(v58 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 32))
          {
            break;
          }
          v57 += 2;
          if (!--v56)
          {
            v57 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v57 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (*v57 || (v59 = *(_QWORD *)(v32 + 272)) != 0 && *(_QWORD *)(v59 + 8))
      {
        v60 = 0;
        *(_DWORD *)((char *)&v201 + 2) = v52 & 0xFFFF1FFF | 0x4000;
      }
      else
      {
        v60 = 0;
      }
      v61 = 1;
    }
    else
    {
      v61 = 0;
      v32 = 0;
      v60 = 1;
    }
    v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 104);
    v63 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    if (v62)
    {
      v64 = *(_DWORD *)(v62 + 4);
      if ((v64 & 1) != 0)
      {
        v65 = *(_QWORD *)(v62 + 40);
        LODWORD(v66) = *(_DWORD *)(v62 + 52);
      }
      else
      {
        v65 = v62 + 32;
        LODWORD(v66) = v64 >> 5;
      }
      if ((_DWORD)v66)
      {
        v66 = v66;
        v67 = (WTF::StringImpl **)(v65 + 8);
        while (1)
        {
          v68 = (uint64_t)*(v67 - 1);
          if (v68 == WebCore::HTMLNames::crossoriginAttr
            || *(_QWORD *)(v68 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
            && *(_QWORD *)(v68 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
          {
            break;
          }
          v67 += 2;
          if (!--v66)
          {
            v67 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v67 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
    }
    else
    {
      v67 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    v69 = *v67;
    if (v69)
      *(_DWORD *)v69 += 2;
    v175 = v69;
    v172 = 0;
    WTF::URL::invalidate((WTF::URL *)&v172);
    v71 = *(_QWORD *)(a1 + 24);
    if (v71 && (v72 = *(_QWORD *)(v71 + 8)) != 0 && v177 == *(WTF::StringImpl **)(a1 + 104))
    {
      v116 = (WTF::StringImpl **)(v72 + 160);
      if ((*(_BYTE *)(v72 + 344) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v72 + 160));
        v116 = (WTF::StringImpl **)(v72 + 160);
        *(_BYTE *)(v72 + 344) |= 1u;
      }
      v117 = *v116;
      if (*v116)
        *(_DWORD *)v117 += 2;
      v118 = v172;
      v172 = v117;
      if (v118)
      {
        if (*(_DWORD *)v118 == 2)
          WTF::StringImpl::destroy(v118, v70);
        else
          *(_DWORD *)v118 -= 2;
      }
      v173 = *(_OWORD *)(v72 + 168);
      v174 = *(_OWORD *)(v72 + 184);
    }
    else
    {
      if (v61)
      {
        v73 = *(WTF::StringImpl **)(v32 + 200);
        if (v73)
          *(_DWORD *)v73 += 2;
        v74 = v172;
        v172 = v73;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, v70);
          else
            *(_DWORD *)v74 -= 2;
          v73 = v172;
        }
        v75 = *(_OWORD *)(v32 + 224);
        v173 = *(_OWORD *)(v32 + 208);
        v174 = v75;
        if (!v73)
        {
          WebCore::ImageLoader::didUpdateCachedImage(a1, a2, (uint64_t *)&v176);
          v121 = v172;
          v172 = 0;
          if (v121)
          {
            if (*(_DWORD *)v121 == 2)
              WTF::StringImpl::destroy(v121, v120);
            else
              *(_DWORD *)v121 -= 2;
          }
          v122 = v175;
          v175 = 0;
          if (v122)
          {
            if (*(_DWORD *)v122 == 2)
              WTF::StringImpl::destroy(v122, v120);
            else
              *(_DWORD *)v122 -= 2;
          }
          WebCore::HTMLImageElement::deref(v32);
          WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v187, v123);
          goto LABEL_21;
        }
      }
      else
      {
        WebCore::Document::completeURL((WebCore::Document *)v4, &v177, v4 + 848, 0, (WTF::URL *)v182);
        WTF::URL::operator=((uint64_t)&v172, (uint64_t *)v182);
        v119 = v182[0];
        v182[0] = 0;
        if (v119)
        {
          if (*(_DWORD *)v119 == 2)
            WTF::StringImpl::destroy(v119, v70);
          else
            *(_DWORD *)v119 -= 2;
        }
      }
      v76 = v177;
      if (v177)
        *(_DWORD *)v177 += 2;
      v77 = *(WTF::StringImpl **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v76;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v70);
        else
          *(_DWORD *)v77 -= 2;
      }
    }
    v78 = v172;
    if (v172)
      *(_DWORD *)v172 += 2;
    v156 = v78;
    v157 = v173;
    v158 = v174;
    v159[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v159);
    v159[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v159[6] = v182[0];
    v160 = 0u;
    v161 = 0u;
    v162 = 0u;
    v163 = 0x10000;
    v80 = v164 & 0x80 | 4;
    v164 = v80;
    v165 = 0;
    v81 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *(_DWORD *)v81 += 2;
      v80 = v164;
    }
    LODWORD(v82) = 0;
    v166 = v81;
    v167 = 0;
    LOBYTE(v168) = 0;
    v169 = 0;
    v170 = v170 & 0xE0 | 5;
    v164 = v80 | 2;
    cf = 0;
    v83 = *(WebCore::InspectorDOMAgent **)(*(_QWORD *)(a1 + 16) + 8);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v82 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)v83 + 5) + 8), v79);
      if (v82)
        LODWORD(v82) = WebCore::InspectorInstrumentation::identifierForNodeImpl(v82, v83);
    }
    v168 = v82;
    v169 = 1;
    WebCore::createPotentialAccessControlRequest((WebCore::ResourceRequest *)&v156, (WTF::StringImpl *)v187, v4, (uint64_t *)&v175, 0, (uint64_t)v182);
    v86 = *(WebCore::Node **)(*(_QWORD *)(a1 + 16) + 8);
    *((_DWORD *)v86 + 6) += 2;
    v87 = v185;
    v185 = v86;
    if (v87)
    {
      if (*((_DWORD *)v87 + 6) == 2)
      {
        if ((*((_WORD *)v87 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v87);
      }
      else
      {
        *((_DWORD *)v87 + 6) -= 2;
      }
    }
    if ((*(_BYTE *)(a1 + 128) & 0x10) == 0)
    {
      v88 = v61 ^ 1;
      if (*(_BYTE *)(a1 + 129))
        v88 = 1;
      if ((v88 & 1) != 0)
        goto LABEL_162;
      isLazyLoadable = (WTF *)WebCore::HTMLImageElement::isLazyLoadable((WebCore::HTMLImageElement *)v32);
      if (!(_DWORD)isLazyLoadable || (*(_QWORD *)(*(_QWORD *)(v4 + 680) + 680) & 0x2000000000000) == 0)
        goto LABEL_162;
      isMainThread = WTF::isMainThread(isLazyLoadable);
      if ((isMainThread & 1) != 0)
      {
        {
          isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
        }
        v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 528) + 8) + 24) + 8) + 1008);
        if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19441A060);
        }
        v92 = (uint64_t *)WebCore::MemoryCache::sessionResourceMap((WTF *)&WebCore::MemoryCache::singleton(void)::memoryCache, v91);
        if (!v92)
          goto LABEL_159;
        v94 = WebCore::MemoryCache::resourceForRequestImpl((int)v92, (WebCore::ResourceRequest *)v182, v92);
        if (!v94)
          goto LABEL_159;
        v139 = v94;
        v140 = *(unsigned int **)(v94 + 8);
        if (v140)
          goto LABEL_313;
        v140 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v140 = 1;
        *((_QWORD *)v140 + 1) = v139;
        v151 = *(unsigned int **)(v139 + 8);
        *(_QWORD *)(v139 + 8) = v140;
        if (!v151)
          goto LABEL_313;
        do
        {
          v152 = __ldaxr(v151);
          v153 = v152 - 1;
        }
        while (__stlxr(v153, v151));
        if (!v153)
        {
          atomic_store(1u, v151);
          WTF::fastFree((WTF *)v151, v93);
        }
        v140 = *(unsigned int **)(v139 + 8);
        if (v140)
        {
LABEL_313:
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 + 1, v140));
          v178 = v140;
          v142 = *((_QWORD *)v140 + 1);
          if (v142)
          {
            v179 = (WebCore::CachedResourceLoader *)&v178;
            ++*(_DWORD *)(v142 + 548);
            v143 = *(_QWORD *)(v142 + 488);
            if (!v143
              || !*(_QWORD *)(v143 + 8)
              || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v142 + 464), (uint64_t *)&v179, (uint64_t)v180), (v140 = v178) != 0))
            {
              v144 = *((_QWORD *)v140 + 1);
              if (v144)
              {
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 112))(v144) & 1) == 0)
                {
                  v145 = v178;
                  if (v178)
                  {
                    v146 = *((_QWORD *)v178 + 1);
                    if (!*(_DWORD *)(v146 + 552))
                    {
                      if (*(_BYTE *)(v146 + 17) != 3
                        || (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), (WTF::StringImpl *)v93), WebCore::SecurityOrigin::isSameOriginAs(v147, *(const WebCore::SecurityOrigin **)(*((_QWORD *)v178 + 1) + 512)))&& (v145 = v178) != 0)
                      {
                        v148 = *((_QWORD *)v145 + 1);
                        if (*(unsigned __int8 *)(v148 + 17) == v183)
                        {
                          v149 = *(unsigned __int8 *)(v148 + 18);
                          v150 = v184;
                          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v178, v93);
                          if (v149 == v150)
                            goto LABEL_162;
                          goto LABEL_161;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
LABEL_159:
          v178 = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v178, v93);
LABEL_161:
        *(_BYTE *)(a1 + 129) = 1;
        v186 = 1;
LABEL_162:
        v95 = *(unsigned __int8 *)(a1 + 129) == 1;
        v96 = *(_QWORD **)(v4 + 720);
        if (!v96)
          v96 = (_QWORD *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v4, v85);
        WebCore::CachedResourceLoader::requestImage((WebCore::ResourceRequest *)v182, v96, v95, (uint64_t)v180);
        if (v181)
        {
          v97 = 0;
          v179 = 0;
        }
        else
        {
          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v179, (const WebCore::CachedResourceHandleBase *)v180);
          if (v179)
            v97 = (WebCore::CachedResource *)*((_QWORD *)v179 + 1);
          else
            v97 = 0;
        }
        WebCore::CachedResourceHandleBase::setResource((uint64_t *)&v176, v97);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v179, v98);
        if (v181 != -1)
          (*(&off_1E33F61F0 + v181))((int)&v178, (WebCore::CachedResourceHandleBase *)v180);
LABEL_168:
        if (v176 && *((_QWORD *)v176 + 1)
          || (v110 = *(_QWORD *)(v4 + 528)) != 0
          && (v111 = *(_QWORD *)(v110 + 8)) != 0
          && *(_DWORD *)(*(_QWORD *)(v111 + 280) + 212))
        {
          v100 = *v63;
          if (*v63)
            *(_DWORD *)v100 += 2;
          v101 = *v9;
          *v9 = v100;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, v99);
            else
              *(_DWORD *)v101 -= 2;
          }
        }
        else
        {
          v112 = (uint64_t)WTF::AtomString::operator=((WTF::StringImpl **)(a1 + 96), (WTF::StringImpl *)&v177);
          *(_BYTE *)(a1 + 128) |= 4u;
          {
            v112 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
            *(_OWORD *)(v112 + 72) = 0u;
            *(_OWORD *)(v112 + 56) = 0u;
          }
          v113 = WebCore::eventNames((WebCore *)v112);
          WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchEventSoon((uint64_t)&WebCore::loadEventSender(void)::sender, (_QWORD *)a1, (WTF::StringImpl **)(v113 + 784));
        }
        WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v182, v99);
        v103 = cf;
        cf = 0;
        if (v103)
          CFRelease(v103);
        v104 = v167;
        v167 = 0;
        if (v104)
          WTF::RefCounted<WebCore::FormData>::deref(v104, v102);
        v105 = v166;
        v166 = 0;
        if (v105)
        {
          if (*(_DWORD *)v105 == 2)
            WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v102);
          else
            *(_DWORD *)v105 -= 2;
        }
        v106 = v165;
        v165 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v102);
          else
            *(_DWORD *)v106 -= 2;
        }
        WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v156, (WTF::StringImpl *)v102);
        v108 = v172;
        v172 = 0;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
            WTF::StringImpl::destroy(v108, v107);
          else
            *(_DWORD *)v108 -= 2;
        }
        v109 = v175;
        v175 = 0;
        if (v109)
        {
          if (*(_DWORD *)v109 == 2)
            WTF::StringImpl::destroy(v109, v107);
          else
            *(_DWORD *)v109 -= 2;
        }
        if ((v60 & 1) == 0)
        {
          if (*(_DWORD *)(v32 + 24) == 2)
          {
            if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v32);
          }
          else
          {
            *(_DWORD *)(v32 + 24) -= 2;
          }
        }
        WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v187, v107);
        goto LABEL_20;
      }
      __break(0xC471u);
LABEL_309:
      JUMPOUT(0x19441A040);
    }
    v155 = v60;
    v124 = *(unsigned __int8 **)(v4 + 720);
    if (!v124)
      v124 = (unsigned __int8 *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v4, v85);
    ++*(_DWORD *)v124;
    v179 = (WebCore::CachedResourceLoader *)v124;
    v154 = v124[272];
    WebCore::CachedResourceLoader::setAutoLoadImages((WebCore::CachedResourceLoader *)v124, 0);
    v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 40) + 8) + 528);
    if (v125 && (v126 = *(_QWORD *)(v125 + 8)) != 0 && (v127 = *(_QWORD *)(v126 + 24)) != 0)
    {
      v128 = *(uint64_t **)(v127 + 8);
      if (v128)
      {
        v129 = 0;
        ++*(_DWORD *)v128;
        goto LABEL_253;
      }
    }
    else
    {
      v128 = 0;
    }
    v129 = 1;
LABEL_253:
    v130 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x2E0);
    WebCore::CachedImage::CachedImage((uint64_t)v130, (uint64_t)v182, v128[126], v128[111]);
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)&v176, v130);
    v131 = v176;
    *(_WORD *)(*((_QWORD *)v176 + 1) + 557) = *(_WORD *)(*((_QWORD *)v176 + 1) + 557) & 0xFF1F | 0x20;
    *(_WORD *)(*((_QWORD *)v131 + 1) + 557) |= 0x400u;
    v132 = *((_QWORD *)v131 + 1);
    v133 = (uint64_t *)((char *)v179 + 64);
    if ((*(_BYTE *)(v132 + 344) & 1) != 0
      || (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v132 + 160)),
          *(_BYTE *)(v132 + 344) |= 1u,
          (v131 = v176) != 0))
    {
      v131 = (unsigned int *)*((_QWORD *)v131 + 1);
    }
    v178 = v131;
    WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::CachedImage *>((uint64_t)v180, v133, (WTF::StringImpl **)(v132 + 160), (WebCore::CachedResource **)&v178);
    WebCore::CachedResourceLoader::setAutoLoadImages(v179, v154 != 0);
    if ((v129 & 1) == 0)
      WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v128);
    WTF::Ref<WebCore::CachedResourceLoader,WTF::RawPtrTraits<WebCore::CachedResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::CachedResourceLoader>>::~Ref(&v179, v134);
    v60 = v155;
    v63 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_168;
  }
LABEL_14:
  *(_DWORD *)result += 2;
  *v9 = result;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_BYTE *)(a1 + 128) |= 4u;
  {
    result = (WTF::StringImpl *)WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
    *(_OWORD *)((char *)result + 72) = 0u;
    *(_OWORD *)((char *)result + 56) = 0u;
  }
  v16 = WebCore::eventNames(result);
  WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchEventSoon((uint64_t)&WebCore::loadEventSender(void)::sender, (_QWORD *)a1, (WTF::StringImpl **)(v16 + 784));
LABEL_20:
  WebCore::ImageLoader::didUpdateCachedImage(a1, a2, (uint64_t *)&v176);
LABEL_21:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v176, v17);
  result = v177;
LABEL_22:
  v177 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 24) - 2;
LABEL_27:
    if (v5)
    {
      *(_DWORD *)(v4 + 24) = v5;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
  }
  return result;
}

uint64_t WebCore::Node::isPluginElement(WebCore::Node *this)
{
  return 0;
}

uint64_t WebCore::HTMLImageElement::imageSourceURL(WebCore::HTMLImageElement *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 24);
  result = (uint64_t)this + 192;
  v3 = v4;
  if (!v4 || !*(_DWORD *)(v3 + 4))
  {
    v5 = *((_QWORD *)this + 13);
    if (v5
      && ((v6 = *(_DWORD *)(v5 + 4), (v6 & 1) != 0)
        ? (v7 = *(_QWORD *)(v5 + 40), LODWORD(v8) = *(_DWORD *)(v5 + 52))
        : (v7 = v5 + 32, LODWORD(v8) = v6 >> 5),
          (_DWORD)v8))
    {
      v8 = v8;
      for (result = v7 + 8; ; result += 16)
      {
        v9 = *(_QWORD *)(result - 8);
        if (v9 == WebCore::HTMLNames::srcAttr
          || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
          && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
        {
          break;
        }
        if (!--v8)
          return MEMORY[0x1E0CBF2F8];
      }
    }
    else
    {
      return MEMORY[0x1E0CBF2F8];
    }
  }
  return result;
}

uint64_t WebCore::parseReferrerPolicy(unsigned __int16 *a1, uint64_t a2, int a3)
{
  int v3;
  __int16 v4;
  unsigned __int8 v5;
  int v6;
  unsigned __int16 *NextSubstring;
  int v9;
  unsigned int v10;
  unsigned __int16 **v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  BOOL v19;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int16 **v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned __int16 *v40;
  uint64_t v41;
  __int16 v42;
  char v43;

  if (a3 == 2)
  {
    v3 = 0;
LABEL_3:
    v4 = WebCore::parseReferrerPolicyToken(a1, a2, v3);
    v5 = v4;
    v6 = HIBYTE(v4);
    return v5 | (v6 << 8);
  }
  if (a3 != 1)
  {
    if (a3)
    {
      v5 = 0;
      v6 = 0;
      return v5 | (v6 << 8);
    }
    v3 = 1;
    goto LABEL_3;
  }
  v40 = a1;
  v41 = a2;
  v42 = 44;
  v43 = 0;
  v36 = &v40;
  v37 = 0;
  v39 = (_DWORD)a2 == 0;
  NextSubstring = (unsigned __int16 *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v36);
  v5 = 0;
  v6 = 0;
  v9 = v41;
  v10 = v37;
  if (v37 != (_DWORD)v41 || !v39)
  {
    v6 = 0;
    v5 = 0;
    do
    {
      v12 = v36;
      v13 = *((unsigned int *)v36 + 2);
      if (v13 <= v10)
      {
LABEL_72:
        v16 = 0x100000000;
        NextSubstring = (unsigned __int16 *)"";
        goto LABEL_19;
      }
      v14 = v38;
      if (v13 - v10 <= v38)
      {
        if (!v10)
        {
          NextSubstring = *v36;
          v16 = (unint64_t)v36[1];
          goto LABEL_17;
        }
        v14 = v13 - v10;
      }
      v15 = v10;
      v16 = v14;
      v17 = v13 - v10;
      if (*((_BYTE *)v36 + 12))
      {
        if (v17 < v14)
          goto LABEL_81;
        NextSubstring = (unsigned __int16 *)((char *)*v36 + v15);
        v16 = v14 | 0x100000000;
      }
      else
      {
        if (v17 < v14)
          goto LABEL_81;
        NextSubstring = &(*v36)[v15];
      }
LABEL_17:
      v17 = v16;
      if ((v16 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v16)
        {
          v12 = 0;
          v13 = (v16 - 1);
          while (1)
          {
            v21 = *((unsigned __int8 *)v12 + (_QWORD)NextSubstring);
            v22 = v21 > 0x20;
            v23 = (1 << v21) & 0x100002600;
            if (v22 || v23 == 0)
              break;
            v12 = (unsigned __int16 **)((char *)v12 + 1);
            if ((unsigned __int16 **)v16 == v12)
              goto LABEL_72;
          }
          if ((_DWORD)v16 == 1)
          {
            if ((_DWORD)v12)
            {
              LODWORD(v25) = 0;
LABEL_79:
              v13 = (v25 - (_DWORD)v12 + 1);
              v17 = v16 - (_QWORD)v12;
              if (v17 >= v13)
              {
                NextSubstring = (unsigned __int16 *)((char *)v12 + (_QWORD)NextSubstring);
                v16 = v13 | 0x100000000;
                goto LABEL_19;
              }
              goto LABEL_81;
            }
          }
          else
          {
            v25 = (v16 - 1);
            do
            {
              if (v25 >= v16)
                goto LABEL_81;
              v26 = *((unsigned __int8 *)NextSubstring + v25);
              v22 = v26 > 0x20;
              v27 = (1 << v26) & 0x100002600;
              if (v22 || v27 == 0)
                break;
              --v25;
            }
            while ((_DWORD)v25);
            if ((_DWORD)v12 || (_DWORD)v25 != (_DWORD)v13)
              goto LABEL_79;
          }
        }
      }
      else if ((_DWORD)v16)
      {
        v12 = 0;
        v13 = (unint64_t)NextSubstring;
        while (1)
        {
          v29 = *(unsigned __int16 *)v13;
          v22 = v29 > 0x20;
          v30 = (1 << v29) & 0x100002600;
          if (v22 || v30 == 0)
            break;
          v12 = (unsigned __int16 **)((char *)v12 + 1);
          v13 += 2;
          if ((unsigned __int16 **)v16 == v12)
            goto LABEL_72;
        }
        if ((_DWORD)v16 == 1)
          goto LABEL_82;
        v32 = (v16 - 1);
        do
        {
          if (v32 >= v16)
            goto LABEL_81;
          v33 = NextSubstring[v32];
          v22 = v33 > 0x20;
          v34 = (1 << v33) & 0x100002600;
          if (v22 || v34 == 0)
            break;
          --v32;
        }
        while ((_DWORD)v32);
        if ((_DWORD)v12 || (_DWORD)v32 != (_DWORD)v16 - 1)
        {
          while (1)
          {
            v16 = (v32 - (_DWORD)v12 + 1);
            v17 -= (unint64_t)v12;
            NextSubstring = (unsigned __int16 *)v13;
            if (v17 >= v16)
              break;
LABEL_81:
            __break(1u);
LABEL_82:
            if (!(_DWORD)v12)
              break;
            LODWORD(v32) = 0;
          }
        }
      }
LABEL_19:
      v18 = WebCore::parseReferrerPolicyToken(NextSubstring, v16, 0);
      if ((_BYTE)v18)
        v19 = v18 >= 0x100u;
      else
        v19 = 0;
      if (v19)
      {
        v5 = v18;
        v6 = 1;
      }
      NextSubstring = (unsigned __int16 *)WTF::StringView::SplitResult::Iterator::operator++();
      v10 = v37;
    }
    while (v37 != v9 || !v39);
  }
  return v5 | (v6 << 8);
}

uint64_t WebCore::parseReferrerPolicyToken(unsigned __int16 *a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  unsigned __int16 *v17;

  if (!a3)
  {
LABEL_2:
    if ((int)a2 <= 23)
    {
      switch((int)a2)
      {
        case 6:
          if ((a2 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)a1 & 0xDF) != 0x4F
              || (*((_BYTE *)a1 + 1) & 0xDF) != 0x52
              || (a1[1] & 0xDF) != 0x49
              || (*((_BYTE *)a1 + 3) & 0xDF) != 0x47
              || (a1[2] & 0xDF) != 0x49)
            {
              goto LABEL_21;
            }
            v7 = *((unsigned __int8 *)a1 + 5);
          }
          else
          {
            if ((*a1 & 0xFFDF) != 0x4F
              || (a1[1] & 0xFFDF) != 0x52
              || (a1[2] & 0xFFDF) != 0x49
              || (a1[3] & 0xFFDF) != 0x47
              || (a1[4] & 0xFFDF) != 0x49)
            {
              goto LABEL_21;
            }
            v7 = a1[5];
          }
          if ((v7 & 0xFFFFFFDF) != 0x4E)
            goto LABEL_21;
          v4 = 1;
          v3 = 4;
          return v3 | (v4 << 8);
        case 10:
          if ((a2 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)a1 & 0xDF) != 0x55
              || (*((_BYTE *)a1 + 1) & 0xDF) != 0x4E
              || (a1[1] & 0xDF) != 0x53
              || (*((_BYTE *)a1 + 3) & 0xDF) != 0x41
              || (a1[2] & 0xDF) != 0x46
              || (*((_BYTE *)a1 + 5) & 0xDF) != 0x45
              || (a1[3] & 0xDF) != 0xD
              || (*((_BYTE *)a1 + 7) & 0xDF) != 0x55
              || (a1[4] & 0xDF) != 0x52)
            {
              goto LABEL_21;
            }
            v6 = *((unsigned __int8 *)a1 + 9);
          }
          else
          {
            if ((*a1 & 0xFFDF) != 0x55
              || (a1[1] & 0xFFDF) != 0x4E
              || (a1[2] & 0xFFDF) != 0x53
              || (a1[3] & 0xFFDF) != 0x41
              || (a1[4] & 0xFFDF) != 0x46
              || (a1[5] & 0xFFDF) != 0x45
              || (a1[6] & 0xFFDF) != 0xD
              || (a1[7] & 0xFFDF) != 0x55
              || (a1[8] & 0xFFDF) != 0x52)
            {
              goto LABEL_21;
            }
            v6 = a1[9];
          }
          if ((v6 & 0xFFFFFFDF) != 0x4C)
            goto LABEL_21;
          goto LABEL_36;
        case 11:
          if ((a2 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)a1 & 0xDF) == 0x4E
              && (*((_BYTE *)a1 + 1) & 0xDF) == 0x4F
              && (a1[1] & 0xDF) == 0xD
              && (*((_BYTE *)a1 + 3) & 0xDF) == 0x52
              && (a1[2] & 0xDF) == 0x45
              && (*((_BYTE *)a1 + 5) & 0xDF) == 0x46
              && (a1[3] & 0xDF) == 0x45
              && (*((_BYTE *)a1 + 7) & 0xDF) == 0x52
              && (a1[4] & 0xDF) == 0x52
              && (*((_BYTE *)a1 + 9) & 0xDF) == 0x45
              && (a1[5] & 0xDF) == 0x52)
            {
              goto LABEL_16;
            }
            if ((*(_BYTE *)a1 & 0xDF) != 0x53
              || (*((_BYTE *)a1 + 1) & 0xDF) != 0x41
              || (a1[1] & 0xDF) != 0x4D
              || (*((_BYTE *)a1 + 3) & 0xDF) != 0x45
              || (a1[2] & 0xDF) != 0xD
              || (*((_BYTE *)a1 + 5) & 0xDF) != 0x4F
              || (a1[3] & 0xDF) != 0x52
              || (*((_BYTE *)a1 + 7) & 0xDF) != 0x49
              || (a1[4] & 0xDF) != 0x47
              || (*((_BYTE *)a1 + 9) & 0xDF) != 0x49)
            {
              goto LABEL_21;
            }
            v12 = *((unsigned __int8 *)a1 + 10);
LABEL_163:
            if ((v12 & 0xFFFFFFDF) != 0x4E)
              goto LABEL_21;
            v4 = 1;
            v3 = 3;
            return v3 | (v4 << 8);
          }
          v13 = *a1 & 0xFFDF;
          if (v13 != 78)
          {
            if (v13 != 83
              || (a1[1] & 0xFFDF) != 0x41
              || (a1[2] & 0xFFDF) != 0x4D
              || (a1[3] & 0xFFDF) != 0x45
              || (a1[4] & 0xFFDF) != 0xD
              || (a1[5] & 0xFFDF) != 0x4F
              || (a1[6] & 0xFFDF) != 0x52
              || (a1[7] & 0xFFDF) != 0x49
              || (a1[8] & 0xFFDF) != 0x47
              || (a1[9] & 0xFFDF) != 0x49)
            {
              goto LABEL_21;
            }
            v12 = a1[10];
            goto LABEL_163;
          }
          if ((a1[1] & 0xFFDF) == 0x4F
            && (a1[2] & 0xFFDF) == 0xD
            && (a1[3] & 0xFFDF) == 0x52
            && (a1[4] & 0xFFDF) == 0x45
            && (a1[5] & 0xFFDF) == 0x46
            && (a1[6] & 0xFFDF) == 0x45
            && (a1[7] & 0xFFDF) == 0x52
            && (a1[8] & 0xFFDF) == 0x52
            && (a1[9] & 0xFFDF) == 0x45
            && (a1[10] & 0xFFDF) == 0x52)
          {
            goto LABEL_16;
          }
          break;
        case 13:
          if ((a2 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)a1 & 0xDF) != 0x53
              || (*((_BYTE *)a1 + 1) & 0xDF) != 0x54
              || (a1[1] & 0xDF) != 0x52
              || (*((_BYTE *)a1 + 3) & 0xDF) != 0x49
              || (a1[2] & 0xDF) != 0x43
              || (*((_BYTE *)a1 + 5) & 0xDF) != 0x54
              || (a1[3] & 0xDF) != 0xD
              || (*((_BYTE *)a1 + 7) & 0xDF) != 0x4F
              || (a1[4] & 0xDF) != 0x52
              || (*((_BYTE *)a1 + 9) & 0xDF) != 0x49
              || (a1[5] & 0xDF) != 0x47
              || (*((_BYTE *)a1 + 11) & 0xDF) != 0x49)
            {
              goto LABEL_21;
            }
            v8 = *((unsigned __int8 *)a1 + 12);
          }
          else
          {
            if ((*a1 & 0xFFDF) != 0x53
              || (a1[1] & 0xFFDF) != 0x54
              || (a1[2] & 0xFFDF) != 0x52
              || (a1[3] & 0xFFDF) != 0x49
              || (a1[4] & 0xFFDF) != 0x43
              || (a1[5] & 0xFFDF) != 0x54
              || (a1[6] & 0xFFDF) != 0xD
              || (a1[7] & 0xFFDF) != 0x4F
              || (a1[8] & 0xFFDF) != 0x52
              || (a1[9] & 0xFFDF) != 0x49
              || (a1[10] & 0xFFDF) != 0x47
              || (a1[11] & 0xFFDF) != 0x49)
            {
              goto LABEL_21;
            }
            v8 = a1[12];
          }
          if ((v8 & 0xFFFFFFDF) != 0x4E)
            goto LABEL_21;
          v4 = 1;
          v3 = 5;
          return v3 | (v4 << 8);
        default:
          goto LABEL_21;
      }
      goto LABEL_21;
    }
    if ((_DWORD)a2 == 24)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a1 & 0xDF) != 0x4F
          || (*((_BYTE *)a1 + 1) & 0xDF) != 0x52
          || (a1[1] & 0xDF) != 0x49
          || (*((_BYTE *)a1 + 3) & 0xDF) != 0x47
          || (a1[2] & 0xDF) != 0x49
          || (*((_BYTE *)a1 + 5) & 0xDF) != 0x4E
          || (a1[3] & 0xDF) != 0xD
          || (*((_BYTE *)a1 + 7) & 0xDF) != 0x57
          || (a1[4] & 0xDF) != 0x48
          || (*((_BYTE *)a1 + 9) & 0xDF) != 0x45
          || (a1[5] & 0xDF) != 0x4E
          || (*((_BYTE *)a1 + 11) & 0xDF) != 0xD
          || (a1[6] & 0xDF) != 0x43
          || (*((_BYTE *)a1 + 13) & 0xDF) != 0x52
          || (a1[7] & 0xDF) != 0x4F
          || (*((_BYTE *)a1 + 15) & 0xDF) != 0x53
          || (a1[8] & 0xDF) != 0x53
          || (*((_BYTE *)a1 + 17) & 0xDF) != 0xD
          || (a1[9] & 0xDF) != 0x4F
          || (*((_BYTE *)a1 + 19) & 0xDF) != 0x52
          || (a1[10] & 0xDF) != 0x49
          || (*((_BYTE *)a1 + 21) & 0xDF) != 0x47
          || (a1[11] & 0xDF) != 0x49)
        {
          goto LABEL_21;
        }
        v9 = *((unsigned __int8 *)a1 + 23);
      }
      else
      {
        if ((*a1 & 0xFFDF) != 0x4F
          || (a1[1] & 0xFFDF) != 0x52
          || (a1[2] & 0xFFDF) != 0x49
          || (a1[3] & 0xFFDF) != 0x47
          || (a1[4] & 0xFFDF) != 0x49
          || (a1[5] & 0xFFDF) != 0x4E
          || (a1[6] & 0xFFDF) != 0xD
          || (a1[7] & 0xFFDF) != 0x57
          || (a1[8] & 0xFFDF) != 0x48
          || (a1[9] & 0xFFDF) != 0x45
          || (a1[10] & 0xFFDF) != 0x4E
          || (a1[11] & 0xFFDF) != 0xD
          || (a1[12] & 0xFFDF) != 0x43
          || (a1[13] & 0xFFDF) != 0x52
          || (a1[14] & 0xFFDF) != 0x4F
          || (a1[15] & 0xFFDF) != 0x53
          || (a1[16] & 0xFFDF) != 0x53
          || (a1[17] & 0xFFDF) != 0xD
          || (a1[18] & 0xFFDF) != 0x4F
          || (a1[19] & 0xFFDF) != 0x52
          || (a1[20] & 0xFFDF) != 0x49
          || (a1[21] & 0xFFDF) != 0x47
          || (a1[22] & 0xFFDF) != 0x49)
        {
          goto LABEL_21;
        }
        v9 = a1[23];
      }
      if ((v9 & 0xFFFFFFDF) == 0x4E)
      {
        v4 = 1;
        v3 = 6;
        return v3 | (v4 << 8);
      }
LABEL_21:
      if (a1 && !(_DWORD)a2)
      {
        v3 = 0;
        goto LABEL_17;
      }
LABEL_22:
      v3 = 0;
      v4 = 0;
      return v3 | (v4 << 8);
    }
    if ((_DWORD)a2 != 31)
    {
      if ((_DWORD)a2 == 26)
      {
        if ((a2 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a1 & 0xDF) != 0x4E
            || (*((_BYTE *)a1 + 1) & 0xDF) != 0x4F
            || (a1[1] & 0xDF) != 0xD
            || (*((_BYTE *)a1 + 3) & 0xDF) != 0x52
            || (a1[2] & 0xDF) != 0x45
            || (*((_BYTE *)a1 + 5) & 0xDF) != 0x46
            || (a1[3] & 0xDF) != 0x45
            || (*((_BYTE *)a1 + 7) & 0xDF) != 0x52
            || (a1[4] & 0xDF) != 0x52
            || (*((_BYTE *)a1 + 9) & 0xDF) != 0x45
            || (a1[5] & 0xDF) != 0x52
            || (*((_BYTE *)a1 + 11) & 0xDF) != 0xD
            || (a1[6] & 0xDF) != 0x57
            || (*((_BYTE *)a1 + 13) & 0xDF) != 0x48
            || (a1[7] & 0xDF) != 0x45
            || (*((_BYTE *)a1 + 15) & 0xDF) != 0x4E
            || (a1[8] & 0xDF) != 0xD
            || (*((_BYTE *)a1 + 17) & 0xDF) != 0x44
            || (a1[9] & 0xDF) != 0x4F
            || (*((_BYTE *)a1 + 19) & 0xDF) != 0x57
            || (a1[10] & 0xDF) != 0x4E
            || (*((_BYTE *)a1 + 21) & 0xDF) != 0x47
            || (a1[11] & 0xDF) != 0x52
            || (*((_BYTE *)a1 + 23) & 0xDF) != 0x41
            || (a1[12] & 0xDF) != 0x44)
          {
            goto LABEL_22;
          }
          v11 = *((unsigned __int8 *)a1 + 25);
        }
        else
        {
          if ((*a1 & 0xFFDF) != 0x4E
            || (a1[1] & 0xFFDF) != 0x4F
            || (a1[2] & 0xFFDF) != 0xD
            || (a1[3] & 0xFFDF) != 0x52
            || (a1[4] & 0xFFDF) != 0x45
            || (a1[5] & 0xFFDF) != 0x46
            || (a1[6] & 0xFFDF) != 0x45
            || (a1[7] & 0xFFDF) != 0x52
            || (a1[8] & 0xFFDF) != 0x52
            || (a1[9] & 0xFFDF) != 0x45
            || (a1[10] & 0xFFDF) != 0x52
            || (a1[11] & 0xFFDF) != 0xD
            || (a1[12] & 0xFFDF) != 0x57
            || (a1[13] & 0xFFDF) != 0x48
            || (a1[14] & 0xFFDF) != 0x45
            || (a1[15] & 0xFFDF) != 0x4E
            || (a1[16] & 0xFFDF) != 0xD
            || (a1[17] & 0xFFDF) != 0x44
            || (a1[18] & 0xFFDF) != 0x4F
            || (a1[19] & 0xFFDF) != 0x57
            || (a1[20] & 0xFFDF) != 0x4E
            || (a1[21] & 0xFFDF) != 0x47
            || (a1[22] & 0xFFDF) != 0x52
            || (a1[23] & 0xFFDF) != 0x41
            || (a1[24] & 0xFFDF) != 0x44)
          {
            goto LABEL_22;
          }
          v11 = a1[25];
        }
        if ((v11 & 0xFFFFFFDF) == 0x45)
        {
          v4 = 1;
          v3 = 2;
          return v3 | (v4 << 8);
        }
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    if ((a2 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a1 & 0xDF) != 0x53
        || (*((_BYTE *)a1 + 1) & 0xDF) != 0x54
        || (a1[1] & 0xDF) != 0x52
        || (*((_BYTE *)a1 + 3) & 0xDF) != 0x49
        || (a1[2] & 0xDF) != 0x43
        || (*((_BYTE *)a1 + 5) & 0xDF) != 0x54
        || (a1[3] & 0xDF) != 0xD
        || (*((_BYTE *)a1 + 7) & 0xDF) != 0x4F
        || (a1[4] & 0xDF) != 0x52
        || (*((_BYTE *)a1 + 9) & 0xDF) != 0x49
        || (a1[5] & 0xDF) != 0x47
        || (*((_BYTE *)a1 + 11) & 0xDF) != 0x49
        || (a1[6] & 0xDF) != 0x4E
        || (*((_BYTE *)a1 + 13) & 0xDF) != 0xD
        || (a1[7] & 0xDF) != 0x57
        || (*((_BYTE *)a1 + 15) & 0xDF) != 0x48
        || (a1[8] & 0xDF) != 0x45
        || (*((_BYTE *)a1 + 17) & 0xDF) != 0x4E
        || (a1[9] & 0xDF) != 0xD
        || (*((_BYTE *)a1 + 19) & 0xDF) != 0x43
        || (a1[10] & 0xDF) != 0x52
        || (*((_BYTE *)a1 + 21) & 0xDF) != 0x4F
        || (a1[11] & 0xDF) != 0x53
        || (*((_BYTE *)a1 + 23) & 0xDF) != 0x53
        || (a1[12] & 0xDF) != 0xD
        || (*((_BYTE *)a1 + 25) & 0xDF) != 0x4F
        || (a1[13] & 0xDF) != 0x52
        || (*((_BYTE *)a1 + 27) & 0xDF) != 0x49
        || (a1[14] & 0xDF) != 0x47
        || (*((_BYTE *)a1 + 29) & 0xDF) != 0x49)
      {
        goto LABEL_21;
      }
      v10 = *((unsigned __int8 *)a1 + 30);
    }
    else
    {
      if ((*a1 & 0xFFDF) != 0x53
        || (a1[1] & 0xFFDF) != 0x54
        || (a1[2] & 0xFFDF) != 0x52
        || (a1[3] & 0xFFDF) != 0x49
        || (a1[4] & 0xFFDF) != 0x43
        || (a1[5] & 0xFFDF) != 0x54
        || (a1[6] & 0xFFDF) != 0xD
        || (a1[7] & 0xFFDF) != 0x4F
        || (a1[8] & 0xFFDF) != 0x52
        || (a1[9] & 0xFFDF) != 0x49
        || (a1[10] & 0xFFDF) != 0x47
        || (a1[11] & 0xFFDF) != 0x49
        || (a1[12] & 0xFFDF) != 0x4E
        || (a1[13] & 0xFFDF) != 0xD
        || (a1[14] & 0xFFDF) != 0x57
        || (a1[15] & 0xFFDF) != 0x48
        || (a1[16] & 0xFFDF) != 0x45
        || (a1[17] & 0xFFDF) != 0x4E
        || (a1[18] & 0xFFDF) != 0xD
        || (a1[19] & 0xFFDF) != 0x43
        || (a1[20] & 0xFFDF) != 0x52
        || (a1[21] & 0xFFDF) != 0x4F
        || (a1[22] & 0xFFDF) != 0x53
        || (a1[23] & 0xFFDF) != 0x53
        || (a1[24] & 0xFFDF) != 0xD
        || (a1[25] & 0xFFDF) != 0x4F
        || (a1[26] & 0xFFDF) != 0x52
        || (a1[27] & 0xFFDF) != 0x49
        || (a1[28] & 0xFFDF) != 0x47
        || (a1[29] & 0xFFDF) != 0x49)
      {
        goto LABEL_21;
      }
      v10 = a1[30];
    }
    if ((v10 & 0xFFFFFFDF) != 0x4E)
      goto LABEL_21;
LABEL_122:
    v4 = 1;
    v3 = 7;
    return v3 | (v4 << 8);
  }
  v16 = a2;
  v17 = a1;
  if ((WTF::equalLettersIgnoringASCIICase(a1, a2, "never", 6uLL) & 1) == 0)
  {
    if ((WTF::equalLettersIgnoringASCIICase(v17, v16, "always", 7uLL) & 1) != 0)
    {
LABEL_36:
      v4 = 1;
      v3 = 8;
      return v3 | (v4 << 8);
    }
    v14 = WTF::equalLettersIgnoringASCIICase(v17, v16, "default", 8uLL);
    a2 = v16;
    v15 = v14;
    a1 = v17;
    if ((v15 & 1) != 0)
      goto LABEL_122;
    goto LABEL_2;
  }
LABEL_16:
  v3 = 1;
LABEL_17:
  v4 = 1;
  return v3 | (v4 << 8);
}

uint64_t WebCore::CachedImage::didAddClient(WebCore::CachedImage *this, WTF **a2)
{
  uint64_t v4;
  float v5;
  WebCore::Image *v6;
  double started;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  void *v12;
  unsigned int *v13;
  unsigned int *v14;

  if (*((_QWORD *)this + 49)
    && !*((_QWORD *)this + 86)
    && (*(_WORD *)((char *)this + 557) >> 5) - 3 >= 2)
  {
    WebCore::CachedImage::createImage(this);
    WebCore::CachedImage::protectedImage(this, &v14);
    v9 = v14;
    v10 = (unsigned int *)*((_QWORD *)this + 49);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v13 = v10;
    WebCore::Image::setData(v9, (uint64_t *)&v13, 1);
    if (v13)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v13, v12);
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 8))();
      else
        --v14[2];
    }
  }
  v4 = *((_QWORD *)this + 86);
  if (v4)
  {
    if ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 168))(v4, 0) > 0.0 && v5 > 0.0)
    {
      if ((*((unsigned int (**)(WTF **))*a2 + 4))(a2) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19441BC38);
      }
      (*((void (**)(WTF **, WebCore::CachedImage *, _QWORD))*a2 + 6))(a2, this, 0);
    }
    v6 = (WebCore::Image *)*((_QWORD *)this + 86);
    if (v6)
    {
      ++*((_DWORD *)v6 + 2);
      started = WebCore::Image::startAnimationAsynchronously(v6);
      if (*((_DWORD *)v6 + 2) == 1)
        (*(void (**)(WebCore::Image *, double))(*(_QWORD *)v6 + 8))(v6, started);
      else
        --*((_DWORD *)v6 + 2);
    }
  }
  return WebCore::CachedResource::didAddClient((uint64_t)this, a2);
}

void WebCore::createPotentialAccessControlRequest(WebCore::ResourceRequest *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::UserContentURLPattern *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  _BYTE *v40;
  int v41;
  unsigned int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  char v62;
  WTF::StringImpl *v63;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  v9 = (unint64_t)this;
  if (*a4)
    v11 = 0;
  else
    v11 = a5 == 0;
  if (v11)
  {
    if (*((_BYTE *)a2 + 1) == 2)
      goto LABEL_7;
  }
  else
  {
    if (*a4)
      v30 = 3;
    else
      v30 = 1;
    *((_BYTE *)a2 + 1) = v30;
  }
  v31 = *(_QWORD *)(a3 + 528);
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 24);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 8);
        if (v34)
        {
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *(_BYTE *)(v9 + 184) |= 1u;
          }
          v35 = *(unsigned int *)(v34 + 1620);
          if ((_DWORD)v35)
          {
            v36 = *(WebCore::UserContentURLPattern **)(v34 + 1608);
            v37 = 32 * v35;
            while (*((_BYTE *)v36 + 24)
                 || !WebCore::UserContentURLPattern::matchesScheme(v36, (const WTF::URL *)v9)
                 || !WebCore::UserContentURLPattern::matchesHost((const WTF::StringImpl **)v36, (const WTF::URL *)v9)|| (WebCore::UserContentURLPattern::matchesPath(v36, (const WTF::URL *)v9) & 1) == 0)
            {
              v36 = (WebCore::UserContentURLPattern *)((char *)v36 + 32);
              v37 -= 32;
              if (!v37)
                goto LABEL_7;
            }
            *((_BYTE *)v8 + 1) = 2;
          }
        }
      }
    }
  }
LABEL_7:
  v12 = *(_QWORD *)(v7 + 528);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 280) + 88);
      if (v14)
      {
        if (*(_QWORD *)(v13 + 296) == v7)
        {
          ++*(_DWORD *)(v14 + 24);
          v15 = *(unsigned __int8 *)(v14 + 3533);
          v16 = *(_BYTE *)(v9 + 184);
          if ((v16 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v9);
            v16 = *(_BYTE *)(v9 + 184) | 1;
            *(_BYTE *)(v9 + 184) = v16;
          }
          v17 = *(_BYTE *)(v9 + 148);
          if ((v15 != 0) == ((v17 & 4) == 0))
          {
            *(_BYTE *)(v9 + 148) = v17 & 0xFB | (4 * (v15 != 0));
            *(_BYTE *)(v9 + 184) = v16 & 0xFD;
          }
          if (*(_DWORD *)(v14 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
          else
            --*(_DWORD *)(v14 + 24);
        }
      }
    }
  }
  v18 = *v6;
  if (!*v6)
  {
    WebCore::ResourceRequestBase::RequestData::RequestData(a6, (uint64_t *)v9);
    v19 = *(_OWORD *)(v9 + 152);
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(a6 + 152) = v19;
    v20 = *(_QWORD *)(v9 + 168);
    v21 = *(_QWORD *)(v9 + 176);
    *(_QWORD *)(v9 + 168) = 0;
    *(_QWORD *)(a6 + 168) = v20;
    *(_QWORD *)(a6 + 176) = v21;
    *(_BYTE *)(a6 + 184) = *(_BYTE *)(v9 + 184);
    v22 = *(_QWORD *)(v9 + 192);
    *(_QWORD *)(v9 + 192) = 0;
    *(_QWORD *)(a6 + 192) = v22;
    *(_QWORD *)(a6 + 200) = 0;
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions(a6 + 208, v8);
    *(_WORD *)(a6 + 352) = 0;
    *(_QWORD *)(a6 + 360) = 0;
    *(_OWORD *)(a6 + 368) = 0u;
    WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)a6, (_QWORD *)(a6 + 384));
    *(_WORD *)(a6 + 392) = 0;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v7 + 192), v23);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 + 1, v24));
    v27 = *(_QWORD *)(a6 + 376);
    *(_QWORD *)(a6 + 376) = v24;
    if (v27)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v59 = *(WTF::StringImpl **)(v27 + 48);
        *(_QWORD *)(v27 + 48) = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v25);
          else
            *(_DWORD *)v59 -= 2;
        }
        v60 = *(WTF::StringImpl **)(v27 + 40);
        *(_QWORD *)(v27 + 40) = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v25);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = *(unsigned int *)(v27 + 32);
        if ((_DWORD)v61 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F32C0[v61])(&v63, v27 + 8);
        *(_DWORD *)(v27 + 32) = -1;
        WTF::fastFree((WTF *)v27, v25);
      }
    }
    return;
  }
  v38 = *(_DWORD *)(v18 + 4);
  if (v38 == 4)
  {
    v55 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v55 & 0xDF) != 0x4F
        || (*(_BYTE *)(v55 + 1) & 0xDF) != 0x4D
        || (*(_BYTE *)(v55 + 2) & 0xDF) != 0x49)
      {
        goto LABEL_43;
      }
      v56 = *(unsigned __int8 *)(v55 + 3);
    }
    else
    {
      if ((*(_WORD *)v55 & 0xFFDF) != 0x4F
        || (*(_WORD *)(v55 + 2) & 0xFFDF) != 0x4D
        || (*(_WORD *)(v55 + 4) & 0xFFDF) != 0x49)
      {
        goto LABEL_43;
      }
      v56 = *(unsigned __int16 *)(v55 + 6);
    }
    if ((v56 & 0xFFFFFFDF) == 0x54)
    {
      *((_BYTE *)v8 + 2) = 0;
      v42 = *(_DWORD *)((_BYTE *)v8 + 114) & 0xFFFFFFCF;
      goto LABEL_50;
    }
  }
  else
  {
    if (v38 != 15)
      goto LABEL_43;
    v57 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v57 & 0xDF) != 0x55
        || (*(_BYTE *)(v57 + 1) & 0xDF) != 0x53
        || (*(_BYTE *)(v57 + 2) & 0xDF) != 0x45
        || (*(_BYTE *)(v57 + 3) & 0xDF) != 0xD
        || (*(_BYTE *)(v57 + 4) & 0xDF) != 0x43
        || (*(_BYTE *)(v57 + 5) & 0xDF) != 0x52
        || (*(_BYTE *)(v57 + 6) & 0xDF) != 0x45
        || (*(_BYTE *)(v57 + 7) & 0xDF) != 0x44
        || (*(_BYTE *)(v57 + 8) & 0xDF) != 0x45
        || (*(_BYTE *)(v57 + 9) & 0xDF) != 0x4E
        || (*(_BYTE *)(v57 + 10) & 0xDF) != 0x54
        || (*(_BYTE *)(v57 + 11) & 0xDF) != 0x49
        || (*(_BYTE *)(v57 + 12) & 0xDF) != 0x41
        || (*(_BYTE *)(v57 + 13) & 0xDF) != 0x4C)
      {
        goto LABEL_43;
      }
      v58 = *(unsigned __int8 *)(v57 + 14);
    }
    else
    {
      if ((*(_WORD *)v57 & 0xFFDF) != 0x55
        || (*(_WORD *)(v57 + 2) & 0xFFDF) != 0x53
        || (*(_WORD *)(v57 + 4) & 0xFFDF) != 0x45
        || (*(_WORD *)(v57 + 6) & 0xFFDF) != 0xD
        || (*(_WORD *)(v57 + 8) & 0xFFDF) != 0x43
        || (*(_WORD *)(v57 + 10) & 0xFFDF) != 0x52
        || (*(_WORD *)(v57 + 12) & 0xFFDF) != 0x45
        || (*(_WORD *)(v57 + 14) & 0xFFDF) != 0x44
        || (*(_WORD *)(v57 + 16) & 0xFFDF) != 0x45
        || (*(_WORD *)(v57 + 18) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v57 + 20) & 0xFFDF) != 0x54
        || (*(_WORD *)(v57 + 22) & 0xFFDF) != 0x49
        || (*(_WORD *)(v57 + 24) & 0xFFDF) != 0x41
        || (*(_WORD *)(v57 + 26) & 0xFFDF) != 0x4C)
      {
        goto LABEL_43;
      }
      v58 = *(unsigned __int16 *)(v57 + 28);
    }
    if ((v58 & 0xFFFFFFDF) == 0x53)
    {
      *((_BYTE *)v8 + 2) = 2;
      v42 = *(_DWORD *)((_BYTE *)v8 + 114) & 0xFFFFFFCF | 0x10;
      goto LABEL_50;
    }
  }
LABEL_43:
  *((_BYTE *)v8 + 2) = 1;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v7 + 192), a2);
  v6 = v39;
  if ((*(_BYTE *)(v9 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v9);
    *(_BYTE *)(v9 + 184) |= 1u;
  }
  v40 = &unk_1EE2F7000;
    goto LABEL_132;
  while (1)
  {
    if (WebCore::SecurityOrigin::canRequest((uint64_t)v6, (WebCore::ThreadableBlobRegistry *)v9, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance))v41 = 16;
    else
      v41 = 0;
    v42 = *(_DWORD *)((_BYTE *)v8 + 114) & 0xFFFFFFCF | v41;
LABEL_50:
    *(_DWORD *)((char *)v8 + 114) = v42;
    WebCore::ResourceRequestBase::RequestData::RequestData(a6, (uint64_t *)v9);
    v43 = *(_OWORD *)(v9 + 152);
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(a6 + 152) = v43;
    v44 = *(_QWORD *)(v9 + 168);
    v45 = *(_QWORD *)(v9 + 176);
    *(_QWORD *)(v9 + 168) = 0;
    *(_QWORD *)(a6 + 168) = v44;
    *(_QWORD *)(a6 + 176) = v45;
    *(_BYTE *)(a6 + 184) = *(_BYTE *)(v9 + 184);
    v46 = *(_QWORD *)(v9 + 192);
    *(_QWORD *)(v9 + 192) = 0;
    *(_QWORD *)(a6 + 192) = v46;
    *(_QWORD *)(a6 + 200) = 0;
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions(a6 + 208, v8);
    *(_WORD *)(a6 + 352) = 0;
    *(_QWORD *)(a6 + 360) = 0;
    *(_OWORD *)(a6 + 368) = 0u;
    WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)a6, (_QWORD *)(a6 + 384));
    *(_WORD *)(a6 + 392) = 0;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v7 + 192), v47);
    v7 = v48;
    v8 = (WTF::StringImpl *)*(unsigned int *)((char *)v8 + 114);
    v49 = *(_BYTE *)(a6 + 184);
    if ((v49 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a6);
      v49 = *(_BYTE *)(a6 + 184) | 1;
      *(_BYTE *)(a6 + 184) = v49;
    }
    if (*(_DWORD *)(a6 + 20) > *(_DWORD *)(a6 + 12))
    {
      WTF::URL::removeCredentials((WTF::URL *)a6);
      v49 = *(_BYTE *)(a6 + 184) & 0xFD;
      *(_BYTE *)(a6 + 184) = v49;
    }
    if ((v49 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a6);
      v49 = *(_BYTE *)(a6 + 184) | 1;
      *(_BYTE *)(a6 + 184) = v49;
    }
    v50 = *(_BYTE *)(a6 + 148);
    if ((v50 & 2) != 0)
    {
      v8 = (WTF::StringImpl *)(v8 & 0x30);
      if ((v49 & 1) != 0)
      {
        if ((_DWORD)v8 == 16)
          goto LABEL_59;
      }
      else
      {
        v9 = (_DWORD)v8 == 16;
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a6);
        v49 = *(_BYTE *)(a6 + 184) | 1;
        *(_BYTE *)(a6 + 184) = v49;
        v50 = *(_BYTE *)(a6 + 148);
        if (((_DWORD)v8 == 16) != ((v50 & 2) == 0))
          goto LABEL_59;
      }
      *(_BYTE *)(a6 + 148) = v50 & 0xFD | (2 * ((_DWORD)v8 == 16));
      *(_BYTE *)(a6 + 184) = v49 & 0xFD;
    }
LABEL_59:
    v51 = *(unsigned int *)(v7 + 32);
    if ((_DWORD)v51 == 1)
      goto LABEL_130;
    if ((_DWORD)v51 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_132:
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    v40[3832] = 1;
  }
  v63 = (WTF::StringImpl *)&v62;
  v52 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v51])(&v63, v7 + 8);
  if (!MEMORY[0x19AEA53F4](*v52, "file", 4) || !*(_BYTE *)(v7 + 59))
  {
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v7 + 8), &v63);
    goto LABEL_63;
  }
LABEL_130:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_63:
  if ((*(_BYTE *)(a6 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a6);
    *(_BYTE *)(a6 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a6 + 96), (WTF::StringImpl *)0x35, &v63);
  *(_BYTE *)(a6 + 184) &= ~2u;
  v54 = v63;
  v63 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
}

uint64_t WebCore::ImageLoader::updatedHasPendingEvent(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  __int16 v3;
  unsigned int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(this + 128);
  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 557);
      LODWORD(v2) = (v3 & 0x400) == 0 && (v3 & 0xE0) == 0 && (v3 >> 5) - 5 < 0xFFFFFFFE;
    }
  }
  if ((v1 & 2) == 0)
    LODWORD(v2) = 1;
  if ((_DWORD)v2)
    v5 = (8 * v1) & 0x20;
  else
    v5 = 32;
  *(_BYTE *)(this + 128) = v5 | v1 & 0xDF;
  if (((v1 >> 5) & 1) != v5 >> 5)
  {
    v6 = this + 32;
    if (v5)
    {
      if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8);
        if (v8)
          *(_DWORD *)(v8 + 24) += 2;
        v9 = *(_QWORD *)(this + 88);
        *(_QWORD *)(this + 88) = v8;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
      }
      else
      {
        return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 32));
      }
    }
    else
    {
      *(_QWORD *)(this + 56) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      return WebCore::TimerBase::setNextFireTime(v6, v7 + 0.0);
    }
  }
  return this;
}

void WebCore::CachedResourceLoader::requestImage(WebCore::ResourceRequest *this@<X1>, _QWORD *a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  WebCore::ResourceRequest *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::URL *shouldUpgradeInsecureContent;
  WTF::StringImpl *v22;
  const WTF::URL *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  int v39;
  WebCore **v40;
  unsigned int *v41[10];
  unsigned int *v42;
  unsigned int **v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  unsigned int v47;
  uint64_t v48;

  v5 = this;
  v48 = *MEMORY[0x1E0C80C00];
  v8 = a2[10];
  if (!v8)
    goto LABEL_13;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_13;
  v10 = *(_QWORD *)(v9 - 40);
  if (!v10)
    goto LABEL_13;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_13;
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_DWORD *)(*(_QWORD *)(v11 + 280) + 212);
  if (v14)
  {
    v38 = (unsigned int *)(v11 + 8);
    v39 = *(_DWORD *)(*(_QWORD *)(v11 + 280) + 212);
    v40 = (WebCore **)v11;
    v20 = *(_QWORD *)(v11 + 296);
    if (v20)
    {
      *(_DWORD *)(v20 + 24) += 2;
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)v5 + 184) |= 1u;
      }
      shouldUpgradeInsecureContent = (const WTF::URL *)WebCore::MixedContentChecker::shouldUpgradeInsecureContent(v40, 1, v5, *((unsigned __int8 *)v5 + 209), *((unsigned __int8 *)v5 + 208), (unsigned __int16)*(_DWORD *)((char *)v5 + 322) >> 13);
      WebCore::upgradeInsecureResourceRequestIfNeeded(v5, v20, (int)shouldUpgradeInsecureContent);
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
    else
    {
      shouldUpgradeInsecureContent = 0;
    }
    if ((*((_BYTE *)v5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(v5);
      *((_BYTE *)v5 + 184) |= 1u;
    }
    v22 = *(WTF::StringImpl **)v5;
    if (*(_QWORD *)v5)
      *(_DWORD *)v22 += 2;
    v44 = v22;
    v45 = *(_OWORD *)((char *)v5 + 8);
    v46 = *(_OWORD *)((char *)v5 + 24);
    if ((v45 & 1) != 0
      && WebCore::CachedResourceLoader::canRequest(a2, (WTF::StringImpl *)1, (WTF::URL *)&v44, (_BYTE *)v5 + 208, 0, shouldUpgradeInsecureContent))
    {
      WebCore::PingLoader::loadImage((WebCore::PingLoader *)v40, (WebCore::LocalFrame *)&v44, v23);
    }
    v41[0] = 0;
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedImage>,WebCore::ResourceError>::expected(a4, 0);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v41, v24);
    v26 = v44;
    v44 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    v14 = v39;
    v12 = v38;
  }
  do
  {
    v15 = __ldaxr(v12);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v12));
  if (!v16)
  {
    atomic_store(1u, v12);
    v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = off_1E31FE290;
    *((_QWORD *)v18 + 1) = v12;
    v44 = v18;
    WTF::ensureOnMainThread();
    v19 = v44;
    v44 = 0;
    if (v19)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
  }
  if (!v14)
  {
LABEL_13:
    if (!a3 && (*((_BYTE *)v5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(v5);
      *((_BYTE *)v5 + 184) |= 1u;
    }
    WebCore::CachedResourceLoader::requestResource((uint64_t *)&v44, (int)a2, 1, v5);
    if (v47)
    {
      if (v47 == 1)
      {
        makeUnexpected<WebCore::ResourceError &>((uint64_t)v41, (uint64_t)&v44);
        std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected(a4, (uint64_t *)v41);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v41, v27);
LABEL_21:
        if (v47 != -1)
          (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
           + v47))((int)v41, (WebCore::CachedResourceHandleBase *)&v44);
        return;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      if (!v44)
        goto LABEL_18;
      v5 = (WebCore::ResourceRequest *)*((_QWORD *)v44 + 1);
      if (!v5)
        goto LABEL_18;
      v28 = (unsigned int *)*((_QWORD *)v5 + 1);
      if (v28
        || (v28 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10),
            *v28 = 1,
            *((_QWORD *)v28 + 1) = v5,
            v35 = (unsigned int *)*((_QWORD *)v5 + 1),
            *((_QWORD *)v5 + 1) = v28,
            !v35))
      {
        do
LABEL_47:
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
        v42 = v28;
        v30 = *((_QWORD *)v28 + 1);
        if (!v30
          || (v43 = &v42, ++*(_DWORD *)(v30 + 548), (v31 = *(_QWORD *)(v30 + 488)) == 0)
          || !*(_QWORD *)(v31 + 8)
          || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v30 + 464), (uint64_t *)&v43, (uint64_t)v41), (v28 = v42) != 0))
        {
          do
            v32 = __ldaxr(v28);
          while (__stlxr(v32 + 1, v28));
          *(_QWORD *)a4 = v28;
          v33 = *((_QWORD *)v28 + 1);
          if (v33)
          {
            v43 = (unsigned int **)a4;
            ++*(_DWORD *)(v33 + 548);
            v34 = *(_QWORD *)(v33 + 488);
            if (v34)
            {
              if (*(_QWORD *)(v34 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v33 + 464), (uint64_t *)&v43, (uint64_t)v41);
            }
          }
          goto LABEL_20;
        }
LABEL_19:
        *(_QWORD *)a4 = 0;
LABEL_20:
        *(_DWORD *)(a4 + 80) = 0;
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v42, v17);
        goto LABEL_21;
      }
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
      {
LABEL_62:
        v28 = (unsigned int *)*((_QWORD *)v5 + 1);
        if (!v28)
        {
LABEL_18:
          v42 = 0;
          goto LABEL_19;
        }
        goto LABEL_47;
      }
    }
    atomic_store(1u, v35);
    WTF::fastFree((WTF *)v35, v17);
    goto LABEL_62;
  }
}

uint64_t WebCore::HTMLImageElement::isLazyLoadable(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD **)(*(_QWORD *)(v2 + 304) + 16);
  v5 = v4[37];
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 268) & 0x10) != 0)
      return 0;
  }
  v6 = v4[3];
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return 0;
  v7 = *(_QWORD *)(v4[35] + 16);
  v8 = v4[17];
  if (*(_BYTE *)(v8 + 245))
    v9 = *(unsigned __int8 *)(v8 + 244) != 0;
  else
    v9 = (*(_QWORD *)(v8 + 688) >> 52) & 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 968))(v7, v9);
  if ((_DWORD)result)
  {
    v11 = *((_QWORD *)this + 13);
    if (v11
      && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
        ? (v13 = *(_QWORD *)(v11 + 40), LODWORD(v14) = *(_DWORD *)(v11 + 52))
        : (v13 = v11 + 32, LODWORD(v14) = v12 >> 5),
          (_DWORD)v14))
    {
      v14 = v14;
      v15 = (uint64_t *)(v13 + 8);
      while (1)
      {
        v16 = *(v15 - 1);
        if (v16 == WebCore::HTMLNames::loadingAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 32))
        {
          break;
        }
        v15 += 2;
        if (!--v14)
        {
          v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v17 = *v15;
    if (!*v15 || *(_DWORD *)(v17 + 4) != 4)
      return 0;
    v18 = *(_QWORD *)(v17 + 8);
    if ((*(_BYTE *)(v17 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v18 & 0xDF) == 0x4C
        && (*(_BYTE *)(v18 + 1) & 0xDF) == 0x41
        && (*(_BYTE *)(v18 + 2) & 0xDF) == 0x5A)
      {
        v19 = *(unsigned __int8 *)(v18 + 3);
        return (v19 & 0xFFFFFFDF) == 89;
      }
    }
    else if ((*(_WORD *)v18 & 0xFFDF) == 0x4C
           && (*(_WORD *)(v18 + 2) & 0xFFDF) == 0x41
           && (*(_WORD *)(v18 + 4) & 0xFFDF) == 0x5A)
    {
      v19 = *(unsigned __int16 *)(v18 + 6);
      return (v19 & 0xFFFFFFDF) == 89;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContext::clipOutRoundedRect(WebCore::GraphicsContext *this, const WebCore::FloatRoundedRect *a2)
{
  double v4;
  uint64_t result;
  char v6;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (WebCore::FloatRoundedRect::Radii::isZero((const WebCore::FloatRoundedRect *)((char *)a2 + 16)))
    return (*(uint64_t (**)(WebCore::GraphicsContext *, const WebCore::FloatRoundedRect *))(*(_QWORD *)this + 472))(this, a2);
  v9 = 0;
  v4 = WebCore::Path::addRoundedRect((WebCore::Path *)v7, a2, 0);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, _BYTE *, double))(*(_QWORD *)this + 480))(this, v7, v4);
  if (v9 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_5[v9])(&v6, &v8);
  return result;
}

void WebCore::GraphicsContextCG::clipOut(WebCore::GraphicsContextCG *this, const WebCore::Path *a2)
{
  CGContext *v3;
  const WebCore::Path *v4;
  int v5;
  uint64_t v6;
  CGRect ClipBoundingBox;

  *((_BYTE *)this + 744) |= 8u;
  v3 = (CGContext *)*((_QWORD *)this + 90);
  CGContextBeginPath(v3);
  ClipBoundingBox = CGContextGetClipBoundingBox(v3);
  CGContextAddRect(v3, ClipBoundingBox);
  v5 = *((_DWORD *)a2 + 16);
  if (v5 != 2)
  {
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)a2 + 1);
  if (!v6 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6) & 1) == 0)
LABEL_6:
    WebCore::addToCGContextPath(v3, a2, v4);
LABEL_7:
  CGContextEOClip(v3);
}

void WebCore::addToCGContextPath(WebCore *this, CGContext *a2, const WebCore::Path *a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const CGPath *v14;
  WebCore *v15;
  WebCore **v16;
  WebCore ***v17;
  _OWORD v18[3];
  unint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 16);
  if (v5 == 1)
  {
    v21 = *((_QWORD *)a2 + 7);
    v6 = *(_OWORD *)((char *)a2 + 24);
    v20[0] = *(_OWORD *)((char *)a2 + 8);
    v20[1] = v6;
    v20[2] = *(_OWORD *)((char *)a2 + 40);
    v15 = this;
    v16 = &v15;
    if (HIDWORD(v21) != -1)
    {
      v17 = &v16;
      ((void (*)(WebCore ****, _OWORD *, const WebCore::Path *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL18addToCGContextPathEP9CGContextNS8_11PathSegmentEEUlOT_E_JEEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcSD_DpOT0____fmatrix[HIDWORD(v21)])(&v17, v20, a3);
      return;
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v5 != 2
    || (v7 = *((_QWORD *)a2 + 1)) == 0
    || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v7 + 16))(*((_QWORD *)a2 + 1)))
  {
    v14 = (const CGPath *)WebCore::Path::platformPath(a2);
    CGContextAddPath(this, v14);
    return;
  }
  v8 = *(unsigned int *)(v7 + 28);
  if ((_DWORD)v8)
  {
    v9 = *(__int128 **)(v7 + 16);
    v10 = 56 * v8;
    while (1)
    {
      v11 = *v9;
      v12 = v9[1];
      v13 = v9[2];
      v19 = *((_QWORD *)v9 + 6);
      v18[1] = v12;
      v18[2] = v13;
      v18[0] = v11;
      v15 = this;
      v16 = &v15;
      if (HIDWORD(v19) == -1)
        break;
      v17 = &v16;
      ((void (*)(WebCore ****, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL18addToCGContextPathEP9CGContextNS8_11PathSegmentEEUlOT_E_JEEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcSD_DpOT0____fmatrix[HIDWORD(v19)])(&v17, v18);
      v9 = (__int128 *)((char *)v9 + 56);
      v10 -= 56;
      if (!v10)
        return;
    }
    goto LABEL_14;
  }
}

uint64_t ___ZN7WebCore71get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "kMAXCaptionAppearanceSettingsChangedNotification");
  if (result)
  {
    WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::constantMediaAccessibilitykMAXCaptionAppearanceSettingsChangedNotification = *(_QWORD *)result;
  }
  else
  {
    result = 58;
    __break(0xC471u);
  }
  return result;
}

WebCore::MediaCapabilities *WebCore::JSMediaCapabilities::destroy(WebCore::JSMediaCapabilities *this, JSC::JSCell *a2)
{
  WebCore::MediaCapabilities *result;
  WTF *v4;
  void *v5;

  result = (WebCore::MediaCapabilities *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::MediaCapabilities::~MediaCapabilities(result, a2);
      return (WebCore::MediaCapabilities *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t PAL::initWPResourceRequestOptions(PAL *this)
{
  if (qword_1ECE7F0E8 != -1)
    dispatch_once(&qword_1ECE7F0E8, &__block_literal_global_6_12);
  return qword_1ECE7F0F0;
}

uint64_t PAL::initSOAuthorization(PAL *this)
{
  if (qword_1ECE7D580 != -1)
    dispatch_once(&qword_1ECE7D580, &__block_literal_global_11);
  return qword_1ECE7D588;
}

uint64_t PAL::initWPResources(PAL *this)
{
  if (qword_1ECE7F0F8 != -1)
    dispatch_once(&qword_1ECE7F0F8, &__block_literal_global_8_9);
  return qword_1ECE7F100;
}

uint64_t PAL::SessionID::generatePersistentSessionID(PAL::SessionID *this)
{
  uint64_t result;

  if (PAL::generationProtectionEnabled == 1)
  {
    result = 40;
    __break(0xC471u);
  }
  else
  {
    return ++PAL::currentPersistentID;
  }
  return result;
}

BOOL WebCore::RenderWidget::needsPreferredWidthsRecalculation(WebCore::RenderWidget *this)
{
  return (WebCore::RenderReplaced::needsPreferredWidthsRecalculation(this) & 1) != 0
      || WebCore::RenderWidget::embeddedContentBox(this) != 0;
}

uint64_t WebCore::RenderReplaced::needsPreferredWidthsRecalculation(WebCore::RenderReplaced *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (((*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1544))(this) & 1) != 0)
    goto LABEL_9;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0)
    return 0;
  result = WebCore::RenderBox::hasStretchedLogicalHeight(this);
  if ((_DWORD)result)
  {
LABEL_9:
    v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v6 = v5 + 12;
    v7 = v5 + 4;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v6 = v7;
    return *(unsigned __int8 *)(v6 + 4) == 0;
  }
  return result;
}

uint64_t WebCore::RenderWidget::embeddedContentBox(WebCore::RenderWidget *this)
{
  WebCore::LocalFrameView *v2;

  if (this
    && *((_BYTE *)this + 46) == 7
    && (v2 = (WebCore::LocalFrameView *)*((_QWORD *)this + 29)) != 0
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v2 + 72))(*((_QWORD *)this + 29)))
  {
    return WebCore::LocalFrameView::embeddedContentBox(v2);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::Style::shouldDirtyAllStyle(uint64_t **this, const WebCore::StyleSheetContents *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  WebCore::Style *v6;
  uint64_t *v7;
  uint64_t v8;
  WebCore::Style *v9;

  v2 = *((unsigned int *)this + 17);
  if (!(_DWORD)v2)
    return WebCore::Style::shouldDirtyAllStyle(this + 11);
  v4 = this[7];
  v5 = 8 * v2;
  while (1)
  {
    v8 = v5;
    v9 = (WebCore::Style *)this;
    v7 = v4;
    v6 = *(WebCore::Style **)(*v4 + 64);
    if (v6)
    {
      if ((WebCore::Style::shouldDirtyAllStyle(v6, a2) & 1) != 0)
        break;
    }
    v4 = v7 + 1;
    v5 = v8 - 8;
    this = (uint64_t **)v9;
    if (v8 == 8)
      return WebCore::Style::shouldDirtyAllStyle(this + 11);
  }
  return 1;
}

BOOL WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(WebCore::MockRealtimeMediaSourceCenter *this)
{
  _BOOL8 result;

    return byte_1ECE91283 != 0;
  result = 0;
  WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center = (uint64_t)&off_1E341BFD8;
  unk_1ECE91270 = &off_1E341C010;
  qword_1ECE91278 = (uint64_t)&off_1E341C048;
  *(_QWORD *)&byte_1ECE91280 = 65793;
  return result;
}

void WebCore::RenderFlexibleBox::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  int v4;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned int v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  v4 = (int)a2;
  WebCore::RenderBlock::styleDidChange(a1, a2, a3);
  if (v4 == 8 && a3)
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1600))(a1, 0);
    v7 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 124);
    if ((v7 & 0xFu) < 3)
      v7 = v6;
    v8 = *(unsigned int *)(a1 + 64);
    if (v8 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v9 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v9)
      {
        v10 = v7 & 0xF;
        while ((*(_BYTE *)(v9 + 45) & 4) == 0)
        {
          v13 = *(unsigned int *)(v9 + 47);
          if (v13 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
          {
            v9 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
            if (v9)
              continue;
          }
          return;
        }
        if (v10 == 3)
        {
LABEL_18:
          v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1600))(a1, 0);
          v15 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 125);
          v16 = v15 & 0xF;
          if (v16 == 1)
          {
            v15 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 124);
            v16 = v15 & 0xF;
          }
          if (v16 < 3)
            v15 = v14;
          if ((v15 & 0xF) == 3)
          {
            v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1600))(a1, 0);
            v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 125);
            v19 = v18 & 0xF;
            if (v19 == 1)
            {
              v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 124);
              v19 = v18 & 0xF;
            }
            if (v19 < 3)
              v18 = v17;
            if ((v18 & 0xF) != 3)
            {
              v21 = *(_DWORD *)(v9 + 20);
              if ((v21 & 0x20) == 0)
                *(_DWORD *)(v9 + 20) = v21 | 0x20;
            }
          }
          while (1)
          {
            v20 = *(unsigned int *)(v9 + 47);
            if (!(v20 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)))
              break;
            v9 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
            if (!v9)
              break;
            if ((*(_BYTE *)(v9 + 45) & 4) != 0)
              goto LABEL_18;
          }
        }
        else
        {
          for (i = *(unsigned int *)(v9 + 47) | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32);
                i;
                i = *(unsigned int *)(v12 + 47) | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32))
          {
            v12 = *(_QWORD *)(i + 8);
            if (!v12)
              break;
          }
        }
      }
    }
  }
}

float WebCore::RenderThemeIOS::setInsertionPointColor(WebCore::RenderThemeIOS *this, const WebCore::Color *a2, float result)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  WebCore::RenderThemeIOS *v15;

  if ((byte_1ECE81F95 & 1) == 0)
  {
    LOBYTE(qword_1ECE82018) = 0;
    byte_1ECE82020 = 0;
    byte_1ECE81F95 = 1;
    goto LABEL_13;
  }
  if (!byte_1ECE82020)
  {
LABEL_13:
    v9 = *(_QWORD *)this;
    qword_1ECE82018 = v9;
    if ((v9 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    byte_1ECE82020 = 1;
    return result;
  }
  v3 = &qword_1ECE82000;
  v4 = *(_QWORD *)this;
  if ((qword_1ECE82018 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      result = *(float *)((qword_1ECE82018 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*(float *)((qword_1ECE82018 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((qword_1ECE82018 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((qword_1ECE82018 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC)
        && result == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(qword_1ECE82018) == HIBYTE(v4)
        && BYTE6(qword_1ECE82018) == BYTE6(v4))
      {
        return result;
      }
    }
    v15 = this;
    v12 = (unsigned int *)(qword_1ECE82018 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = --v13 == 0;
    }
    while (__stlxr(v13, v12));
    v3 = &qword_1ECE82000;
    if (v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
      v3 = &qword_1ECE82000;
      this = v15;
    }
    goto LABEL_8;
  }
  if (qword_1ECE82018 != v4 || (v4 & 0x8000000000000) != 0)
  {
LABEL_8:
    v6 = *(_QWORD *)this;
    v3[3] = *(_QWORD *)this;
    if ((v6 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t WebCore::IOSApplication::isNike(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81750 == 1)
    return byte_1ECE8174F != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8174F = IsEqualTo;
  byte_1ECE81750 = 1;
  return result;
}

void sub_19441D764(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isMiniBrowser(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8175E == 1)
    return byte_1ECE8175D != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8175D = IsEqualTo;
  byte_1ECE8175E = 1;
  return result;
}

void sub_19441D834(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isCardiogram(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8174E == 1)
    return byte_1ECE8174D != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8174D = IsEqualTo;
  byte_1ECE8174E = 1;
  return result;
}

void sub_19441D904(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isHimalaya(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81780 == 1)
    return byte_1ECE8177F != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8177F = IsEqualTo;
  byte_1ECE81780 = 1;
  return result;
}

void sub_19441D9D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::CanvasRenderingContext *WebCore::CanvasBase::removeCanvasNeedingPreparationForDisplayOrFlush(WebCore::CanvasBase *this)
{
  WebCore::CanvasRenderingContext *result;
  WebCore::CanvasRenderingContext *v3;

  result = (WebCore::CanvasRenderingContext *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)this + 88))(this);
  if (result)
  {
    v3 = result;
    if (*((_BYTE *)result + 24))
    {
      result = (WebCore::CanvasRenderingContext *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)this + 144))(this);
      if (result)
      {
        if (!*((_BYTE *)result + 274))
          return (WebCore::CanvasRenderingContext *)WebCore::Document::removeCanvasNeedingPreparationForDisplayOrFlush((WebCore::CanvasRenderingContext *)((char *)result - 192), v3);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::renderingContext(WebCore::HTMLCanvasElement *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t `non-virtual thunk to'WebCore::HTMLCanvasElement::canvasBaseScriptExecutionContext(WebCore::HTMLCanvasElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this - 9) + 8);
  v2 = *(_QWORD *)(v1 + 704);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v1 = v3;
  }
  return v1 + 192;
}

unint64_t *WebCore::TileController::setTileDebugBorderColor(uint64_t a1, _QWORD *a2)
{
  unint64_t *result;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  _QWORD *v8;
  unint64_t *v9;
  __int128 v10;
  __int128 v11;

  result = (unint64_t *)(a1 + 320);
  v4 = *(_QWORD *)(a1 + 320);
  v5 = *a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) != 0)
    {
      v8 = a2;
      v9 = result;
      v11 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v10 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
      if (WebCore::operator==<float,4ul>((float *)&v11, (float *)&v10) && HIBYTE(*v9) == HIBYTE(*v8))
      {
        a2 = v8;
        result = v9;
        if (BYTE6(*v9) == BYTE6(*v8))
          return result;
      }
      else
      {
        a2 = v8;
        result = v9;
      }
    }
LABEL_14:
    WebCore::Color::operator=(result, a2);
    return (unint64_t *)WebCore::TileGrid::updateTileLayerProperties(*(_QWORD *)(a1 + 48), v7);
  }
  if (v4 != v5 || (v5 & 0x8000000000000) != 0)
    goto LABEL_14;
  return result;
}

uint64_t WebCore::FontPlatformData::hash(CFTypeRef *this)
{
  CFHashCode v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v2 = CFHash(*this);
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v5 = v4 + *((unsigned __int8 *)this + 13) + (v4 >> 11);
  v6 = (v5 ^ (v5 << 16)) + *((unsigned __int8 *)this + 27) + ((v5 ^ (v5 << 16)) >> 11);
  v7 = (v6 ^ (v6 << 16)) + *((unsigned __int8 *)this + 14) + ((v6 ^ (v6 << 16)) >> 11);
  v8 = *((unsigned __int8 *)this + 12);
  v9 = ((v7 ^ (v7 << 16)) + v8 + ((v7 ^ (v7 << 16)) >> 11)) ^ (((v7 ^ (v7 << 16)) + v8 + ((v7 ^ (v7 << 16)) >> 11)) << 16);
  v10 = (v9 + v8 + (v9 >> 11)) ^ ((v9 + v8 + (v9 >> 11)) << 16);
  v11 = v10 + *((unsigned __int8 *)this + 24) + (v10 >> 11);
  v12 = (v11 ^ (v11 << 16)) + *((unsigned __int8 *)this + 25) + ((v11 ^ (v11 << 16)) >> 11);
  v13 = (v12 ^ (v12 << 16)) + ((v12 ^ (v12 << 16)) >> 11);
  v14 = (v13 ^ (8 * v13)) + ((v13 ^ (8 * v13)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = v15 ^ (v15 << 10);
  if (v16)
    return v16;
  else
    return 0x800000;
}

uint64_t WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::inlineSet<WebCore::EventTrackingRegionsEventType const&,WebCore::Region const&>(uint64_t a1, uint64_t *a2, _BYTE *a3, _QWORD *a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) >> 16)) & v10;
  v14 = (unsigned __int8 *)(v8 + 32 * v13);
  v15 = *v14;
  if (v15 != 255)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v8 + 32 * v26;
        *(_BYTE *)(a1 + 16) = 0;
        return WebCore::Region::operator=((uint64_t)(v14 + 8), a4);
      }
      if (v15 == 254)
        v16 = v14;
      v13 = ((_DWORD)v13 + v17) & v10;
      v14 = (unsigned __int8 *)(v8 + 32 * v13);
      v15 = *v14;
      ++v17;
    }
    while (v15 != 255);
    if (v16)
    {
      *v16 = -1;
      *((_QWORD *)v16 + 2) = 0;
      *((_QWORD *)v16 + 3) = 0;
      *((_QWORD *)v16 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v11) = *a3;
      v14 = v16;
    }
  }
  *v14 = v11;
  result = WebCore::Region::operator=((uint64_t)(v14 + 8), a4);
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_19;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_25:
      result = WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::rehash(a2, v25, v14);
      v14 = (unsigned __int8 *)result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_25;
  }
LABEL_27:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v21 + 32 * v24;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::rehash(uint64_t *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v20;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v39;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = a2;
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v11 = (_QWORD *)(v9 + 24);
    do
    {
      *((_BYTE *)v11 - 8) = -1;
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v11 += 4;
      --v8;
    }
    while (v8);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (_BYTE *)(v5 + 32 * v12);
      v15 = *v14;
      if (v15 != 254)
      {
        if (v15 == 255)
        {
          v16 = v5 + 32 * v12;
          v17 = *(_QWORD *)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          if (v17)
          {
            v18 = *(WTF **)(v17 + 144);
            if ((WTF *)(v17 + 160) != v18 && v18 != 0)
            {
              *(_QWORD *)(v17 + 144) = 0;
              *(_DWORD *)(v17 + 152) = 0;
              WTF::fastFree(v18, v10);
            }
            v20 = *(WTF **)v17;
            if (v17 + 16 != *(_QWORD *)v17 && v20 != 0)
            {
              *(_QWORD *)v17 = 0;
              *(_DWORD *)(v17 + 8) = 0;
              WTF::fastFree(v20, v10);
            }
            WTF::fastFree((WTF *)v17, v10);
          }
        }
        else
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = 0;
          v25 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
          v26 = ((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) >> 16);
          do
          {
            v27 = v26 & v23;
            v26 = ++v24 + v27;
          }
          while (*(unsigned __int8 *)(v22 + 32 * v27) != 255);
          v28 = v22 + 32 * v27;
          v29 = *(_QWORD *)(v28 + 24);
          *(_QWORD *)(v28 + 24) = 0;
          if (v29)
          {
            v30 = *(WTF **)(v29 + 144);
            if ((WTF *)(v29 + 160) != v30 && v30 != 0)
            {
              *(_QWORD *)(v29 + 144) = 0;
              *(_DWORD *)(v29 + 152) = 0;
              WTF::fastFree(v30, v10);
            }
            v32 = *(WTF **)v29;
            if (v29 + 16 != *(_QWORD *)v29 && v32 != 0)
            {
              *(_QWORD *)v29 = 0;
              *(_DWORD *)(v29 + 8) = 0;
              WTF::fastFree(v32, v10);
            }
            WTF::fastFree((WTF *)v29, v10);
          }
          *(_BYTE *)v28 = *v14;
          v34 = v5 + 32 * v12;
          *(_OWORD *)(v28 + 8) = *(_OWORD *)(v34 + 8);
          v35 = *(_QWORD *)(v34 + 24);
          *(_QWORD *)(v34 + 24) = 0;
          *(_QWORD *)(v28 + 24) = v35;
          v36 = *(_QWORD *)(v34 + 24);
          *(_QWORD *)(v34 + 24) = 0;
          if (v36)
          {
            v37 = *(WTF **)(v36 + 144);
            if ((WTF *)(v36 + 160) != v37 && v37 != 0)
            {
              *(_QWORD *)(v36 + 144) = 0;
              *(_DWORD *)(v36 + 152) = 0;
              WTF::fastFree(v37, v10);
            }
            v39 = *(WTF **)v36;
            if (v36 + 16 != *(_QWORD *)v36 && v39 != 0)
            {
              *(_QWORD *)v36 = 0;
              *(_DWORD *)(v36 + 8) = 0;
              WTF::fastFree(v39, v10);
            }
            WTF::fastFree((WTF *)v36, v10);
          }
          if (v14 == a3)
            v13 = v28;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v10);
  return v13;
}

void WebCore::PageConfiguration::~PageConfiguration(WebCore::PageConfiguration *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  void *v13;
  _DWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  WebCore::ApplicationCacheStorage *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  char v47;

  v3 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>::~optional((uint64_t)this + 592, a2);
  v10 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (WTF::StringImpl **)*((_QWORD *)this + 70);
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 544, v9);
  v14 = (_DWORD *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (unsigned int *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v13);
    }
  }
  v18 = (_DWORD *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = (_DWORD *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = (_DWORD *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = (_DWORD *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = (_DWORD *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
    else
      --v23[2];
  }
  v24 = (_DWORD *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = (WebCore::ApplicationCacheStorage *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v25)
    WTF::RefCounted<WebCore::ApplicationCacheStorage>::deref(v25, (WTF::StringImpl *)v13);
  v26 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
  v28 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
  v29 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v29)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v29 + 8));
  v30 = *((unsigned int *)this + 102);
  if ((_DWORD)v30 != -1)
    ((void (*)(char *, char *))off_1E3400638[v30])(&v47, (char *)this + 400);
  *((_DWORD *)this + 102) = -1;
  v31 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 120))(v32);
    else
      --v32[2];
  }
  v33 = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[2];
  }
  v34 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (*((_BYTE *)this + 352))
    WebCore::ApplicationManifest::~ApplicationManifest((WTF::StringImpl **)this + 11, v13);
  v36 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 152))(v37);
  v38 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 80))(v39);
  v40 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v40)
  {
    v44 = v40 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v40 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 24))(v40);
    }
  }
  v41 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 1904))(v42);
  v43 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
}

uint64_t std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      v5 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v5)
      {
        v6 = *(WTF::StringImpl ***)a1;
        do
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          ++v6;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WebCore::UserContentURLPattern>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(WebCore::SettingsBase *this, const WTF::String *a2)
{
  WTF::StringImpl **v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  _QWORD v25[2];
  uint64_t *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  __int16 v31;
  char v32;

  v5 = (unsigned int *)((char *)this + 80);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 10);
  v6 = v5[3];
  if ((_DWORD)v6)
  {
    v20 = 16 * v6;
    do
    {
      WebCore::ContentType::~ContentType(v4, a2);
      v4 = (WTF::StringImpl **)(v21 + 16);
      v20 -= 16;
    }
    while (v20);
  }
  *((_DWORD *)this + 23) = 0;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v29 = v8;
  v30 = v9;
  v31 = 58;
  v32 = 0;
  v26 = &v29;
  v27 = 0;
  v28 = (_DWORD)v9 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v26);
  v11 = v30;
  while (v27 != v11 || !v28)
  {
    v25[0] = WTF::StringView::SplitResult::Iterator::operator*((unsigned int *)&v26);
    v25[1] = v12;
    WTF::StringView::toString((uint64_t *)&v22, (WTF::StringView *)v25);
    WebCore::ContentType::ContentType((uint64_t)&v23, (uint64_t *)&v22);
    v14 = *((unsigned int *)this + 23);
    if ((_DWORD)v14 == *((_DWORD *)this + 22))
    {
      WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContentType>(v5, (unint64_t)&v23);
    }
    else
    {
      v15 = v14 + 1;
      v16 = *((_QWORD *)this + 10) + 16 * v14;
      v17 = v23;
      v23 = 0;
      *(_QWORD *)v16 = v17;
      *(_BYTE *)(v16 + 8) = v24;
      *((_DWORD *)this + 23) = v15;
    }
    v18 = v23;
    v23 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v13);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = WTF::StringView::SplitResult::Iterator::operator++();
  }
  return result;
}

uint64_t ___ZN3PAL52get_WebPrivacy_WPResourceDataChangedNotificationNameEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F0C0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_85, "WPResourceDataChangedNotificationName");
    if (result)
    {
LABEL_3:
      qword_1ECE7F0D8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F0C0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_85, "WPResourceDataChangedNotificationName");
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  int v4;
  _BYTE v5[24];

  if (!*this)
    return this;
  v2 = (WTF::ASCIICaseInsensitiveHash *)this;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_5:
  {
    WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes = 0;
  }
  this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes, (uint64_t)v5);
  v4 = __ldxr(WebCore::schemeRegistryLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return this;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
}

WebCore::MessagePortChannel *WebCore::MessagePortChannelRegistry::takeAllMessagesForPort(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WebCore::MessagePortChannel *v8;
  _BOOL8 v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  WebCore::MessagePortChannel *result;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;

  v5 = *a2;
  v6 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(a1 + 16), *a2, a2[1]);
  if (v6 && (v7 = v6[2]) != 0 && (v8 = *(WebCore::MessagePortChannel **)(v7 + 8)) != 0)
  {
    ++*(_DWORD *)v8;
    v10 = v5 != *((_QWORD *)v8 + 2) || a2[1] != *((_QWORD *)v8 + 3);
    v11 = (_QWORD *)((char *)v8 + 16 * v10);
    v12 = *((unsigned int *)v11 + 29);
    if ((_DWORD)v12)
    {
      v24 = (WTF *)v11[13];
      v23 = v11 + 13;
      v47 = v24;
      *v23 = 0;
      LODWORD(v48) = *((_DWORD *)v23 + 2);
      *((_DWORD *)v23 + 2) = 0;
      HIDWORD(v48) = v12;
      *((_DWORD *)v23 + 3) = 0;
      ++*((_QWORD *)v8 + 21);
      v45 = *(_OWORD *)a2;
      v25 = (_QWORD *)((char *)v8 + 8 * v10);
      v26 = v25[19];
      v25[19] = 0;
      v27 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v27 = &off_1E33A9180;
      *(_QWORD *)(v27 + 8) = v12;
      *(_OWORD *)(v27 + 16) = v45;
      *(_QWORD *)(v27 + 32) = v26;
      v46 = v27;
      v28 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **, uint64_t *))(*(_QWORD *)v28 + 16))(v28, &v47, &v46);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v30 = v46;
      v46 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v29);
    }
    else
    {
      v47 = 0;
      v48 = 0;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E33A9158;
      *(_QWORD *)&v45 = v13;
      v14 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v47, &v45);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v16 = v45;
      *(_QWORD *)&v45 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      if (HIDWORD(v48))
      {
        v31 = v47;
        v32 = (WTF *)((char *)v47 + 24 * HIDWORD(v48));
        do
        {
          v33 = (WTF *)*((_QWORD *)v31 + 1);
          if (v33)
          {
            *((_QWORD *)v31 + 1) = 0;
            *((_DWORD *)v31 + 4) = 0;
            WTF::fastFree(v33, v15);
          }
          v34 = *(unsigned int **)v31;
          *(_QWORD *)v31 = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v34 + 2), v15);
              WTF::fastFree((WTF *)v34, v43);
            }
          }
          v31 = (WTF *)((char *)v31 + 24);
        }
        while (v31 != v32);
      }
      v17 = v47;
      if (v47)
      {
        v47 = 0;
        LODWORD(v48) = 0;
        WTF::fastFree(v17, v15);
      }
    }
    return WTF::RefCounted<WebCore::MessagePortChannel>::deref(v8);
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E33A92C0;
    *(_QWORD *)&v45 = v19;
    v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v20 + 16))(v20, &v47, &v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v22 = v45;
    *(_QWORD *)&v45 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (HIDWORD(v48))
    {
      v37 = v47;
      v38 = (WTF *)((char *)v47 + 24 * HIDWORD(v48));
      do
      {
        v39 = (WTF *)*((_QWORD *)v37 + 1);
        if (v39)
        {
          *((_QWORD *)v37 + 1) = 0;
          *((_DWORD *)v37 + 4) = 0;
          WTF::fastFree(v39, v21);
        }
        v40 = *(unsigned int **)v37;
        *(_QWORD *)v37 = 0;
        if (v40)
        {
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, v40);
            WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v40 + 2), v21);
            WTF::fastFree((WTF *)v40, v44);
          }
        }
        v37 = (WTF *)((char *)v37 + 24);
      }
      while (v37 != v38);
    }
    result = v47;
    if (v47)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      return (WebCore::MessagePortChannel *)WTF::fastFree(result, v21);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v17;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 - 8);
  v4 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                          - 1640531527);
  v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
  v6 = (a3 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a3 + (v5 >> 11)) << 16) ^ (v5
                                                                                               + (unsigned __int16)a3
                                                                                               + (v5 >> 11));
  v7 = (a3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a3) + (v6 >> 11));
  v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
  v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
  v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = v3 & v10;
  v12 = (uint64_t *)(a1 + 24 * (v3 & v10));
  v13 = *v12;
  v14 = v12[1];
  if (*v12 != a2 || v14 != a3)
  {
    v17 = 1;
    do
    {
      v12 = (uint64_t *)(v13 | v14);
      if (!(v13 | v14))
        break;
      v11 = (v11 + v17) & v3;
      v12 = (uint64_t *)(a1 + 24 * v11);
      v13 = *v12;
      v14 = v12[1];
      ++v17;
    }
    while (*v12 != a2 || v14 != a3);
  }
  return v12;
}

void WebCore::CustomEvent::~CustomEvent(WebCore::CustomEvent *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 3;
    *((_QWORD *)this + 12) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 10) = 0;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::ScriptRunner::~ScriptRunner(WebCore::ScriptRunner *this)
{
  uint64_t v1;
  void *v2;

  WebCore::ScriptRunner::~ScriptRunner(this);
  if (*(_DWORD *)(v1 + 8))
  {
    *(_QWORD *)(v1 + 112) = 0;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::PendingScript **v29;
  WebCore::PendingScript *v30;
  WTF *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::PendingScript **v36;
  uint64_t v37;
  WebCore::PendingScript *v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v2 = *((unsigned int *)this + 13);
  if ((_DWORD)v2)
  {
    v20 = 8 * v2;
    do
    {
      WebCore::Document::decrementLoadEventDelayCount(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
      v20 -= 8;
    }
    while (v20);
  }
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v21 = (uint64_t *)*((_QWORD *)this + 3);
    v22 = 8 * v3;
    do
    {
      v45 = v22;
      v23 = *v21;
      if (*(_QWORD *)(*v21 + 40))
      {
        v24 = *(_QWORD *)(v23 + 48);
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
          *(_QWORD *)(v23 + 48) = 0;
        }
      }
      WebCore::Document::decrementLoadEventDelayCount(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
      ++v21;
      v22 = v45 - 8;
    }
    while (v45 != 8);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 7);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_5:
    v7 = &v4[v6];
    goto LABEL_6;
  }
  v6 = *((unsigned int *)v4 - 1);
  v7 = &v4[v6];
  if (!*((_DWORD *)v4 - 3))
  {
    v5 = &v4[v6];
    goto LABEL_5;
  }
  v5 = (uint64_t *)*((_QWORD *)this + 7);
  if ((_DWORD)v6)
  {
    v25 = 8 * v6;
    v5 = (uint64_t *)*((_QWORD *)this + 7);
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      ++v5;
      v25 -= 8;
      if (!v25)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_6:
  if (v4)
    v4 += *((unsigned int *)v4 - 1);
  if (v4 != v5)
  {
    v44 = v4;
    do
    {
      v46 = v5;
      v26 = *v5;
      if (*(_QWORD *)(*v5 + 40))
      {
        v27 = *(_QWORD *)(v26 + 48);
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
          *(_QWORD *)(v26 + 48) = 0;
        }
      }
      WebCore::Document::decrementLoadEventDelayCount(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
      v5 = v7;
      if (v46 + 1 != v7)
      {
        v5 = v46 + 1;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v7)
          {
            v5 = v7;
            break;
          }
        }
      }
    }
    while (v5 != v44);
  }
  *((_QWORD *)this + 8) = off_1E31F7378;
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebCore::ScriptRunner *)((char *)this + 64));
  v10 = *((_QWORD *)this + 7);
  if (v10)
  {
    v28 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v28)
    {
      v29 = (WebCore::PendingScript **)*((_QWORD *)this + 7);
      do
      {
        v30 = *v29;
        if (*v29 != (WebCore::PendingScript *)-1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*((_DWORD *)v30 + 4) == 1)
            {
              v47 = v28;
              WebCore::PendingScript::~PendingScript(v30, v9);
              WTF::fastFree(v31, v32);
              v28 = v47;
            }
            else
            {
              --*((_DWORD *)v30 + 4);
            }
          }
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  v11 = *((unsigned int *)this + 13);
  if ((_DWORD)v11)
  {
    v33 = (uint64_t *)*((_QWORD *)this + 5);
    v34 = 8 * v11;
    do
    {
      v35 = *v33;
      *v33 = 0;
      if (v35)
        WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v35 + 16), v9);
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  v12 = (WTF *)*((_QWORD *)this + 5);
  if (v12)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v12, v9);
  }
  v13 = *((unsigned int *)this + 9);
  if ((_DWORD)v13)
  {
    v36 = (WebCore::PendingScript **)*((_QWORD *)this + 3);
    v37 = 8 * v13;
    do
    {
      v38 = *v36;
      *v36 = 0;
      if (v38)
      {
        v39 = v37;
        if (*((_DWORD *)v38 + 4) == 1)
        {
          WebCore::PendingScript::~PendingScript(v38, v9);
          WTF::fastFree(v40, v41);
        }
        else
        {
          --*((_DWORD *)v38 + 4);
        }
        v37 = v39;
      }
      ++v36;
      v37 -= 8;
    }
    while (v37);
  }
  v14 = (WTF *)*((_QWORD *)this + 3);
  if (v14)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v14, v9);
  }
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v18 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v18)
      {
        v43 = v15;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v18));
        v15 = v43;
      }
      v19 = *(WTF **)(v15 + 16);
      if (v19)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        v42 = v15;
        WTF::fastFree(v19, v9);
        v15 = v42;
      }
      WTF::fastFree((WTF *)v15, v9);
    }
  }
}

uint64_t WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(uint64_t this, WebCore::Node *a2)
{
  uint64_t *v3;
  WebCore::NodeRareData *v4;
  _OWORD *v5;
  WTF::StringImpl *v6;
  WebCore::MutationObserver *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  bmalloc::api *v15;
  void *v16;
  WebCore::WindowEventLoop *v17;
  WebCore::WindowEventLoop *v18;
  WebCore::WindowEventLoop *v19;
  int v20;
  WebCore::Node *v21;
  int v22;
  WebCore::MutationObserver *v23;
  WebCore::WindowEventLoop *v24[2];
  char v25;

  if ((*(_BYTE *)(this + 40) & 8) == 0)
    return this;
  v3 = (uint64_t *)this;
  v4 = (WebCore::NodeRareData *)WebCore::Node::ensureRareData(a2);
  v5 = WebCore::NodeRareData::mutationObserverData(v4);
  WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MutationObserverRegistration>((uint64_t)(v5 + 1), v3, (uint64_t)v24);
  v7 = (WebCore::MutationObserver *)v3[1];
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(v8 + 2944);
  if (!v9)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 + 192), v6);
    WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v17, v24);
    v18 = v24[0];
    v24[0] = 0;
    v19 = *(WebCore::WindowEventLoop **)(v8 + 2944);
    *(_QWORD *)(v8 + 2944) = v18;
    if (v19)
    {
      v20 = *((_DWORD *)v19 + 2) - 1;
      if (*((_DWORD *)v19 + 2) == 1)
      {
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v19 + 8))(v19);
        v19 = v24[0];
        v24[0] = 0;
        if (!v19)
          goto LABEL_44;
        v20 = *((_DWORD *)v19 + 2) - 1;
        if (*((_DWORD *)v19 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v19 + 8))(v19);
          goto LABEL_44;
        }
      }
      *((_DWORD *)v19 + 2) = v20;
    }
LABEL_44:
    WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*(_QWORD *)(v8 + 2944) + 104, (_QWORD *)(v8 + 192), (uint64_t)v24);
    v9 = *(_QWORD *)(v8 + 2944);
  }
  ++*(_DWORD *)(v9 + 8);
  if (v7)
    ++*(_DWORD *)v7;
  v23 = v7;
  WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::add((uint64_t)v24, (uint64_t *)(v9 + 280), (uint64_t *)&v23);
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      WebCore::MutationObserver::~MutationObserver(v23, v10);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  WebCore::WindowEventLoop::queueMutationObserverCompoundMicrotask((_QWORD *)v9);
  if (*(_DWORD *)(v9 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  else
    --*(_DWORD *)(v9 + 8);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  v11 = v3[4];
  if (!v11 || !*(_DWORD *)(v11 - 12))
  {
    v12 = *(_QWORD *)(v3[2] + 8);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    v13 = v3[3];
    v3[3] = v12;
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
  }
  *((_DWORD *)a2 + 6) += 2;
  v21 = a2;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v23 = a2;
  v22 = 0;
  WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v23, &v22, (uint64_t)v24);
  ++*((_DWORD *)v24[0] + 2);
  if (v25)
    *((_QWORD *)a2 + 2) |= 0x4000000000000uLL;
  this = WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::add((uint64_t)v24, v3 + 4, (uint64_t *)&v21);
  v14 = v21;
  if (v21)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v24[0] = v21;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v24))*((_QWORD *)v14 + 2) &= ~0x4000000000000uLL;
    this = (uint64_t)v21;
    v21 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::Node::ensureRareData(WebCore::Node *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ElementRareData *v6;
  void *v7;

  result = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!result)
  {
    if ((*((_WORD *)this + 14) & 8) != 0)
    {
      v4 = WTF::fastCompactMalloc((WTF *)0x100);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_BYTE *)(v4 + 24) = 1;
      *(_DWORD *)(v4 + 36) = 0;
      *(_DWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 25) = 0;
      *(_BYTE *)(v4 + 33) = 0;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_QWORD *)(v4 + 144) = 0x3F0000003FLL;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_BYTE *)(v4 + 248) = 0;
    }
    else
    {
      v4 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_WORD *)(v4 + 24) = 0;
    }
    v5 = *((_QWORD *)this + 9);
    v6 = (WebCore::ElementRareData *)(v5 & 0xFFFFFFFFFFFFLL);
    if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x18))
        WebCore::ElementRareData::~ElementRareData(v6);
      else
        std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v6, v3);
      WTF::fastFree(v6, v7);
      v5 = *((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 9) = v5 & 0xFFFF000000000000 | v4;
    return v4 & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::ChildListRecord::target(WebCore::_anonymous_namespace_::ChildListRecord *this)
{
  return *((_QWORD *)this + 2);
}

_QWORD *WebCore::WindowEventLoop::queueMutationObserverCompoundMicrotask(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  if (!*((_BYTE *)this + 256))
  {
    v1 = (uint64_t)this;
    *((_BYTE *)this + 256) = 1;
    v2 = (uint64_t)(this + 26);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33A9038;
    v3[1] = v1;
    v4 = v3;
    WebCore::EventLoopTaskGroup::queueMicrotask(v2, (uint64_t *)&v4);
    this = v4;
    if (v4)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  void *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v10 = result & v7;
  v11 = (uint64_t *)(v6 + 8 * (result & v7));
  v12 = *v11;
  v13 = *a3;
  if (*v11)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v12 == v13)
      {
        v24 = *a2;
        if (*a2)
          v25 = *(unsigned int *)(v24 - 4);
        else
          v25 = 0;
        v21 = 0;
        v20 = v24 + 8 * v25;
        goto LABEL_14;
      }
      if (v12 == -1)
        v22 = v11;
      v10 = (v10 + v23) & v7;
      v11 = (uint64_t *)(v6 + 8 * v10);
      v12 = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *v22 = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = *a3;
      v11 = v22;
    }
  }
  *a3 = 0;
  result = *v11;
  *v11 = v13;
  if (result)
    result = (uint64_t)WTF::RefCounted<WebCore::MutationObserver>::deref((WebCore::MutationObserver *)result, v9);
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      goto LABEL_13;
LABEL_18:
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(a2, v11);
    v11 = (uint64_t *)result;
    v16 = *a2;
    if (*a2)
      v19 = *(unsigned int *)(v16 - 4);
    else
      v19 = 0;
    goto LABEL_13;
  }
  if (3 * v19 <= 4 * v18)
    goto LABEL_18;
LABEL_13:
  v20 = v16 + 8 * v19;
  v21 = 1;
LABEL_14:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

uint64_t WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t *v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = result & v7;
    v12 = (uint64_t *)(v6 + 8 * (result & v7));
    v13 = *v12;
    if (!*v12)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = v9;
      }
      result = (uint64_t)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(v12, a3);
      v14 = *a2;
      if (*a2)
        v15 = *(_DWORD *)(v14 - 12) + 1;
      else
        v15 = 1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *a2;
      if (*a2)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      v18 = (*(_DWORD *)(v16 - 16) + v17);
      v19 = *(unsigned int *)(v16 - 4);
      if (v19 > 0x400)
      {
        if (v19 > 2 * v18)
          goto LABEL_14;
      }
      else if (3 * v19 > 4 * v18)
      {
LABEL_14:
        v20 = v16 + 8 * v19;
        v21 = 1;
        goto LABEL_15;
      }
      result = (uint64_t)WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::expand(a2, v12);
      v12 = (uint64_t *)result;
      v16 = *a2;
      if (*a2)
        v19 = *(unsigned int *)(v16 - 4);
      else
        v19 = 0;
      goto LABEL_14;
    }
    if (v13 == -1)
    {
      v9 = (uint64_t *)(v6 + 8 * v11);
      goto LABEL_25;
    }
    if (v13 == *a3)
      break;
LABEL_25:
    result = i + v11;
  }
  v22 = *a2;
  if (*a2)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v21 = 0;
  v20 = v22 + 8 * v23;
LABEL_15:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

uint64_t *WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::Document::windowEventLoop(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t result;
  WebCore::WindowEventLoop *v4;
  WebCore::WindowEventLoop *v5;
  WebCore::WindowEventLoop *v6;
  int v7;
  WebCore::WindowEventLoop *v8[3];

  result = *((_QWORD *)this + 368);
  if (!result)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
    WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v4, v8);
    v5 = v8[0];
    v8[0] = 0;
    v6 = (WebCore::WindowEventLoop *)*((_QWORD *)this + 368);
    *((_QWORD *)this + 368) = v5;
    if (v6)
    {
      v7 = *((_DWORD *)v6 + 2) - 1;
      if (*((_DWORD *)v6 + 2) == 1)
      {
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v6 + 8))(v6);
        v6 = v8[0];
        v8[0] = 0;
        if (!v6)
          goto LABEL_5;
        v7 = *((_DWORD *)v6 + 2) - 1;
        if (*((_DWORD *)v6 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v6 + 8))(v6);
          goto LABEL_5;
        }
      }
      *((_DWORD *)v6 + 2) = v7;
    }
LABEL_5:
    WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*((_QWORD *)this + 368) + 104, (_QWORD *)this + 24, (uint64_t)v8);
    return *((_QWORD *)this + 368);
  }
  return result;
}

_QWORD *WebCore::GCReachableRef<WebCore::ContainerNode,void>::GCReachableRef(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;

  *(_DWORD *)(a2 + 24) += 2;
  *a1 = a2;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v5 = a2;
  v8 = 0;
  WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v5, &v8, (uint64_t)&v6);
  ++*(_DWORD *)(v6 + 8);
  if (v7)
    *(_QWORD *)(a2 + 16) |= 0x4000000000000uLL;
  return a1;
}

uint64_t WebCore::`anonymous namespace'::RecordWithEmptyNodeLists::target(WebCore::_anonymous_namespace_::RecordWithEmptyNodeLists *this)
{
  return *((_QWORD *)this + 2);
}

_OWORD *WebCore::NodeRareData::mutationObserverData(WebCore::NodeRareData *this)
{
  _OWORD *result;
  char *v2;
  WTF *v3;

  v2 = (char *)this + 8;
  result = (_OWORD *)*((_QWORD *)this + 1);
  if (!result)
  {
    result = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
    *result = 0u;
    result[1] = 0u;
    v3 = *(WTF **)v2;
    *(_QWORD *)v2 = result;
    if (v3)
    {
      std::default_delete<WebCore::NodeMutationObserverData>::operator()[abi:sn180100]((int)v2, v3);
      return *(_OWORD **)v2;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(*a1, v14);
          WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v14);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v14);
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t *WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v5 = v2;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v5))*(_QWORD *)(v2 + 16) &= ~0x4000000000000uLL;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  __int16 v5;
  __int16 v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v7 = v2;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v7))*(_QWORD *)(v2 + 16) &= ~0x4000000000000uLL;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        v5 = *(_WORD *)(v3 + 30);
        if ((v5 & 0x400) == 0)
        {
          v6 = *(_WORD *)(v3 + 28);
          if ((v6 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v3);
          }
          else
          {
            if ((v6 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
              v5 = *(_WORD *)(v3 + 30);
            }
            *(_WORD *)(v3 + 30) = v5 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
          }
        }
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*a2 << 32) + *a2;
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 8 * v8);
  *result = 0;
  v11 = *a2;
  *a2 = 0;
  *result = v11;
  return result;
}

_QWORD *WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::rehash(a1, v4, a2);
}

uint64_t ___ZN3PALL23initMCProfileConnectionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL27ManagedConfigurationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E418 == -1)
  {
    result = (uint64_t)objc_getClass("MCProfileConnection");
    qword_1ECE7E438 = result;
    if (result)
    {
LABEL_3:
      PAL::getMCProfileConnectionClass = (uint64_t)PAL::MCProfileConnectionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E418, block);
    result = (uint64_t)objc_getClass("MCProfileConnection");
    qword_1ECE7E438 = result;
    if (result)
      goto LABEL_3;
  }
  result = 35;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL21initUITraitCollectionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UITraitCollection");
    qword_1ECE7EDF0 = result;
    if (result)
    {
LABEL_3:
      PAL::getUITraitCollectionClass = PAL::UITraitCollectionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UITraitCollection");
    qword_1ECE7EDF0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 64;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL17initUIApplicationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIApplication");
    qword_1ECE7ED20 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIApplicationClass = PAL::UIApplicationFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIApplication");
    qword_1ECE7ED20 = result;
    if (result)
      goto LABEL_3;
  }
  result = 51;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL12initUIScreenEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIScreen");
    qword_1ECE7EDC0 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIScreenClass = PAL::UIScreenFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIScreen");
    qword_1ECE7EDC0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 61;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL11initUIColorEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIColor");
    qword_1ECE7ED30 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIColorClass = PAL::UIColorFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIColor");
    qword_1ECE7ED30 = result;
    if (result)
      goto LABEL_3;
  }
  result = 52;
  __break(0xC471u);
  return result;
}

BOOL WebCore::StorageUtilities::writeOriginToFile(uint64_t a1, uint64_t a2)
{
  WTF::FileSystemImpl *v2;
  const WTF::String *v3;
  _BOOL8 v4;
  uint64_t v6;
  WTF::FileSystemImpl *v7;
  const WTF::String *v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int *v12;
  WTF::StringImpl *v13;
  int v14;

  v2 = (WTF::FileSystemImpl *)MEMORY[0x1E0C80A78](a1, a2);
  if (!*(_QWORD *)v2)
    return 0;
  if (!*(_DWORD *)(*(_QWORD *)v2 + 4))
    return 0;
  v6 = (uint64_t)v3;
  v7 = v2;
  if ((WTF::FileSystemImpl::fileExists(v2, v3) & 1) != 0)
    return 0;
  WTF::FileSystemImpl::parentPath(v7, v8);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v13, v9);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v14 = WTF::FileSystemImpl::openFile();
  v4 = v14 != -1;
  if (v14 != -1)
  {
    WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v13);
    WTF::Persistence::Coder<WebCore::SecurityOriginData>::encodeForPersistence((uint64_t)&v13, v6);
    WTF::Persistence::Coder<WebCore::SecurityOriginData>::encodeForPersistence((uint64_t)&v13, v6 + 32);
    WTF::FileSystemImpl::writeToFile();
    WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v13);
  }
  WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v14, v12);
  return v4;
}

uint64_t WebCore::MIMETypeRegistry::usdMIMETypes@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)result = 4;
  *a1 = result;
  *(_QWORD *)(result + 8) = "model/usd";
  *(_QWORD *)(result + 16) = 10;
  *(_QWORD *)(result + 24) = "model/vnd.pixar.usd";
  *(_QWORD *)(result + 32) = 20;
  *(_QWORD *)(result + 40) = "model/vnd.reality";
  *(_QWORD *)(result + 48) = 18;
  *(_QWORD *)(result + 56) = "model/vnd.usdz+zip";
  *(_QWORD *)(result + 64) = 19;
  return result;
}

unint64_t WebCore::ScrollView::updateOverhangAreas(WebCore::ScrollView *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)this + 312))(this);
  if (result)
  {
    v3 = result;
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v7 = 0;
    result = WebCore::ScrollView::calculateOverhangAreasForPainting(this, (WebCore::IntRect *)&v8, (WebCore::IntRect *)&v6);
    if ((int)v9 >= 1 && SHIDWORD(v9) >= 1)
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 64))(v3, &v8);
    if ((int)v7 >= 1 && SHIDWORD(v7) >= 1)
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 64))(v3, &v6);
  }
  return result;
}

unint64_t WebCore::ScrollView::setContentsSize(unint64_t this, const WebCore::IntSize *a2)
{
  WebCore::ScrollView *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a2 != *(_DWORD *)(this + 256) || *((_DWORD *)a2 + 1) != *(_DWORD *)(this + 260))
  {
    v3 = (WebCore::ScrollView *)this;
    *(_QWORD *)(this + 256) = *(_QWORD *)a2;
    if (*(_QWORD *)(this + 40))
    {
      WebCore::ScrollView::platformSetContentsSize((id *)this);
    }
    else if (!*(_DWORD *)(this + 308))
    {
      v7 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)(this + 64) + 832))(this + 64, 0, 1);
      WebCore::ScrollView::updateScrollbars((uint64_t)v3, (const WebCore::IntPoint *)&v7);
    }
    this = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v3 + 312))(v3);
    if (this)
    {
      v4 = this;
      v7 = 0;
      v8 = 0;
      v5 = 0;
      v6 = 0;
      this = WebCore::ScrollView::calculateOverhangAreasForPainting(v3, (WebCore::IntRect *)&v7, (WebCore::IntRect *)&v5);
      if ((int)v8 >= 1 && SHIDWORD(v8) >= 1)
        this = (*(uint64_t (**)(unint64_t, uint64_t *))(*(_QWORD *)v4 + 64))(v4, &v7);
      if ((int)v6 >= 1 && SHIDWORD(v6) >= 1)
        return (*(uint64_t (**)(unint64_t, uint64_t *))(*(_QWORD *)v4 + 64))(v4, &v5);
    }
  }
  return this;
}

uint64_t WebCore::FrameView::hostWindow(WebCore::FrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 48);
  else
    return 0;
}

uint64_t WebCore::Chrome::invalidateRootView(WebCore::Chrome *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**((_QWORD **)this + 2) + 312))(*((_QWORD *)this + 2), a2);
}

WebCore::RenderMarquee *WebCore::LocalFrameView::updateLayerPositionsAfterScrolling(WebCore::RenderMarquee *this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (*((_BYTE *)this + 480) != 3 && *((_BYTE *)this + 481) != 2)
  {
    v1 = (uint64_t **)*((_QWORD *)this + 163);
    if (v1)
    {
      v2 = *v1;
      if (*v1)
      {
        if (*((_DWORD *)v2 - 3))
        {
          v3 = *((unsigned int *)v2 - 1);
          if ((_DWORD)v3)
          {
            v4 = 8 * v3;
            for (i = *v1; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v4 -= 8;
              if (!v4)
                return this;
            }
          }
          else
          {
            i = *v1;
          }
          v6 = &v2[v3];
          if (i != v6)
          {
            v7 = *i;
LABEL_14:
            if (*(_QWORD *)(v7 + 8))
            {
              v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 1944);
                if (v9)
                {
                  WebCore::LocalFrameView::updateWidgetPositions((uint64_t)this);
                  v10 = *(_QWORD *)(v9 + 144);
                  WebCore::RenderLayer::willUpdateLayerPositions(v10, v11);
                  return WebCore::RenderLayer::recursiveUpdateLayerPositionsAfterScroll(v10, 0);
                }
              }
            }
            else
            {
              while (++i != v6)
              {
                v7 = *i;
                if ((unint64_t)(*i + 1) > 1)
                {
                  if (i != v6)
                    goto LABEL_14;
                  return this;
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::scrollContentsFastPath(WebCore::LocalFrameView *this, int32x2_t *a2, int32x2_t *a3, const WebCore::IntRect *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  WebCore::RenderLayer *v34;
  uint64_t *v35;
  uint64_t *v36;
  void *v37;
  int64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  signed int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  __int32 v55;
  int v56;
  int v57;
  void *v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x2_t v70;
  int32x2_t v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x2_t v81;
  double v82;
  double v83;
  int32x2_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v89;
  int v90;
  WTF *v91[2];
  WTF *v92;
  int8x16_t v93;
  _QWORD v94[2];
  WTF *v95;

  v8 = *((_QWORD *)this + 163);
  if (!v8)
    goto LABEL_8;
  v9 = *(uint64_t **)v8;
  if (!*(_QWORD *)v8 || !*((_DWORD *)v9 - 3))
    goto LABEL_8;
  v10 = *((unsigned int *)v9 - 1);
  v11 = *(uint64_t **)v8;
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    v11 = *(uint64_t **)v8;
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_8;
    }
  }
  v16 = &v9[v10];
  if (v11 == v16)
  {
LABEL_8:
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 24) + 8) + 48);
    (*(void (**)(uint64_t, int32x2_t *, int32x2_t *, const WebCore::IntRect *))(*(_QWORD *)v13 + 72))(v13, a2, a3, a4);
    return 1;
  }
  v17 = *v11;
  while (!*(_QWORD *)(v17 + 8))
  {
    do
    {
      if (++v11 == v16)
        goto LABEL_8;
      v17 = *v11;
    }
    while ((unint64_t)(*v11 + 1) <= 1);
    if (v11 == v16)
      goto LABEL_8;
  }
  v18 = *((_QWORD *)this + 41);
  v19 = *(_QWORD *)(v18 + 296);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 1944);
  if (!v20 || (*(_BYTE *)(v20 + 21) & 0x80) == 0)
    goto LABEL_22;
  if ((*(_BYTE *)(v20 + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194420D78);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 144) + 256);
  if (v21 && (v22 = *(_QWORD *)(v21 + 72)) != 0 && (*(_WORD *)(v22 + 177) & 0x20) != 0)
    v90 = 1;
  else
LABEL_22:
    v90 = 0;
  v94[0] = 0;
  v94[1] = 0;
  v95 = 0;
  v23 = *((unsigned int *)v9 - 1);
  v24 = &v9[v23];
  v25 = v24;
  if (*((_DWORD *)v9 - 3))
  {
    if (!(_DWORD)v23)
    {
      v27 = 0;
      v25 = v9;
      goto LABEL_33;
    }
    v26 = 8 * v23;
    v25 = v9;
    while ((unint64_t)(*v25 + 1) <= 1)
    {
      ++v25;
      v26 -= 8;
      if (!v26)
      {
        v25 = v24;
        break;
      }
    }
  }
  v27 = *((unsigned int *)v9 - 1);
LABEL_33:
  v28 = &v9[v27];
  if (v28 != v25)
  {
    while (!*(_QWORD *)(*v25 + 8))
    {
      v29 = v25 + 1;
      v25 = v24;
      if (v29 != v24)
      {
        v25 = v29;
        while ((unint64_t)(*v25 + 1) <= 1)
        {
          if (++v25 == v24)
          {
            v25 = v24;
            break;
          }
        }
      }
      if (v25 == v28)
      {
        v25 = v28;
        break;
      }
    }
  }
  v30 = &v9[*((unsigned int *)v9 - 1)];
  if (v25 != v30)
  {
    while (1)
    {
      v31 = *(_QWORD *)(*v25 + 8);
      v32 = (*(_DWORD *)(v31 + 96) >> 19) & 7;
      if (v32 == 6 || v32 == 3)
      {
        if ((*(_BYTE *)(v31 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v31 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194420D38);
          }
          if (*(_QWORD *)(*(_QWORD *)(v31 + 144) + 256))
            goto LABEL_53;
          if ((*(_BYTE *)(v31 + 45) & 8) == 0)
            goto LABEL_149;
        }
        else if ((*(_BYTE *)(v31 + 45) & 8) == 0)
        {
LABEL_149:
          __break(0xC471u);
          JUMPOUT(0x194420D58);
        }
        v34 = *(WebCore::RenderLayer **)(v31 + 144);
        if ((*((_QWORD *)v34 + 3) & 0x8000000000) == 0)
        {
          if (WebCore::RenderLayer::hasAncestorWithFilterOutsets((_BOOL8)v34))
          {
            v14 = 0;
            goto LABEL_136;
          }
          v38 = WebCore::RenderLayer::repaintRectIncludingNonCompositingDescendants(v34);
          v41 = ((int)v38 >> 6);
          v42 = v38 >> 38;
          v43 = v38 + v39;
          if (__OFADD__((_DWORD)v38, v39))
            v43 = (v38 >> 31) + 0x7FFFFFFF;
          v44 = -(-v43 >> 6);
          if (v43 >= 0)
            v44 = (v43 + 63) >> 6;
          if (v43 <= 2147483583)
            v45 = v44;
          else
            v45 = 0x1FFFFFF;
          if (!v39)
            v45 = (int)v38 >> 6;
          v46 = (HIDWORD(v38) >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(HIDWORD(v38), v40))
            v46 = HIDWORD(v38) + v40;
          v47 = -(-v46 >> 6);
          if (v46 >= 0)
            v47 = (v46 + 63) >> 6;
          if (v46 <= 2147483583)
            v48 = v47;
          else
            v48 = 0x1FFFFFF;
          if (!v40)
            v48 = v38 >> 38;
          v93.i64[0] = v41 | (v42 << 32);
          v93.i64[1] = (v45 - v41) | ((unint64_t)(v48 - v42) << 32);
          v49 = WebCore::ScrollView::contentsToRootView(this, (const WebCore::IntRect *)&v93);
          v93.i64[0] = v49;
          v93.i64[1] = v50;
          v51 = HIDWORD(v50);
          if ((v90 & 1) == 0)
          {
            v52 = a3->i32[1];
            if ((int)v49 <= a3->i32[0])
              v53 = a3->i32[0];
            else
              v53 = v49;
            v54 = v50 + v49;
            v55 = a3[1].i32[1];
            if (SHIDWORD(v49) <= v52)
              v56 = a3->i32[1];
            else
              v56 = HIDWORD(v49);
            if (a3[1].i32[0] + a3->i32[0] < v54)
              v54 = a3[1].i32[0] + a3->i32[0];
            v57 = HIDWORD(v50) + HIDWORD(v49);
            if (v55 + v52 < HIDWORD(v50) + HIDWORD(v49))
              v57 = v55 + v52;
            if (v53 >= v54 || v56 >= v57)
            {
              v53 = 0;
              v56 = 0;
              v54 = 0;
              v57 = 0;
            }
            v93.i64[0] = __PAIR64__(v56, v53);
            LODWORD(v50) = v54 - v53;
            LODWORD(v51) = v57 - v56;
            v93.i32[2] = v54 - v53;
            v93.i32[3] = v51;
          }
          if ((int)v50 >= 1 && (int)v51 >= 1)
          {
            *(int8x16_t *)v91 = v93;
            v92 = 0;
            WebCore::Region::unite((WTF *)v94, (const WebCore::Region *)v91);
            v59 = v92;
            v92 = 0;
            if (v59)
            {
              v60 = (WTF *)*((_QWORD *)v59 + 18);
              if ((WTF *)((char *)v59 + 160) != v60 && v60)
              {
                *((_QWORD *)v59 + 18) = 0;
                *((_DWORD *)v59 + 38) = 0;
                v62 = v59;
                WTF::fastFree(v60, v58);
                v59 = v62;
              }
              v61 = *(WTF **)v59;
              if ((WTF *)((char *)v59 + 16) != *(WTF **)v59 && v61)
              {
                *(_QWORD *)v59 = 0;
                *((_DWORD *)v59 + 2) = 0;
                v63 = v59;
                WTF::fastFree(v61, v58);
                v59 = v63;
              }
              WTF::fastFree(v59, v58);
            }
          }
        }
      }
LABEL_53:
      v35 = v24;
      if (v25 + 1 != v24)
      {
        v35 = v25 + 1;
        while ((unint64_t)(*v35 + 1) <= 1)
        {
          if (++v35 == v24)
          {
            v35 = v24;
            break;
          }
        }
      }
      v25 = v28;
      if (v35 != v28)
      {
        v25 = v35;
        if (!*(_QWORD *)(*v35 + 8))
        {
          while (1)
          {
            v36 = v25 + 1;
            v25 = v24;
            if (v36 != v24)
            {
              v25 = v36;
              while ((unint64_t)(*v25 + 1) <= 1)
              {
                if (++v25 == v24)
                {
                  v25 = v24;
                  break;
                }
              }
            }
            if (v25 == v28)
              break;
            if (*(_QWORD *)(*v25 + 8))
              goto LABEL_69;
          }
          v25 = v28;
        }
      }
LABEL_69:
      ++*(_DWORD *)(v8 + 8);
      if (v25 == v30)
      {
        v18 = *((_QWORD *)this + 41);
        break;
      }
    }
  }
  v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8) + 48);
  (*(void (**)(uint64_t, int32x2_t *, int32x2_t *, const WebCore::IntRect *))(*(_QWORD *)v64 + 72))(v64, a2, a3, a4);
  WebCore::Region::rects((uint64_t)v94, (uint64_t)v91);
  v65 = v91[0];
  if (HIDWORD(v91[1]))
  {
    v66 = 16 * HIDWORD(v91[1]);
    do
    {
      v67 = *(int32x2_t *)v65;
      v68 = *(int32x2_t *)((char *)v65 + 8);
      if (v68.i32[0] >= 1 && (int)HIDWORD(*((_QWORD *)v65 + 1)) >= 1)
      {
        v70 = vadd_s32(v67, v68);
        v71 = vadd_s32(*a2, v67);
        v67 = vmin_s32(v71, v67);
        v68 = vsub_s32(vmax_s32(v70, vadd_s32(v71, v68)), v67);
        *(int32x2_t *)&v72 = v67;
        *((int32x2_t *)&v72 + 1) = v68;
        *(_OWORD *)v65 = v72;
      }
      if (v90)
      {
        v73 = WebCore::ScrollView::rootViewToContents(this, v65);
        *(_QWORD *)v65 = v73;
        *((_QWORD *)v65 + 1) = v74;
        v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 296) + 1944) + 144);
        v76.i64[0] = v73;
        v76.i64[1] = v74;
        v77.i64[0] = 0xFE000000FE000000;
        v77.i64[1] = 0xFE000000FE000000;
        v78 = (int8x16_t)vcgtq_s32(v76, v77);
        v79.i64[0] = 0xFE000000FE000000;
        v79.i64[1] = 0xFE000000FE000000;
        v80.i64[0] = 0x8000000080000000;
        v80.i64[1] = 0x8000000080000000;
        v93 = vorrq_s8((int8x16_t)(*(_OWORD *)&v78 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v79, v76), v80, (int8x16_t)vshlq_n_s32(v76, 6uLL)), v78));
        WebCore::RenderLayer::setBackingNeedsRepaintInRect(v75, v93.i32, 1);
      }
      else
      {
        v81 = vadd_s32(v68, v67);
        v82 = COERCE_DOUBLE(vmax_s32(v67, *a3));
        v83 = COERCE_DOUBLE(vmin_s32(vadd_s32(a3[1], *a3), v81));
        v84 = vcgt_s32(*(int32x2_t *)&v83, *(int32x2_t *)&v82);
        if ((v84.i8[0] & v84.i8[4] & 1) == 0)
        {
          v83 = 0.0;
          v82 = 0.0;
        }
        *(double *)v65 = v82;
        *((int32x2_t *)v65 + 1) = vsub_s32(*(int32x2_t *)&v83, *(int32x2_t *)&v82);
        v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 24) + 8) + 48);
        (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v85 + 64))(v85, v65);
      }
      v65 = (WTF *)((char *)v65 + 16);
      v66 -= 16;
    }
    while (v66);
    v65 = v91[0];
  }
  if (&v92 != (WTF **)v65 && v65)
  {
    v91[0] = 0;
    LODWORD(v91[1]) = 0;
    WTF::fastFree(v65, v37);
  }
  v14 = 1;
LABEL_136:
  v86 = v95;
  v95 = 0;
  if (v86)
  {
    v87 = (WTF *)*((_QWORD *)v86 + 18);
    if ((WTF *)((char *)v86 + 160) != v87 && v87 != 0)
    {
      *((_QWORD *)v86 + 18) = 0;
      *((_DWORD *)v86 + 38) = 0;
      WTF::fastFree(v87, v37);
    }
    v89 = *(WTF **)v86;
    if ((WTF *)((char *)v86 + 16) != *(WTF **)v86 && v89)
    {
      *(_QWORD *)v86 = 0;
      *((_DWORD *)v86 + 2) = 0;
      WTF::fastFree(v89, v37);
    }
    WTF::fastFree(v86, v37);
  }
  return v14;
}

uint64_t WebCore::Chrome::scroll(WebCore::Chrome *this, const WebCore::IntSize *a2, const WebCore::IntRect *a3, const WebCore::IntRect *a4)
{
  uint64_t result;
  uint64_t v6;
  WTF *v8;
  void *v9;
  uint64_t v10;

  result = (*(uint64_t (**)(_QWORD, const WebCore::IntSize *, const WebCore::IntRect *, const WebCore::IntRect *))(**((_QWORD **)this + 2) + 336))(*((_QWORD *)this + 2), a2, a3, a4);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  ++*(_DWORD *)v6;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 80) + 8) + 200);
    if (v10)
      result = WebCore::InspectorOverlay::update(*(WebCore::InspectorOverlay **)(v10 + 72));
  }
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::Page::~Page(v6);
    return WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

WTF::StringImpl ***WebCore::StorageMap::importItems(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  WTF::StringImpl ***result;
  int v9;
  unsigned __int8 v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    __break(0xC471u);
    JUMPOUT(0x194420F58);
  }
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    goto LABEL_35;
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2);
  v7 = *(uint64_t **)a2;
  if (*(_QWORD *)a2)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 == v5)
  {
    result = WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::operator=((WTF::StringImpl ***)(*(_QWORD *)a1 + 8), a2);
    v9 = 0;
    goto LABEL_7;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *v5;
    if (*v5)
      LODWORD(v11) = *(_DWORD *)(v11 + 4) << ((*(_DWORD *)(v11 + 16) & 4) == 0);
    v12 = __CFADD__(v9, (_DWORD)v11);
    v13 = v9 + v11;
    v14 = __CFADD__(v9, (_DWORD)v11);
    if (v12)
      v13 = v9;
    v15 = v5[1];
    if (v15)
      LODWORD(v15) = *(_DWORD *)(v15 + 4) << ((*(_DWORD *)(v15 + 16) & 4) == 0);
    v16 = __CFADD__(v13, (_DWORD)v15);
    v17 = v13 + v15;
    if (v16)
      v14 = 1;
    if (v16)
      v9 = v13;
    else
      v9 = v17;
    if (v14)
      v10 = 1;
    while (1)
    {
      v5 += 2;
      if (v5 == v6)
        break;
      if ((unint64_t)(*v5 + 1) > 1)
        goto LABEL_30;
    }
    v5 = v6;
LABEL_30:
    ;
  }
  while (v5 != v7);
  v18 = v10;
  result = WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::operator=((WTF::StringImpl ***)(*(_QWORD *)a1 + 8), a2);
  if (v18)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x194420F30);
  }
LABEL_7:
  *(_DWORD *)(*(_QWORD *)a1 + 36) = v9;
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[2 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v3];
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v5 -= 16;
      if (!v5)
        return v4;
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::operator=(WTF::StringImpl ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(WTF::StringImpl ***)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v6 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v6)
    {
      v7 = v4;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          v9 = v7[1];
          v7[1] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              WTF::StringImpl::destroy(v9, a2);
              v8 = *v7;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  return a1;
}

WebCore::GCController *WebCore::GCController::GCController(WebCore::GCController *this)
{
  char v3;

  WebCore::Timer::Timer<WebCore::GCController,WebCore::GCController>(this, (uint64_t)this);
  std::call_once[abi:sn180100]<WebCore::GCController::GCController(void)::$_0>((uint64_t)&v3);
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::GCController,WebCore::GCController>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E3392838;
  v4[1] = WebCore::GCController::gcTimerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

uint64_t *WebCore::BackForwardCache::prune(uint64_t *result, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  char *v8;
  int v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  _BYTE buf[12];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  if (*result)
  {
    v4 = (uint64_t)result;
    do
    {
      if (*(_DWORD *)(v2 - 12) <= *(_DWORD *)(v4 + 24))
        break;
      WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::takeFirst(&v15, v4);
      v5 = v15;
      *(_QWORD *)buf = 0;
      WebCore::HistoryItem::setCachedPage(v15, (uint64_t *)buf);
      std::unique_ptr<WebCore::CachedPage>::~unique_ptr[abi:sn180100]((WebCore::CachedPage **)buf);
      *(_DWORD *)(v5 + 208) = a2;
      v6 = qword_1ECE7BEB0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7BEB0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::toString(&v13, *(_QWORD *)(v5 + 352), *(_QWORD *)(v5 + 360));
        WTF::String::utf8();
        v7 = 0;
        if (v14)
          v8 = (char *)v14 + 16;
        else
          v8 = 0;
        if (*(_QWORD *)v4)
          v7 = *(_DWORD *)(*(_QWORD *)v4 - 12);
        v9 = *(_DWORD *)(v4 + 24);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v8;
        v17 = 1024;
        v18 = v7;
        v19 = 1024;
        v20 = v9;
        _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "BackForwardCache::prune removing item: %s, size: %u / %u", buf, 0x18u);
        v11 = v14;
        v14 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
            WTF::fastFree(v11, v10);
          else
            --*(_DWORD *)v11;
        }
        v12 = v13;
        v13 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
      result = (uint64_t *)WTF::RefCounted<WebCore::HistoryItem>::deref(v5);
      v2 = *(_QWORD *)v4;
    }
    while (*(_QWORD *)v4);
  }
  return result;
}

JSCell *WebCore::JSDOMLegacyFactoryFunction<WebCore::JSHTMLImageElement>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  JSCell *v12;
  JSC::VM *v14;
  uint64_t v15;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v14 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v14, (uint64_t)"HTMLImageElement", 17);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194421498);
  }
  v8 = *(_DWORD *)(a2 + 32);
  if (v8 == 1)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (*(_QWORD *)(a2 + 48) == 10)
    {
      v9 = 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, *(_QWORD *)(a2 + 48), &v15);
      if (HIDWORD(v15))
        return 0;
      v9 = v15 | 0x100000000;
      v8 = *(_DWORD *)(a2 + 32);
    }
    if ((unint64_t)(v8 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
    }
    else if (*(_QWORD *)(a2 + 56) == 10)
    {
      v10 = 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, *(_QWORD *)(a2 + 56), &v15);
      if (HIDWORD(v15))
        return 0;
      v10 = v15 | 0x100000000;
    }
  }
  WebCore::HTMLImageElement::createForLegacyFactoryFunction((const WebCore::QualifiedName *)(v7 - 192), v9, v10, &v15);
  v12 = (JSCell *)WebCore::toJSNewlyCreated(*(JSC::VM **)(v5 + 40), (JSC::VM *)&v15, v11);
  WebCore::setSubclassStructureIfNeeded<WebCore::HTMLImageElement>(a1, a2, v12);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v12 = 0;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
  return v12;
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::HTMLImageElement>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  WebCore::JSHTMLElement *v10;
  uint64_t FunctionRealm;
  JSC::VM *v12;
  JSC::JSObject *v13;
  JSC::Structure *v14;
  unint64_t SubclassStructure;
  JSC::VM *v16;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (WebCore::JSHTMLElement *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v12 = (JSC::VM *)FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (v16 = (JSC::VM *)FunctionRealm,
            result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10),
            v12 = v16,
            (result & 1) == 0))
      {
        v13 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSHTMLImageElement>(v10, v12);
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v13, v14);
        if (!*((_DWORD *)v10 + 20))
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
        result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
        if ((result & 1) == 0)
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSHTMLImageElement::subspaceForImpl(WebCore::JSHTMLImageElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4416);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 4416);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 4416);
    *(_QWORD *)(v9 + 4416) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 4416);
  *(_QWORD *)(v3 + 4416) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::getDOMStructure<WebCore::JSHTMLImageElement>(WebCore::JSHTMLElement *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v8;
  JSC::Structure *v9;
  JSC::JSCell *v10;
  uint64_t v11;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSHTMLImageElement::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype(a1, a2, v5);
    Structure = WebCore::JSHTMLImageElementPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v10 = (JSC::JSCell *)WebCore::JSHTMLImageElementPrototype::create(a1, Structure, v8, v9);
    v11 = WebCore::JSHTMLImageElement::createStructure((uint64_t *)a1, (uint64_t)a2, v10);
    return WebCore::cacheDOMStructure((JSCell *)a2, v11, (uint64_t)&WebCore::JSHTMLImageElement::s_info);
  }
  return result;
}

uint64_t WebCore::MediaQueryMatcher::matchMedia@<X0>(uint64_t this@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  const WebCore::Document *v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[3];
  uint64_t v11[2];

  v4 = *(_QWORD *)(this + 8);
  if (v4 && (v6 = *(const WebCore::Document **)(v4 + 8)) != 0)
  {
    v7 = this;
    WebCore::MediaQueryParserContext::MediaQueryParserContext(v10, v6);
    WebCore::MQ::MediaQueryParser::parse(a2, (const WTF::String *)v10, v11);
    v8 = WebCore::MediaQueryMatcher::evaluate(v7, (uint64_t)v11);
    WebCore::MediaQueryList::create(a3, *(WebCore::Document **)(*(_QWORD *)(v7 + 8) + 8), v7, v11, v8);
    return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v9);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

_QWORD *WebCore::ActiveDOMObject::suspendIfNeeded(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v3 == 1 || v3 == 2)
          ++*(_DWORD *)(v2 + 216);
      }
      else
      {
        *(_DWORD *)(v2 - 264) += 2;
      }
      if (*(_BYTE *)(v2 + 179))
      {
        v5 = this;
        v6 = v2;
        (*(void (**)(_QWORD *, _QWORD))(*this + 24))(this, *(unsigned __int8 *)(v2 + 177));
        this = v5;
        v2 = v6;
      }
      if (*(_BYTE *)(v2 + 180))
      {
        v7 = v2;
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 56))(this);
        v2 = v7;
      }
      v4 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v4 == 1)
        {
          if (*(_DWORD *)(v2 + 216) == 1)
            return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
          else
            --*(_DWORD *)(v2 + 216);
        }
        else if (v4 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
        }
      }
      else if (*(_DWORD *)(v2 - 264) == 2)
      {
        if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
          return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288));
      }
      else
      {
        *(_DWORD *)(v2 - 264) -= 2;
      }
    }
  }
  return this;
}

_QWORD *WebCore::MediaQueryList::create(uint64_t *a1, WebCore::Document *a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t List;

  v10 = bmalloc::api::isoAllocate();
  List = WebCore::MediaQueryList::MediaQueryList(v10, a2, a3, a4, a5);
  *a1 = List;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(List + 32));
}

uint64_t WebCore::MediaQueryList::MediaQueryList(uint64_t a1, WebCore::Document *a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF::StringImpl *v12;
  int v13;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  WebCore::ActiveDOMObject::ActiveDOMObject((WebCore::ActiveDOMObject *)(a1 + 32), a2);
  *(_QWORD *)a1 = off_1E3399858;
  *(_QWORD *)(a1 + 32) = &unk_1E33998E8;
  ++*(_DWORD *)a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(a1 + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(a1 + 76) = v9;
  WebCore::MediaQueryMatcher::mediaType(&v16, *(_QWORD *)(a3 + 8));
  v10 = v16;
  if (v16)
  {
    *(_DWORD *)v16 += 2;
    v18 = 0;
    v19 = 0;
    v17 = v10;
    v20 = 0;
    *(_BYTE *)(a1 + 80) = WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(&v17, (uint64_t *)(a1 + 64));
    WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator((WebCore::MQ::MediaQueryEvaluator *)&v17, v11);
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v12);
    else
      *(_DWORD *)v10 -= 2;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v20 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 80) = WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(&v17, (uint64_t *)(a1 + 64));
    WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator((WebCore::MQ::MediaQueryEvaluator *)&v17, v15);
  }
  v13 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a1 + 84) = v13;
  *(_DWORD *)(a1 + 88) = v13 - 1;
  *(_BYTE *)(a1 + 92) = a5;
  *(_WORD *)(a1 + 93) = 0;
  WebCore::MediaQueryMatcher::addMediaQueryList((WebCore::MediaQueryMatcher *)a3, (WebCore::MediaQueryList *)a1);
  return a1;
}

uint64_t WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(_QWORD *a1, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  WebCore::MediaQueryMatcher *v14;
  WebCore::MediaQueryList *v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  _QWORD v18[3];
  _QWORD *v19;

  v2 = *((_DWORD *)a2 + 3);
  if (v2)
  {
    LODWORD(v4) = 0;
    v5 = *a2;
    v6 = *a2 + 56 * v2;
    while (1)
    {
      v7 = *(_QWORD *)(v5 + 8);
      if (!v7 || (*(_DWORD *)(v7 + 4) ? (v12 = v7 == WebCore::allAtomData) : (v12 = 1), v12 || v7 == *a1))
      {
        v17 = 0;
        v16 = &v17;
        v8 = *(unsigned __int8 *)(v5 + 48);
        if (*(_BYTE *)(v5 + 48))
        {
          v8 = *(_DWORD *)(v5 + 36);
          if (v8)
          {
            v9 = *(_QWORD *)(v5 + 24);
            v10 = 88 * v8;
            while (1)
            {
              v18[0] = &v16;
              v18[1] = &v16;
              v18[2] = &v16;
              v11 = *(unsigned int *)(v9 + 80);
              if ((_DWORD)v11 == -1)
                break;
              v19 = v18;
              ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQ16traverseFeaturesIRZNKS9_19MediaQueryEvaluator26collectDynamicDependenciesERKNS9_10MediaQueryEE3__0EEvRKNS_7variantIJNS9_9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEOT_EUlRKSI_E_JZNSA_ISG_EEvSN_SP_EUlRKSJ_E_ZNSA_ISG_EEvSN_SP_EUlRKSK_E_EEEEEJRKNS0_6__implIJSI_SJ_SK_EEEEEEDcSP_DpOT0____fmatrix[v11])(&v19, v9);
              v9 += 88;
              v10 -= 88;
              if (!v10)
              {
                v8 = v17;
                goto LABEL_10;
              }
            }
            v14 = (WebCore::MediaQueryMatcher *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::MediaQueryMatcher::addMediaQueryList(v14, v15);
          }
        }
      }
      else
      {
        v8 = 0;
      }
LABEL_10:
      v4 = v8 | v4;
      v5 += 56;
      if (v5 == v6)
        return v4;
    }
  }
  return 0;
}

unsigned int **WebCore::MediaQueryMatcher::addMediaQueryList(WebCore::MediaQueryMatcher *this, WebCore::MediaQueryList *a2)
{
  uint64_t v3;
  unsigned int **result;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3 == *((_DWORD *)this + 6))
    return WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaQueryList&>((uint64_t)this + 16, (uint64_t)a2);
  result = WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::WeakPtr<void>((unsigned int **)(*((_QWORD *)this + 2) + 8 * v3), (uint64_t)a2);
  ++*((_DWORD *)this + 7);
  return result;
}

WebCore::ContextDestructionObserver *WebCore::ActiveDOMObject::ActiveDOMObject(WebCore::ActiveDOMObject *this, WebCore::Document *a2)
{
  WebCore::ScriptExecutionContext *v2;
  uint64_t v4;
  WebCore::Document *v5;

  if (a2)
  {
    v4 = *((_QWORD *)a2 + 88);
    if (v4)
    {
      v5 = *(WebCore::Document **)(v4 + 8);
      if (v5)
        a2 = v5;
    }
  }
  if (a2)
    v2 = (WebCore::Document *)((char *)a2 + 192);
  else
    v2 = 0;
  return WebCore::ActiveDOMObject::ActiveDOMObject(this, v2);
}

WebCore::ContextDestructionObserver *WebCore::ActiveDOMObject::ActiveDOMObject(WebCore::ContextDestructionObserver *a1, WebCore::ScriptExecutionContext *a2)
{
  *(_QWORD *)a1 = &off_1E33A18C0;
  *((_QWORD *)a1 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(a1, a2);
  *(_QWORD *)a1 = &off_1E33A0540;
  *((_QWORD *)a1 + 2) = 0;
  if (a2)
    WebCore::ScriptExecutionContext::didCreateActiveDOMObject(a2, a1);
  return a1;
}

uint64_t WebCore::ScriptExecutionContext::didCreateActiveDOMObject(WebCore::ScriptExecutionContext *this, WebCore::ActiveDOMObject *a2)
{
  uint64_t result;
  uint64_t v3;
  WebCore::ActiveDOMObject *v4;

  if (*((_BYTE *)this + 278))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v4 = a2;
    return (uint64_t)WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 16, (uint64_t *)&v4, (uint64_t)&v3);
  }
  return result;
}

unsigned int **WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaQueryList&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int **result;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  result = WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::WeakPtr<void>((unsigned int **)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), a2);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int **WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::WeakPtr<void>(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = a2;
    *(_BYTE *)(v4 + 32) = 0;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v6 & 0xFFFF000000000000 | v4;
    v7 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v13 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v13)
        {
          v16 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v13));
          v7 = v16;
        }
        v14 = *(WTF **)(v7 + 16);
        if (v14)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v15 = v7;
          WTF::fastFree(v14, v5);
          v7 = v15;
        }
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  v10 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *a1 = v10;
  return a1;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (WTF **)result;
        v8 = 8 * v5;
        result = (uint64_t)v4;
        v9 = v4;
        do
        {
          v10 = *(WTF **)result;
          *(_QWORD *)v9 = 0;
          v9 = (WTF *)((char *)v9 + 8);
          *v7++ = v10;
          WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)result, v6);
          result = (uint64_t)v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

BOOL WebCore::MediaQueryMatcher::evaluate(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WebCore::RenderStyle *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  _BOOL8 v10;
  void *v11;
  WTF::StringImpl *v13;
  _QWORD v14[3];
  char v15;
  WebCore::RenderStyle *v16;

  WebCore::MediaQueryMatcher::documentElementUserAgentStyle((WebCore::MediaQueryMatcher *)&v16, a1);
  v5 = v16;
  if (v16)
  {
    WebCore::MediaQueryMatcher::mediaType(&v13, *(_QWORD *)(a1 + 8));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v7 = v13;
    if (v13)
      *(_DWORD *)v13 += 2;
    v14[0] = v7;
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v7 = v13;
    }
    v14[1] = v8;
    v14[2] = v5;
    v15 = 2;
    v10 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)v14, a2);
    WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator((WebCore::MQ::MediaQueryEvaluator *)v14, v11);
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    v10 = 0;
  }
  std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v16, v4);
  return v10;
}

WTF::StringImpl **WebCore::MediaQueryMatcher::mediaType(WTF::StringImpl **this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::LocalFrameView *v5;
  WTF::StringImpl *v6;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 528);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(WebCore::LocalFrameView **)(v4 + 288);
          if (v5)
            return (WTF::StringImpl **)WebCore::LocalFrameView::mediaType(v5, this);
        }
      }
    }
  }
  v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v6 += 2;
  *this = v6;
  return this;
}

uint64_t WebCore::MQ::Features::NumberSchema::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  double v5;
  int v6;
  int v7;
  _BOOL4 v9;

  v4 = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3);
  v5 = v4;
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v4 != 0.0;
  v6 = WebCore::MQ::evaluateNumberComparison(a2 + 16, 0, v4);
  v7 = WebCore::MQ::evaluateNumberComparison(a2 + 40, (WTF::StringImpl *)1, v5);
  v9 = v6 == 1 && v7 == 1;
  if (v7 == 2 || v6 == 2)
    return 2;
  else
    return v9;
}

uint64_t WebCore::MQ::evaluateNumberComparison(uint64_t a1, WTF::StringImpl *a2, double a3)
{
  int v3;
  double v4;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  _DWORD *v13;
  uint64_t v14;

  if (!*(_BYTE *)(a1 + 16))
    return 1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16);
  if ((v8 & 0x3F800) != 0)
  {
    v7 = 96;
    __break(0xC471u);
    goto LABEL_26;
  }
  v3 = (int)a2;
  v4 = a3;
  v9 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  if ((v8 & 0x7F) == 0x49)
    goto LABEL_27;
  v10 = *(double *)(v7 + 8);
  while (1)
  {
    if (v9)
      *(_DWORD *)v7 = v9;
    else
      v7 = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v7, a2);
    v11 = v3 ? v4 : v10;
    v12 = v3 ? v10 : v4;
    if (*(_BYTE *)(a1 + 16))
      break;
LABEL_26:
    __break(1u);
LABEL_27:
    v13 = (_DWORD *)v7;
    v14 = 0;
    v10 = WebCore::CSSCalcValue::doubleValue(*(_QWORD *)(v7 + 8), (uint64_t)&v14);
    if (v14)
      WTF::fastFree((WTF *)(v14 - 16), a2);
    v7 = (uint64_t)v13;
    v9 = *v13 - 2;
  }
  if (*(_BYTE *)a1 == 4)
    return v11 >= v12;
  switch(*(_BYTE *)a1)
  {
    case 0:
      result = v11 < v12;
      break;
    case 1:
      result = v11 <= v12;
      break;
    case 2:
      result = v11 == v12;
      break;
    case 3:
      result = v11 > v12;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1944222B8);
  }
  return result;
}

WTF::StringImpl *WebCore::LocalFrameView::mediaType@<X0>(WebCore::LocalFrameView *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 41) + 280) + 16)
                                                                                        + 896))(&v11);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 200);
        if (v10)
        {
          v7 = *(WTF::StringImpl **)(v10 + 136);
          if (v7)
          {
            if (*((_DWORD *)v7 + 1))
            {
              *(_DWORD *)v7 += 2;
              result = v11;
              v11 = v7;
              if (!result)
                goto LABEL_5;
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  v7 = v11;
  if (!v11)
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 130);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
LABEL_5:
  *a2 = v7;
  return result;
}

void WebCore::JSVMClientData::overrideSourceURL(uint64_t a1@<X1>, WTF::StringImpl **a2@<X2>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::Document *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  char v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;

  v4 = *a2;
  if (!*a2 || !*((_DWORD *)v4 + 1))
    goto LABEL_2;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194422574);
  }
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSDOMWindowBase::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSDOMWindowBase::s_info && v10 != 0);
  }
  if (v9
    && ((v13 = *(_QWORD *)(v7 + 3408)) != 0 ? (v14 = *(_BYTE *)(v13 + 56) == 0) : (v14 = 0),
        v14 && (v15 = *(_QWORD *)(v13 + 72)) != 0 && (v16 = *(_QWORD *)(v15 + 8)) != 0))
  {
    if (*(_BYTE *)(v16 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x194422594);
    }
    *(_DWORD *)v4 += 2;
    v28 = v4;
    MEMORY[0x19AEA52D4](&v24, &v28, 0);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if ((v25 & 2) != 0)
    {
      v19 = &v24;
    }
    else
    {
      v22 = (WebCore::Document *)(v16 - 288);
      v19 = &v24;
      if (WebCore::Document::shouldMaskURLForBindingsInternal(v22, (const WTF::URL *)&v24))
      {
        v23 = atomic_load(&WebCore::Document::maskedURLForBindings(void)::onceFlag);
        if (v23 != -1)
        {
          v28 = (WTF::StringImpl *)&v26;
          v27 = &v28;
          std::__call_once(&WebCore::Document::maskedURLForBindings(void)::onceFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Document::maskedURLForBindings(void)::$_0 &&>>);
        }
        v19 = (WTF::StringImpl **)&WebCore::Document::maskedURLForBindings(void)::url;
      }
    }
    v20 = *v19;
    if (*v19)
      *(_DWORD *)v20 += 2;
    *a3 = v20;
    v21 = v24;
    v24 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  else
  {
LABEL_2:
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v5 += 2;
    *a3 = v5;
  }
}

unint64_t WebCore::jsHTMLElement_dataset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::Element::dataset(*(WebCore::Element **)(a2 + 24));
  return WebCore::wrap<WebCore::DatasetDOMStringMap>(a1, v3, v4);
}

_QWORD *WebCore::Element::dataset(WebCore::Element *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  bmalloc::api *v7;
  unsigned int *v8;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v12;
  unsigned int *v13;
  uint64_t v14;
  WTF *v15;

  v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
    WebCore::Node::materializeRareData(this);
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  v3 = *(_QWORD **)(v2 + 72);
  if (!v3)
  {
    v3 = (_QWORD *)bmalloc::api::isoAllocate();
    *v3 = 0;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    v3[1] = v4;
    v7 = *(bmalloc::api **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = v3;
    if (v7)
    {
      v8 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v8)
      {
        do
        {
          v10 = __ldaxr(v8);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v8));
        if (!v11)
        {
          v12 = v7;
          atomic_store(1u, v8);
          v13 = v8;
          v14 = v8[7];
          if ((_DWORD)v14)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v14));
          v15 = (WTF *)*((_QWORD *)v13 + 2);
          if (v15)
          {
            *((_QWORD *)v13 + 2) = 0;
            v13[6] = 0;
            WTF::fastFree(v15, v5);
          }
          WTF::fastFree((WTF *)v13, v5);
          v7 = v12;
        }
      }
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
        *(_QWORD *)v7 = 0;
      }
      bmalloc::api::isoDeallocate(v7, v5);
      return *(_QWORD **)(v2 + 72);
    }
  }
  return v3;
}

void WebCore::CSSPropertyParserHelpers::consumeFontVariantNumeric(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  WebCore::CSSParserTokenRange *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *this;
  if (v5 >= this[1])
  {
    v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v5) == 90)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v6, a2);
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v10 = &v12;
    v11 = 4;
    while (!WebCore::CSSFontVariantNumericParser::consumeNumeric((WebCore::CSSFontVariantNumericParser *)&v8, (__int128 **)this))
    {
      if (*this == this[1])
      {
        WebCore::CSSFontVariantNumericParser::finalizeValue((WTF *)&v8, a2);
        goto LABEL_7;
      }
    }
    *a2 = 0;
LABEL_7:
    WebCore::CSSFontVariantLigaturesParser::~CSSFontVariantLigaturesParser((WebCore::CSSFontVariantLigaturesParser *)&v8, v7);
  }
}

void WebCore::CSSFontVariantLigaturesParser::~CSSFontVariantLigaturesParser(WebCore::CSSFontVariantLigaturesParser *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 1);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          *v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  if ((WebCore::CSSFontVariantLigaturesParser *)((char *)this + 24) != v7 && v7 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, a2);
  }
}

uint64_t WebCore::CSSFontVariantNumericParser::consumeNumeric(WebCore::CSSFontVariantNumericParser *this, __int128 **a2)
{
  __int128 *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int *v12;
  int *v13;

  v4 = *a2;
  if (*a2 >= a2[1])
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    return 2;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 < 0)
  {
    v6 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v6;
  }
  v7 = (unsigned __int16)v6;
  if ((unsigned __int16)v6 - 66 >= 2)
  {
    result = 2;
    switch(v7)
    {
      case '@':
      case 'A':
        result = 1;
        if (!*(_BYTE *)this)
        {
          *(_BYTE *)this = 1;
          goto LABEL_12;
        }
        break;
      case 'D':
      case 'E':
        result = 1;
        if (!*((_BYTE *)this + 2))
        {
          *((_BYTE *)this + 2) = 1;
          goto LABEL_12;
        }
        break;
      case 'F':
        result = 1;
        if (!*((_BYTE *)this + 3))
        {
          *((_BYTE *)this + 3) = 1;
          goto LABEL_12;
        }
        break;
      case 'G':
        result = 1;
        if (!*((_BYTE *)this + 4))
        {
          *((_BYTE *)this + 4) = 1;
          goto LABEL_12;
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    result = 1;
    if (!*((_BYTE *)this + 1))
    {
      *((_BYTE *)this + 1) = 1;
LABEL_12:
      v8 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(a2, (WebCore::CSSParserTokenRange *)a2);
      if (v8 < 0x10000)
      {
        v9 = 0;
      }
      else
      {
        if ((unsigned __int16)v8 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x194422A80);
        }
        v9 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v8 + 3088];
        *v9 += 2;
      }
      v13 = v9;
      v10 = *((unsigned int *)this + 5);
      if ((_DWORD)v10 == *((_DWORD *)this + 4))
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)this + 8, (uint64_t *)&v13);
        v12 = v13;
        v13 = 0;
        if (v12)
        {
          if (*v12 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
          else
            *v12 -= 2;
        }
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v10) = v9;
        *((_DWORD *)this + 5) = v10 + 1;
      }
      return 0;
    }
  }
  return result;
}

WTF *WebCore::CSSFontVariantNumericParser::finalizeValue@<X0>(WTF *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  WTF *v4;
  char *v5;
  WTF::StringImpl *v6;
  WTF *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  WTF *v12;
  uint64_t v13;
  _BYTE v14[32];
  uint64_t v15;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = this;
    v12 = (WTF *)v14;
    v13 = 4;
    v5 = (char *)*((_QWORD *)this + 1);
    if (v5 == (char *)this + 24)
    {
      memcpy(v14, v5, 8 * v3);
    }
    else
    {
      *((_QWORD *)this + 1) = (char *)this + 24;
      v12 = (WTF *)v5;
      v11 = *((_DWORD *)this + 4);
      *((_DWORD *)this + 4) = 4;
      LODWORD(v13) = v11;
    }
    *((_DWORD *)v4 + 5) = 0;
    HIDWORD(v13) = v3;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v12, &v15);
    *a2 = v15;
    if (HIDWORD(v13))
    {
      v8 = v12;
      v9 = 8 * HIDWORD(v13);
      do
      {
        v10 = *(_DWORD **)v8;
        *(_QWORD *)v8 = 0;
        if (v10)
        {
          if (*v10 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v6);
          else
            *v10 -= 2;
        }
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    this = v12;
    if (v14 != (_BYTE *)v12 && v12 != 0)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      return (WTF *)WTF::fastFree(this, v6);
    }
  }
  else
  {
    dword_1ECE8C188 += 2;
    *a2 = &WebCore::staticCSSValuePool[3448];
  }
  return this;
}

uint64_t WebCore::jsNavigator_userAgent(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = WebCore::Navigator::userAgent(*(WebCore::Navigator **)(a2 + 24));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *((_DWORD *)v5 + 1);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    if ((*((_BYTE *)v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(WTF::StringImpl **)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

WTF::StringImpl **WebCore::Navigator::userAgent(WebCore::Navigator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return (WTF::StringImpl **)((char *)this + 120);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return (WTF::StringImpl **)((char *)this + 120);
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return (WTF::StringImpl **)((char *)this + 120);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return (WTF::StringImpl **)((char *)this + 120);
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x194422E28);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return (WTF::StringImpl **)((char *)this + 120);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return (WTF::StringImpl **)((char *)this + 120);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 24);
  if (v10 && *(_QWORD *)(v10 + 8))
  {
    if ((*(_QWORD *)(*(_QWORD *)(v7 + 136) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v21 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v21 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v22 = *(_QWORD *)(v7 + 296);
      if (v22)
      {
        *(_DWORD *)(v22 + 24) += 2;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 64))(v21, v22, 2);
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v23);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v21 + 64))(v21, 0, 2);
      }
    }
    v12 = *((_QWORD *)this + 15);
    v11 = (WTF::StringImpl **)((char *)this + 120);
    if (v12)
      goto LABEL_19;
    WebCore::FrameLoader::userAgent(*(WebCore::FrameLoader **)(v7 + 280), (const WTF::URL *)(*(_QWORD *)(v7 + 296) + 736), (uint64_t *)&v26);
    v14 = v26;
    v26 = 0;
    v15 = *v11;
    *v11 = v14;
    if (!v15)
      goto LABEL_19;
    v16 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      v15 = v26;
      v26 = 0;
      if (!v15)
        goto LABEL_19;
      v16 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v20);
        goto LABEL_19;
      }
    }
    *(_DWORD *)v15 = v16;
  }
  else
  {
    v11 = (WTF::StringImpl **)((char *)this + 120);
  }
  do
  {
LABEL_19:
    v17 = __ldaxr(v8);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v8));
  if (!v18)
  {
    atomic_store(1u, v8);
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v24 = off_1E31FE290;
    *((_QWORD *)v24 + 1) = v8;
    v26 = v24;
    WTF::ensureOnMainThread();
    v25 = v26;
    v26 = 0;
    if (v25)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
  }
  return v11;
}

uint64_t *WebCore::RenderThemeIOS::setCSSValueToSystemColorMap(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((byte_1ECE81F97 & 1) != 0)
  {
    v2 = qword_1ECE82000;
    v3 = *result;
    *result = 0;
    qword_1ECE82000 = v3;
    if (v2)
    {
      v4 = *(unsigned int *)(v2 - 4);
      if ((_DWORD)v4)
      {
        for (i = 0; i != v4; ++i)
        {
          v6 = v2 + 16 * i;
          if (*(_DWORD *)v6)
            v7 = 1;
          else
            v7 = *(_BYTE *)(v6 + 4) == 0;
          if (v7 || !*(_BYTE *)(v6 + 5))
          {
            v8 = *(_QWORD *)(v6 + 8);
            if ((v8 & 0x8000000000000) != 0)
            {
              v15 = i;
              v13 = v4;
              v14 = v2;
              v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
              do
              {
                v10 = __ldaxr(v9);
                v11 = --v10 == 0;
              }
              while (__stlxr(v10, v9));
              v2 = v14;
              if (v11)
              {
                atomic_store(1u, v9);
                WTF::fastFree((WTF *)v9, a2);
                i = v15;
                v4 = v13;
                v2 = v14;
              }
            }
          }
        }
      }
      return (uint64_t *)WTF::fastFree((WTF *)(v2 - 16), a2);
    }
  }
  else
  {
    byte_1ECE81F97 = 1;
    v12 = *result;
    *result = 0;
    qword_1ECE82000 = v12;
  }
  return result;
}

uint64_t ___ZN3PAL13AppSSOLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppSSO.framework/AppSSO", 2);
  _MergedGlobals_54 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

void WebCore::FontCustomPlatformData::~FontCustomPlatformData(WebCore::FontCustomPlatformData *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  const void *v5;

  v3 = (uint64_t *)((char *)this + 16);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v3, a2);
  v5 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(v5);
}

{
  uint64_t *v3;
  WTF::StringImpl *v4;
  const void *v5;

  v3 = (uint64_t *)((char *)this + 16);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v3, a2);
  v5 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(v5);
}

void WebCore::LocalFrame::init(WebCore::LocalFrame *this)
{
  WebCore::FrameLoader *v1;

  v1 = (WebCore::FrameLoader *)*((_QWORD *)this + 35);
  ++*(_DWORD *)v1;
  WebCore::FrameLoader::init(v1);
  if (*(_DWORD *)v1)
    --*(_DWORD *)v1;
  else
    __break(0xC471u);
}

void WebCore::FrameLoader::init(WebCore::FrameLoader *this)
{
  uint64_t v2;
  _DWORD **v3;
  WTF::StringImpl *v4;
  char v5;
  _DWORD *v6;
  WebCore::DocumentLoader *v7;
  WTF::StringImpl *v8;
  WebCore::DocumentLoader *v9;
  WebCore::DocumentLoader *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::DocumentLoader *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  WebCore::FrameLoader::FrameProgressTracker *v32;
  WTF *v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  _OWORD v46[3];
  _OWORD v47[8];
  __int128 v48;
  int64x2_t v49;
  int64x2_t v50;
  __int128 v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  WTF::StringImpl *v56[5];
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[7];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  char v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  WebCore::DocumentLoader *v76;
  WebCore::DocumentLoader *v77;

  v2 = *((_QWORD *)this + 2);
  v56[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v56);
  v3 = (_DWORD **)MEMORY[0x1E0CBF738];
  MEMORY[0x19AEA52F8](&v57, v56, MEMORY[0x1E0CBF738], 0);
  v4 = v57;
  if (v57)
    *(_DWORD *)v57 += 2;
  v61 = v58;
  v62 = v59;
  v60 = v4;
  v63[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v63);
  v63[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63[6] = *(_QWORD *)&v46[0];
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0x10000;
  v5 = v68 & 0x80 | 4;
  v68 = v5;
  v69 = 0;
  v6 = *v3;
  if (*v3)
  {
    *v6 += 2;
    v5 = v68;
  }
  v70 = v6;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = v74 & 0xE0 | 5;
  v68 = v5 | 2;
  v75 = 0;
  v55 = 0;
  v53 = 0uLL;
  v54 = 0uLL;
  memset(v52, 0, sizeof(v52));
  v50 = 0uLL;
  v51 = 0uLL;
  v48 = 0uLL;
  v49 = 0uLL;
  memset(v47, 0, sizeof(v47));
  memset(v46, 0, sizeof(v46));
  WTF::URL::invalidate((WTF::URL *)((char *)v46 + 8));
  *(_QWORD *)&v47[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v47);
  LOBYTE(v48) = 0;
  WORD4(v48) = 0;
  memset((char *)&v47[2] + 8, 0, 81);
  v49 = vdupq_n_s64(0x7FF8000000000000uLL);
  v50 = v49;
  v51 = 0uLL;
  *(int64x2_t *)((char *)v52 + 8) = v49;
  *(_QWORD *)&v52[0] = 0x8000000000000000;
  *((_QWORD *)&v52[1] + 1) = 0x7FF8000000000000;
  LOBYTE(v53) = v53 & 0xF0;
  WORD4(v53) &= 0xC000u;
  BYTE10(v53) = BYTE10(v53) & 0xF8 | 2;
  *(_QWORD *)&v54 = 0;
  BYTE8(v54) = 0;
  BYTE10(v48) = BYTE10(v48) & 0xC0 | 5;
  LOBYTE(v55) = 1;
  (*(void (**)(WebCore::DocumentLoader **__return_ptr, uint64_t, WTF::StringImpl **, _OWORD *))(*(_QWORD *)v2 + 760))(&v76, v2, &v60, v46);
  v7 = v76;
  v76 = 0;
  v77 = v7;
  WebCore::FrameLoader::setPolicyDocumentLoader((uint64_t)this, &v77, 0);
  v9 = v77;
  v77 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v9 + 24))(v9);
    else
      --*((_DWORD *)v9 + 6);
  }
  v10 = v76;
  v76 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v10 + 24))(v10);
    else
      --*((_DWORD *)v10 + 6);
  }
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v46, v8);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v60, v11);
  v13 = v57;
  v57 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v56[0];
  v56[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)this + 13);
  if (v15)
    ++*(_DWORD *)(v15 + 24);
  *(_QWORD *)&v46[0] = v15;
  WebCore::FrameLoader::setProvisionalDocumentLoader((uint64_t)this, (uint64_t *)v46);
  if (*(_QWORD *)&v46[0])
  {
    if (*(_DWORD *)(*(_QWORD *)&v46[0] + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)&v46[0] + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)&v46[0] + 24);
  }
  v16 = (WebCore::DocumentLoader *)*((_QWORD *)this + 12);
  if (v16)
  {
    ++*((_DWORD *)v16 + 6);
    WebCore::DocumentLoader::startLoadingMainResource(v16);
    if (*((_DWORD *)v16 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v16 + 24))(v16);
    else
      --*((_DWORD *)v16 + 6);
  }
  else
  {
    WebCore::DocumentLoader::startLoadingMainResource(0);
  }
  *(_QWORD *)&v46[0] = 0;
  WebCore::FrameLoader::setPolicyDocumentLoader((uint64_t)this, (WebCore::DocumentLoader **)v46, 0);
  if (*(_QWORD *)&v46[0])
  {
    if (*(_DWORD *)(*(_QWORD *)&v46[0] + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)&v46[0] + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)&v46[0] + 24);
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v18 = (unsigned int *)(v17 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v20 = *(_QWORD *)(v17 + 296);
  if (v20)
  {
    *(_DWORD *)(v20 + 24) += 2;
    WebCore::Document::cancelParsing(v20);
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, v21);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::cancelParsing(0);
  }
  *((_DWORD *)this + 16) = 1;
  (*(void (**)(_OWORD *__return_ptr))(**((_QWORD **)this + 2) + 984))(v46);
  v22 = *(_QWORD *)&v46[0];
  *(_QWORD *)&v46[0] = 0;
  v23 = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v22;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
    }
    v27 = *(unsigned int **)&v46[0];
    *(_QWORD *)&v46[0] = 0;
    if (v27)
    {
      v41 = v27 + 2;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v27 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 16))(v27);
      }
    }
  }
  v29 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v29 = 0;
  if (!*(_QWORD *)(v17 + 16))
  {
    v37 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = v17;
    v38 = *(unsigned int **)(v17 + 16);
    *(_QWORD *)(v17 + 16) = v37;
    if (v38)
    {
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v28);
      }
    }
  }
  v30 = *(unsigned int **)(v17 + 16);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *(_QWORD *)(v29 + 8) = v30;
  *(_BYTE *)(v29 + 16) = 0;
  v32 = (WebCore::FrameLoader::FrameProgressTracker *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v29;
  if (v32)
  {
    WebCore::FrameLoader::FrameProgressTracker::~FrameProgressTracker(v32, (unsigned int *)v28);
    if (*(_DWORD *)v33)
    {
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v33, v34);
    }
  }
  do
  {
    v35 = __ldaxr(v18);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v18));
  if (!v36)
  {
    atomic_store(1u, v18);
    v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v44 = off_1E31FE290;
    v44[1] = v18;
    *(_QWORD *)&v46[0] = v44;
    WTF::ensureOnMainThread();
    v45 = *(_QWORD *)&v46[0];
    *(_QWORD *)&v46[0] = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
}

uint64_t WebCore::FrameLoader::setPolicyDocumentLoader(uint64_t result, WebCore::DocumentLoader **a2, uint64_t a3)
{
  WebCore::DocumentLoader *v3;
  WebCore::DocumentLoader *v4;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  WebCore::LocalFrame *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  WebCore::DocumentLoader *v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  WebCore::DocumentLoader *v31;
  __int16 v32;
  WebCore::DocumentLoader *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *(WebCore::DocumentLoader **)(result + 104);
  v4 = *a2;
  if (v3 != *a2)
  {
    v7 = (_QWORD *)result;
    v8 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD **)(v7[1] + 8);
      v10 = v9[3];
      if (v10)
      {
        v10 = *(_QWORD *)(v10 + 8);
        if (v10)
        {
          if (*(_BYTE *)(v10 + 40))
            v10 = *(_QWORD *)(v10 + 32);
          else
            v10 = 0;
        }
      }
      v11 = v9[4];
      v12 = *(_QWORD *)(v9[16] + 8) == (_QWORD)v9;
      *(_DWORD *)v23 = 134219264;
      *(_QWORD *)&v23[4] = v7;
      v24 = 2048;
      v25 = v10;
      v26 = 2048;
      v27 = v11;
      v28 = 1024;
      v29 = v12;
      v30 = 2048;
      v31 = v4;
      v32 = 2048;
      v33 = v3;
      _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::setPolicyDocumentLoader: Setting policy document loader to %p (was %p)", v23, 0x3Au);
      v4 = *a2;
    }
    if (v4)
    {
      v13 = *(WebCore::LocalFrame **)(v7[1] + 8);
      v14 = (unsigned int *)((char *)v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      WebCore::DocumentLoader::attachToFrame(v4, v13);
      do
      {
        v16 = __ldaxr(v14);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v14));
      if (!v17)
      {
        atomic_store(1u, v14);
        v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v21 = off_1E31FE290;
        v21[1] = v14;
        *(_QWORD *)v23 = v21;
        WTF::ensureOnMainThread();
        v22 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
    }
    v18 = (_DWORD *)v7[13];
    if (v18)
    {
      v19 = v18[6];
      v18[6] = v19 + 1;
      if (v18 != (_DWORD *)v7[12] && v18 != (_DWORD *)v7[11])
      {
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v18 + 32))(v18, a3);
        v19 = v18[6] - 1;
      }
      if (v19)
        v18[6] = v19;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18);
    }
    v20 = *a2;
    *a2 = 0;
    result = v7[13];
    v7[13] = v20;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      else
        --*(_DWORD *)(result + 24);
    }
  }
  return result;
}

WebCore::DocumentLoader *WebCore::DocumentLoader::attachToFrame(WebCore::DocumentLoader *this, WebCore::LocalFrame *a2)
{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v3 = this;
  v4 = *((_QWORD *)this + 2);
  if (!v4 || *(WebCore::LocalFrame **)(v4 + 8) != a2)
  {
    WebCore::FrameDestructionObserver::observeFrame(this, a2);
    v6 = *((_QWORD *)a2 + 2);
    if (v6)
      goto LABEL_25;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a2;
    v22 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v6;
    if (!v22)
      goto LABEL_25;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v5);
    }
    v6 = *((_QWORD *)a2 + 2);
    if (v6)
    {
LABEL_25:
      do
        v7 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v7 + 1, (unsigned int *)v6));
    }
    v8 = (unsigned int *)*((_QWORD *)v3 + 14);
    *((_QWORD *)v3 + 14) = v6;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v5);
      }
    }
    this = (WebCore::DocumentLoader *)(*(uint64_t (**)(WebCore::DocumentLoader *))(*(_QWORD *)v3 + 56))(v3);
    v11 = *((_QWORD *)v3 + 2);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        if (*(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) == v12)
        {
          *(_QWORD *)(*(_QWORD *)(v12 + 136) + 688) = *(_QWORD *)(*(_QWORD *)(v12 + 136) + 688) & 0xFFFFFFFFFFFFFBFFLL | ((unint64_t)(*((_BYTE *)v3 + 3524) == 2) << 10);
          v13 = *((_QWORD *)v3 + 2);
          if (*((_BYTE *)v3 + 3526) == 1)
          {
            v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 136);
            v15 = *(_QWORD *)(v14 + 712);
            if ((v15 & 0x4000000000) != 0)
            {
              v16 = *(unsigned int *)(v14 + 720) | ((unint64_t)*(unsigned __int8 *)(v14 + 724) << 32);
              v17 = *(_QWORD *)(v14 + 704);
              v18 = *(_QWORD *)(v14 + 696);
              v19 = *(_QWORD *)(v14 + 688);
              v20 = *(_QWORD *)(v14 + 680);
              v21 = *(_QWORD *)(v14 + 672);
              *(_QWORD *)(v14 + 664) = *(_QWORD *)(v14 + 664);
              *(_QWORD *)(v14 + 672) = v21;
              *(_QWORD *)(v14 + 680) = v20;
              *(_QWORD *)(v14 + 688) = v19;
              *(_QWORD *)(v14 + 696) = v18;
              *(_QWORD *)(v14 + 704) = v17;
              *(_QWORD *)(v14 + 712) = v15 & 0xFFFFFFBFFFFFFFFFLL;
              *(_DWORD *)(v14 + 720) = v16;
              *(_BYTE *)(v14 + 724) = BYTE4(v16);
              WebCore::SettingsBase::setNeedsRelayoutAllFrames(v14);
              v13 = *((_QWORD *)v3 + 2);
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 136) + 712) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8)
                                                                                                 + 136)
                                                                                     + 712) & 0xFFFFFBFFFFFFFFFFLL | ((unint64_t)*((unsigned __int8 *)v3 + 3531) << 42);
          return (WebCore::DocumentLoader *)WebCore::DocumentLoader::updateAdditionalSettingsIfNeeded(v3);
        }
      }
    }
  }
  return this;
}

void WebCore::DocumentLoader::attachToFrame(WebCore::DocumentLoader *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  char v8;
  int v9;
  WebCore::DocumentLoader *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  _BOOL4 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v3 + 8));
        if (v8)
          v5 = v7;
        else
          v5 = 0;
        v3 = *(_QWORD *)(v4 + 32);
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4;
      }
      else
      {
        v5 = 0;
        v3 = 0;
        v6 = 0;
      }
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v4 = 0;
    }
    v9 = 134219008;
    v10 = this;
    v11 = 2048;
    v12 = v5;
    v13 = 2048;
    v14 = v3;
    v15 = 1024;
    v16 = v6;
    v17 = 2048;
    v18 = v4;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::DocumentLoader::attachToFrame: m_frame=%p", (uint8_t *)&v9, 0x30u);
  }
}

double WebCore::Frame::pageID(WebCore::Frame *this)
{
  uint64_t v1;
  int8x16_t v2;
  int8x16_t *v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  double result;

  v1 = *((_QWORD *)this + 3);
  v2 = 0uLL;
  if (v1)
  {
    v3 = *(int8x16_t **)(v1 + 8);
    v4 = 0uLL;
    if (v3)
    {
      v5 = v3[2];
      v6.i64[0] = -256;
      v6.i64[1] = -256;
      v4 = vandq_s8(v5, v6);
      v7.i64[0] = 255;
      v7.i64[1] = 255;
      v2 = vandq_s8(v5, v7);
    }
  }
  else
  {
    v4 = 0uLL;
  }
  *(_QWORD *)&result = vorrq_s8(v2, v4).u64[0];
  return result;
}

void WebCore::DocumentLoader::startLoadingMainResource(WebCore::DocumentLoader *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF *Empty;
  NSObject *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t isMainThread;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t (*v25)();
  WebCore::ContentFilter *v26;
  WTF *v27;
  void *v28;
  WTF::StringImpl *v29;
  WebCore::ContentFilter *v30;
  WTF *v31;
  void *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::Page *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  const void *v50;
  _QWORD *v51;
  WTF::StringImpl *v52;
  CFTypeRef v53;
  void *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  void *v66;
  char v67;
  WTF::StringImpl *v68;
  _QWORD *v69;
  _BYTE v70[152];
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  char v75;
  const void *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 v79;
  __int128 v80;
  _BYTE buf[22];
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  WTF::StringImpl *v86[4];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  char v91;
  __int16 v92;
  char v93;
  int64x2_t v94;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int64x2_t v99;
  uint64_t v100;
  char v101;
  __int16 v102;
  char v103;
  CFTypeRef v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v2 = (_QWORD *)v2[1];
    if (v2)
    {
      if ((*(_QWORD *)(v2[17] + 696) & 0x80) != 0)
      {
        v3 = v2[15];
        if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
          LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200))(v4) ^ 1;
        else
          LOBYTE(v2) = 1;
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
  }
  *((_BYTE *)this + 3553) = (_BYTE)v2;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  WTF::URL::invalidate((WTF::URL *)&buf[8]);
  v86[3] = 0;
  v86[1] = 0;
  *(WTF::StringImpl **)((char *)&v86[1] + 6) = 0;
  LOBYTE(v87) = 1;
  WebCore::ResourceErrorBase::operator=((uint64_t)this + 1528, (uint64_t *)buf);
  v6 = v86[3];
  v86[3] = 0;
  v7 = (const void *)*((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = v6;
  if (v7)
  {
    CFRelease(v7);
    v68 = v86[3];
    *((_BYTE *)this + 1600) = v87;
    v86[3] = 0;
    if (v68)
      CFRelease(v68);
  }
  else
  {
    *((_BYTE *)this + 1600) = v87;
    v86[3] = 0;
  }
  v8 = v86[1];
  v86[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      v10 = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::MonotonicTime::now(v10);
  *((_QWORD *)this + 341) = v11;
  *((_BYTE *)this + 3548) = 1;
  ++*((_DWORD *)this + 6);
  v12 = (WTF::StringImpl **)((char *)this + 872);
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  if (WTF::URL::protocolIs()
    && (WTF::URL::isAboutBlank((WebCore::DocumentLoader *)((char *)this + 872)) & 1) == 0
    && (WTF::URL::isAboutSrcDoc((WebCore::DocumentLoader *)((char *)this + 872)) & 1) == 0
    && (*((_BYTE *)this + 880) & 4) != 0
    && WTF::linkedOnOrAfterSDKWithBehavior())
  {
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280) + 16);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, char *))(*(_QWORD *)v58 + 592))(buf, v58, (char *)this + 872);
    WebCore::DocumentLoader::cancelMainResourceLoad((uint64_t)this, (uint64_t)buf, 0);
    v60 = v86[3];
    v86[3] = 0;
    if (v60)
      CFRelease(v60);
    v61 = v86[1];
    v86[1] = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v59);
      else
        *(_DWORD *)v61 -= 2;
    }
    v62 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v59);
      else
        *(_DWORD *)v62 -= 2;
    }
    v63 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v59);
      else
        *(_DWORD *)v63 -= 2;
    }
LABEL_100:
    if (*((_DWORD *)this + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)this + 24))(this);
    else
      --*((_DWORD *)this + 6);
    return;
  }
  Empty = (WTF *)WebCore::DocumentLoader::maybeLoadEmpty((uint64_t)this);
  if ((_DWORD)Empty)
  {
    v14 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *((_QWORD *)this + 2);
      if (v15)
      {
        v16 = *(_QWORD **)(v15 + 8);
        if (v16)
        {
          v15 = v16[3];
          if (v15)
          {
            v15 = *(_QWORD *)(v15 + 8);
            if (v15)
            {
              if (*(_BYTE *)(v15 + 40))
                v15 = *(_QWORD *)(v15 + 32);
              else
                v15 = 0;
            }
          }
          v17 = v16[4];
          LODWORD(v16) = *(_QWORD *)(v16[16] + 8) == (_QWORD)v16;
        }
        else
        {
          v15 = 0;
          v17 = 0;
        }
      }
      else
      {
        v17 = 0;
        LODWORD(v16) = 0;
      }
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      v82 = 2048;
      v83 = v17;
      v84 = 1024;
      v85 = (int)v16;
      _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource: Returning empty document", buf, 0x26u);
    }
    goto LABEL_100;
  }
  v18 = *((_QWORD *)this + 2);
  v21 = v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0 && (v20 = *(_QWORD *)(v19 + 288)) != 0 && *(_QWORD *)(v20 + 40) != 0;
  isMainThread = WTF::isMainThread(Empty);
  if ((isMainThread & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194424368);
  }
  WebCore::contentFilterInDocumentLoader(void)::filter = v21;
  if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194424388);
  }
  if (WebCore::contentFilterInDocumentLoader(void)::filter)
  {
    v24 = 0;
    if (*((_QWORD *)this + 45))
      v25 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
    else
      v25 = 0;
    if (!v25)
    {
      WebCore::ContentFilter::create((uint64_t)this + 40, (uint64_t *)buf);
      v24 = *(_QWORD *)buf;
    }
    *(_QWORD *)buf = 0;
    v26 = (WebCore::ContentFilter *)*((_QWORD *)this + 361);
    *((_QWORD *)this + 361) = v24;
    if (v26)
    {
      WebCore::ContentFilter::~ContentFilter(v26, v23);
      WTF::fastFree(v27, v28);
      v30 = *(WebCore::ContentFilter **)buf;
      *(_QWORD *)buf = 0;
      if (v30)
      {
        WebCore::ContentFilter::~ContentFilter(v30, v29);
        WTF::fastFree(v31, v32);
      }
    }
  }
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  v33 = *v12;
  if (*v12)
    *(_DWORD *)v33 += 2;
  v78 = v33;
  v34 = *((_OWORD *)this + 56);
  v79 = *((_OWORD *)this + 55);
  v80 = v34;
  WTF::URL::consumeFragmentDirective((WTF::URL *)&v78);
  v36 = *((_BYTE *)this + 1020);
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    v67 = *((_BYTE *)this + 1020);
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    v36 = v67;
    *((_BYTE *)this + 1056) |= 1u;
  }
  v37 = v78;
  if (v78)
    *(_DWORD *)v78 += 2;
  v38 = v36 & 0x20;
  v39 = *v12;
  *v12 = v37;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v35);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v80;
  *((_OWORD *)this + 55) = v79;
  *((_OWORD *)this + 56) = v40;
  *((_BYTE *)this + 1020) = *((_BYTE *)this + 1020) & 0xDF | v38;
  *((_BYTE *)this + 1056) &= ~2u;
  v41 = *((_QWORD *)this + 2);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 8);
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 24);
      if (v43)
      {
        v44 = *(WebCore::Page **)(v43 + 8);
        if (v44)
        {
          ++*(_DWORD *)v44;
          v45 = v77;
          if (v77)
          {
            if (*((_DWORD *)v77 + 1))
            {
              v77 = 0;
              v64 = (WTF::StringImpl *)*((_QWORD *)v44 + 27);
              *((_QWORD *)v44 + 27) = v45;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, v35);
                else
                  *(_DWORD *)v64 -= 2;
              }
            }
          }
          if (*(_DWORD *)v44 == 1)
          {
            WebCore::Page::~Page(v44);
            WTF::fastFree(v65, v66);
          }
          else
          {
            --*(_DWORD *)v44;
          }
        }
      }
    }
  }
  WebCore::ResourceRequestBase::clearHTTPUserAgent((_BYTE *)this + 872, v35);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v70, (WebCore::DocumentLoader *)((char *)this + 872));
  v46 = (_DWORD *)*((_QWORD *)this + 128);
  if (v46)
    *v46 += 2;
  v71 = v46;
  v47 = (_DWORD *)*((_QWORD *)this + 129);
  if (v47)
    *v47 += 2;
  v72 = v47;
  v48 = (_DWORD *)*((_QWORD *)this + 130);
  if (v48)
    ++*v48;
  v49 = *((_QWORD *)this + 131);
  v73 = v48;
  v74 = v49;
  v75 = *((_BYTE *)this + 1056);
  v50 = (const void *)*((_QWORD *)this + 133);
  v76 = v50;
  if (v50)
    CFRetain(v50);
  *(_QWORD *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  v91 = 0;
  v92 = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  v94 = vdupq_n_s64(0x7FF8000000000000uLL);
  v95 = v94;
  v96 = 0;
  v97 = 0;
  v99 = v94;
  v98 = 0x8000000000000000;
  v100 = 0x7FF8000000000000;
  v101 &= 0xF0u;
  v102 &= 0xC000u;
  v103 = v103 & 0xF8 | 2;
  v104 = 0;
  v105 = 0;
  v93 = v93 & 0xC0 | 5;
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v51 = &off_1E33F3900;
  v51[1] = this;
  v51[2] = this;
  v69 = v51;
  WebCore::DocumentLoader::willSendRequest((uint64_t)this, (WebCore::ResourceRequest *)v70, (uint64_t)buf, (uint64_t *)&v69);
  if (v69)
    (*(void (**)(_QWORD *))(*v69 + 8))(v69);
  v53 = v104;
  v104 = 0;
  if (v53)
    CFRelease(v53);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v52);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v70, v54);
  v56 = v77;
  v77 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v55);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v78;
  v78 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v55);
    else
      *(_DWORD *)v57 -= 2;
  }
}

uint64_t WebCore::DocumentLoader::maybeLoadEmpty(uint64_t this)
{
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::FrameLoader *v46;
  uint64_t v47;
  WebCore::FormData *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::FrameLoader *v57;
  const WTF::URL *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  CFTypeRef v68;
  _BYTE v69[48];
  _BYTE v70[32];
  char v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73[7];
  char v74;
  WTF::StringImpl *v75;
  __int128 v76;
  __int128 v77;
  char v78;
  _BYTE v79[65];
  WTF::StringImpl *v80[5];
  unsigned __int8 *v81;
  __int128 v82;
  __int128 v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  __int16 v92;
  char v93;
  int64x2_t v94;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int64x2_t v99;
  uint64_t v100;
  char v101;
  __int16 v102;
  char v103;
  CFTypeRef cf;
  char v105;
  uint64_t v106;

  v1 = this;
  v106 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(this + 360))
    v2 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (v2)
    goto LABEL_46;
  v3 = this + 872;
  v4 = *(unsigned __int8 *)(this + 1056);
  if ((*(_BYTE *)(this + 1056) & 1) == 0)
  {
    this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(this + 872));
    LOBYTE(v4) = *(_BYTE *)(v1 + 1056) | 1;
    *(_BYTE *)(v1 + 1056) = v4;
  }
  if (!*(_QWORD *)v3 || !*(_DWORD *)(*(_QWORD *)v3 + 4))
    goto LABEL_8;
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v1 + 872));
    *(_BYTE *)(v1 + 1056) |= 1u;
  }
  v81 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)(v1 + 872));
  *(_QWORD *)&v82 = v25;
  if (!v81)
    goto LABEL_46;
  v6 = &dword_1ECE90000;
    goto LABEL_105;
  while (1)
  {
    this = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::emptyDocumentSchemes(void)::emptyDocumentSchemes, &v81, v26, v27);
    if ((this & 1) != 0)
    {
LABEL_8:
      v5 = 1;
    }
    else
    {
LABEL_46:
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 280) + 16);
      if ((*(_BYTE *)(v1 + 1056) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v1 + 872));
        *(_BYTE *)(v1 + 1056) |= 1u;
      }
      v29 = WTF::URL::protocol((WTF::URL *)(v1 + 872));
      v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 696))(v28, v29, v30);
      v5 = 0;
      this = 0;
      if (!v31)
        return this;
    }
    v6 = (int *)(v1 + 872);
    if ((*(_BYTE *)(v1 + 1056) & 1) == 0)
    {
      this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v1 + 872));
      *(_BYTE *)(v1 + 1056) |= 1u;
    }
    if (!*(_QWORD *)v6 || !*(_DWORD *)(*(_QWORD *)v6 + 4))
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 280) + 64))
      {
        v58 = (const WTF::URL *)WTF::aboutBlankURL((WTF *)this);
        WebCore::ResourceRequestBase::setURL((WebCore::ResourceRequestBase *)(v1 + 872), v58, 0);
        if (*(_BYTE *)(v1 + 3548))
        {
          v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 280) + 16);
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 192))(v59);
        }
      }
    }
    if (v5)
    {
      v60 = (WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData;
      if (WebCore::textHTMLContentTypeAtomData)
        *(_DWORD *)WebCore::textHTMLContentTypeAtomData += 2;
      v72 = v60;
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 280) + 16);
      if ((*(_BYTE *)(v1 + 1056) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v1 + 872));
        *(_BYTE *)(v1 + 1056) |= 1u;
      }
      v8 = WTF::URL::protocol((WTF::URL *)(v1 + 872));
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 704))(&v72, v7, v8, v9);
    }
    if ((*(_BYTE *)(v1 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v1 + 872));
      *(_BYTE *)(v1 + 1056) |= 1u;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = *(unsigned __int8 **)v6;
    if (*(_QWORD *)v6)
      *(_DWORD *)v10 += 2;
    v81 = v10;
    v11 = *(_OWORD *)(v1 + 896);
    v82 = *(_OWORD *)(v1 + 880);
    v83 = v11;
    v12 = v72;
    if (v72)
      *(_DWORD *)v72 += 2;
    v84 = v12;
    v85 = 0;
    v13 = v75;
    if (v75)
      *(_DWORD *)v75 += 2;
    v86 = v13;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 1;
    v92 = 0;
    v94 = vdupq_n_s64(0x7FF8000000000000uLL);
    v95 = v94;
    v97 = 0;
    v96 = 0;
    v98 = 0x8000000000000000;
    v99 = v94;
    v100 = 0x7FF8000000000000;
    v101 &= 0xF0u;
    v102 &= 0xC000u;
    v103 = v103 & 0xF8 | 2;
    cf = 0;
    v105 = 0;
    v93 = v93 & 0xC0 | 4;
    WebCore::ResourceResponseBase::operator=(v1 + 1272, (uint64_t *)&v81);
    v15 = cf;
    cf = 0;
    v16 = *(const void **)(v1 + 1512);
    *(_QWORD *)(v1 + 1512) = v15;
    if (v16)
    {
      CFRelease(v16);
      v68 = cf;
      *(_BYTE *)(v1 + 1520) = v105;
      cf = 0;
      if (v68)
        CFRelease(v68);
    }
    else
    {
      *(_BYTE *)(v1 + 1520) = v105;
      cf = 0;
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v81, v14);
    v18 = v75;
    v75 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(_QWORD *)(v1 + 16);
    if (!v19)
      break;
    v20 = *(_QWORD **)(v19 + 8);
    if ((*(_DWORD *)(v20[35] + 64) - 1) < 2)
      goto LABEL_79;
    if (*(_QWORD **)(v20[16] + 8) != v20)
      goto LABEL_33;
    v32 = v20[37];
    if (!v32 || (*(_QWORD *)(*(_QWORD *)(v32 + 680) + 672) & 4) == 0)
      goto LABEL_33;
    v80[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v80);
    v34 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
    v35 = *(_QWORD *)(v34 + 160);
    if (v35)
    {
      v61 = *(_QWORD *)(v35 + 8);
      if (v61)
      {
        if (!*(_BYTE *)(v61 + 144))
        {
          v62 = *(_QWORD *)(v61 + 296);
          if (v62)
          {
            v63 = *(WTF::StringImpl **)(v62 + 736);
            if (v63)
              *(_DWORD *)v63 += 2;
            v75 = v63;
            v64 = v62 + 736;
            v76 = *(_OWORD *)(v64 + 8);
            v77 = *(_OWORD *)(v64 + 24);
          }
          else
          {
            v75 = 0;
            WTF::URL::invalidate((WTF::URL *)&v75);
          }
          WTF::URL::operator=((uint64_t)v80, (uint64_t)&v75);
          v65 = v75;
          v75 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v33);
            else
              *(_DWORD *)v65 -= 2;
          }
          v34 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
        }
      }
    }
    v36 = *(_QWORD *)(v34 + 296);
    v37 = v36 + 736;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v36 + 192), v33);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
    v75 = (WTF::StringImpl *)v38;
    v40 = WebCore::Document::crossOriginOpenerPolicy(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8)
                                                                           + 296));
    LOBYTE(v81) = 0;
    v101 = 0;
    if (*(_BYTE *)(v1 + 1856))
    {
      WebCore::NavigationRequester::NavigationRequester((uint64_t)&v81, v1 + 1632);
      v101 = 1;
    }
    WebCore::CrossOriginOpenerPolicyEnforcementResult::from(v37, (const WTF::URL *)&v75, v40, (uint64_t)&v81, (uint64_t)v80, (uint64_t)v79);
    std::optional<WebCore::NavigationRequester>::~optional((uint64_t)&v81, v41);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v75, v42);
    v43 = *(_QWORD *)(v1 + 16);
    if (v43)
    {
      v44 = *(_QWORD *)(v43 + 8);
      v45 = v44 + 296;
      v46 = *(WebCore::FrameLoader **)(v44 + 280);
    }
    else
    {
      v46 = 0;
      v45 = 296;
    }
    v47 = *(_QWORD *)(v1 + 2880);
    v48 = (WebCore::FormData *)(*(_QWORD *)v45 + 552);
    v49 = WebCore::FrameLoader::effectiveSandboxFlags(v46);
    WebCore::ResourceRequestBase::httpReferrer((_BYTE *)(v1 + 872), v73);
    WebCore::doCrossOriginOpenerHandlingOfResponse(v48, (WebCore::SecurityOrigin *)(v1 + 1272), v1 + 1632, v47, v49, (uint64_t)v73, (WebCore *)((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 280) + 64) - 1) < 2), (uint64_t)v79, &v75);
    v51 = v73[0];
    v73[0] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
    if (v78)
    {
      std::__optional_copy_assign_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v69, (uint64_t *)&v75);
    }
    else
    {
      v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 280) + 16);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v66 + 568))(v73, v66, v1 + 872);
      v74 = 3;
      WebCore::DocumentLoader::cancelMainResourceLoad(v1, (uint64_t)v73, 0);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v73, v67);
      v69[0] = 0;
      v71 = 0;
    }
    std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v52);
    WebCore::CrossOriginOpenerPolicyEnforcementResult::~CrossOriginOpenerPolicyEnforcementResult((WebCore::CrossOriginOpenerPolicyEnforcementResult *)v79, v53);
    v54 = v80[0];
    v80[0] = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v17);
      else
        *(_DWORD *)v54 -= 2;
    }
    if (!v71)
      goto LABEL_34;
    std::optional<WebCore::CrossOriginOpenerPolicy>::operator=[abi:sn180100]<WebCore::CrossOriginOpenerPolicy&,void>(v1 + 2552, (WTF::StringImpl *)v70);
    if (v71)
    {
      if (v70[25])
      {
        v55 = *(_QWORD *)(v1 + 16);
        if (v55 && (v56 = *(_QWORD *)(v55 + 8)) != 0)
          v57 = *(WebCore::FrameLoader **)(v56 + 280);
        else
          v57 = 0;
        WebCore::FrameLoader::switchBrowsingContextsGroup(v57);
      }
      goto LABEL_34;
    }
    __break(1u);
LABEL_105:
    WebCore::emptyDocumentSchemes(void)::emptyDocumentSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinEmptyDocumentSchemes);
    *((_BYTE *)v6 + 3144) = 1;
  }
  if ((MEMORY[0x40] - 1) >= 2)
  {
LABEL_33:
    v69[0] = 0;
    v71 = 0;
LABEL_34:
    std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v17);
    v21 = 0;
    goto LABEL_35;
  }
LABEL_79:
  v21 = 1;
LABEL_35:
  v22 = *(_BYTE *)(v1 + 3543);
  *(_BYTE *)(v1 + 3543) = 1;
  *(_BYTE *)(v1 + 3544) = v21;
  WebCore::DocumentLoader::finishedLoading((WebCore::DocumentLoader *)v1);
  *(_BYTE *)(v1 + 3543) = v22;
  v24 = v72;
  v72 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  return 1;
}

uint64_t WebCore::ResourceResponseBase::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _DWORD *v34;
  WTF::StringImpl *v35;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  v10 = a2[5];
  a2[5] = 0;
  v11 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = a2[6];
  v13 = a2[7];
  a2[7] = 0;
  v14 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = a2[8];
  a2[8] = 0;
  v16 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = a2[9];
  a2[9] = 0;
  v18 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  WebCore::HTTPHeaderMap::operator=((unsigned int *)(a1 + 80), (WTF::StringImpl *)(a2 + 10));
  v20 = a2[14];
  a2[14] = 0;
  v21 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v20;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v34 = *(_DWORD **)(v21 + 128);
      *(_QWORD *)(v21 + 128) = 0;
      if (v34)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v34, v19);
      v35 = *(WTF::StringImpl **)(v21 + 96);
      *(_QWORD *)(v21 + 96) = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v19);
        else
          *(_DWORD *)v35 -= 2;
      }
      WTF::fastFree((WTF *)v21, v19);
    }
  }
  if (*(unsigned __int8 *)(a1 + 128) == *((unsigned __int8 *)a2 + 128))
  {
    if (*(_BYTE *)(a1 + 128))
    {
      v24 = a2[15];
      a2[15] = 0;
      v25 = *(const void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v24;
      if (v25)
        CFRelease(v25);
    }
  }
  else if (*(_BYTE *)(a1 + 128))
  {
    v26 = *(const void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    if (v26)
      CFRelease(v26);
    *(_BYTE *)(a1 + 128) = 0;
  }
  else
  {
    v27 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(a1 + 120) = v27;
    *(_BYTE *)(a1 + 128) = 1;
  }
  v28 = *(_OWORD *)(a2 + 17);
  v29 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 152) = v29;
  *(_OWORD *)(a1 + 136) = v28;
  v30 = *(_OWORD *)(a2 + 23);
  v31 = *(_OWORD *)(a2 + 25);
  v32 = *(_OWORD *)(a2 + 27);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)((char *)a2 + 231);
  *(_OWORD *)(a1 + 216) = v32;
  *(_OWORD *)(a1 + 200) = v31;
  *(_OWORD *)(a1 + 184) = v30;
  return a1;
}

uint64_t WebCore::Document::cancelParsing(uint64_t this)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  v1 = *(_DWORD **)(this + 728);
  if (v1)
  {
    v2 = this;
    ++v1[2];
    v3 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 80))(v1);
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
    if (v3)
      *(_BYTE *)(v2 + 3374) = 1;
    v4 = *(_DWORD **)(v2 + 728);
    *(_QWORD *)(v2 + 728) = 0;
    if (v4)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 112))(v4);
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
      v6 = *(_DWORD **)(v2 + 728);
      if (v6)
      {
        ++v6[2];
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
    }
    v5 = *(_QWORD *)(v2 + 528);
    if (v5 && *(_QWORD *)(v5 + 8))
    {
      return WebCore::Document::checkCompleted(v2);
    }
    else
    {
      WebCore::Document::setReadyState(v2, 2);
      return WebCore::Document::implicitClose((WebCore::Document *)v2);
    }
  }
  return this;
}

unsigned __int8 *WebCore::LegacySchemeRegistry::shouldLoadURLSchemeAsEmptyDocument(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4[2];

  v4[0] = result;
  v4[1] = a2;
  if (result)
  {
    {
      WebCore::emptyDocumentSchemes(void)::emptyDocumentSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinEmptyDocumentSchemes);
    }
    return (unsigned __int8 *)WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::emptyDocumentSchemes(void)::emptyDocumentSchemes, v4, a3, a4);
  }
  return result;
}

BOOL WebCore::HTMLDocumentParser::processingData(WebCore::HTMLDocumentParser *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 413);
  return v1
      && (*(_BYTE *)(v1 + 72)
       || (*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) != 0
       && *(double *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
       || *(_BYTE *)(v1 + 73))
      || *((_DWORD *)this + 833) != 0;
}

_BYTE *WebCore::ResourceRequestBase::clearHTTPUserAgent(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;

  v2 = this;
  v3 = this[184];
  if ((v3 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v3 = v2[184] | 1;
    v2[184] = v3;
  }
  v4 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v4)
  {
    v5 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v5 == 86)
    {
      v6 = 0;
LABEL_6:
      v7 = &v5[8 * v6];
      this = (_BYTE *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v4 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v8 = v7 + 8;
      v9 = *((_QWORD *)v2 + 12) + 16 * v4;
      while (v8 != (_WORD *)v9)
      {
        *(v8 - 8) = *v8;
        *((_QWORD *)v8 - 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        v8 += 8;
      }
      *((_DWORD *)v2 + 27) = v4 - 1;
      v3 = v2[184];
    }
    else
    {
      v6 = 0;
      v10 = v5 + 8;
      while (v4 - 1 != v6)
      {
        v11 = *v10;
        v10 += 8;
        ++v6;
        if (v11 == 86)
          goto LABEL_6;
      }
    }
  }
  v2[184] = v3 & 0xFD;
  return this;
}

_BYTE *WebCore::ResourceRequestBase::makeUnconditional(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  _WORD *v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  _WORD *v33;
  _WORD *v34;
  uint64_t v35;
  unsigned __int16 *v36;
  int v37;
  unsigned __int16 *v38;
  int v39;

  v2 = this;
  if ((this[184] & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v2[184] |= 1u;
  }
  v3 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v3)
  {
    v4 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v4 == 43)
    {
      v5 = 0;
LABEL_6:
      v6 = &v4[8 * v5];
      this = (_BYTE *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v3 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v7 = v6 + 8;
      v8 = *((_QWORD *)v2 + 12) + 16 * v3;
      while (v7 != (_WORD *)v8)
      {
        *(v7 - 8) = *v7;
        *((_QWORD *)v7 - 1) = *((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        v7 += 8;
      }
      v3 = (v3 - 1);
      *((_DWORD *)v2 + 27) = v3;
    }
    else
    {
      v5 = 0;
      v14 = v4 + 8;
      while (v3 - 1 != v5)
      {
        v15 = *v14;
        v14 += 8;
        ++v5;
        if (v15 == 43)
          goto LABEL_6;
      }
    }
    if ((_DWORD)v3)
    {
      v9 = (_WORD *)*((_QWORD *)v2 + 12);
      if (*v9 == 44)
      {
        v10 = 0;
LABEL_16:
        v11 = &v9[8 * v10];
        this = (_BYTE *)*((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
            v3 = *((unsigned int *)v2 + 27);
          }
          else
          {
            *(_DWORD *)this -= 2;
          }
        }
        v12 = v11 + 8;
        v13 = *((_QWORD *)v2 + 12) + 16 * v3;
        while (v12 != (_WORD *)v13)
        {
          *(v12 - 8) = *v12;
          *((_QWORD *)v12 - 1) = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          v12 += 8;
        }
        v3 = (v3 - 1);
        *((_DWORD *)v2 + 27) = v3;
      }
      else
      {
        v10 = 0;
        v21 = v9 + 8;
        while (v3 - 1 != v10)
        {
          v22 = *v21;
          v21 += 8;
          ++v10;
          if (v22 == 44)
            goto LABEL_16;
        }
      }
      if ((_DWORD)v3)
      {
        v16 = (_WORD *)*((_QWORD *)v2 + 12);
        if (*v16 == 45)
        {
          v17 = 0;
LABEL_30:
          v18 = &v16[8 * v17];
          this = (_BYTE *)*((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
            {
              this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
              v3 = *((unsigned int *)v2 + 27);
            }
            else
            {
              *(_DWORD *)this -= 2;
            }
          }
          v19 = v18 + 8;
          v20 = *((_QWORD *)v2 + 12) + 16 * v3;
          while (v19 != (_WORD *)v20)
          {
            *(v19 - 8) = *v19;
            *((_QWORD *)v19 - 1) = *((_QWORD *)v19 + 1);
            *((_QWORD *)v19 + 1) = 0;
            v19 += 8;
          }
          v3 = (v3 - 1);
          *((_DWORD *)v2 + 27) = v3;
        }
        else
        {
          v17 = 0;
          v28 = v16 + 8;
          while (v3 - 1 != v17)
          {
            v29 = *v28;
            v28 += 8;
            ++v17;
            if (v29 == 45)
              goto LABEL_30;
          }
        }
        if ((_DWORD)v3)
        {
          v23 = (_WORD *)*((_QWORD *)v2 + 12);
          if (*v23 == 46)
          {
            v24 = 0;
LABEL_44:
            v25 = &v23[8 * v24];
            this = (_BYTE *)*((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                v3 = *((unsigned int *)v2 + 27);
              }
              else
              {
                *(_DWORD *)this -= 2;
              }
            }
            v26 = v25 + 8;
            v27 = *((_QWORD *)v2 + 12) + 16 * v3;
            while (v26 != (_WORD *)v27)
            {
              *(v26 - 8) = *v26;
              *((_QWORD *)v26 - 1) = *((_QWORD *)v26 + 1);
              *((_QWORD *)v26 + 1) = 0;
              v26 += 8;
            }
            LODWORD(v3) = v3 - 1;
            *((_DWORD *)v2 + 27) = v3;
          }
          else
          {
            v24 = 0;
            v36 = v23 + 8;
            while (v3 - 1 != v24)
            {
              v37 = *v36;
              v36 += 8;
              ++v24;
              if (v37 == 46)
                goto LABEL_44;
            }
          }
          if ((_DWORD)v3)
          {
            v30 = v3;
            v31 = (_WORD *)*((_QWORD *)v2 + 12);
            if (*v31 == 47)
            {
              v32 = 0;
LABEL_58:
              v33 = &v31[8 * v32];
              this = (_BYTE *)*((_QWORD *)v33 + 1);
              *((_QWORD *)v33 + 1) = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                {
                  this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                  v30 = *((unsigned int *)v2 + 27);
                  LODWORD(v3) = *((_DWORD *)v2 + 27);
                }
                else
                {
                  *(_DWORD *)this -= 2;
                }
              }
              v34 = v33 + 8;
              v35 = *((_QWORD *)v2 + 12) + 16 * v30;
              while (v34 != (_WORD *)v35)
              {
                *(v34 - 8) = *v34;
                *((_QWORD *)v34 - 1) = *((_QWORD *)v34 + 1);
                *((_QWORD *)v34 + 1) = 0;
                v34 += 8;
              }
              *((_DWORD *)v2 + 27) = v3 - 1;
            }
            else
            {
              v32 = 0;
              v38 = v31 + 8;
              while (v3 - 1 != v32)
              {
                v39 = *v38;
                v38 += 8;
                ++v32;
                if (v39 == 47)
                  goto LABEL_58;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::DocumentLoader::loadMainResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::FrameLoader *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t WeakRandomUUIDVersion4;
  uint8_t *v10;
  uint8_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  WebCore::Document *v58;
  uint64_t v59;
  WebCore::CachedResource *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::ContentFilter *v64;
  WebCore::CachedResource *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl ***v68;
  WTF::StringImpl **v69;
  WTF::StringImpl **v70;
  WTF::StringImpl **v71;
  WTF::StringImpl **v72;
  WTF::StringImpl **v73;
  _DWORD **v74;
  WTF::StringImpl *v75;
  const WTF::StringImpl *v76;
  _DWORD *v77;
  WTF::StringImpl *v78;
  __int128 v79;
  void *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  _QWORD *v83;
  int v84;
  BOOL v85;
  __int128 v88;
  unsigned int v89;
  WebCore::FrameLoader *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  NSObject *v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _BOOL4 v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  WebCore::ResourceError *v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  NSObject *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _BOOL4 v123;
  const WTF::StringImpl *v124;
  void *v125;
  WebCore::ApplicationCacheHost *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  const WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  NSObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  _BOOL4 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  _BYTE v148[24];
  __int128 v149;
  int v150;
  unsigned int v151;
  char v152;
  char v153;
  WTF::StringImpl **v154;
  WTF::StringImpl **v155;
  WTF::StringImpl **v156;
  WTF::StringImpl **v157;
  char v158;
  WTF::StringImpl **v159;
  uint64_t v160;
  char v161;
  uint8_t buf[12];
  __int16 v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  WTF::StringImpl *v167[7];
  int v168;
  unsigned int v169;
  WTF::StringImpl **v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  char v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD v191[2];
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  char v200;
  __int16 v201;
  _DWORD *v202;
  _DWORD *v203;
  char v204;
  __int128 v205;
  _DWORD *v206;
  __int16 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int16 v212;
  _QWORD v213[7];
  __int128 v214;
  int v215;
  char v216;
  __int16 v217;
  _DWORD *v218;
  _DWORD *v219;
  char v220;
  __int128 v221;
  _DWORD *v222;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  LOWORD(v213[0]) = 0;
  *(_DWORD *)((char *)v213 + 2) = 2;
  BYTE6(v213[0]) = 0;
  memset(&v213[1], 0, 48);
  v214 = 0u;
  v215 = 0;
  v216 = 1;
  LOBYTE(v217) = 0;
  v220 = 0;
  LOWORD(v221) = 20;
  *(_DWORD *)((char *)&v221 + 2) = 201852944;
  *((_QWORD *)&v221 + 1) = 0;
  v222 = 0;
  if (*(_BYTE *)(a1 + 3553))
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
      v6 = *(WebCore::FrameLoader **)(v5 + 280);
    else
      v6 = 0;
    if ((WebCore::FrameLoader::effectiveSandboxFlags(v6) & 0x14) == 0)
    {
      v7 = *(_QWORD *)(a1 + 3480);
      v8 = *(uint64_t **)(a1 + 3472);
      if (*(_OWORD *)(a1 + 3472) != 0)
      {
        if ((_MergedGlobals_204 & 1) == 0)
        {
          qword_1ECE83790 = 0;
          _MergedGlobals_204 = 1;
        }
        WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::remove(v8, v7, *(_QWORD *)(a1 + 3488));
        v8 = (uint64_t *)WebCore::DocumentLoader::unregisterReservedServiceWorkerClient(a1);
      }
      WeakRandomUUIDVersion4 = WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)v8);
      v11 = v10;
      v12 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v12 != -1)
      {
        v170 = v167;
        *(_QWORD *)v148 = &v170;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v148, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      if ((WebCore::Process::globalIdentifier & 1) == 0)
      {
        __break(1u);
LABEL_166:
        if ((*(_WORD *)(a1 + 3514) & 4) == 0)
          goto LABEL_167;
        v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 640))(v148, v134, a2);
        if (v169 != 1)
          goto LABEL_220;
        WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)v167);
        WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)v148);
        if (!WTF::equal(v167[0], *(const WTF::StringImpl **)v148, v135))
          goto LABEL_196;
        if (v169 != 1)
        {
LABEL_220:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_221;
        }
        WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)v167);
        v137 = v168;
        WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)v148);
        if (v137 != v150)
        {
LABEL_196:
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v148, v136);
LABEL_167:
          v118 = qword_1ECE7C608;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
          {
LABEL_174:
            WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v148);
            WebCore::DocumentLoader::setRequest((WebCore::DocumentLoader *)a1, (const WebCore::ResourceRequest *)v148, v124);
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v148, v125);
            v126 = (WebCore::ApplicationCacheHost *)WTF::fastMalloc((WTF *)0x40);
            *(_QWORD *)v148 = WebCore::ApplicationCacheHost::ApplicationCacheHost(v126, (WebCore::DocumentLoader *)a1);
            std::unique_ptr<WebCore::ApplicationCacheHost>::operator=[abi:sn180100]((WebCore::ApplicationCacheHost **)(a1 + 2872), (WTF::StringImpl *)v148);
            std::unique_ptr<WebCore::ApplicationCacheHost>::~unique_ptr[abi:sn180100]((WebCore::ApplicationCacheHost **)v148, v127);
            WebCore::DocumentLoader::maybeLoadEmpty(a1);
            goto LABEL_83;
          }
          v119 = *(_QWORD *)(a1 + 16);
          if (v119)
          {
            v120 = *(_QWORD *)(v119 + 8);
            if (v120)
            {
              WebCore::Frame::pageID(*(WebCore::Frame **)(v119 + 8));
              if (!v122)
                v121 = 0;
              v119 = *(_QWORD *)(v120 + 32);
              v123 = *(_QWORD *)(*(_QWORD *)(v120 + 128) + 8) == v120;
              goto LABEL_173;
            }
            v121 = 0;
            v119 = 0;
          }
          else
          {
            v121 = 0;
          }
          v123 = 0;
LABEL_173:
          *(_DWORD *)v148 = 134218752;
          *(_QWORD *)&v148[4] = a1;
          *(_WORD *)&v148[12] = 2048;
          *(_QWORD *)&v148[14] = v121;
          *(_WORD *)&v148[22] = 2048;
          *(_QWORD *)&v149 = v119;
          WORD4(v149) = 1024;
          *(_DWORD *)((char *)&v149 + 10) = v123;
          _os_log_impl(&dword_1940B8000, v118, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::loadMainResource: Unable to load main resource, returning empty document", v148, 0x26u);
          goto LABEL_174;
        }
        v138 = qword_1ECE7C608;
        if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
        {
LABEL_194:
          if (v169 == 1)
          {
            v102 = v167;
            goto LABEL_138;
          }
          goto LABEL_220;
        }
        v139 = *(_QWORD *)(a1 + 16);
        if (v139)
        {
          v140 = *(_QWORD *)(v139 + 8);
          if (v140)
          {
            WebCore::Frame::pageID(*(WebCore::Frame **)(v139 + 8));
            if (!v142)
              v141 = 0;
            v139 = *(_QWORD *)(v140 + 32);
            v143 = *(_QWORD *)(*(_QWORD *)(v140 + 128) + 8) == v140;
            goto LABEL_193;
          }
          v141 = 0;
          v139 = 0;
        }
        else
        {
          v141 = 0;
        }
        v143 = 0;
LABEL_193:
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)(v11 + 4) = a1;
        v163 = 2048;
        *(_QWORD *)(v11 + 14) = v141;
        v164 = 2048;
        v165 = v139;
        v166 = 1024;
        *(_DWORD *)(v11 + 34) = v143;
        _os_log_impl(&dword_1940B8000, v138, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::loadMainResource: Unable to load main resource, URL has HTTP scheme with HTTPSOnly enabled", buf, 0x26u);
        goto LABEL_194;
      }
      v13 = (_QWORD *)(a1 + 3472);
      v14 = WebCore::Process::globalIdentifier;
      *(_QWORD *)(a1 + 3472) = WeakRandomUUIDVersion4;
      *(_QWORD *)(a1 + 3480) = v11;
      *(_QWORD *)(a1 + 3488) = v14;
      if ((_MergedGlobals_204 & 1) != 0)
      {
        v15 = qword_1ECE83790;
        if (qword_1ECE83790)
          goto LABEL_12;
      }
      else
      {
        qword_1ECE83790 = 0;
        _MergedGlobals_204 = 1;
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand();
      v15 = qword_1ECE83790;
      if (!qword_1ECE83790)
      {
        v16 = 0;
LABEL_13:
        v17 = *(_QWORD *)(a1 + 3480);
        v18 = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17 - 1640531527);
        v19 = (v17 >> 37) & 0x7FFF800 ^ ((v18 + WORD2(v17) + (v18 >> 11)) << 16) ^ (v18 + WORD2(v17) + (v18 >> 11));
        v20 = v19 + (unsigned __int16)*v13 + (v19 >> 11);
        v21 = (*v13 >> 5) & 0x7FFF800 ^ (v20 << 16) ^ v20;
        v22 = v21 + (unsigned __int16)WORD2(*v13) + (v21 >> 11);
        v23 = (*v13 >> 37) & 0x7FFF800 ^ (v22 << 16) ^ v22;
        v24 = (v23 + (v23 >> 11)) ^ (8 * (v23 + (v23 >> 11)));
        v25 = (v24 + (v24 >> 5)) ^ (4 * (v24 + (v24 >> 5)));
        v26 = (v25 + (v25 >> 15)) ^ ((v25 + (v25 >> 15)) << 10);
        if (!v26)
          v26 = 0x800000;
        v27 = v26 & v16;
        v28 = (_QWORD *)(v15 + 48 * (v26 & v16));
        v29 = *v28;
        v30 = v28[1];
        v31 = v28[2];
        if (*(_OWORD *)v28 != 0 || v31 != 0)
        {
          v83 = 0;
          v84 = 1;
          while (1)
          {
            v85 = v30 == v17 && v29 == *v13;
            if (v85 && v31 == *(_QWORD *)(a1 + 3488))
              goto LABEL_25;
            if (v31 == -1)
              v83 = v28;
            v27 = (v27 + v84) & v16;
            v28 = (_QWORD *)(v15 + 48 * v27);
            v29 = *v28;
            v30 = v28[1];
            v31 = v28[2];
            ++v84;
            if (*(_OWORD *)v28 == 0 && v31 == 0)
            {
              if (!v83)
                break;
              *v83 = 0;
              v83[1] = 0;
              v83[2] = 0;
              v83[4] = 0;
              --*(_DWORD *)(v15 - 16);
              v15 = qword_1ECE83790;
              v88 = *(_OWORD *)v13;
              v83[2] = *(_QWORD *)(a1 + 3488);
              *(_OWORD *)v83 = v88;
              goto LABEL_21;
            }
          }
        }
        v33 = *(_OWORD *)v13;
        v28[2] = *(_QWORD *)(a1 + 3488);
        *(_OWORD *)v28 = v33;
        v83 = v28;
LABEL_21:
        v83[4] = a1;
        ++*(_DWORD *)(v15 - 12);
        if (qword_1ECE83790)
          v34 = *(_DWORD *)(qword_1ECE83790 - 12);
        else
          v34 = 0;
        v35 = (*(_DWORD *)(qword_1ECE83790 - 16) + v34);
        v36 = *(unsigned int *)(qword_1ECE83790 - 4);
        if (v36 > 0x400)
        {
          if (v36 > 2 * v35)
            goto LABEL_25;
        }
        else
        {
          if (3 * v36 > 4 * v35)
          {
LABEL_25:
            v37 = *(_QWORD *)(a1 + 3480);
            v213[4] = *v13;
            v213[5] = v37;
            goto LABEL_26;
          }
          if (!(_DWORD)v36)
          {
            v89 = 8;
LABEL_108:
            WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v89);
            goto LABEL_25;
          }
        }
        v89 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE83790 - 12) >= (2 * v36));
        goto LABEL_108;
      }
LABEL_12:
      v16 = *(_DWORD *)(v15 - 8);
      goto LABEL_13;
    }
  }
  *(_DWORD *)((char *)&v221 + 2) = 201918480;
LABEL_26:
  v38 = *(WTF::StringImpl ***)a2;
  v11 = buf;
  *(_QWORD *)a2 = 0;
  v171 = *(_OWORD *)(a2 + 8);
  v172 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 8) = v171 & 0xFFFFFFFE;
  v39 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v170 = v38;
  v173 = v39;
  v40 = *(_OWORD *)(a2 + 64);
  v174 = *(_OWORD *)(a2 + 48);
  v175 = v40;
  *(_DWORD *)(a2 + 48) = v174 & 0xFFFFFFFE;
  v41 = *(_QWORD *)(a2 + 80);
  v42 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 88) = 0u;
  v177 = v42;
  *(_QWORD *)&v42 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v176 = v41;
  v178 = v42;
  v43 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v179 = v43;
  v44 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v180 = v44;
  v45 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v181 = v45;
  v46 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v182 = v46;
  LODWORD(v45) = *(_DWORD *)(a2 + 144);
  v184 = *(_BYTE *)(a2 + 148);
  v183 = v45;
  v47 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  v185 = v47;
  v188 = *(_BYTE *)(a2 + 184);
  v48 = *(_QWORD *)(a2 + 168);
  v49 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  v186 = v48;
  v187 = v49;
  v50 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v189 = v50;
  v190 = 0;
  *(_DWORD *)((char *)v191 + 3) = *(_DWORD *)((char *)v213 + 3);
  v191[0] = v213[0];
  v51 = v213[1];
  if (v213[1])
    *(_DWORD *)v213[1] += 2;
  v192 = v51;
  v193 = *(_OWORD *)&v213[2];
  v194 = *(_OWORD *)&v213[4];
  v52 = HIDWORD(v214);
  v197 = 0;
  v195 = v213[6];
  v196 = 0;
  v198 = HIDWORD(v214);
  if (HIDWORD(v214))
  {
    if (HIDWORD(v214) >> 28)
    {
LABEL_221:
      __break(0xC471u);
      return;
    }
    v144 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v214)));
    v197 = v52;
    v196 = v144;
    v145 = v214;
    v146 = v214 + 16 * v52;
    do
    {
      v147 = *(_DWORD **)v145;
      if (*(_QWORD *)v145)
        *v147 += 2;
      *(_QWORD *)v144 = v147;
      *(_BYTE *)(v144 + 8) = *(_BYTE *)(v145 + 8);
      v145 += 16;
      v144 += 16;
    }
    while (v145 != v146);
  }
  v199 = v215;
  v200 = v216;
  LOBYTE(v201) = 0;
  v204 = 0;
  if (v220)
  {
    v201 = v217;
    v53 = v218;
    if (v218)
      *v218 += 2;
    v202 = v53;
    v54 = v219;
    if (v219)
      *v219 += 2;
    v203 = v54;
    v204 = 1;
  }
  v205 = v221;
  v55 = v222;
  if (v222)
    *v222 += 2;
  v206 = v55;
  v207 = 0;
  v210 = 0;
  v208 = 0;
  v209 = 0;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v170, &v211);
  v212 = 0;
  v56 = *(_QWORD *)(a1 + 16);
  if (v56)
  {
    v57 = *(_QWORD **)(v56 + 8);
    if (*(_QWORD **)(v57[16] + 8) != v57)
    {
      v58 = (WebCore::Document *)v57[37];
      if (v58)
      {
        WebCore::CachedResourceRequest::setDomainForCachePartition((WebCore::CachedResourceRequest *)&v170, v58);
        goto LABEL_41;
      }
    }
    v90 = (WebCore::FrameLoader *)v57[35];
  }
  else
  {
    v90 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(WebCore::FrameLoader::frame(v90) + 136) + 548) == 1)
  {
    if ((v188 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v170);
      v188 |= 1u;
    }
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v170, (uint64_t *)v148);
    WebCore::SecurityOrigin::domainForCachePartition(*(WebCore::SecurityOrigin **)v148, v167);
    WebCore::CachedResourceRequest::setDomainForCachePartition((WebCore::CachedResourceRequest *)&v170, (const WTF::String *)v167);
    v92 = v167[0];
    v167[0] = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
        WTF::StringImpl::destroy(v92, v91);
      else
        *(_DWORD *)v92 -= 2;
    }
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v148, v91);
  }
  else
  {
    WebCore::CachedResourceRequest::setDomainForCachePartition((WebCore::CachedResourceRequest *)&v170, MEMORY[0x1E0CBF738]);
  }
LABEL_41:
  WebCore::CachedResourceLoader::requestResource((WTF::StringImpl **)v148, (WebCore::ResourceRequest *)&v170, *(_QWORD **)(a1 + 72), 0, 0, 0);
  WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v167, v148);
  if (v151 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v151))((int)buf, (WebCore::CachedResourceHandleBase *)v148);
  if (!v169)
  {
    v59 = a1 + 80;
    if (v167[0])
      v60 = (WebCore::CachedResource *)*((_QWORD *)v167[0] + 1);
    else
      v60 = 0;
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 80), v60);
    v61 = *(_QWORD *)v59;
    v62 = *(_QWORD *)(*(_QWORD *)v59 + 8);
    if ((*(_WORD *)(v62 + 557) >> 5) - 3 <= 1)
    {
      v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24);
      if (v104)
      {
        if (*(_QWORD *)(v104 + 8))
        {
          v105 = *(_QWORD *)(v62 + 400);
          if (v105)
          {
            v106 = (WebCore::ResourceError *)(v105 + 320);
          }
          else
          {
            std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v148);
            v106 = (WebCore::ResourceError *)&WebCore::CachedResource::resourceError(void)const::emptyError;
          }
          WebCore::ResourceError::platformLazyInit(v106);
          if (unk_1EE2E19F8)
            v107 = unk_1EE2E19F8 - 1;
          else
            v107 = 0;
          if (MEMORY[0x19AEA53F4](*(_QWORD *)v106, WebCore::ContentExtensions::WebKitContentBlockerDomain, v107))
          {
            v108 = qword_1ECE7C608;
            if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
              goto LABEL_154;
            v109 = *(_QWORD *)(a1 + 16);
            if (v109)
            {
              v110 = *(_QWORD *)(v109 + 8);
              if (v110)
              {
                WebCore::Frame::pageID(*(WebCore::Frame **)(v109 + 8));
                if (!v112)
                  v111 = 0;
                v109 = *(_QWORD *)(v110 + 32);
                v113 = *(_QWORD *)(*(_QWORD *)(v110 + 128) + 8) == v110;
                goto LABEL_153;
              }
              v111 = 0;
              v109 = 0;
            }
            else
            {
              v111 = 0;
            }
            v113 = 0;
LABEL_153:
            *(_DWORD *)v148 = 134218752;
            *(_QWORD *)&v148[4] = a1;
            *(_WORD *)&v148[12] = 2048;
            *(_QWORD *)&v148[14] = v111;
            *(_WORD *)&v148[22] = 2048;
            *(_QWORD *)&v149 = v109;
            WORD4(v149) = 1024;
            *(_DWORD *)((char *)&v149 + 10) = v113;
            _os_log_impl(&dword_1940B8000, v108, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::loadMainResource: Blocked by content blocker error", v148, 0x26u);
LABEL_154:
            v114 = *(_QWORD *)(a1 + 16);
            if (v114 && (v115 = *(_QWORD *)(v114 + 8)) != 0)
              v116 = *(_QWORD *)(v115 + 280);
            else
              v116 = 0;
            WebCore::FrameLoader::blockedByContentBlockerError(v116);
            goto LABEL_137;
          }
          v61 = *(_QWORD *)v59;
          if (!*(_QWORD *)v59)
            goto LABEL_176;
        }
      }
    }
    v63 = *(_QWORD *)(v61 + 8);
    if (!v63 || !*(_QWORD *)(v63 + 384))
    {
LABEL_176:
      v128 = WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      *(_QWORD *)(a1 + 2784) = v128;
      v129 = *(_QWORD *)(a1 + 16);
      if (v129)
      {
        v129 = *(_QWORD *)(v129 + 8);
        if (v129)
          v129 = *(_QWORD *)(v129 + 280);
      }
      WebCore::ResourceLoadNotifier::assignIdentifierToInitialRequest(v129 + 32, v128, (WebCore::DocumentLoader *)a1, (uint64_t)&v170);
      v130 = *(_QWORD *)(a1 + 16);
      if (v130)
      {
        v130 = *(_QWORD *)(v130 + 8);
        if (v130)
          v130 = *(_QWORD *)(v130 + 280);
      }
      v131 = v130 + 32;
      v132 = *(const WTF::StringImpl **)(a1 + 2784);
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v148);
      v160 = 0;
      v161 = 0;
      v152 = v152 & 0xF1 | 4;
      WebCore::ResourceLoadNotifier::dispatchWillSendRequest(v131, a1, v132, (WebCore::ResourceRequest *)&v170, (WebCore::ResourceLoader *)v148, 0, 0);
      WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v148, v133);
      v61 = *(_QWORD *)(a1 + 80);
    }
    v64 = *(WebCore::ContentFilter **)(a1 + 2888);
    if (v64)
    {
      WebCore::ContentFilter::startFilteringMainResource(v64, *(WebCore::CachedRawResource **)(v61 + 8));
      v61 = *(_QWORD *)v59;
    }
    if (v61)
      v65 = *(WebCore::CachedResource **)(v61 + 8);
    else
      v65 = 0;
    if (WebCore::CachedResource::addClientToSet(v65, (WebCore::CachedResourceClient *)(a1 + 56)))
      (*(void (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)v65 + 88))(v65, a1 + 56);
    if (*(_QWORD *)v59 && (v66 = *(_QWORD *)(*(_QWORD *)v59 + 8)) != 0 && (v67 = *(_QWORD *)(v66 + 384)) != 0)
      v68 = (WTF::StringImpl ***)(v67 + 536);
    else
      v68 = &v170;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v148, (const WebCore::ResourceRequestBase::RequestData *)v68);
    v69 = v68[19];
    if (v69)
      *(_DWORD *)v69 += 2;
    v154 = v69;
    v70 = v68[20];
    if (v70)
      *(_DWORD *)v70 += 2;
    v155 = v70;
    v71 = v68[21];
    if (v71)
      ++*(_DWORD *)v71;
    v72 = v68[22];
    v156 = v71;
    v157 = v72;
    v158 = *((_BYTE *)v68 + 184);
    v73 = v68[24];
    v159 = v73;
    if (v73)
      CFRetain(v73);
    v74 = (_DWORD **)(a1 + 872);
    if ((*(_BYTE *)(a1 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 872));
      *(_BYTE *)(a1 + 1056) |= 1u;
    }
    if ((v158 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v148);
      v158 |= 1u;
    }
    if (WTF::equalIgnoringFragmentIdentifier())
    {
      if ((*(_BYTE *)(a1 + 1056) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 872));
        *(_BYTE *)(a1 + 1056) |= 1u;
      }
      if ((v158 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v148);
        v158 |= 1u;
      }
      v77 = *v74;
      if (*v74)
        *v77 += 2;
      v78 = *(WTF::StringImpl **)v148;
      *(_QWORD *)v148 = v77;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v75);
        else
          *(_DWORD *)v78 -= 2;
      }
      v79 = *(_OWORD *)(a1 + 896);
      *(_OWORD *)&v148[8] = *(_OWORD *)(a1 + 880);
      v149 = v79;
      v153 &= ~0x20u;
      v158 &= ~2u;
    }
    WebCore::DocumentLoader::setRequest((WebCore::DocumentLoader *)a1, (const WebCore::ResourceRequest *)v148, v76);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v148, v80);
    goto LABEL_83;
  }
  v93 = *(_QWORD *)(a1 + 16);
  if (!v93 || !*(_QWORD *)(v93 + 8))
  {
    v117 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v148 = 134218752;
      *(_QWORD *)&v148[4] = a1;
      *(_WORD *)&v148[12] = 2048;
      *(_QWORD *)&v148[14] = 0;
      *(_WORD *)&v148[22] = 2048;
      *(_QWORD *)&v149 = 0;
      WORD4(v149) = 1024;
      *(_DWORD *)((char *)&v149 + 10) = 0;
      _os_log_impl(&dword_1940B8000, v117, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::loadMainResource: Unable to load main resource, frame has gone away", v148, 0x26u);
    }
    goto LABEL_83;
  }
  a2 = a1 + 872;
  if ((*(_BYTE *)(a1 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 872));
    *(_BYTE *)(a1 + 1056) |= 1u;
  }
  if ((*(_BYTE *)(a1 + 880) & 1) != 0)
    goto LABEL_166;
  v94 = qword_1ECE7C608;
  v95 = os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT);
  v96 = *(_QWORD *)(a1 + 16);
  if (v95)
  {
    if (v96)
    {
      v97 = *(_QWORD *)(v96 + 8);
      if (v97)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v96 + 8));
        if (!v99)
          v98 = 0;
        v96 = *(_QWORD *)(v97 + 32);
        v100 = *(_QWORD *)(*(_QWORD *)(v97 + 128) + 8) == v97;
        goto LABEL_135;
      }
      v98 = 0;
      v96 = 0;
    }
    else
    {
      v98 = 0;
    }
    v100 = 0;
LABEL_135:
    *(_DWORD *)v148 = 134218752;
    *(_QWORD *)&v148[4] = a1;
    *(_WORD *)&v148[12] = 2048;
    *(_QWORD *)&v148[14] = v98;
    *(_WORD *)&v148[22] = 2048;
    *(_QWORD *)&v149 = v96;
    WORD4(v149) = 1024;
    *(_DWORD *)((char *)&v149 + 10) = v100;
    _os_log_impl(&dword_1940B8000, v94, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::loadMainResource: Unable to load main resource, URL is invalid", v148, 0x26u);
    v96 = *(_QWORD *)(a1 + 16);
  }
  v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v96 + 8) + 280) + 16);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v101 + 592))(v148, v101, a1 + 872);
LABEL_137:
  v102 = (WTF::StringImpl **)v148;
LABEL_138:
  WebCore::DocumentLoader::cancelMainResourceLoad(a1, (uint64_t)v102, 0);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v148, v103);
LABEL_83:
  if (v169 != -1)
    (*(&off_1E33F36F0 + v169))((int)v148, (WebCore::CachedResourceHandleBase *)v167);
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v170, v81);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v213, v82);
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebCore::RenderTable::computePreferredLogicalWidths(WebCore::RenderTable *this, void *a2)
{
  int32x2_t *v3;
  _DWORD *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE *v27;
  unint64_t i;
  uint64_t v30;
  uint64_t v31;
  __int32 v32;
  float *v33;
  float v34;
  BOOL v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;

  v3 = (int32x2_t *)((char *)this + 184);
  v4 = (_DWORD *)((char *)this + 188);
  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  *((_DWORD *)this + 85) = WebCore::RenderTable::calcBorderStart(this);
  *((_DWORD *)this + 86) = WebCore::RenderTable::calcBorderEnd(this);
  (*(void (**)(_QWORD, int32x2_t *, _DWORD *, _QWORD))(**((_QWORD **)this + 37) + 16))(*((_QWORD *)this + 37), v3, v4, 0);
  v5 = *((_DWORD *)this + 85);
  v6 = *((_DWORD *)this + 86);
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = (v5 >> 31) + 0x7FFFFFFF;
  if (v7)
    v10 = v9;
  else
    v10 = v8;
  if ((*((_BYTE *)this + 124) & 4) != 0)
  {
    v20 = 0;
  }
  else
  {
    v11 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 976))(this);
    v12 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 984))(this);
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    v14 = *((_DWORD *)this + 57);
    if (v14)
    {
      v15 = v14 + 1;
      v16 = *((int *)this + 83);
      LODWORD(v17) = v15 << 6;
      if (v15 <= 0x1FFFFFE)
        v17 = v17;
      else
        v17 = 0x7FFFFFFFLL;
      v18 = v16 * v17 / 64;
      if (HIDWORD(v18) != (int)v18 >> 31)
        LODWORD(v18) = (v16 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v18) = 0;
    }
    v7 = __OFADD__(v13, (_DWORD)v18);
    v19 = v13 + v18;
    v20 = (v13 >> 31) + 0x7FFFFFFF;
    if (!v7)
      v20 = v19;
  }
  v7 = __OFADD__(v10, v20);
  v21 = v10 + v20;
  if (v7)
    v21 = (v10 >> 31) + 0x7FFFFFFF;
  v22 = ((unsigned __int32)v3->i32[0] >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v3->i32[0], v21))
    v22 = v3->i32[0] + v21;
  v3->i32[0] = v22;
  v7 = __OFADD__(*v4, v21);
  v23 = *v4 + v21;
  if (v7)
    v23 = (*v4 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 47) = v23;
  (*(void (**)(_QWORD, int32x2_t *, _DWORD *))(**((_QWORD **)this + 37) + 32))(*((_QWORD *)this + 37), v3, v4);
  v24 = *((unsigned int *)this + 61);
  if ((_DWORD)v24)
  {
    for (i = 0; i < v24; ++i)
    {
      v30 = *(_QWORD *)(*((_QWORD *)this + 29) + 8 * i);
      if (v30)
        v31 = *(_QWORD *)(v30 + 8);
      else
        v31 = 0;
      if ((*(_BYTE *)(v31 + 21) & 0x20) != 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 1640))(v31);
        v24 = *((unsigned int *)this + 61);
      }
      v32 = *(_DWORD *)(v31 + 184);
      if (v3->i32[0] > v32)
        v32 = v3->i32[0];
      v3->i32[0] = v32;
    }
  }
  v25 = WebCore::RenderBox::overridingLogicalWidth(this);
  if ((v25 & 0xFF00000000) != 0)
    *v3 = vmax_s32(*v3, vdup_n_s32(v25));
  v26 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v27 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
  if (v26 <= 3)
  {
    if (v27[40] != 4)
      goto LABEL_69;
    v33 = (float *)(v27 + 36);
  }
  else
  {
    if (v27[24] != 4)
      goto LABEL_31;
    v33 = (float *)(v27 + 20);
  }
  if (*((_BYTE *)v33 + 6))
    v34 = *v33;
  else
    v34 = (float)*(int *)v33;
  if (v34 > 0.0)
  {
    v35 = v26 >= 4;
    v36 = v27 + 36;
    v37 = v27 + 20;
    if (v35)
      v38 = (uint64_t)v37;
    else
      v38 = (uint64_t)v36;
    v39 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v38);
    v40 = *((_DWORD *)this + 47);
    if (v40 <= v39)
      v40 = v39;
    *((_DWORD *)this + 47) = v40;
    v41 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v42 = v41 + 36;
    v43 = v41 + 20;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v44 = v43;
    else
      v44 = v42;
    v45 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v44);
    v46 = *((_DWORD *)this + 46);
    if (v46 <= v45)
      v46 = v45;
    *((_DWORD *)this + 46) = v46;
    v27 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
    v26 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  }
LABEL_31:
  if (v26 <= 3)
  {
LABEL_69:
    if (v27[48] != 4)
      return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
    v47 = (uint64_t)(v27 + 44);
    goto LABEL_60;
  }
  if (v27[32] != 4)
    return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
  v47 = (uint64_t)(v27 + 28);
LABEL_60:
  v48 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v47);
  v49 = *((_DWORD *)this + 47);
  if (v48 < v49)
    v49 = v48;
  if (v49 <= *((_DWORD *)this + 46))
    v49 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 47) = v49;
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

uint64_t WebCore::RenderTable::calcBorderStart(WebCore::RenderTable *this)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  float v62;
  double v63;
  float v64;
  double v65;
  WebCore::RenderStyle *v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  float v71;
  double v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = *((_DWORD *)this + 31);
  if ((v2 & 4) == 0)
  {
    v67 = (WebCore::RenderTable *)((char *)this + 80);
    v68 = ((v2 >> 13) & 6) - 2;
    v69 = *((_DWORD *)this + 30);
    if (v68 < 4)
    {
      if ((v69 & 0x4000000) != 0)
        v71 = WebCore::RenderStyle::borderBottomWidth(v67);
      else
        v71 = WebCore::RenderStyle::borderTopWidth(v67);
    }
    else if ((v69 & 0x4000000) != 0)
    {
      v71 = WebCore::RenderStyle::borderRightWidth(v67);
    }
    else
    {
      v70 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v71 = 0.0;
      if ((*(_BYTE *)(v70 + 124) & 0xE) != 0)
      {
        v75 = *(_QWORD *)(v70 + 200);
        if (*(_BYTE *)(v75 + 5) && *(_BYTE *)(v75 + 76) == 4)
        {
          if (*(_BYTE *)(v75 + 78))
            v71 = *(float *)(v75 + 72);
          else
            v71 = (float)*(int *)(v75 + 72);
        }
        else
        {
          v71 = *(float *)(v70 + 120);
        }
      }
    }
    v72 = v71 * 64.0;
    if (v72 < 2147483650.0)
    {
      if (v72 > -2147483650.0)
        return (int)v72;
      return 0x80000000;
    }
    return 0x7FFFFFFFLL;
  }
  if (!*((_DWORD *)this + 57))
    return 0;
  v3 = ((v2 >> 13) & 6) - 2;
  v4 = *((_DWORD *)this + 30);
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v6 = v5 + 176;
  if ((v4 & 0x4000000) == 0)
    v6 = v5 + 152;
  v7 = v5 + 128;
  v8 = v5 + 104;
  if ((v4 & 0x4000000) != 0)
    v9 = v7;
  else
    v9 = v8;
  if (v3 >= 4)
    v10 = v9;
  else
    v10 = v6;
  v11 = 0.0;
  if ((*(_BYTE *)(v10 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v10 + 20) & 0xF) == 1)
      return 0;
    v11 = *(float *)(v10 + 16);
  }
  if ((*((_BYTE *)this + 328) & 4) != 0)
  {
    v79 = WebCore::RenderTable::slowColElement(this, 0, 0, 0);
    if (v79)
    {
      v80 = *(_DWORD *)(v79 + 120);
      v81 = *(_QWORD *)(*(_QWORD *)(v79 + 88) + 24);
      v82 = v81 + 176;
      if ((v80 & 0x4000000) == 0)
        v82 = v81 + 152;
      v83 = v81 + 128;
      v84 = v81 + 104;
      v85 = (v80 & 0x4000000) != 0 ? v83 : v84;
      v86 = ((*(_DWORD *)(v79 + 124) >> 13) & 6u) - 2 >= 4 ? v85 : v82;
      if ((*(_BYTE *)(v86 + 20) & 0xF) != 0)
      {
        if ((*(_BYTE *)(v86 + 20) & 0xF) == 1)
          return 0;
        if (v11 < *(float *)(v86 + 16))
          v11 = *(float *)(v86 + 16);
      }
    }
  }
  v12 = *((_QWORD *)this + 34);
  if (!v12 || (v15 = *(_QWORD *)(v12 + 8)) == 0)
  {
    v13 = *((_QWORD *)this + 36);
    if (!v13 || (v15 = *(_QWORD *)(v13 + 8)) == 0)
    {
      v14 = *((_QWORD *)this + 35);
      if (!v14)
        goto LABEL_82;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        goto LABEL_82;
    }
  }
  if (!*(_DWORD *)(v15 + 212))
  {
    v15 = WebCore::RenderTable::sectionBelow((uint64_t)this, v15, 1);
    if (!v15)
      goto LABEL_82;
  }
  v16 = *(_QWORD *)(v15 + 32);
  if (!v16)
    goto LABEL_114;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_114;
  v18 = *(unsigned __int8 *)(v17 + 46);
  if (v18 != 35 && v18 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x194426FACLL);
  }
  v19 = *(_DWORD *)(v15 + 120);
  if (((v19 & 0x4000000) == 0) == (*(_BYTE *)(v17 + 123) & 4) >> 2)
  {
    v20 = ((*(_DWORD *)(v15 + 124) >> 13) & 6) - 2;
    v21 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 24);
    v22 = v21 + 152;
    if ((v19 & 0x4000000) == 0)
      v22 = v21 + 176;
    v23 = v21 + 104;
    v24 = v21 + 128;
  }
  else
  {
LABEL_114:
    v19 = *(_DWORD *)(v15 + 120);
    v20 = ((*(_DWORD *)(v15 + 124) >> 13) & 6) - 2;
    v77 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 24);
    v22 = v77 + 176;
    if ((v19 & 0x4000000) == 0)
      v22 = v77 + 152;
    v23 = v77 + 128;
    v24 = v77 + 104;
  }
  if ((v19 & 0x4000000) != 0)
    v24 = v23;
  if (v20 >= 4)
    v25 = v24;
  else
    v25 = v22;
  if ((*(_BYTE *)(v25 + 20) & 0xF) == 0)
    goto LABEL_32;
  if ((*(_BYTE *)(v25 + 20) & 0xF) == 1)
    return 0;
  if (v11 < *(float *)(v25 + 16))
    v11 = *(float *)(v25 + 16);
LABEL_32:
  if (v16)
  {
    v16 = *(_QWORD *)(v16 + 8);
    if (v16)
    {
      v26 = *(unsigned __int8 *)(v16 + 46);
      if (v26 != 35 && v26 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x194426FCCLL);
      }
      if (((((v19 & 0x4000000) == 0) ^ ((*(_BYTE *)(v16 + 123) & 4) >> 2)) & 1) != 0)
        LODWORD(v16) = 0;
      else
        LODWORD(v16) = *(_DWORD *)(WebCore::RenderTableSection::table((WebCore::RenderTableSection *)v15) + 228) - 1;
    }
  }
  if (!*(_DWORD *)(v15 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x194427068);
  }
  v27 = *(_QWORD *)(v15 + 200);
  if (*(_DWORD *)(v27 + 12) <= v16)
    goto LABEL_169;
  v28 = *(_QWORD *)v27 + 32 * v16;
  v29 = *(unsigned int *)(v28 + 12);
  if (!(_DWORD)v29)
    goto LABEL_82;
  v30 = *(_QWORD *)(*(_QWORD *)v28 + 8 * v29 - 8);
  if (!v30)
    goto LABEL_82;
  v31 = *(_QWORD *)(v30 + 32);
  if (!v31)
    goto LABEL_53;
  v32 = *(_QWORD *)(v31 + 8);
  if (!v32)
    goto LABEL_53;
  if (*(_BYTE *)(v32 + 46) != 39)
  {
LABEL_169:
    __break(0xC471u);
    JUMPOUT(0x194426EA8);
  }
  v33 = *(_QWORD *)(v32 + 32);
  if (!v33)
    goto LABEL_53;
  v34 = *(_QWORD *)(v33 + 8);
  if (!v34)
    goto LABEL_53;
  if (*(_BYTE *)(v34 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194426F08);
  }
  v35 = *(_QWORD *)(v34 + 32);
  if (!v35)
    goto LABEL_53;
  v36 = *(_QWORD *)(v35 + 8);
  if (!v36)
    goto LABEL_53;
  v37 = *(unsigned __int8 *)(v36 + 46);
  if (v37 != 35 && v37 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x19442700CLL);
  }
  if (((*(_BYTE *)(v34 + 123) & 4) == 0) != (*(_BYTE *)(v36 + 123) & 4) >> 2)
  {
LABEL_53:
    v38 = *(_DWORD *)(v30 + 120);
    v39 = ((*(_DWORD *)(v30 + 124) >> 13) & 6) - 2;
    v40 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 24);
    v41 = v40 + 176;
    if ((v38 & 0x4000000) == 0)
      v41 = v40 + 152;
    v42 = v40 + 128;
    v43 = v40 + 104;
    goto LABEL_56;
  }
  v38 = *(_DWORD *)(v30 + 120);
  v39 = ((*(_DWORD *)(v30 + 124) >> 13) & 6) - 2;
  v78 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 24);
  v41 = v78 + 152;
  if ((v38 & 0x4000000) == 0)
    v41 = v78 + 176;
  v42 = v78 + 104;
  v43 = v78 + 128;
LABEL_56:
  if ((v38 & 0x4000000) != 0)
    v43 = v42;
  if (v39 < 4)
    v43 = v41;
  if ((*(_BYTE *)(v43 + 20) & 0xF) == 1)
    return 0;
  if (v31)
  {
    v31 = *(_QWORD *)(v31 + 8);
    if (v31)
    {
      if (*(_BYTE *)(v31 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x194426EC8);
      }
    }
  }
  v44 = *(_QWORD *)(v31 + 32);
  if (!v44)
    goto LABEL_111;
  v45 = *(_QWORD *)(v44 + 8);
  if (!v45)
    goto LABEL_111;
  if (*(_BYTE *)(v45 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194426EE8);
  }
  v46 = *(_QWORD *)(v45 + 32);
  if (!v46)
    goto LABEL_111;
  v47 = *(_QWORD *)(v46 + 8);
  if (!v47)
    goto LABEL_111;
  v48 = *(unsigned __int8 *)(v47 + 46);
  if (v48 != 35 && v48 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x194426FECLL);
  }
  if (((*(_BYTE *)(v45 + 123) & 4) == 0) == (*(_BYTE *)(v47 + 123) & 4) >> 2)
  {
    v49 = *(_DWORD *)(v31 + 120);
    v50 = ((*(_DWORD *)(v31 + 124) >> 13) & 6) - 2;
    v51 = *(_QWORD *)(*(_QWORD *)(v31 + 88) + 24);
    v52 = v51 + 152;
    if ((v49 & 0x4000000) == 0)
      v52 = v51 + 176;
    v53 = v51 + 104;
    v54 = v51 + 128;
  }
  else
  {
LABEL_111:
    v49 = *(_DWORD *)(v31 + 120);
    v50 = ((*(_DWORD *)(v31 + 124) >> 13) & 6) - 2;
    v76 = *(_QWORD *)(*(_QWORD *)(v31 + 88) + 24);
    v52 = v76 + 176;
    if ((v49 & 0x4000000) == 0)
      v52 = v76 + 152;
    v53 = v76 + 128;
    v54 = v76 + 104;
  }
  if ((v49 & 0x4000000) != 0)
    v54 = v53;
  if (v50 < 4)
    v54 = v52;
  v55 = *(_BYTE *)(v54 + 20) & 0xF;
  if (v55 == 1)
    return 0;
  if ((*(_BYTE *)(v43 + 20) & 0xE) != 0 && v11 < *(float *)(v43 + 16))
    v11 = *(float *)(v43 + 16);
  if (v55 >= 2 && v11 < *(float *)(v54 + 16))
    v11 = *(float *)(v54 + 16);
LABEL_82:
  v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v57 = 1.0;
  if (v56)
  {
    v58 = *(_QWORD *)(v56 + 8);
    if (v58)
    {
      v59 = *(_QWORD *)(v58 + 24);
      if (v59)
      {
        v60 = *(_QWORD *)(v59 + 8);
        if (v60)
        {
          v61 = (*(_DWORD *)v60)++;
          v57 = *(float *)(v60 + 364);
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::Page::~Page(v60);
            WTF::fastFree(v73, v74);
          }
        }
      }
    }
  }
  v62 = 1.0 / v57;
  if ((*((_BYTE *)this + 123) & 4) == 0)
    v62 = 0.0;
  v63 = (float)((float)(v11 + v62) * 0.5) * 64.0;
  if (v63 >= 2147483650.0)
  {
    v64 = 2147500000.0;
  }
  else if (v63 <= -2147483650.0)
  {
    v64 = -2147500000.0;
  }
  else
  {
    v64 = (float)(int)v63;
  }
  v65 = (float)(floorf((float)(v57 * v64) * 0.015625) / v57) * 64.0;
  if (v65 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v65 > -2147483650.0)
    return (int)v65;
  return 0x80000000;
}

uint64_t WebCore::RenderTable::calcBorderEnd(WebCore::RenderTable *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  float v65;
  double v66;
  float v67;
  double v68;
  WebCore::RenderStyle *v70;
  int v71;
  uint64_t v72;
  float v73;
  double v74;
  WTF *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v2 = *((_DWORD *)this + 31);
  if ((v2 & 4) == 0)
  {
    v70 = (WebCore::RenderTable *)((char *)this + 80);
    v71 = *((_DWORD *)this + 30);
    if (((v2 >> 13) & 6) - 2 < 4)
    {
      if ((v71 & 0x4000000) != 0)
        v73 = WebCore::RenderStyle::borderTopWidth(v70);
      else
        v73 = WebCore::RenderStyle::borderBottomWidth(v70);
    }
    else if ((v71 & 0x4000000) != 0)
    {
      v73 = WebCore::RenderStyle::borderLeftWidth(v70);
    }
    else
    {
      v72 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v73 = 0.0;
      if ((*(_BYTE *)(v72 + 148) & 0xE) != 0)
      {
        v77 = *(_QWORD *)(v72 + 200);
        if (*(_BYTE *)(v77 + 5) && *(_BYTE *)(v77 + 60) == 4)
        {
          if (*(_BYTE *)(v77 + 62))
            v73 = *(float *)(v77 + 56);
          else
            v73 = (float)*(int *)(v77 + 56);
        }
        else
        {
          v73 = *(float *)(v72 + 144);
        }
      }
    }
    v74 = v73 * 64.0;
    if (v74 < 2147483650.0)
    {
      if (v74 > -2147483650.0)
        return (int)v74;
      return 0x80000000;
    }
    return 0x7FFFFFFFLL;
  }
  v3 = *((_DWORD *)this + 57);
  if (!v3)
    return 0;
  v4 = ((v2 >> 13) & 6) - 2;
  v5 = *((_DWORD *)this + 30);
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v7 = v6 + 152;
  if ((v5 & 0x4000000) == 0)
    v7 = v6 + 176;
  v8 = v6 + 104;
  v9 = v6 + 128;
  if ((v5 & 0x4000000) != 0)
    v10 = v8;
  else
    v10 = v9;
  if (v4 >= 4)
    v11 = v10;
  else
    v11 = v7;
  v12 = 0.0;
  if ((*(_BYTE *)(v11 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v11 + 20) & 0xF) == 1)
      return 0;
    v12 = *(float *)(v11 + 16);
  }
  if ((*((_BYTE *)this + 328) & 4) != 0)
  {
    v81 = WebCore::RenderTable::slowColElement(this, (void *)(v3 - 1), 0, 0);
    if (v81)
    {
      v82 = *(_DWORD *)(v81 + 120);
      v83 = *(_QWORD *)(*(_QWORD *)(v81 + 88) + 24);
      v84 = v83 + 152;
      if ((v82 & 0x4000000) == 0)
        v84 = v83 + 176;
      v85 = v83 + 104;
      v86 = v83 + 128;
      v87 = (v82 & 0x4000000) != 0 ? v85 : v86;
      v88 = ((*(_DWORD *)(v81 + 124) >> 13) & 6u) - 2 >= 4 ? v87 : v84;
      if ((*(_BYTE *)(v88 + 20) & 0xF) != 0)
      {
        if ((*(_BYTE *)(v88 + 20) & 0xF) == 1)
          return 0;
        if (v12 < *(float *)(v88 + 16))
          v12 = *(float *)(v88 + 16);
      }
    }
  }
  v13 = *((_QWORD *)this + 34);
  if (!v13 || (v16 = *(_QWORD *)(v13 + 8)) == 0)
  {
    v14 = *((_QWORD *)this + 36);
    if (!v14 || (v16 = *(_QWORD *)(v14 + 8)) == 0)
    {
      v15 = *((_QWORD *)this + 35);
      if (!v15)
        goto LABEL_83;
      v16 = *(_QWORD *)(v15 + 8);
      if (!v16)
        goto LABEL_83;
    }
  }
  if (!*(_DWORD *)(v16 + 212))
  {
    v16 = WebCore::RenderTable::sectionBelow((uint64_t)this, v16, 1);
    if (!v16)
      goto LABEL_83;
  }
  v17 = *(_QWORD *)(v16 + 32);
  if (!v17)
    goto LABEL_115;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_115;
  v19 = *(unsigned __int8 *)(v18 + 46);
  if (v19 != 35 && v19 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944277E8);
  }
  v20 = *(_DWORD *)(v16 + 120);
  if (((v20 & 0x4000000) == 0) == (*(_BYTE *)(v18 + 123) & 4) >> 2)
  {
    v21 = ((*(_DWORD *)(v16 + 124) >> 13) & 6) - 2;
    v22 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24);
    v23 = v22 + 176;
    if ((v20 & 0x4000000) == 0)
      v23 = v22 + 152;
    v24 = v22 + 128;
    v25 = v22 + 104;
  }
  else
  {
LABEL_115:
    v20 = *(_DWORD *)(v16 + 120);
    v21 = ((*(_DWORD *)(v16 + 124) >> 13) & 6) - 2;
    v79 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24);
    v23 = v79 + 152;
    if ((v20 & 0x4000000) == 0)
      v23 = v79 + 176;
    v24 = v79 + 104;
    v25 = v79 + 128;
  }
  if ((v20 & 0x4000000) != 0)
    v25 = v24;
  if (v21 >= 4)
    v26 = v25;
  else
    v26 = v23;
  if ((*(_BYTE *)(v26 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v26 + 20) & 0xF) != 1)
    {
      if (v12 < *(float *)(v26 + 16))
        v12 = *(float *)(v26 + 16);
      goto LABEL_32;
    }
    return 0;
  }
LABEL_32:
  v27 = *(_QWORD *)(v17 + 8);
  if (!v27)
  {
    v28 = MEMORY[0x2E];
LABEL_36:
    if (v28 != 35 && v28 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1944277C8);
    }
    v29 = *(_DWORD *)(v27 + 228) - 1;
    goto LABEL_39;
  }
  v28 = *(unsigned __int8 *)(v27 + 46);
  if (v28 != 35 && v28 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944277A8);
  }
  if (((v20 & 0x4000000) == 0) != (*(_BYTE *)(v27 + 123) & 4) >> 2)
    goto LABEL_36;
  v29 = 0;
LABEL_39:
  if (!*(_DWORD *)(v16 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x194427890);
  }
  v30 = *(_QWORD *)(v16 + 200);
  if (*(_DWORD *)(v30 + 12) <= v29)
    goto LABEL_172;
  v31 = *(_QWORD *)v30 + 32 * v29;
  v32 = *(unsigned int *)(v31 + 12);
  if (!(_DWORD)v32)
    goto LABEL_83;
  v33 = *(_QWORD *)(*(_QWORD *)v31 + 8 * v32 - 8);
  if (!v33)
    goto LABEL_83;
  v34 = *(_QWORD *)(v33 + 32);
  if (!v34)
    goto LABEL_54;
  v35 = *(_QWORD *)(v34 + 8);
  if (!v35)
    goto LABEL_54;
  if (*(_BYTE *)(v35 + 46) != 39)
  {
LABEL_172:
    __break(0xC471u);
    JUMPOUT(0x1944276A4);
  }
  v36 = *(_QWORD *)(v35 + 32);
  if (!v36)
    goto LABEL_54;
  v37 = *(_QWORD *)(v36 + 8);
  if (!v37)
    goto LABEL_54;
  if (*(_BYTE *)(v37 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194427704);
  }
  v38 = *(_QWORD *)(v37 + 32);
  if (!v38)
    goto LABEL_54;
  v39 = *(_QWORD *)(v38 + 8);
  if (!v39)
    goto LABEL_54;
  v40 = *(unsigned __int8 *)(v39 + 46);
  if (v40 != 35 && v40 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x194427828);
  }
  if (((*(_BYTE *)(v37 + 123) & 4) == 0) != (*(_BYTE *)(v39 + 123) & 4) >> 2)
  {
LABEL_54:
    v41 = *(_DWORD *)(v33 + 120);
    v42 = ((*(_DWORD *)(v33 + 124) >> 13) & 6) - 2;
    v43 = *(_QWORD *)(*(_QWORD *)(v33 + 88) + 24);
    v44 = v43 + 152;
    if ((v41 & 0x4000000) == 0)
      v44 = v43 + 176;
    v45 = v43 + 104;
    v46 = v43 + 128;
    goto LABEL_57;
  }
  v41 = *(_DWORD *)(v33 + 120);
  v42 = ((*(_DWORD *)(v33 + 124) >> 13) & 6) - 2;
  v80 = *(_QWORD *)(*(_QWORD *)(v33 + 88) + 24);
  v44 = v80 + 176;
  if ((v41 & 0x4000000) == 0)
    v44 = v80 + 152;
  v45 = v80 + 128;
  v46 = v80 + 104;
LABEL_57:
  if ((v41 & 0x4000000) != 0)
    v46 = v45;
  if (v42 < 4)
    v46 = v44;
  if ((*(_BYTE *)(v46 + 20) & 0xF) == 1)
    return 0;
  if (v34)
  {
    v34 = *(_QWORD *)(v34 + 8);
    if (v34)
    {
      if (*(_BYTE *)(v34 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944276C4);
      }
    }
  }
  v47 = *(_QWORD *)(v34 + 32);
  if (!v47)
    goto LABEL_112;
  v48 = *(_QWORD *)(v47 + 8);
  if (!v48)
    goto LABEL_112;
  if (*(_BYTE *)(v48 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944276E4);
  }
  v49 = *(_QWORD *)(v48 + 32);
  if (!v49)
    goto LABEL_112;
  v50 = *(_QWORD *)(v49 + 8);
  if (!v50)
    goto LABEL_112;
  v51 = *(unsigned __int8 *)(v50 + 46);
  if (v51 != 35 && v51 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x194427808);
  }
  if (((*(_BYTE *)(v48 + 123) & 4) == 0) == (*(_BYTE *)(v50 + 123) & 4) >> 2)
  {
    v52 = *(_DWORD *)(v34 + 120);
    v53 = ((*(_DWORD *)(v34 + 124) >> 13) & 6) - 2;
    v54 = *(_QWORD *)(*(_QWORD *)(v34 + 88) + 24);
    v55 = v54 + 176;
    if ((v52 & 0x4000000) == 0)
      v55 = v54 + 152;
    v56 = v54 + 128;
    v57 = v54 + 104;
  }
  else
  {
LABEL_112:
    v52 = *(_DWORD *)(v34 + 120);
    v53 = ((*(_DWORD *)(v34 + 124) >> 13) & 6) - 2;
    v78 = *(_QWORD *)(*(_QWORD *)(v34 + 88) + 24);
    v55 = v78 + 152;
    if ((v52 & 0x4000000) == 0)
      v55 = v78 + 176;
    v56 = v78 + 104;
    v57 = v78 + 128;
  }
  if ((v52 & 0x4000000) != 0)
    v57 = v56;
  if (v53 < 4)
    v57 = v55;
  v58 = *(_BYTE *)(v57 + 20) & 0xF;
  if (v58 == 1)
    return 0;
  if ((*(_BYTE *)(v46 + 20) & 0xE) != 0 && v12 < *(float *)(v46 + 16))
    v12 = *(float *)(v46 + 16);
  if (v58 >= 2 && v12 < *(float *)(v57 + 16))
    v12 = *(float *)(v57 + 16);
LABEL_83:
  v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v60 = 1.0;
  if (v59)
  {
    v61 = *(_QWORD *)(v59 + 8);
    if (v61)
    {
      v62 = *(_QWORD *)(v61 + 24);
      if (v62)
      {
        v63 = *(_QWORD *)(v62 + 8);
        if (v63)
        {
          v64 = (*(_DWORD *)v63)++;
          v60 = *(float *)(v63 + 364);
          if (v64)
          {
            *(_DWORD *)v63 = v64;
          }
          else
          {
            WebCore::Page::~Page(v63);
            WTF::fastFree(v75, v76);
          }
        }
      }
    }
  }
  v65 = 1.0 / v60;
  if ((*((_BYTE *)this + 123) & 4) != 0)
    v65 = 0.0;
  v66 = (float)((float)(v12 + v65) * 0.5) * 64.0;
  if (v66 >= 2147483650.0)
  {
    v67 = 2147500000.0;
  }
  else if (v66 <= -2147483650.0)
  {
    v67 = -2147500000.0;
  }
  else
  {
    v67 = (float)(int)v66;
  }
  v68 = (float)(floorf((float)(v60 * v67) * 0.015625) / v60) * 64.0;
  if (v68 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v68 > -2147483650.0)
    return (int)v68;
  return 0x80000000;
}

uint64_t WebCore::AutoTableLayout::applyPreferredLogicalWidthQuirks(WebCore::AutoTableLayout *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  void *v7;
  float v10;
  int v11;
  int v12;
  float v13;
  double v14;
  int v15;
  float v16;
  unsigned __int8 v17;
  char v18;
  char v19;

  result = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(*(_QWORD *)(result + 88) + 8);
  v5 = (unsigned int *)(v4 + 12);
  v6 = (unsigned int *)(v4 + 4);
  if (((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4)
    v5 = v6;
  v19 = 0;
  v17 = *((_BYTE *)v5 + 4);
  v18 = *((_BYTE *)v5 + 5);
  if (v17 - 2 >= 9)
  {
    if (v17 == 11)
    {
      v7 = (void *)*v5;
      v16 = *(float *)v5;
      WebCore::Length::ref((int *)&v16);
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v7);
    }
  }
  else
  {
    if (v17 != 4)
      return result;
    v10 = *(float *)v5;
    v11 = *v5;
    v12 = *((unsigned __int8 *)v5 + 6);
    if (*((_BYTE *)v5 + 6))
    {
      if (v10 <= 0.0)
        return result;
    }
    else if (v11 < 1)
    {
      return result;
    }
    result = WebCore::RenderBox::overridingLogicalWidth((WebCore::RenderBox *)result);
    v13 = (float)v11;
    if (v12)
      v13 = v10;
    v14 = v13 * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    if ((result & 0xFF00000000) != 0)
      v15 = result;
    if (*(_DWORD *)a2 > v15)
      v15 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v15;
    *(_DWORD *)a3 = v15;
  }
  return result;
}

void WebCore::AutoTableLayout::computeIntrinsicLogicalWidths(uint64_t a1, int *a2, int *a3, int a4)
{
  float v8;
  float v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  WebCore::RenderObject *v15;
  WebCore::RenderObject *v16;
  int v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  double v24;
  unsigned int v25;
  float v26;
  double v27;
  int v28;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  int v38;
  double v39;
  int v40;
  double v41;
  int v42;
  WebCore::RenderObject *v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  int v49;
  float *v50;
  double v51;
  int v52;
  double v53;
  int v54;
  unsigned int v55;
  unsigned __int8 v56;
  char v57;
  char v58;

  WebCore::AutoTableLayout::fullRecalc((WebCore::AutoTableLayout *)a1, a2);
  WebCore::AutoTableLayout::calcEffectiveLogicalWidth((WebCore::AutoTableLayout *)a1);
  v9 = v8;
  *a2 = 0;
  *a3 = 0;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = 1;
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 8);
      v58 = 0;
      v56 = *(_BYTE *)(v12 + 8);
      v13 = v56;
      v57 = *(_BYTE *)(v12 + 9);
      if (v56 - 2 >= 9)
      {
        v14 = v56;
        if (!v56)
          goto LABEL_11;
        v14 = 0;
        if (v56 == 11)
        {
          v14 = *(unsigned int *)(v12 + 4);
          v55 = *(_DWORD *)(v12 + 4);
          WebCore::Length::ref((int *)&v55);
LABEL_11:
          if ((*(_DWORD *)(v10 + 20) & 0x1800000) != 0x1000000)
          {
            v15 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v10);
            if (v15)
            {
              v16 = v15;
              while (1)
              {
                v17 = *((unsigned __int8 *)v16 + 46);
                if (v17 == 49)
                  break;
                if (v17 == 37)
                {
                  ++*((_DWORD *)v16 + 4);
                  v45 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v16 + 11) + 8) + 8);
                  v46 = v45 > 0xB;
                  v47 = (1 << v45) & 0x809;
                  if (v46 || v47 == 0)
                  {
                    v10 = 0;
                  }
                  else if ((*((_BYTE *)v16 + 251) & 4) != 0
                         && WebCore::RenderTableCell::parseColSpanFromDOM(v16) > 1
                         || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(WebCore::RenderTableCell::table(v16) + 88) + 8) + 8))
                  {
                    v10 = 0;
                    v11 = 0;
                  }
                  else
                  {
                    v10 = WebCore::RenderTableCell::table(v16);
                  }
                  v49 = *((_DWORD *)v16 + 4);
                  if (!v49)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194427FE4);
                  }
                  *((_DWORD *)v16 + 4) = v49 - 1;
                  goto LABEL_20;
                }
                if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v16 + 11) + 8) + 8)
                  && (*((_DWORD *)v16 + 5) & 0x1800000) != 0x1000000)
                {
                  v16 = WebCore::RenderObject::containingBlock(v16);
                  if (v16)
                    continue;
                }
                goto LABEL_19;
              }
            }
          }
          goto LABEL_19;
        }
      }
      else
      {
        v58 = *(_BYTE *)(v12 + 10);
        if (v58)
        {
          v55 = *(_DWORD *)(v12 + 4);
          v14 = v55;
        }
        else
        {
          v14 = *(unsigned int *)(v12 + 4);
          v55 = *(_DWORD *)(v12 + 4);
        }
      }
      if ((v56 & 0xF7) == 3)
        goto LABEL_11;
LABEL_19:
      v10 = 0;
LABEL_20:
      if (v13 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
      }
      if (!v10)
        goto LABEL_22;
    }
  }
  v11 = 1;
LABEL_22:
  v18 = 0.0;
  if (*(_DWORD *)(a1 + 28))
  {
    v19 = *(_QWORD *)(a1 + 16);
    v20 = 0;
    if (((a4 == 0) & v11) != 0)
    {
      v21 = v19 + 14;
      v22 = 0.0;
      v23 = 100.0;
      while (1)
      {
        v24 = (float)(*(float *)(v21 + 10) + (float)((float)*a2 * 0.015625)) * 64.0;
        if (v24 >= 2147483650.0)
          v25 = 0x7FFFFFFF;
        else
          v25 = v24 <= -2147483650.0 ? 0x80000000 : (int)v24;
        *a2 = v25;
        if (v20 >= *(unsigned int *)(a1 + 28))
          break;
        v26 = *(float *)(v21 + 14);
        v27 = (float)(v26 + (float)((float)*a3 * 0.015625)) * 64.0;
        if (v27 >= 2147483650.0)
        {
          v28 = 0x7FFFFFFF;
        }
        else if (v27 <= -2147483650.0)
        {
          v28 = 0x80000000;
        }
        else
        {
          v28 = (int)v27;
        }
        *a3 = v28;
        v29 = *(unsigned int *)(a1 + 28);
        if (v20 >= v29)
        {
          __break(0xC471u);
          JUMPOUT(0x19442802CLL);
        }
        if (*(_BYTE *)(v21 - 2) == 3)
        {
          if (*(_BYTE *)v21)
            v30 = *(float *)(v21 - 6);
          else
            v30 = (float)*(int *)(v21 - 6);
          if (v23 < v30)
            v30 = v23;
          v31 = v26 * 100.0;
          if (v30 >= 0.0078125)
            v32 = v30;
          else
            v32 = 0.0078125;
          v33 = v31 / v32;
          if (v33 >= v22)
            v22 = v33;
          v23 = v23 - v30;
        }
        else
        {
          v18 = v18 + v26;
        }
        ++v20;
        v21 += 40;
        if (v20 >= v29)
          goto LABEL_50;
      }
LABEL_120:
      __break(0xC471u);
      JUMPOUT(0x194428024);
    }
    v50 = (float *)(v19 + 28);
    do
    {
      v51 = (float)(*(v50 - 1) + (float)((float)*a2 * 0.015625)) * 64.0;
      if (v51 >= 2147483650.0)
      {
        v52 = 0x7FFFFFFF;
      }
      else if (v51 <= -2147483650.0)
      {
        v52 = 0x80000000;
      }
      else
      {
        v52 = (int)v51;
      }
      *a2 = v52;
      if (v20 >= *(unsigned int *)(a1 + 28))
        goto LABEL_120;
      v53 = (float)(*v50 + (float)((float)*a3 * 0.015625)) * 64.0;
      if (v53 >= 2147483650.0)
      {
        v54 = 0x7FFFFFFF;
      }
      else if (v53 <= -2147483650.0)
      {
        v54 = 0x80000000;
      }
      else
      {
        v54 = (int)v53;
      }
      *a3 = v54;
      ++v20;
      v50 += 10;
    }
    while (v20 < *(unsigned int *)(a1 + 28));
    v23 = 100.0;
  }
  else
  {
    v23 = 100.0;
  }
  v22 = 0.0;
LABEL_50:
  if (((a4 == 0) & v11) != 0)
  {
    v34 = v18 * 100.0;
    if (v23 < 0.0078125)
      v23 = 0.0078125;
    v35 = v34 / v23;
    v36 = 1000000.0;
    if (v35 > 1000000.0)
      v35 = 1000000.0;
    v37 = v35 * 64.0;
    if (v37 >= 2147483650.0)
    {
      v38 = 0x7FFFFFFF;
    }
    else if (v37 <= -2147483650.0)
    {
      v38 = 0x80000000;
    }
    else
    {
      v38 = (int)v37;
    }
    if (v22 <= 1000000.0)
      v36 = v22;
    v39 = v36 * 64.0;
    if (v39 >= 2147483650.0)
    {
      v40 = 0x7FFFFFFF;
    }
    else if (v39 <= -2147483650.0)
    {
      v40 = 0x80000000;
    }
    else
    {
      v40 = (int)v39;
    }
    if (v38 <= v40)
      v38 = v40;
    *(_DWORD *)(a1 + 52) = v38;
    if (v38 > *a3)
    {
      v43 = *(WebCore::RenderObject **)(a1 + 8);
      while (1)
      {
        v43 = WebCore::RenderObject::containingBlock(v43);
        if (!v43)
          break;
        v44 = *((unsigned __int8 *)v43 + 46);
        if (v44 == 49)
          break;
        if (v44 == 37 || v44 == 12 || *((char *)v43 + 45) < 0)
          goto LABEL_66;
      }
      *a3 = *(_DWORD *)(a1 + 52);
    }
  }
LABEL_66:
  v41 = v9 * 64.0;
  if (v41 >= 2147483650.0)
  {
    v42 = 0x7FFFFFFF;
  }
  else if (v41 <= -2147483650.0)
  {
    v42 = 0x80000000;
  }
  else
  {
    v42 = (int)v41;
  }
  if (*a3 > v42)
    v42 = *a3;
  *a3 = v42;
}

void WebCore::AutoTableLayout::calcEffectiveLogicalWidth(WebCore::AutoTableLayout *this)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  float v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  char v24;
  float v25;
  uint64_t v26;
  int v27;
  float v28;
  char v29;
  float v30;
  float v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  float v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  float v47;
  char v48;
  char v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  float v116;
  float v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  float v123;
  char v124;
  float v125;
  unint64_t v126;
  unsigned int v127[2];
  unsigned int v128;
  unsigned __int8 v129;
  char v130;

  v2 = *((unsigned int *)this + 7);
  v3 = *(_DWORD *)(*((_QWORD *)this + 1) + 332);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = 0;
    LODWORD(v6) = *((_DWORD *)this + 7);
    do
    {
      if (v5 >= v6)
      {
        __break(0xC471u);
        JUMPOUT(0x194428B5CLL);
      }
      v7 = *((_QWORD *)this + 2);
      v8 = v7 + v4;
      v9 = (_DWORD *)(v7 + v4 + 8);
      if (*(_BYTE *)(v7 + v4 + 12) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      }
      v10 = *(unsigned __int8 *)(v8 + 4);
      *(_BYTE *)(v8 + 12) = v10;
      *(_BYTE *)(v8 + 13) = *(_BYTE *)(v8 + 5);
      if (v10 <= 0xD)
      {
        v11 = 1 << v10;
        if ((v11 & 0x7FC) != 0)
        {
          *(_BYTE *)(v7 + v4 + 14) = *(_BYTE *)(v7 + v4 + 6);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)v8;
        }
        else if ((v11 & 0x3003) != 0)
        {
          *v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + 8) = *(_DWORD *)v8;
          WebCore::Length::ref((int *)(v7 + v4 + 8));
        }
      }
      v6 = *((unsigned int *)this + 7);
      if (v5 >= v6)
      {
        __break(0xC471u);
        JUMPOUT(0x194428B64);
      }
      *(_QWORD *)(*((_QWORD *)this + 2) + v4 + 24) = *(_QWORD *)(*((_QWORD *)this + 2) + v4 + 16);
      ++v5;
      v4 += 40;
    }
    while (40 * v2 != v4);
  }
  v12 = 0.0;
  if (*((_DWORD *)this + 11))
  {
    v13 = 0;
    v14 = (float)v3 * 0.015625;
    do
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v13);
      if (!v15)
        break;
      if ((*(_BYTE *)(v15 + 251) & 4) != 0)
        v16 = WebCore::RenderTableCell::parseColSpanFromDOM((WebCore::RenderTableCell *)v15);
      else
        v16 = 1;
      WebCore::RenderTableCell::styleOrColLogicalWidth((WebCore::RenderTableCell *)v15, (uint64_t)&v128);
      if (v129 && v129 != 11)
      {
        if (v130)
        {
          if (*(float *)&v128 != 0.0)
            goto LABEL_22;
        }
        else if (*(float *)&v128 != 0.0)
        {
          goto LABEL_22;
        }
        memset(v127, 0, 7);
        WebCore::Length::operator=(&v128, v127);
        if (LOBYTE(v127[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v127[0]);
        }
      }
LABEL_22:
      v17 = *((_QWORD *)this + 1);
      v18 = *(_DWORD *)(v15 + 248) & 0x1FFFFFF;
      if ((*(_BYTE *)(v17 + 328) & 0x40) != 0)
      {
        v119 = *(unsigned int *)(v17 + 228);
        if ((_DWORD)v119)
        {
          v120 = 0;
          v121 = 0;
          v122 = *(_QWORD *)(v17 + 216);
          while (1)
          {
            v121 += *(_DWORD *)(v122 + 4 * v120);
            if (v121 - 1 >= v18)
              break;
            if (v119 == ++v120)
            {
              v18 = v119;
              goto LABEL_23;
            }
          }
          v18 = v120;
        }
        else
        {
          v18 = 0;
        }
      }
LABEL_23:
      if ((*(_BYTE *)(v15 + 21) & 0x20) != 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1640))(v15);
        v19 = *(_DWORD *)(v15 + 184);
        if ((*(_BYTE *)(v15 + 21) & 0x20) != 0)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1640))(v15);
      }
      else
      {
        v19 = *(_DWORD *)(v15 + 184);
      }
      LOBYTE(v20) = 0;
      v21 = v18;
      v22 = v14 + (float)((float)v19 * 0.015625);
      v23 = v14 + (float)((float)*(int *)(v15 + 188) * 0.015625);
      v24 = 1;
      v25 = 0.0;
      v126 = v18;
      if (v18 < v2 && v16)
      {
        v20 = 0;
        v26 = 40 * v18;
        LOBYTE(v27) = 1;
        v28 = 0.0;
        v29 = 1;
        v30 = 0.0;
        v31 = 0.0;
        v32 = v21;
        while (1)
        {
          if (v32 >= *((unsigned int *)this + 7))
          {
            __break(0xC471u);
            JUMPOUT(0x194428B6CLL);
          }
          v33 = *((_QWORD *)this + 2);
          v34 = (int *)(v33 + v26);
          v35 = *(unsigned __int8 *)(v33 + v26 + 4);
          if (!*(_BYTE *)(v33 + v26 + 4))
            break;
          if (v35 != 4)
          {
            if (v35 == 3)
            {
              if (!*(_BYTE *)(v33 + v26 + 6))
              {
                v46 = *v34;
                goto LABEL_69;
              }
              v47 = *(float *)v34;
LABEL_70:
              v29 = 0;
              v31 = v31 + v47;
              goto LABEL_42;
            }
LABEL_39:
            v38 = (unsigned int *)(v33 + v26 + 8);
            if (*(_BYTE *)(v33 + v26 + 12) != 3)
            {
              v39 = v20;
              memset(v127, 0, 7);
              WebCore::Length::operator=(v38, v127);
              if (LOBYTE(v127[1]) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v127[0]);
              }
              v24 = 0;
              v29 = 0;
              v21 = v126;
              v20 = v39;
              goto LABEL_42;
            }
            if (*(_BYTE *)(v33 + v26 + 14))
            {
              v47 = *(float *)v38;
            }
            else
            {
              v46 = *v38;
LABEL_69:
              v47 = (float)v46;
            }
            goto LABEL_70;
          }
          if (*(_BYTE *)(v33 + v26 + 6))
          {
            v37 = *(float *)v34;
            if (*(float *)v34 <= 0.0)
              break;
          }
          else
          {
            v36 = *v34;
            if (v36 <= 0)
              break;
            v37 = (float)v36;
          }
          v24 = 0;
          v28 = v28 + v37;
LABEL_42:
          v40 = *((_QWORD *)this + 1);
          if (*(_DWORD *)(v40 + 228) <= v32)
          {
            __break(0xC471u);
            JUMPOUT(0x194428B74);
          }
          v27 = (*(_BYTE *)(v33 + v26 + 36) != 0) & v27;
          v30 = v30 + *(float *)(v33 + v26 + 24);
          v25 = v25 + *(float *)(v33 + v26 + 28);
          v41 = v32 + 1;
          v22 = v22 - v14;
          v23 = v23 - v14;
          if (v32 + 1 < v2)
          {
            v42 = *(_DWORD *)(*(_QWORD *)(v40 + 216) + 4 * v32);
            v26 += 40;
            ++v32;
            v16 -= v42;
            if (v16)
              continue;
          }
          goto LABEL_47;
        }
        v20 = 1;
        goto LABEL_39;
      }
      v41 = v18;
      v31 = 0.0;
      v30 = 0.0;
      v29 = 1;
      v27 = 1;
      v28 = 0.0;
LABEL_47:
      if (v129 == 3)
      {
        v48 = v20;
        v124 = v24;
        v49 = v29;
        if (v130)
          v50 = *(float *)&v128;
        else
          v50 = (float)(int)v128;
        if ((v31 > v50) | v24 & 1)
        {
          memset(v127, 0, 7);
          WebCore::Length::operator=(&v128, v127);
          if (LOBYTE(v127[1]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v127[0]);
          }
          v21 = v126;
          LOBYTE(v20) = v48;
          v24 = v124;
          v29 = v49;
        }
        else
        {
          if (v25 >= v23)
            v72 = v25;
          else
            v72 = v23;
          v73 = (float)(v72 * 100.0) / v50;
          if (v12 < v73)
            v12 = v73;
          if (v41 > v21)
          {
            v123 = v31;
            v74 = v50 - v31;
            LODWORD(v75) = *((_DWORD *)this + 7);
            if (v21 <= v75)
              v75 = v75;
            else
              v75 = v21;
            v76 = 40 * v21;
            v77 = 0.0;
            v78 = 40 * v21;
            v79 = v21;
            do
            {
              if (v75 == v79)
              {
                __break(0xC471u);
                JUMPOUT(0x194428B94);
              }
              v80 = *((_QWORD *)this + 2) + v78;
              if ((*(_BYTE *)(v80 + 12) & 0xF7) != 3)
                v77 = v77 + *(float *)(v80 + 28);
              ++v79;
              v78 += 40;
            }
            while (v41 > v79);
            v81 = v21;
            do
            {
              if (v81 >= *((unsigned int *)this + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x194428B9CLL);
              }
              v82 = *((_QWORD *)this + 2);
              v83 = v82 + v76;
              if ((*(_BYTE *)(v82 + v76 + 12) & 0xF7) != 3)
              {
                v85 = *(float *)(v83 + 28);
                v86 = v85 / v77;
                if (v77 == 0.0)
                  v86 = 1.0;
                v87 = v74 * v86;
                v77 = v77 - v85;
                v74 = v74 - v87;
                if (v87 <= 0.0)
                {
                  v125 = v74;
                  memset(v127, 0, 7);
                  WebCore::Length::operator=((unsigned int *)(v83 + 8), v127);
                  if (LOBYTE(v127[1]) == 11)
                  {
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v127[0]);
                  }
                  v21 = v126;
                  LOBYTE(v20) = v48;
                  v24 = v124;
                  v29 = v49;
                  v74 = v125;
                }
                else
                {
                  *(_BYTE *)(v83 + 12) = 3;
                  *(float *)(v83 + 8) = v87;
                  *(_BYTE *)(v82 + v76 + 14) = 1;
                }
              }
              ++v81;
              v76 += 40;
            }
            while (v77 > 0.0 && v41 > v81);
            v31 = v123;
          }
        }
      }
      if (v22 > v30)
      {
        if ((v29 & 1) != 0)
        {
          if (v28 > 0.0 && v41 > v21)
          {
            LODWORD(v51) = *((_DWORD *)this + 7);
            if (v21 <= v51)
              v51 = v51;
            else
              v51 = v21;
            v52 = 40 * v21;
            v53 = v21;
            do
            {
              if (v51 == v53)
              {
                __break(0xC471u);
                JUMPOUT(0x194428B7CLL);
              }
              v54 = *((_QWORD *)this + 2) + v52;
              if (*(_BYTE *)(v54 + 6))
                v55 = *(float *)v54;
              else
                v55 = (float)*(int *)v54;
              v56 = (float)(v22 * v55) / v28;
              if (*(float *)(v54 + 24) >= v56)
                v56 = *(float *)(v54 + 24);
              v28 = v28 - v55;
              v22 = v22 - v56;
              *(float *)(v54 + 24) = v56;
              ++v53;
              v52 += 40;
            }
            while (v28 > 0.0 && v41 > v53);
          }
          goto LABEL_49;
        }
        if ((v24 & 1) == 0)
        {
          if (v25 < 0.0 || v41 <= v21)
          {
            v106 = v25;
          }
          else
          {
            LODWORD(v103) = *((_DWORD *)this + 7);
            if (v21 <= v103)
              v103 = v103;
            else
              v103 = v21;
            v104 = 40 * v21;
            v105 = v21;
            v106 = v25;
            do
            {
              if (v103 == v105)
              {
                __break(0xC471u);
                JUMPOUT(0x194428BB4);
              }
              v107 = *((_QWORD *)this + 2);
              v108 = v107 + v104;
              if (((*(_BYTE *)(v107 + v104 + 4) == 4) & v20) == 1 && v28 <= v22)
              {
                if (*(_BYTE *)(v108 + 6))
                  v110 = *(float *)v108;
                else
                  v110 = (float)*(int *)v108;
                v111 = *(float *)(v108 + 24);
                if (v111 >= v110)
                  v112 = *(float *)(v108 + 24);
                else
                  v112 = v110;
                v28 = v28 - v110;
                v30 = v30 - v111;
                v106 = v106 - *(float *)(v107 + v104 + 28);
                v22 = v22 - v112;
                *(float *)(v108 + 24) = v112;
              }
              if (v106 < 0.0)
                break;
              ++v105;
              v104 += 40;
            }
            while (v41 > v105);
          }
          if (v106 >= 0.0)
          {
            v113 = 40 * v21;
            v114 = v21;
            do
            {
              if (v41 <= v114 || v30 >= v22)
                break;
              if (v114 >= *((unsigned int *)this + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x194428BBCLL);
              }
              v115 = *((_QWORD *)this + 2) + v113;
              if ((*(_BYTE *)(v115 + 4) != 4) | (v20 ^ 1) & 1 || v28 > v22)
              {
                v116 = *(float *)(v115 + 28);
                v117 = v22;
                if (v106 != 0.0)
                  v117 = (float)(v22 * v116) / v106;
                v118 = *(float *)(v115 + 24);
                if (v118 >= v117)
                  v117 = *(float *)(v115 + 24);
                if (v117 >= (float)((float)(v22 - v30) + v118))
                  v117 = (float)(v22 - v30) + v118;
                v106 = v106 - v116;
                v30 = v30 - v118;
                v22 = v22 - v117;
                *(float *)(v115 + 24) = v117;
              }
              ++v114;
              v113 += 40;
            }
            while (v106 >= 0.0);
          }
          goto LABEL_49;
        }
        v88 = 0.0;
        if (v41 <= v21)
        {
LABEL_198:
          v23 = v23 - v88;
          goto LABEL_49;
        }
        LODWORD(v89) = *((_DWORD *)this + 7);
        if (v21 <= v89)
          v89 = v89;
        else
          v89 = v21;
        v90 = 40 * v21;
        v91 = v21;
        while (2)
        {
          if (v89 == v91)
          {
            __break(0xC471u);
            JUMPOUT(0x194428BA4);
          }
          v92 = *((_QWORD *)this + 2);
          v93 = v92 + v90;
          if (*(_BYTE *)(v92 + v90 + 4) == 3)
          {
            if (!*(_BYTE *)(v93 + 6))
            {
              v94 = *(_DWORD *)v93;
              goto LABEL_160;
            }
            v95 = *(float *)v93;
          }
          else if (*(_BYTE *)(v93 + 14))
          {
            v95 = *(float *)(v93 + 8);
          }
          else
          {
            v94 = *(_DWORD *)(v93 + 8);
LABEL_160:
            v95 = (float)v94;
          }
          v96 = (float)(v22 * v95) / v31;
          v97 = (float)(v23 * v95) / v31;
          v98 = v92 + v90;
          if (*(float *)(v98 + 24) >= v96)
            v96 = *(float *)(v98 + 24);
          *(float *)(v98 + 24) = v96;
          *(float *)(v98 + 28) = v97;
          v88 = v88 + v97;
          ++v91;
          v90 += 40;
          if (v41 <= v91)
            goto LABEL_198;
          continue;
        }
      }
LABEL_49:
      v43 = v129;
      if ((v129 & 0xF7) == 3)
      {
        v58 = v41 - v21;
        if (v41 > v21)
        {
          v59 = *((_DWORD *)this + 7);
          if (v21 <= v59)
            v60 = v59;
          else
            v60 = v21;
          v61 = 40 * v21;
          v62 = v60 - v21;
          do
          {
            if (!v62)
            {
              __break(0xC471u);
              JUMPOUT(0x194428B84);
            }
            v63 = *((_QWORD *)this + 2) + v61;
            v64 = *(float *)(v63 + 20);
            if (v64 < *(float *)(v63 + 16))
              v64 = *(float *)(v63 + 16);
            *(float *)(v63 + 20) = v64;
            v61 += 40;
            --v62;
            --v58;
          }
          while (v58);
        }
      }
      else if (v23 > v25 && v25 >= 0.0 && v41 > v21)
      {
        LODWORD(v65) = *((_DWORD *)this + 7);
        if (v21 <= v65)
          v65 = v65;
        else
          v65 = v21;
        v66 = 40 * v21 + 28;
        v67 = v21;
        do
        {
          if (v65 == v67)
          {
            __break(0xC471u);
            JUMPOUT(0x194428B8CLL);
          }
          v68 = *((_QWORD *)this + 2);
          v69 = *(float *)(v68 + v66);
          v70 = v23;
          if (v25 != 0.0)
            v70 = (float)(v23 * v69) / v25;
          if (v69 >= v70)
            v70 = *(float *)(v68 + v66);
          v25 = v25 - v69;
          *(float *)(v68 + v66) = v70;
          v23 = v23 - v70;
          ++v67;
          v66 += 40;
        }
        while (v25 >= 0.0 && v41 > v67);
      }
      v44 = v41 - v21;
      if (v41 > v21)
        v45 = v27;
      else
        v45 = 0;
      if (v45 == 1)
      {
        v99 = *((_DWORD *)this + 7);
        if (v21 <= v99)
          v100 = v99;
        else
          v100 = v21;
        v101 = 40 * v21 + 36;
        v102 = v100 - v21;
        do
        {
          if (!v102)
          {
            __break(0xC471u);
            JUMPOUT(0x194428BACLL);
          }
          *(_BYTE *)(*((_QWORD *)this + 2) + v101) = 0;
          v101 += 40;
          --v102;
          --v44;
        }
        while (v44);
      }
      if (v43 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v128);
      }
      ++v13;
    }
    while (v13 < *((unsigned int *)this + 11));
  }
  *((_BYTE *)this + 48) &= ~2u;
}

uint64_t WebCore::EventTarget::removeEventListener(WebCore::EventTarget *a1, WTF::StringImpl **a2, WebCore::EventListener *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  WebCore::EventListenerMap *v9;
  int v10;
  uint64_t result;
  WebCore::InspectorInstrumentation *v13;
  WebCore::ScriptExecutionContext *v14;
  _QWORD *v15;

  v4 = *((_QWORD *)a1 + 2);
  if ((v4 & 0x1000000000000) == 0)
    return 0;
  v9 = (WebCore::EventListenerMap *)((v4 & 0xFFFFFFFFFFFFLL) + 16);
  v10 = *a4;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v13 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)a1 + 8))(a1);
    if (v13)
    {
      v15 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v13, v14);
      if (v15)
        WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(v15, a1, a2, a3, v10 != 0);
    }
  }
  result = WebCore::EventListenerMap::remove(v9, (const WTF::AtomString *)a2, a3, *a4);
  if ((_DWORD)result)
  {
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a1 + 80))(a1);
    return 1;
  }
  return result;
}

uint64_t WebCore::EventListenerMap::remove(WebCore::EventListenerMap *this, const WTF::AtomString *a2, WebCore::EventListener *a3, int a4)
{
  unsigned __int8 *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  int v26;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;

  v8 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C]((char *)this + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v8))
    goto LABEL_3;
LABEL_4:
  v10 = *((unsigned int *)this + 3);
  if (!(_DWORD)v10)
  {
LABEL_34:
    v15 = 0;
    goto LABEL_21;
  }
  v11 = *(_QWORD *)this;
  v12 = *(_QWORD *)a2;
  if (**(_QWORD **)this == *(_QWORD *)a2)
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
  }
  else
  {
    v13 = 0;
    v28 = (uint64_t *)(v11 + 32);
    do
    {
      if (v10 - 1 == v13)
        goto LABEL_34;
      v29 = *v28;
      v28 += 4;
      ++v13;
    }
    while (v29 != v12);
    v15 = v13 < v10;
    v14 = v13;
  }
  v16 = v11 + 32 * v13;
  if (*(_DWORD *)(v16 + 20))
  {
    v30 = v14;
    v17 = 0;
    v18 = (uint64_t *)(v16 + 8);
    v19 = -8;
    while (1)
    {
      v20 = *v18;
      v21 = *(_QWORD *)(*(_QWORD *)(*v18 + 8 * v17) + 8);
      if ((*(unsigned int (**)(uint64_t, WebCore::EventListener *))(*(_QWORD *)v21 + 16))(v21, a3))
      {
        if ((*(_BYTE *)(*(_QWORD *)(v20 + 8 * v17) + 4) & 1) == a4)
          break;
      }
      ++v17;
      v19 -= 8;
      if (v17 >= *((unsigned int *)v18 + 3))
      {
        a4 = 0;
        goto LABEL_17;
      }
    }
    if (v17 >= *((unsigned int *)v18 + 3))
    {
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x194428F40);
    }
    *(_BYTE *)(*(_QWORD *)(*v18 + 8 * v17) + 4) |= 8u;
    v23 = *v18;
    v24 = (WTF **)(*v18 + 8 * v17);
    v25 = *v24;
    *v24 = 0;
    if (v25)
      WTF::RefCounted<WebCore::RegisteredEventListener>::deref(v25, v22);
    memmove(v24, v24 + 1, *v18 + 8 * *((unsigned int *)v18 + 3) - v23 + v19);
    --*((_DWORD *)v18 + 3);
    a4 = 1;
LABEL_17:
    v14 = v30;
  }
  else
  {
    a4 = 0;
  }
  if (*((_DWORD *)this + 3) <= v14)
    goto LABEL_35;
  if (!*(_DWORD *)(*(_QWORD *)this + 32 * v13 + 20))
    WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::remove((uint64_t *)this, (void *)v13);
LABEL_21:
  v26 = __ldxr(v8);
  if (v26 == 1)
  {
    if (!__stlxr(0, v8))
      return v15 & a4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return v15 & a4;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::remove(uint64_t *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  _DWORD *v11;
  WTF *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;

  v4 = *a1;
  v5 = *a1 + 32 * (_QWORD)a2;
  v6 = (WTF **)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v7)
  {
    v8 = *v6;
    v9 = 8 * v7;
    do
    {
      v10 = *(WTF **)v8;
      *(_QWORD *)v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          v11 = (_DWORD *)*((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = 0;
          if (v11)
          {
            if (v11[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            else
              --v11[4];
          }
          WTF::fastFree(v10, a2);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  v12 = *v6;
  if ((WTF *)(v5 + 24) != *v6 && v12 != 0)
  {
    *v6 = 0;
    *(_DWORD *)(v4 + 32 * (_QWORD)a2 + 16) = 0;
    WTF::fastFree(v12, a2);
  }
  v14 = *(WTF::StringImpl **)v5;
  *(_QWORD *)v5 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = WTF::VectorMover<false,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::move((WTF::StringImpl *)(v5 + 32), (WTF::StringImpl *)(*a1 + 32 * *((unsigned int *)a1 + 3)), v5);
  --*((_DWORD *)a1 + 3);
  return result;
}

uint64_t WebCore::jsEventTargetPrototypeFunction_addEventListener(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::VM *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  JSC::VM *v25;
  char v26;
  int v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSValue v41;
  JSC::VM *v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  _BYTE v49[16];
  int v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **v54;
  _QWORD *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl **v57;
  _QWORD *v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  char v61;
  __int16 v62;
  char v63;
  WTF::StringImpl **v64;
  unsigned int v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = 0xFFFE000000000002;
  v6 = *((_QWORD *)this + 7);
  v44 = v6;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 0xFFFE000000000002) != 0)
  {
    if ((v7 & 0xFFFFFFFFFFFFFFF7) != 2)
      goto LABEL_7;
    goto LABEL_55;
  }
  if ((v7 & 0xFFFFFFFFFFFFFFF7) == 2 || *(unsigned __int8 *)(v7 + 5) - 51 < 6)
LABEL_55:
    v7 = (unint64_t)this;
LABEL_7:
  v9 = (WTF::StringImpl *)WebCore::jsEventTargetCast(v6, v7);
  if (!v9)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "EventTarget", "addEventListener");
  v11 = v9;
  v12 = v10;
  if ((**(unsigned int (***)(WTF::StringImpl *))v9)(v9) == 54)
  {
    v37 = *((_QWORD *)v11 + 9);
    if (!v37)
      return 10;
    v38 = *(_QWORD *)(v37 + 8);
    if (!v38)
      return 10;
    if (*(_BYTE *)(v38 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x194429690);
    }
    v39 = *(_QWORD *)(v38 + 240);
    if (!v39
      || !*(_QWORD *)(v39 + 8)
      || !WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)this, v11, 2))
    {
      return 10;
    }
  }
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v13);
    return JSC::VM::throwException(v14, this, v41);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v47);
  v17 = v48;
  if (!v48)
  {
    v18 = *((_QWORD *)a2 + 7);
    v43 = v14;
    if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v5 = 0;
      v45 = 0;
      v46 = 0;
    }
    else
    {
      v60 = *((_QWORD *)this + 7);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        v21 = 1;
        WebCore::throwArgumentMustBeObjectError((uint64_t)this, (uint64_t)&v60, 1, "listener", 9, "EventTarget", 12, v16, "addEventListener", 17);
        v23 = 0;
        LODWORD(v54) = 1;
        v22 = 1;
      }
      else
      {
        v19 = *((_QWORD *)this + 415);
        v5 = WTF::fastMalloc((WTF *)0x48);
        v20 = WebCore::JSEventListener::JSEventListener(v5, v18, v12, 0, 0, v19);
        v21 = 0;
        v22 = 0;
        LODWORD(v54) = 0;
        v53 = 0;
        v23 = 1;
        v45 = v20;
      }
      v46 = v21;
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3274D08[v22])(&v60, &v53);
      if (!v23)
      {
        v29 = 0;
        v34 = 1;
LABEL_50:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3274D58[v34])(&v53, &v45);
        v17 = v48;
        goto LABEL_51;
      }
    }
    if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL || (v24 = *((_QWORD *)a2 + 8), v24 == 10))
    {
      v61 = 0;
      v65 = 1;
      v66 = 0;
      goto LABEL_28;
    }
    if ((v24 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if ((v24 & 0xFFFE000000000002) != 0)
      {
        if ((v24 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v25 = (JSC::VM *)*((_QWORD *)this + 7);
          v26 = v24 == 7;
LABEL_22:
          if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
          {
            v27 = 1;
          }
          else
          {
            v27 = 0;
            v61 = v26;
            v65 = 1;
          }
LABEL_24:
          v66 = v27;
          goto LABEL_25;
        }
        goto LABEL_87;
      }
      if (*(unsigned __int8 *)(v24 + 5) < 0x17u)
      {
        if ((v24 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v42 = (JSC::VM *)*((_QWORD *)this + 7);
          v26 = JSC::JSCell::toBoolean(v24, (uint64_t)this);
          v25 = v42;
          goto LABEL_22;
        }
LABEL_87:
        WebCore::Converter<WebCore::IDLBoolean>::convert((uint64_t)&v53, (uint64_t)this, v24);
        v27 = 1;
        if (!HIDWORD(v53))
        {
          v61 = (char)v53;
          v65 = 1;
          v27 = 0;
        }
        goto LABEL_24;
      }
    }
    WebCore::convertDictionary<WebCore::AddEventListenerOptions>((JSC::JSCell *)v24, this, (uint64_t)&v53);
    if ((_DWORD)v55)
    {
      v66 = 1;
      if ((_DWORD)v55 == -1)
      {
LABEL_25:
        v28 = v66;
        if (v66)
        {
          v29 = 0;
LABEL_47:
          if (v28 != -1)
            ((void (*)(WTF::StringImpl **, char *))off_1E3274D48[v28])(&v53, &v61);
          v34 = 0;
          goto LABEL_50;
        }
LABEL_28:
        if (!v48)
        {
          v30 = v47;
          v47 = 0;
          v51 = (_DWORD *)v5;
          v52 = v30;
          v45 = 0;
          v49[0] = 0;
          v50 = -1;
          v31 = v65;
          if (v65 != -1)
          {
            ((void (*)(WTF::StringImpl **, _BYTE *, char *))off_1E3274D28[v65])(&v53, v49, &v61);
            v50 = v31;
          }
          if (!v5)
          {
LABEL_34:
            if ((_DWORD)v31 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3274D18[v31])(&v53, v49);
            v32 = v51;
            v51 = 0;
            if (v32)
            {
              if (v32[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
              else
                --v32[4];
            }
            v33 = v52;
            v52 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v15);
              else
                *(_DWORD *)v33 -= 2;
            }
            if (*((_DWORD *)v43 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v43) & 1) != 0)
            {
              v29 = 0;
            }
            else
            {
              if ((v18 & 0xFFFE000000000002) == 0)
              {
                v29 = 10;
                if (!v12 || !v18)
                  goto LABEL_46;
                if (*((_DWORD *)v43 + 190) >= *(unsigned __int8 *)(v12 + 7))
                  JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v43 + 192), (const JSCell *)v12);
              }
              v29 = 10;
            }
LABEL_46:
            v28 = v66;
            goto LABEL_47;
          }
          v53 = v11;
          v54 = &v52;
          v55 = &v51;
          v56 = v11;
          v57 = &v52;
          v58 = &v51;
          if ((_DWORD)v31 != -1)
          {
            v59 = &v53;
            ((void (*)(WTF::StringImpl ***, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore11EventTarget27addEventListenerForBindingsERKNS6_10AtomStringEONS6_6RefPtrINS8_13EventListenerENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEONS_7variantIJNS8_23AddEventListenerOptionsEbEEEE3__0JZNS9_27addEventListenerForBindingsESC_SK_SO_E3__1EEEEEJRNS0_6__implIJSM_bEEEEEEDcOT_DpOT0____fmatrix[v31])(&v59, v49);
            LODWORD(v31) = v50;
            goto LABEL_34;
          }
        }
        std::__throw_bad_variant_access[abi:sn180100]();
      }
    }
    else
    {
      v36 = v54;
      v54 = 0;
      v62 = *(_WORD *)((char *)&v53 + 1);
      v63 = BYTE3(v53);
      v61 = (char)v53;
      v64 = v36;
      v65 = 0;
      v66 = 0;
    }
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3274D38[v55])(v49, &v53);
    goto LABEL_25;
  }
  v29 = 0;
LABEL_51:
  if (v17 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v17])(&v53, &v47);
  return v29;
}

uint64_t WebCore::JSEventListener::JSEventListener(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6)
{
  _QWORD *Allocator;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  Allocator = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = &unk_1E3392F60;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E3392EE0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a5)
    v10 = 2;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 40) = v10 | a4 | *(_BYTE *)(a1 + 40) & 0xF8;
  *(_QWORD *)(a1 + 48) = 0;
  if (a3)
  {
    if ((a3 & 8) != 0)
      v17 = (a3 - 112) | 1;
    else
      v17 = a3 & 0xFFFFFFFFFFFFC000;
    if ((v17 & 1) != 0)
      v18 = v17 + 47;
    else
      v18 = *(_QWORD *)v17 + 32;
    Allocator = *(_QWORD **)(v18 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v18 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
  }
  *(_QWORD *)(a1 + 56) = Allocator;
  ++*(_DWORD *)a6;
  *(_QWORD *)(a1 + 64) = a6;
  if (a2)
  {
    if ((a2 & 8) != 0)
      v11 = (a2 - 112) | 1;
    else
      v11 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v11 & 1) != 0)
      v12 = v11 + 47;
    else
      v12 = *(_QWORD *)v11 + 32;
    v13 = *(_QWORD **)(v12 + 16);
    if (!v13)
      v13 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v12 + 16) = *v13;
    *v13 = a2;
    v13[1] = 0;
    v13[2] = 0;
    v14 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    if (v14)
      *(_QWORD *)(v14 + 8) = 3;
    *(_BYTE *)(a1 + 40) |= 4u;
  }
  v15 = *(_QWORD *)(a6 + 16);
  if (v15 != WebCore::g_commonVMOrNull)
    WTF::WeakHashSet<WebCore::JSVMClientDataClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::JSVMClientDataClient>((uint64_t)v20, *(_QWORD *)(v15 + 41456) + 23544, a1 + 24);
  return a1;
}

uint64_t WebCore::Document::didAddEventListenersOfType(WebCore::EventNames **this, const WTF::AtomString *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::EventNames *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WebCore::EventNames *v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  int v27;
  unsigned int v28;
  char *v29;
  int v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  WebCore::EventNames *v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  int v53;
  _DWORD *v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  char *v59;
  _DWORD *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  WTF *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;

  result = (uint64_t)WebCore::Document::addListenerTypeIfNeeded(this, a2);
  v75 = 0;
  v7 = *((unsigned int *)this + 827);
  v8 = *((unsigned int *)this + 826);
  if (10 * v7 >= (unint64_t)(9 * v8) || *((_BYTE *)this + 3316) && v8 <= 2 * (int)v7)
  {
    if ((_DWORD)v8)
      v32 = 2 * v8;
    else
      v32 = 8;
    v74 = this[412];
    result = WTF::fastZeroedMalloc((WTF *)(16 * v32));
    this[412] = (WebCore::EventNames *)result;
    *((_DWORD *)this + 826) = v32;
    v34 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
    v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
    v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
    *((_DWORD *)this + 828) = (v36 >> 31) ^ v36;
    *((_BYTE *)this + 3316) = 0;
    if ((_DWORD)v8)
    {
      v37 = 0;
      v38 = v74;
      do
      {
        v39 = (WTF::StringImpl **)((char *)v38 + 16 * v37);
        v40 = *v39;
        if (*v39)
        {
          v41 = *((unsigned int *)this + 826);
          v42 = v41 - 1;
          v43 = *((_DWORD *)this + 828);
          v44 = (v43 ^ (*((_DWORD *)v40 + 4) >> 8)) & (v41 - 1);
          v45 = this[412];
          v46 = (WTF::StringImpl **)((char *)v45 + 16 * v44);
          v47 = *v46;
          if (*v46)
          {
            v50 = 0;
            do
            {
              v51 = (v44 + v41 - ((v43 ^ (*((_DWORD *)v47 + 4) >> 8)) & v42)) & v42;
              if (v50 > v51)
              {
                v52 = (char *)v38 + 16 * v37;
                v55 = *((_DWORD *)v52 + 2);
                v54 = v52 + 8;
                v53 = v55;
                v56 = *v39;
                *v39 = 0;
                v57 = *v46;
                *v46 = 0;
                v58 = *v39;
                *v39 = v57;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                  {
                    v66 = v41;
                    v67 = v53;
                    v69 = v51;
                    v71 = v43;
                    v64 = v56;
                    v65 = v54;
                    WTF::StringImpl::destroy(v58, v33);
                    v56 = v64;
                    v54 = v65;
                    v53 = v67;
                    v51 = v69;
                    v43 = v71;
                    v41 = v66;
                    v38 = v74;
                  }
                  else
                  {
                    *(_DWORD *)v58 -= 2;
                  }
                }
                v59 = (char *)v45 + 16 * v44;
                v61 = *((_DWORD *)v59 + 2);
                v60 = v59 + 8;
                *v54 = v61;
                v62 = *v46;
                *v46 = v56;
                if (v62)
                {
                  if (*(_DWORD *)v62 == 2)
                  {
                    v63 = v41;
                    v70 = v51;
                    v72 = v43;
                    v68 = v53;
                    WTF::StringImpl::destroy(v62, v33);
                    v53 = v68;
                    v51 = v70;
                    v43 = v72;
                    v41 = v63;
                    v38 = v74;
                  }
                  else
                  {
                    *(_DWORD *)v62 -= 2;
                  }
                }
                *v60 = v53;
                v45 = this[412];
                v50 = v51;
              }
              v44 = ((_DWORD)v44 + 1) & v42;
              ++v50;
              v46 = (WTF::StringImpl **)((char *)v45 + 16 * v44);
              v47 = *v46;
            }
            while (*v46);
            v40 = *v39;
          }
          *v39 = 0;
          v48 = *v46;
          *v46 = v40;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
            {
              WTF::StringImpl::destroy(v48, v33);
              v38 = v74;
            }
            else
            {
              *(_DWORD *)v48 -= 2;
            }
          }
          *((_DWORD *)v45 + 4 * v44 + 2) = *((_DWORD *)v38 + 4 * v37 + 2);
          v49 = *v39;
          *v39 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
            {
              WTF::StringImpl::destroy(v49, v33);
              v38 = v74;
            }
            else
            {
              *(_DWORD *)v49 -= 2;
            }
          }
        }
        else
        {
          *v39 = 0;
        }
        ++v37;
      }
      while (v37 != v8);
    }
    else
    {
      v38 = v74;
      if (!v74)
      {
        LODWORD(v8) = 8;
        goto LABEL_3;
      }
    }
    result = WTF::fastFree(v38, v33);
    LODWORD(v8) = *((_DWORD *)this + 826);
  }
LABEL_3:
  v9 = v8 - 1;
  v10 = *((_DWORD *)this + 828);
  v11 = *(WTF::StringImpl **)a2;
  v12 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v13 = (v10 ^ (v12 >> 8)) & ((_DWORD)v8 - 1);
  v14 = this[412];
  v15 = (WTF::StringImpl **)((char *)v14 + 16 * v13);
  v16 = *v15;
  if (*v15)
  {
    v17 = 0;
    v18 = v12 >> 8;
    do
    {
      v19 = *((_DWORD *)v16 + 4);
      v20 = (v13 + v8 - ((v10 ^ (v19 >> 8)) & v9)) & v9;
      if (v17 > v20)
      {
        v21 = (uint64_t)v14 + 16 * v13;
        if (v17 >= 0x80)
          *((_BYTE *)this + 3316) = 1;
        v22 = *(_DWORD *)(v21 + 8);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        v76 = v16;
        v73 = v22;
        v77 = v22;
        WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,unsigned int,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<unsigned int>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,unsigned int>,WTF::AtomString const&,int>(v21, *(WTF::StringImpl **)a2, &v75);
        v23 = ((_DWORD)v13 + 1) & v9;
        v24 = this[412];
        v25 = (WTF::StringImpl **)((char *)v24 + 16 * v23);
        v26 = *v25;
        if (*v25)
        {
          v27 = v73;
          do
          {
            ++v20;
            v28 = (v23 + v8 - ((v10 ^ (*((_DWORD *)v26 + 4) >> 8)) & v9)) & v9;
            if (v20 > v28)
            {
              v76 = v26;
              v29 = (char *)v24 + 16 * v23;
              v77 = *((_DWORD *)v29 + 2);
              v30 = v77;
              *v25 = v16;
              *((_DWORD *)v29 + 2) = v27;
              v24 = this[412];
              v27 = v30;
              v16 = v26;
              v20 = v28;
            }
            v23 = ((_DWORD)v23 + 1) & v9;
            v25 = (WTF::StringImpl **)((char *)v24 + 16 * v23);
            v26 = *v25;
          }
          while (*v25);
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,unsigned int>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,unsigned int>,WTF::KeyValuePair<WTF::AtomString,unsigned int>>((uint64_t)v25, (WTF::StringImpl *)&v76);
        result = (uint64_t)v76;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            result = WTF::StringImpl::destroy(v76, v31);
          else
            *(_DWORD *)v76 -= 2;
        }
        goto LABEL_14;
      }
      if (v16 == v11 && v19 >> 8 == v18)
        goto LABEL_15;
      v13 = ((_DWORD)v13 + 1) & v9;
      ++v17;
      v16 = (WTF::StringImpl *)*((_QWORD *)v14 + 2 * v13);
    }
    while (v16);
    v15 = (WTF::StringImpl **)((char *)v14 + 16 * v13);
    if (v17 >= 0x80)
      *((_BYTE *)this + 3316) = 1;
    if (!v11)
      goto LABEL_13;
  }
  *(_DWORD *)v11 += 2;
LABEL_13:
  *v15 = v11;
  *((_DWORD *)v14 + 4 * v13 + 2) = 0;
LABEL_14:
  ++*((_DWORD *)this + 827);
LABEL_15:
  *((_DWORD *)v14 + 4 * v13 + 2) += a3;
  return result;
}

WebCore::EventNames **WebCore::Document::addListenerTypeIfNeeded(WebCore::EventNames **this, const WTF::AtomString *a2)
{
  WebCore::EventNames **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  __int16 v18;

  v3 = this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = (uint64_t)this;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = *(_QWORD *)(v6 + 2552);
  if (v7)
  {
    v8 = *(_DWORD *)(v6 + 2560);
    v9 = v8 - 1;
    v10 = *(_DWORD *)(v6 + 2568);
    v11 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    v12 = (v10 ^ (v11 >> 8)) & (v8 - 1);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13)
    {
      v14 = v11 >> 8;
      v15 = -1;
      do
      {
        v16 = *(_DWORD *)(v13 + 16);
        this = (WebCore::EventNames **)(((_DWORD)v12 + v8 - ((v10 ^ (v16 >> 8)) & v9)) & v9);
        if (++v15 > this)
          break;
        if (v13 == *(_QWORD *)a2 && v16 >> 8 == v14)
        {
          v17 = *(_DWORD *)(v7 + 16 * v12 + 8);
          if ((unsigned __int16)v17 <= 0x68u)
          {
            if ((unsigned __int16)v17 != 104)
            {
              v18 = 1;
              switch((__int16)v17)
              {
                case 2:
                  v18 = 32;
                  goto LABEL_28;
                case 4:
                  v18 = 2;
                  goto LABEL_28;
                case 5:
                  v18 = 16;
                  goto LABEL_28;
                case 6:
                  v18 = 4;
                  goto LABEL_28;
                case 7:
                  v18 = 8;
                  goto LABEL_28;
                case 8:
                  goto LABEL_28;
                default:
                  goto LABEL_24;
              }
            }
            v18 = 4096;
          }
          else if ((unsigned __int16)v17 <= 0xD9u)
          {
            if ((unsigned __int16)v17 == 105)
            {
              v18 = 0x2000;
            }
            else if ((unsigned __int16)v17 == 175)
            {
              v18 = 64;
            }
            else
            {
LABEL_24:
              if ((v17 & 0x20000) != 0)
              {
                v18 = 0x4000;
              }
              else
              {
                if ((v17 & 0x10000) == 0)
                  return this;
                v18 = 0x8000;
              }
            }
          }
          else
          {
            if ((unsigned __int16)v17 != 218)
            {
              switch((__int16)v17)
              {
                case 303:
                  v18 = 512;
                  goto LABEL_28;
                case 304:
                  v18 = 1024;
                  goto LABEL_28;
                case 305:
                  v18 = 2048;
                  goto LABEL_28;
                case 306:
                  v18 = 256;
                  goto LABEL_28;
                default:
                  goto LABEL_24;
              }
            }
            v18 = 128;
          }
LABEL_28:
          *((_WORD *)v3 + 1646) |= v18;
          return this;
        }
        v12 = ((_DWORD)v12 + 1) & v9;
        v13 = *(_QWORD *)(v7 + 16 * v12);
      }
      while (v13);
    }
  }
  return this;
}

BOOL WebCore::JSEventListener::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t **v3;

  if (*(_BYTE *)(a2 + 20))
    return 0;
  v2 = *(uint64_t ***)(a1 + 48);
  if (v2)
  {
    if (((_BYTE)v2[1] & 3) != 0)
      v2 = 0;
    else
      v2 = (uint64_t **)*v2;
  }
  v3 = *(uint64_t ***)(a2 + 48);
  if (v3)
  {
    if (((_BYTE)v3[1] & 3) != 0)
      v3 = 0;
    else
      v3 = (uint64_t **)*v3;
  }
  return v2 == v3 && ((*(unsigned __int8 *)(a2 + 40) ^ *(unsigned __int8 *)(a1 + 40)) & 1) == 0;
}

uint64_t WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  WTF *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v4 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v5 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v6 = v5;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v6;
      goto LABEL_6;
    }
    v9 = *(unsigned int *)(v4 - 4);
    if (!(_DWORD)v9)
      goto LABEL_10;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = (uint64_t *)(v4 + 8 * v11);
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v22 = v11;
        v19 = v10;
        v23 = v4;
        v20 = a2;
        v24 = a1;
        if (!*(_QWORD *)(*v12 + 8))
        {
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v12, a2);
          v10 = v19 + 1;
          v4 = v23;
          a1 = v24;
          a2 = v20;
        }
        v11 = v22;
      }
    }
    while ((unint64_t)v11--);
    v4 = *(_QWORD *)a1;
    if (v10)
    {
      *(_DWORD *)(v4 - 16) += v10;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v15 = *(_DWORD *)(v14 - 12);
      else
        v15 = 0;
      *(_DWORD *)(v14 - 12) = v15 - v10;
      v4 = *(_QWORD *)a1;
    }
    if (!v4)
      goto LABEL_3;
    v16 = *(_DWORD *)(v4 - 4);
    if (v16 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v16)
    {
LABEL_10:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v25 = a1;
      v21 = a2;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v21;
      a1 = v25;
      v5 = 0;
      v18 = *(_QWORD *)v25;
      *(_DWORD *)(v25 + 8) = 0;
      if (!v18)
        goto LABEL_4;
      v4 = v18;
    }
    v5 = *(_DWORD *)(v4 - 12);
    v6 = 0x7FFFFFFF;
    if (v5 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v7 = (WTF *)(a2[2] & 0xFFFFFFFFFFFFLL);
  if (v7 && *((_QWORD *)v7 + 1))
    return WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a1, v7);
  else
    return 0;
}

_QWORD *WebCore::LocalDOMWindow::eventListenersDidChange(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = this;
  if (this[32] || this[31])
  {
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
      v3 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v4 = *(_QWORD *)(v3 + 40);
    if (!v4)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v4 = *(_QWORD *)(v3 + 40);
    }
    v5 = v1[2];
    if ((v5 & 0x1000000000000) != 0 && (v6 = v5 & 0xFFFFFFFFFFFFLL, v7 = *(unsigned int *)(v6 + 28), (_DWORD)v7))
    {
      v8 = *(_QWORD **)(v6 + 16);
      v9 = *(_QWORD *)(v4 + 2000);
      v10 = 32 * v7;
      while (*v8 != v9)
      {
        v8 += 4;
        v10 -= 32;
        if (!v10)
          goto LABEL_8;
      }
      {
        WebCore::windowsInterestedInStorageEvents(void)::set = 0;
        *(_QWORD *)algn_1EE2F7E78 = 0;
      }
      return (_QWORD *)WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LocalDOMWindow>((uint64_t)&WebCore::windowsInterestedInStorageEvents(void)::set, v1, (uint64_t)v11);
    }
    else
    {
LABEL_8:
      {
        WebCore::windowsInterestedInStorageEvents(void)::set = 0;
        *(_QWORD *)algn_1EE2F7E78 = 0;
      }
      return (_QWORD *)WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>((uint64_t)&WebCore::windowsInterestedInStorageEvents(void)::set, v1);
    }
  }
  return this;
}

uint64_t WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 32 * a1[3] > a3)
  {
    WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v3 - (_QWORD)v5;
  }
  else
  {
    v6 = a1[2];
    v7 = v6 + (v6 >> 2);
    if (v7 >= 4)
      v8 = v7 + 1;
    else
      v8 = 4;
    if (v8 <= a2)
      v9 = a2;
    else
      v9 = v8;
    if (v9 > v6)
    {
      if (v9 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19442A2A8);
      }
      v10 = (WTF::StringImpl *)((char *)v5 + 32 * a1[3]);
      v11 = WTF::fastMalloc((WTF *)(32 * v9));
      a1[2] = v9;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::move(v5, v10, v11);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          a1[2] = 0;
        }
        WTF::fastFree(v5, v12);
      }
    }
  }
  return v3;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char *v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  WTF *v15;
  int v17;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = a3 + 24;
      *(_QWORD *)(a3 + 16) = 1;
      v7 = (char *)*((_QWORD *)v5 + 1);
      v8 = (WTF::StringImpl *)((char *)v5 + 24);
      if (v7 == (char *)v5 + 24)
      {
        memcpy((void *)(a3 + 24), v7, 8 * *((unsigned int *)v5 + 5));
      }
      else
      {
        *((_QWORD *)v5 + 1) = v8;
        *(_QWORD *)(a3 + 8) = v7;
        v17 = *((_DWORD *)v5 + 4);
        *((_DWORD *)v5 + 4) = 1;
        *(_DWORD *)(a3 + 16) = v17;
      }
      v9 = *((_DWORD *)v5 + 5);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v9;
      v10 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v10)
      {
        v11 = (WTF **)*((_QWORD *)v5 + 1);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              v14 = (_DWORD *)*((_QWORD *)v13 + 1);
              *((_QWORD *)v13 + 1) = 0;
              if (v14)
              {
                if (v14[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
                else
                  --v14[4];
              }
              WTF::fastFree(v13, v7);
            }
            else
            {
              --*(_DWORD *)v13;
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v15 = (WTF *)*((_QWORD *)v5 + 1);
      if (v8 != v15 && v15 != 0)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        WTF::fastFree(v15, v7);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 32;
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::XMLHttpRequest::updateHasRelevantEventListener(WebCore::XMLHttpRequest *this)
{
  WebCore *v2;
  uint64_t v3;
  WebCore *v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  WebCore *v8;
  uint64_t v9;
  WebCore *v10;
  uint64_t v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v2 = (WebCore *)WebCore::eventNames(this);
  v3 = *((_QWORD *)this + 9);
  if ((v3 & 0x1000000000000) != 0)
  {
    v17 = v3 & 0xFFFFFFFFFFFFLL;
    v18 = *(unsigned int *)(v17 + 28);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD **)(v17 + 16);
      v20 = 32 * v18;
      while (*v19 != *((_QWORD *)v2 + 8))
      {
        v19 += 4;
        v20 -= 32;
        if (!v20)
          goto LABEL_2;
      }
      goto LABEL_46;
    }
  }
LABEL_2:
  v4 = (WebCore *)WebCore::eventNames(v2);
  v5 = *((_QWORD *)this + 9);
  if ((v5 & 0x1000000000000) != 0)
  {
    v21 = v5 & 0xFFFFFFFFFFFFLL;
    v22 = *(unsigned int *)(v21 + 28);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD **)(v21 + 16);
      v24 = 32 * v22;
      while (*v23 != *((_QWORD *)v4 + 98))
      {
        v23 += 4;
        v24 -= 32;
        if (!v24)
          goto LABEL_3;
      }
      goto LABEL_46;
    }
  }
LABEL_3:
  v6 = (WebCore *)WebCore::eventNames(v4);
  v7 = *((_QWORD *)this + 9);
  if ((v7 & 0x1000000000000) != 0)
  {
    v25 = v7 & 0xFFFFFFFFFFFFLL;
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD **)(v25 + 16);
      v28 = 32 * v26;
      while (*v27 != *((_QWORD *)v6 + 138))
      {
        v27 += 4;
        v28 -= 32;
        if (!v28)
          goto LABEL_4;
      }
      goto LABEL_46;
    }
  }
LABEL_4:
  v8 = (WebCore *)WebCore::eventNames(v6);
  v9 = *((_QWORD *)this + 9);
  if ((v9 & 0x1000000000000) != 0)
  {
    v29 = v9 & 0xFFFFFFFFFFFFLL;
    v30 = *(unsigned int *)(v29 + 28);
    if ((_DWORD)v30)
    {
      v31 = *(_QWORD **)(v29 + 16);
      v32 = 32 * v30;
      while (*v31 != *((_QWORD *)v8 + 141))
      {
        v31 += 4;
        v32 -= 32;
        if (!v32)
          goto LABEL_5;
      }
      goto LABEL_46;
    }
  }
LABEL_5:
  v10 = (WebCore *)WebCore::eventNames(v8);
  v11 = *((_QWORD *)this + 9);
  if ((v11 & 0x1000000000000) != 0)
  {
    v33 = v11 & 0xFFFFFFFFFFFFLL;
    v34 = *(unsigned int *)(v33 + 28);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD **)(v33 + 16);
      v36 = 32 * v34;
      while (*v35 != *((_QWORD *)v10 + 198))
      {
        v35 += 4;
        v36 -= 32;
        if (!v36)
          goto LABEL_6;
      }
      goto LABEL_46;
    }
  }
LABEL_6:
  v12 = (WebCore *)WebCore::eventNames(v10);
  v13 = *((_QWORD *)this + 9);
  if ((v13 & 0x1000000000000) != 0)
  {
    v37 = v13 & 0xFFFFFFFFFFFFLL;
    v38 = *(unsigned int *)(v37 + 28);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD **)(v37 + 16);
      v40 = 32 * v38;
      while (*v39 != *((_QWORD *)v12 + 204))
      {
        v39 += 4;
        v40 -= 32;
        if (!v40)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
  }
LABEL_7:
  v14 = WebCore::eventNames(v12);
  v15 = *((_QWORD *)this + 9);
  if ((v15 & 0x1000000000000) != 0)
  {
    v41 = v15 & 0xFFFFFFFFFFFFLL;
    v42 = *(unsigned int *)(v41 + 28);
    if ((_DWORD)v42)
    {
      v43 = *(_QWORD **)(v41 + 16);
      v44 = 32 * v42;
      while (*v43 != *(_QWORD *)(v14 + 2040))
      {
        v43 += 4;
        v44 -= 32;
        if (!v44)
          goto LABEL_8;
      }
LABEL_46:
      result = 1;
      goto LABEL_10;
    }
  }
LABEL_8:
  result = *((_QWORD *)this + 11);
  if (result)
    result = WebCore::XMLHttpRequestUpload::hasRelevantEventListener((WebCore::EventNames **)result);
LABEL_10:
  *((_BYTE *)this + 712) = result;
  return result;
}

uint64_t WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::toCAMediaTimingFunction(WebCore *this, const WebCore::TimingFunction *a2)
{
  char v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v14;

  v2 = (char)a2;
  if ((*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 24))(this) != 1)
    return objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3058]);
  if ((v2 & 1) != 0)
  {
    v8 = 1.0 - *((double *)this + 4);
    v9 = 1.0 - *((double *)this + 5);
    v10 = 1.0 - *((double *)this + 2);
    v11 = 1.0 - *((double *)this + 3);
    v12 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)v12 = &off_1E3347E18;
    *(double *)(v12 + 16) = v8;
    *(double *)(v12 + 24) = v9;
    *(double *)(v12 + 32) = v10;
    *(double *)(v12 + 40) = v11;
    *(_BYTE *)(v12 + 48) = 4;
  }
  else
  {
    v12 = 0;
    v8 = *((double *)this + 2);
    v9 = *((double *)this + 3);
    v10 = *((double *)this + 4);
    v11 = *((double *)this + 5);
  }
  *(float *)&v4 = v8;
  *(float *)&v5 = v9;
  *(float *)&v6 = v10;
  *(float *)&v7 = v11;
  v14 = objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithControlPoints::::", v4, v5, v6, v7);
  if (v12)
  {
    if (*(_DWORD *)(v12 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      --*(_DWORD *)(v12 + 8);
  }
  return v14;
}

void sub_19442A860(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::RenderLayerBacking::connectClippingStackLayers(_DWORD *this, WebCore::LayerAncestorClippingStack *a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  WTF *v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;

  v2 = this;
  v3 = this[3];
  if ((_DWORD)v3 == 1)
  {
    v4 = 0;
    v3 = 1;
  }
  else
  {
    v19 = 0;
    do
    {
      if (v19 >= v3)
      {
        __break(0xC471u);
        JUMPOUT(0x19442ACD0);
      }
      v20 = *(_QWORD *)v2;
      v21 = *(_QWORD *)v2 + 96 * v19;
      v22 = *(_DWORD **)(v21 + 88);
      if (!v22)
        goto LABEL_35;
      v23 = *(_QWORD *)(v21 + 80);
      ++v22[2];
      v24 = (WTF *)WTF::fastMalloc((WTF *)8);
      v40 = v24;
      ++v22[2];
      *(_QWORD *)v24 = v22;
      v41 = 0x100000001;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v23 + 56))(v23, &v40);
      if (HIDWORD(v41))
      {
        v37 = v40;
        v38 = 8 * HIDWORD(v41);
        do
        {
          v39 = *(_DWORD **)v37;
          *(_QWORD *)v37 = 0;
          if (v39)
          {
            if (v39[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
            else
              --v39[2];
          }
          v37 = (WTF *)((char *)v37 + 8);
          v38 -= 8;
        }
        while (v38);
      }
      v26 = v40;
      if (v40)
      {
        v40 = 0;
        LODWORD(v41) = 0;
        WTF::fastFree(v26, v25);
      }
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
      else
        --v22[2];
      v27 = *(_QWORD *)(v20 + 96 * v19 + 88);
      if (!v27)
LABEL_35:
        v27 = *(_QWORD *)(v20 + 96 * v19 + 80);
      if (++v19 >= v2[3])
        goto LABEL_75;
      v28 = *(_DWORD **)(*(_QWORD *)v2 + 96 * v19 + 80);
      ++v28[2];
      v40 = 0;
      v41 = 0;
      v29 = (WTF *)WTF::fastMalloc((WTF *)8);
      LODWORD(v41) = 1;
      v40 = v29;
      v30 = HIDWORD(v41);
      ++v28[2];
      *((_QWORD *)v29 + v30) = v28;
      HIDWORD(v41) = v30 + 1;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v27 + 56))(v27, &v40);
      if (HIDWORD(v41))
      {
        v34 = v40;
        v35 = 8 * HIDWORD(v41);
        do
        {
          v36 = *(_DWORD **)v34;
          *(_QWORD *)v34 = 0;
          if (v36)
          {
            if (v36[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
            else
              --v36[2];
          }
          v34 = (WTF *)((char *)v34 + 8);
          v35 -= 8;
        }
        while (v35);
      }
      this = v40;
      if (v40)
      {
        v40 = 0;
        LODWORD(v41) = 0;
        this = (_DWORD *)WTF::fastFree((WTF *)this, a2);
      }
      if (v28)
      {
        if (v28[2] == 1)
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
        else
          --v28[2];
      }
      v3 = v2[3];
      v4 = v3 - 1;
    }
    while (v3 - 1 > v19);
    if (!v2[3])
    {
LABEL_75:
      __break(0xC471u);
      JUMPOUT(0x19442AB6CLL);
    }
  }
  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)v2 + 96 * v4;
  v7 = *(_DWORD **)(v6 + 88);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 80);
    ++v7[2];
    v9 = (WTF *)WTF::fastMalloc((WTF *)8);
    v40 = v9;
    ++v7[2];
    *(_QWORD *)v9 = v7;
    v41 = 0x100000001;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v8 + 56))(v8, &v40);
    if (HIDWORD(v41))
    {
      v31 = v40;
      v32 = 8 * HIDWORD(v41);
      do
      {
        v33 = *(_DWORD **)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          if (v33[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
          else
            --v33[2];
        }
        v31 = (WTF *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
    this = v40;
    if (v40)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      this = (_DWORD *)WTF::fastFree((WTF *)this, a2);
    }
    if (v7[2] == 1)
      this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
    v3 = v2[3];
    if (!(_DWORD)v3)
    {
      __break(0xC471u);
      JUMPOUT(0x19442ACC8);
    }
    v5 = *(_QWORD *)v2;
  }
  v10 = v3 - 1;
  v11 = *(_QWORD *)(v5 + 96 * v10 + 88);
  if (!v11)
    v11 = *(_QWORD *)(v5 + 96 * v10 + 80);
  if (*(_DWORD *)(v11 + 196))
  {
    this = (_DWORD *)(*(uint64_t (**)(uint64_t, WebCore::LayerAncestorClippingStack *))(*(_QWORD *)v11 + 912))(v11, a2);
    v13 = *(WTF **)(v11 + 184);
    v14 = *(unsigned int *)(v11 + 196);
    if ((_DWORD)v14)
    {
      v15 = 8 * v14;
      v16 = 8 * v14;
      v17 = *(uint64_t **)(v11 + 184);
      do
      {
        v18 = *v17++;
        *(_QWORD *)(v18 + 200) = 0;
        v16 -= 8;
      }
      while (v16);
      if (!*(_DWORD *)(v11 + 192))
        return this;
      do
      {
        this = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (this)
        {
          if (this[2] == 1)
            this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
          else
            --this[2];
        }
        v13 = (WTF *)((char *)v13 + 8);
        v15 -= 8;
      }
      while (v15);
      *(_DWORD *)(v11 + 196) = 0;
      v13 = *(WTF **)(v11 + 184);
    }
    else if (!*(_DWORD *)(v11 + 192))
    {
      return this;
    }
    if (v13)
    {
      *(_QWORD *)(v11 + 184) = 0;
      *(_DWORD *)(v11 + 192) = 0;
      return (_DWORD *)WTF::fastFree(v13, v12);
    }
  }
  return this;
}

BOOL WebCore::systemHasAC(WebCore *this)
{
  char v1;
  CFTypeRef v2;
  const void *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  BOOL v8;
  const void *ValueAtIndex;
  const __CFDictionary *v10;
  const void *Value;

  {
    v1 = BYTE2(WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance);
    if (WORD1(WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance) >= 0x100u)
      return v1 != 0;
  }
  else
  {
    WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance = 0;
    *(_QWORD *)algn_1ECE889C8 = 0;
  }
  if (HIBYTE(WebCore::hasAC))
  {
    v1 = WebCore::hasAC;
  }
  else
  {
    v2 = IOPSCopyPowerSourcesInfo();
    if (v2)
    {
      v3 = v2;
      v4 = IOPSCopyPowerSourcesList(v2);
      v5 = v4;
      if (v4)
      {
        Count = CFArrayGetCount(v4);
        if (Count < 1)
        {
          v8 = 0;
        }
        else
        {
          v7 = 0;
          v8 = 1;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v5, v7);
            v10 = IOPSGetPowerSourceDescription(v3, ValueAtIndex);
            if (v10)
            {
              Value = CFDictionaryGetValue(v10, CFSTR("Power Source State"));
              if (Value)
              {
                if (CFEqual(Value, CFSTR("AC Power")))
                  break;
              }
            }
            v8 = ++v7 < Count;
          }
          while (Count != v7);
        }
        CFRelease(v5);
      }
      else
      {
        v8 = 0;
      }
      CFRelease(v3);
    }
    else
    {
      v8 = 0;
    }
    WebCore::hasAC = v8 | 0x100;
    v1 = v8;
  }
  return v1 != 0;
}

void sub_19442AE28(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::RenderTable::outerBorderAfter(WebCore::RenderTable *this, void *a2)
{
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  int v15;
  double v16;
  WTF *v18;
  void *v19;

  if ((*((_BYTE *)this + 124) & 4) == 0)
    return 0;
  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  v3 = *((_QWORD *)this + 35);
  if (v3 && (v5 = *(_QWORD *)(v3 + 8)) != 0)
  {
LABEL_30:
    v6 = *(unsigned int *)(v5 + 252);
    if ((v6 & 0x80000000) != 0)
      return 0;
  }
  else
  {
    for (i = *(unsigned int *)((char *)this + 71) | ((unint64_t)*((unsigned __int8 *)this + 75) << 32);
          i;
          i = *(unsigned int *)(v5 + 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32))
    {
      v5 = *(_QWORD *)(i + 8);
      if (!v5)
        break;
      if (*(_BYTE *)(v5 + 46) == 40)
        goto LABEL_30;
    }
    v6 = 0;
  }
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
      v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 152;
      break;
    case 2:
    case 4:
      v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 128;
      break;
    case 3:
    case 5:
      v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 104;
      break;
    default:
      v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 176;
      break;
  }
  if ((*(_BYTE *)(v7 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v7 + 20) & 0xF) == 1)
      return 0;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    v9 = 1.0;
    if (v8)
    {
      v10 = *(_QWORD *)(v8 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 24);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = (*(_DWORD *)v12)++;
            v9 = *(float *)(v12 + 364);
            if (v13)
            {
              *(_DWORD *)v12 = v13;
            }
            else
            {
              WebCore::Page::~Page(v12);
              WTF::fastFree(v18, v19);
            }
          }
        }
      }
    }
    v14 = (float)((float)(*(float *)(v7 + 16) + (float)(1.0 / v9)) * 0.5) * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    if ((int)v6 > v15)
      v15 = v6;
    v16 = (float)(floorf((float)(v9 * (float)v15) * 0.015625) / v9) * 64.0;
    if (v16 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v16 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v16;
    }
  }
  return v6;
}

uint64_t WebCore::IOSApplication::isStocks(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81762 == 1)
    return byte_1ECE81761 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81761 = IsEqualTo;
  byte_1ECE81762 = 1;
  return result;
}

void sub_19442B12C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isNews(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81760 == 1)
    return byte_1ECE8175F != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8175F = IsEqualTo;
  byte_1ECE81760 = 1;
  return result;
}

void sub_19442B1FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::JSDOMGlobalObject::visitChildren(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  JSC::JSGlobalObject::visitChildren();
  v4 = (unsigned __int8 *)(a1 + 3329);
  if (__ldaxr((unsigned __int8 *)(a1 + 3329)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 3329);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 3296);
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
LABEL_51:
    v8 = (_QWORD *)(v6 + 16 * v7);
    goto LABEL_11;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (!*(_DWORD *)(v6 - 12))
  {
    v9 = (_QWORD *)(v6 + 16 * v7);
    goto LABEL_51;
  }
  v9 = *(_QWORD **)(a1 + 3296);
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = *(_QWORD **)(a1 + 3296);
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_11:
  if (v6)
    v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v11 = 0;
  while (v9 != v11)
  {
    v12 = v9[1];
    if (v12)
    {
      if ((v12 & 8) != 0)
      {
        if ((*(_BYTE *)(v12 - 79) & 1) == 0)
          goto LABEL_27;
      }
      else
      {
        if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000));
        if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
        {
LABEL_27:
          JSC::SlotVisitor::appendSlow();
          goto LABEL_15;
        }
      }
      if (*(_QWORD *)(a2 + 168))
        goto LABEL_27;
    }
LABEL_15:
    v13 = v9 + 2;
    v9 = v8;
    if (v13 != v8)
    {
      v9 = v13;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 3304);
  if (!v14)
  {
    v17 = 0;
    v15 = 0;
LABEL_46:
    v16 = v14 + 8 * v15;
    goto LABEL_35;
  }
  v15 = *(unsigned int *)(v14 - 4);
  v16 = v14 + 8 * v15;
  if (!*(_DWORD *)(v14 - 12))
  {
    v17 = v14 + 8 * v15;
    goto LABEL_46;
  }
  v17 = *(_QWORD *)(a1 + 3304);
  if ((_DWORD)v15)
  {
    v18 = 8 * v15;
    v17 = *(_QWORD *)(a1 + 3304);
    while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
    {
      v17 += 8;
      v18 -= 8;
      if (!v18)
      {
        v17 = v16;
        break;
      }
    }
  }
LABEL_35:
  if (v14)
    v19 = v14 + 8 * *(unsigned int *)(v14 - 4);
  else
    v19 = 0;
  while (v17 != v19)
  {
    v25 = *(unint64_t **)(*(_QWORD *)v17 + 24);
    if (!v25)
      goto LABEL_70;
    if ((v25[1] & 3) != 0)
      goto LABEL_70;
    v26 = *v25;
    if (!*v25)
      goto LABEL_70;
    if ((v26 & 8) != 0)
    {
      if ((*(_BYTE *)(v26 - 79) & 1) == 0)
        goto LABEL_82;
    }
    else
    {
      if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v30 = v16;
        v31 = v17;
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000));
        v17 = v31;
        v16 = v30;
      }
      if (((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFC000) + 8 * ((v26 >> 10) & 0xF) + 0x28) >> (v26 >> 4)) & 1) == 0)
      {
LABEL_82:
        v28 = v16;
        v29 = v17;
        JSC::SlotVisitor::appendSlow();
        v17 = v29;
        v16 = v28;
        goto LABEL_70;
      }
    }
    if (*(_QWORD *)(a2 + 168))
      goto LABEL_82;
LABEL_70:
    v27 = v17 + 8;
    v17 = v16;
    if (v27 != v16)
    {
      v17 = v27;
      while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  v20 = __ldxr(v4);
  if (v20 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_43;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 3329));
LABEL_43:
  v21 = 0;
  v22 = *(_QWORD *)(a1 + 3312);
  do
  {
    v23 = *(_QWORD *)(v22 + 8 * v21);
    if (!v23)
      goto LABEL_56;
    if ((v23 & 8) != 0)
    {
      if ((*(_BYTE *)(v23 - 79) & 1) != 0)
        goto LABEL_62;
    }
    else
    {
      if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000));
      if (((*(_QWORD *)((v23 & 0xFFFFFFFFFFFFC000) + 8 * ((v23 >> 10) & 0xF) + 0x28) >> (v23 >> 4)) & 1) != 0)
      {
LABEL_62:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_56;
      }
    }
    JSC::SlotVisitor::appendSlow();
LABEL_56:
    ++v21;
  }
  while (v21 != 932);
  return WebCore::JSBuiltinInternalFunctions::visit<JSC::SlotVisitor>(*(_QWORD *)(a1 + 3344), a2);
}

uint64_t WebCore::ScrollView::positionScrollbarLayers(WebCore::ScrollView *this)
{
  char *v2;
  float *v3;
  WebCore::Scrollbar *v4;
  float *v5;
  WebCore::Scrollbar *v6;
  float *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _BOOL8 v14;
  float v16;
  float v17;

  v2 = (char *)this + 64;
  v3 = (float *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 672))((char *)this + 64);
  WebCore::positionScrollbarLayer(v3, *((WebCore::GraphicsLayer **)this + 19), v4);
  v5 = (float *)(*(uint64_t (**)(char *))(*(_QWORD *)v2 + 680))(v2);
  WebCore::positionScrollbarLayer(v5, *((WebCore::GraphicsLayer **)this + 20), v6);
  v7 = (float *)(*(uint64_t (**)(char *))(*(_QWORD *)v2 + 824))(v2);
  result = WebCore::ScrollView::scrollCornerRect(this);
  if (v7)
  {
    v10 = result;
    v11 = v9;
    v12 = HIDWORD(v9);
    v14 = (int)v9 > 0 && SHIDWORD(v9) > 0;
    (*(void (**)(float *, _BOOL8))(*(_QWORD *)v7 + 216))(v7, v14);
    v16 = (float)(int)v10;
    v17 = (float)SHIDWORD(v10);
    (*(void (**)(float *, float *))(*(_QWORD *)v7 + 128))(v7, &v16);
    if (v7[22] != (float)v11 || v7[23] != (float)(int)v12)
      (*(void (**)(float *))(*(_QWORD *)v7 + 320))(v7);
    v16 = (float)v11;
    v17 = (float)(int)v12;
    return (*(uint64_t (**)(float *, float *))(*(_QWORD *)v7 + 160))(v7, &v16);
  }
  return result;
}

float *WebCore::positionScrollbarLayer(float *this, WebCore::GraphicsLayer *a2, WebCore::Scrollbar *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (this && a2)
  {
    v15 = v6;
    v16 = v5;
    v17 = v3;
    v18 = v4;
    v7 = this;
    v8 = WebCore::Widget::frameRect(a2);
    v10 = v9;
    *(float *)&v12 = (float)(int)v8;
    *((float *)&v12 + 1) = (float)SHIDWORD(v8);
    this = (float *)(*(uint64_t (**)(float *, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v12);
    if (v7[22] != (float)(int)v10 || v7[23] != (float)SHIDWORD(v10))
    {
      *(float *)&v12 = (float)(int)v10;
      *((float *)&v12 + 1) = (float)SHIDWORD(v10);
      (*(void (**)(float *, uint64_t *))(*(_QWORD *)v7 + 160))(v7, &v12);
      if ((*(unsigned int (**)(float *))(*(_QWORD *)v7 + 576))(v7))
      {
        v12 = 0;
        v13 = (float)(int)v10;
        v14 = (float)SHIDWORD(v10);
        return (float *)(*(uint64_t (**)(float *, uint64_t *))(*(_QWORD *)v7 + 368))(v7, &v12);
      }
      else
      {
        (*(void (**)(float *, uint64_t))(*(_QWORD *)v7 + 216))(v7, 1);
        return (float *)(*(uint64_t (**)(float *))(*(_QWORD *)v7 + 320))(v7);
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::layerForHorizontalScrollbar(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return *((_QWORD *)v3 + 33);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::layerForVerticalScrollbar(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return *((_QWORD *)v3 + 34);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::layerForScrollCorner(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return *((_QWORD *)v3 + 35);
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::layoutBlock(uint64_t a1, BOOL a2)
{
  uint64_t result;
  WTF *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  __int128 *v22;
  uint64_t i;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL *v28;
  uint64_t v29;
  WTF *v30;
  __int128 v31;
  WTF *v32;
  _BOOL4 v33;
  uint64_t v34;
  int v35;
  float v36;
  uint64_t v37;
  float v38;
  double v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v42;
  float v43;
  float v44;
  double v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  WebCore::RenderLayerScrollableArea *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *updated;
  char v71;
  uint64_t v72;
  float v73;
  double v74;
  int v75;
  unsigned int v76;
  unsigned __int8 *v77;
  int v78;
  float v79;
  float v80;
  double v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  int v95;
  _DWORD *v96;
  int v97;
  uint64_t v98;
  float v99;
  double v100;
  unsigned int v101;
  unsigned __int8 *v102;
  int v103;
  float v104;
  float v105;
  double v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  uint64_t v118;
  int *v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  void *v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  float v133;
  double v134;
  unsigned int v135;
  unsigned __int8 *v136;
  int v137;
  float v138;
  float v139;
  double v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  void *v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  WebCore::RenderBox *v163;
  float v164;
  WebCore::RenderBox *v165;
  int k;
  int v167;
  double v168;
  _BOOL4 v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  int v174;
  uint64_t v175;
  _DWORD *v176;
  unsigned int v177;
  _QWORD *v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  uint64_t v183;
  _DWORD *v184;
  uint64_t v185;
  _DWORD *v186;
  unsigned int v187;
  _QWORD *v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  _BYTE *v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float v206;
  float v207;
  float v208;
  float v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  BOOL v214;
  __int16 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v236;
  __int128 *v237;
  float v238;
  int v239;
  WTF *v240;
  uint64_t j;
  void *v242;
  uint64_t v244;
  uint64_t v245;
  int v246;
  WTF *v247;
  int v248;
  int v249;
  WTF *v250;
  int v251;
  WTF *v252;
  WTF *v253;
  int v254;
  int v255;
  BOOL v256;
  float v257;
  double v258;
  int v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  WebCore::RenderBlock *v271;
  uint64_t v272;
  double v273;
  unsigned int v274;
  int v275;
  int v276;
  int v277;
  _BOOL4 hasLineIfEmpty;
  __int16 v279;
  int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  void *v291;
  int v292;
  BOOL v293;
  WTF *v294;
  char v295;
  char v296;
  unsigned int *v297;
  unsigned int *v298;
  unsigned int v299;
  uint64_t v300;
  unint64_t v301;
  WebCore::RenderObject *v302;
  int *v303;
  int v304;
  int v305;
  unsigned int v306;
  uint64_t v307;
  float v308;
  double v309;
  int v310;
  unsigned int v311;
  unsigned __int8 *v312;
  int v313;
  float v314;
  float v315;
  double v316;
  int v317;
  WTF *v318;
  char v319;
  WTF *v320;
  unsigned int v321;
  int v322;
  uint64_t v323;
  void *v324;
  WebCore::RenderElement *v325;
  unint64_t v326;
  WTF *v327;
  unsigned int v328;
  int v329;
  unint64_t v330;
  void *v331;
  WTF *v332;
  uint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  unsigned int v336;
  unsigned int v337;
  _DWORD *v338;
  uint64_t v339;
  float v340;
  uint64_t v341;
  WebCore::RenderLayerScrollableArea *v342;
  uint64_t v343;
  int v344;
  BOOL v345;
  int v346;
  uint64_t v347;
  unsigned int v348;
  char v349;
  char v350;
  signed int v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  unsigned int v355;
  int v356;
  uint64_t v357;
  int v358;
  int v359;
  uint64_t v360;
  int v361;
  _BYTE *v362;
  _BYTE *v363;
  int v364;
  uint64_t v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  unsigned int v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  unsigned int v380;
  unint64_t v381;
  uint64_t m;
  uint64_t v383;
  unsigned int v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  uint64_t v390;
  unsigned int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  unsigned int v399;
  int v400;
  int v401;
  unsigned int v402;
  int v403;
  unsigned int v404;
  int v405;
  char v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v411;
  uint64_t v412;
  BOOL v413;
  unsigned int v414;
  unsigned int v415;
  int v416;
  unsigned int v417;
  char v418;
  unsigned int v419;
  WebCore::RenderStyle *v420;
  WTF *v421;
  int v422;
  int v423;
  uint64_t v424;
  BOOL v425;
  char v426;
  char v427;
  unsigned int v428;
  int *v429;
  int v430;
  int v431;
  int v432;
  _BOOL4 v433;
  unsigned int v434;
  WTF *v435;
  uint64_t v436;
  _QWORD v437[16];
  BOOL v438[62];
  BOOL v439;
  _BYTE v440[9];
  __int128 v441;
  char v442;
  int v443;
  uint64_t v444;
  WTF *v445;
  uint64_t v446;
  int v447;
  __int128 v448;
  int v449;
  int v450;
  uint64_t v451;
  WTF *v452;
  uint64_t v453;
  int v454;
  __int128 v455;
  int v456;
  uint64_t v457;

  v457 = *MEMORY[0x1E0C80C00];
  v439 = a2;
  if (!a2)
  {
    result = WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1);
    if ((result & 1) != 0)
      return result;
  }
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v438, (WebCore::RenderObject *)a1, 0, 0, 1);
  v4 = *(WTF **)(a1 + 152);
  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x20000) != 0)
  {
    v198 = a1;
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      v198 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v199 = *(_QWORD *)(v198 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v199 + 32) + 40) + 20))
      goto LABEL_338;
    v202 = *(_QWORD **)(v199 + 40);
    if (v202[41] || v202[38] || v202[39] || v202[40] || (v5 & 0x100000) != 0)
      goto LABEL_338;
  }
  if ((v5 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData((WebCore::RenderObject *)a1))
  {
LABEL_338:
    v7 = 1;
  }
  else
  {
    v6 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v398 = 2;
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_7;
      case 3:
      case 5:
        v6 = 3;
        goto LABEL_7;
      case 4:
        goto LABEL_8;
      default:
        v6 = 0;
LABEL_7:
        v398 = v6;
LABEL_8:
        v7 = (v398 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  v435 = v4;
  v424 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
  v8 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v424 + 336, (WebCore::RenderObject *)a1, (int *)&v435, 0, 0);
  v9 = v8;
  if (v7 && v8)
    ++*(_DWORD *)(v424 + 492);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1) & 1) != 0
    || (v191 = *(_QWORD *)(a1 + 32)) != 0
    && (v192 = *(_BYTE **)(v191 + 8)) != 0
    && (v192[45] & 0x40) != 0
    && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v192 + 1704))(v192, a1))
  {
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v10 = (_DWORD *)(a1 + 160);
    else
      v10 = (_DWORD *)(a1 + 164);
    *v10 = 0;
  }
  WebCore::RenderBlock::preparePaginationBeforeBlockLayout((const WebCore::RenderBlock *)a1, &v439);
  v11 = *(_DWORD *)(a1 + 160);
  v12 = *(_DWORD *)(a1 + 164);
  v435 = 0;
  v436 = 0;
  v437[0] = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment((WebCore::RenderBox *)a1, (int *)&v435, 0);
  v13 = *(_DWORD *)(a1 + 124) >> 13;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
  {
    *(_DWORD *)(a1 + 164) = (_DWORD)v435;
    *(_DWORD *)(a1 + 156) = HIDWORD(v435);
  }
  else
  {
    *(_DWORD *)(a1 + 160) = (_DWORD)v435;
    *(_DWORD *)(a1 + 152) = HIDWORD(v435);
  }
  v14 = v13 & 7;
  v15 = *(_DWORD *)(a1 + 120);
  v16 = (v15 >> 26) & 1;
  v17 = v16;
  if ((v14 - 2) >= 2)
  {
    if (v14 == 4)
    {
      v17 = (v15 & 0x4000000) == 0;
    }
    else
    {
      v17 = (v15 >> 26) & 1;
      if (v14 != 5)
      {
        if ((v15 & 0x4000000) != 0)
          v18 = 1;
        else
          v18 = 3;
        goto LABEL_24;
      }
    }
  }
  if (v17)
    v18 = 2;
  else
    v18 = 0;
LABEL_24:
  *(_DWORD *)(a1 + 168 + 4 * v18) = v437[0];
  if ((v14 - 2) >= 2)
  {
    if (v14 == 4)
    {
      v16 = (v15 & 0x4000000) == 0;
    }
    else if (v14 != 5)
    {
      v19 = 3;
      if ((v15 & 0x4000000) == 0)
        v19 = 1;
      goto LABEL_29;
    }
  }
  v65 = v16 == 0;
  v19 = 2;
  if (!v65)
    v19 = 0;
LABEL_29:
  *(_DWORD *)(a1 + 168 + 4 * v19) = HIDWORD(v437[0]);
  WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
  if (v11 != *(_DWORD *)(a1 + 160)
    || v12 != *(_DWORD *)(a1 + 164)
    || (v269 = *(_QWORD *)(a1 + 32)) != 0
    && (v270 = *(_QWORD *)(v269 + 8), *(_BYTE *)(v270 + 46) == 5)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v270 + 88) + 32) + 8) + 16) & 0x27) == 0)
  {
    v439 = 1;
  }
  *(_DWORD *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  WebCore::RenderBlock::layoutExcludedChildren(a1, v439);
  v435 = (WTF *)v437;
  *(_QWORD *)&v20 = 8;
  v436 = 8;
  *(_QWORD *)&v448 = a1;
  v450 = 1;
  v452 = 0;
  v453 = 0;
  v451 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 8) + 16) & 0x20) != 0
    || (*(_BYTE *)(a1 + 123) & 4) == 0)
  {
    v21 = (*(_DWORD *)(a1 + 124) & 8) == 0;
  }
  else
  {
    v21 = (*(unsigned __int8 *)(a1 + 124) >> 3) & 1;
  }
  LOBYTE(v449) = v21;
  if (!v21)
  {
    v367 = *(unsigned int *)(a1 + 64);
    if (v367 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v368 = *(_QWORD *)((v367 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v368)
      {
        if ((*(_BYTE *)(v368 + 45) & 4) != 0)
        {
          v369 = 1;
          v370 = 1;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v368 + 88) + 32) + 8) + 12) > v370)
            {
              v369 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v368 + 88) + 32) + 8) + 12);
              v370 = v369;
            }
            v371 = *(unsigned int *)(v368 + 47) | ((unint64_t)*(unsigned __int8 *)(v368 + 51) << 32);
            if (!v371)
              break;
            v368 = *(_QWORD *)(v371 + 8);
            if (!v368)
              break;
          }
          while ((*(_BYTE *)(v368 + 45) & 4) != 0);
          v450 = v369;
        }
      }
    }
  }
  v22 = &v441;
  *((_QWORD *)&v448 + 1) = 0;
  v454 = -1;
  for (i = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v448);
        i;
        i = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v448))
  {
    if ((*(_DWORD *)(i + 20) & 0x1800000) != 0x1000000)
    {
      v441 = *(_OWORD *)(i + 152);
      v29 = HIDWORD(v436);
      if (HIDWORD(v436) == (_DWORD)v436)
      {
        v237 = (__int128 *)WTF::Vector<WebCore::LayoutRect,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v435, (void *)(HIDWORD(v436) + 1), (unint64_t)&v441);
        v29 = HIDWORD(v436);
        v30 = v435;
        v31 = *v237;
      }
      else
      {
        v30 = v435;
        v31 = v441;
      }
      *((_OWORD *)v30 + v29) = v31;
      ++HIDWORD(v436);
    }
  }
  v32 = v452;
  if (v452)
  {
    v452 = 0;
    LODWORD(v453) = 0;
    WTF::fastFree(v32, v24);
  }
  if (v451)
    WTF::fastFree((WTF *)(v451 - 16), v24);
  v33 = v439;
  v425 = v439;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 8) + 16) & 0x20) == 0)
  {
    WebCore::RenderDeprecatedFlexibleBox::layoutHorizontalBox((WebCore::RenderDeprecatedFlexibleBox *)a1, v439, v25, v26, v27, v28);
    goto LABEL_650;
  }
  if (((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1 >= 5 && (*(_WORD *)(a1 + 69) & 0x400) != 0)
  {
    v386 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, a1);
    if (v386)
    {
      if (*(_DWORD *)(v386 + 8))
      {
        WebCore::RenderBoxModelObject::borderTop((WebCore::RenderBoxModelObject *)a1);
        WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
      }
    }
  }
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v35 = *(unsigned __int8 *)(v34 + 76);
  if ((v35 & 0xFFFFFFF7) == 3)
  {
    v393 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v35 = *(unsigned __int8 *)(v34 + 76);
    v36 = (float)v393 * 0.015625;
  }
  else
  {
    v36 = 0.0;
  }
  v431 = v12;
  v432 = v9;
  v433 = v7;
  if (v35 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v34 + 72), v36);
  if ((*(_DWORD *)(a1 + 124) & 0xE000) == 0x2000
    && WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1))
  {
    v402 = WebCore::RenderBoxModelObject::borderBottom((WebCore::RenderBoxModelObject *)a1);
    v403 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
    v40 = v402 + v403;
    if (__OFADD__(v402, v403))
      v40 = (v402 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    v38 = 0.0;
    if ((*(_BYTE *)(v37 + 196) & 0xE) != 0)
    {
      v201 = *(_QWORD *)(v37 + 200);
      if (*(_BYTE *)(v201 + 5) && *(_BYTE *)(v201 + 68) == 4)
      {
        if (*(_BYTE *)(v201 + 70))
          v38 = *(float *)(v201 + 64);
        else
          v38 = (float)*(int *)(v201 + 64);
      }
      else
      {
        v38 = *(float *)(v37 + 192);
      }
    }
    v39 = v38 * 64.0;
    if (v39 >= 2147483650.0)
    {
      v40 = 0x7FFFFFFF;
    }
    else if (v39 <= -2147483650.0)
    {
      v40 = 0x80000000;
    }
    else
    {
      v40 = (int)v39;
    }
  }
  v41 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
  v42 = v41[92];
  if ((v42 & 0xFFFFFFF7) == 3)
  {
    v394 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v42 = v41[92];
    v43 = (float)v394 * 0.015625;
  }
  else
  {
    v43 = 0.0;
  }
  switch(v42)
  {
    case 4:
      v44 = *((float *)v41 + 22);
      if (!v41[94])
        v44 = (float)SLODWORD(v44);
      break;
    case 3:
      v206 = *((float *)v41 + 22);
      if (!v41[94])
        v206 = (float)SLODWORD(v206);
      v44 = (float)(v43 * v206) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v41 + 88), v43);
      break;
    default:
      v46 = 0;
      goto LABEL_65;
  }
  v45 = v44 * 64.0;
  if (v45 >= 2147483650.0)
  {
    v46 = 0x7FFFFFFF;
  }
  else if (v45 <= -2147483650.0)
  {
    v46 = 0x80000000;
  }
  else
  {
    v46 = (int)v45;
  }
LABEL_65:
  v47 = v40 + v46;
  if (__OFADD__(v40, v46))
    v47 = (v40 >> 31) + 0x7FFFFFFF;
  v48 = *(_QWORD *)(a1 + 144);
  if (v48)
  {
    v49 = *(WebCore::RenderLayerScrollableArea **)(v48 + 264);
    if (!v49)
      goto LABEL_69;
    if ((*(_BYTE *)(a1 + 22) & 1) == 0)
      goto LABEL_69;
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v49 + 400))(v49))
    {
      v233 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v49 + 400))(v49);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 272))(v233) & 1) != 0)
        goto LABEL_69;
    }
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v49 + 392))(v49))
    {
      v260 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v49 + 392))(v49);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v260 + 272))(v260) & 1) != 0)
        goto LABEL_69;
    }
    v200 = (*(_DWORD *)(a1 + 96) >> 10) & 7;
    if (v200 == 1)
    {
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 1) == 0)
      {
LABEL_501:
        v254 = WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(v49, 0, (*(_DWORD *)(a1 + 20) & 0x1000) == 0);
        if (v254 >= -33554432)
        {
          LODWORD(v48) = v254 << 6;
          if (v254 > 0x1FFFFFF)
            LODWORD(v48) = 0x7FFFFFFF;
        }
        else
        {
          LODWORD(v48) = 0x80000000;
        }
        goto LABEL_70;
      }
    }
    else if ((v200 - 3) < 2)
    {
      goto LABEL_501;
    }
LABEL_69:
    LODWORD(v48) = 0;
  }
LABEL_70:
  v50 = v47 + v48;
  if (__OFADD__(v47, (_DWORD)v48))
    v50 = (v47 >> 31) + 0x7FFFFFFF;
  *(_QWORD *)&v441 = a1;
  v443 = 1;
  v445 = 0;
  v446 = 0;
  v444 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 8) + 16) & 0x20) != 0)
  {
    v51 = *(_DWORD *)(a1 + 124);
  }
  else
  {
    v51 = *(_DWORD *)(a1 + 124);
    if ((*(_BYTE *)(a1 + 123) & 4) != 0)
    {
      v52 = (v51 >> 3) & 1;
      goto LABEL_75;
    }
  }
  v52 = (v51 & 8) == 0;
LABEL_75:
  v442 = v52;
  v434 = v50;
  if (!v52)
  {
    v372 = *(unsigned int *)(a1 + 64);
    if (v372 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v373 = *(_QWORD *)((v372 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v373)
      {
        if ((*(_BYTE *)(v373 + 45) & 4) != 0)
        {
          v374 = 1;
          v50 = v50;
          do
          {
            v375 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v373 + 88) + 32) + 8) + 12);
            if (v375 > v374)
            {
              v443 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v373 + 88) + 32) + 8) + 12);
              v374 = v375;
            }
            v376 = *(unsigned int *)(v373 + 47) | ((unint64_t)*(unsigned __int8 *)(v373 + 51) << 32);
            if (!v376)
              break;
            v373 = *(_QWORD *)(v376 + 8);
            if (!v373)
              break;
          }
          while ((*(_BYTE *)(v373 + 45) & 4) != 0);
        }
      }
    }
  }
  *((_QWORD *)&v441 + 1) = 0;
  v447 = -1;
  memset(v440, 0, sizeof(v440));
  WebCore::gatherFlexChildrenInfo((WebCore *)&v441, (WebCore::FlexBoxIterator *)v33, (unsigned int *)&v440[5], (unsigned int *)&v440[1], (unsigned int *)v440, v28);
  v423 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 48);
  if (v423 == -1)
    goto LABEL_110;
  *((_QWORD *)&v441 + 1) = 0;
  v447 = -1;
  v53 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
  if (!v53)
    goto LABEL_78;
  v193 = v53;
  if (!v33)
  {
    while (1)
    {
      if ((*(_DWORD *)(v193 + 20) & 0x1800000) != 0x1000000)
      {
        WebCore::RenderBox::clearOverridingContentSize(v193, v54);
        v356 = *(_DWORD *)(v193 + 20);
        v357 = *(_QWORD *)(*(_QWORD *)(v193 + 88) + 8);
        if ((v356 & 2) != 0)
        {
          if ((*(_BYTE *)(v357 + 8) & 0xF7) == 3 || (v358 = *(unsigned __int8 *)(v357 + 16), (v358 & 0xFFFFFFF7) == 3))
          {
LABEL_752:
            if ((v356 & 0x20) == 0)
              *(_DWORD *)(v193 + 20) = v356 | 0x20;
            v359 = *(_BYTE *)(v193 + 52) & 7;
            if (v359 == 1)
              v360 = v193;
            else
              v360 = 0;
            if (v360)
              ++*(_DWORD *)(v360 + 16);
            if (v359 == 1)
              WebCore::RenderBlock::markPositionedObjectsForLayout((WebCore::RenderBlock *)v193);
            v50 = v434;
            if (v360)
            {
              v361 = *(_DWORD *)(v360 + 16);
              if (!v361)
              {
LABEL_766:
                __break(0xC471u);
                JUMPOUT(0x19442DD60);
              }
              *(_DWORD *)(v360 + 16) = v361 - 1;
            }
            goto LABEL_764;
          }
        }
        else
        {
          v358 = *(unsigned __int8 *)(v357 + 16);
        }
        if (!v358 && (*(_BYTE *)(v193 + 52) & 7) == 1)
          goto LABEL_752;
      }
LABEL_764:
      v193 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
      if (!v193)
        goto LABEL_78;
    }
  }
  do
  {
    if ((*(_DWORD *)(v193 + 20) & 0x1800000) != 0x1000000)
    {
      WebCore::RenderBox::clearOverridingContentSize(v193, v54);
      v194 = *(_DWORD *)(v193 + 20);
      if ((v194 & 0x20) == 0)
        *(_DWORD *)(v193 + 20) = v194 | 0x20;
      v195 = *(_BYTE *)(v193 + 52) & 7;
      if (v195 == 1)
        v196 = v193;
      else
        v196 = 0;
      if (v196)
        ++*(_DWORD *)(v196 + 16);
      if (v195 == 1)
        WebCore::RenderBlock::markPositionedObjectsForLayout((WebCore::RenderBlock *)v193);
      if (v196)
      {
        v197 = *(_DWORD *)(v196 + 16);
        if (!v197)
          goto LABEL_766;
        *(_DWORD *)(v196 + 16) = v197 - 1;
      }
    }
    v193 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
  }
  while (v193);
LABEL_78:
  v55 = *(unsigned int *)(a1 + 64);
  if (!(v55 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)))
    goto LABEL_110;
  v56 = *(_QWORD *)((v55 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if (!v56)
    goto LABEL_110;
  if ((*(_BYTE *)(v56 + 52) & 7) != 1)
  {
    while (1)
    {
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 112))(v56);
      if (!v57)
      {
        if (v56 == a1)
          goto LABEL_110;
        v407 = *(unsigned int *)(v56 + 47);
        if (!(v407 | ((unint64_t)*(unsigned __int8 *)(v56 + 51) << 32))
          || (v57 = *(_QWORD *)((v407 | ((unint64_t)*(unsigned __int8 *)(v56 + 51) << 32)) + 8)) == 0)
        {
          v408 = *(_QWORD *)(v56 + 32);
          if (!v408)
            goto LABEL_110;
          v409 = *(_QWORD *)(v408 + 8);
          if (!v409 || v409 == a1)
            goto LABEL_110;
          while (1)
          {
            v411 = *(unsigned int *)(v409 + 47);
            if (v411 | ((unint64_t)*(unsigned __int8 *)(v409 + 51) << 32))
            {
              v57 = *(_QWORD *)((v411 | ((unint64_t)*(unsigned __int8 *)(v409 + 51) << 32)) + 8);
              if (v57)
                break;
            }
            v412 = *(_QWORD *)(v409 + 32);
            if (!v412)
            {
              v422 = 0;
              v426 = 1;
              LODWORD(v50) = v434;
              goto LABEL_111;
            }
            v422 = 0;
            v409 = *(_QWORD *)(v412 + 8);
            v426 = 1;
            if (v409)
              v413 = v409 == a1;
            else
              v413 = 1;
            LODWORD(v50) = v434;
            if (v413)
              goto LABEL_111;
          }
          v50 = v434;
        }
      }
      v56 = v57;
      if ((*(_BYTE *)(v57 + 52) & 7) == 1)
        goto LABEL_82;
    }
  }
  v57 = *(_QWORD *)((v55 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
LABEL_82:
  while (1)
  {
    v58 = v57;
    v59 = *(unsigned int *)(v57 + 64);
    if (v59 | ((unint64_t)*(unsigned __int8 *)(v57 + 68) << 32))
    {
      v57 = *(_QWORD *)((v59 | ((unint64_t)*(unsigned __int8 *)(v57 + 68) << 32)) + 8);
      if (v57)
        break;
    }
    if (v58 == a1)
      goto LABEL_110;
    v66 = *(unsigned int *)(v58 + 47);
    if (!(v66 | ((unint64_t)*(unsigned __int8 *)(v58 + 51) << 32))
      || (v57 = *(_QWORD *)((v66 | ((unint64_t)*(unsigned __int8 *)(v58 + 51) << 32)) + 8)) == 0)
    {
      v67 = *(_QWORD *)(v58 + 32);
      if (!v67)
        goto LABEL_110;
      v68 = *(_QWORD *)(v67 + 8);
      if (!v68 || v68 == a1)
        goto LABEL_110;
      while (1)
      {
        v230 = *(unsigned int *)(v68 + 47);
        if (v230 | ((unint64_t)*(unsigned __int8 *)(v68 + 51) << 32))
        {
          v57 = *(_QWORD *)((v230 | ((unint64_t)*(unsigned __int8 *)(v68 + 51) << 32)) + 8);
          if (v57)
            break;
        }
        v231 = *(_QWORD *)(v68 + 32);
        if (!v231)
          goto LABEL_110;
        v422 = 0;
        v68 = *(_QWORD *)(v231 + 8);
        v426 = 1;
        if (v68)
          v232 = v68 == a1;
        else
          v232 = 1;
        if (v232)
          goto LABEL_111;
      }
    }
LABEL_87:
    if ((*(_BYTE *)(v57 + 52) & 7) != 1)
    {
      v61 = v57;
      while (1)
      {
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 112))(v61);
        if (!v57)
        {
          if (v61 == a1)
            goto LABEL_110;
          v62 = *(unsigned int *)(v61 + 47);
          if (!(v62 | ((unint64_t)*(unsigned __int8 *)(v61 + 51) << 32))
            || (v57 = *(_QWORD *)((v62 | ((unint64_t)*(unsigned __int8 *)(v61 + 51) << 32)) + 8)) == 0)
          {
            v63 = *(_QWORD *)(v61 + 32);
            if (!v63)
              goto LABEL_110;
            v64 = *(_QWORD *)(v63 + 8);
            v65 = !v64 || v64 == a1;
            if (v65)
              goto LABEL_110;
            while (1)
            {
              v234 = *(unsigned int *)(v64 + 47);
              if (v234 | ((unint64_t)*(unsigned __int8 *)(v64 + 51) << 32))
              {
                v57 = *(_QWORD *)((v234 | ((unint64_t)*(unsigned __int8 *)(v64 + 51) << 32)) + 8);
                if (v57)
                  break;
              }
              v235 = *(_QWORD *)(v64 + 32);
              if (!v235)
                goto LABEL_110;
              v422 = 0;
              v64 = *(_QWORD *)(v235 + 8);
              v426 = 1;
              if (v64)
                v236 = v64 == a1;
              else
                v236 = 1;
              if (v236)
                goto LABEL_111;
            }
          }
        }
        v61 = v57;
        if ((*(_BYTE *)(v57 + 52) & 7) == 1)
          goto LABEL_82;
      }
    }
  }
  v60 = *(_DWORD *)(v57 + 20);
  if ((v60 & 0x800) != 0 || (v60 & 0x1800000) == 0x1000000)
  {
    v210 = *(unsigned int *)(v57 + 47) | ((unint64_t)*(unsigned __int8 *)(v57 + 51) << 32);
    if (v210)
    {
      while (1)
      {
        v211 = *(_QWORD *)(v210 + 8);
        if (!v211)
          break;
        v212 = *(_DWORD *)(v211 + 20);
        if ((v212 & 0x800) == 0 && (v212 & 0x1800000) != 0x1000000)
          goto LABEL_86;
        v210 = *(unsigned int *)(v211 + 47) | ((unint64_t)*(unsigned __int8 *)(v211 + 51) << 32);
        if (!v210)
          goto LABEL_87;
      }
    }
    goto LABEL_87;
  }
LABEL_86:
  if ((*(_BYTE *)(v58 + 22) & 4) == 0)
    goto LABEL_87;
  v213 = *(unsigned __int16 *)(v58 + 69);
  if (!(v213 >> 13))
  {
    v214 = (*(_BYTE *)(v58 + 52) & 7) != 1 || (*(_BYTE *)(v58 + 53) & 8) == 0;
    if (v214 || ((v255 = *(unsigned __int8 *)(v58 + 46), v255 != 90) ? (v256 = v255 == 67) : (v256 = 1), v256))
      v215 = 0x2000;
    else
      v215 = 0x4000;
    LOWORD(v213) = v215 | v213;
    *(_WORD *)(v58 + 69) = v213;
  }
  if ((v213 & 0xE000) != 0x2000)
  {
LABEL_110:
    v422 = 0;
    v426 = 1;
    goto LABEL_111;
  }
  v216 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
  v217 = *(unsigned int *)(v216 + 508);
  if ((_DWORD)v217)
    v218 = *(_QWORD *)(*(_QWORD *)(v216 + 496) + 8 * v217 - 8);
  else
    v218 = 0;
  v219 = *(unsigned __int8 *)(v218 + 136);
  if (*(_BYTE *)(v218 + 136))
  {
    v220 = *(unsigned __int8 *)(v218 + 104);
    v455 = *(_OWORD *)(v218 + 105);
    v456 = *(_DWORD *)(v218 + 121);
    v50 = *(_QWORD *)(v218 + 128);
    if (v50)
      ++*(_DWORD *)v50;
  }
  else
  {
    v220 = 0;
  }
  v221 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 44);
  v222 = v221 >> 32;
  if ((_BYTE)v221)
  {
    LODWORD(v429) = v220;
    v430 = v219;
    *((_QWORD *)&v441 + 1) = 0;
    v447 = -1;
    v223 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
    if (v223)
    {
      v224 = v223;
      v225 = 0;
      do
      {
        v226 = *(_DWORD *)(v224 + 20);
        if ((v226 & 0x1800000) != 0x1000000)
        {
          if ((v226 & 0xF8) != 0)
          {
            v227 = *(_QWORD *)(v224 + 32);
            if (v227
              && (v228 = *(_QWORD *)(v227 + 8)) != 0
              && (*(_BYTE *)(*(_QWORD *)(v228 + 104) + 239) & 0x18) != 0
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v224 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 479))
            {
              WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v224);
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v224 + 688))(v224);
            }
          }
          if ((*(_BYTE *)(v224 + 52) & 7) == 1)
            v225 += WebCore::lineCountFor((WebCore *)v224, (const WebCore::RenderBlockFlow *)v54);
          v229 = *(_DWORD *)(v224 + 20);
          if ((v229 & 0x20) == 0)
            *(_DWORD *)(v224 + 20) = v229 | 0x20;
        }
        v224 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
      }
      while (v224);
    }
    else
    {
      v225 = 0;
    }
    v238 = (float)(unint64_t)(v222 * v225 + (v221 >> 32)) / 100.0;
    if ((unint64_t)v238 <= 1)
      v222 = 1;
    else
      v222 = (unint64_t)v238;
    v219 = v430;
    LOBYTE(v220) = (_BYTE)v429;
  }
  v239 = *(unsigned __int8 *)(v218 + 136);
  *(_QWORD *)(v218 + 104) = v222;
  *(_QWORD *)(v218 + 112) = 0;
  *(_BYTE *)(v218 + 120) = 0;
  *(_BYTE *)(v218 + 124) = 0;
  if (v239)
  {
    v240 = *(WTF **)(v218 + 128);
    *(_QWORD *)(v218 + 128) = 0;
    if (v240)
    {
      if (*(_DWORD *)v240 == 1)
        WTF::fastFree(v240, v54);
      else
        --*(_DWORD *)v240;
    }
  }
  else
  {
    *(_QWORD *)(v218 + 128) = 0;
    *(_BYTE *)(v218 + 136) = 1;
  }
  *((_QWORD *)&v441 + 1) = 0;
  v447 = -1;
  for (j = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
        j;
        j = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441))
  {
    if ((*(_DWORD *)(j + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(j + 20) & 0xF8) != 0)
    {
      v244 = *(_QWORD *)(j + 32);
      if (v244
        && (v245 = *(_QWORD *)(v244 + 8)) != 0
        && (*(_BYTE *)(*(_QWORD *)(v245 + 104) + 239) & 0x18) != 0
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(j + 24) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479))
      {
        WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)j);
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)j + 688))(j);
      }
    }
  }
  v72 = *(unsigned __int8 *)(v218 + 136);
  if (*(_BYTE *)(v218 + 136))
  {
    v246 = *(_DWORD *)(v218 + 120);
    v247 = *(WTF **)(v218 + 128);
    if (v247)
    {
      if (*(_BYTE *)(v218 + 124))
        v248 = 2;
      else
        v248 = 1;
      v249 = *(_DWORD *)v247 + v248;
      if (!*(_BYTE *)(v218 + 124))
        v246 = 0;
      v422 = v246;
      if (*(_BYTE *)(v218 + 124))
        v250 = *(WTF **)(v218 + 128);
      else
        v250 = 0;
      *(_DWORD *)v247 = v249;
      if (v249 == 1)
        WTF::fastFree(v247, v242);
      else
        *(_DWORD *)v247 = v249 - 1;
    }
    else
    {
      v250 = 0;
      if (!*(_BYTE *)(v218 + 124))
        v246 = 0;
      v422 = v246;
    }
    if (v219)
    {
      v448 = v455;
      v449 = v456;
      if (v50)
      {
        ++*(_DWORD *)v50;
        v251 = 1;
        v222 = v50;
      }
      else
      {
        v222 = 0;
        v251 = 1;
      }
    }
    else
    {
      v251 = 0;
      LOBYTE(v220) = 0;
    }
    if (*(unsigned __int8 *)(v218 + 136) == v251)
    {
      if (*(_BYTE *)(v218 + 136))
      {
        *(_BYTE *)(v218 + 104) = v220;
        *(_OWORD *)(v218 + 105) = v448;
        *(_DWORD *)(v218 + 121) = v449;
        if (v222)
          ++*(_DWORD *)v222;
        v252 = *(WTF **)(v218 + 128);
        *(_QWORD *)(v218 + 128) = v222;
        if (v252)
        {
          if (*(_DWORD *)v252 == 1)
            WTF::fastFree(v252, v242);
          else
            --*(_DWORD *)v252;
        }
      }
    }
    else if (*(_BYTE *)(v218 + 136))
    {
      v253 = *(WTF **)(v218 + 128);
      *(_QWORD *)(v218 + 128) = 0;
      if (v253)
      {
        if (*(_DWORD *)v253 == 1)
          WTF::fastFree(v253, v242);
        else
          --*(_DWORD *)v253;
      }
      *(_BYTE *)(v218 + 136) = 0;
    }
    else
    {
      *(_BYTE *)(v218 + 104) = v220;
      *(_OWORD *)(v218 + 105) = v448;
      *(_DWORD *)(v218 + 121) = v449;
      if (v222)
        ++*(_DWORD *)v222;
      *(_QWORD *)(v218 + 128) = v222;
      *(_BYTE *)(v218 + 136) = 1;
    }
    if (v219 && v222)
    {
      if (*(_DWORD *)v222 == 1)
        WTF::fastFree((WTF *)v222, v242);
      else
        --*(_DWORD *)v222;
      goto LABEL_481;
    }
    if (v219)
    {
LABEL_481:
      if (v50)
      {
        if (*(_DWORD *)v50 == 1)
          WTF::fastFree((WTF *)v50, v242);
        else
          --*(_DWORD *)v50;
      }
    }
    v421 = v250;
    v426 = 0;
    LODWORD(v50) = v434;
LABEL_111:
    v420 = (WebCore::RenderStyle *)(a1 + 80);
    updated = (_DWORD *)WebCore::LocalFrameViewLayoutContext::updateScrollInfoAfterLayoutTransaction((WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944) + 248) + 336));
    ++*updated;
    v429 = &v449;
    *(_QWORD *)&v448 = &v449;
    *((_QWORD *)&v448 + 1) = 8;
    WebCore::appendChildLayoutDeltas(a1, (uint64_t)&v448);
    v71 = 0;
    LOBYTE(v430) = 0;
    LODWORD(v22) = 0x7FFFFFFF;
    v20 = 2147483650.0;
    goto LABEL_112;
  }
  __break(1u);
LABEL_851:
  if (*(_BYTE *)(v204 + 52) == 4)
  {
    if (*(_BYTE *)(v204 + 54))
      v73 = *(float *)(v204 + 48);
    else
      v73 = (float)*(int *)(v204 + 48);
    LODWORD(v50) = v434;
    goto LABEL_115;
  }
LABEL_356:
  v73 = *(float *)(v72 + 168);
LABEL_115:
  v74 = v73 * 64.0;
  v75 = (int)v74;
  if (v74 <= -2147483650.0)
    v75 = 0x80000000;
  if (v74 < v20)
    v76 = v75;
  else
    v76 = v22;
LABEL_120:
  v77 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
  v78 = v77[76];
  if ((v78 & 0xFFFFFFF7) == 3)
  {
    v395 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v78 = v77[76];
    v79 = (float)v395 * 0.015625;
  }
  else
  {
    v79 = 0.0;
  }
  switch(v78)
  {
    case 4:
      v80 = *((float *)v77 + 18);
      if (!v77[78])
        v80 = (float)SLODWORD(v80);
      goto LABEL_125;
    case 3:
      v207 = *((float *)v77 + 18);
      if (!v77[78])
        v207 = (float)SLODWORD(v207);
      v80 = (float)(v79 * v207) / 100.0;
LABEL_125:
      v81 = v80 * 64.0;
      if (v81 >= v20)
      {
        v82 = 0x7FFFFFFF;
      }
      else if (v81 <= -2147483650.0)
      {
        v82 = 0x80000000;
      }
      else
      {
        v82 = (int)v81;
      }
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v77 + 72), v79);
      v258 = v257 * 64.0;
      if (v258 > -2147483650.0)
        v259 = (int)v258;
      else
        v259 = 0x80000000;
      if (v258 < v20)
        v82 = v259;
      else
        v82 = 0x7FFFFFFF;
      break;
    default:
      v82 = 0;
      break;
  }
  v83 = __OFADD__(v76, v82);
  v84 = v76 + v82;
  if (v83)
    v84 = (v76 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(a1 + 164) = v84;
  v83 = __OFADD__(v84, (_DWORD)v50);
  v85 = v84 + v50;
  LODWORD(v22) = 0x7FFFFFFF;
  v86 = (v84 >> 31) + 0x7FFFFFFF;
  if (v83)
    v87 = v86;
  else
    v87 = v85;
  *((_QWORD *)&v441 + 1) = 0;
  v447 = -1;
  v88 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
  if (v88)
  {
    v89 = v88;
    v90 = 0;
    do
    {
      v91 = *(_DWORD *)(v89 + 20);
      if (v423 == -1 && v425 && (v91 & 0x20) == 0)
      {
        v91 |= 0x20u;
        *(_DWORD *)(v89 + 20) = v91;
      }
      if ((v91 & 0x1800000) != 0x1000000)
      {
        if (v90 >= HIDWORD(v448))
        {
          __break(0xC471u);
          JUMPOUT(0x19442E64CLL);
        }
        v92 = v448;
        WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v89, (const WebCore::RenderBlock *)a1);
        v93 = *(_DWORD *)(a1 + 164);
        v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1080))(v89);
        v95 = v93 + v94;
        if (__OFADD__(v93, v94))
          v95 = (v93 >> 31) + 0x7FFFFFFF;
        v96 = (_DWORD *)(v92 + 8 * v90);
        *(_DWORD *)(a1 + 164) = v95;
        (*(void (**)(uint64_t))(*(_QWORD *)v89 + 1512))(v89);
        if ((*(_BYTE *)(v89 + 20) & 0xF8) != 0)
        {
          WebCore::LocalFrameViewLayoutContext::addLayoutDelta(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 24) + 8) + 40) + 8)+ 1944)+ 248)+ 336, (_DWORD *)(v92 + 8 * v90));
          WebCore::RenderElement::layoutIfNeeded(v89);
          v282 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 24) + 8) + 40) + 8)
                                       + 1944)
                           + 248)
               + 336;
          if (*v96 == 0x80000000)
            v283 = 0x7FFFFFFFLL;
          else
            v283 = -*v96;
          v284 = *(_DWORD *)(v92 + 8 * v90 + 4);
          if (v284 == 0x80000000)
            v285 = 0x7FFFFFFFLL;
          else
            v285 = -v284;
          *(_QWORD *)&v455 = v283 | (v285 << 32);
          WebCore::LocalFrameViewLayoutContext::addLayoutDelta(v282, &v455);
        }
        v97 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
        if ((v97 == 4 || v97 == 2)
          && WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1))
        {
          v399 = WebCore::RenderBoxModelObject::borderLeft((WebCore::RenderBoxModelObject *)a1);
          v400 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
          v101 = v399 + v400;
          if (__OFADD__(v399, v400))
            v101 = (v399 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v98 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
          v99 = 0.0;
          if ((*(_BYTE *)(v98 + 124) & 0xE) != 0)
          {
            v203 = *(_QWORD *)(v98 + 200);
            if (*(_BYTE *)(v203 + 5) && *(_BYTE *)(v203 + 76) == 4)
            {
              if (*(_BYTE *)(v203 + 78))
                v99 = *(float *)(v203 + 72);
              else
                v99 = (float)*(int *)(v203 + 72);
            }
            else
            {
              v99 = *(float *)(v98 + 120);
            }
          }
          v100 = v99 * 64.0;
          if (v100 >= v20)
          {
            v101 = 0x7FFFFFFF;
          }
          else if (v100 <= -2147483650.0)
          {
            v101 = 0x80000000;
          }
          else
          {
            v101 = (int)v100;
          }
        }
        v102 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
        v103 = v102[100];
        if ((v103 & 0xFFFFFFF7) == 3)
        {
          v397 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
          v103 = v102[100];
          v104 = (float)v397 * 0.015625;
        }
        else
        {
          v104 = 0.0;
        }
        switch(v103)
        {
          case 4:
            v105 = *((float *)v102 + 24);
            if (!v102[102])
              v105 = (float)SLODWORD(v105);
            goto LABEL_153;
          case 3:
            v209 = *((float *)v102 + 24);
            if (!v102[102])
              v209 = (float)SLODWORD(v209);
            v105 = (float)(v104 * v209) / 100.0;
LABEL_153:
            v106 = v105 * 64.0;
            if (v106 >= v20)
            {
              v107 = 0x7FFFFFFF;
            }
            else if (v106 <= -2147483650.0)
            {
              v107 = 0x80000000;
            }
            else
            {
              v107 = (int)v106;
            }
            break;
          case 11:
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v102 + 96), v104);
            goto LABEL_153;
          default:
            v107 = 0;
            break;
        }
        v108 = v101 + v107;
        if (__OFADD__(v101, v107))
          v108 = (v101 >> 31) + 0x7FFFFFFF;
        v109 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 8) + 16) & 7;
        switch(v109)
        {
          case 4:
            goto LABEL_537;
          case 3:
            if ((*(_BYTE *)(a1 + 123) & 4) == 0)
              goto LABEL_587;
LABEL_162:
            v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1096))(v89);
            v111 = v108 + v110;
            if (!__OFADD__(v108, v110))
            {
LABEL_163:
              v112 = *(unsigned int *)(a1 + 164);
              if (v92)
              {
                v113 = *(_DWORD *)(v89 + 152);
                v114 = v113 - v111;
                if (__OFSUB__(v113, v111))
                  v114 = (v113 >> 31) + 0x7FFFFFFF;
                v115 = *(_DWORD *)(v89 + 156);
                v116 = v115 - v112;
                if (__OFSUB__(v115, (_DWORD)v112))
                  v116 = (v115 >> 31) + 0x7FFFFFFF;
                v83 = __OFADD__(*v96, v114);
                v117 = *v96 + v114;
                if (v83)
                  v117 = (*v96 >> 31) + 0x7FFFFFFF;
                *v96 = v117;
                v118 = v92 + 8 * v90;
                v121 = *(_DWORD *)(v118 + 4);
                v119 = (int *)(v118 + 4);
                v120 = v121;
                v83 = __OFADD__(v121, v116);
                v122 = v121 + v116;
                if (v83)
                  v122 = (v120 >> 31) + 0x7FFFFFFF;
                *v119 = v122;
              }
              *(_QWORD *)(v89 + 152) = v111 | (unint64_t)(v112 << 32);
              v123 = *(_DWORD *)(a1 + 164);
              v124 = *(_DWORD *)(v89 + 164);
              v125 = v123 + v124;
              if (__OFADD__(v123, v124))
                v125 = (v123 >> 31) + 0x7FFFFFFF;
              LODWORD(v50) = v434;
              v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1088))(v89);
              v127 = v125 + v126;
              if (__OFADD__(v125, v126))
                v127 = (v125 >> 31) + 0x7FFFFFFF;
              ++v90;
              *(_DWORD *)(a1 + 164) = v127;
              goto LABEL_178;
            }
            break;
          case 2:
LABEL_537:
            v419 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1096))(v89);
            v261 = WebCore::RenderBox::contentWidth((WebCore::RenderBox *)a1);
            v414 = *(_DWORD *)(v89 + 160);
            v417 = v261;
            v262 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1096))(v89);
            v263 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1104))(v89);
            v264 = v262 + v263;
            if (__OFADD__(v262, v263))
              v264 = (v262 >> 31) + 0x7FFFFFFF;
            v83 = __OFADD__(v414, v264);
            v265 = v414 + v264;
            if (v83)
              v265 = (v414 >> 31) + 0x7FFFFFFF;
            v266 = v417 - v265;
            if (__OFSUB__(v417, v265))
              v266 = (v417 >> 31) + 0x7FFFFFFF;
            v267 = (v266 / 2) & ~((v266 + (v266 < 0)) >> 31);
            v83 = __OFADD__(v419, v267);
            v268 = v419 + v267;
            if (v83)
              v268 = (v419 >> 31) + 0x7FFFFFFF;
            v111 = v108 + v268;
            if (!__OFADD__(v108, v268))
              goto LABEL_163;
            break;
          default:
            if ((*(_BYTE *)(a1 + 123) & 4) == 0)
              goto LABEL_162;
LABEL_587:
            v286 = WebCore::RenderBox::contentWidth((WebCore::RenderBox *)a1);
            v287 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1104))(v89);
            v288 = v286 - v287;
            if (__OFSUB__(v286, v287))
              v288 = (v286 >> 31) + 0x7FFFFFFF;
            v289 = *(_DWORD *)(v89 + 160);
            v83 = __OFSUB__(v288, v289);
            v290 = v288 - v289;
            if (v83)
              v290 = (v288 >> 31) + 0x7FFFFFFF;
            v111 = v108 + v290;
            if (__OFADD__(v108, v290))
              v111 = (v108 >> 31) + 0x7FFFFFFF;
            goto LABEL_163;
        }
        v111 = (v108 >> 31) + 0x7FFFFFFF;
        goto LABEL_163;
      }
      v271 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v89);
      WebCore::RenderBlock::insertPositionedObject(v271, (WebCore::RenderBox *)v89);
      v272 = *(_QWORD *)(v89 + 144);
      v273 = WebCore::RenderStyle::borderStartWidth(v420) * 64.0;
      if (v273 >= v20)
      {
        v274 = 0x7FFFFFFF;
      }
      else if (v273 > -2147483650.0)
      {
        v274 = (int)v273;
      }
      else
      {
        v274 = 0x80000000;
      }
      v275 = WebCore::RenderBoxModelObject::paddingStart((WebCore::RenderBoxModelObject *)a1);
      v276 = v274 + v275;
      if (__OFADD__(v274, v275))
        v276 = (v274 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(v272 + 148) = v276;
      v277 = *(_DWORD *)(a1 + 164);
      if (*(_DWORD *)(v272 + 152) != v277)
      {
        *(_DWORD *)(v272 + 152) = v277;
        v362 = *(_BYTE **)(*(_QWORD *)(v89 + 88) + 24);
        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        {
          if (!v362[36])
          {
            v363 = v362 + 20;
            goto LABEL_770;
          }
        }
        else if (!v362[12])
        {
          v363 = v362 + 28;
LABEL_770:
          if (!*v363)
          {
            v364 = *(_DWORD *)(v89 + 20);
            if ((v364 & 0x20) == 0)
              *(_DWORD *)(v89 + 20) = v364 | 0x20;
          }
        }
      }
      LODWORD(v50) = v434;
LABEL_178:
      v89 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
    }
    while (v89);
  }
  v128 = *(_DWORD *)(a1 + 164);
  *((_QWORD *)&v441 + 1) = 0;
  v447 = -1;
  if (WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441))
  {
    v130 = *(_DWORD *)(a1 + 164);
  }
  else
  {
    hasLineIfEmpty = WebCore::RenderBlock::hasLineIfEmpty((WebCore::RenderBlock *)a1, v129);
    v130 = *(_DWORD *)(a1 + 164);
    if (hasLineIfEmpty)
    {
      v279 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      v406 = 2;
      switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
      {
        case 1:
        case 2:
          goto LABEL_566;
        case 3:
        case 5:
          LOBYTE(v279) = 3;
          goto LABEL_566;
        case 4:
          goto LABEL_567;
        default:
          LOBYTE(v279) = 0;
LABEL_566:
          v406 = v279;
LABEL_567:
          v280 = WebCore::RenderBlock::lineHeight((char *)a1, (WTF::StringImpl *)1, (v406 & 6) == 2, 1);
          if (__OFADD__(v130, v280))
            v130 = (v130 >> 31) + 0x7FFFFFFF;
          else
            v130 += v280;
          LODWORD(v50) = v434;
          break;
      }
    }
  }
  v131 = v130 + v50;
  if (__OFADD__(v130, (_DWORD)v50))
    v131 = (v130 >> 31) + 0x7FFFFFFF;
  if (v131 < v87)
    v131 = v87;
  *(_DWORD *)(a1 + 164) = v131;
  WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
  if (v131 != *(_DWORD *)(a1 + 164))
    LOBYTE(v430) = 1;
  if (((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1 >= 5
    && (*(_WORD *)(a1 + 69) & 0x400) != 0
    && (v390 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, a1)) != 0&& *(_DWORD *)(v390 + 8))
  {
    v391 = WebCore::RenderBoxModelObject::borderTop((WebCore::RenderBoxModelObject *)a1);
    v392 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
    v135 = v391 + v392;
    if (__OFADD__(v391, v392))
      v135 = (v391 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v132 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
    v133 = 0.0;
    if ((*(_BYTE *)(v132 + 172) & 0xE) != 0)
    {
      v205 = *(_QWORD *)(v132 + 200);
      if (*(_BYTE *)(v205 + 5) && *(_BYTE *)(v205 + 52) == 4)
      {
        if (*(_BYTE *)(v205 + 54))
          v133 = *(float *)(v205 + 48);
        else
          v133 = (float)*(int *)(v205 + 48);
      }
      else
      {
        v133 = *(float *)(v132 + 168);
      }
    }
    v134 = v133 * 64.0;
    if (v134 >= v20)
    {
      v135 = 0x7FFFFFFF;
    }
    else if (v134 <= -2147483650.0)
    {
      v135 = 0x80000000;
    }
    else
    {
      v135 = (int)v134;
    }
  }
  v136 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
  v137 = v136[76];
  if ((v137 & 0xFFFFFFF7) == 3)
  {
    v396 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
    v137 = v136[76];
    v138 = (float)v396 * 0.015625;
  }
  else
  {
    v138 = 0.0;
  }
  switch(v137)
  {
    case 4:
      v139 = *((float *)v136 + 18);
      if (!v136[78])
        v139 = (float)SLODWORD(v139);
      goto LABEL_198;
    case 3:
      v208 = *((float *)v136 + 18);
      if (!v136[78])
        v208 = (float)SLODWORD(v208);
      v139 = (float)(v138 * v208) / 100.0;
LABEL_198:
      v140 = v139 * 64.0;
      if (v140 >= v20)
      {
        v141 = 0x7FFFFFFF;
      }
      else if (v140 <= -2147483650.0)
      {
        v141 = 0x80000000;
      }
      else
      {
        v141 = (int)v140;
      }
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v136 + 72), v138);
      goto LABEL_198;
    default:
      v141 = 0;
      break;
  }
  v142 = v135 + v141;
  if (__OFADD__(v135, v141))
    v142 = (v135 >> 31) + 0x7FFFFFFF;
  v143 = *(_DWORD *)(a1 + 164);
  v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1000))(a1);
  v145 = v143 - v144;
  if (__OFSUB__(v143, v144))
    v145 = (v143 >> 31) + 0x7FFFFFFF;
  v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
  v147 = v145 - v146;
  if (__OFSUB__(v145, v146))
    v147 = (v145 >> 31) + 0x7FFFFFFF;
  v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
  v149 = v148 << 6;
  if (v148 < -33554432)
    v149 = 0x80000000;
  if (v148 > 0x1FFFFFF)
    v149 = 0x7FFFFFFF;
  v83 = __OFSUB__(v147, v149);
  v150 = v147 - v149;
  if (v83)
    v150 = (v147 >> 31) + 0x7FFFFFFF;
  v151 = v150 & ~(v150 >> 31);
  v152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  v153 = v151 - v152;
  if (__OFSUB__(v151, v152))
    v153 = 0x7FFFFFFF;
  v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
  v156 = v153 - v154;
  if (__OFSUB__(v153, v154))
    v156 = (v153 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
  {
    v385 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
    if (v385 >= -33554432)
    {
      v157 = v385 << 6;
      if (v385 > 0x1FFFFFF)
        v157 = 0x7FFFFFFF;
    }
    else
    {
      v157 = 0x80000000;
    }
  }
  else
  {
    v157 = 0;
  }
  v83 = __OFSUB__(v156, v157);
  v158 = v156 - v157;
  if (v83)
    v158 = (v156 >> 31) + 0x7FFFFFFF;
  v159 = v158 & ~(v158 >> 31);
  v83 = __OFADD__(v142, v159);
  v160 = v142 + v159;
  if (v83)
    v160 = (v142 >> 31) + 0x7FFFFFFF;
  v161 = v160 - v128;
  if (__OFSUB__(v160, v128))
    v161 = (v160 >> 31) + 0x7FFFFFFF;
  if ((v427 & 1) != 0)
  {
    v440[0] = 0;
    goto LABEL_596;
  }
  if (!v440[0] || !v161)
    goto LABEL_596;
  v281 = *(_DWORD *)&v440[1];
  if (v161 <= 0)
    v190 = *(_DWORD *)&v440[5];
  else
    v190 = *(_DWORD *)&v440[1];
  if (v161 > 0)
    v281 = *(_DWORD *)&v440[5];
  v415 = v281;
  if (v190 <= v281)
  {
    v418 = 0;
    v170 = v161;
    while (1)
    {
      v428 = v170;
      do
      {
        *((_QWORD *)&v441 + 1) = 0;
        v447 = -1;
        v162 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
        if (v162)
        {
          v163 = (WebCore::RenderBox *)v162;
          v164 = 0.0;
          do
          {
            if (WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex((WebCore::RenderDeprecatedFlexibleBox *)a1, v163, v161 > 0, v190))v164 = v164 + *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v163 + 11) + 32) + 8) + 4);
            v163 = (WebCore::RenderBox *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
          }
          while (v163);
        }
        else
        {
          v164 = 0.0;
        }
        *((_QWORD *)&v441 + 1) = 0;
        v447 = -1;
        v165 = (WebCore::RenderBox *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
        for (k = v170; v165; v165 = (WebCore::RenderBox *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441))
        {
          v167 = WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex((WebCore::RenderDeprecatedFlexibleBox *)a1, v165, v161 > 0, v190);
          if (v167)
          {
            if (v167 != 0x7FFFFFFF)
            {
              v168 = (float)((float)((float)v167 * 0.015625)
                           * (float)(v164
                                   / *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v165 + 11) + 32) + 8) + 4)))
                   * 64.0;
              if (v168 >= v20)
              {
                v167 = 0x7FFFFFFF;
              }
              else if (v168 <= -2147483650.0)
              {
                v167 = 0x80000000;
              }
              else
              {
                v167 = (int)v168;
              }
            }
            v169 = k < v167;
            if (v161 > 0)
              v169 = v167 < k;
            if (v169)
              k = v167;
          }
        }
        v416 = v170;
        v170 = 0;
        if (!k || v164 == 0.0)
          goto LABEL_276;
        *((_QWORD *)&v441 + 1) = 0;
        v447 = -1;
        v171 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
        if (!v171)
        {
          v180 = v416;
          goto LABEL_283;
        }
        v172 = v171;
        v170 = v416;
        while (k && v164 != 0.0)
        {
          if (WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex((WebCore::RenderDeprecatedFlexibleBox *)a1, (WebCore::RenderBox *)v172, v161 > 0, v190))
          {
            v173 = (float)((float)((float)k * 0.015625)
                         * (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v172 + 88) + 32) + 8) + 4) / v164))
                 * 64.0;
            if (v173 >= v20)
            {
              v174 = 0x7FFFFFFF;
            }
            else
            {
              if (v173 > -2147483650.0)
              {
                v174 = (int)v173;
                if ((int)v173)
                  goto LABEL_255;
LABEL_264:
                if (__OFSUB__(k, v174))
                  k = (k >> 31) + 0x7FFFFFFF;
                else
                  k -= v174;
                v179 = v428 - v174;
                if (__OFSUB__(v428, v174))
                  v179 = (v428 >> 31) + 0x7FFFFFFF;
                v428 = v179;
                LODWORD(v22) = 0x7FFFFFFF;
                if (__OFSUB__(v170, v174))
                  v170 = (v170 >> 31) + 0x7FFFFFFF;
                else
                  v170 -= v174;
                v164 = v164 - *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v172 + 88) + 32) + 8) + 4);
                goto LABEL_274;
              }
              v174 = 0x80000000;
            }
LABEL_255:
            v175 = WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)v172);
            if ((v175 & 0xFF00000000) == 0)
            {
              v176 = (_DWORD *)(v172 + 160);
              if (((*(_DWORD *)(v172 + 124) >> 13) & 6u) - 2 >= 4)
                v176 = (_DWORD *)(v172 + 164);
              LODWORD(v175) = *v176;
            }
            v177 = v175 + v174;
            if (__OFADD__((_DWORD)v175, v174))
              v177 = (v175 >> 31) + 0x7FFFFFFF;
            LODWORD(v455) = v177;
            v178 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
            if (!WebCore::gOverridingLogicalHeightMap)
            {
              v178 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v178 = 0;
              v178[1] = 0;
              WebCore::gOverridingLogicalHeightMap = (uint64_t)v178;
            }
            WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v178, (_QWORD *)v172, &v455);
            v418 = 1;
            v425 = 1;
            goto LABEL_264;
          }
LABEL_274:
          v172 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
          if (!v172)
            break;
        }
        v180 = v416;
        if (v170 != v416)
          goto LABEL_276;
LABEL_283:
        if (v180 < 1)
          v182 = -64;
        else
          v182 = 64;
        *((_QWORD *)&v441 + 1) = 0;
        v447 = -1;
        v183 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
        if (v183)
        {
          v184 = (_DWORD *)v183;
          v170 = v180;
          do
          {
            if (!v170)
              break;
            if (WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex((WebCore::RenderDeprecatedFlexibleBox *)a1, (WebCore::RenderBox *)v184, v161 > 0, v190))
            {
              v185 = WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)v184);
              if ((v185 & 0xFF00000000) == 0)
              {
                v186 = v184 + 40;
                if (((v184[31] >> 13) & 6u) - 2 >= 4)
                  v186 = v184 + 41;
                LODWORD(v185) = *v186;
              }
              v187 = v185 + v182;
              if (__OFADD__((_DWORD)v185, v182))
                v187 = (v185 >> 31) + 0x7FFFFFFF;
              LODWORD(v455) = v187;
              v188 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
              if (!WebCore::gOverridingLogicalHeightMap)
              {
                v188 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v188 = 0;
                v188[1] = 0;
                WebCore::gOverridingLogicalHeightMap = (uint64_t)v188;
              }
              WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v188, v184, &v455);
              v189 = v428 - v182;
              if (__OFSUB__(v428, v182))
                v189 = (v428 >> 31) + 0x7FFFFFFF;
              v428 = v189;
              LODWORD(v22) = 0x7FFFFFFF;
              if (__OFSUB__(v170, v182))
                v170 = (v170 >> 31) + 0x7FFFFFFF;
              else
                v170 -= v182;
              v418 = 1;
              v425 = 1;
            }
            v184 = (_DWORD *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
          }
          while (v184);
        }
        else
        {
          v170 = v180;
        }
LABEL_276:
        if (v170 >= 0)
          v181 = v170;
        else
          v181 = -v170;
      }
      while (v181 > 0x3F);
      ++v190;
      v170 = v428;
      if (v190 > v415 || !v428)
      {
        v71 = 1;
        LODWORD(v50) = v434;
        if ((v418 & 1) == 0)
          goto LABEL_595;
LABEL_112:
        v427 = v71;
        if (((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1 >= 5
          && (*(_WORD *)(a1 + 69) & 0x400) != 0)
        {
          v387 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, a1);
          if (v387)
          {
            if (*(_DWORD *)(v387 + 8))
            {
              v388 = WebCore::RenderBoxModelObject::borderTop((WebCore::RenderBoxModelObject *)a1);
              v389 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
              v76 = v388 + v389;
              if (__OFADD__(v388, v389))
                v76 = (v388 >> 31) + 0x7FFFFFFF;
              LODWORD(v50) = v434;
              goto LABEL_120;
            }
          }
        }
        v72 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
        v73 = 0.0;
        if ((*(_BYTE *)(v72 + 172) & 0xE) != 0)
        {
          v204 = *(_QWORD *)(v72 + 200);
          if (*(_BYTE *)(v204 + 5))
            goto LABEL_851;
          goto LABEL_356;
        }
        goto LABEL_115;
      }
    }
  }
  v170 = v161;
LABEL_595:
  v440[0] = 0;
  v161 = v170;
LABEL_596:
  WebCore::RenderBlock::endAndCommitUpdateScrollInfoAfterLayoutTransaction((WTF **)a1, v155);
  v292 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 8) + 16) >> 3) & 3;
  if (v292)
    v293 = v161 < 1;
  else
    v293 = 1;
  if (!v293)
  {
    if (v292 == 1)
    {
      v161 = v161 >> 1;
    }
    else if (v292 == 3)
    {
      *((_QWORD *)&v441 + 1) = 0;
      v447 = -1;
      v343 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
      if (v343)
      {
        v344 = 0;
        do
        {
          if ((*(_DWORD *)(v343 + 20) & 0x1800000) != 0x1000000)
            ++v344;
          v343 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
        }
        while (v343);
        v345 = v344 != 0;
        v346 = v344 - 1;
        if (v346 != 0 && v345)
        {
          *((_QWORD *)&v441 + 1) = 0;
          v447 = -1;
          v347 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
          if (v347)
          {
            v348 = 0;
            v349 = 1;
            do
            {
              v350 = ((*(_DWORD *)(v347 + 20) & 0x1800000) == 0x1000000) & v349;
              if ((*(_DWORD *)(v347 + 20) & 0x1800000) != 0x1000000 && (v349 & 1) == 0)
              {
                v351 = v346 << 6;
                if (v346 < -33554432)
                  v351 = 0x80000000;
                if (v346 > 0x1FFFFFF)
                  v351 = 0x7FFFFFFF;
                v352 = ((uint64_t)v161 << 6) / v351;
                if (v352 <= (uint64_t)0xFFFFFFFF80000000)
                  v352 = 0xFFFFFFFF80000000;
                if (v352 >= 0x7FFFFFFF)
                  LODWORD(v352) = 0x7FFFFFFF;
                if (__OFADD__(v348, (_DWORD)v352))
                  v348 = (v348 >> 31) + 0x7FFFFFFF;
                else
                  v348 += v352;
                v83 = __OFSUB__(v161, (_DWORD)v352);
                v353 = v161 - v352;
                if (v83)
                  v161 = (v161 >> 31) + 0x7FFFFFFF;
                else
                  v161 = v353;
                v350 = 0;
                --v346;
                v354 = *(_QWORD *)(v347 + 152);
                v355 = (HIDWORD(v354) >> 31) + 0x7FFFFFFF;
                if (!__OFADD__(HIDWORD(v354), v348))
                  v355 = HIDWORD(v354) + v348;
                *(_QWORD *)(v347 + 152) = *(_QWORD *)(v347 + 152) | ((unint64_t)v355 << 32);
              }
              v347 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
              v349 = v350;
            }
            while (v347);
          }
        }
      }
      goto LABEL_601;
    }
    *((_QWORD *)&v441 + 1) = 0;
    v447 = -1;
    for (m = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441);
          m;
          m = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v441))
    {
      if ((*(_DWORD *)(m + 20) & 0x1800000) != 0x1000000)
      {
        v383 = *(_QWORD *)(m + 152);
        v384 = (HIDWORD(v383) >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(HIDWORD(v383), v161))
          v384 = HIDWORD(v383) + v161;
        *(_QWORD *)(m + 152) = *(_QWORD *)(m + 152) | ((unint64_t)v384 << 32);
      }
    }
  }
LABEL_601:
  v9 = v432;
  v7 = v433;
  v12 = v431;
  v294 = v421;
  v295 = v426;
  if ((v430 & 1) != 0)
    goto LABEL_640;
  if (v421)
    v296 = v426;
  else
    v296 = 1;
  if ((v296 & 1) == 0)
  {
    v297 = (unsigned int *)*((_QWORD *)v421 + 1);
    if (v297)
    {
      v298 = v297 + 38;
      if (((v297[31] >> 13) & 6) - 2 >= 4)
        v298 = v297 + 39;
      v299 = *v298;
      v300 = WebCore::RenderBox::contentBoxLocation(*((WebCore::RenderBox **)v421 + 1));
      if (__OFADD__(v299, HIDWORD(v300)))
        LODWORD(v301) = (v299 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v301) = v299 + HIDWORD(v300);
      v302 = (WebCore::RenderObject *)v297;
      while (1)
      {
        v302 = WebCore::RenderObject::containingBlock(v302);
        if (!v302)
          break;
        if (v302 == (WebCore::RenderObject *)a1)
          goto LABEL_621;
        v303 = (int *)((char *)v302 + 152);
        if (((*((_DWORD *)v302 + 31) >> 13) & 6u) - 2 >= 4)
          v303 = (int *)((char *)v302 + 156);
        v304 = *v303;
        v83 = __OFADD__((_DWORD)v301, v304);
        v305 = v301 + v304;
        if (v83)
          LODWORD(v301) = (v301 >> 31) + 0x7FFFFFFF;
        else
          LODWORD(v301) = v305;
      }
      v301 = (unint64_t)WebCore::RenderBox::contentBoxLocation((WebCore::RenderBox *)a1) >> 32;
LABEL_621:
      v306 = v301 + v422;
      if (__OFADD__((_DWORD)v301, v422))
        v306 = (v301 >> 31) + 0x7FFFFFFF;
      if ((*(_DWORD *)(a1 + 124) & 0xE000) == 0x2000
        && WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1))
      {
        v404 = WebCore::RenderBoxModelObject::borderBottom((WebCore::RenderBoxModelObject *)a1);
        v405 = WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)a1);
        v310 = v404 + v405;
        if (__OFADD__(v404, v405))
          v310 = (v404 >> 31) + 0x7FFFFFFF;
        v9 = v432;
        v7 = v433;
        v12 = v431;
        v294 = v421;
        v295 = v426;
      }
      else
      {
        v307 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
        v308 = 0.0;
        if ((*(_BYTE *)(v307 + 196) & 0xE) != 0)
        {
          v339 = *(_QWORD *)(v307 + 200);
          if (*(_BYTE *)(v339 + 5) && *(_BYTE *)(v339 + 68) == 4)
          {
            if (*(_BYTE *)(v339 + 70))
              v308 = *(float *)(v339 + 64);
            else
              v308 = (float)*(int *)(v339 + 64);
            v9 = v432;
            v7 = v433;
            v12 = v431;
            v294 = v421;
            v295 = v426;
          }
          else
          {
            v308 = *(float *)(v307 + 192);
          }
        }
        v309 = v308 * 64.0;
        if (v309 >= v20)
        {
          v310 = 0x7FFFFFFF;
        }
        else if (v309 <= -2147483650.0)
        {
          v310 = 0x80000000;
        }
        else
        {
          v310 = (int)v309;
        }
      }
      v311 = v306 + v310;
      if (__OFADD__(v306, v310))
        v311 = (v306 >> 31) + 0x7FFFFFFF;
      v312 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 24);
      v313 = v312[92];
      if ((v313 & 0xFFFFFFF7) == 3)
      {
        v401 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
        v313 = v312[92];
        v314 = (float)v401 * 0.015625;
      }
      else
      {
        v314 = 0.0;
      }
      switch(v313)
      {
        case 4:
          v315 = *((float *)v312 + 22);
          if (!v312[94])
            v315 = (float)SLODWORD(v315);
          goto LABEL_635;
        case 3:
          v340 = *((float *)v312 + 22);
          if (!v312[94])
            v340 = (float)*((int *)v312 + 22);
          v315 = (float)(v314 * v340) / 100.0;
LABEL_635:
          v316 = v315 * 64.0;
          if (v316 >= v20)
          {
            v317 = 0x7FFFFFFF;
          }
          else if (v316 <= -2147483650.0)
          {
            v317 = 0x80000000;
          }
          else
          {
            v317 = (int)v316;
          }
          break;
        case 11:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v312 + 88), v314);
          goto LABEL_635;
        default:
          v317 = 0;
          break;
      }
      v131 = v311 + v317;
      if (__OFADD__(v311, v317))
        v131 = (v311 >> 31) + 0x7FFFFFFF;
LABEL_640:
      *(_DWORD *)(a1 + 164) = v131;
    }
  }
  v318 = (WTF *)v448;
  if (v429 != (int *)v448 && (_QWORD)v448)
  {
    *(_QWORD *)&v448 = 0;
    DWORD2(v448) = 0;
    WTF::fastFree(v318, v291);
  }
  if (v294)
    v319 = v295;
  else
    v319 = 1;
  if ((v319 & 1) == 0)
  {
    if (*(_DWORD *)v294 == 1)
      WTF::fastFree(v294, v291);
    else
      --*(_DWORD *)v294;
  }
  v320 = v445;
  if (v445)
  {
    v445 = 0;
    LODWORD(v446) = 0;
    WTF::fastFree(v320, v291);
  }
  if (v444)
    WTF::fastFree((WTF *)(v444 - 16), v291);
LABEL_650:
  *(_QWORD *)&v448 = a1;
  v450 = 1;
  v452 = 0;
  v453 = 0;
  v451 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 8) + 16) & 0x20) != 0)
  {
    v321 = *(_DWORD *)(a1 + 124);
    goto LABEL_652;
  }
  v321 = *(_DWORD *)(a1 + 124);
  if ((*(_BYTE *)(a1 + 123) & 4) != 0)
    v322 = (v321 >> 3) & 1;
  else
LABEL_652:
    v322 = (v321 & 8) == 0;
  LOBYTE(v449) = v322;
  if (!v322)
  {
    v377 = *(unsigned int *)(a1 + 64);
    if (v377 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v378 = *(_QWORD *)((v377 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v378)
      {
        if ((*(_BYTE *)(v378 + 45) & 4) != 0)
        {
          v379 = 1;
          v380 = 1;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v378 + 88) + 32) + 8) + 12) > v380)
            {
              v379 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v378 + 88) + 32) + 8) + 12);
              v380 = v379;
            }
            v381 = *(unsigned int *)(v378 + 47) | ((unint64_t)*(unsigned __int8 *)(v378 + 51) << 32);
            if (!v381)
              break;
            v378 = *(_QWORD *)(v381 + 8);
            if (!v378)
              break;
          }
          while ((*(_BYTE *)(v378 + 45) & 4) != 0);
          v450 = v379;
        }
      }
    }
  }
  *((_QWORD *)&v448 + 1) = 0;
  v454 = -1;
  v323 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v448);
  if (v323)
  {
    v325 = (WebCore::RenderElement *)v323;
    v326 = 0;
    do
    {
      if ((*((_DWORD *)v325 + 5) & 0x1800000) != 0x1000000)
      {
        if ((*(_BYTE *)(a1 + 20) & 8) == 0 && WebCore::RenderElement::checkForRepaintDuringLayout(v325))
        {
          if (v326 >= HIDWORD(v436))
          {
            __break(0xC471u);
            JUMPOUT(0x19442E644);
          }
          WebCore::RenderBox::repaintDuringLayoutIfMoved((uint64_t)v325, (WTF *)((char *)v435 + 16 * v326));
        }
        ++v326;
      }
      v325 = (WebCore::RenderElement *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v448);
    }
    while (v325);
  }
  v327 = v452;
  if (v452)
  {
    v452 = 0;
    LODWORD(v453) = 0;
    WTF::fastFree(v327, v324);
  }
  if (v451)
    WTF::fastFree((WTF *)(v451 - 16), v324);
  v328 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v329 = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)a1);
  else
    v329 = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)a1);
  if (__OFADD__(v328, v329))
    v330 = (v328 >> 31) + 0x7FFFFFFF;
  else
    v330 = v328 + v329;
  WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
  if (*(_DWORD *)(a1 + 164) != v12)
    v439 = 1;
  WebCore::RenderBlock::layoutPositionedObjects(a1);
  WebCore::RenderBlock::updateDescendantTransformsAfterLayout((WebCore::RenderBlock *)a1);
  WebCore::RenderBlock::computeOverflow((const WebCore::RenderBox *)a1, (void *)v330);
  v332 = v435;
  if (v437 != (_QWORD *)v435 && v435)
  {
    v435 = 0;
    LODWORD(v436) = 0;
    WTF::fastFree(v332, v331);
  }
  if (v9)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState(v424 + 336, v331);
    if (v7)
      --*(_DWORD *)(v424 + 492);
  }
  WebCore::RenderLayerModelObject::updateLayerTransform((WTF *)a1, v331);
  v333 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
  v334 = *(unsigned int *)(v333 + 508);
  if ((_DWORD)v334)
  {
    v335 = *(_DWORD **)(*(_QWORD *)(v333 + 496) + 8 * v334 - 8);
    if (v335)
    {
      if (v335[18])
      {
        v365 = 156;
        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
          v365 = 152;
        v366 = WebCore::RenderLayoutState::pageLogicalOffset(v335, a1, *(_DWORD *)(a1 + v365));
        WebCore::RenderBlock::setPageLogicalOffset(a1, (void *)v366);
      }
    }
  }
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    v337 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v337 > 5 || ((1 << v337) & 0x2A) == 0)
      && (v338 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v338)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v338 + 2), (_QWORD *)a1, (uint64_t)&v435);
    }
    else
    {
      v341 = *(_QWORD *)(a1 + 144);
      if (v341)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v342 = *(WebCore::RenderLayerScrollableArea **)(v341 + 264);
        if (v342)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v342);
      }
    }
  }
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v438);
  v336 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v336;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v336 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::FlexBoxIterator::next(WebCore::FlexBoxIterator *this)
{
  uint64_t i;
  int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  unint64_t v18;
  unint64_t v19;
  WebCore::FlexBoxIterator *v20;
  WebCore::FlexBoxIterator *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;

  for (i = *((_QWORD *)this + 1); ; i = 0)
  {
    while (i)
    {
      if (!*((_BYTE *)this + 16))
      {
        v11 = *(unsigned int *)(i + 40) | ((unint64_t)*(unsigned __int8 *)(i + 44) << 32);
        if (!v11)
          goto LABEL_13;
        goto LABEL_27;
      }
      v6 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v6)
        goto LABEL_13;
LABEL_11:
      v7 = *(_QWORD *)(v6 + 8);
      if (!v7 || (*(_BYTE *)(v7 + 45) & 4) == 0)
        goto LABEL_13;
      *((_QWORD *)this + 1) = v7;
      v9 = 1;
LABEL_17:
      if (*((_DWORD *)this + 5) == v9
        && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 8) + 12) != v9)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 8) + 12);
        v21 = this;
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 4, &v25, (uint64_t)&v22);
        this = v21;
        i = 0;
        v7 = *((_QWORD *)v21 + 1);
        if (!v7)
          continue;
      }
      i = v7;
      if ((*(_BYTE *)(v7 + 21) & 4) == 0)
      {
        if ((*(_BYTE *)(v7 + 45) & 1) != 0)
          return v7;
        i = v7;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 8) + 12) == *((_DWORD *)this + 5))
          return v7;
      }
    }
    v2 = *((_DWORD *)this + 14);
    v3 = __CFADD__(v2, 1);
    v4 = v2 + 1;
    *((_DWORD *)this + 14) = v4;
    if (v3)
    {
      if (*((_BYTE *)this + 16))
      {
        v5 = 1;
        goto LABEL_7;
      }
      v20 = this;
      v10 = (_DWORD *)((char *)this + 24);
      goto LABEL_24;
    }
    v8 = *((_QWORD *)this + 4);
    if (!v8)
      break;
    v20 = this;
    v12 = *(_DWORD *)(v8 - 12);
    if (v4 > v12)
      break;
    if (*((_DWORD *)this + 13) != v12)
    {
      WTF::copyToVector<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(&v22, (int **)this + 4);
      v14 = (WTF *)*((_QWORD *)v20 + 5);
      if (v14)
      {
        *((_QWORD *)v20 + 5) = 0;
        *((_DWORD *)v20 + 12) = 0;
        WTF::fastFree(v14, v13);
      }
      *((_QWORD *)v20 + 5) = v22;
      v15 = v24;
      *((_DWORD *)v20 + 12) = v23;
      *((_DWORD *)v20 + 13) = v15;
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    }
    if (*((_BYTE *)v20 + 16))
    {
      v16 = *((_DWORD *)v20 + 14) - 1;
      if (*((_DWORD *)v20 + 13) <= v16)
        goto LABEL_44;
      this = v20;
      v5 = *(_DWORD *)(*((_QWORD *)v20 + 5) + 4 * v16);
LABEL_7:
      *((_DWORD *)this + 5) = v5;
      v6 = *(unsigned int *)(*(_QWORD *)this + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 68) << 32);
      if (!v6)
        goto LABEL_13;
      goto LABEL_11;
    }
    v18 = *((unsigned int *)v20 + 13);
    v19 = v18 - *((unsigned int *)v20 + 14);
    if (v19 >= v18)
    {
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x19442E9F0);
    }
    v10 = (_DWORD *)(*((_QWORD *)v20 + 5) + 4 * v19);
LABEL_24:
    this = v20;
    *((_DWORD *)v20 + 5) = *v10;
    v11 = *(unsigned int *)(*(_QWORD *)v20 + 71) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v20 + 75) << 32);
    if (!v11)
      goto LABEL_13;
LABEL_27:
    v7 = *(_QWORD *)(v11 + 8);
    if (v7 && (*(_BYTE *)(v7 + 45) & 4) != 0)
    {
      *((_QWORD *)this + 1) = v7;
      v9 = *((_DWORD *)this + 6);
      goto LABEL_17;
    }
LABEL_13:
    *((_QWORD *)this + 1) = 0;
  }
  return 0;
}

uint64_t WebCore::RenderBox::shouldResetLogicalHeightBeforeLayout(WebCore::RenderBox *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameViewLayoutContext::updateScrollInfoAfterLayoutTransaction(WebCore::LocalFrameViewLayoutContext *this)
{
  uint64_t result;
  void *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;

  result = *((_QWORD *)this + 24);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v4 = (WTF *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = result;
    if (v4)
    {
      v5 = *((_QWORD *)v4 + 1);
      if (v5)
      {
        v6 = *(unsigned int *)(v5 - 4);
        if ((_DWORD)v6)
        {
          v7 = (WTF **)*((_QWORD *)v4 + 1);
          do
          {
            v8 = *v7;
            if (*v7 != (WTF *)-1)
            {
              *v7 = 0;
              if (v8)
              {
                if (*(_DWORD *)v8 == 1)
                {
                  v10 = v7;
                  v11 = v5;
                  v9 = v6;
                  WTF::fastFree(v8, v3);
                  v6 = v9;
                  v7 = v10;
                  v5 = v11;
                }
                else
                {
                  --*(_DWORD *)v8;
                }
              }
            }
            ++v7;
            --v6;
          }
          while (v6);
        }
        WTF::fastFree((WTF *)(v5 - 16), v3);
      }
      WTF::fastFree(v4, v3);
      return *((_QWORD *)this + 24);
    }
  }
  return result;
}

WTF **WebCore::RenderBlock::endAndCommitUpdateScrollInfoAfterLayoutTransaction(WTF **this, void *a2)
{
  uint64_t v2;
  WTF ***v4;
  WTF **v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  WebCore::RenderLayer *v13;
  WebCore::RenderLayerScrollableArea *v14;
  uint64_t *v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF **v26;
  WTF **v27;
  WTF **v28;
  WTF ***v29;
  WTF **v30;
  WTF *v31;
  uint64_t v32;
  WTF **v33;
  WTF *v34;
  uint64_t v35;
  WTF **v36;
  int v37;
  WTF **v38;
  WTF **v39;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8) + 1944)
                             + 248)
                 + 528);
  if ((*(_DWORD *)v2)-- != 1)
    return this;
  v4 = (WTF ***)(v2 + 8);
  v5 = *(WTF ***)(v2 + 8);
  if (!v5)
    goto LABEL_4;
  v16 = *((_DWORD *)v5 - 1);
  if (!v16)
    goto LABEL_37;
  v17 = 0;
  v18 = v16 - 1;
  do
  {
    this = &v5[v18];
    if ((unint64_t)*this + 1 >= 2 && !*((_QWORD *)*this + 1))
    {
      this = (WTF **)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(this, a2);
      ++v17;
    }
  }
  while ((unint64_t)v18--);
  v5 = *v4;
  if (v17)
  {
    *((_DWORD *)v5 - 4) += v17;
    v36 = *v4;
    if (*v4)
      v37 = *((_DWORD *)v36 - 3);
    else
      v37 = 0;
    *((_DWORD *)v36 - 3) = v37 - v17;
    v5 = *v4;
  }
  if (!v5)
    goto LABEL_4;
  v20 = *((_DWORD *)v5 - 1);
  if (v20 < 9 || 6 * *((_DWORD *)v5 - 3) >= v20)
  {
LABEL_37:
    *(_DWORD *)(v2 + 16) = 0;
  }
  else
  {
    this = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v2 + 8));
    v5 = *(WTF ***)(v2 + 8);
    *(_DWORD *)(v2 + 16) = 0;
    if (!v5)
    {
LABEL_4:
      v6 = 0;
      v7 = 0;
      goto LABEL_5;
    }
  }
  v22 = *((_DWORD *)v5 - 3);
  if (v22 >= 0x7FFFFFFF)
    v23 = -2;
  else
    v23 = 2 * v22;
  *(_DWORD *)(v2 + 20) = v23;
  v24 = *((unsigned int *)v5 - 3);
  if (!(_DWORD)v24)
  {
    v7 = 0;
    v25 = *((unsigned int *)v5 - 1);
    v26 = &v5[v25];
LABEL_43:
    v27 = v26;
    goto LABEL_44;
  }
  if (v24 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19442EFA8);
  }
  this = (WTF **)WTF::fastMalloc((WTF *)(8 * v24));
  v7 = (WTF *)this;
  v5 = *v4;
  if (!*v4)
  {
    v6 = 0;
    goto LABEL_5;
  }
  v25 = *((unsigned int *)v5 - 1);
  v26 = &v5[v25];
  if (!*((_DWORD *)v5 - 3))
    goto LABEL_43;
  if ((_DWORD)v25)
  {
    v35 = 0;
    while ((unint64_t)v5[v35] + 1 <= 1)
    {
      if (v25 == ++v35)
        goto LABEL_43;
    }
    v27 = &v5[v35];
  }
  else
  {
    v25 = 0;
    v27 = *v4;
  }
LABEL_44:
  v28 = &v5[v25];
  if (v28 != v27)
  {
    while (!*((_QWORD *)*v27 + 1))
    {
      v39 = v27 + 1;
      v27 = v26;
      if (v39 != v26)
      {
        v27 = v39;
        while ((unint64_t)*v27 + 1 <= 1)
        {
          if (++v27 == v26)
          {
            v27 = v26;
            break;
          }
        }
      }
      if (v27 == v28)
      {
        v27 = v28;
        break;
      }
    }
  }
  if (v27 != v26)
  {
    v6 = 0;
    while (1)
    {
      v29 = (WTF ***)*((_QWORD *)*v27 + 1);
      this = v29[1];
      if (!this)
      {
        this = (WTF **)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)this = 1;
        this[1] = (WTF *)v29;
        v31 = (WTF *)v29[1];
        v29[1] = this;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1)
          {
            WTF::fastFree(v31, a2);
            this = v29[1];
            if (!this)
              goto LABEL_50;
          }
          else
          {
            --*(_DWORD *)v31;
          }
        }
      }
      ++*(_DWORD *)this;
LABEL_50:
      *((_QWORD *)v7 + v6) = this;
      v30 = v26;
      if (v27 + 1 != v26)
      {
        v30 = v27 + 1;
        while ((unint64_t)*v30 + 1 <= 1)
        {
          if (++v30 == v26)
          {
            v30 = v26;
            break;
          }
        }
      }
      v27 = v28;
      if (v30 != v28)
      {
        v27 = v30;
        if (!*((_QWORD *)*v30 + 1))
        {
          while (1)
          {
            v38 = v27 + 1;
            v27 = v26;
            if (v38 != v26)
            {
              v27 = v38;
              while ((unint64_t)*v27 + 1 <= 1)
              {
                if (++v27 == v26)
                {
                  v27 = v26;
                  break;
                }
              }
            }
            if (v27 == v28)
              break;
            if (*((_QWORD *)*v27 + 1))
              goto LABEL_57;
          }
          v27 = v28;
        }
      }
LABEL_57:
      ++v6;
      ++*(_DWORD *)(v2 + 16);
      if (v27 == v26)
      {
        v5 = *v4;
        goto LABEL_62;
      }
    }
  }
  v6 = 0;
LABEL_62:
  if (v5)
  {
    *v4 = 0;
    v32 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v32)
    {
      v33 = v5;
      do
      {
        v34 = *v33;
        if (*v33 != (WTF *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, a2);
            else
              --*(_DWORD *)v34;
          }
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    this = (WTF **)WTF::fastFree((WTF *)(v5 - 2), a2);
    v8 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 16) = 0;
    if (v8)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
    goto LABEL_6;
  }
LABEL_5:
  LODWORD(v8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
LABEL_6:
  *(_DWORD *)(v2 + 20) = 2 * v8;
  if (v6)
  {
    v9 = 8 * v6;
    v10 = v9;
    v11 = v7;
    do
    {
      v12 = *(WTF **)v11;
      if (*(_QWORD *)v11)
      {
        ++*(_DWORD *)v12;
        v13 = *(WebCore::RenderLayer **)(*((_QWORD *)v12 + 1) + 144);
        WebCore::RenderLayer::updateLayerScrollableArea(v13);
        v14 = (WebCore::RenderLayerScrollableArea *)*((_QWORD *)v13 + 33);
        if (v14)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v14);
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, a2);
        else
          --*(_DWORD *)v12;
      }
      else
      {
        WebCore::RenderLayer::updateScrollInfoAfterLayout(MEMORY[0x90]);
      }
      v11 = (WTF *)((char *)v11 + 8);
      v10 -= 8;
    }
    while (v10);
    v15 = (uint64_t *)v7;
    do
    {
      this = (WTF **)*v15;
      *v15 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
          this = (WTF **)WTF::fastFree((WTF *)this, a2);
        else
          --*(_DWORD *)this;
      }
      ++v15;
      v9 -= 8;
    }
    while (v9);
  }
  if (v7)
    return (WTF **)WTF::fastFree(v7, a2);
  return this;
}

uint64_t WebCore::RenderBlock::shouldResetChildLogicalHeightBeforeLayout(WebCore::RenderBlock *this, const WebCore::RenderBox *a2)
{
  return 0;
}

WTF *WebCore::appendChildLayoutDeltas(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  char v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int v20;

  v14[0] = a1;
  v16 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 8) + 16) & 0x20) != 0
    || (*(_BYTE *)(a1 + 123) & 4) == 0)
  {
    v3 = (*(_DWORD *)(a1 + 124) & 8) == 0;
  }
  else
  {
    v3 = (*(unsigned __int8 *)(a1 + 124) >> 3) & 1;
  }
  v15 = v3;
  if (!v3)
  {
    v8 = *(unsigned int *)(a1 + 64);
    if (v8 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v9 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v9)
      {
        if ((*(_BYTE *)(v9 + 45) & 4) != 0)
        {
          v10 = 1;
          v11 = 1;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 8) + 12) > v11)
            {
              v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 8) + 12);
              v11 = v10;
            }
            v12 = *(unsigned int *)(v9 + 47) | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32);
            if (!v12)
              break;
            v9 = *(_QWORD *)(v12 + 8);
            if (!v9)
              break;
          }
          while ((*(_BYTE *)(v9 + 45) & 4) != 0);
          v16 = v10;
        }
      }
    }
  }
  v14[1] = 0;
  v20 = -1;
  for (i = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)v14);
        i;
        i = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)v14))
  {
    if ((*(_DWORD *)(i + 20) & 0x1800000) != 0x1000000)
    {
      v13 = 0;
      v6 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
      {
        WTF::Vector<WebCore::LayoutSize,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayoutSize>(a2, (unint64_t)&v13);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = 0;
        ++*(_DWORD *)(a2 + 12);
      }
    }
  }
  result = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v17)
    return (WTF *)WTF::fastFree((WTF *)(v17 - 16), v5);
  return result;
}

uint64_t WebCore::gatherFlexChildrenInfo(WebCore *this, WebCore::FlexBoxIterator *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, BOOL *a6)
{
  char v9;
  uint64_t result;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;

  v9 = (char)a2;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = -1;
  result = WebCore::FlexBoxIterator::next(this);
  if (result)
  {
    if ((v9 & 1) != 0)
    {
      do
      {
        if ((*(_DWORD *)(result + 20) & 0x1800000) != 0x1000000
          && *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 32) + 8) + 4) > 0.0)
        {
          v13 = result;
          WebCore::RenderBox::clearOverridingContentSize(result, v12);
          *(_BYTE *)a5 = 1;
          v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 88) + 32) + 8) + 8);
          if (*a4 - 1 >= v14)
            *a4 = v14;
          if (v14 > *a3)
            *a3 = v14;
        }
        result = WebCore::FlexBoxIterator::next(this);
      }
      while (result);
    }
    else
    {
      do
      {
        if ((*(_DWORD *)(result + 20) & 0x1800000) != 0x1000000
          && *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 32) + 8) + 4) > 0.0)
        {
          v15 = result;
          WebCore::RenderBox::clearOverridingContentSize(result, v12);
          v16 = *(_DWORD *)(v15 + 20);
          if ((v16 & 0x20) == 0)
            *(_DWORD *)(v15 + 20) = v16 | 0x20;
          *(_BYTE *)a5 = 1;
          v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 32) + 8) + 8);
          if (*a4 - 1 >= v17)
            *a4 = v17;
          if (v17 > *a3)
            *a3 = v17;
        }
        result = WebCore::FlexBoxIterator::next(this);
      }
      while (result);
    }
  }
  return result;
}

void WebCore::RenderBlock::markPositionedObjectsForLayout(WebCore::RenderBlock *this)
{
  int v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  WebCore::RenderObject *v13;

  {
    v1 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
  }
  else
  {
    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
    unk_1ECE91358 = 0u;
    v1 = 1;
  }
  DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v1;
  v2 = *((_QWORD *)this + 1);
  if (v2 && *(_QWORD *)(v2 + 8) && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
  {
    v3 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
    v4 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v7);
      if (!v9)
        break;
      if (v9 != -1 && v9 == v2)
      {
        v11 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v7 + 8);
        if (v11)
        {
          v12 = *(_QWORD **)(v11 + 8);
          if (v12)
          {
            while (1)
            {
              v13 = *(WebCore::RenderObject **)(*v12 + 8);
              if (v13)
                break;
              v12 = (_QWORD *)v12[2];
              if (!v12)
                return;
            }
LABEL_17:
            WebCore::RenderElement::setChildNeedsLayout(v13, 1);
            while (1)
            {
              v12 = (_QWORD *)v12[2];
              if (!v12)
                break;
              v13 = *(WebCore::RenderObject **)(*v12 + 8);
              if (v13)
              {
                ++*(_DWORD *)(v11 + 24);
                goto LABEL_17;
              }
            }
            ++*(_DWORD *)(v11 + 24);
          }
        }
        return;
      }
      v7 = (v7 + i) & v3;
    }
  }
}

WebCore::DocumentLoader *WebCore::DocumentLoader::DocumentLoader(WebCore::DocumentLoader *this, const WebCore::ResourceRequest *a2, unsigned int **a3)
{
  char *v6;
  WebCore::CachedResourceLoader *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  __int128 v17;
  unsigned int *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  const void *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  const void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  char v34;
  int64x2_t v35;
  unint64_t StatusReg;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int64x2_t v43;
  uint64_t (*v44)();
  void *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 7) = &unk_1E33F3530;
  v6 = (char *)this + 56;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = off_1E33F3408;
  *((_QWORD *)this + 4) = &unk_1E33F34B0;
  *((_QWORD *)this + 5) = &unk_1E33F34E0;
  *((_QWORD *)this + 6) = 0;
  v7 = (WebCore::CachedResourceLoader *)WTF::fastMalloc((WTF *)0x118);
  *((_QWORD *)this + 9) = WebCore::CachedResourceLoader::CachedResourceLoader(v7, this);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 139) = 0u;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::DocumentLoader *)((char *)this + 160), a2);
  v8 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 39) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 20);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 40) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 21);
  if (v10)
    ++*v10;
  *((_QWORD *)this + 41) = v10;
  v12 = (uint64_t *)((char *)a2 + 176);
  v11 = *((_QWORD *)a2 + 22);
  *((_BYTE *)this + 344) = *((_BYTE *)a2 + 184);
  *((_QWORD *)this + 42) = v11;
  v13 = (const void *)*((_QWORD *)a2 + 24);
  *((_QWORD *)this + 44) = v13;
  if (v13)
    CFRetain(v13);
  v14 = *a3;
  if (*a3)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  *((_QWORD *)this + 45) = v14;
  v16 = a3[1];
  if (v16)
    *v16 += 2;
  *((_QWORD *)this + 46) = v16;
  v17 = *((_OWORD *)a3 + 2);
  *(_OWORD *)((char *)this + 376) = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)this + 392) = v17;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::DocumentLoader *)((char *)this + 408), (const WebCore::ResourceResponseBase *)(a3 + 6));
  v18 = a3[36];
  *((_QWORD *)this + 81) = v18;
  if (v18)
    CFRetain(v18);
  *((_BYTE *)this + 656) = *((_BYTE *)a3 + 296);
  *((_BYTE *)this + 664) = *((_BYTE *)a3 + 304);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::DocumentLoader *)((char *)this + 672), a2);
  v19 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v19)
    *v19 += 2;
  *((_QWORD *)this + 103) = v19;
  v20 = (_DWORD *)*((_QWORD *)a2 + 20);
  if (v20)
    *v20 += 2;
  *((_QWORD *)this + 104) = v20;
  v21 = (_DWORD *)*((_QWORD *)a2 + 21);
  if (v21)
    ++*v21;
  *((_QWORD *)this + 105) = v21;
  v22 = *v12;
  *((_BYTE *)this + 856) = *((_BYTE *)a2 + 184);
  *((_QWORD *)this + 106) = v22;
  v23 = (const void *)*((_QWORD *)a2 + 24);
  *((_QWORD *)this + 108) = v23;
  if (v23)
    CFRetain(v23);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::DocumentLoader *)((char *)this + 872), a2);
  v24 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v24)
    *v24 += 2;
  *((_QWORD *)this + 128) = v24;
  v25 = (_DWORD *)*((_QWORD *)a2 + 20);
  if (v25)
    *v25 += 2;
  *((_QWORD *)this + 129) = v25;
  v26 = (_DWORD *)*((_QWORD *)a2 + 21);
  if (v26)
    ++*v26;
  *((_QWORD *)this + 130) = v26;
  v27 = *v12;
  *((_BYTE *)this + 1056) = *((_BYTE *)a2 + 184);
  *((_QWORD *)this + 131) = v27;
  v28 = (const void *)*((_QWORD *)a2 + 24);
  *((_QWORD *)this + 133) = v28;
  if (v28)
    CFRetain(v28);
  v48 = 0;
  WTF::URL::invalidate((WTF::URL *)&v48);
  v29 = v48;
  if (v48)
    *(_DWORD *)v48 += 2;
  *((_QWORD *)this + 134) = v29;
  *(_OWORD *)((char *)this + 1080) = v49;
  *(_OWORD *)((char *)this + 1096) = v50;
  *((_QWORD *)this + 139) = 0;
  WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 1112));
  *((_QWORD *)this + 144) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 145) = v51;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_DWORD *)this + 304) = 0x10000;
  v31 = *((_BYTE *)this + 1220) & 0x80 | 4;
  *((_BYTE *)this + 1220) = v31;
  *((_QWORD *)this + 153) = 0;
  v32 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v32 += 2;
    v31 = *((_BYTE *)this + 1220);
  }
  *((_QWORD *)this + 154) = v32;
  *((_QWORD *)this + 155) = 0;
  *((_BYTE *)this + 1248) = 0;
  *((_BYTE *)this + 1252) = 0;
  *((_BYTE *)this + 1256) = *((_BYTE *)this + 1256) & 0xE0 | 5;
  *((_BYTE *)this + 1220) = v31 | 2;
  v33 = v48;
  v48 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v30);
    else
      *(_DWORD *)v33 -= 2;
  }
  *((_OWORD *)this + 79) = 0u;
  WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 1272));
  *((_BYTE *)this + 1400) = 0;
  *((_WORD *)this + 704) = 0;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_BYTE *)this + 1392) = 0;
  v34 = *((_BYTE *)this + 1410);
  *((_QWORD *)this + 177) = 0x7FF8000000000000;
  v35 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 89) = v35;
  *((_QWORD *)this + 180) = 0x7FF8000000000000;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *((_QWORD *)this + 183) = 0x8000000000000000;
  *((int64x2_t *)this + 92) = v35;
  *((_QWORD *)this + 186) = 0x7FF8000000000000;
  *((_BYTE *)this + 1496) &= 0xF0u;
  *((_WORD *)this + 752) &= 0xC000u;
  *((_BYTE *)this + 1506) = *((_BYTE *)this + 1506) & 0xF8 | 2;
  *((_QWORD *)this + 189) = 0;
  *((_BYTE *)this + 1520) = 0;
  *((_BYTE *)this + 1410) = v34 & 0xC0 | 5;
  *(_OWORD *)((char *)this + 1528) = 0u;
  WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 1536));
  *((_QWORD *)this + 199) = 0;
  *((_QWORD *)this + 197) = 0;
  *(_QWORD *)((char *)this + 1582) = 0;
  *((_BYTE *)this + 1600) = 1;
  *((_QWORD *)this + 201) = 0;
  *((_BYTE *)this + 1616) = 0;
  *((_QWORD *)this + 203) = 0;
  WebCore::NavigationAction::NavigationAction((WebCore::DocumentLoader *)((char *)this + 1632));
  *((_BYTE *)this + 2576) = 0;
  *((_BYTE *)this + 2584) = 0;
  *((_QWORD *)this + 324) = 0;
  *((_QWORD *)this + 316) = 0;
  *((_QWORD *)this + 318) = 0;
  *((_QWORD *)this + 317) = 0;
  *((_BYTE *)this + 2552) = 0;
  *((_QWORD *)this + 325) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 163) = 0u;
  *((_OWORD *)this + 164) = 0u;
  v37 = *(unsigned int **)(StatusReg + 736);
  if (!v37)
    v37 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  *((_QWORD *)this + 330) = v37;
  *((_QWORD *)this + 325) = off_1E31F7378;
  v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v39 = off_1E33F37C0;
  v39[1] = WebCore::DocumentLoader::substituteResourceDeliveryTimerFired;
  v39[2] = 0;
  v39[3] = this;
  *((_QWORD *)this + 331) = v39;
  *(_OWORD *)((char *)this + 2685) = 0u;
  *((_OWORD *)this + 167) = 0u;
  *((_OWORD *)this + 166) = 0u;
  *(_OWORD *)((char *)this + 2761) = 0u;
  *((_OWORD *)this + 172) = 0u;
  *((_OWORD *)this + 171) = 0u;
  *((_OWORD *)this + 170) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *((_QWORD *)this + 358) = 0;
  *((_OWORD *)this + 178) = 0u;
  *((_OWORD *)this + 177) = 0u;
  *((_OWORD *)this + 176) = 0u;
  *((_OWORD *)this + 175) = 0u;
  *((_OWORD *)this + 174) = 0u;
  v40 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v40 = 0;
  v41 = *((_QWORD *)this + 8);
  if (!v41)
  {
    v41 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = v6;
    v47 = (WTF *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v41;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
      {
        WTF::fastFree(v47, v46);
        v41 = *((_QWORD *)this + 8);
      }
      else
      {
        --*(_DWORD *)v47;
      }
    }
  }
  ++*(_DWORD *)v41;
  *(_QWORD *)(v40 + 8) = v41;
  *(_BYTE *)(v40 + 16) = 1;
  *(_OWORD *)(v40 + 24) = 0u;
  *(_OWORD *)(v40 + 40) = 0u;
  *(_QWORD *)(v40 + 56) = 0;
  *((_QWORD *)this + 359) = v40;
  *((_OWORD *)this + 180) = 0u;
  *((_OWORD *)this + 181) = 0u;
  WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 2904));
  *((_QWORD *)this + 370) = 0;
  *((_QWORD *)this + 368) = 0;
  *(_QWORD *)((char *)this + 2950) = 0;
  *((_BYTE *)this + 2968) = 1;
  *((_QWORD *)this + 372) = 0;
  WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 2976));
  *(_OWORD *)((char *)this + 3016) = 0u;
  WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 3024));
  *((_QWORD *)this + 383) = 0;
  WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 3064));
  *((_BYTE *)this + 3192) = 0;
  *((_WORD *)this + 1600) = 0;
  *((_OWORD *)this + 194) = 0u;
  *((_OWORD *)this + 195) = 0u;
  *((_OWORD *)this + 196) = 0u;
  *((_OWORD *)this + 197) = 0u;
  *((_OWORD *)this + 198) = 0u;
  *((_BYTE *)this + 3184) = 0;
  v42 = *((_BYTE *)this + 3202);
  v43 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)this + 401) = 0x7FF8000000000000;
  *((int64x2_t *)this + 201) = v43;
  *((_QWORD *)this + 404) = 0x7FF8000000000000;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *((_QWORD *)this + 407) = 0x8000000000000000;
  *((int64x2_t *)this + 204) = v43;
  *((_QWORD *)this + 410) = 0x7FF8000000000000;
  *((_BYTE *)this + 3288) &= 0xF0u;
  *((_WORD *)this + 1648) &= 0xC000u;
  *((_BYTE *)this + 3298) = *((_BYTE *)this + 3298) & 0xF8 | 2;
  *((_QWORD *)this + 413) = 0;
  *((_BYTE *)this + 3312) = 0;
  *((_BYTE *)this + 3202) = v42 & 0xC0 | 5;
  *((_BYTE *)this + 3320) = 1;
  *(_QWORD *)((char *)this + 3373) = 0;
  *((_OWORD *)this + 210) = 0u;
  *((_QWORD *)this + 418) = 0;
  *(_QWORD *)((char *)this + 3349) = 0;
  *((_OWORD *)this + 208) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 3400) = 0u;
  *(_OWORD *)((char *)this + 3413) = 0u;
  *((_BYTE *)this + 3432) = 1;
  *((_OWORD *)this + 217) = 0u;
  *((_QWORD *)this + 436) = 0;
  *((_QWORD *)this + 438) = 0;
  *((_QWORD *)this + 432) = 0;
  *((_OWORD *)this + 215) = 0u;
  *((_BYTE *)this + 3512) = 2;
  *((_WORD *)this + 1757) = 0;
  *((_BYTE *)this + 3516) = 0;
  *((_BYTE *)this + 3518) = 0;
  *(_QWORD *)((char *)this + 3525) = 0;
  *((_QWORD *)this + 440) = 0;
  *(_WORD *)((char *)this + 3533) = 257;
  *((_BYTE *)this + 3535) = 1;
  if (*a3)
    v44 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  else
    v44 = 0;
  *((_BYTE *)this + 3536) = v44 != 0;
  *(_OWORD *)((char *)this + 3537) = 0uLL;
  *((_BYTE *)this + 3553) = 1;
  return this;
}

WebCore::CachedResourceLoader *WebCore::CachedResourceLoader::CachedResourceLoader(WebCore::CachedResourceLoader *this, WebCore::DocumentLoader *a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  char *v12;
  void *v14;
  WTF *v15;

  v3 = 0;
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)((char *)this + 53) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 29) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (a2)
  {
    v3 = *((_QWORD *)a2 + 8);
    if (!v3)
    {
      v12 = (char *)a2 + 56;
      v3 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v3 = 1;
      *(_QWORD *)(v3 + 8) = v12;
      v15 = (WTF *)*((_QWORD *)a2 + 8);
      *((_QWORD *)a2 + 8) = v3;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, v14);
          v3 = *((_QWORD *)a2 + 8);
          if (!v3)
            goto LABEL_2;
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    ++*(_DWORD *)v3;
  }
LABEL_2:
  *((_QWORD *)this + 10) = v3;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 18) = v5;
  *((_QWORD *)this + 13) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33F89D8;
  v7[1] = WebCore::CachedResourceLoader::warnUnusedPreloads;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 19) = v7;
  *((_QWORD *)this + 20) = off_1E3407128;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v8 = *(unsigned int **)(StatusReg + 736);
  if (!v8)
    v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 25) = v8;
  *((_QWORD *)this + 20) = off_1E31F7378;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E33F89D8;
  v10[1] = WebCore::CachedResourceLoader::garbageCollectDocumentResources;
  v10[2] = 0;
  v10[3] = this;
  *((_QWORD *)this + 26) = v10;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = &off_1E33F9020;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_WORD *)this + 136) = 257;
  *((_BYTE *)this + 274) = 0;
  return this;
}

WebCore::NavigationAction *WebCore::NavigationAction::NavigationAction(WebCore::NavigationAction *this)
{
  WTF::StringImpl *v2;
  __int128 v3;
  __int128 v4;
  WTF::StringImpl *v5;
  char v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 224) = 0;
  v11 = 0;
  WTF::URL::invalidate((WTF::URL *)&v11);
  v2 = v11;
  if (v11)
    *(_DWORD *)v11 += 2;
  *((_QWORD *)this + 30) = v2;
  v3 = v12;
  *((_QWORD *)this + 35) = 0;
  v4 = v13;
  *(_OWORD *)((char *)this + 248) = v3;
  *(_OWORD *)((char *)this + 264) = v4;
  WTF::URL::invalidate((WebCore::NavigationAction *)((char *)this + 280));
  *((_QWORD *)this + 40) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 41) = v14;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 96) = 0x10000;
  v6 = *((_BYTE *)this + 388) & 0x80 | 4;
  *((_BYTE *)this + 388) = v6;
  *((_QWORD *)this + 49) = 0;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v7 += 2;
    v6 = *((_BYTE *)this + 388);
  }
  *((_QWORD *)this + 50) = v7;
  *((_QWORD *)this + 51) = 0;
  *((_BYTE *)this + 416) = 0;
  *((_BYTE *)this + 420) = 0;
  *((_BYTE *)this + 424) = *((_BYTE *)this + 424) & 0xE0 | 5;
  *((_BYTE *)this + 388) = v6 | 2;
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      v8 = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_QWORD *)this + 54) = 0;
  *((_BYTE *)this + 440) = 0;
  *((_BYTE *)this + 445) = 0;
  *((_BYTE *)this + 448) = 0;
  *((_BYTE *)this + 476) = 0;
  if (WTF::isMainThread(v8))
  {
    {
      v9 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v9 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)this + 60) = v9;
  *((_QWORD *)this + 61) = 0;
  *((_BYTE *)this + 496) = 0;
  *((_BYTE *)this + 512) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_BYTE *)this + 536) = 0;
  *((_BYTE *)this + 544) = 0;
  *((_BYTE *)this + 856) = 0;
  *((_DWORD *)this + 216) = 0;
  *(_WORD *)((char *)this + 869) = 0;
  *((_DWORD *)this + 219) = 0;
  *(_DWORD *)((char *)this + 873) = 0;
  *((_BYTE *)this + 880) = 1;
  return this;
}

uint64_t *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  *a1 = 0;
  if (!*a2)
    return a1;
  v4 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v4)
    return a1;
  v6 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v4)
      goto LABEL_9;
  }
  else if (3 * v8 > 4 * v4)
  {
LABEL_7:
    v9 = (double)v4;
    v10 = (double)v8;
    v11 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v8) = 2 * v8;
  if (v8 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v9 = (double)v4;
  v10 = (double)v8;
  v11 = 0.416666667;
LABEL_10:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastZeroedMalloc((WTF *)(8 * v12 + 16));
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v15 = v14;
  v17 = v16;
  if (*a2)
    v18 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v18 = 0;
  if ((WTF::StringImpl **)v18 != v14)
  {
    do
    {
      v19 = *a1;
      if (*a1)
        v20 = *(_DWORD *)(v19 - 8);
      else
        v20 = 0;
      v21 = *((_DWORD *)*v15 + 4);
      if (v21 < 0x100)
        v22 = WTF::StringImpl::hashSlowCase(*v15);
      else
        v22 = v21 >> 8;
      v23 = 0;
      do
      {
        v24 = v22 & v20;
        v22 = ++v23 + v24;
      }
      while (*(_QWORD *)(v19 + 8 * v24));
      v25 = *v15;
      if (*v15)
        *(_DWORD *)v25 += 2;
      *(_QWORD *)(v19 + 8 * v24) = v25;
      while (++v15 != v17)
      {
        if ((unint64_t)*v15 + 1 > 1)
          goto LABEL_32;
      }
      v15 = v17;
LABEL_32:
      ;
    }
    while (v15 != (WTF::StringImpl **)v18);
  }
  return a1;
}

uint64_t WebCore::PlatformMediaSessionManager::forEachMatchingSession(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v3 = *(unsigned int *)(result + 44);
  if (!(_DWORD)v3)
    return result;
  v6 = 0;
  v7 = *(_QWORD *)(result + 32);
  v8 = v7 + 8 * v3;
  do
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*(_QWORD *)v7 + 8));
    if (!(_DWORD)result)
      goto LABEL_12;
    v10 = v6;
    if (v6 == (_DWORD)v22)
    {
      result = WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v21, v6 + 1, v7);
      v10 = HIDWORD(v22);
      v11 = v21;
      v12 = *(unsigned int **)result;
      if (!*(_QWORD *)result)
      {
        v6 = HIDWORD(v22);
        goto LABEL_11;
      }
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      goto LABEL_10;
    }
    v11 = v21;
    v12 = *(unsigned int **)v7;
    if (*(_QWORD *)v7)
    {
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 + 1, v12));
LABEL_10:
      v6 = HIDWORD(v22);
    }
LABEL_11:
    *((_QWORD *)v11 + v10) = v12;
    HIDWORD(v22) = ++v6;
LABEL_12:
    v7 += 8;
  }
  while (v7 != v8);
  v15 = v21;
  if (v6)
  {
    v16 = (WTF *)((char *)v21 + 8 * v6);
    v17 = 8 * v6;
    v18 = v21;
    do
    {
      if (*(_QWORD *)v18)
      {
        v9 = *(void **)(*(_QWORD *)v18 + 8);
        if (v9)
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
      }
      v18 = (WTF *)((char *)v18 + 8);
      v17 -= 8;
    }
    while (v17);
    do
    {
      result = *(_QWORD *)v15;
      *(_QWORD *)v15 = 0;
      if (result)
      {
        do
        {
          v19 = __ldaxr((unsigned int *)result);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)result));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v9);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
    v15 = v21;
  }
  if (v15)
    return WTF::fastFree(v15, v9);
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::sharedManager(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t result;
  WebCore::MediaSessionManageriOS *v2;
  WebCore::MediaSessionHelper *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  {
    result = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      return result;
  }
  else
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
  v2 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
  v3 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v2);
  {
    sharedHelperInstance(void)::helper = 0;
    goto LABEL_5;
  }
  v4 = sharedHelperInstance(void)::helper;
  if (!sharedHelperInstance(void)::helper)
  {
LABEL_5:
    WebCore::MediaSessionHelper::resetSharedHelper(v3);
    v4 = sharedHelperInstance(void)::helper;
  }
  WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v4 + 16, (_QWORD *)v2 + 50, (uint64_t)v6);
  v5 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v2;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v2 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  }
  (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v2 + 136))(v2);
  return WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
}

void sub_1944302CC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WebCore::MediaSessionManageriOS::resetRestrictions(WebCore::MediaSessionManageriOS *this)
{
  WebCore::MediaSessionManageriOS *v1;
  uint64_t v2;
  int *v3;
  unint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  WTF::String *v45;
  _QWORD v46[4];
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  const char *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  uint64_t v58;

  v1 = this;
  v58 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 16);
  *(_QWORD *)&buf = "MediaSessionManageriOS";
  *((_QWORD *)&buf + 1) = 23;
  v54 = "resetRestrictions";
  v55 = 0;
  if (*(_BYTE *)(v2 + 12))
    this = (WebCore::MediaSessionManageriOS *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  *(_QWORD *)((char *)v1 + 12) = 0;
  v3 = (int *)((char *)v1 + 12);
  *(_QWORD *)((char *)v1 + 20) = 0;
  result = WTF::ramSize(this);
  if (result >> 30)
  {
    v13 = *v3;
LABEL_89:
    *((_DWORD *)v1 + 6) |= 2u;
    v44 = *((_DWORD *)v1 + 4) | 0x23;
    *((_DWORD *)v1 + 3) = v13 | 2;
    *((_DWORD *)v1 + 4) = v44;
    return result;
  }
  v5 = *((_QWORD *)v1 + 16);
  v46[0] = "MediaSessionManageriOS";
  v46[1] = 23;
  v46[2] = "resetRestrictions";
  v46[3] = 0;
  result = WTF::ramSize((WTF *)result);
  v45 = (WTF::String *)result;
  if (!*(_BYTE *)(v5 + 12))
  {
LABEL_88:
    v13 = *v3 | 4;
    *v3 = v13;
    goto LABEL_89;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v46);
  WTF::String::String((WTF::String *)&v50, "restricting video in background tabs because system memory = ");
  result = WTF::String::number(v45);
  if (v51)
  {
    v6 = *((_DWORD *)v51 + 1);
    if (v50)
      goto LABEL_7;
LABEL_96:
    v7 = 0;
    if (v49)
      goto LABEL_8;
LABEL_97:
    v8 = 0;
    goto LABEL_9;
  }
  v6 = 0;
  if (!v50)
    goto LABEL_96;
LABEL_7:
  v7 = *((_DWORD *)v50 + 1);
  if (!v49)
    goto LABEL_97;
LABEL_8:
  v8 = *((_DWORD *)v49 + 1);
LABEL_9:
  if ((v8 | v7) < 0)
    goto LABEL_100;
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  v11 = v9;
  if (v6 < 0)
    goto LABEL_100;
  if (v11)
    goto LABEL_100;
  result = (v6 + v10);
  if (__OFADD__(v6, v10))
    goto LABEL_100;
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
  {
    v12 = 0;
    goto LABEL_24;
  }
  if (v50)
  {
    v14 = *((_DWORD *)v50 + 4);
    v12 = (v14 >> 2) & 1;
    if (v49 && (v14 & 4) != 0)
      goto LABEL_23;
  }
  else
  {
    if (v49)
    {
LABEL_23:
      v12 = (*((unsigned __int8 *)v49 + 16) >> 2) & 1;
      goto LABEL_24;
    }
    v12 = 1;
  }
LABEL_24:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, v51, (uint64_t)v50, (uint64_t)v49, &buf);
  v52 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v51;
    v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = qword_1ECE7C4A0;
    v20 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v47 ? (char *)v47 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v47;
      v47 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (WebCore::LogMedia)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v29 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v30 = *v28;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v46);
                LODWORD(v54) = 0;
                WTF::String::String((WTF::String *)&v55, "restricting video in background tabs because system memory = ");
                v56 = 0;
                WTF::String::number(v45);
                v47 = 0;
                v48 = 0;
                v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                LODWORD(v48) = 3;
                v47 = v31;
                v32 = HIDWORD(v48);
                *((_DWORD *)v31 + 4 * HIDWORD(v48)) = buf;
                v33 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                *((_DWORD *)v31 + 4 * (v32 + 1)) = (_DWORD)v54;
                v34 = v55;
                if (v55)
                  *(_DWORD *)v55 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                *((_DWORD *)v31 + 4 * (v32 + 2)) = v56;
                v35 = v57;
                if (v57)
                  *(_DWORD *)v57 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                HIDWORD(v48) = v32 + 3;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, &WebCore::LogMedia, 0, &v47);
                v36 = v47;
                if (HIDWORD(v48))
                {
                  v37 = 16 * HIDWORD(v48);
                  v38 = (WTF::StringImpl **)((char *)v47 + 8);
                  do
                  {
                    v39 = *v38;
                    *v38 = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2)
                        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v39 -= 2;
                    }
                    v38 += 2;
                    v37 -= 16;
                  }
                  while (v37);
                  v36 = v47;
                }
                if (v36)
                {
                  v47 = 0;
                  LODWORD(v48) = 0;
                  WTF::fastFree(v36, v21);
                }
                v40 = v57;
                v57 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = v55;
                v55 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v29);
            }
            v43 = __ldxr(v23);
            if (v43 == 1)
            {
              v3 = (int *)((char *)v1 + 12);
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
              v3 = (int *)((char *)v1 + 12);
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = (unint64_t)v52;
    v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_88;
  }
LABEL_100:
  __break(0xC471u);
  return result;
}

void sub_194430880(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  if (a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, a2);
    else
      *(_DWORD *)a23 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::CoreAudioSharedUnit::unit(WebCore::CoreAudioSharedUnit *this)
{
  WebCore::AudioSessionIOS *v2;
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _BYTE v7[24];

  {
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
    *(_QWORD *)algn_1EE2F8E58 = 0;
    byte_1EE2F8E60 = 1;
    qword_1EE2F8E68 = 0x3FF0000000000000;
    v2 = WebCore::AudioSession::sharedSession(this);
    dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v2 + 72))(v2);
    word_1EE2F8E74 = 0;
    byte_1EE2F8E76 = 0;
    byte_1EE2F8E90 = 0;
    qword_1EE2F8E98 = 0;
    unk_1EE2F8EA0 = 0;
    byte_1EE2F8EA8 = 0;
    qword_1EE2F8E78 = 0;
    byte_1EE2F8E80 = 0;
    qword_1EE2F8EB0 = 0;
    unk_1EE2F8EB8 = 0;
    word_1EE2F8EC0 = 0;
    byte_1EE2F8EC2 = 1;
    qword_1EE2F8EC8 = 0;
    *(_QWORD *)&dword_1EE2F8ED0 = 0;
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v7);
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
    byte_1EE2F8F50 = 0;
    byte_1EE2F8FB8 = 0;
    qword_1EE2F8FC0 = 0;
    word_1EE2F8FC8 = 0;
    qword_1EE2F8FD0 = 0;
    byte_1EE2F8FD8 = 0;
    byte_1EE2F9040 = 0;
    unk_1EE2F8ED8 = 0u;
    *(_OWORD *)&qword_1EE2F8EE8 = 0u;
    unk_1EE2F8EF1 = 0u;
    xmmword_1EE2F8F58 = 0u;
    LOBYTE(qword_1EE2F8F68) = 0;
    qword_1EE2F9048 = 0x1770000001F40;
    xmmword_1EE2F9050 = 0u;
    qword_1EE2F9060 = (uint64_t)off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    xmmword_1EE2F9068 = 0u;
    *(_OWORD *)algn_1EE2F9078 = 0u;
    v4 = *(unsigned int **)(StatusReg + 736);
    if (!v4)
      v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    qword_1EE2F9088 = (uint64_t)v4;
    qword_1EE2F9060 = (uint64_t)off_1E31F7378;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E341BA48;
    v6[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
    v6[2] = 0;
    v6[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    qword_1EE2F9090 = (uint64_t)v6;
    byte_1EE2F9098 = 0;
    byte_1EE2F90A0 = 0;
    dword_1EE2F90A8 = 0;
    qword_1EE2F90B8 = 0;
    qword_1EE2F90C0 = 0;
    qword_1EE2F90B0 = 0;
    byte_1EE2F90C8 = 1;
  }
  return &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
}

WebCore::MediaSessionManageriOS *WebCore::MediaSessionManageriOS::MediaSessionManageriOS(WebCore::MediaSessionManageriOS *this)
{
  WebCore::MediaSessionManagerCocoa *v2;
  char *v3;
  WebCore::AudioSessionIOS *v4;

  v2 = WebCore::MediaSessionManagerCocoa::MediaSessionManagerCocoa(this);
  v3 = (char *)v2 + 416;
  *((_QWORD *)v2 + 53) = 0;
  *((_QWORD *)v2 + 54) = 0;
  *(_QWORD *)v2 = off_1E32074A8;
  *((_QWORD *)v2 + 17) = &unk_1E3207660;
  *((_QWORD *)v2 + 19) = &unk_1E3207688;
  *((_QWORD *)v2 + 50) = &unk_1E32076C0;
  *((_QWORD *)v2 + 51) = 0;
  *((_QWORD *)v2 + 52) = &unk_1E3207728;
  *(_DWORD *)((char *)v2 + 439) = 0;
  v4 = WebCore::AudioSession::sharedSession(v2);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v4 + 208))(v4, v3);
  return this;
}

void sub_194430CB0(_Unwind_Exception *a1, void *a2)
{
  WebCore::MediaSessionManagerCocoa *v2;
  _DWORD **v3;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)v2 + 53);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)v2 + 53);
    *((_QWORD *)v2 + 53) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)v2 + 53) = 0;
  }
  v10 = *((_QWORD *)v2 + 51);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)v2 + 51);
    *((_QWORD *)v2 + 51) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)v2 + 51) = 0;
  }
  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa(v2);
  _Unwind_Resume(a1);
}

WebCore::AudioSessionIOS *WebCore::AudioSession::sharedSession(WebCore::AudioSession *this)
{
  WebCore::AudioSessionIOS *result;
  WebCore::AudioSessionIOS *v2;

  {
    if (byte_1ECE90DC0)
      return (WebCore::AudioSessionIOS *)WebCore::sharedAudioSession(void)::session;
  }
  else
  {
    LOBYTE(WebCore::sharedAudioSession(void)::session) = 0;
    byte_1ECE90DC0 = 0;
  }
  WebCore::AudioSession::create(&v2);
  WebCore::AudioSession::setSharedSession((uint64_t *)&v2);
  result = v2;
  if (v2)
    result = (WebCore::AudioSessionIOS *)(*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v2 + 8))(v2);
  {
    if (byte_1ECE90DC0)
      return (WebCore::AudioSessionIOS *)WebCore::sharedAudioSession(void)::session;
    __break(1u);
  }
  LOBYTE(WebCore::sharedAudioSession(void)::session) = 0;
  byte_1ECE90DC0 = 0;
  __break(1u);
  return result;
}

WebCore::MediaSessionManagerCocoa *WebCore::MediaSessionManagerCocoa::MediaSessionManagerCocoa(WebCore::MediaSessionManagerCocoa *this)
{
  int64x2_t *v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::AudioSessionIOS *v5;
  WTF::RunLoop *v6;
  WTF::RunLoop *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;

  v2 = (int64x2_t *)WebCore::PlatformMediaSessionManager::PlatformMediaSessionManager(this);
  v2->i64[0] = (uint64_t)off_1E3319F30;
  v2[8].i64[1] = (uint64_t)&unk_1E331A090;
  v2[9].i64[0] = 0;
  v2[9].i64[1] = (uint64_t)&unk_1E331A0B8;
  v2[10].i16[0] = 0;
  v2[10].i8[2] = 0;
  v2[10].i64[1] = 0;
  v2[11] = vdupq_n_s64(0x7FF8000000000000uLL);
  v2[12].i64[0] = 0;
  v2[12].i8[8] = 0;
  v2[19].i8[8] = 0;
  v3 = WebCore::s_platformStrategies;
  if (WebCore::s_platformStrategies)
  {
    v10 = WebCore::s_platformStrategies;
    v4 = atomic_load((unint64_t *)(WebCore::s_platformStrategies + 24));
    if (v4 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once((std::once_flag::_State_type *)(WebCore::s_platformStrategies + 24), &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>);
    }
    v2 = (int64x2_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 8))(*(_QWORD *)(v3 + 32));
  }
  else
  {
    v2[20].i64[0] = 0;
  }
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  v5 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v2);
  v6 = (WTF::RunLoop *)(*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v5 + 104))(v5);
  *((_QWORD *)this + 44) = v6;
  v7 = (WTF::RunLoop *)WTF::RunLoop::main(v6);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E331A2A8;
  v8[1] = WebCore::MediaSessionManagerCocoa::possiblyChangeAudioCategory;
  v8[2] = 0;
  v8[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebCore::MediaSessionManagerCocoa *)((char *)this + 360), v7);
  *((_QWORD *)this + 45) = off_1E32051C0;
  *((_QWORD *)this + 48) = v8;
  *((_WORD *)this + 196) = 0;
  if (WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(void)::onceToken != -1)
    dispatch_once(&WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(void)::onceToken, &__block_literal_global_37);
  return this;
}

void sub_194430F94(_Unwind_Exception *a1)
{
  uint64_t v1;
  WebCore::NowPlayingMetadata *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v7 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v1 + 328) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v3;
  *v3 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*(_BYTE *)(v1 + 312))
    WebCore::NowPlayingMetadata::~NowPlayingMetadata(v2, v6);
  v9 = *(WTF::StringImpl **)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(_QWORD *)(v1 + 144);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = *(unsigned int **)(v1 + 144);
    *(_QWORD *)(v1 + 144) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v6);
      }
    }
  }
  else
  {
    *(_QWORD *)(v1 + 144) = 0;
  }
  WebCore::PlatformMediaSessionManager::~PlatformMediaSessionManager((WebCore::PlatformMediaSessionManager *)v1, v6);
  _Unwind_Resume(a1);
}

id **WebCore::AudioSession::create@<X0>(WebCore::AudioSessionIOS **a1@<X8>)
{
  WebCore::AudioSessionIOS *v3;
  id *v5;

  v3 = (WebCore::AudioSessionIOS *)WTF::fastMalloc((WTF *)0x58);
  v5 = 0;
  *a1 = WebCore::AudioSessionIOS::AudioSessionIOS(v3);
  return WTF::UniqueRef<WebCore::AudioSessionIOS>::~UniqueRef(&v5);
}

WebCore::AudioSessionIOS *WebCore::AudioSessionIOS::AudioSessionIOS(WebCore::AudioSessionIOS *this)
{
  WebCore::AudioSessionCocoa *v2;
  WebInterruptionObserverHelper *v3;
  const void *v4;

  v2 = WebCore::AudioSessionCocoa::AudioSessionCocoa(this);
  *((_QWORD *)v2 + 7) = 0;
  *(_QWORD *)v2 = off_1E31F6AF0;
  *((_QWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 9) = 0;
  *((_BYTE *)v2 + 80) = 0;
  v3 = -[WebInterruptionObserverHelper initWithCallback:]([WebInterruptionObserverHelper alloc], "initWithCallback:", this);
  v4 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v3;
  if (v4)
    CFRelease(v4);
  return this;
}

WebCore::AudioSessionCocoa *WebCore::AudioSessionCocoa::AudioSessionCocoa(WebCore::AudioSessionCocoa *this)
{
  uint64_t v2;

  WebCore::AudioSession::AudioSession(this);
  *(_QWORD *)v2 = off_1E31F6910;
  *(_BYTE *)(v2 + 43) = 0;
  WTF::WorkQueue::create();
  return this;
}

void sub_194431200(_Unwind_Exception *a1, void *a2)
{
  WebCore::AudioSession *v2;

  WebCore::AudioSession::~AudioSession(v2, a2);
  _Unwind_Resume(a1);
}

double WebCore::AudioSession::AudioSession(WebCore::AudioSession *this)
{
  double result;

  *(_QWORD *)this = off_1E3408328;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_DWORD *)((char *)this + 39) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1E3408328;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_DWORD *)((char *)this + 39) = 0;
  return result;
}

id **WTF::UniqueRef<WebCore::AudioSessionIOS>::~UniqueRef(id **a1)
{
  id *v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::AudioSessionIOS::~AudioSessionIOS(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

uint64_t PAL::initAVAudioSession(PAL *this)
{
  if (qword_1ECE7DEF8 != -1)
    dispatch_once(&qword_1ECE7DEF8, &__block_literal_global_314);
  return qword_1ECE7DF00;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionInterruptionNotification(PAL *this)
{
  if (qword_1ECE7DB38 != -1)
    dispatch_once(&qword_1ECE7DB38, &__block_literal_global_179);
  return qword_1ECE7DB30;
}

void *WebCore::RealtimeMediaSourceCenter::singleton(WebCore::RealtimeMediaSourceCenter *this)
{
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  return &WebCore::RealtimeMediaSourceCenter::singleton(void)::center;
}

WebCore::RealtimeMediaSourceCenter *WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter(WebCore::RealtimeMediaSourceCenter *this)
{
  WTF::RunLoop::TimerBase *v2;
  WTF::RunLoop *v3;

  *(_DWORD *)this = 1;
  v2 = (WebCore::RealtimeMediaSourceCenter *)((char *)this + 8);
  v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  WTF::RunLoop::Timer::Timer<WebCore::RealtimeMediaSourceCenter>(v2, v3, (uint64_t)this);
  *(_OWORD *)((char *)this + 65) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  return this;
}

uint64_t WTF::RunLoop::Timer::Timer<WebCore::RealtimeMediaSourceCenter>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E3419658;
  v6[1] = WebCore::RealtimeMediaSourceCenter::triggerDevicesChangedObservers;
  v6[2] = 0;
  v6[3] = a3;
  result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E32051C0;
  *((_QWORD *)a1 + 3) = v6;
  return result;
}

void WebCore::CachedResourceLoader::~CachedResourceLoader(WebCore::CachedResourceLoader *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int **v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;

  v3 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v43 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v43)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v43));
      v44 = *(WTF **)(v4 + 16);
      if (v44)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        WTF::fastFree(v44, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::CachedResourceLoader::clearPreloads((uint64_t)this, (void *)1);
  if ((*((_QWORD *)this + 17) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::CachedResourceLoader *)((char *)this + 104));
  WebCore::KeepaliveRequestTracker::~KeepaliveRequestTracker((WebCore::CachedResourceLoader *)((char *)this + 232), v7);
  v9 = *((_QWORD *)this + 27);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = (unsigned int **)(v9 + 24 * i);
        v13 = *v12;
        if (*v12 != (unsigned int *)-1)
        {
          v14 = v9 + 24 * i;
          v15 = *(WTF::StringImpl **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::destroy(v15, v8);
              v13 = *v12;
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
          *v12 = 0;
          if (v13)
          {
            do
            {
              v16 = __ldaxr(v13);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v13));
            if (!v17)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v8);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  *((_QWORD *)this + 20) = off_1E31F7378;
  v18 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  WebCore::TimerBase::~TimerBase((WebCore::CachedResourceLoader *)((char *)this + 160));
  *((_QWORD *)this + 13) = off_1E31F7378;
  v19 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WebCore::TimerBase::~TimerBase((WebCore::CachedResourceLoader *)((char *)this + 104));
  v21 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v21)
  {
    v22 = (WTF *)*((_QWORD *)v21 + 1);
    while (v22)
    {
      v47 = v22;
      v22 = (WTF *)*((_QWORD *)v22 + 2);
      v48 = *(unsigned int **)v47;
      *(_QWORD *)v47 = 0;
      if (v48)
      {
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          v51 = v47;
          WTF::fastFree((WTF *)v48, v20);
          v47 = v51;
        }
      }
      WTF::fastFree(v47, v20);
    }
    if (*(_QWORD *)v21)
      WTF::fastFree((WTF *)(*(_QWORD *)v21 - 16), v20);
    WTF::fastFree(v21, v20);
  }
  v23 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, v20);
    else
      --*(_DWORD *)v23;
  }
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v24);
      v45 = *(unsigned int *)(v24 + 28);
      if ((_DWORD)v45)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v45));
      v46 = *(WTF **)(v24 + 16);
      if (v46)
      {
        *(_QWORD *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 24) = 0;
        WTF::fastFree(v46, v20);
      }
      WTF::fastFree((WTF *)v24, v20);
    }
  }
  v27 = *((_QWORD *)this + 8);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    if ((_DWORD)v28)
    {
      v29 = (unsigned int **)(v27 + 8);
      do
      {
        if (*(v29 - 1) != (unsigned int *)-1)
        {
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v29, v20);
          v30 = (WTF::StringImpl *)*(v29 - 1);
          *(v29 - 1) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v20);
            else
              *(_DWORD *)v30 -= 2;
          }
        }
        v29 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v27 - 16), v20);
  }
  v31 = (WTF *)*((_QWORD *)this + 5);
  if (v31)
  {
    v37 = *((unsigned int *)this + 12);
    if ((_DWORD)v37)
    {
      v38 = (WTF::StringImpl **)*((_QWORD *)this + 5);
      do
      {
        v39 = *v38;
        *v38 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v39 -= 2;
        }
        v38 += 5;
        --v37;
      }
      while (v37);
    }
    WTF::fastFree(v31, v20);
  }
  v32 = (WTF *)*((_QWORD *)this + 2);
  if (v32)
  {
    v40 = *((unsigned int *)this + 6);
    if ((_DWORD)v40)
    {
      v41 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v42 = *v41;
        *v41 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v42 -= 2;
        }
        v41 += 5;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree(v32, v20);
  }
  v33 = *((_QWORD *)this + 1);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 0;
    v34 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v34)
    {
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v20);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::KeepaliveRequestTracker::~KeepaliveRequestTracker(WebCore::KeepaliveRequestTracker *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WebCore::CachedResource *v12;
  unsigned int **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (WTF *)*((_QWORD *)this + 2);
  v4 = *((unsigned int *)this + 7);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if ((_DWORD)v4)
  {
    v9 = 8 * v4;
    v10 = 8 * v4;
    v11 = v3;
    do
    {
      if (*(_QWORD *)v11)
        v12 = *(WebCore::CachedResource **)(*(_QWORD *)v11 + 8);
      else
        v12 = 0;
      WebCore::CachedResource::removeClient(v12, (unsigned int **)this);
      v11 = (WTF *)((char *)v11 + 8);
      v10 -= 8;
    }
    while (v10);
    v13 = (unsigned int **)v3;
    do
    {
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v13, a2);
      v13 = (unsigned int **)(v14 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  if (v3)
    WTF::fastFree(v3, a2);
  v5 = *((unsigned int *)this + 7);
  v6 = (unsigned int **)*((_QWORD *)this + 2);
  if ((_DWORD)v5)
  {
    v15 = 8 * v5;
    do
    {
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v6, a2);
      v6 = (unsigned int **)(v16 + 8);
      v15 -= 8;
    }
    while (v15);
    v6 = (unsigned int **)*((_QWORD *)this + 2);
  }
  if (v6)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((WTF *)v6, a2);
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, a2);
      else
        --*(_DWORD *)v8;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::KeepaliveRequestTracker::~KeepaliveRequestTracker(this, a2);
  JUMPOUT(0x19AEA7644);
}

void WebCore::HTMLMediaElement::~HTMLMediaElement(WebCore::HTMLMediaElement *this, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  WebCore::PlatformMediaSessionManager *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int i;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v40;
  unsigned int *Ref;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::PlatformMediaSessionManager *v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WebCore::MediaController *v63;
  _DWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned __int8 **v89;
  WebCore::MediaElementSession *v90;
  WTF *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  double v98;
  int v99;
  WebCore::RemotePlayback *v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  WTF::StringImpl *v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  _DWORD *v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WebCore::MediaStream *v115;
  WebCore::DOMWrapperWorld *v116;
  WebCore::MediaControlsHost *v117;
  WebCore::MediaElementSession *v118;
  WTF *v119;
  void *v120;
  WebCore::MediaKeys *v121;
  WebCore::WebKitMediaKeys *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  void *v129;
  _DWORD *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  WTF *v134;
  uint64_t v135;
  WebCore::MediaController *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  void *v141;
  uint64_t v142;
  _DWORD **v143;
  uint64_t v144;
  _DWORD *v145;
  WTF *v146;
  _DWORD *v147;
  _DWORD *v148;
  _DWORD *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  _DWORD *v152;
  unsigned __int8 **v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF *v158;
  WTF *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  _DWORD **v162;
  uint64_t v163;
  _DWORD *v164;
  WTF *v165;
  WTF *v166;
  uint64_t v167;
  WTF *v168;
  uint64_t v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  WTF *v173;
  uint64_t v174;
  WTF *v175;
  uint64_t v176;
  WTF *v177;
  uint64_t v178;
  WTF *v179;
  uint64_t v180;
  WTF *v181;
  uint64_t v182;
  WTF *v183;
  uint64_t v184;
  WTF *v185;
  uint64_t v186;
  WTF *v187;
  uint64_t v188;
  WTF *v189;
  uint64_t v190;
  WTF *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  WebCore::ScriptExecutionContext *v238;
  int v239;
  void *v240;
  bmalloc::api *v241;
  void *v242;
  bmalloc::api *v243;
  void *v244;
  WTF *v245;
  void *v246;
  WTF *v247;
  void *v248;
  WTF *v249;
  void *v250;
  WTF *v251;
  void *v252;
  bmalloc::api *v253;
  void *v254;
  WTF::StringImpl *v255;
  WTF *v256;
  bmalloc::api *v257;
  void *v258;
  bmalloc::api *v259;
  void *v260;
  WTF *v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  __int16 v268;
  __int16 v269;
  __int16 v270;
  __int16 v271;
  __int16 v272;
  __int16 v273;
  __int16 v274;
  __int16 v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int *v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int *v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int *v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int *v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int *v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int *v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int *v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int *v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int *v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int *v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int *v351;
  unsigned int v352;
  unsigned int v353;
  uint64_t v354;
  WTF *v355;
  const char *v356;
  uint64_t v357;
  const char *v358;
  WebCore::PlatformMediaSessionManager *v359;
  char v360;

  *(_QWORD *)this = off_1E33C2470;
  *((_QWORD *)this + 14) = &unk_1E33C2F28;
  v3 = (WebCore::HTMLMediaElement *)((char *)this + 112);
  *((_QWORD *)this + 17) = &unk_1E33C2F80;
  *((_QWORD *)this + 18) = &unk_1E33C30B8;
  *((_QWORD *)this + 20) = &unk_1E33C31E0;
  *((_QWORD *)this + 22) = &unk_1E33C3208;
  *((_QWORD *)this + 24) = &off_1E33C2470[523];
  *((_QWORD *)this + 26) = &off_1E33C2470[530];
  *((_QWORD *)this + 28) = &off_1E33C2470[535];
  v4 = (_QWORD *)((char *)this + 224);
  *((_QWORD *)this + 32) = &off_1E33C2470[559];
  *((_QWORD *)this + 34) = &off_1E33C2470[569];
  *((_QWORD *)this + 36) = &off_1E33C2470[575];
  *((_QWORD *)this + 30) = &off_1E33C2470[545];
  v5 = (_QWORD *)((char *)this + 240);
  v6 = *((_QWORD *)this + 228);
  v7 = (WebCore::PlatformMediaSessionManager *)*((_QWORD *)this + 229);
  v356 = "HTMLMediaElement";
  v357 = 17;
  v358 = "~HTMLMediaElement";
  v359 = v7;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v356);
  ++*((_DWORD *)this + 348);
  v8 = *((_QWORD *)this + 169);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 24) + 1;
    *(_DWORD *)(v8 + 24) = v9;
    v10 = *(_DWORD *)(v8 + 108);
    v11 = *(_DWORD *)(v8 + 124);
    v12 = *(_DWORD *)(v8 + 68);
    if (v11 + v10 + v12)
    {
      v13 = 0;
      while (1)
      {
        if (v13 >= v11)
        {
          if (v10 <= v13 - v11)
          {
            v15 = v13 - v10 - v11;
            if (v12 > v15)
            {
              v14 = *(_DWORD **)(*(_QWORD *)(v8 + 56) + 8 * v15);
              if (v14)
              {
                if (v14[10] != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194433958);
                }
                goto LABEL_17;
              }
            }
          }
          else
          {
            v14 = *(_DWORD **)(*(_QWORD *)(v8 + 96) + 8 * (v13 - v11));
            if (v14)
            {
              if (v14[10] != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x194433938);
              }
              goto LABEL_17;
            }
          }
        }
        else
        {
          v14 = *(_DWORD **)(*(_QWORD *)(v8 + 112) + 8 * v13);
          if (v14)
          {
            if (v14[10] != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x194433388);
            }
LABEL_17:
            ++v14[4];
            WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v14 + 50), v5);
            if (v14[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
            else
              --v14[4];
            goto LABEL_20;
          }
        }
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(200, v5);
LABEL_20:
        ++v13;
        v10 = *(_DWORD *)(v8 + 108);
        v11 = *(_DWORD *)(v8 + 124);
        v12 = *(_DWORD *)(v8 + 68);
        if (v13 >= v11 + v10 + v12)
        {
          v9 = *(_DWORD *)(v8 + 24);
          break;
        }
      }
    }
    if (v9 == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    else
      *(_DWORD *)(v8 + 24) = v9 - 1;
  }
  v16 = *((_QWORD *)this + 168);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 24) + 1;
    *(_DWORD *)(v16 + 24) = v17;
    if (*(_DWORD *)(v16 + 68))
    {
      v18 = 0;
      do
      {
        v19 = *(_DWORD **)(*(_QWORD *)(v16 + 56) + 8 * v18);
        if (v19)
        {
          if (v19[10] != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x194433334);
          }
          ++v19[4];
          WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v19 + 38), v4);
          if (v19[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
          else
            --v19[4];
        }
        else
        {
          WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(152, v4);
        }
        ++v18;
      }
      while (v18 < *(unsigned int *)(v16 + 68));
      v17 = *(_DWORD *)(v16 + 24);
    }
    v20 = v17 - 1;
    if (v20)
      *(_DWORD *)(v16 + 24) = v20;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
  }
  v21 = *((_QWORD *)this + 170);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 + 24) + 1;
    *(_DWORD *)(v21 + 24) = v22;
    if (*(_DWORD *)(v21 + 68))
    {
      v23 = 0;
      do
      {
        v24 = *(_DWORD **)(*(_QWORD *)(v21 + 56) + 8 * v23);
        if (v24)
        {
          if (v24[10] != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x19443335CLL);
          }
          ++v24[4];
          WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v24 + 38), (_QWORD *)this + 32);
          if (v24[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
          else
            --v24[4];
        }
        else
        {
          WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(152, (_QWORD *)this + 32);
        }
        ++v23;
      }
      while (v23 < *(unsigned int *)(v21 + 68));
      v22 = *(_DWORD *)(v21 + 24);
    }
    v25 = v22 - 1;
    if (v25)
      *(_DWORD *)(v21 + 24) = v25;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
  }
  {
    v26 = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
    if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
    {
      v27 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 8);
      v28 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      v31 = v27 & ((v30 >> 31) ^ v30);
      for (i = 1; ; ++i)
      {
        v33 = v31;
        v34 = *(_QWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v31);
        if (v34 != -1)
        {
          if (!v34)
            goto LABEL_76;
          if (*(WebCore::HTMLMediaElement **)(v34 + 8) == this)
            break;
        }
        v31 = (v31 + i) & v27;
      }
      if (v31 != *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 4))
      {
        *(_QWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v31) = 0;
        do
        {
          v35 = __ldaxr((unsigned int *)v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, (unsigned int *)v34));
        if (!v36)
        {
          atomic_store(1u, (unsigned int *)v34);
          WTF::fastFree((WTF *)v34, a2);
        }
        *(_QWORD *)(v26 + 8 * v33) = -1;
        ++*(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 16);
        if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
          v37 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12) - 1;
        else
          v37 = -1;
        *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12) = v37;
        if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
        {
          v38 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 4);
          if (6 * *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12) < v38 && v38 >= 9)
            WTF::HashTable<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>>::rehash(v38 >> 1);
        }
      }
    }
  }
  else
  {
    WebCore::HTMLMediaElement::allMediaElements(void)::elements = 0;
  }
LABEL_76:
  WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)this, 0);
  v40 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v40 + 24) += 2;
  Ref = (unsigned int *)WebCore::HTMLMediaElement::unregisterWithDocument(this, (WebCore::Document *)v40);
  if (*(_DWORD *)(v40 + 24) == 2)
  {
    v268 = *(_WORD *)(v40 + 30);
    if ((v268 & 0x400) == 0)
    {
      v269 = *(_WORD *)(v40 + 28);
      if ((v269 & 0xF000) == 0x9000)
      {
        Ref = WebCore::Document::removedLastRef((WebCore::Document *)v40, v42);
      }
      else
      {
        if ((v269 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v40 + 160) + 16))(*(_QWORD *)(v40 + 160));
          v268 = *(_WORD *)(v40 + 30);
        }
        *(_WORD *)(v40 + 30) = v268 | 0x400;
        Ref = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 72))(v40);
      }
    }
  }
  else
  {
    *(_DWORD *)(v40 + 24) -= 2;
  }
  v43 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v43 || (v44 = *(_QWORD *)(v43 + 96)) == 0)
    v44 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
  v45 = *(_QWORD *)(v44 + 40);
  if (!v45)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v44);
    v45 = *(_QWORD *)(v44 + 40);
  }
  v46 = *((_QWORD *)this + 2);
  if ((v46 & 0x1000000000000) != 0
    && (v263 = v46 & 0xFFFFFFFFFFFFLL, v264 = *(unsigned int *)(v263 + 28), (_DWORD)v264))
  {
    v265 = *(_QWORD **)(v263 + 16);
    v266 = *(_QWORD *)(v45 + 2464);
    v267 = 32 * v264;
    while (*v265 != v266)
    {
      v265 += 4;
      v267 -= 32;
      if (!v267)
        goto LABEL_84;
    }
  }
  else
  {
LABEL_84:
    v47 = *((_QWORD *)this + 230);
    v48 = *(_QWORD *)(v47 + 88);
    if ((!v48 || !*(_DWORD *)(v48 - 12)) && !*(_DWORD *)(v47 + 140))
      goto LABEL_101;
  }
  *((_BYTE *)this + 1648) = 0;
  v49 = *((_QWORD *)this + 200);
  if (v49)
  {
    v360 = 0;
    v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v49 + 32) + 248))(*(_QWORD *)(v49 + 32));
    v51 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v49 + 32) + 256))(*(_QWORD *)(v49 + 32));
    v356 = "MediaElementSession";
    v357 = 20;
    v358 = "setHasPlaybackTargetAvailabilityListeners";
    v359 = v51;
    v52 = *(_BYTE *)(v50 + 12);
    if (v52)
    {
      if (WebCore::LogMedia)
        v53 = byte_1ECE7C490 >= 3u;
      else
        v53 = 0;
      if (v53)
      {
        v51 = (WebCore::PlatformMediaSessionManager *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v356);
        v52 = v360;
      }
      else
      {
        v52 = 0;
      }
    }
    *(_BYTE *)(v49 + 250) = v52;
    v54 = WebCore::PlatformMediaSessionManager::sharedManager(v51);
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 192))(v54);
  }
  v55 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1848))(this);
  if (*((_DWORD *)this + 411) != v55)
  {
    *((_DWORD *)this + 411) = v55;
    v56 = *((_QWORD *)this + 200);
    if (!v56)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v56 = *((_QWORD *)this + 200);
      v55 = *((_DWORD *)this + 411);
    }
    WebCore::Document::playbackTargetPickerClientStateDidChange(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 80) + 40) + 8), v56, v55);
    v57 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v57 + 24) += 2;
    WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v57);
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      v274 = *(_WORD *)(v57 + 30);
      if ((v274 & 0x400) == 0)
      {
        v275 = *(_WORD *)(v57 + 28);
        if ((v275 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v57, v58);
        }
        else
        {
          if ((v275 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v57 + 160) + 16))(*(_QWORD *)(v57 + 160));
            v274 = *(_WORD *)(v57 + 30);
          }
          *(_WORD *)(v57 + 30) = v274 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 72))(v57);
        }
      }
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
LABEL_101:
  v59 = *((_QWORD *)this + 177);
  if (v59)
  {
    ++*(_DWORD *)(v59 + 8);
    v60 = *(unsigned int *)(v59 + 68);
    v61 = *(_QWORD *)(v59 + 56);
    if ((_DWORD)v60)
    {
      v62 = 0;
      while (*(WebCore::HTMLMediaElement **)(v61 + 8 * v62) != this)
      {
        if (v60 == ++v62)
          goto LABEL_106;
      }
    }
    else
    {
LABEL_106:
      v62 = -1;
    }
    memmove((void *)(v61 + 8 * v62), (const void *)(v61 + 8 * v62 + 8), 8 * v60 - (8 * v62 + 8));
    --*(_DWORD *)(v59 + 68);
    v63 = (WebCore::MediaController *)*((_QWORD *)this + 177);
    *((_QWORD *)this + 177) = 0;
    if (v63)
    {
      if (*((_DWORD *)v63 + 2) == 1)
      {
        WebCore::MediaController::~MediaController(v63);
        bmalloc::api::isoDeallocate(v257, v258);
      }
      else
      {
        --*((_DWORD *)v63 + 2);
      }
    }
    if (*(_DWORD *)(v59 + 8) == 1)
    {
      WebCore::MediaController::~MediaController((WebCore::MediaController *)v59);
      bmalloc::api::isoDeallocate(v241, v242);
    }
    else
    {
      --*(_DWORD *)(v59 + 8);
    }
  }
  v64 = (_DWORD *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v64)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 80))(v64);
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v64 + 104))(v64, 0);
    if (v64[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
    else
      --v64[2];
  }
  WebCore::HTMLMediaElement::webkitSetMediaKeys((uint64_t)this, 0);
  v66 = *((_QWORD *)this + 198);
  if (v66)
  {
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v66 + 72, (_QWORD *)this + 34);
    v67 = *((_QWORD *)this + 142);
    if (v67)
    {
      v68 = *(unsigned __int8 **)v67;
      if (__ldaxr(*(unsigned __int8 **)v67))
      {
        __clrex();
      }
      else if (!__stxr(1u, v68))
      {
        goto LABEL_121;
      }
      MEMORY[0x19AEA534C](v68);
LABEL_121:
      ++*((_QWORD *)v68 + 1);
      v70 = __ldxr(v68);
      if (v70 == 1)
      {
        if (!__stlxr(0, v68))
          goto LABEL_126;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v68);
LABEL_126:
      v71 = *(_DWORD **)(*((_QWORD *)this + 198) + 48);
      ++v71[2];
      (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(v67 + 72) + 952))(*(_QWORD *)(v67 + 72), v71);
      if (v71[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 8))(v71);
      else
        --v71[2];
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v67);
    }
  }
  v72 = *((_QWORD *)this + 203);
  if (v72)
    WebCore::DOMWrapperWorld::clearWrappers(v72, v65);
  *(_DWORD *)((char *)this + 1265) |= 0x100000u;
  v73 = (unsigned int *)*((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v73)
  {
    WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v73, v65);
    v74 = v73 + 2;
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, v73 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
    }
  }
  v77 = *((_QWORD *)this + 142);
  if (v77)
  {
    v78 = *(unsigned __int8 **)v77;
    if (__ldaxr(*(unsigned __int8 **)v77))
    {
      __clrex();
    }
    else if (!__stxr(1u, v78))
    {
      goto LABEL_141;
    }
    MEMORY[0x19AEA534C](v78);
LABEL_141:
    ++*((_QWORD *)v78 + 1);
    v80 = __ldxr(v78);
    if (v80 == 1)
    {
      if (!__stlxr(0, v78))
      {
LABEL_146:
        {
          v81 = qword_1EE2F8C50;
          if (qword_1EE2F8C50)
          {
            do
LABEL_153:
              v85 = __ldaxr((unsigned int *)v81);
            while (__stlxr(v85 + 1, (unsigned int *)v81));
LABEL_154:
            v86 = *(unsigned int **)(v77 + 8);
            *(_QWORD *)(v77 + 8) = v81;
            if (v86)
            {
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
              {
                atomic_store(1u, v86);
                WTF::fastFree((WTF *)v86, v65);
              }
            }
            v89 = (unsigned __int8 **)*((_QWORD *)this + 142);
            *((_QWORD *)this + 142) = 0;
            if (v89)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v89);
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v77);
            goto LABEL_161;
          }
        }
        else
        {
          WebCore::nullMediaPlayerClient(void)::client = (uint64_t)&off_1E340E220;
          qword_1EE2F8C50 = 0;
        }
        v81 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v81 = 1;
        *(_QWORD *)(v81 + 8) = &WebCore::nullMediaPlayerClient(void)::client;
        v82 = (unsigned int *)qword_1EE2F8C50;
        qword_1EE2F8C50 = v81;
        if (v82)
        {
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
          {
            atomic_store(1u, v82);
            WTF::fastFree((WTF *)v82, v65);
          }
          v81 = qword_1EE2F8C50;
          if (!qword_1EE2F8C50)
            goto LABEL_154;
        }
        goto LABEL_153;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v78);
    goto LABEL_146;
  }
LABEL_161:
  v90 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v90)
  {
    WebCore::MediaElementSession::~MediaElementSession(v90);
    v90 = (WebCore::MediaElementSession *)WTF::fastFree(v91, v92);
  }
  v93 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v93)
  {
    v94 = *(_QWORD *)(v93 + 8);
    if (v94)
    {
      v95 = *(_QWORD *)(v94 + 24);
      if (v95)
      {
        v96 = *(_QWORD *)(v95 + 8);
        if (v96)
        {
          v97 = *(_DWORD *)v96 + 1;
          *(_DWORD *)v96 = v97;
          if ((*(_QWORD *)(v96 + 1064) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v96 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v96 + 1056) = 0;
            WTF::MonotonicTime::now(v90);
            WebCore::TimerBase::setNextFireTime(v96 + 1032, v98 + 0.0);
            v97 = *(_DWORD *)v96;
          }
          v99 = v97 - 1;
          if (v99)
          {
            *(_DWORD *)v96 = v99;
          }
          else
          {
            WebCore::Page::~Page(v96);
            WTF::fastFree(v261, v262);
          }
        }
      }
    }
  }
  v100 = (WebCore::RemotePlayback *)*((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v100)
  {
    if (*((_DWORD *)v100 + 6) == 1)
    {
      WebCore::RemotePlayback::~RemotePlayback(v100, v65);
      bmalloc::api::isoDeallocate(v259, v260);
    }
    else
    {
      --*((_DWORD *)v100 + 6);
    }
  }
  v101 = (unsigned int *)*((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v101)
  {
    v102 = v101 + 2;
    do
    {
      v103 = __ldaxr(v102);
      v104 = v103 - 1;
    }
    while (__stlxr(v104, v102));
    if (!v104)
    {
      atomic_store(1u, v101 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v101 + 8))(v101);
    }
  }
  if (*((_BYTE *)this + 1816))
  {
    v105 = (WTF::StringImpl *)*((_QWORD *)this + 225);
    *((_QWORD *)this + 225) = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v65);
      else
        *(_DWORD *)v105 -= 2;
    }
  }
  v106 = (unsigned int *)*((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v106)
  {
    v107 = v106 + 2;
    do
    {
      v108 = __ldaxr(v107);
      v109 = v108 - 1;
    }
    while (__stlxr(v109, v107));
    if (!v109)
    {
      atomic_store(1u, v106 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 8))(v106);
    }
  }
  v110 = (_DWORD *)*((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v110)
  {
    if (v110[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v110 + 72))(v110);
    else
      --v110[6];
  }
  v111 = (_DWORD *)*((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v111)
  {
    if (v111[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v111 + 64))(v111);
    else
      --v111[6];
  }
  v112 = (WTF::StringImpl *)*((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v65);
    else
      *(_DWORD *)v112 -= 2;
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v65);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v65);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = (WebCore::MediaStream *)*((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v115)
  {
    if (*((_DWORD *)v115 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v115);
      bmalloc::api::isoDeallocate(v243, v244);
    }
    else
    {
      --*((_DWORD *)v115 + 22);
    }
  }
  v116 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v116, (WTF::StringImpl *)v65);
      WTF::fastFree(v245, v246);
    }
    else
    {
      --*(_DWORD *)v116;
    }
  }
  v117 = (WebCore::MediaControlsHost *)*((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 1)
    {
      WebCore::MediaControlsHost::~MediaControlsHost(v117, v65);
      WTF::fastFree(v247, v248);
    }
    else
    {
      --*(_DWORD *)v117;
    }
  }
  v118 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v118)
  {
    WebCore::MediaElementSession::~MediaElementSession(v118);
    WTF::fastFree(v119, v120);
  }
  v121 = (WebCore::MediaKeys *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v121)
  {
    if (*((_DWORD *)v121 + 4) == 1)
    {
      WebCore::MediaKeys::~MediaKeys(v121, v65);
      WTF::fastFree(v249, v250);
    }
    else
    {
      --*((_DWORD *)v121 + 4);
    }
  }
  v122 = (WebCore::WebKitMediaKeys *)*((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v122)
  {
    if (*((_DWORD *)v122 + 2) == 1)
    {
      WebCore::WebKitMediaKeys::~WebKitMediaKeys(v122, (WTF::StringImpl *)v65);
      WTF::fastFree(v251, v252);
    }
    else
    {
      --*((_DWORD *)v122 + 2);
    }
  }
  v123 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *((_QWORD *)this + 194);
  if (v124)
  {
    *(_QWORD *)(v124 + 8) = 0;
    v125 = (unsigned int *)*((_QWORD *)this + 194);
    *((_QWORD *)this + 194) = 0;
    if (v125)
    {
      do
      {
        v126 = __ldaxr(v125);
        v127 = v126 - 1;
      }
      while (__stlxr(v127, v125));
      if (!v127)
      {
        atomic_store(1u, v125);
        WTF::fastFree((WTF *)v125, v65);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 194) = 0;
  }
  if (*((_BYTE *)this + 1544))
  {
    v128 = *((unsigned int *)this + 384);
    if ((_DWORD)v128 != -1)
      ((void (*)(const char **, char *))off_1E33C50B8[v128])(&v356, (char *)this + 1528);
    *((_DWORD *)this + 384) = -1;
  }
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::HTMLMediaElement *)((char *)this + 1456));
  v130 = (_DWORD *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v130)
  {
    if (v130[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v130 + 8))(v130);
    else
      --v130[4];
  }
  v131 = (unsigned int *)*((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v131)
  {
    do
    {
      v132 = __ldaxr(v131);
      v133 = v132 - 1;
    }
    while (__stlxr(v133, v131));
    if (!v133)
    {
      atomic_store(1u, v131);
      WTF::fastFree((WTF *)v131, v129);
    }
  }
  v134 = (WTF *)*((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v134)
  {
    {
      if (WebCore::sleepDisablerClient(void)::client)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v134 + 1), *((_QWORD *)v134 + 3), *((_QWORD *)v134 + 4));
    }
    else
    {
      WebCore::sleepDisablerClient(void)::client = 0;
    }
    v135 = *(_QWORD *)v134;
    *(_QWORD *)v134 = 0;
    if (v135)
      (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
    WTF::fastFree(v134, v129);
  }
  v136 = (WebCore::MediaController *)*((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v136)
  {
    if (*((_DWORD *)v136 + 2) == 1)
    {
      WebCore::MediaController::~MediaController(v136);
      bmalloc::api::isoDeallocate(v253, v254);
    }
    else
    {
      --*((_DWORD *)v136 + 2);
    }
  }
  v137 = (WTF::StringImpl *)*((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v129);
    else
      *(_DWORD *)v137 -= 2;
  }
  v138 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v138)
  {
    do
    {
      v139 = __ldaxr((unsigned int *)v138);
      v140 = v139 - 1;
    }
    while (__stlxr(v140, (unsigned int *)v138));
    if (!v140)
    {
      atomic_store(1u, (unsigned int *)v138);
      v354 = *(unsigned int *)(v138 + 28);
      if ((_DWORD)v354)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v138 + 16), (WTF::StringImpl *)(*(_QWORD *)(v138 + 16) + 32 * v354));
      v355 = *(WTF **)(v138 + 16);
      if (v355)
      {
        *(_QWORD *)(v138 + 16) = 0;
        *(_DWORD *)(v138 + 24) = 0;
        WTF::fastFree(v355, v129);
      }
      WTF::fastFree((WTF *)v138, v129);
    }
  }
  std::unique_ptr<WebCore::HTMLMediaElement::CueData>::reset[abi:sn180100]((uint64_t *)this + 173, 0);
  v142 = *((unsigned int *)this + 345);
  if ((_DWORD)v142)
  {
    v143 = (_DWORD **)*((_QWORD *)this + 171);
    v144 = 8 * v142;
    do
    {
      v145 = *v143;
      *v143 = 0;
      if (v145)
      {
        if (v145[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v145 + 16))(v145);
        else
          --v145[4];
      }
      ++v143;
      v144 -= 8;
    }
    while (v144);
  }
  v146 = (WTF *)*((_QWORD *)this + 171);
  if (v146)
  {
    *((_QWORD *)this + 171) = 0;
    *((_DWORD *)this + 344) = 0;
    WTF::fastFree(v146, v141);
  }
  v147 = (_DWORD *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v147)
  {
    if (v147[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v147 + 72))(v147);
    else
      --v147[6];
  }
  v148 = (_DWORD *)*((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v148)
  {
    if (v148[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v148 + 72))(v148);
    else
      --v148[6];
  }
  v149 = (_DWORD *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v149)
  {
    if (v149[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 72))(v149);
    else
      --v149[6];
  }
  if (*((_BYTE *)this + 1312))
  {
    v150 = (WTF::StringImpl *)*((_QWORD *)this + 163);
    *((_QWORD *)this + 163) = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 2)
        WTF::StringImpl::destroy(v150, (WTF::StringImpl *)v141);
      else
        *(_DWORD *)v150 -= 2;
    }
  }
  v151 = (WTF::StringImpl *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, (WTF::StringImpl *)v141);
    else
      *(_DWORD *)v151 -= 2;
  }
  v152 = (_DWORD *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v152)
  {
    if (v152[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v152 + 8))(v152);
    else
      --v152[2];
  }
  v153 = (unsigned __int8 **)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v153)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v153);
  v154 = (const void *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v154)
    CFRelease(v154);
  v155 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v156)
  {
    if (*(_DWORD *)(v156 + 24) == 2)
    {
      v270 = *(_WORD *)(v156 + 30);
      if ((v270 & 0x400) == 0)
      {
        v271 = *(_WORD *)(v156 + 28);
        if ((v271 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v156, v141);
        }
        else
        {
          if ((v271 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v156 + 160) + 16))(*(_QWORD *)(v156 + 160));
            v270 = *(_WORD *)(v156 + 30);
          }
          *(_WORD *)(v156 + 30) = v270 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v156 + 72))(v156);
        }
      }
    }
    else
    {
      *(_DWORD *)(v156 + 24) -= 2;
    }
  }
  v157 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v157)
  {
    if (*(_DWORD *)(v157 + 24) == 2)
    {
      v272 = *(_WORD *)(v157 + 30);
      if ((v272 & 0x400) == 0)
      {
        v273 = *(_WORD *)(v157 + 28);
        if ((v273 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v157, v141);
        }
        else
        {
          if ((v273 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v157 + 160) + 16))(*(_QWORD *)(v157 + 160));
            v272 = *(_WORD *)(v157 + 30);
          }
          *(_WORD *)(v157 + 30) = v272 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v157 + 72))(v157);
        }
      }
    }
    else
    {
      *(_DWORD *)(v157 + 24) -= 2;
    }
  }
  v158 = (WTF *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v158)
    WTF::fastFree(v158, v141);
  v159 = (WTF *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 1)
    {
      v255 = (WTF::StringImpl *)*((_QWORD *)v159 + 1);
      *((_QWORD *)v159 + 1) = 0;
      if (v255)
      {
        if (*(_DWORD *)v255 == 2)
          WTF::StringImpl::destroy(v255, (WTF::StringImpl *)v141);
        else
          *(_DWORD *)v255 -= 2;
      }
      WTF::fastFree(v159, v141);
    }
    else
    {
      --*(_DWORD *)v159;
    }
  }
  v160 = (WTF::StringImpl *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, (WTF::StringImpl *)v141);
    else
      *(_DWORD *)v160 -= 2;
  }
  v161 = *((unsigned int *)this + 217);
  if ((_DWORD)v161)
  {
    v162 = (_DWORD **)*((_QWORD *)this + 107);
    v163 = 8 * v161;
    do
    {
      v164 = *v162;
      *v162 = 0;
      if (v164)
      {
        if (v164[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v164 + 16))(v164);
        else
          --v164[4];
      }
      ++v162;
      v163 -= 8;
    }
    while (v163);
  }
  v165 = (WTF *)*((_QWORD *)this + 107);
  if (v165)
  {
    *((_QWORD *)this + 107) = 0;
    *((_DWORD *)this + 216) = 0;
    WTF::fastFree(v165, v141);
  }
  v166 = (WTF *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v166)
  {
    if (*(_QWORD *)v166)
    {
      *(_QWORD *)(*(_QWORD *)v166 + 8) = 0;
      v315 = *(unsigned int **)v166;
      *(_QWORD *)v166 = 0;
      if (v315)
      {
        do
        {
          v316 = __ldaxr(v315);
          v317 = v316 - 1;
        }
        while (__stlxr(v317, v315));
        if (!v317)
        {
          atomic_store(1u, v315);
          WTF::fastFree((WTF *)v315, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v166 = 0;
    }
    WTF::fastFree(v166, v141);
  }
  v167 = *((_QWORD *)this + 105);
  if (v167)
  {
    *(_QWORD *)(v167 + 8) = 0;
    v276 = (unsigned int *)*((_QWORD *)this + 105);
    *((_QWORD *)this + 105) = 0;
    if (v276)
    {
      do
      {
        v277 = __ldaxr(v276);
        v278 = v277 - 1;
      }
      while (__stlxr(v278, v276));
      if (!v278)
      {
        atomic_store(1u, v276);
        WTF::fastFree((WTF *)v276, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 105) = 0;
  }
  v168 = (WTF *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v168)
  {
    if (*(_QWORD *)v168)
    {
      *(_QWORD *)(*(_QWORD *)v168 + 8) = 0;
      v318 = *(unsigned int **)v168;
      *(_QWORD *)v168 = 0;
      if (v318)
      {
        do
        {
          v319 = __ldaxr(v318);
          v320 = v319 - 1;
        }
        while (__stlxr(v320, v318));
        if (!v320)
        {
          atomic_store(1u, v318);
          WTF::fastFree((WTF *)v318, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v168 = 0;
    }
    WTF::fastFree(v168, v141);
  }
  v169 = *((_QWORD *)this + 103);
  if (v169)
  {
    *(_QWORD *)(v169 + 8) = 0;
    v279 = (unsigned int *)*((_QWORD *)this + 103);
    *((_QWORD *)this + 103) = 0;
    if (v279)
    {
      do
      {
        v280 = __ldaxr(v279);
        v281 = v280 - 1;
      }
      while (__stlxr(v281, v279));
      if (!v281)
      {
        atomic_store(1u, v279);
        WTF::fastFree((WTF *)v279, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 103) = 0;
  }
  v170 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 1)
    {
      v256 = *(WTF **)(v170 + 8);
      if (v256)
      {
        *(_QWORD *)(v170 + 8) = 0;
        *(_DWORD *)(v170 + 16) = 0;
        WTF::fastFree(v256, v141);
      }
      WTF::fastFree((WTF *)v170, v141);
    }
    else
    {
      --*(_DWORD *)v170;
    }
  }
  v171 = (WTF *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v171)
  {
    if (*(_QWORD *)v171)
    {
      *(_QWORD *)(*(_QWORD *)v171 + 8) = 0;
      v321 = *(unsigned int **)v171;
      *(_QWORD *)v171 = 0;
      if (v321)
      {
        do
        {
          v322 = __ldaxr(v321);
          v323 = v322 - 1;
        }
        while (__stlxr(v323, v321));
        if (!v323)
        {
          atomic_store(1u, v321);
          WTF::fastFree((WTF *)v321, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v171 = 0;
    }
    WTF::fastFree(v171, v141);
  }
  v172 = *((_QWORD *)this + 100);
  if (v172)
  {
    *(_QWORD *)(v172 + 8) = 0;
    v282 = (unsigned int *)*((_QWORD *)this + 100);
    *((_QWORD *)this + 100) = 0;
    if (v282)
    {
      do
      {
        v283 = __ldaxr(v282);
        v284 = v283 - 1;
      }
      while (__stlxr(v284, v282));
      if (!v284)
      {
        atomic_store(1u, v282);
        WTF::fastFree((WTF *)v282, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 100) = 0;
  }
  v173 = (WTF *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v173)
  {
    if (*(_QWORD *)v173)
    {
      *(_QWORD *)(*(_QWORD *)v173 + 8) = 0;
      v324 = *(unsigned int **)v173;
      *(_QWORD *)v173 = 0;
      if (v324)
      {
        do
        {
          v325 = __ldaxr(v324);
          v326 = v325 - 1;
        }
        while (__stlxr(v326, v324));
        if (!v326)
        {
          atomic_store(1u, v324);
          WTF::fastFree((WTF *)v324, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v173 = 0;
    }
    WTF::fastFree(v173, v141);
  }
  v174 = *((_QWORD *)this + 98);
  if (v174)
  {
    *(_QWORD *)(v174 + 8) = 0;
    v285 = (unsigned int *)*((_QWORD *)this + 98);
    *((_QWORD *)this + 98) = 0;
    if (v285)
    {
      do
      {
        v286 = __ldaxr(v285);
        v287 = v286 - 1;
      }
      while (__stlxr(v287, v285));
      if (!v287)
      {
        atomic_store(1u, v285);
        WTF::fastFree((WTF *)v285, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 98) = 0;
  }
  v175 = (WTF *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v175)
  {
    if (*(_QWORD *)v175)
    {
      *(_QWORD *)(*(_QWORD *)v175 + 8) = 0;
      v327 = *(unsigned int **)v175;
      *(_QWORD *)v175 = 0;
      if (v327)
      {
        do
        {
          v328 = __ldaxr(v327);
          v329 = v328 - 1;
        }
        while (__stlxr(v329, v327));
        if (!v329)
        {
          atomic_store(1u, v327);
          WTF::fastFree((WTF *)v327, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v175 = 0;
    }
    WTF::fastFree(v175, v141);
  }
  v176 = *((_QWORD *)this + 96);
  if (v176)
  {
    *(_QWORD *)(v176 + 8) = 0;
    v288 = (unsigned int *)*((_QWORD *)this + 96);
    *((_QWORD *)this + 96) = 0;
    if (v288)
    {
      do
      {
        v289 = __ldaxr(v288);
        v290 = v289 - 1;
      }
      while (__stlxr(v290, v288));
      if (!v290)
      {
        atomic_store(1u, v288);
        WTF::fastFree((WTF *)v288, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 96) = 0;
  }
  v177 = (WTF *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v177)
  {
    if (*(_QWORD *)v177)
    {
      *(_QWORD *)(*(_QWORD *)v177 + 8) = 0;
      v330 = *(unsigned int **)v177;
      *(_QWORD *)v177 = 0;
      if (v330)
      {
        do
        {
          v331 = __ldaxr(v330);
          v332 = v331 - 1;
        }
        while (__stlxr(v332, v330));
        if (!v332)
        {
          atomic_store(1u, v330);
          WTF::fastFree((WTF *)v330, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v177 = 0;
    }
    WTF::fastFree(v177, v141);
  }
  v178 = *((_QWORD *)this + 94);
  if (v178)
  {
    *(_QWORD *)(v178 + 8) = 0;
    v291 = (unsigned int *)*((_QWORD *)this + 94);
    *((_QWORD *)this + 94) = 0;
    if (v291)
    {
      do
      {
        v292 = __ldaxr(v291);
        v293 = v292 - 1;
      }
      while (__stlxr(v293, v291));
      if (!v293)
      {
        atomic_store(1u, v291);
        WTF::fastFree((WTF *)v291, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 94) = 0;
  }
  v179 = (WTF *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v179)
  {
    if (*(_QWORD *)v179)
    {
      *(_QWORD *)(*(_QWORD *)v179 + 8) = 0;
      v333 = *(unsigned int **)v179;
      *(_QWORD *)v179 = 0;
      if (v333)
      {
        do
        {
          v334 = __ldaxr(v333);
          v335 = v334 - 1;
        }
        while (__stlxr(v335, v333));
        if (!v335)
        {
          atomic_store(1u, v333);
          WTF::fastFree((WTF *)v333, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v179 = 0;
    }
    WTF::fastFree(v179, v141);
  }
  v180 = *((_QWORD *)this + 92);
  if (v180)
  {
    *(_QWORD *)(v180 + 8) = 0;
    v294 = (unsigned int *)*((_QWORD *)this + 92);
    *((_QWORD *)this + 92) = 0;
    if (v294)
    {
      do
      {
        v295 = __ldaxr(v294);
        v296 = v295 - 1;
      }
      while (__stlxr(v296, v294));
      if (!v296)
      {
        atomic_store(1u, v294);
        WTF::fastFree((WTF *)v294, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 92) = 0;
  }
  v181 = (WTF *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v181)
  {
    if (*(_QWORD *)v181)
    {
      *(_QWORD *)(*(_QWORD *)v181 + 8) = 0;
      v336 = *(unsigned int **)v181;
      *(_QWORD *)v181 = 0;
      if (v336)
      {
        do
        {
          v337 = __ldaxr(v336);
          v338 = v337 - 1;
        }
        while (__stlxr(v338, v336));
        if (!v338)
        {
          atomic_store(1u, v336);
          WTF::fastFree((WTF *)v336, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v181 = 0;
    }
    WTF::fastFree(v181, v141);
  }
  v182 = *((_QWORD *)this + 90);
  if (v182)
  {
    *(_QWORD *)(v182 + 8) = 0;
    v297 = (unsigned int *)*((_QWORD *)this + 90);
    *((_QWORD *)this + 90) = 0;
    if (v297)
    {
      do
      {
        v298 = __ldaxr(v297);
        v299 = v298 - 1;
      }
      while (__stlxr(v299, v297));
      if (!v299)
      {
        atomic_store(1u, v297);
        WTF::fastFree((WTF *)v297, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 90) = 0;
  }
  v183 = (WTF *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v183)
  {
    if (*(_QWORD *)v183)
    {
      *(_QWORD *)(*(_QWORD *)v183 + 8) = 0;
      v339 = *(unsigned int **)v183;
      *(_QWORD *)v183 = 0;
      if (v339)
      {
        do
        {
          v340 = __ldaxr(v339);
          v341 = v340 - 1;
        }
        while (__stlxr(v341, v339));
        if (!v341)
        {
          atomic_store(1u, v339);
          WTF::fastFree((WTF *)v339, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v183 = 0;
    }
    WTF::fastFree(v183, v141);
  }
  v184 = *((_QWORD *)this + 88);
  if (v184)
  {
    *(_QWORD *)(v184 + 8) = 0;
    v300 = (unsigned int *)*((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = 0;
    if (v300)
    {
      do
      {
        v301 = __ldaxr(v300);
        v302 = v301 - 1;
      }
      while (__stlxr(v302, v300));
      if (!v302)
      {
        atomic_store(1u, v300);
        WTF::fastFree((WTF *)v300, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 88) = 0;
  }
  v185 = (WTF *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v185)
  {
    if (*(_QWORD *)v185)
    {
      *(_QWORD *)(*(_QWORD *)v185 + 8) = 0;
      v342 = *(unsigned int **)v185;
      *(_QWORD *)v185 = 0;
      if (v342)
      {
        do
        {
          v343 = __ldaxr(v342);
          v344 = v343 - 1;
        }
        while (__stlxr(v344, v342));
        if (!v344)
        {
          atomic_store(1u, v342);
          WTF::fastFree((WTF *)v342, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v185 = 0;
    }
    WTF::fastFree(v185, v141);
  }
  v186 = *((_QWORD *)this + 86);
  if (v186)
  {
    *(_QWORD *)(v186 + 8) = 0;
    v303 = (unsigned int *)*((_QWORD *)this + 86);
    *((_QWORD *)this + 86) = 0;
    if (v303)
    {
      do
      {
        v304 = __ldaxr(v303);
        v305 = v304 - 1;
      }
      while (__stlxr(v305, v303));
      if (!v305)
      {
        atomic_store(1u, v303);
        WTF::fastFree((WTF *)v303, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 86) = 0;
  }
  v187 = (WTF *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v187)
  {
    if (*(_QWORD *)v187)
    {
      *(_QWORD *)(*(_QWORD *)v187 + 8) = 0;
      v345 = *(unsigned int **)v187;
      *(_QWORD *)v187 = 0;
      if (v345)
      {
        do
        {
          v346 = __ldaxr(v345);
          v347 = v346 - 1;
        }
        while (__stlxr(v347, v345));
        if (!v347)
        {
          atomic_store(1u, v345);
          WTF::fastFree((WTF *)v345, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v187 = 0;
    }
    WTF::fastFree(v187, v141);
  }
  v188 = *((_QWORD *)this + 84);
  if (v188)
  {
    *(_QWORD *)(v188 + 8) = 0;
    v306 = (unsigned int *)*((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = 0;
    if (v306)
    {
      do
      {
        v307 = __ldaxr(v306);
        v308 = v307 - 1;
      }
      while (__stlxr(v308, v306));
      if (!v308)
      {
        atomic_store(1u, v306);
        WTF::fastFree((WTF *)v306, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 84) = 0;
  }
  v189 = (WTF *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v189)
  {
    if (*(_QWORD *)v189)
    {
      *(_QWORD *)(*(_QWORD *)v189 + 8) = 0;
      v348 = *(unsigned int **)v189;
      *(_QWORD *)v189 = 0;
      if (v348)
      {
        do
        {
          v349 = __ldaxr(v348);
          v350 = v349 - 1;
        }
        while (__stlxr(v350, v348));
        if (!v350)
        {
          atomic_store(1u, v348);
          WTF::fastFree((WTF *)v348, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v189 = 0;
    }
    WTF::fastFree(v189, v141);
  }
  v190 = *((_QWORD *)this + 82);
  if (v190)
  {
    *(_QWORD *)(v190 + 8) = 0;
    v309 = (unsigned int *)*((_QWORD *)this + 82);
    *((_QWORD *)this + 82) = 0;
    if (v309)
    {
      do
      {
        v310 = __ldaxr(v309);
        v311 = v310 - 1;
      }
      while (__stlxr(v311, v309));
      if (!v311)
      {
        atomic_store(1u, v309);
        WTF::fastFree((WTF *)v309, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 82) = 0;
  }
  v191 = (WTF *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v191)
  {
    if (*(_QWORD *)v191)
    {
      *(_QWORD *)(*(_QWORD *)v191 + 8) = 0;
      v351 = *(unsigned int **)v191;
      *(_QWORD *)v191 = 0;
      if (v351)
      {
        do
        {
          v352 = __ldaxr(v351);
          v353 = v352 - 1;
        }
        while (__stlxr(v353, v351));
        if (!v353)
        {
          atomic_store(1u, v351);
          WTF::fastFree((WTF *)v351, v141);
        }
      }
    }
    else
    {
      *(_QWORD *)v191 = 0;
    }
    WTF::fastFree(v191, v141);
  }
  v192 = *((_QWORD *)this + 80);
  if (v192)
  {
    *(_QWORD *)(v192 + 8) = 0;
    v312 = (unsigned int *)*((_QWORD *)this + 80);
    *((_QWORD *)this + 80) = 0;
    if (v312)
    {
      do
      {
        v313 = __ldaxr(v312);
        v314 = v313 - 1;
      }
      while (__stlxr(v314, v312));
      if (!v314)
      {
        atomic_store(1u, v312);
        WTF::fastFree((WTF *)v312, v141);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 80) = 0;
  }
  *((_QWORD *)this + 73) = off_1E31F7378;
  v193 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLMediaElement *)((char *)this + 584));
  *((_QWORD *)this + 66) = off_1E31F7378;
  v194 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLMediaElement *)((char *)this + 528));
  *((_QWORD *)this + 59) = off_1E31F7378;
  v195 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLMediaElement *)((char *)this + 472));
  *((_QWORD *)this + 52) = off_1E31F7378;
  v196 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v196)
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLMediaElement *)((char *)this + 416));
  *((_QWORD *)this + 45) = off_1E31F7378;
  v197 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLMediaElement *)((char *)this + 360));
  *((_QWORD *)this + 38) = off_1E31F7378;
  v198 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v198)
    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLMediaElement *)((char *)this + 304));
  v200 = *((_QWORD *)this + 37);
  if (v200)
  {
    *(_QWORD *)(v200 + 8) = 0;
    v201 = (unsigned int *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = 0;
    if (v201)
    {
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        atomic_store(1u, v201);
        WTF::fastFree((WTF *)v201, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 37) = 0;
  }
  v204 = *((_QWORD *)this + 35);
  if (v204)
  {
    *(_QWORD *)(v204 + 8) = 0;
    v205 = (unsigned int *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v205)
    {
      do
      {
        v206 = __ldaxr(v205);
        v207 = v206 - 1;
      }
      while (__stlxr(v207, v205));
      if (!v207)
      {
        atomic_store(1u, v205);
        WTF::fastFree((WTF *)v205, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 35) = 0;
  }
  v208 = *((_QWORD *)this + 33);
  if (v208)
  {
    *(_QWORD *)(v208 + 8) = 0;
    v209 = (unsigned int *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = 0;
    if (v209)
    {
      do
      {
        v210 = __ldaxr(v209);
        v211 = v210 - 1;
      }
      while (__stlxr(v211, v209));
      if (!v211)
      {
        atomic_store(1u, v209);
        WTF::fastFree((WTF *)v209, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 33) = 0;
  }
  v212 = *((_QWORD *)this + 31);
  if (v212)
  {
    *(_QWORD *)(v212 + 8) = 0;
    v213 = (unsigned int *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v213)
    {
      do
      {
        v214 = __ldaxr(v213);
        v215 = v214 - 1;
      }
      while (__stlxr(v215, v213));
      if (!v215)
      {
        atomic_store(1u, v213);
        WTF::fastFree((WTF *)v213, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  v216 = *((_QWORD *)this + 29);
  if (v216)
  {
    *(_QWORD *)(v216 + 8) = 0;
    v217 = (unsigned int *)*((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = 0;
    if (v217)
    {
      do
      {
        v218 = __ldaxr(v217);
        v219 = v218 - 1;
      }
      while (__stlxr(v219, v217));
      if (!v219)
      {
        atomic_store(1u, v217);
        WTF::fastFree((WTF *)v217, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 29) = 0;
  }
  v220 = *((_QWORD *)this + 27);
  if (v220)
  {
    *(_QWORD *)(v220 + 8) = 0;
    v221 = (unsigned int *)*((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = 0;
    if (v221)
    {
      do
      {
        v222 = __ldaxr(v221);
        v223 = v222 - 1;
      }
      while (__stlxr(v223, v221));
      if (!v223)
      {
        atomic_store(1u, v221);
        WTF::fastFree((WTF *)v221, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 27) = 0;
  }
  v224 = *((_QWORD *)this + 25);
  if (v224)
  {
    *(_QWORD *)(v224 + 8) = 0;
    v225 = (unsigned int *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v225)
    {
      do
      {
        v226 = __ldaxr(v225);
        v227 = v226 - 1;
      }
      while (__stlxr(v227, v225));
      if (!v227)
      {
        atomic_store(1u, v225);
        WTF::fastFree((WTF *)v225, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 25) = 0;
  }
  v228 = *((_QWORD *)this + 23);
  if (v228)
  {
    *(_QWORD *)(v228 + 8) = 0;
    v229 = (unsigned int *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (v229)
    {
      do
      {
        v230 = __ldaxr(v229);
        v231 = v230 - 1;
      }
      while (__stlxr(v231, v229));
      if (!v231)
      {
        atomic_store(1u, v229);
        WTF::fastFree((WTF *)v229, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 23) = 0;
  }
  v232 = *((_QWORD *)this + 21);
  if (v232)
  {
    *(_QWORD *)(v232 + 8) = 0;
    v233 = (unsigned int *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v233)
    {
      do
      {
        v234 = __ldaxr(v233);
        v235 = v234 - 1;
      }
      while (__stlxr(v235, v233));
      if (!v235)
      {
        atomic_store(1u, v233);
        WTF::fastFree((WTF *)v233, v199);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 21) = 0;
  }
  *((_QWORD *)this + 14) = &off_1E33A0540;
  v236 = *((_QWORD *)this + 15);
  if (v236)
  {
    v237 = *(_QWORD *)(v236 + 8);
    if (v237)
    {
      v238 = (WebCore::ScriptExecutionContext *)(v237 - 96);
      v239 = *(unsigned __int8 *)(v237 + 178);
      if (*(_BYTE *)(v237 + 178))
      {
        if (v239 == 1 || v239 == 2)
          ++*(_DWORD *)(v237 + 216);
      }
      else
      {
        *(_DWORD *)(v237 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(v238, v3);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)v238, v240);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(v3, v199);
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLMediaElement::~HTMLMediaElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::ContextDestructionObserver::~ContextDestructionObserver(WebCore::ContextDestructionObserver *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::ContextDestructionObserver *v12;

  *(_QWORD *)this = &off_1E33A18C0;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_16;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    WebCore::ScriptExecutionContext::willDestroyDestructionObserver((WebCore::ScriptExecutionContext *)(v4 - 96), this);
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
      goto LABEL_4;
LABEL_16:
    *((_QWORD *)this + 1) = 0;
    return;
  }
  *((_QWORD *)this + 1) = 0;
  do
  {
LABEL_4:
    v5 = __ldaxr((unsigned int *)v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v3));
  if (!v6)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  v7 = *((_QWORD *)this + 1);
  if (!v7)
    goto LABEL_16;
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v12 = this;
    WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::add((uint64_t *)(v8 + 24), (uint64_t *)&v12, (uint64_t)&v11);
    v7 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v7)
      return;
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  do
  {
    v9 = __ldaxr((unsigned int *)v7);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v7));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree((WTF *)v7, a2);
  }
}

{
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t *WebCore::ScriptExecutionContext::willDestroyDestructionObserver(WebCore::ScriptExecutionContext *this, WebCore::ContextDestructionObserver *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::ContextDestructionObserver *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v17;

  v4 = *((_QWORD *)this + 15);
  result = (uint64_t *)((char *)this + 120);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::ContextDestructionObserver **)(v3 + 8 * v9);
    if (v10 != a2)
    {
      v17 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v17) & v5;
        v10 = *(WebCore::ContextDestructionObserver **)(v3 + 8 * v9);
        ++v17;
        if (v10 == a2)
          goto LABEL_3;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_3:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::rehash(result, v15 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t *WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(WebCore::ScriptExecutionContext *this, WebCore::ActiveDOMObject *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::ActiveDOMObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v17;

  v4 = *((_QWORD *)this + 16);
  result = (uint64_t *)((char *)this + 128);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::ActiveDOMObject **)(v3 + 8 * v9);
    if (v10 != a2)
    {
      v17 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v17) & v5;
        v10 = *(WebCore::ActiveDOMObject **)(v3 + 8 * v9);
        ++v17;
        if (v10 == a2)
          goto LABEL_3;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_3:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::rehash(result, v15 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *this)
{
  uint64_t result;
  int v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  WTF::StringImpl *v32;
  uint8_t buf[24];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  if (v29)
  {
    result = *((unsigned int *)v29 + 1);
    if ((result & 0x80000000) != 0)
    {
LABEL_56:
      __break(0xC471u);
      return result;
    }
    v7 = (*((unsigned __int8 *)v29 + 16) >> 2) & 1;
  }
  else
  {
    result = 0;
    v7 = 1;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>(result, v7, (uint64_t)v29, buf);
  v30 = *(WTF::StringImpl **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_56;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v8);
    else
      *(_DWORD *)v29 -= 2;
  }
  v9 = *(NSObject **)(a1 + 32);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v10)
  {
    WTF::String::utf8();
    v12 = v31 ? (uint64_t)v31 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v10 = (uint64_t)v31;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        v10 = WTF::fastFree(v31, v11);
      else
        --*(_DWORD *)v31;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v14 = *v13;
      if ((v14 & 1) != 0)
        break;
      v15 = __ldaxr(v13);
      if (v15 == v14)
      {
        if (!__stxr(v14 | 1, v13))
        {
          v16 = WTF::Logger::observers((WTF::Logger *)v10);
          v17 = *(unsigned int *)(v16 + 12);
          if ((_DWORD)v17)
          {
            v18 = *(uint64_t **)v16;
            v19 = *(_QWORD *)v16 + 8 * v17;
            do
            {
              v20 = *v18;
              WTF::Logger::LogSiteIdentifier::toString(this);
              *(_OWORD *)buf = 0uLL;
              v21 = WTF::fastMalloc((WTF *)0x10);
              *(_DWORD *)&buf[8] = 1;
              *(_QWORD *)buf = v21;
              v22 = *(unsigned int *)&buf[12];
              *(_DWORD *)(v21 + 16 * *(unsigned int *)&buf[12]) = 0;
              if (v32)
                *(_DWORD *)v32 += 2;
              *(_QWORD *)(v21 + 16 * v22 + 8) = v32;
              *(_DWORD *)&buf[12] = v22 + 1;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v20 + 16))(v20, a1, a2, buf);
              v23 = *(WTF **)buf;
              if (*(_DWORD *)&buf[12])
              {
                v24 = 16 * *(unsigned int *)&buf[12];
                v25 = (WTF::StringImpl **)(*(_QWORD *)buf + 8);
                do
                {
                  v26 = *v25;
                  *v25 = 0;
                  if (v26)
                  {
                    if (*(_DWORD *)v26 == 2)
                      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v26 -= 2;
                  }
                  v25 += 2;
                  v24 -= 16;
                }
                while (v24);
                v23 = *(WTF **)buf;
              }
              if (v23)
              {
                *(_QWORD *)buf = 0;
                *(_DWORD *)&buf[8] = 0;
                WTF::fastFree(v23, v11);
              }
              v27 = v32;
              v32 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v11);
                else
                  *(_DWORD *)v27 -= 2;
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          v28 = __ldxr(v13);
          if (v28 == 1)
          {
            if (!__stlxr(0, v13))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v30;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      return WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v30 -= 2;
  }
  return result;
}

void sub_1944340E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12, WTF *a13, int a14, int a15)
{
  unsigned __int8 *v15;
  int v17;

  v17 = __ldxr(v15);
  if (v17 == 1)
  {
    if (!__stlxr(0, v15))
    {
LABEL_6:
      if (a10)
      {
        if (*(_DWORD *)a10 == 2)
          WTF::StringImpl::destroy(a10, a2);
        else
          *(_DWORD *)a10 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebCore::Document::removeAudioProducer(WebCore::Document *this, WebCore::MediaProducer *a2)
{
  uint64_t result;

  if ((WTF::isMainThread(this) & 1) != 0)
  {
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)this + 2664, a2);
    return (uint64_t)WebCore::Document::updateIsPlayingMedia(this);
  }
  else
  {
    result = 5244;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::unregisterWithDocument(WebCore::HTMLMediaElement *this, WebCore::Document *a2)
{
  void *v4;
  WebCore::SpeechSynthesis *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t result;

  WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLMediaElement>((uint64_t)a2 + 1856, this);
  v5 = (WebCore::SpeechSynthesis *)*((_QWORD *)this + 217);
  if (v5)
  {
    ++*((_DWORD *)v5 + 6);
    WebCore::SpeechSynthesis::cancel(v5, v4);
    v6 = (_DWORD *)*((_QWORD *)this + 217);
    *((_QWORD *)this + 217) = 0;
    if (v6)
    {
      if (v6[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 64))(v6);
      else
        --v6[6];
    }
    if (*((_DWORD *)v5 + 6) == 1)
      (*(void (**)(WebCore::SpeechSynthesis *))(*(_QWORD *)v5 + 64))(v5);
    else
      --*((_DWORD *)v5 + 6);
  }
  v7 = *((_QWORD *)this + 200);
  if (v7)
  {
    WebCore::Document::removePlaybackTargetPickerClient((uint64_t *)a2, *((void **)this + 200));
    v8 = *(_QWORD *)(v7 + 400);
    *(_QWORD *)(v7 + 400) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 4) != 0)
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 1960, (_QWORD *)this + 20);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 1912, (_QWORD *)this + 26);
  if (*((_BYTE *)this + 1396))
    WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLMediaElement>((uint64_t)a2 + 1872, this);
  v9 = (WTF *)WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)a2 + 1840, this);
  if ((WTF::isMainThread(v9) & 1) != 0)
  {
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 2664, (_QWORD *)this + 24);
    return (uint64_t)WebCore::Document::updateIsPlayingMedia(a2);
  }
  else
  {
    result = 5244;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v31);
    v26 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v26 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v26 > 0x7FFFFFFE)
        v26 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v26;
  }
  v6 = a2[2];
  result = v6 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v8 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = (result + ~(v6 << 32)) ^ ((unint64_t)(result + ~(v6 << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        for (i = 1; ; ++i)
        {
          v15 = *(_QWORD *)(v8 + 8 * v13);
          if (!v15)
            break;
          v16 = v13;
          if (v15 != -1 && v15 == result)
          {
            if (v13 == *(_DWORD *)(v8 - 4))
              return 0;
            *(_QWORD *)(v8 + 8 * v13) = 0;
            do
            {
              v18 = __ldaxr((unsigned int *)result);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, (unsigned int *)result));
            if (!v19)
            {
              atomic_store(1u, (unsigned int *)result);
              v27 = *(unsigned int *)(result + 28);
              if ((_DWORD)v27)
              {
                v30 = result;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v27));
                result = v30;
              }
              v28 = *(WTF **)(result + 16);
              if (v28)
              {
                *(_QWORD *)(result + 16) = 0;
                *(_DWORD *)(result + 24) = 0;
                v29 = result;
                WTF::fastFree(v28, a2);
                result = v29;
              }
              WTF::fastFree((WTF *)result, a2);
            }
            *(_QWORD *)(v8 + 8 * v16) = -1;
            ++*(_DWORD *)(*(_QWORD *)a1 - 16);
            v20 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
              v21 = *(_DWORD *)(v20 - 12) - 1;
            else
              v21 = -1;
            *(_DWORD *)(v20 - 12) = v21;
            v22 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
            {
              v23 = 6 * *(_DWORD *)(v22 - 12);
              v24 = *(_DWORD *)(v22 - 4);
              if (v23 < v24 && v24 >= 9)
                WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v24 >> 1, 0);
            }
            return 1;
          }
          v13 = (v13 + i) & v9;
        }
      }
    }
    return 0;
  }
  return result;
}

void WebCore::RemotePlayback::~RemotePlayback(WebCore::RemotePlayback *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;

  v3 = *((unsigned int *)this + 35);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 16);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 16);
  if (v7)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 31);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*((_QWORD *)this + 14);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 14);
  if (v12)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((unsigned int *)this + 27);
  if ((_DWORD)v13)
  {
    v14 = (_DWORD **)*((_QWORD *)this + 12);
    v15 = 8 * v13;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (v16[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
        else
          --v16[4];
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v17 = (WTF *)*((_QWORD *)this + 12);
  if (v17)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *((_QWORD *)this + 11);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v19)
    {
      v20 = (_DWORD **)(v18 + 8);
      do
      {
        if (*((_DWORD *)v20 - 2) != -1)
        {
          v21 = *v20;
          *v20 = 0;
          if (v21)
          {
            if (v21[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
            else
              --v21[4];
          }
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  v22 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  v25 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  WebCore::EventTarget::~EventTarget((WebCore::RemotePlayback *)((char *)this + 32), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v29);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RemotePlayback::~RemotePlayback(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::CanvasRenderingContext *WebCore::CanvasBase::setImageBuffer@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WebCore::CanvasRenderingContext *result;
  WebCore::CanvasRenderingContext *v23;
  WebCore::CanvasRenderingContext *v24;
  WebCore::ScriptExecutionContext *v26;
  float v27;
  uint64_t v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[8];

  v6 = (WTF *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v6)
  {
    if (*((_BYTE *)v6 + 8))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v6 + 104))(*(_QWORD *)v6, 1);
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  *a3 = v7;
  v8 = *a2;
  *a2 = 0;
  v9 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v8;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
LABEL_9:
      v12 = *(_QWORD *)(v10 + 8);
      v13 = v12 - 1;
      *(_QWORD *)(v10 + 8) = v12 - 1;
      if (v12 == 1)
      {
        v41 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        *(_QWORD *)(v10 + 24) = 0;
        v15 = v41 != 0;
      }
      else
      {
        v14 = 0;
        v15 = 1;
      }
      v16 = __ldxr((unsigned __int8 *)v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_13:
      if (!v13)
      {
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        if (!v15)
          WTF::fastFree((WTF *)v10, a2);
      }
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_9;
  }
LABEL_14:
  v18 = a1[2];
  v17 = a1[3];
  v19 = *((_QWORD *)a1 + 3);
  v20 = *((_QWORD *)a1 + 2);
  if (v20)
  {
    v27 = *(float *)(v20 + 16);
    if (v27 >= 2147500000.0)
    {
      v28 = 0x7FFFFFFFLL;
    }
    else
    {
      v28 = 0x80000000;
      if (v27 > -2147500000.0)
        v28 = (int)v27;
    }
    v29 = *(float *)(v20 + 20);
    if (v29 >= 2147500000.0)
    {
      v30 = 0x7FFFFFFF00000000;
    }
    else if (v29 <= -2147500000.0)
    {
      v30 = 0x8000000000000000;
    }
    else
    {
      v30 = (unint64_t)(int)v29 << 32;
    }
    *((_QWORD *)a1 + 1) = v30 | v28;
    v21 = *(_QWORD *)(v20 + 104);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    if (!*(_BYTE *)(v31 + 345))
    {
      *(_BYTE *)(v31 + 345) = 1;
      *(_DWORD *)(v31 + 184) |= 0x4000u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 88))(v31, v31 + 8);
    v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2));
    if (*(_BYTE *)(v32 + 340) != 2)
    {
      *(_BYTE *)(v32 + 340) = 2;
      *(_DWORD *)(v32 + 184) |= 0x400u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 88))(v32, v32 + 8);
    v33 = (float *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2));
    if (v33[47] != 1.0)
    {
      *((_DWORD *)v33 + 46) |= 8u;
      v33[47] = 1.0;
    }
    (*(void (**)(float *, _DWORD *))(*(_QWORD *)v33 + 88))(v33, (_DWORD *)v33 + 2);
    v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2));
    v35 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v35 = v34;
    *(_BYTE *)(v35 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 96))(v34, 1);
    v37 = (WTF *)*((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v35;
    if (v37)
    {
      if (*((_BYTE *)v37 + 8))
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v37 + 104))(*(_QWORD *)v37, 1);
      WTF::fastFree(v37, v36);
    }
    *((_QWORD *)a1 + 3) = v21;
    if (v21)
    {
      v38 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 344))(v38);
      MEMORY[0x19AEA3294](v42, v39);
      v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 344))(v40);
      if (v21 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase();
      MEMORY[0x19AEA32A0](v42);
    }
  }
  else
  {
    v21 = 0;
    *((_QWORD *)a1 + 3) = 0;
  }
  result = (WebCore::CanvasRenderingContext *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 88))(a1);
  if (result)
  {
    v24 = result;
    if (a1[2] != v18 || a1[3] != v17)
      result = WebCore::InspectorInstrumentation::didChangeCanvasSize(result, v23);
    if (v19 != v21)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        result = (WebCore::CanvasRenderingContext *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v24 + 4) + 144))(*((_QWORD **)v24 + 4));
        if (result)
        {
          result = (WebCore::CanvasRenderingContext *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v26);
          if (result)
            return (WebCore::CanvasRenderingContext *)WebCore::InspectorInstrumentation::didChangeCanvasMemoryImpl((uint64_t)result, v24);
        }
      }
    }
  }
  return result;
}

void WebCore::CanvasBase::~CanvasBase(WebCore::CanvasBase *this, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E33B0568;
  *((_QWORD *)this + 8) = 0x7FFFFFFFFFFFFFFFLL;
  WTF::WeakHashSet<WebCore::CanvasDisplayBufferObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet((uint64_t *)this + 12, a2);
  WTF::WeakHashSet<WebCore::CanvasDisplayBufferObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet((uint64_t *)this + 10, v3);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  std::unique_ptr<WebCore::GraphicsContextStateSaver>::~unique_ptr[abi:sn180100]((WTF **)this + 4, v4);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v7 + 8), v6);
}

uint64_t *WebCore::CanvasBase::notifyObserversCanvasDestroyed(WebCore::CanvasBase *this)
{
  void *v2;
  void *v3;
  uint64_t *v5[5];
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8[2];

  v6 = 0;
  v7 = 0;
  std::exchange[abi:sn180100]<WTF::WeakHashSet<WebCore::CanvasObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::WeakHashSet<WebCore::CanvasObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>((_QWORD *)this + 10, (uint64_t *)&v6, v8);
  WTF::WeakHashSet<WebCore::CanvasDisplayBufferObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet((uint64_t *)&v6, v2);
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v8, &v6);
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v8, v5);
  while (v7 != v5[1])
  {
    (*(void (**)(_QWORD, WebCore::CanvasBase *))(**(_QWORD **)(*v7 + 8) + 40))(*(_QWORD *)(*v7 + 8), this);
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v6);
  }
  return WTF::WeakHashSet<WebCore::CanvasDisplayBufferObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(v8, v3);
}

WTF::StringImpl *WebCore::JSHTMLMediaElementPrototype::finishCreation(WebCore::JSHTMLMediaElementPrototype *this, JSC::VM *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  WebCore::Quirks *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Document *v26;
  WebCore::Quirks *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Document *v31;
  WebCore::Quirks *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Document *v36;
  WebCore::Quirks *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *result;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<62u>(a2, this);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v4 && *(_BYTE *)(v4 + 274))
    goto LABEL_166;
  v5 = (int *)((char *)a2 + 93124);
  v6 = v4 - 192;
  if (!v4)
    v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 680) + 712);
  v8 = (v7 & 0x100) == 0;
  if ((v7 & 0x100) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v63 = v82;
    v64 = *v5;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v64;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v65);
      else
        *(_DWORD *)v63 -= 2;
    }
  }
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1944356DCLL);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 704) & 0x20000000000000) == 0)
    goto LABEL_101;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v11 && *(_BYTE *)(v11 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443581CLL);
  }
  v12 = (WebCore::Document *)(v11 - 192);
  if (!v11)
    v12 = 0;
  v13 = (WebCore::Quirks *)*((_QWORD *)v12 + 86);
  if (!v13)
    v13 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v12);
  if (WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v13))
  {
LABEL_101:
    WTF::AtomStringImpl::addLiteral();
    v51 = v82;
    v52 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v52;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v53);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v14 && *(_BYTE *)(v14 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1944356FCLL);
  }
  v15 = v14 - 192;
  if (!v14)
    v15 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v15 + 680) + 704) & 0x2000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v66 = v82;
    v67 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v67;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v68);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v16 && *(_BYTE *)(v16 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443571CLL);
  }
  v17 = v16 - 192;
  if (!v16)
    v17 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v17 + 680) + 712) & 0x20000) == 0)
    goto LABEL_30;
  v69 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v69 && *(_BYTE *)(v69 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1944358CCLL);
  }
  v70 = v69 - 192;
  if (!v69)
    v70 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v70 + 680) + 712) & 0x10000000) == 0)
  {
LABEL_30:
    WTF::AtomStringImpl::addLiteral();
    v18 = v82;
    v19 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v19;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v20);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  v21 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v21 && *(_BYTE *)(v21 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443573CLL);
  }
  v22 = v21 - 192;
  if (!v21)
    v22 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v22 + 680) + 712) & 0x100) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v71 = v82;
    v72 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v72;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v73);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v23 && *(_BYTE *)(v23 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443575CLL);
  }
  v24 = v23 - 192;
  if (!v23)
    v24 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v24 + 680) + 704) & 0x20000000000000) == 0)
    goto LABEL_104;
  v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v25 && *(_BYTE *)(v25 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443583CLL);
  }
  v26 = (WebCore::Document *)(v25 - 192);
  if (!v25)
    v26 = 0;
  v27 = (WebCore::Quirks *)*((_QWORD *)v26 + 86);
  if (!v27)
    v27 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v26);
  if (WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v27))
  {
LABEL_104:
    WTF::AtomStringImpl::addLiteral();
    v54 = v82;
    v55 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v55;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v56);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v28 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v28 && *(_BYTE *)(v28 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443577CLL);
  }
  v29 = v28 - 192;
  if (!v28)
    v29 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v29 + 680) + 704) & 0x20000000000000) == 0)
    goto LABEL_107;
  v30 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v30 && *(_BYTE *)(v30 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443585CLL);
  }
  v31 = (WebCore::Document *)(v30 - 192);
  if (!v30)
    v31 = 0;
  v32 = (WebCore::Quirks *)*((_QWORD *)v31 + 86);
  if (!v32)
    v32 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v31);
  if (WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v32))
  {
LABEL_107:
    WTF::AtomStringImpl::addLiteral();
    v57 = v82;
    v58 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v58;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v59);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  v33 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v33 && *(_BYTE *)(v33 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443579CLL);
  }
  v34 = v33 - 192;
  if (!v33)
    v34 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v34 + 680) + 704) & 0x20000000000000) == 0)
    goto LABEL_110;
  v35 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v35 && *(_BYTE *)(v35 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19443587CLL);
  }
  v36 = (WebCore::Document *)(v35 - 192);
  if (!v35)
    v36 = 0;
  v37 = (WebCore::Quirks *)*((_QWORD *)v36 + 86);
  if (!v37)
    v37 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v36);
  if (WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v37))
  {
LABEL_110:
    WTF::AtomStringImpl::addLiteral();
    v60 = v82;
    v61 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v61;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v62);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  v38 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v38 && *(_BYTE *)(v38 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1944357BCLL);
  }
  v39 = v38 - 192;
  if (!v38)
    v39 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v39 + 680) + 704) & 0x2000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v74 = v82;
    v75 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v75;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v76);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  v40 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v40 && *(_BYTE *)(v40 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1944357DCLL);
  }
  v41 = v40 - 192;
  if (!v40)
    v41 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v41 + 680) + 720) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v77 = v82;
    v78 = *v5;
    v8 = 1;
    *v5 = 1;
    LODWORD(v82) = -1;
    WORD2(v82) = 1;
    JSC::JSObject::deleteProperty();
    *v5 = v78;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v79);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  v42 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v42 && *(_BYTE *)(v42 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1944357FCLL);
  }
  v43 = v42 - 192;
  if (!v42)
    v43 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v43 + 680) + 712) & 0x20000) == 0)
    goto LABEL_89;
  v80 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v80)
  {
    if (*(_BYTE *)(v80 + 274))
    {
LABEL_166:
      __break(0xC471u);
      JUMPOUT(0x1944356BCLL);
    }
  }
  v81 = v80 - 192;
  if (!v80)
    v81 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v81 + 680) + 712) & 0x10000000) != 0)
  {
    if (!v8)
      goto LABEL_94;
    goto LABEL_92;
  }
LABEL_89:
  WTF::AtomStringImpl::addLiteral();
  v44 = v82;
  v45 = *v5;
  *v5 = 1;
  LODWORD(v82) = -1;
  WORD2(v82) = 1;
  JSC::JSObject::deleteProperty();
  *v5 = v45;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v46);
    else
      *(_DWORD *)v44 -= 2;
  }
LABEL_92:
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2, this);
LABEL_94:
  v47 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = JSC::jsNontrivialString((uint64_t)a2, &v82);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v47, v48, 6);
  result = v82;
  v82 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v49);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  const WTF::StringImpl *v32;
  __int16 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (*(_BYTE *)(v3 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  if (!*((_BYTE *)this + 9))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v47;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
    {
      while (1)
      {
        v35 = *(_QWORD *)(v6 + 528);
        if (!v35)
          break;
        v36 = *(_QWORD *)(v35 + 8);
        if (!v36)
          break;
        v37 = *(_QWORD *)(v36 + 120);
        if (!v37)
          break;
        v38 = *(_QWORD *)(v37 + 8);
        if (!v38)
          break;
        v6 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 8);
      }
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 528);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
          if (v9 && *(_BYTE *)(v9 + 144) == 0)
          {
            v11 = *(_QWORD *)(v9 + 296);
            if (v11)
              v6 = v11;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v47, (const WTF::URL *)(v6 + 736));
    LODWORD(v14) = WTF::equal(v47, v5, v12);
    v15 = v47;
    v47 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        goto LABEL_68;
      *(_DWORD *)v15 -= 2;
    }
    while (1)
    {
      if ((_DWORD)v14)
      {
        *((_WORD *)this + 4) = 257;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v47;
        v16 = *(_QWORD *)this;
        if (*(_QWORD *)this)
          v16 = *(_QWORD *)(v16 + 8);
        if (*(_BYTE *)(v16 + 3362) || *(_BYTE *)(v16 + 3405))
        {
          while (1)
          {
            v39 = *(_QWORD *)(v16 + 528);
            if (!v39)
              break;
            v40 = *(_QWORD *)(v39 + 8);
            if (!v40)
              break;
            v41 = *(_QWORD *)(v40 + 120);
            if (!v41)
              break;
            v42 = *(_QWORD *)(v41 + 8);
            if (!v42)
              break;
            v16 = *(_QWORD *)(*(_QWORD *)(v42 + 40) + 8);
          }
        }
        else
        {
          v17 = *(_QWORD *)(v16 + 528);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18)
            {
              v19 = *(_QWORD *)(*(_QWORD *)(v18 + 128) + 8);
              if (v19 && *(_BYTE *)(v19 + 144) == 0)
              {
                v21 = *(_QWORD *)(v19 + 296);
                if (v21)
                  v16 = v21;
              }
            }
          }
        }
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v47, (const WTF::URL *)(v16 + 736));
        v23 = WTF::equal(v47, v14, v22);
        v24 = v47;
        v47 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v13);
          else
            *(_DWORD *)v24 -= 2;
        }
        if ((v23 & 1) != 0)
        {
          *((_WORD *)this + 4) = 257;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v25 = v47;
          v26 = *(_QWORD *)this;
          if (*(_QWORD *)this)
            v26 = *(_QWORD *)(v26 + 8);
          if (*(_BYTE *)(v26 + 3362) || *(_BYTE *)(v26 + 3405))
          {
            while (1)
            {
              v43 = *(_QWORD *)(v26 + 528);
              if (!v43)
                break;
              v44 = *(_QWORD *)(v43 + 8);
              if (!v44)
                break;
              v45 = *(_QWORD *)(v44 + 120);
              if (!v45)
                break;
              v46 = *(_QWORD *)(v45 + 8);
              if (!v46)
                break;
              v26 = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 8);
            }
          }
          else
          {
            v27 = *(_QWORD *)(v26 + 528);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 8);
              if (v28)
              {
                v29 = *(_QWORD *)(*(_QWORD *)(v28 + 128) + 8);
                if (v29 && *(_BYTE *)(v29 + 144) == 0)
                {
                  v31 = *(_QWORD *)(v29 + 296);
                  if (v31)
                    v26 = v31;
                }
              }
            }
          }
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v47, (const WTF::URL *)(v26 + 736));
          v33 = WTF::equal(v47, v25, v32);
          v34 = v47;
          v47 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v13);
            else
              *(_DWORD *)v34 -= 2;
          }
          *((_WORD *)this + 4) = v33 | 0x100;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v13);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v13);
        else
          *(_DWORD *)v5 -= 2;
      }
      if (*((_BYTE *)this + 9))
        break;
      v15 = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_68:
      WTF::StringImpl::destroy(v15, v13);
    }
  }
  return *((_BYTE *)this + 8) != 0;
}

void WebCore::KeyframeEffect::setBlendingKeyframes(WebCore::KeyframeEffect *a1, WTF::StringImpl *a2)
{
  WebCore::KeyframeEffect *v3;
  _BOOL4 v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t IsAccelerated;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)();
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (**v73)();
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  int j;
  unsigned int v79;
  uint64_t *v80;
  uint64_t v81;
  BOOL v82;
  _BOOL4 v83;
  BOOL v85;
  BOOL v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  _BOOL4 v123;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  _BOOL4 v135;
  BOOL v137;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  int k;
  unsigned int v144;
  unsigned __int16 *v145;
  uint64_t v146;
  BOOL v147;
  _BOOL4 v148;
  BOOL v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  int v169;
  _BYTE *v170;
  int v171;
  int v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned __int16 *v180;
  uint64_t v181;
  _BOOL4 v183;
  BOOL v185;
  char v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  unsigned __int16 *v194;
  uint64_t v195;
  _BOOL4 v197;
  BOOL v199;
  char v200;
  BOOL v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  int v223;
  WebCore::KeyframeEffect *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned __int16 *v230;
  uint64_t v231;
  BOOL v232;
  _BOOL4 v233;
  BOOL v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int16 v263;
  uint64_t v264;
  int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  _WORD *v271;
  int v272;
  _WORD *v273;
  int v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  unint64_t v279;
  double v280;
  uint64_t *v281;
  int v282;
  unsigned int v283;
  unsigned __int16 *v284;
  int v285;
  unsigned __int16 *v286;
  int v287;
  int v288;
  int v289;
  uint64_t v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  unsigned int v294;
  uint64_t v295;
  int v296;
  unsigned int v297;
  int v298;
  unsigned __int16 *v299;
  int v300;
  int v301;
  int v302;
  uint64_t v303;
  unint64_t v304;
  int v305;
  unsigned int v306;
  uint64_t i;
  int v308;
  BOOL v309;
  int v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t **v316;
  uint64_t **v317;
  uint64_t v318;
  uint64_t **v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  uint64_t **v325;
  int v326;
  int v327;
  unsigned int v328;
  uint64_t v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t *v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  int v339;
  uint64_t *v340;
  int v341;
  int v342;
  unsigned int v343;
  uint64_t v345;
  uint64_t **v346;
  uint64_t **v347;
  uint64_t v348;
  uint64_t **v349;
  char v350;
  uint64_t **v351;
  uint64_t v352;
  WTF *v353;
  uint64_t v354;
  _DWORD **v355;
  _DWORD *v356;
  uint64_t v358;
  char *v359;
  char v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v366;
  uint64_t v367;
  char v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  char v409;
  unsigned int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  _DWORD **v414;
  _DWORD *v415;
  WTF *v416;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  void *v436;
  WTF *v437;
  char v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  unsigned int v442;
  int m;
  unsigned int v444;
  unsigned __int16 *v445;
  uint64_t v446;
  _BOOL4 v448;
  BOOL v451;
  char v452;
  uint64_t v453;
  uint64_t v454;
  _DWORD **v455;
  _DWORD *v456;
  WTF *v457;
  uint64_t v459;
  char v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  WebCore::BlendingKeyframe *v473;
  uint64_t v474;
  uint64_t v475;
  unsigned __int16 **v476;
  uint64_t *v477;
  void *v478;
  char v479;
  int v480;
  char v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t *v484;
  uint64_t v485;
  _BOOL4 canBeAccelerated;
  _BOOL4 v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  WebCore::KeyframeEffect *v492;
  uint64_t v493;
  uint64_t *v494;
  unsigned int v495;
  uint64_t **v496;
  int v497;
  char v498;
  char *v499;
  uint64_t **v500;
  unsigned int v501;
  uint64_t *v502;
  unsigned int v503;
  WTF *v504;
  uint64_t v505;

  v3 = a1;
  v4 = WebCore::KeyframeEffect::preventsAcceleration(a1, a2);
  canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated(v3);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)v3 + 17);
  v485 = (uint64_t)v3 + 136;
  *((_QWORD *)v3 + 17) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((unsigned int *)v3 + 39);
  if ((_DWORD)v8)
  {
    v473 = (WebCore::BlendingKeyframe *)*((_QWORD *)v3 + 18);
    v474 = 48 * v8;
    do
    {
      WebCore::BlendingKeyframe::~BlendingKeyframe(v473, v5);
      v473 = (WebCore::BlendingKeyframe *)(v475 + 48);
      v474 -= 48;
    }
    while (v474);
  }
  v9 = (WTF *)*((_QWORD *)v3 + 18);
  if (v9)
  {
    *((_QWORD *)v3 + 18) = 0;
    *((_DWORD *)v3 + 38) = 0;
    WTF::fastFree(v9, v5);
  }
  v10 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)v3 + 18) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  v11 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v12 = *((_QWORD *)v3 + 20);
  *((_DWORD *)v3 + 38) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *((_DWORD *)v3 + 39) = v10;
  v491 = (uint64_t *)((char *)v3 + 160);
  v492 = v3;
  *((_QWORD *)v3 + 20) = v11;
  if (v12)
  {
    v239 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v239)
    {
      v240 = v12;
      do
      {
        v241 = *(unsigned int *)(v240 + 8);
        if ((_DWORD)v241 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v241])(&v502, v240) & 1) == 0)
        {
          v242 = *(unsigned int *)(v240 + 8);
          if ((_DWORD)v242 != -1)
            ((void (*)(uint64_t **, uint64_t))off_1E33919E8[v242])(&v502, v240);
          *(_DWORD *)(v240 + 8) = -1;
        }
        v240 += 16;
        --v239;
      }
      while (v239);
    }
    WTF::fastFree((WTF *)(v12 - 16), v5);
    v3 = v492;
  }
  v13 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v14 = *((_QWORD *)v3 + 21);
  v483 = (uint64_t *)((char *)v3 + 168);
  *((_QWORD *)v3 + 21) = v13;
  if (v14)
  {
    v243 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v243)
    {
      v244 = v14;
      do
      {
        v245 = *(unsigned int *)(v244 + 8);
        if ((_DWORD)v245 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v245])(&v502, v244) & 1) == 0)
        {
          v246 = *(unsigned int *)(v244 + 8);
          if ((_DWORD)v246 != -1)
            ((void (*)(uint64_t **, uint64_t))off_1E33919E8[v246])(&v502, v244);
          *(_DWORD *)(v244 + 8) = -1;
        }
        v244 += 16;
        --v243;
      }
      while (v243);
    }
    WTF::fastFree((WTF *)(v14 - 16), v5);
    v3 = v492;
  }
  v15 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v16 = *((_QWORD *)v3 + 22);
  v484 = (uint64_t *)((char *)v3 + 176);
  *((_QWORD *)v3 + 22) = v15;
  if (v16)
  {
    v247 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v247)
    {
      v248 = v16;
      do
      {
        v249 = *(unsigned int *)(v248 + 8);
        if ((_DWORD)v249 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v249])(&v502, v248) & 1) == 0)
        {
          v250 = *(unsigned int *)(v248 + 8);
          if ((_DWORD)v250 != -1)
            ((void (*)(uint64_t **, uint64_t))off_1E33919E8[v250])(&v502, v248);
          *(_DWORD *)(v248 + 8) = -1;
        }
        v248 += 16;
        --v247;
      }
      while (v247);
    }
    WTF::fastFree((WTF *)(v16 - 16), v5);
    v3 = v492;
  }
  v17 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v18 = *((_QWORD *)v3 + 23);
  *((_QWORD *)v3 + 23) = v17;
  if (v18)
  {
    v251 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v251)
    {
      v252 = v18;
      do
      {
        v253 = *(unsigned int *)(v252 + 8);
        if ((_DWORD)v253 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v253])(&v502, v252) & 1) == 0)
        {
          v254 = *(unsigned int *)(v252 + 8);
          if ((_DWORD)v254 != -1)
            ((void (*)(uint64_t **, uint64_t))off_1E33919E8[v254])(&v502, v252);
          *(_DWORD *)(v252 + 8) = -1;
        }
        v252 += 16;
        --v251;
      }
      while (v251);
    }
    WTF::fastFree((WTF *)(v18 - 16), v5);
    v3 = v492;
  }
  v19 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  v20 = *((_QWORD *)v3 + 24);
  *((_QWORD *)v3 + 24) = v19;
  if (v20)
  {
    v255 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v255)
    {
      v256 = v20;
      do
      {
        v257 = *(unsigned int *)(v256 + 8);
        if ((_DWORD)v257 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v257])(&v502, v256) & 1) == 0)
        {
          v258 = *(unsigned int *)(v256 + 8);
          if ((_DWORD)v258 != -1)
            ((void (*)(uint64_t **, uint64_t))off_1E33919E8[v258])(&v502, v256);
          *(_DWORD *)(v256 + 8) = -1;
        }
        v256 += 16;
        --v255;
      }
      while (v255);
    }
    WTF::fastFree((WTF *)(v20 - 16), v5);
    v3 = v492;
  }
  v21 = *((_DWORD *)a2 + 16);
  *((_WORD *)v3 + 102) = *((_WORD *)a2 + 34);
  *((_DWORD *)v3 + 50) = v21;
  v22 = *((_QWORD *)v3 + 26);
  if (v22)
  {
    *((_QWORD *)v3 + 26) = 0;
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::deallocateTable(v22, v5);
  }
  v23 = *((_QWORD *)v3 + 12);
  v487 = v4;
  if (v23
    && (v24 = *(_QWORD *)(v23 + 8)) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 120))(v24) & 1) != 0)
  {
    v25 = 0;
  }
  else if (*((_BYTE *)v3 + 202))
  {
    v25 = 1;
  }
  else
  {
    v25 = *((_BYTE *)v3 + 203) != 0;
  }
  *((_BYTE *)v3 + 311) = v25;
  *((_BYTE *)v3 + 312) = 0;
  v26 = *((_QWORD *)v3 + 20);
  if (!v26)
  {
    v32 = 0;
    v27 = 0;
    goto LABEL_495;
  }
  v27 = *(unsigned int *)(v26 - 4);
  v28 = (uint64_t *)(v26 + 16 * v27);
  if (!*(_DWORD *)(v26 - 12))
    goto LABEL_1124;
  if ((_DWORD)v27)
  {
    v29 = 16 * v27;
    do
    {
      v30 = *(unsigned int *)(v26 + 8);
      if ((_DWORD)v30)
        v31 = 0;
      else
        v31 = *(unsigned __int16 *)v26 == 0;
      if (!v31)
      {
        if ((_DWORD)v30 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if (!((unsigned int (*)(uint64_t **, uint64_t))off_1E3391998[v30])(&v502, v26))
          goto LABEL_31;
      }
      v26 += 16;
      v29 -= 16;
    }
    while (v29);
    v26 = (uint64_t)v28;
LABEL_31:
    v32 = v26;
    v26 = *v491;
    goto LABEL_32;
  }
  v32 = *((_QWORD *)v3 + 20);
LABEL_32:
  while (2)
  {
    if (v26)
      v33 = v26 + 16 * *(unsigned int *)(v26 - 4);
    else
      v33 = 0;
    while (v32 != v33)
    {
      LOBYTE(v502) = 0;
      v503 = -1;
      v34 = *(unsigned int *)(v32 + 8);
      if ((_DWORD)v34 != -1)
      {
        ((void (*)(uint64_t ***, uint64_t **, uint64_t))off_1E33919F8[v34])(&v500, &v502, v32);
        v503 = v34;
        if (!(_DWORD)v34
          && WebCore::WillChangeData::propertyCreatesStackingContext((unsigned __int16)v502))
        {
          *((_BYTE *)v492 + 312) = 1;
          ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v34])(&v500, &v502);
          break;
        }
        ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v34])(&v500, &v502);
      }
      v35 = v32 + 16;
      v32 = (uint64_t)v28;
      if ((uint64_t *)v35 != v28)
      {
        v32 = (uint64_t)v28;
        while (1)
        {
          v36 = *(unsigned int *)(v35 + 8);
          if ((_DWORD)v36 || *(_WORD *)v35 != 0)
          {
            if ((_DWORD)v36 == -1)
              goto LABEL_994;
            v502 = (uint64_t *)&v500;
            v32 = (uint64_t)v28;
            if (!((unsigned int (*)(uint64_t **, uint64_t))off_1E3391998[v36])(&v502, v35))
              break;
          }
          v35 += 16;
          if (v35 == v32)
            goto LABEL_51;
        }
        v32 = v35;
      }
LABEL_51:
      ;
    }
    v38 = *((_QWORD *)v492 + 15);
    if (!v38 || (v39 = *(_QWORD *)(v38 + 8)) == 0)
    {
      v238 = *((_QWORD *)v492 + 33);
      if (!v238)
        goto LABEL_94;
      v39 = *(_QWORD *)(*(_QWORD *)(v238 + 40) + 8);
      if (!v39)
        goto LABEL_94;
    }
    v28 = *(uint64_t **)(v39 + 680);
    v40 = *v491;
    if (!*v491)
    {
      v46 = 0;
      v41 = 0;
LABEL_497:
      v42 = v40 + 16 * v41;
      goto LABEL_68;
    }
    v41 = *(unsigned int *)(v40 - 4);
    v42 = v40 + 16 * v41;
    if (!*(_DWORD *)(v40 - 12))
    {
      v46 = v40 + 16 * v41;
      goto LABEL_497;
    }
    if ((_DWORD)v41)
    {
      v43 = 16 * v41;
      while (1)
      {
        v44 = *(unsigned int *)(v40 + 8);
        if ((_DWORD)v44 || *(_WORD *)v40 != 0)
        {
          if ((_DWORD)v44 == -1)
            goto LABEL_994;
          v502 = (uint64_t *)&v500;
          if (!((unsigned int (*)(uint64_t **, uint64_t))off_1E3391998[v44])(&v502, v40))
            break;
        }
        v40 += 16;
        v43 -= 16;
        if (!v43)
        {
          v40 = v42;
          break;
        }
      }
      v46 = v40;
      v40 = *v491;
    }
    else
    {
      v46 = *v491;
    }
LABEL_68:
    if (v40)
      v47 = v40 + 16 * *(unsigned int *)(v40 - 4);
    else
      v47 = 0;
    if (v47 == v46)
    {
LABEL_94:
      v54 = (uint64_t)v492;
      *((_BYTE *)v492 + 308) = 0;
      goto LABEL_95;
    }
    v48 = 0;
    v49 = 0;
    v26 = 0xFFFFFFFFLL;
    do
    {
      LOBYTE(v502) = 0;
      v503 = -1;
      v50 = *(unsigned int *)(v46 + 8);
      if ((_DWORD)v50 == -1)
        goto LABEL_1122;
      ((void (*)(uint64_t ***, uint64_t **, uint64_t))off_1E33919F8[v50])(&v500, &v502, v46);
      v503 = v50;
      v496 = (uint64_t **)v28;
      v500 = (uint64_t **)&v496;
      if (((unsigned int (*)(uint64_t ***, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation32animationOfPropertyIsAcceleratedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_8SettingsEE3__0JZNS9_32animationOfPropertyIsAcceleratedESF_SI_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v50])(&v500, &v502))
      {
        v48 = 1;
      }
      else
      {
        v49 = 1;
      }
      if ((v48 & 1) != 0 && (v49 & 1) != 0)
      {
        if (v503 != -1)
          ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
        v359 = (char *)v492 + 308;
        goto LABEL_1103;
      }
      if (v503 != -1)
        ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
      v51 = v46 + 16;
      v46 = v42;
      if (v51 != v42)
      {
        v46 = v42;
        while (1)
        {
          v52 = *(unsigned int *)(v51 + 8);
          if ((_DWORD)v52 || *(_WORD *)v51 != 0)
          {
            if ((_DWORD)v52 == -1)
              goto LABEL_994;
            v502 = (uint64_t *)&v500;
            v46 = v42;
            if (!((unsigned int (*)(uint64_t **, uint64_t))off_1E3391998[v52])(&v502, v51))
              break;
          }
          v51 += 16;
          if (v51 == v46)
            goto LABEL_92;
        }
        v46 = v51;
      }
LABEL_92:
      ;
    }
    while (v46 != v47);
    if ((v48 & 1) == 0)
      goto LABEL_94;
    v359 = (char *)v492 + 308;
    if ((v49 & 1) == 0)
    {
      v360 = 2;
      goto LABEL_781;
    }
LABEL_1103:
    v360 = 1;
LABEL_781:
    *v359 = v360;
    v54 = (uint64_t)v492;
LABEL_95:
    IsAccelerated = WebCore::KeyframeEffect::computeSomeKeyframesUseStepsOrLinearTimingFunctionWithPoints(v54);
    LOBYTE(v57) = *(_BYTE *)(v54 + 308);
    if (!(_BYTE)v57)
    {
      *(_BYTE *)(v54 + 331) = 0;
      break;
    }
    v58 = *(_QWORD *)(v54 + 120);
    if (!v58 || (v59 = *(_QWORD *)(v58 + 8)) == 0)
      v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 264) + 40) + 8);
    v493 = *(_QWORD *)(v59 + 680);
    if (!*(_DWORD *)(v54 + 156))
    {
      v259 = *(unsigned int *)(v54 + 244);
      if (!(_DWORD)v259)
      {
        v460 = 0;
        goto LABEL_871;
      }
      v260 = *(_QWORD *)(v54 + 232);
      v482 = v260 + (v259 << 6);
      while (1)
      {
        v500 = 0;
        v496 = 0;
        v494 = 0;
        v261 = *(_QWORD *)(v260 + 56);
        ++*(_DWORD *)v261;
        if (*(_DWORD *)(v261 + 28))
        {
          v262 = 0;
          v488 = v260;
          v490 = v261;
          do
          {
            v263 = *(_WORD *)(*(_QWORD *)(v261 + 16) + 16 * v262);
            v264 = (uint64_t)v500;
            if (v500
              || (IsAccelerated = WTF::fastZeroedMalloc((WTF *)0x20),
                  v500 = (uint64_t **)(IsAccelerated + 16),
                  *(_QWORD *)(IsAccelerated + 8) = 0x800000007,
                  *(_DWORD *)IsAccelerated = 0,
                  *((_DWORD *)v500 - 3) = 0,
                  (v264 = (uint64_t)v500) != 0))
            {
              v265 = *(_DWORD *)(v264 - 8);
            }
            else
            {
              v265 = 0;
            }
            v266 = v263 & 0x3FF;
            v267 = 9 * ((~(v266 << 15) + v266) ^ ((~(v266 << 15) + v266) >> 10));
            v268 = (v267 ^ (v267 >> 6)) + ~((v267 ^ (v267 >> 6)) << 11);
            v269 = v268 ^ HIWORD(v268);
            v270 = v265 & v269;
            v271 = (_WORD *)(v264 + 2 * (v265 & v269));
            v272 = (unsigned __int16)*v271;
            if (*v271)
            {
              v273 = 0;
              v274 = 1;
              do
              {
                if (v272 == v266)
                  goto LABEL_570;
                if (v272 == 0xFFFF)
                  v273 = v271;
                v270 = (v270 + v274) & v265;
                v271 = (_WORD *)(v264 + 2 * v270);
                v272 = (unsigned __int16)*v271;
                ++v274;
              }
              while (*v271);
              if (v273)
              {
                *v273 = 0;
                --*((_DWORD *)v500 - 4);
                v271 = v273;
              }
            }
            *v271 = v266;
            if (v500)
              v275 = *((_DWORD *)v500 - 3) + 1;
            else
              v275 = 1;
            *((_DWORD *)v500 - 3) = v275;
            v276 = (uint64_t)v500;
            if (v500)
              v277 = *((_DWORD *)v500 - 3);
            else
              v277 = 0;
            v278 = (*((_DWORD *)v500 - 4) + v277);
            v279 = *((unsigned int *)v500 - 1);
            if (v279 > 0x400)
            {
              if (v279 > 2 * v278)
                goto LABEL_570;
            }
            else
            {
              if (3 * v279 > 4 * v278)
                goto LABEL_570;
              if (!(_DWORD)v279)
              {
                v305 = *((_DWORD *)v500 - 3);
                v306 = 8;
                goto LABEL_617;
              }
            }
            v305 = *((_DWORD *)v500 - 3);
            v306 = (_DWORD)v279 << (6 * v305 >= (2 * v279));
LABEL_617:
            IsAccelerated = WTF::fastZeroedMalloc((WTF *)(2 * v306 + 16));
            v500 = (uint64_t **)(IsAccelerated + 16);
            *(_DWORD *)(IsAccelerated + 8) = v306 - 1;
            *(_DWORD *)(IsAccelerated + 12) = v306;
            *(_DWORD *)IsAccelerated = 0;
            *((_DWORD *)v500 - 3) = v305;
            v260 = v488;
            v261 = v490;
            if (!(_DWORD)v279)
              goto LABEL_633;
            for (i = 0; i != v279; ++i)
            {
              v308 = *(unsigned __int16 *)(v276 + 2 * i);
              if (*(_WORD *)(v276 + 2 * i))
                v309 = v308 == 0xFFFF;
              else
                v309 = 1;
              if (!v309)
              {
                if (v500)
                  v310 = *((_DWORD *)v500 - 2);
                else
                  v310 = 0;
                v311 = 0;
                v312 = 9 * ((~(v308 << 15) + v308) ^ ((~(v308 << 15) + v308) >> 10));
                v313 = ((v312 ^ (v312 >> 6)) + ~((v312 ^ (v312 >> 6)) << 11)) ^ (((v312 ^ (v312 >> 6))
                                                                                + ~((v312 ^ (v312 >> 6)) << 11)) >> 16);
                do
                {
                  v314 = v313 & v310;
                  v313 = ++v311 + v314;
                }
                while (*((_WORD *)v500 + v314));
                *((_WORD *)v500 + v314) = v308;
              }
            }
            if (v276)
LABEL_633:
              IsAccelerated = WTF::fastFree((WTF *)(v276 - 16), v56);
LABEL_570:
            v280 = *(double *)(v260 + 24);
            if (v280 == 0.0)
            {
              v295 = (uint64_t)v496;
              if (v496
                || (IsAccelerated = (uint64_t)WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash((uint64_t *)&v496, 8u, 0), (v295 = (uint64_t)v496) != 0))
              {
                v296 = *(_DWORD *)(v295 - 8);
              }
              else
              {
                v296 = 0;
              }
              v297 = v296 & v269;
              v284 = (unsigned __int16 *)(v295 + 2 * (v296 & v269));
              v298 = *v284;
              if (*v284)
              {
                v299 = 0;
                v300 = 1;
                do
                {
                  if (v298 == v266)
                    goto LABEL_592;
                  if (v298 == 0xFFFF)
                    v299 = v284;
                  v297 = (v297 + v300) & v296;
                  v284 = (unsigned __int16 *)(v295 + 2 * v297);
                  v298 = *v284;
                  ++v300;
                }
                while (*v284);
                if (v299)
                {
                  *v299 = 0;
                  --*((_DWORD *)v496 - 4);
                  v284 = v299;
                }
              }
              *v284 = v266;
              if (v496)
                v301 = *((_DWORD *)v496 - 3) + 1;
              else
                v301 = 1;
              *((_DWORD *)v496 - 3) = v301;
              if (v496)
                v302 = *((_DWORD *)v496 - 3);
              else
                v302 = 0;
              v303 = (*((_DWORD *)v496 - 4) + v302);
              v304 = *((unsigned int *)v496 - 1);
              if (v304 <= 0x400)
              {
                if (3 * v304 > 4 * v303)
                  goto LABEL_592;
                if ((_DWORD)v304)
LABEL_613:
                  v292 = (_DWORD)v304 << (6 * *((_DWORD *)v496 - 3) >= (2 * v304));
                else
                  v292 = 8;
                v293 = (uint64_t *)&v496;
                goto LABEL_591;
              }
              if (v304 > 2 * v303)
                goto LABEL_592;
              goto LABEL_613;
            }
            if (v280 == 1.0)
            {
              v281 = v494;
              if (v494
                || (IsAccelerated = (uint64_t)WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash((uint64_t *)&v494, 8u, 0), (v281 = v494) != 0))
              {
                v282 = *((_DWORD *)v281 - 2);
              }
              else
              {
                v282 = 0;
              }
              v283 = v282 & v269;
              v284 = (unsigned __int16 *)v281 + (v282 & v269);
              v285 = *v284;
              if (*v284)
              {
                v286 = 0;
                v287 = 1;
                do
                {
                  if (v285 == v266)
                    goto LABEL_592;
                  if (v285 == 0xFFFF)
                    v286 = v284;
                  v283 = (v283 + v287) & v282;
                  v284 = (unsigned __int16 *)v281 + v283;
                  v285 = *v284;
                  ++v287;
                }
                while (*v284);
                if (v286)
                {
                  *v286 = 0;
                  --*((_DWORD *)v494 - 4);
                  v284 = v286;
                }
              }
              *v284 = v266;
              if (v494)
                v288 = *((_DWORD *)v494 - 3) + 1;
              else
                v288 = 1;
              *((_DWORD *)v494 - 3) = v288;
              if (v494)
                v289 = *((_DWORD *)v494 - 3);
              else
                v289 = 0;
              v290 = (*((_DWORD *)v494 - 4) + v289);
              v291 = *((unsigned int *)v494 - 1);
              if (v291 > 0x400)
              {
                if (v291 > 2 * v290)
                  goto LABEL_592;
LABEL_589:
                v292 = (_DWORD)v291 << (6 * *((_DWORD *)v494 - 3) >= (2 * v291));
LABEL_590:
                v293 = (uint64_t *)&v494;
LABEL_591:
                IsAccelerated = (uint64_t)WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash(v293, v292, v284);
                goto LABEL_592;
              }
              if (3 * v291 <= 4 * v290)
              {
                if ((_DWORD)v291)
                  goto LABEL_589;
                v292 = 8;
                goto LABEL_590;
              }
            }
LABEL_592:
            v294 = v262 + 1;
            v262 = (v262 + 1);
          }
          while (*(_DWORD *)(v261 + 28) > v294);
        }
        if (!v496)
          break;
        v315 = *((unsigned int *)v496 - 1);
        v316 = (uint64_t **)((char *)v496 + 2 * v315);
        if (!*((_DWORD *)v496 - 3))
        {
          v317 = (uint64_t **)((char *)v496 + 2 * v315);
          goto LABEL_659;
        }
        v317 = v496;
        if ((_DWORD)v315)
        {
          v318 = 2 * v315;
          v317 = v496;
          do
          {
            if ((unsigned __int16)(*(_WORD *)v317 + 1) > 1u)
              goto LABEL_660;
            v317 = (uint64_t **)((char *)v317 + 2);
            v318 -= 2;
          }
          while (v318);
          v317 = v316;
        }
LABEL_660:
        if (v496)
          v319 = (uint64_t **)((char *)v496 + 2 * *((unsigned int *)v496 - 1));
        else
          v319 = 0;
        while (v317 != v319)
        {
          if (v500)
          {
            v320 = *(unsigned __int16 *)v317;
            v321 = *((_DWORD *)v500 - 2);
            v322 = 9 * ((~(v320 << 15) + v320) ^ ((~(v320 << 15) + v320) >> 10));
            v323 = v321 & (((v322 ^ (v322 >> 6)) + ~((v322 ^ (v322 >> 6)) << 11)) ^ (((v322 ^ (v322 >> 6))
                                                                                    + ~((v322 ^ (v322 >> 6)) << 11)) >> 16));
            v324 = *((unsigned __int16 *)v500 + v323);
            if (v324 != v320)
            {
              v326 = 1;
              while (v324)
              {
                v323 = ((_DWORD)v323 + v326) & v321;
                v324 = *((unsigned __int16 *)v500 + v323);
                ++v326;
                if (v324 == v320)
                  goto LABEL_665;
              }
              v323 = *((unsigned int *)v500 - 1);
            }
LABEL_665:
            if (v323 != *((_DWORD *)v500 - 1))
            {
              *((_WORD *)v500 + v323) = -1;
              ++*((_DWORD *)v500 - 4);
              v327 = v500 ? *((_DWORD *)v500 - 3) - 1 : -1;
              *((_DWORD *)v500 - 3) = v327;
              if (v500)
              {
                v328 = *((_DWORD *)v500 - 1);
                if (6 * *((_DWORD *)v500 - 3) < v328 && v328 >= 9)
                  IsAccelerated = (uint64_t)WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash((uint64_t *)&v500, v328 >> 1, 0);
              }
            }
          }
          v325 = (uint64_t **)((char *)v317 + 2);
          v317 = v316;
          if (v325 != v316)
          {
            v317 = v325;
            do
            {
              if ((unsigned __int16)(*(_WORD *)v317 + 1) > 1u)
                goto LABEL_671;
              v317 = (uint64_t **)((char *)v317 + 2);
            }
            while (v317 != v316);
            v317 = v316;
          }
LABEL_671:
          ;
        }
        if (!v494)
        {
          v332 = 0;
          v330 = 0;
LABEL_697:
          v331 = (uint64_t *)((char *)v494 + 2 * v330);
          goto LABEL_698;
        }
        v330 = *((unsigned int *)v494 - 1);
        v331 = (uint64_t *)((char *)v494 + 2 * v330);
        if (!*((_DWORD *)v494 - 3))
        {
          v332 = (uint64_t *)((char *)v494 + 2 * v330);
          goto LABEL_697;
        }
        v332 = v494;
        if ((_DWORD)v330)
        {
          v333 = 2 * v330;
          v332 = v494;
          do
          {
            if ((unsigned __int16)(*(_WORD *)v332 + 1) > 1u)
              goto LABEL_698;
            v332 = (uint64_t *)((char *)v332 + 2);
            v333 -= 2;
          }
          while (v333);
          v332 = v331;
        }
LABEL_698:
        if (v494)
          v334 = (uint64_t *)((char *)v494 + 2 * *((unsigned int *)v494 - 1));
        else
          v334 = 0;
        while (v332 != v334)
        {
          if (v500)
          {
            v335 = *(unsigned __int16 *)v332;
            v336 = *((_DWORD *)v500 - 2);
            v337 = 9 * ((~(v335 << 15) + v335) ^ ((~(v335 << 15) + v335) >> 10));
            v338 = v336 & (((v337 ^ (v337 >> 6)) + ~((v337 ^ (v337 >> 6)) << 11)) ^ (((v337 ^ (v337 >> 6))
                                                                                    + ~((v337 ^ (v337 >> 6)) << 11)) >> 16));
            v339 = *((unsigned __int16 *)v500 + v338);
            if (v339 != v335)
            {
              v341 = 1;
              while (v339)
              {
                v338 = ((_DWORD)v338 + v341) & v336;
                v339 = *((unsigned __int16 *)v500 + v338);
                ++v341;
                if (v339 == v335)
                  goto LABEL_703;
              }
              v338 = *((unsigned int *)v500 - 1);
            }
LABEL_703:
            if (v338 != *((_DWORD *)v500 - 1))
            {
              *((_WORD *)v500 + v338) = -1;
              ++*((_DWORD *)v500 - 4);
              v342 = v500 ? *((_DWORD *)v500 - 3) - 1 : -1;
              *((_DWORD *)v500 - 3) = v342;
              if (v500)
              {
                v343 = *((_DWORD *)v500 - 1);
                if (6 * *((_DWORD *)v500 - 3) < v343 && v343 >= 9)
                  IsAccelerated = (uint64_t)WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash((uint64_t *)&v500, v343 >> 1, 0);
              }
            }
          }
          v340 = (uint64_t *)((char *)v332 + 2);
          v332 = v331;
          if (v340 != v331)
          {
            v332 = v340;
            do
            {
              if ((unsigned __int16)(*(_WORD *)v332 + 1) > 1u)
                goto LABEL_709;
              v332 = (uint64_t *)((char *)v332 + 2);
            }
            while (v332 != v331);
            v332 = v331;
          }
LABEL_709:
          ;
        }
        if (!v500)
        {
          v347 = 0;
          v345 = 0;
LABEL_735:
          v346 = (uint64_t **)((char *)v500 + 2 * v345);
          goto LABEL_736;
        }
        v345 = *((unsigned int *)v500 - 1);
        v346 = (uint64_t **)((char *)v500 + 2 * v345);
        if (!*((_DWORD *)v500 - 3))
        {
          v347 = (uint64_t **)((char *)v500 + 2 * v345);
          goto LABEL_735;
        }
        v347 = v500;
        if ((_DWORD)v345)
        {
          v348 = 2 * v345;
          v347 = v500;
          do
          {
            if ((unsigned __int16)(*(_WORD *)v347 + 1) > 1u)
              goto LABEL_736;
            v347 = (uint64_t **)((char *)v347 + 2);
            v348 -= 2;
          }
          while (v348);
          v347 = v346;
        }
LABEL_736:
        if (v500)
          v349 = (uint64_t **)((char *)v500 + 2 * *((unsigned int *)v500 - 1));
        else
          v349 = 0;
        while (v347 != v349)
        {
          LOWORD(v502) = *(_WORD *)v347;
          v503 = 0;
          IsAccelerated = WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated((uint64_t)&v502, v493);
          v350 = IsAccelerated;
          if (v503 != -1)
            IsAccelerated = ((uint64_t (*)(char **, uint64_t **))off_1E33919E8[v503])(&v499, &v502);
          if ((v350 & 1) != 0)
          {
            if (*(_DWORD *)v261 == 1)
            {
              v453 = *(unsigned int *)(v261 + 28);
              v54 = (uint64_t)v492;
              if ((_DWORD)v453)
              {
                v454 = 16 * v453;
                v455 = (_DWORD **)(*(_QWORD *)(v261 + 16) + 8);
                do
                {
                  v456 = *v455;
                  *v455 = 0;
                  if (v456)
                  {
                    if (*v456 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v456, (WTF::StringImpl *)v56);
                    else
                      *v456 -= 2;
                  }
                  v455 += 2;
                  v454 -= 16;
                }
                while (v454);
              }
              v457 = *(WTF **)(v261 + 16);
              if ((WTF *)(v261 + 32) != v457 && v457 != 0)
              {
                *(_QWORD *)(v261 + 16) = 0;
                *(_DWORD *)(v261 + 24) = 0;
                WTF::fastFree(v457, v56);
              }
              v459 = *(_QWORD *)(v261 + 8);
              *(_QWORD *)(v261 + 8) = 0;
              if (v459)
                (*(void (**)(uint64_t))(*(_QWORD *)v459 + 8))(v459);
              IsAccelerated = WTF::fastFree((WTF *)v261, v56);
            }
            else
            {
              --*(_DWORD *)v261;
              v54 = (uint64_t)v492;
            }
            if (v494)
              IsAccelerated = WTF::fastFree((WTF *)(v494 - 2), v56);
            if (v496)
              IsAccelerated = WTF::fastFree((WTF *)(v496 - 2), v56);
            if (v500)
              IsAccelerated = WTF::fastFree((WTF *)(v500 - 2), v56);
            v460 = 1;
            goto LABEL_871;
          }
          v351 = (uint64_t **)((char *)v347 + 2);
          v347 = v346;
          if (v351 != v346)
          {
            v347 = v351;
            do
            {
              if ((unsigned __int16)(*(_WORD *)v347 + 1) > 1u)
                goto LABEL_747;
              v347 = (uint64_t **)((char *)v347 + 2);
            }
            while (v347 != v346);
            v347 = v346;
          }
LABEL_747:
          ;
        }
        if (*(_DWORD *)v261 == 1)
        {
          v352 = *(unsigned int *)(v261 + 28);
          v353 = *(WTF **)(v261 + 16);
          if ((_DWORD)v352)
          {
            v354 = 16 * v352;
            v355 = (_DWORD **)((char *)v353 + 8);
            do
            {
              v356 = *v355;
              *v355 = 0;
              if (v356)
              {
                if (*v356 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v356, (WTF::StringImpl *)v56);
                else
                  *v356 -= 2;
              }
              v355 += 2;
              v354 -= 16;
            }
            while (v354);
            v353 = *(WTF **)(v261 + 16);
          }
          if ((WTF *)(v261 + 32) != v353 && v353 != 0)
          {
            *(_QWORD *)(v261 + 16) = 0;
            *(_DWORD *)(v261 + 24) = 0;
            WTF::fastFree(v353, v56);
          }
          v358 = *(_QWORD *)(v261 + 8);
          *(_QWORD *)(v261 + 8) = 0;
          if (v358)
            (*(void (**)(uint64_t))(*(_QWORD *)v358 + 8))(v358);
          IsAccelerated = WTF::fastFree((WTF *)v261, v56);
        }
        else
        {
          --*(_DWORD *)v261;
        }
        if (v494)
          IsAccelerated = WTF::fastFree((WTF *)(v494 - 2), v56);
        if (v496)
          IsAccelerated = WTF::fastFree((WTF *)(v496 - 2), v56);
        if (v500)
          IsAccelerated = WTF::fastFree((WTF *)(v500 - 2), v56);
        v260 += 64;
        if (v260 == v482)
        {
          v460 = 0;
          goto LABEL_870;
        }
      }
      v317 = 0;
      v315 = 0;
LABEL_659:
      v316 = (uint64_t **)((char *)v496 + 2 * v315);
      goto LABEL_660;
    }
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable(&v494, v491);
    IsAccelerated = (uint64_t)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable((uint64_t **)&v499, v491);
    v60 = *(_DWORD *)(v54 + 156);
    if (!v60)
      goto LABEL_784;
    v61 = *((_QWORD *)v492 + 18);
    v62 = v61 + 48 * v60;
    v63 = off_1E33919E8;
    do
    {
      if (!v494 || !*((_DWORD *)v494 - 3) || *(double *)(v61 + 8) != 0.0)
        goto LABEL_104;
      v96 = *(_QWORD *)(v61 + 16);
      if (!v96)
      {
        v102 = 0;
        v97 = 0;
LABEL_240:
        v98 = v96 + 16 * v97;
        goto LABEL_199;
      }
      v97 = *(unsigned int *)(v96 - 4);
      v98 = v96 + 16 * v97;
      if (!*(_DWORD *)(v96 - 12))
      {
        v102 = v96 + 16 * v97;
        goto LABEL_240;
      }
      if ((_DWORD)v97)
      {
        v99 = 16 * v97;
        while (1)
        {
          v100 = *(unsigned int *)(v96 + 8);
          if ((_DWORD)v100 || *(_WORD *)v96 != 0)
          {
            if ((_DWORD)v100 == -1)
              goto LABEL_994;
            v502 = (uint64_t *)&v500;
            IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v100])(&v502, v96);
            if (!(_DWORD)IsAccelerated)
              break;
          }
          v96 += 16;
          v99 -= 16;
          if (!v99)
          {
            v96 = v98;
            break;
          }
        }
        v102 = v96;
        v96 = *(_QWORD *)(v61 + 16);
      }
      else
      {
        v102 = *(_QWORD *)(v61 + 16);
      }
LABEL_199:
      if (v96)
        v103 = v96 + 16 * *(unsigned int *)(v96 - 4);
      else
        v103 = 0;
      while (v102 != v103)
      {
        LOBYTE(v502) = 0;
        v503 = -1;
        v104 = *(unsigned int *)(v102 + 8);
        if ((_DWORD)v104 != -1)
        {
          ((void (*)(uint64_t ***, uint64_t **, uint64_t))off_1E33919F8[v104])(&v500, &v502, v102);
          v503 = v104;
        }
        IsAccelerated = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>((uint64_t *)&v494, (uint64_t)&v502);
        v105 = IsAccelerated;
        if (v494)
        {
          v106 = &v494[2 * *((unsigned int *)v494 - 1)];
          if (v106 != (uint64_t *)IsAccelerated)
            goto LABEL_206;
        }
        else if (IsAccelerated)
        {
          v106 = 0;
LABEL_206:
          if (v106 != (uint64_t *)IsAccelerated)
          {
            v107 = *(unsigned int *)(IsAccelerated + 8);
            if ((_DWORD)v107 != -1)
              IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t))v63[v107])(&v500, IsAccelerated);
            *(_WORD *)v105 = -1;
            *(_DWORD *)(v105 + 8) = 0;
            ++*((_DWORD *)v494 - 4);
            if (v494)
              v108 = *((_DWORD *)v494 - 3) - 1;
            else
              v108 = -1;
            *((_DWORD *)v494 - 3) = v108;
            if (v494)
            {
              v109 = *((_DWORD *)v494 - 1);
              if (6 * *((_DWORD *)v494 - 3) < v109 && v109 >= 9)
                IsAccelerated = (uint64_t)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash((uint64_t *)&v494, v109 >> 1, 0);
            }
          }
        }
        if (v503 != -1)
          IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))v63[v503])(&v500, &v502);
        v111 = v102 + 16;
        v102 = v98;
        if (v111 != v98)
        {
          v102 = v98;
          while (1)
          {
            v112 = *(unsigned int *)(v111 + 8);
            if ((_DWORD)v112 || *(_WORD *)v111 != 0)
            {
              if ((_DWORD)v112 == -1)
                goto LABEL_994;
              v502 = (uint64_t *)&v500;
              IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v112])(&v502, v111);
              v102 = v98;
              if (!(_DWORD)IsAccelerated)
                break;
            }
            v111 += 16;
            if (v111 == v102)
              goto LABEL_231;
          }
          v102 = v111;
        }
LABEL_231:
        ;
      }
LABEL_104:
      if (!v499 || !*((_DWORD *)v499 - 3) || *(double *)(v61 + 8) != 1.0)
        goto LABEL_183;
      v64 = *(_QWORD *)(v61 + 16);
      if (v64)
      {
        v65 = *(unsigned int *)(v64 - 4);
        v66 = v64 + 16 * v65;
        if (*(_DWORD *)(v64 - 12))
        {
          if ((_DWORD)v65)
          {
            v67 = 16 * v65;
            while (1)
            {
              v68 = *(unsigned int *)(v64 + 8);
              if ((_DWORD)v68 || *(_WORD *)v64 != 0)
              {
                if ((_DWORD)v68 == -1)
                  goto LABEL_994;
                v502 = (uint64_t *)&v500;
                IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v68])(&v502, v64);
                if (!(_DWORD)IsAccelerated)
                  break;
              }
              v64 += 16;
              v67 -= 16;
              if (!v67)
              {
                v64 = v66;
                break;
              }
            }
            v70 = v64;
            v64 = *(_QWORD *)(v61 + 16);
          }
          else
          {
            v70 = *(_QWORD *)(v61 + 16);
          }
          goto LABEL_121;
        }
        v70 = v64 + 16 * v65;
      }
      else
      {
        v70 = 0;
        v65 = 0;
      }
      v66 = v64 + 16 * v65;
LABEL_121:
      if (v64)
        v71 = v64 + 16 * *(unsigned int *)(v64 - 4);
      else
        v71 = 0;
      if (v71 == v70)
        goto LABEL_183;
      v489 = v66;
      do
      {
        LOBYTE(v502) = 0;
        v503 = -1;
        v72 = *(unsigned int *)(v70 + 8);
        if ((_DWORD)v72 == -1)
        {
          if (!v499)
            goto LABEL_164;
          goto LABEL_994;
        }
        v73 = v63;
        v74 = v71;
        v75 = v62;
        ((void (*)(uint64_t ***, uint64_t **, uint64_t))off_1E33919F8[v72])(&v500, &v502, v70);
        v503 = v72;
        v76 = (uint64_t *)v499;
        if (!v499)
        {
          v71 = v74;
          v63 = v73;
          v66 = v489;
          goto LABEL_165;
        }
        v77 = *((_DWORD *)v499 - 2);
        v500 = (uint64_t **)&v496;
        IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E3391BD0[v72])(&v500, &v502);
        for (j = 0; ; IsAccelerated = j + v79)
        {
          v79 = IsAccelerated & v77;
          v80 = &v76[2 * (IsAccelerated & v77)];
          v81 = *((unsigned int *)v80 + 2);
          v82 = v503 != (_DWORD)v81 || v503 == -1;
          v83 = !v82;
          if ((_DWORD)v81 == -1 || !v83)
            break;
          v500 = (uint64_t **)&v496;
          IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t *, uint64_t **))off_1E3391BC0[v81])(&v500, &v76[2 * v79], &v502);
          if ((IsAccelerated & 1) != 0)
            goto LABEL_1008;
          LODWORD(v81) = *((_DWORD *)v80 + 2);
LABEL_145:
          if ((_DWORD)v81)
            v86 = 0;
          else
            v86 = *(unsigned __int16 *)v80 == 0;
          if (v86)
          {
            v87 = (uint64_t *)v499;
            v62 = v75;
            v71 = v74;
            v63 = v73;
            v66 = v489;
            if (!v499)
              goto LABEL_164;
            v88 = *((unsigned int *)v499 - 1);
            v80 = (uint64_t *)&v499[16 * v88];
            goto LABEL_152;
          }
          ++j;
        }
        v85 = v503 == -1;
        if ((_DWORD)v81 != -1)
          v85 = v83;
        if (!v85)
          goto LABEL_145;
LABEL_1008:
        v87 = (uint64_t *)v499;
        v62 = v75;
        if (!v499)
        {
          v71 = v74;
          v63 = v73;
          v66 = v489;
          goto LABEL_153;
        }
        v88 = *((unsigned int *)v499 - 1);
        v71 = v74;
        v63 = v73;
        v66 = v489;
LABEL_152:
        v87 += 2 * v88;
        if (v87 == v80)
          goto LABEL_164;
LABEL_153:
        if (v87 != v80)
        {
          v89 = *((unsigned int *)v80 + 2);
          if ((_DWORD)v89 != -1)
            IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t *))v63[v89])(&v500, v80);
          *(_WORD *)v80 = -1;
          *((_DWORD *)v80 + 2) = 0;
          ++*((_DWORD *)v499 - 4);
          if (v499)
            v90 = *((_DWORD *)v499 - 3) - 1;
          else
            v90 = -1;
          *((_DWORD *)v499 - 3) = v90;
          if (v499)
          {
            v91 = *((_DWORD *)v499 - 1);
            if (6 * *((_DWORD *)v499 - 3) < v91 && v91 >= 9)
              IsAccelerated = (uint64_t)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash((uint64_t *)&v499, v91 >> 1, 0);
          }
        }
LABEL_164:
        v72 = v503;
        if (v503 != -1)
LABEL_165:
          IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))v63[v72])(&v500, &v502);
        v93 = v70 + 16;
        v70 = v66;
        if (v93 != v66)
        {
          v70 = v66;
          while (1)
          {
            v94 = *(unsigned int *)(v93 + 8);
            if ((_DWORD)v94 || *(_WORD *)v93 != 0)
            {
              if ((_DWORD)v94 == -1)
                goto LABEL_994;
              v502 = (uint64_t *)&v500;
              IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v94])(&v502, v93);
              v70 = v66;
              if (!(_DWORD)IsAccelerated)
                break;
            }
            v93 += 16;
            if (v93 == v70)
              goto LABEL_178;
          }
          v70 = v93;
        }
LABEL_178:
        ;
      }
      while (v70 != v71);
LABEL_183:
      v61 += 48;
    }
    while (v61 != v62);
LABEL_784:
    v361 = v494;
    if (!v494)
    {
      v26 = 0;
      v362 = 0;
LABEL_973:
      v28 = &v494[2 * v362];
      goto LABEL_798;
    }
    v362 = *((unsigned int *)v494 - 1);
    v28 = &v494[2 * v362];
    if (!*((_DWORD *)v494 - 3))
    {
      v26 = (uint64_t)&v494[2 * v362];
      goto LABEL_973;
    }
    if ((_DWORD)v362)
    {
      v363 = 16 * v362;
      while (1)
      {
        v364 = *((unsigned int *)v361 + 2);
        if ((_DWORD)v364 || *(_WORD *)v361 != 0)
        {
          if ((_DWORD)v364 == -1)
            goto LABEL_994;
          v502 = (uint64_t *)&v500;
          IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E3391998[v364])(&v502, v361);
          if (!(_DWORD)IsAccelerated)
            break;
        }
        v361 += 2;
        v363 -= 16;
        if (!v363)
        {
          v361 = v28;
          break;
        }
      }
      v26 = (uint64_t)v361;
      v361 = v494;
    }
    else
    {
      v26 = (uint64_t)v494;
    }
LABEL_798:
    if (v361)
      v366 = &v361[2 * *((unsigned int *)v361 - 1)];
    else
      v366 = 0;
    if (v366 != (uint64_t *)v26)
    {
      while (1)
      {
        LOBYTE(v502) = 0;
        v503 = -1;
        v367 = *(unsigned int *)(v26 + 8);
        if ((_DWORD)v367 == -1)
          goto LABEL_1123;
        ((void (*)(uint64_t ***, uint64_t **, uint64_t))off_1E33919F8[v367])(&v500, &v502, v26);
        v503 = v367;
        v496 = (uint64_t **)v493;
        v500 = (uint64_t **)&v496;
        IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation32animationOfPropertyIsAcceleratedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_8SettingsEE3__0JZNS9_32animationOfPropertyIsAcceleratedESF_SI_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v367])(&v500, &v502);
        v368 = IsAccelerated;
        if (v503 != -1)
          IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
        if ((v368 & 1) != 0)
          break;
        v369 = v26 + 16;
        v26 = (uint64_t)v28;
        if ((uint64_t *)v369 != v28)
        {
          v26 = (uint64_t)v28;
          while (1)
          {
            v370 = *(unsigned int *)(v369 + 8);
            if ((_DWORD)v370 || *(_WORD *)v369 != 0)
            {
              if ((_DWORD)v370 == -1)
                goto LABEL_994;
              v502 = (uint64_t *)&v500;
              IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v370])(&v502, v369);
              v26 = (uint64_t)v28;
              if (!(_DWORD)IsAccelerated)
                break;
            }
            v369 += 16;
            if (v369 == v26)
              goto LABEL_817;
          }
          v26 = v369;
        }
LABEL_817:
        if ((uint64_t *)v26 == v366)
          goto LABEL_818;
      }
LABEL_867:
      v460 = 1;
      goto LABEL_868;
    }
LABEL_818:
    v372 = (uint64_t *)v499;
    if (v499)
    {
      v373 = *((unsigned int *)v499 - 1);
      v374 = (uint64_t *)&v499[16 * v373];
      if (*((_DWORD *)v499 - 3))
      {
        if ((_DWORD)v373)
        {
          v375 = 16 * v373;
          while (1)
          {
            v376 = *((unsigned int *)v372 + 2);
            if ((_DWORD)v376 || *(_WORD *)v372 != 0)
            {
              if ((_DWORD)v376 == -1)
                goto LABEL_994;
              v502 = (uint64_t *)&v500;
              IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E3391998[v376])(&v502, v372);
              if (!(_DWORD)IsAccelerated)
                break;
            }
            v372 += 2;
            v375 -= 16;
            if (!v375)
            {
              v372 = v374;
              break;
            }
          }
          v378 = v372;
          v372 = (uint64_t *)v499;
        }
        else
        {
          v378 = (uint64_t *)v499;
        }
        goto LABEL_832;
      }
      v378 = (uint64_t *)&v499[16 * v373];
    }
    else
    {
      v378 = 0;
      v373 = 0;
    }
    v374 = (uint64_t *)&v499[16 * v373];
LABEL_832:
    if (v372)
      v379 = &v372[2 * *((unsigned int *)v372 - 1)];
    else
      v379 = 0;
    if (v379 != v378)
    {
      while (1)
      {
        LOBYTE(v502) = 0;
        v503 = -1;
        v380 = *((unsigned int *)v378 + 2);
        if ((_DWORD)v380 != -1)
        {
          ((void (*)(uint64_t ***, uint64_t **, uint64_t *))off_1E33919F8[v380])(&v500, &v502, v378);
          v503 = v380;
        }
        IsAccelerated = WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated((uint64_t)&v502, v493);
        v460 = IsAccelerated;
        if (v503 != -1)
          IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
        if ((v460 & 1) != 0)
          goto LABEL_867;
        v381 = v378 + 2;
        v378 = v374;
        if (v381 != v374)
        {
          v378 = v374;
          while (1)
          {
            v382 = *((unsigned int *)v381 + 2);
            if ((_DWORD)v382 || *(_WORD *)v381 != 0)
            {
              if ((_DWORD)v382 == -1)
                goto LABEL_994;
              v502 = (uint64_t *)&v500;
              IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E3391998[v382])(&v502, v381);
              v378 = v374;
              if (!(_DWORD)IsAccelerated)
                break;
            }
            v381 += 2;
            if (v381 == v378)
              goto LABEL_852;
          }
          v378 = v381;
        }
LABEL_852:
        if (v378 == v379)
          goto LABEL_868;
      }
    }
    v460 = 0;
LABEL_868:
    v384 = (uint64_t *)v499;
    if (v499)
    {
      v424 = *((unsigned int *)v499 - 1);
      if (!(_DWORD)v424)
      {
LABEL_984:
        IsAccelerated = WTF::fastFree((WTF *)(v384 - 2), v56);
        goto LABEL_869;
      }
      v425 = (uint64_t *)v499;
      while (1)
      {
        v426 = *((unsigned int *)v425 + 2);
        if ((_DWORD)v426 == -1)
          break;
        v502 = (uint64_t *)&v500;
        if ((((uint64_t (*)(uint64_t **, uint64_t *))off_1E3391998[v426])(&v502, v425) & 1) == 0)
        {
          v427 = *((unsigned int *)v425 + 2);
          if ((_DWORD)v427 != -1)
            ((void (*)(uint64_t **, uint64_t *))off_1E33919E8[v427])(&v502, v425);
          *((_DWORD *)v425 + 2) = -1;
        }
        v425 += 2;
        if (!--v424)
          goto LABEL_984;
      }
LABEL_994:
      IsAccelerated = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_995:
      LODWORD(v139) = 1;
      v54 = (uint64_t)v492;
      goto LABEL_324;
    }
LABEL_869:
    v385 = v494;
    if (!v494)
      goto LABEL_870;
    v428 = *((unsigned int *)v494 - 1);
    if ((_DWORD)v428)
    {
      v429 = v494;
      do
      {
        v430 = *((unsigned int *)v429 + 2);
        if ((_DWORD)v430 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if ((((uint64_t (*)(uint64_t **, uint64_t *))off_1E3391998[v430])(&v502, v429) & 1) == 0)
        {
          v431 = *((unsigned int *)v429 + 2);
          if ((_DWORD)v431 != -1)
            ((void (*)(uint64_t **, uint64_t *))off_1E33919E8[v431])(&v502, v429);
          *((_DWORD *)v429 + 2) = -1;
        }
        v429 += 2;
      }
      while (--v428);
    }
    IsAccelerated = WTF::fastFree((WTF *)(v385 - 2), v56);
LABEL_870:
    v54 = (uint64_t)v492;
LABEL_871:
    LODWORD(v57) = *(unsigned __int8 *)(v54 + 308);
    *(_BYTE *)(v54 + 331) = v460;
    if ((_DWORD)v57)
    {
      v386 = *(_QWORD *)(v54 + 120);
      if (!v386 || (v387 = *(_QWORD *)(v386 + 8)) == 0)
        v387 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 264) + 40) + 8);
      v28 = *(uint64_t **)(v387 + 680);
      v388 = *(_DWORD *)(v54 + 156);
      if (v388)
      {
        v389 = *(_QWORD *)(v54 + 144);
        v493 = v389 + 48 * v388;
        v26 = (uint64_t)&v496;
LABEL_876:
        if (*(unsigned __int16 *)(v389 + 40) < 0x100u || *(_WORD *)(v389 + 40) == 0)
          goto LABEL_881;
        v391 = *(_QWORD *)(v389 + 16);
        if (v391)
        {
          v392 = *(unsigned int *)(v391 - 4);
          v393 = v391 + 16 * v392;
          if (*(_DWORD *)(v391 - 12))
          {
            if ((_DWORD)v392)
            {
              v394 = 16 * v392;
              while (1)
              {
                v395 = *(unsigned int *)(v391 + 8);
                if ((_DWORD)v395 || *(_WORD *)v391 != 0)
                {
                  if ((_DWORD)v395 == -1)
                    goto LABEL_994;
                  v502 = (uint64_t *)&v500;
                  IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v395])(&v502, v391);
                  if (!(_DWORD)IsAccelerated)
                    break;
                }
                v391 += 16;
                v394 -= 16;
                if (!v394)
                {
                  v391 = v393;
                  break;
                }
              }
              v397 = v391;
              v391 = *(_QWORD *)(v389 + 16);
            }
            else
            {
              v397 = *(_QWORD *)(v389 + 16);
            }
            goto LABEL_897;
          }
          v397 = v391 + 16 * v392;
        }
        else
        {
          v397 = 0;
          v392 = 0;
        }
        v393 = v391 + 16 * v392;
LABEL_897:
        if (v391)
          v398 = v391 + 16 * *(unsigned int *)(v391 - 4);
        else
          v398 = 0;
        if (v398 != v397)
        {
          while (1)
          {
            LOBYTE(v502) = 0;
            v503 = -1;
            v399 = *(unsigned int *)(v397 + 8);
            if ((_DWORD)v399 == -1)
              break;
            ((void (*)(uint64_t ***, uint64_t **, uint64_t))off_1E33919F8[v399])(&v500, &v502, v397);
            v503 = v399;
            v496 = (uint64_t **)v28;
            v500 = (uint64_t **)&v496;
            IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation32animationOfPropertyIsAcceleratedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_8SettingsEE3__0JZNS9_32animationOfPropertyIsAcceleratedESF_SI_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v399])(&v500, &v502);
            v400 = IsAccelerated;
            if (v503 != -1)
              IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
            if ((v400 & 1) != 0)
              goto LABEL_954;
            v401 = v397 + 16;
            v397 = v393;
            if (v401 != v393)
            {
              v397 = v393;
              while (1)
              {
                v402 = *(unsigned int *)(v401 + 8);
                if ((_DWORD)v402 || *(_WORD *)v401 != 0)
                {
                  if ((_DWORD)v402 == -1)
                    goto LABEL_994;
                  v502 = (uint64_t *)&v500;
                  IsAccelerated = ((uint64_t (*)(uint64_t **, uint64_t))off_1E3391998[v402])(&v502, v401);
                  v397 = v393;
                  if (!(_DWORD)IsAccelerated)
                    break;
                }
                v401 += 16;
                if (v401 == v397)
                  goto LABEL_916;
              }
              v397 = v401;
            }
LABEL_916:
            if (v397 == v398)
              goto LABEL_881;
          }
LABEL_1122:
          v496 = (uint64_t **)v28;
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_1123:
          v496 = (uint64_t **)v493;
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_1124:
          v32 = (uint64_t)v28;
LABEL_495:
          v28 = (uint64_t *)(v26 + 16 * v27);
          continue;
        }
LABEL_881:
        v389 += 48;
        if (v389 == v493)
          goto LABEL_969;
        goto LABEL_876;
      }
      v57 = *(unsigned int *)(v54 + 244);
      if ((_DWORD)v57)
      {
        v404 = *(_QWORD *)(v54 + 232);
        v405 = v404 + (v57 << 6);
        do
        {
          if (*(unsigned __int8 *)(v404 + 16) - 1 <= 1)
          {
            v406 = *(_QWORD *)(v404 + 56);
            v407 = *(_DWORD *)v406 + 1;
            *(_DWORD *)v406 = v407;
            if (*(_DWORD *)(v406 + 28))
            {
              v408 = 0;
              do
              {
                LOWORD(v502) = *(_WORD *)(*(_QWORD *)(v406 + 16) + 16 * v408) & 0x3FF;
                v503 = 0;
                v496 = (uint64_t **)v28;
                v500 = (uint64_t **)&v496;
                IsAccelerated = (uint64_t)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_0,WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>((WebCore::CSSPropertyAnimationWrapperMap *)&v500, (unsigned __int16 *)&v502);
                v409 = IsAccelerated;
                if (v503 != -1)
                  IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
                if ((v409 & 1) != 0)
                  break;
                v410 = v408 + 1;
                v408 = (v408 + 1);
              }
              while (*(_DWORD *)(v406 + 28) > v410);
              v407 = *(_DWORD *)v406;
            }
            else
            {
              v409 = 0;
            }
            v411 = v407 - 1;
            if (v411)
            {
              *(_DWORD *)v406 = v411;
            }
            else
            {
              v412 = *(unsigned int *)(v406 + 28);
              if ((_DWORD)v412)
              {
                v413 = 16 * v412;
                v414 = (_DWORD **)(*(_QWORD *)(v406 + 16) + 8);
                do
                {
                  v415 = *v414;
                  *v414 = 0;
                  if (v415)
                  {
                    if (*v415 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v415, (WTF::StringImpl *)v56);
                    else
                      *v415 -= 2;
                  }
                  v414 += 2;
                  v413 -= 16;
                }
                while (v413);
              }
              v416 = *(WTF **)(v406 + 16);
              if ((WTF *)(v406 + 32) != v416 && v416 != 0)
              {
                *(_QWORD *)(v406 + 16) = 0;
                *(_DWORD *)(v406 + 24) = 0;
                WTF::fastFree(v416, v56);
              }
              v418 = *(_QWORD *)(v406 + 8);
              *(_QWORD *)(v406 + 8) = 0;
              if (v418)
                (*(void (**)(uint64_t))(*(_QWORD *)v418 + 8))(v418);
              IsAccelerated = WTF::fastFree((WTF *)v406, v56);
            }
            if ((v409 & 1) != 0)
            {
LABEL_954:
              LOBYTE(v57) = 1;
              goto LABEL_955;
            }
          }
          v404 += 64;
        }
        while (v404 != v405);
LABEL_969:
        LOBYTE(v57) = 0;
LABEL_955:
        v54 = (uint64_t)v492;
      }
    }
    break;
  }
  *(_BYTE *)(v54 + 332) = v57;
  if (*(_BYTE *)(v54 + 328))
  {
    IsAccelerated = WebCore::Element::keyframeEffectStack(*(_QWORD *)(v54 + 264), v54 + 272);
    if (IsAccelerated)
    {
      v476 = (unsigned __int16 **)(IsAccelerated + 56);
      v477 = WebCore::KeyframeEffect::animatedProperties((WebCore::KeyframeEffect *)v54);
      WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>>((uint64_t *)&v502, v476, v477);
      v479 = (char)v502;
      if (v502)
        v479 = *((_DWORD *)v502 - 3) != 0;
      v54 = (uint64_t)v492;
      *((_BYTE *)v492 + 333) = v479;
      IsAccelerated = WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet((uint64_t *)&v502, v478);
    }
  }
  if (!*(_DWORD *)(v54 + 156))
    goto LABEL_349;
  LOWORD(v502) = 117;
  v503 = 0;
  v114 = *v491;
  if (!*v491)
  {
    LOWORD(v502) = 451;
    v503 = 0;
LABEL_1091:
    LODWORD(v139) = 0;
    v140 = 0;
    LOWORD(v500) = 351;
    v501 = 0;
    goto LABEL_1092;
  }
  v115 = 0;
  v116 = 0;
  v117 = *(_DWORD *)(v114 - 8);
  v118 = 1707105169;
  while (1)
  {
    v119 = v118 & v117;
    v120 = v114 + 16 * (v118 & v117);
    v121 = *(unsigned int *)(v120 + 8);
    v122 = v115 != v121 || v115 == 0xFFFFFFFFLL;
    v123 = !v122;
    if ((_DWORD)v121 == -1 || !v123)
    {
      if (v121 == 0xFFFFFFFFLL)
        LOBYTE(v123) = v115 == 0xFFFFFFFFLL;
      if (v123)
        goto LABEL_1012;
    }
    else
    {
      v500 = (uint64_t **)&v496;
      IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v115])(&v500, v114 + 16 * v119, &v502);
      if ((_DWORD)IsAccelerated)
      {
        v115 = v503;
LABEL_1012:
        if (v115 != 0xFFFFFFFFLL)
          IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E33919E8[v115])(&v500, &v502);
        v54 = (uint64_t)v492;
        goto LABEL_327;
      }
      v121 = *(unsigned int *)(v120 + 8);
    }
    if (!v121 && *(_WORD *)v120 == 0)
      break;
    v118 = ++v116 + v119;
    v115 = v503;
  }
  if (v503 != -1)
    IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
  v126 = *v491;
  LOWORD(v502) = 451;
  v503 = 0;
  if (!v126)
    goto LABEL_1091;
  v127 = 0;
  v128 = 0;
  v129 = *(_DWORD *)(v126 - 8);
  v130 = -1658355279;
  while (1)
  {
    v131 = v130 & v129;
    v132 = v126 + 16 * (v130 & v129);
    v133 = *(unsigned int *)(v132 + 8);
    v134 = v127 != v133 || v127 == 0xFFFFFFFFLL;
    v135 = !v134;
    if ((_DWORD)v133 == -1 || !v135)
    {
      v137 = v127 == 0xFFFFFFFFLL;
      if (v133 != 0xFFFFFFFFLL)
        v137 = v135;
      if (v137)
        goto LABEL_995;
    }
    else
    {
      v500 = (uint64_t **)&v496;
      IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v127])(&v500, v126 + 16 * v131, &v502);
      if ((IsAccelerated & 1) != 0)
        goto LABEL_995;
      v133 = *(unsigned int *)(v132 + 8);
    }
    if (!v133 && *(_WORD *)v132 == 0)
      break;
    v130 = ++v128 + v131;
    v127 = v503;
  }
  v139 = *v491;
  LOWORD(v500) = 351;
  v501 = 0;
  v140 = 0;
  if (!v139)
  {
LABEL_1092:
    v54 = (uint64_t)v492;
    goto LABEL_323;
  }
  v141 = 0;
  v142 = *(_DWORD *)(v139 - 8);
  for (k = -340346148; ; k = v141 + v144)
  {
    v144 = k & v142;
    v145 = (unsigned __int16 *)(v139 + 16 * (k & v142));
    v146 = *((unsigned int *)v145 + 2);
    v147 = v140 != v146 || v140 == 0xFFFFFFFFLL;
    v148 = !v147;
    if ((_DWORD)v146 != -1 && v148)
      break;
    if (v146 == 0xFFFFFFFFLL)
      LOBYTE(v148) = v140 == 0xFFFFFFFFLL;
    if (v148)
      goto LABEL_1047;
LABEL_316:
    if (v146)
      v150 = 0;
    else
      v150 = *v145 == 0;
    if (v150)
    {
      LODWORD(v139) = 0;
      goto LABEL_322;
    }
    ++v141;
  }
  v496 = &v494;
  IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v140])(&v496, v139 + 16 * v144, &v500);
  if (!(_DWORD)IsAccelerated)
  {
    v146 = *((unsigned int *)v145 + 2);
    v140 = v501;
    goto LABEL_316;
  }
  v140 = v501;
LABEL_1047:
  LODWORD(v139) = 1;
LABEL_322:
  v54 = (uint64_t)v492;
  if (v140 != 0xFFFFFFFFLL)
LABEL_323:
    IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t ***))off_1E33919E8[v140])(&v496, &v500);
LABEL_324:
  if (v503 != -1)
    IsAccelerated = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
  if (!(_DWORD)v139)
  {
LABEL_349:
    v168 = 0;
    goto LABEL_350;
  }
LABEL_327:
  v151 = *(_QWORD *)(v54 + 264);
  if (!v151)
    goto LABEL_336;
  v152 = *(unsigned __int8 *)(v54 + 288);
  if (*(_BYTE *)(v54 + 288))
  {
    v153 = *(_DWORD *)(v54 + 272);
    IsAccelerated = *(_QWORD *)(v54 + 280);
    if (IsAccelerated)
      *(_DWORD *)IsAccelerated += 2;
  }
  else
  {
    v153 = 0;
  }
  v154 = *(_QWORD *)(v151 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v154)
    goto LABEL_332;
  v419 = *(unsigned int *)(v154 + 164);
  if (!(_DWORD)v419)
    goto LABEL_332;
  v420 = *(uint64_t **)(v154 + 152);
  v421 = 8 * v419;
  if (v152)
  {
    while (1)
    {
      v422 = *v420;
      if (*(_BYTE *)(*v420 + 96))
      {
        if (*(_DWORD *)(v422 + 80) == v153 && *(_QWORD *)(v422 + 88) == IsAccelerated)
          break;
      }
      ++v420;
      v421 -= 8;
      if (!v421)
        goto LABEL_332;
    }
  }
  else
  {
    while (1)
    {
      v422 = *v420;
      if (!*(_BYTE *)(*v420 + 96))
        break;
      ++v420;
      v421 -= 8;
      if (!v421)
        goto LABEL_332;
    }
  }
  v461 = *(_QWORD *)(v422 + 8);
  if (!v461
    || (v462 = *(_DWORD *)(v54 + 156)) == 0
    || (v463 = *(_QWORD *)(v54 + 144), *(double *)(v463 + 8) == 0.0) && *(double *)(v463 + 48 * v462 - 40) == 1.0)
  {
LABEL_332:
    if (v152 && IsAccelerated)
    {
      if (*(_DWORD *)IsAccelerated == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)IsAccelerated, (WTF::StringImpl *)v56);
      else
        *(_DWORD *)IsAccelerated -= 2;
    }
LABEL_336:
    v155 = *(_DWORD *)(v54 + 156);
    if (v155)
    {
      v156 = *(_QWORD *)(v54 + 144);
      v157 = v156 + 48 * v155;
      while (1)
      {
        v158 = *(_QWORD *)(v156 + 24);
        if (v158)
        {
          v159 = *(_QWORD *)(v158 + 8);
          v160 = *(_QWORD *)(*(_QWORD *)(v159 + 32) + 32);
          v161 = *(unsigned int *)(v160 + 20);
          if ((_DWORD)v161)
          {
            v162 = *(_QWORD *)(v160 + 8);
            v163 = 8 * v161;
            while (*(_BYTE *)(*(_QWORD *)v162 + 12))
            {
              v162 += 8;
              v163 -= 8;
              if (!v163)
                goto LABEL_343;
            }
LABEL_1096:
            v168 = 1;
            goto LABEL_350;
          }
LABEL_343:
          v164 = *(_QWORD *)(*(_QWORD *)(v159 + 40) + 72);
          v165 = *(unsigned int *)(v164 + 20);
          if ((_DWORD)v165)
          {
            v166 = *(_QWORD *)(v164 + 8);
            v167 = 8 * v165;
            while (*(_BYTE *)(*(_QWORD *)v166 + 12))
            {
              v166 += 8;
              v167 -= 8;
              if (!v167)
                goto LABEL_347;
            }
            goto LABEL_1096;
          }
        }
LABEL_347:
        v168 = 0;
        v156 += 48;
        if (v156 == v157)
          goto LABEL_350;
      }
    }
    goto LABEL_349;
  }
  v464 = *(_QWORD *)(v461 + 8);
  v465 = *(_QWORD *)(*(_QWORD *)(v464 + 32) + 32);
  v466 = *(unsigned int *)(v465 + 20);
  if (!(_DWORD)v466)
  {
LABEL_1081:
    v469 = *(_QWORD *)(*(_QWORD *)(v464 + 40) + 72);
    v470 = *(unsigned int *)(v469 + 20);
    if ((_DWORD)v470)
    {
      v471 = *(_QWORD *)(v469 + 8);
      v472 = 8 * v470;
      while (*(_BYTE *)(*(_QWORD *)v471 + 12))
      {
        v471 += 8;
        v472 -= 8;
        if (!v472)
          goto LABEL_332;
      }
      goto LABEL_1086;
    }
    goto LABEL_332;
  }
  v467 = *(_QWORD *)(v465 + 8);
  v468 = 8 * v466;
  while (*(_BYTE *)(*(_QWORD *)v467 + 12))
  {
    v467 += 8;
    v468 -= 8;
    if (!v468)
      goto LABEL_1081;
  }
LABEL_1086:
  v168 = 1;
  if (v152 && IsAccelerated)
  {
    if (*(_DWORD *)IsAccelerated == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)IsAccelerated, (WTF::StringImpl *)v56);
      goto LABEL_1096;
    }
    *(_DWORD *)IsAccelerated -= 2;
  }
LABEL_350:
  *(_BYTE *)(v54 + 334) = v168;
  v169 = *(unsigned __int8 *)(v54 + 202);
  if (*(_BYTE *)(v54 + 202))
  {
    LOWORD(v496) = 450;
    v497 = 0;
    WebCore::BlendingKeyframes::containsProperty(v485, (uint64_t)&v496);
    if (v480)
    {
      v170 = (char *)v492 + 335;
      *((_BYTE *)v492 + 335) = 1;
    }
    else
    {
      v54 = (uint64_t)v492;
      if (*((_BYTE *)v492 + 203))
        goto LABEL_1115;
      v170 = (char *)v492 + 335;
      *((_BYTE *)v492 + 335) = 0;
    }
LABEL_1118:
    if (v497 != -1)
      ((void (*)(uint64_t **, uint64_t ***))off_1E33919E8[v497])(&v502, &v496);
    v54 = (uint64_t)v492;
  }
  else
  {
    if (!*(_BYTE *)(v54 + 203))
    {
      v170 = (_BYTE *)(v54 + 335);
      *(_BYTE *)(v54 + 335) = 0;
      goto LABEL_353;
    }
LABEL_1115:
    LOWORD(v502) = 393;
    v503 = 0;
    WebCore::BlendingKeyframes::containsProperty(v485, (uint64_t)&v502);
    v170 = (_BYTE *)(v54 + 335);
    *(_BYTE *)(v54 + 335) = v481;
    if (v503 != -1)
      ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
    v54 = (uint64_t)v492;
    if (v169)
      goto LABEL_1118;
  }
LABEL_353:
  v171 = -1893536190;
  if (*(_QWORD *)(v54 + 264) && *(_BYTE *)(v54 + 288))
  {
    v172 = *(_DWORD *)(v54 + 272);
    v173 = *(WTF::StringImpl **)(v54 + 280);
    if (v173)
      *(_DWORD *)v173 += 2;
    if (v172 == 13)
    {
      LOWORD(v502) = 450;
      v503 = 0;
      v174 = *v491;
      if (!*v491)
      {
        LOWORD(v494) = 393;
        v495 = 0;
        goto LABEL_406;
      }
      v175 = 0;
      v176 = 0;
      v177 = *(_DWORD *)(v174 - 8);
      v178 = -933810809;
      while (1)
      {
        v179 = v178 & v177;
        v180 = (unsigned __int16 *)(v174 + 16 * (v178 & v177));
        v181 = *((unsigned int *)v180 + 2);
        v183 = v175 == v181 && v175 != 0xFFFFFFFFLL;
        if ((_DWORD)v181 == -1 || !v183)
        {
          v185 = v175 == 0xFFFFFFFFLL;
          if (v181 != 0xFFFFFFFFLL)
            v185 = v183;
          if (v185)
          {
LABEL_1015:
            v438 = 1;
LABEL_1016:
            LOWORD(v500) = 273;
            v501 = 0;
            v439 = *v491;
            if (!*v491)
            {
              v440 = 0;
              goto LABEL_1042;
            }
            v440 = 0;
            v441 = 0;
            v442 = *(_DWORD *)(v439 - 8);
            for (m = -1893536190; ; m = v441 + v444)
            {
              v444 = m & v442;
              v445 = (unsigned __int16 *)(v439 + 16 * (m & v442));
              v446 = *((unsigned int *)v445 + 2);
              v448 = v440 == v446 && v440 != 0xFFFFFFFFLL;
              if ((_DWORD)v446 == -1 || !v448)
              {
                if (v446 == 0xFFFFFFFFLL)
                  LOBYTE(v448) = v440 == 0xFFFFFFFFLL;
                if (v448)
                  goto LABEL_1070;
              }
              else
              {
                v499 = &v498;
                if (((unsigned int (*)(char **, uint64_t, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v440])(&v499, v439 + 16 * v444, &v500))
                {
                  v440 = v501;
LABEL_1070:
                  v452 = 1;
LABEL_1041:
                  *v170 |= v452;
                  if (v440 != 0xFFFFFFFFLL)
LABEL_1042:
                    ((void (*)(char **, uint64_t ***))off_1E33919E8[v440])(&v499, &v500);
                  if ((v438 & 1) != 0)
                  {
LABEL_408:
                    if (v503 != -1)
                      ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
                    v54 = (uint64_t)v492;
                    goto LABEL_411;
                  }
LABEL_406:
                  if (v495 != -1)
                    ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v495])(&v500, &v494);
                  goto LABEL_408;
                }
                v446 = *((unsigned int *)v445 + 2);
                v440 = v501;
              }
              if (v446)
                v451 = 0;
              else
                v451 = *v445 == 0;
              if (v451)
              {
                v452 = 0;
                goto LABEL_1041;
              }
              ++v441;
            }
          }
        }
        else
        {
          v500 = &v494;
          v186 = ((uint64_t (*)(uint64_t ***, uint64_t, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v175])(&v500, v174 + 16 * v179, &v502);
          if ((v186 & 1) != 0)
            goto LABEL_1015;
          v181 = *((unsigned int *)v180 + 2);
        }
        if (v181)
          v187 = 0;
        else
          v187 = *v180 == 0;
        if (v187)
        {
          v188 = *v491;
          LOWORD(v494) = 393;
          v495 = 0;
          if (!v188)
            goto LABEL_406;
          v189 = 0;
          v190 = 0;
          v191 = *(_DWORD *)(v188 - 8);
          v192 = 577659887;
          while (1)
          {
            v193 = v192 & v191;
            v194 = (unsigned __int16 *)(v188 + 16 * (v192 & v191));
            v195 = *((unsigned int *)v194 + 2);
            v197 = v189 == v195 && v189 != 0xFFFFFFFFLL;
            if ((_DWORD)v195 == -1 || !v197)
            {
              v199 = v189 == 0xFFFFFFFFLL;
              if (v195 != 0xFFFFFFFFLL)
                v199 = v197;
              if (v199)
              {
LABEL_1045:
                v438 = 0;
                goto LABEL_1016;
              }
            }
            else
            {
              v500 = (uint64_t **)&v499;
              v200 = ((uint64_t (*)(uint64_t ***, uint64_t, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v189])(&v500, v188 + 16 * v193, &v494);
              if ((v200 & 1) != 0)
                goto LABEL_1045;
              v195 = *((unsigned int *)v194 + 2);
            }
            if (v195)
              v201 = 0;
            else
              v201 = *v194 == 0;
            if (v201)
              goto LABEL_406;
            v192 = ++v190 + v193;
            v189 = v495;
          }
        }
        v178 = ++v176 + v179;
        v175 = v503;
      }
    }
LABEL_411:
    if (v173)
    {
      if (*(_DWORD *)v173 == 2)
        WTF::StringImpl::destroy(v173, (WTF::StringImpl *)v56);
      else
        *(_DWORD *)v173 -= 2;
    }
  }
  v203 = (uint64_t *)(v54 + 216);
  v202 = *(_QWORD *)(v54 + 216);
  if (v202)
  {
    *v203 = 0;
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::deallocateTable(v202, v56);
  }
  v205 = (uint64_t *)(v54 + 224);
  v204 = *(_QWORD *)(v54 + 224);
  if (v204)
  {
    *v205 = 0;
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::deallocateTable(v204, v56);
  }
  v206 = *(_QWORD *)(v54 + 120);
  if (!v206 || (v207 = *(_QWORD *)(v206 + 8)) == 0)
    v207 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 264) + 40) + 8);
  v208 = *(_QWORD *)(v207 + 680);
  v209 = *v491;
  if (!*v491)
  {
    v215 = 0;
    v210 = 0;
LABEL_501:
    v211 = v209 + 16 * v210;
    goto LABEL_434;
  }
  v210 = *(unsigned int *)(v209 - 4);
  v211 = v209 + 16 * v210;
  if (!*(_DWORD *)(v209 - 12))
  {
    v215 = v209 + 16 * v210;
    goto LABEL_501;
  }
  if ((_DWORD)v210)
  {
    v212 = 16 * v210;
    while (1)
    {
      v213 = *(unsigned int *)(v209 + 8);
      if ((_DWORD)v213 || *(_WORD *)v209 != 0)
      {
        if ((_DWORD)v213 == -1)
          goto LABEL_994;
        v502 = (uint64_t *)&v500;
        if (!((unsigned int (*)(uint64_t **, uint64_t))off_1E3391998[v213])(&v502, v209))
          break;
      }
      v209 += 16;
      v212 -= 16;
      if (!v212)
      {
        v209 = v211;
        break;
      }
    }
    v215 = v209;
    v209 = *v491;
  }
  else
  {
    v215 = *v491;
  }
LABEL_434:
  if (v209)
    v216 = v209 + 16 * *(unsigned int *)(v209 - 4);
  else
    v216 = 0;
  while (v215 != v216)
  {
    if (WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(v215, v208))
    {
      WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v203, v215, (uint64_t)&v502);
      LOBYTE(v500) = 0;
      v501 = -1;
      v220 = *(unsigned int *)(v215 + 8);
      if ((_DWORD)v220 != -1)
      {
        ((void (*)(uint64_t **, uint64_t ***, uint64_t))off_1E33919F8[v220])(&v502, &v500, v215);
        v501 = v220;
      }
      v221 = *((_DWORD *)v492 + 39);
      if (!v221
        || (v222 = *((_QWORD *)v492 + 18), *(double *)(v222 + 8) == 0.0) && *(double *)(v222 + 48 * v221 - 40) == 1.0)
      {
        v223 = 0;
      }
      else if (WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::contains(v484, (uint64_t)&v500))
      {
        v223 = WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::contains(v483, (uint64_t)&v500) ^ 1;
      }
      else
      {
        v223 = 1;
      }
      if (v501 != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E33919E8[v501])(&v502, &v500);
      v501 = -1;
      if (v223)
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v205, v215, (uint64_t)&v502);
    }
    v217 = v215 + 16;
    v215 = v211;
    if (v217 != v211)
    {
      v215 = v211;
      while (1)
      {
        v218 = *(unsigned int *)(v217 + 8);
        if ((_DWORD)v218 || *(_WORD *)v217 != 0)
        {
          if ((_DWORD)v218 == -1)
            goto LABEL_994;
          v502 = (uint64_t *)&v499;
          v215 = v211;
          if (!((unsigned int (*)(uint64_t **, uint64_t))off_1E3391998[v218])(&v502, v217))
            break;
        }
        v217 += 16;
        if (v217 == v215)
          goto LABEL_450;
      }
      v215 = v217;
    }
LABEL_450:
    ;
  }
  v224 = v492;
  if (*((_DWORD *)v492 + 39) < 2u)
    goto LABEL_490;
  LOWORD(v502) = 273;
  v503 = 0;
  v225 = *v491;
  if (!*v491)
    goto LABEL_490;
  v226 = 0;
  v227 = 0;
  v228 = *(_DWORD *)(v225 - 8);
  while (1)
  {
    v229 = v171 & v228;
    v230 = (unsigned __int16 *)(v225 + 16 * v229);
    v231 = *((unsigned int *)v230 + 2);
    v232 = v226 != v231 || v226 == 0xFFFFFFFFLL;
    v233 = !v232;
    if ((_DWORD)v231 != -1 && v233)
      break;
    if (v231 == 0xFFFFFFFFLL)
      LOBYTE(v233) = v226 == 0xFFFFFFFFLL;
    if (v233)
      goto LABEL_999;
LABEL_482:
    if (v231)
      v236 = 0;
    else
      v236 = *v230 == 0;
    if (v236)
    {
      if (v503 != -1)
        ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v503])(&v500, &v502);
      v224 = v492;
      goto LABEL_490;
    }
    v171 = ++v227 + v229;
    v226 = v503;
  }
  v500 = (uint64_t **)&v499;
  if (!((unsigned int (*)(uint64_t ***, uint64_t, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v226])(&v500, v225 + 16 * v229, &v502))
  {
    v231 = *((unsigned int *)v230 + 2);
    goto LABEL_482;
  }
  v226 = v503;
LABEL_999:
  if (v226 != 0xFFFFFFFFLL)
    ((void (*)(uint64_t ***, uint64_t **))off_1E33919E8[v226])(&v500, &v502);
  v224 = v492;
  LOBYTE(v502) = 0;
  LOBYTE(v503) = 0;
  v504 = 0;
  v505 = 0;
  v432 = *((unsigned int *)v492 + 39);
  if (!(_DWORD)v432)
  {
LABEL_490:
    *((_QWORD *)v224 + 40) = 0;
    goto LABEL_491;
  }
  v433 = 48 * v432;
  v434 = (uint64_t *)(*((_QWORD *)v492 + 18) + 24);
  do
  {
    v435 = *v434;
    v434 += 6;
    WebCore::TransformOperationsSharedPrimitivesPrefix::update((uint64_t)&v502, (const WebCore::TransformOperations *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v435 + 8) + 32) + 40) + 8));
    v433 -= 48;
  }
  while (v433);
  v437 = v504;
  *((_QWORD *)v492 + 40) = HIDWORD(v505);
  if (v437)
  {
    v504 = 0;
    LODWORD(v505) = 0;
    WTF::fastFree(v437, v436);
  }
LABEL_491:
  WebCore::KeyframeEffect::updateAcceleratedAnimationIfNecessary(v224);
  if (v487 != WebCore::KeyframeEffect::preventsAcceleration(v224, v237)
    || canBeAccelerated != WebCore::KeyframeEffect::canBeAccelerated(v224))
  {
    WebCore::KeyframeEffect::abilityToBeAcceleratedDidChange(v224);
  }
}

uint64_t WebCore::RenderStyle::clonePtr@<X0>(WebCore::RenderStyle *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)result = 0;
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  ++*v6;
  *(_QWORD *)(result + 8) = v6;
  *(_QWORD *)(result + 16) = *((_QWORD *)this + 2);
  v7 = (_DWORD *)*((_QWORD *)this + 3);
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  ++*v7;
  ++*v8;
  *(_QWORD *)(result + 24) = v7;
  *(_QWORD *)(result + 32) = v8;
  *(_QWORD *)(result + 40) = *((_QWORD *)this + 5);
  *(_QWORD *)(result + 48) = 0;
  v9 = (_DWORD *)*((_QWORD *)this + 7);
  ++*v9;
  *(_QWORD *)(result + 56) = v9;
  *a2 = result;
  return result;
}

uint64_t **WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable(uint64_t **a1, uint64_t *a2)
{
  uint64_t (**v2)();
  uint64_t (**v3)();
  uint64_t v5;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  BOOL v31;
  char v32;
  char *v33;

  *a1 = 0;
  if (!*a2)
    return a1;
  v5 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v5)
    return a1;
  v7 = a2;
  v8 = (v5 - 1) | ((v5 - 1) >> 1) | ((((_DWORD)v5 - 1) | ((v5 - 1) >> 1)) >> 2);
  v9 = v8 | (v8 >> 4) | ((v8 | (v8 >> 4)) >> 8);
  v10 = (v9 | HIWORD(v9)) + 1;
  if (v10 > 0x400)
  {
    if (v10 > 2 * v5)
      goto LABEL_59;
  }
  else if (3 * v10 > 4 * v5)
  {
LABEL_7:
    v11 = (double)v5;
    v12 = (double)v10;
    v13 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v10) = 2 * v10;
  if (v10 <= 0x400)
    goto LABEL_7;
LABEL_59:
  v11 = (double)v5;
  v12 = (double)v10;
  v13 = 0.416666667;
LABEL_8:
  if (v12 * v13 <= v11)
    LODWORD(v10) = 2 * v10;
  if (v10 <= 8)
    v14 = 8;
  else
    v14 = v10;
  v15 = WTF::fastZeroedMalloc((WTF *)(16 * v14 + 16));
  *a1 = (uint64_t *)(v15 + 16);
  *(_DWORD *)(v15 + 12) = v14;
  *((_DWORD *)*a1 - 2) = v14 - 1;
  *((_DWORD *)*a1 - 3) = v5;
  *((_DWORD *)*a1 - 4) = 0;
  v16 = *v7;
  if (*v7)
  {
    v17 = *(unsigned int *)(v16 - 4);
    v18 = v16 + 16 * v17;
    if (*(_DWORD *)(v16 - 12))
    {
      if ((_DWORD)v17)
      {
        v19 = 16 * v17;
        while (1)
        {
          v20 = *(unsigned int *)(v16 + 8);
          if ((_DWORD)v20 || *(_WORD *)v16 != 0)
          {
            if ((_DWORD)v20 == -1)
              goto LABEL_66;
            v33 = &v32;
            if (!((unsigned int (*)(char **, uint64_t))off_1E338CB00[v20])(&v33, v16))
              break;
          }
          v16 += 16;
          v19 -= 16;
          if (!v19)
          {
            v16 = v18;
            break;
          }
        }
        v19 = v16;
        v16 = *v7;
      }
      else
      {
        v19 = *v7;
      }
      goto LABEL_27;
    }
    v19 = v16 + 16 * v17;
  }
  else
  {
    v19 = 0;
    v17 = 0;
  }
  v18 = v16 + 16 * v17;
LABEL_27:
  if (v16)
    v16 += 16 * *(unsigned int *)(v16 - 4);
  if (v16 != v19)
  {
    v2 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix;
    v3 = off_1E338CB50;
    do
    {
      v7 = *a1;
      if (*a1)
      {
        v22 = *((_DWORD *)v7 - 2);
        goto LABEL_33;
      }
      while (1)
      {
        v22 = 0;
LABEL_33:
        v23 = *(unsigned int *)(v19 + 8);
        if ((_DWORD)v23 != -1)
          break;
LABEL_66:
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      v33 = &v32;
      v24 = ((uint64_t (*)(char **, uint64_t))v2[v23])(&v33, v19) & v22;
      v25 = (unsigned __int16 *)&v7[2 * v24];
      if (*((_DWORD *)v25 + 2))
        v26 = 0;
      else
        v26 = *v25 == 0;
      if (!v26)
      {
        v30 = 1;
        do
        {
          v24 = (v24 + v30) & v22;
          v25 = (unsigned __int16 *)&v7[2 * v24];
          ++v30;
          if (*((_DWORD *)v25 + 2))
            v31 = 0;
          else
            v31 = *v25 == 0;
        }
        while (!v31);
      }
      v27 = *(unsigned int *)(v19 + 8);
      if ((_DWORD)v27 == -1)
      {
        *((_DWORD *)v25 + 2) = -1;
      }
      else
      {
        v33 = (char *)v25;
        ((void (*)(char **))v3[v27])(&v33);
      }
      v7 = (uint64_t *)(v19 + 16);
      v19 = v18;
      if (v7 != (uint64_t *)v18)
      {
        v19 = v18;
        while (1)
        {
          v28 = *((unsigned int *)v7 + 2);
          if ((_DWORD)v28 || *(_WORD *)v7 != 0)
          {
            if ((_DWORD)v28 == -1)
              goto LABEL_66;
            v33 = &v32;
            v19 = v18;
            if (!((unsigned int (*)(char **, uint64_t *))off_1E338CB00[v28])(&v33, v7))
              break;
          }
          v7 += 2;
          if (v7 == (uint64_t *)v19)
            goto LABEL_53;
        }
        v19 = (uint64_t)v7;
      }
LABEL_53:
      ;
    }
    while (v19 != v16);
  }
  return a1;
}

BOOL WebCore::KeyframeEffectStack::hasInvalidCSSAnimationNames(WebCore::KeyframeEffectStack *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  return v1 && *(_DWORD *)(v1 - 12) != 0;
}

uint64_t WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v6;
  int v7;
  int i;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  BOOL v16;
  uint64_t v19;
  char v20;
  char *v21;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 != -1)
  {
    v6 = *(_DWORD *)(v2 - 8);
    v21 = &v20;
    v7 = ((uint64_t (*)(char **, uint64_t))off_1E33914E0[v4])(&v21, a2);
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v6;
      v10 = v2 + 16 * (v7 & v6);
      v11 = *(unsigned int *)(v10 + 8);
      v12 = *(_DWORD *)(a2 + 8);
      v13 = v12 != (_DWORD)v11 || v12 == -1;
      v14 = !v13;
      if ((_DWORD)v11 == -1 || !v14)
      {
        v16 = v12 == -1;
        if ((_DWORD)v11 != -1)
          v16 = v14;
        if (v16)
          return v10;
      }
      else
      {
        v21 = &v20;
        if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E33914D0[v11])(&v21, v2 + 16 * v9, a2) & 1) != 0)
          return v10;
        LODWORD(v11) = *(_DWORD *)(v10 + 8);
      }
      if (!(_DWORD)v11 && *(_WORD *)v10 == 0)
        break;
      ++i;
    }
    if (*a1)
      return *a1 + 16 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::KeyframeEffectStack::cascadeDidOverrideProperties(v19);
}

void WebCore::KeyframeEffectStack::cascadeDidOverrideProperties(uint64_t a1, unsigned __int16 **a2, unsigned __int16 **a3)
{
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::KeyframeEffect *i;
  unsigned __int16 *v27[3];
  _BYTE v28[8];
  int v29;
  unsigned __int16 *v30[2];
  _QWORD *v31;

  v31 = 0;
  v5 = *a2;
  if (!*a2)
  {
    v12 = 0;
    v6 = 0;
LABEL_35:
    v7 = &v5[8 * v6];
    goto LABEL_15;
  }
  v6 = *((unsigned int *)v5 - 1);
  v7 = &v5[8 * v6];
  if (!*((_DWORD *)v5 - 3))
  {
    v12 = &v5[8 * v6];
    goto LABEL_35;
  }
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    while (1)
    {
      v10 = *((unsigned int *)v5 + 2);
      if ((_DWORD)v10 || *v5 != 0)
      {
        if ((_DWORD)v10 == -1)
          goto LABEL_74;
        v27[0] = (unsigned __int16 *)v30;
        if (!((unsigned int (*)(unsigned __int16 **, unsigned __int16 *))off_1E3391998[v10])(v27, v5))
          break;
      }
      v5 += 8;
      v9 -= 16;
      if (!v9)
      {
        v5 = v7;
        break;
      }
    }
    v12 = v5;
    v5 = *a2;
  }
  else
  {
    v12 = *a2;
  }
LABEL_15:
  v30[0] = v12;
  v30[1] = v7;
  if (v5)
    v5 += 8 * *((unsigned int *)v5 - 1);
  if (v5 != v12)
  {
    do
    {
      v28[0] = 0;
      v29 = -1;
      v24 = *((unsigned int *)v12 + 2);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(unsigned __int16 **, _BYTE *))off_1E33919F8[v24])(v27, v28);
        v29 = v24;
      }
      if (WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated((uint64_t)v28, (uint64_t)a3[85]))
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)&v31, (uint64_t)v28, (uint64_t)v27);
      if (v29 != -1)
        ((void (*)(unsigned __int16 **, _BYTE *))off_1E33919E8[v29])(v27, v28);
      WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::operator++(v30);
      v12 = v30[0];
    }
    while (v30[0] != v5);
  }
  a3 = (unsigned __int16 **)(a1 + 56);
  if (v31)
  {
    v13 = *((_DWORD *)v31 - 3);
    v14 = *a3;
    if (*a3)
    {
      if (v13 == *((_DWORD *)v14 - 3))
      {
        v15 = *((unsigned int *)v14 - 1);
        v16 = &v14[8 * v15];
        if (v13)
        {
          if ((_DWORD)v15)
          {
            v17 = 16 * v15;
            while (1)
            {
              v18 = *((unsigned int *)v14 + 2);
              if ((_DWORD)v18 || *v14 != 0)
              {
                if ((_DWORD)v18 == -1)
                  goto LABEL_74;
                v30[0] = (unsigned __int16 *)v28;
                if (!((unsigned int (*)(unsigned __int16 **, unsigned __int16 *))off_1E3391998[v18])(v30, v14))break;
              }
              v14 += 8;
              v17 -= 16;
              if (!v17)
              {
                v14 = v16;
                break;
              }
            }
            v20 = v14;
            v14 = *a3;
          }
          else
          {
            v20 = *a3;
          }
          goto LABEL_42;
        }
LABEL_41:
        v20 = v16;
        v16 = &v14[8 * v15];
LABEL_42:
        v27[0] = v20;
        v27[1] = v16;
        if (v14)
          v14 += 8 * *((unsigned int *)v14 - 1);
        if (v14 == v20)
          goto LABEL_45;
        while (WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::contains((uint64_t *)&v31, (uint64_t)v20))
        {
          WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::operator++(v27);
          v20 = v27[0];
          if (v27[0] == v14)
            goto LABEL_45;
        }
        goto LABEL_68;
      }
      goto LABEL_68;
    }
    if (v13)
      goto LABEL_68;
LABEL_40:
    v14 = 0;
    v16 = 0;
    v15 = 0;
    goto LABEL_41;
  }
  v14 = *a3;
  if (!*a3)
    goto LABEL_40;
  if (!*((_DWORD *)v14 - 3))
  {
    v15 = *((unsigned int *)v14 - 1);
    v16 = &v14[8 * v15];
    goto LABEL_41;
  }
LABEL_68:
  WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::operator=((uint64_t *)(a1 + 56), (uint64_t *)&v31);
  v25 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v25)
  {
    a1 = *(_QWORD *)a1;
    a3 = (unsigned __int16 **)(8 * v25);
    goto LABEL_70;
  }
LABEL_45:
  while (1)
  {
    a3 = (unsigned __int16 **)v31;
    if (!v31)
      break;
    v21 = *((unsigned int *)v31 - 1);
    if (!(_DWORD)v21)
    {
LABEL_54:
      WTF::fastFree((WTF *)(a3 - 2), v20);
      return;
    }
    a1 = (uint64_t)v31;
    while (1)
    {
      v22 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v22 == -1)
        break;
      v27[0] = (unsigned __int16 *)v30;
      if ((((uint64_t (*)(unsigned __int16 **, uint64_t))off_1E3391998[v22])(v27, a1) & 1) == 0)
      {
        v23 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v23 != -1)
          ((void (*)(unsigned __int16 **, uint64_t))off_1E33919E8[v23])(v27, a1);
        *(_DWORD *)(a1 + 8) = -1;
      }
      a1 += 16;
      if (!--v21)
        goto LABEL_54;
    }
LABEL_74:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_75:
    for (i = 0; ; i = *(WebCore::KeyframeEffect **)(*(_QWORD *)a1 + 8))
    {
      WebCore::KeyframeEffect::acceleratedPropertiesOverriddenByCascadeDidChange(i, (WTF::StringImpl *)v20);
      a1 += 8;
      if (!--a3)
        break;
LABEL_70:
      if (!*(_QWORD *)a1)
        goto LABEL_75;
    }
  }
}

uint64_t WebCore::WebAnimation::isCSSTransition(WebCore::WebAnimation *this)
{
  return 0;
}

BOOL WebCore::Style::Resolver::isAnimationNameValid(WebCore::Style::Resolver *this, WTF::AtomStringImpl **a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  unsigned int i;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  unsigned int j;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  WTF::AtomString::AtomString((WTF::AtomString *)&v24, a2);
  v5 = *((_QWORD *)this + 44);
  if (v5)
  {
    v6 = 0;
    v7 = v24;
    for (i = *((_DWORD *)v24 + 4) >> 8; ; i = v6 + v9)
    {
      v9 = i & *(_DWORD *)(v5 - 8);
      v10 = *(WTF::StringImpl **)(v5 + 16 * v9);
      if (!v10)
        break;
      if (v10 != (WTF::StringImpl *)-1 && v10 == v24)
      {
        v12 = *(unsigned int *)(v5 - 4);
        goto LABEL_10;
      }
      ++v6;
    }
    v12 = *(unsigned int *)(v5 - 4);
    v9 = v12;
LABEL_10:
    if (v12 != v9)
    {
      v13 = 1;
      goto LABEL_12;
    }
  }
  if ((_MergedGlobals_266 & 1) == 0)
  {
    qword_1ECE84C58 = 0;
    _MergedGlobals_266 = 1;
  }
  WTF::AtomString::AtomString((WTF::AtomString *)&v23, a2);
  v15 = qword_1ECE84C58;
  v16 = v23;
  if (qword_1ECE84C58)
  {
    v17 = 0;
    for (j = *((_DWORD *)v23 + 4) >> 8; ; j = v17 + v19)
    {
      v19 = j & *(_DWORD *)(qword_1ECE84C58 - 8);
      v20 = *(WTF::StringImpl **)(qword_1ECE84C58 + 16 * v19);
      if (!v20)
        break;
      if (v20 != (WTF::StringImpl *)-1 && v20 == v23)
        goto LABEL_31;
      ++v17;
    }
    v19 = *(unsigned int *)(qword_1ECE84C58 - 4);
LABEL_31:
    v22 = qword_1ECE84C58 + 16 * v19;
    if ((_MergedGlobals_266 & 1) != 0)
    {
      v15 = qword_1ECE84C58 + 16 * *(unsigned int *)(qword_1ECE84C58 - 4);
      goto LABEL_33;
    }
LABEL_38:
    v15 = 0;
    qword_1ECE84C58 = 0;
    _MergedGlobals_266 = 1;
    goto LABEL_33;
  }
  v22 = 0;
  if ((_MergedGlobals_266 & 1) == 0)
    goto LABEL_38;
LABEL_33:
  v13 = v15 != v22;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v4);
    else
      *(_DWORD *)v16 -= 2;
  }
  v7 = v24;
LABEL_12:
  v24 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v13;
}

double WebCore::InspectorInstrumentation::didCreateWebAnimation(WebCore::InspectorInstrumentation *this, WebCore::WebAnimation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v5 - 96), a2);
        if (v6)
          return WebCore::InspectorInstrumentation::didCreateWebAnimationImpl(v6, this);
      }
    }
  }
  return result;
}

uint64_t WebCore::WillChangeData::propertyCreatesStackingContext(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 <= 272)
  {
    if ((a1 - 167) > 0x2F || ((1 << (a1 + 89)) & 0x880880010081) == 0)
    {
      v3 = a1 - 86;
      if (v3 > 0x3D || ((1 << v3) & 0x2000000080001001) == 0)
        return 0;
    }
  }
  else if (a1 <= 350)
  {
    if (((a1 - 273) > 0x2B || ((1 << (a1 - 17)) & 0x80008000821) == 0) && a1 != 338)
      return 0;
  }
  else if (((a1 - 509) > 0x29 || ((1 << (a1 + 3)) & 0x2C000000003) == 0)
         && a1 != 351
         && a1 != 451)
  {
    return 0;
  }
  return result;
}

WTF::AtomString *WTF::AtomString::AtomString(WTF::AtomString *this, WTF::AtomStringImpl **a2)
{
  WTF::AtomStringImpl *v3;
  WTF::AtomStringImpl *v5;

  v3 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v3 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v3 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v3, (WTF::StringImpl *)a2);
      v3 = v5;
    }
  }
  *(_QWORD *)this = v3;
  return this;
}

uint64_t WebCore::RenderLayerBacking::updateContentsRects(WebCore::RenderLayerBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  const WebCore::RenderLayerModelObject *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  WebCore::RenderView *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  WebCore::RenderLayerCompositor *v37;
  WebCore::RenderLayerCompositor *v38;
  WTF *v39;
  void *v40;
  _QWORD v41[2];
  _QWORD v42[6];
  float32x2_t v43;
  int v44;
  int v45;

  v2 = *((_QWORD *)this + 9);
  v42[0] = WebCore::RenderLayerBacking::contentsBox(this);
  v42[1] = v3;
  WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v42, *(const WebCore::LayoutRect **)(*((_QWORD *)this + 1) + 32), v4);
  v43 = (float32x2_t)__PAIR64__(v6, v5);
  v44 = v7;
  v45 = v8;
  result = (*(uint64_t (**)(uint64_t, float32x2_t *))(*(_QWORD *)v2 + 368))(v2, &v43);
  v10 = *(_DWORD **)(*((_QWORD *)this + 1) + 32);
  if (v10)
    v11 = (v10[13] & 7) == 3;
  else
    v11 = 0;
  if (v11)
  {
    ++v10[4];
    v12 = *((_QWORD *)v10 + 20);
    v41[0] = 0;
    v41[1] = v12;
    v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 992))(v10);
    v15 = v14;
    v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 920))(v10);
    if (__OFADD__((_DWORD)v13, (_DWORD)v16))
      v19 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v19 = v13 + v16;
    if (__OFADD__((_DWORD)v15, v17))
      v20 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v20 = v15 + v17;
    if (__OFADD__(HIDWORD(v15), v18))
      v21 = (HIDWORD(v15) >> 31) + 0x7FFFFFFF;
    else
      v21 = HIDWORD(v15) + v18;
    if (__OFADD__(HIDWORD(v13), HIDWORD(v16)))
      v22 = (HIDWORD(v13) >> 31) + 0x7FFFFFFF;
    else
      v22 = HIDWORD(v13) + HIDWORD(v16);
    WebCore::RenderStyle::getRoundedInnerBorderFor((uint64_t)(v10 + 20), (int *)v41, v19, v20, v21, v22, 1, 1, (uint64_t)v42);
    v23 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                              + 32)
                                                                                  + 24)
                                                                      + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v24 = *((_QWORD *)v23 + 50);
    if (!v24)
    {
      v37 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v24 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v37, v23);
      v38 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v23 + 50);
      *((_QWORD *)v23 + 50) = v24;
      if (v38)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v38);
        WTF::fastFree(v39, v40);
        v24 = *((_QWORD *)v23 + 50);
      }
    }
    WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v42, *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 24) + 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 364), (uint64_t)&v43);
    v25 = *((_DWORD *)this + 44);
    v26 = *((_DWORD *)this + 45);
    if (v25 == 0x80000000)
      v27 = 0x7FFFFFFF;
    else
      v27 = -v25;
    v28 = *((_DWORD *)this + 50);
    v29 = *((_DWORD *)this + 51);
    v30 = __OFADD__(v27, v28);
    v31 = v27 + v28;
    v32 = (v27 >> 31) + 0x7FFFFFFF;
    if (!v30)
      v32 = v31;
    if (v26 == 0x80000000)
      v33 = 0x7FFFFFFF;
    else
      v33 = -v26;
    v30 = __OFADD__(v33, v29);
    v34 = v33 + v29;
    v35 = (v33 >> 31) + 0x7FFFFFFF;
    if (!v30)
      v35 = v34;
    v43 = vadd_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v32)), (float32x2_t)vdup_n_s32(0x3C800000u)), v43);
    result = (*(uint64_t (**)(_QWORD, float32x2_t *))(**((_QWORD **)this + 9) + 376))(*((_QWORD *)this + 9), &v43);
    v36 = v10[4];
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x194439A44);
    }
    v10[4] = v36 - 1;
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setContentsClippingRect(uint64_t this, const WebCore::FloatRoundedRect *a2)
{
  BOOL v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t i;

  v2 = *(float *)a2 == *(float *)(this + 256) && *((float *)a2 + 1) == *(float *)(this + 260);
  if (!v2
    || (*((float *)a2 + 2) == *(float *)(this + 264) ? (v3 = *((float *)a2 + 3) == *(float *)(this + 268)) : (v3 = 0),
        !v3
     || (*((float *)a2 + 4) == *(float *)(this + 272) ? (v4 = *((float *)a2 + 5) == *(float *)(this + 276)) : (v4 = 0),
         !v4
      || (*((float *)a2 + 6) == *(float *)(this + 280) ? (v5 = *((float *)a2 + 7) == *(float *)(this + 284)) : (v5 = 0),
          !v5
       || *((float *)a2 + 8) != *(float *)(this + 288)
       || *((float *)a2 + 9) != *(float *)(this + 292)
       || *((float *)a2 + 10) != *(float *)(this + 296)
       || *((float *)a2 + 11) != *(float *)(this + 300)))))
  {
    v6 = *(_OWORD *)a2;
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(this + 272) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(this + 288) = v7;
    *(_OWORD *)(this + 256) = v6;
    if ((*(_WORD *)(this + 177) & 1) == 0)
    {
      v8 = *(_QWORD *)(this + 616);
      *(_QWORD *)(this + 616) = v8 | 0x40000;
      if (!*(_BYTE *)(this + 889))
      {
        for (i = *(_QWORD *)(this + 200); i; i = *(_QWORD *)(i + 200))
        {
          if ((*(_BYTE *)(i + 890) & 0x40) != 0)
            break;
          *(_BYTE *)(i + 890) |= 0x40u;
        }
      }
      if (!v8)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 24) + 40))(*(_QWORD *)(this + 24), this);
    }
  }
  return this;
}

unint64_t WebCore::RenderLayerBacking::contentsBox(WebCore::RenderLayerBacking *this)
{
  unint64_t v1;
  BOOL v2;
  char v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int32x2_t v25;
  int32x2_t v26[2];
  unint64_t v27;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
  {
    v21 = 0;
    v22 = 0;
    return v21 | (unint64_t)(v22 << 32);
  }
  ++*(_DWORD *)(v1 + 16);
  if (*(_BYTE *)(v1 + 46) == 48)
  {
    v26[0] = (int32x2_t)WebCore::RenderVideo::videoBox((WebCore::RenderVideo *)v1);
    v26[1] = v25;
    WebCore::LayoutRect::LayoutRect((int8x8_t *)&v27, v26);
    v8 = v27;
  }
  else
  {
    v4 = *(_BYTE *)(v1 + 52);
    v5 = v4 & 7;
    if (v5 == 3)
      v6 = v1;
    else
      v6 = 0;
    if (v6)
    {
      ++*(_DWORD *)(v6 + 16);
      if (v5 != 3)
        goto LABEL_16;
      v4 = *(_BYTE *)(v1 + 52);
LABEL_12:
      if ((v4 & 7) != 3 || (*(_BYTE *)(v1 + 53) & 4) == 0)
      {
        v27 = WebCore::RenderReplaced::intrinsicSize(v1);
        v8 = WebCore::RenderReplaced::replacedContentRect((WebCore::RenderReplaced *)v1, (int32x2_t *)&v27);
        goto LABEL_17;
      }
LABEL_16:
      v8 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)v1);
LABEL_17:
      v9 = *(_DWORD *)(v6 + 16);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x194439D1CLL);
      }
      *(_DWORD *)(v6 + 16) = v9 - 1;
      goto LABEL_19;
    }
    if (v5 == 3)
      goto LABEL_12;
    v8 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)v1);
  }
LABEL_19:
  v10 = *((_DWORD *)this + 44);
  v11 = *((_DWORD *)this + 45);
  if (v10 == 0x80000000)
    v12 = 0x7FFFFFFF;
  else
    v12 = -v10;
  v13 = *((_DWORD *)this + 50);
  v14 = *((_DWORD *)this + 51);
  v15 = __OFADD__(v12, v13);
  v16 = v12 + v13;
  v17 = (v12 >> 31) + 0x7FFFFFFF;
  if (!v15)
    v17 = v16;
  if (v11 == 0x80000000)
    v18 = 0x7FFFFFFF;
  else
    v18 = -v11;
  v15 = __OFADD__(v18, v14);
  v19 = v18 + v14;
  v20 = (v18 >> 31) + 0x7FFFFFFF;
  if (v15)
    v19 = v20;
  v21 = v8 + v17;
  if (__OFADD__((_DWORD)v8, v17))
    v21 = (v8 >> 31) + 0x7FFFFFFF;
  LODWORD(v22) = HIDWORD(v8) + v19;
  if (__OFADD__(HIDWORD(v8), v19))
    v22 = ((HIDWORD(v8) >> 31) + 0x7FFFFFFF);
  else
    v22 = v22;
  v23 = *(_DWORD *)(v1 + 16);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x194439D3CLL);
  }
  *(_DWORD *)(v1 + 16) = v23 - 1;
  return v21 | (unint64_t)(v22 << 32);
}

uint64_t WebCore::GraphicsLayerCA::setContentsRect(uint64_t this, const WebCore::FloatRect *a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(float *)a2 == *(float *)(this + 240) && *((float *)a2 + 1) == *(float *)(this + 244);
  if (!v2
    || (*((float *)a2 + 2) == *(float *)(this + 248) ? (v3 = *((float *)a2 + 3) == *(float *)(this + 252)) : (v3 = 0),
        !v3))
  {
    *(_OWORD *)(this + 240) = *(_OWORD *)a2;
    if ((*(_WORD *)(this + 177) & 1) == 0)
    {
      v4 = *(_QWORD *)(this + 616);
      *(_QWORD *)(this + 616) = v4 | 0x40000;
      if (!*(_BYTE *)(this + 889))
      {
        for (i = *(_QWORD *)(this + 200); i; i = *(_QWORD *)(i + 200))
        {
          if ((*(_BYTE *)(i + 890) & 0x40) != 0)
            break;
          *(_BYTE *)(i + 890) |= 0x40u;
        }
      }
      if (!v4)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 24) + 40))(*(_QWORD *)(this + 24), this);
    }
  }
  return this;
}

BOOL WebCore::setJSElement_innerHTML(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  int v9;
  WTF *v10;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  _BYTE v20[40];
  uint64_t v21;
  JSC::JSGlobalObject *v22;
  JSC::VM *v23;
  unsigned __int8 v24[8];
  WTF::StringImpl *v25;
  char v26;
  unsigned __int8 v27[8];
  WTF::StringImpl *v28;
  char v29;
  _BYTE v30[8];
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(_QWORD *)(a2 + 24);
  v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v18 = (WTF *)v20;
  v19 = 4;
  v20[32] = 0;
  v21 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v22 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v18;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>>::convert(a1, a3, (uint64_t)v30);
  v7 = v33;
  v8 = v33 == 0;
  if (!v33)
  {
    v27[0] = 0;
    LODWORD(v28) = -1;
    v9 = v32;
    if (v32 != -1)
    {
      ((void (*)(unsigned __int8 *, unsigned __int8 *, uint64_t *))off_1E3273B38[v32])(v24, v27, &v31);
      LODWORD(v28) = v9;
    }
    WebCore::Element::setInnerHTML(v5, (uint64_t)v27, (uint64_t)v24);
    if ((_DWORD)v28 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E3273B28[v28])(&v29, v27);
    if (v26)
    {
      v27[0] = v24[0];
      v16 = v25;
      v25 = 0;
      v28 = v16;
      if (!*(_QWORD *)(v4 + 16))
      {
        WebCore::propagateExceptionSlowPath(a1, &v23, v27);
        v16 = v28;
      }
      v28 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v6);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (v26)
      {
        v17 = v25;
        v25 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v6);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
    }
    v7 = v33;
  }
  if (v7 != -1)
    ((void (*)(unsigned __int8 *, uint64_t *))off_1E3273B48[v7])(v24, &v31);
  if (HIDWORD(v19))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v18, v22);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v21;
    if (HIDWORD(v19))
    {
      v13 = v18;
      v14 = 8 * HIDWORD(v19);
      do
      {
        v15 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v6);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v21;
  }
  v10 = v18;
  if (v20 != (_BYTE *)v18 && v18 != 0)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    WTF::fastFree(v10, v6);
  }
  return v8;
}

uint64_t WebCore::BlendingKeyframe::addProperty(uint64_t a1, uint64_t a2)
{
  _BYTE v3[24];

  return WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)(a1 + 16), a2, (uint64_t)v3);
}

uint64_t WebCore::KeyframeEffectStack::applyKeyframeEffects(WebCore::KeyframeEffectStack *this, _QWORD *a2, uint64_t *a3, int8x8_t *a4, uint64_t a5)
{
  int8x8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  int8x8_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  float *v31;
  uint64_t v32;
  _DWORD *v33;
  void *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  WebCore::KeyframeEffect *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  _WORD *v67;
  uint64_t v68;
  _WORD *v69;
  _WORD *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  WTF **v81;
  uint64_t v82;
  WTF **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int i;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  _BOOL4 v95;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  int v103;
  BOOL v104;
  int v105;
  BOOL v106;
  int v107;
  WebCore::WebAnimation *v108;
  WebCore::WebAnimation *v109;
  WebCore::KeyframeEffect *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  WTF *v115;
  WTF *v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  float *v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  char v128;
  char *v129;
  char **v130;
  unsigned int v131;

  v8 = a4;
  if (!a4)
  {
    v8 = &WebCore::RenderStyle::defaultStyle(void)::style;
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
  }
  v9 = a2[1];
  v10 = *(_QWORD **)(v9 + 40);
  v11 = (unsigned __int8 *)v10[40];
  v12 = v8[1];
  v13 = *(_QWORD **)(*(_QWORD *)&v12 + 40);
  v14 = (unsigned __int8 *)v13[40];
  if (v11 != v14)
  {
    if (v11)
      v102 = v14 == 0;
    else
      v102 = 1;
    if (v102)
      goto LABEL_214;
    v103 = WebCore::TranslateTransformOperation::operator==(v11, v14);
    v9 = a2[1];
    if (!v103)
      goto LABEL_214;
    v10 = *(_QWORD **)(v9 + 40);
    v12 = v8[1];
    v13 = *(_QWORD **)(*(_QWORD *)&v12 + 40);
  }
  v15 = v10[39];
  v16 = v13[39];
  if (v15 != v16)
  {
    if (v15)
      v104 = v16 == 0;
    else
      v104 = 1;
    if (v104)
      goto LABEL_214;
    v105 = WebCore::ScaleTransformOperation::operator==(v15, v16);
    v9 = a2[1];
    if (!v105)
      goto LABEL_214;
    v10 = *(_QWORD **)(v9 + 40);
    v12 = v8[1];
    v13 = *(_QWORD **)(*(_QWORD *)&v12 + 40);
  }
  v17 = v10[38];
  v18 = v13[38];
  if (v17 == v18)
    goto LABEL_7;
  if (v17)
    v106 = v18 == 0;
  else
    v106 = 1;
  if (v106 || (v107 = WebCore::RotateTransformOperation::operator==(v17, v18), v9 = a2[1], !v107))
  {
LABEL_214:
    LODWORD(v28) = 1;
    goto LABEL_15;
  }
  v12 = v8[1];
LABEL_7:
  v19 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40);
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v12 + 32) + 40);
  v21 = *(unsigned int *)(v19 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v20 + 20))
  {
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD **)(v19 + 8);
    if (!(_DWORD)v21)
    {
      v26 = *(_QWORD **)(v20 + 8);
      v25 = *(_QWORD **)(v19 + 8);
LABEL_120:
      LODWORD(v28) = v25 != &v23[v21] || v26 != (_QWORD *)(v22 + 8 * v21);
      goto LABEL_14;
    }
    v24 = 8 * v21 - 8;
    v25 = v23;
    v26 = *(_QWORD **)(v20 + 8);
    while (1)
    {
      v27 = v24;
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v25 + 32))(*v25, *v26))
        break;
      ++v25;
      ++v26;
      v24 = v27 - 8;
      if (!v27)
        goto LABEL_120;
    }
  }
  LODWORD(v28) = 1;
LABEL_14:
  v9 = a2[1];
LABEL_15:
  v120 = 0;
  ++*(_DWORD *)v9;
  v29 = a2[2];
  v30 = (_DWORD *)a2[3];
  v121 = v9;
  v122 = v29;
  ++*v30;
  v123 = v30;
  v31 = (float *)a2[4];
  ++*(_DWORD *)v31;
  v32 = a2[5];
  v124 = v31;
  v125 = v32;
  v126 = 0;
  v33 = (_DWORD *)a2[7];
  ++*v33;
  v127 = v33;
  WebCore::KeyframeEffectStack::sortedEffects((uint64_t *)&v118, this);
  v35 = v118;
  if (!v119)
  {
    v36 = 0;
    goto LABEL_115;
  }
  LODWORD(v36) = 0;
  v37 = v118;
  v114 = v28;
  v115 = (WTF *)((char *)v118 + 8 * v119);
  do
  {
    if (*(_QWORD *)v37)
      v38 = *(_QWORD *)(*(_QWORD *)v37 + 8);
    else
      v38 = 0;
    if (*(_BYTE *)(v38 + 305) == 1)
    {
LABEL_20:
      LODWORD(v39) = 0;
      LOBYTE(v40) = 1;
      goto LABEL_21;
    }
    if (a4)
    {
      if (((a4[5].u8[3] ^ BYTE3(v125)) & 4) != 0 || ((HIDWORD(v125) ^ a4[5].i32[1]) & 0xE000) != 0)
      {
        v78 = *(unsigned int *)(v38 + 156);
        if ((_DWORD)v78)
        {
          v57 = 48 * v78;
          v55 = (unsigned __int8 *)(*(_QWORD *)(v38 + 144) + 42);
          while (1)
          {
            v56 = *v55;
            v55 += 48;
            if (v56)
              break;
            v57 -= 48;
            if (!v57)
              goto LABEL_138;
          }
          LODWORD(v40) = 0;
          goto LABEL_142;
        }
        v79 = *(unsigned int *)(v38 + 244);
        if ((_DWORD)v79)
        {
          v71 = *(_QWORD *)(v38 + 232);
          v112 = v71 + (v79 << 6);
          while (1)
          {
            v64 = *(_QWORD *)(v71 + 32);
            if (!v64)
              break;
            v65 = *(unsigned int *)(v64 - 4);
            v66 = (_WORD *)(v64 + 16 * v65);
            if (!*(_DWORD *)(v64 - 12))
            {
              v67 = (_WORD *)(v64 + 16 * v65);
              goto LABEL_94;
            }
            v67 = *(_WORD **)(v71 + 32);
            if ((_DWORD)v65)
            {
              v68 = 16 * v65;
              v67 = *(_WORD **)(v71 + 32);
              while ((unsigned __int16)(*v67 + 1) <= 1u)
              {
                v67 += 8;
                v68 -= 16;
                if (!v68)
                {
                  v67 = v66;
                  break;
                }
              }
            }
LABEL_95:
            if (v64)
              v69 = (_WORD *)(v64 + 16 * *(unsigned int *)(v64 - 4));
            else
              v69 = 0;
            if (v69 != v67)
            {
              while ((WebCore::CSSProperty::isDirectionAwareProperty((unsigned __int16)*v67) & 1) == 0)
              {
                v70 = v67 + 8;
                v67 = v66;
                if (v70 != v66)
                {
                  v67 = v70;
                  while ((unsigned __int16)(*v67 + 1) <= 1u)
                  {
                    v67 += 8;
                    if (v67 == v66)
                    {
                      v67 = v66;
                      break;
                    }
                  }
                }
                if (v67 == v69)
                  goto LABEL_105;
              }
              LODWORD(v40) = 0;
LABEL_190:
              LODWORD(v28) = v114;
              goto LABEL_142;
            }
LABEL_105:
            v71 += 64;
            LODWORD(v28) = v114;
            if (v71 == v112)
              goto LABEL_138;
          }
          v67 = 0;
          v65 = 0;
LABEL_94:
          v66 = (_WORD *)(v64 + 16 * v65);
          goto LABEL_95;
        }
      }
LABEL_138:
      v80 = a4[4];
      if (*(float *)(*(_QWORD *)&v80 + 204) != v124[51]
        || *(_BYTE *)(v38 + 200)
        && (float)((float)*(__int16 *)(*(_QWORD *)&v80 + 192) * 0.25) != (float)((float)*((__int16 *)v124 + 96) * 0.25)
        || *(_BYTE *)(v38 + 201)
        && ((v81 = *(WTF ***)(*(_QWORD *)(*(_QWORD *)&a4[1] + 40) + 288),
             v82 = *(_QWORD *)(*(_QWORD *)(v121 + 40) + 288),
             v81 != (WTF **)v82)
         && !WebCore::StyleCustomPropertyData::operator==(v81, v82)
         || (v83 = *(WTF ***)(*(_QWORD *)&a4[3] + 216), v84 = *((_QWORD *)v123 + 27), v83 != (WTF **)v84)
         && !WebCore::StyleCustomPropertyData::operator==(v83, v84)))
      {
LABEL_141:
        LODWORD(v40) = 1;
        goto LABEL_142;
      }
    }
    v85 = *(_QWORD *)(v38 + 184);
    if (v85 && *(_DWORD *)(v85 - 12))
      goto LABEL_141;
    LOWORD(v130) = 5;
    v131 = 0;
    v86 = *(_QWORD *)(v38 + 192);
    if (!v86)
      goto LABEL_20;
    v87 = 0;
    v88 = 0;
    v89 = *(_DWORD *)(v86 - 8);
    for (i = -184203672; ; i = v88 + v91)
    {
      v91 = i & v89;
      v92 = v86 + 16 * (i & v89);
      v93 = *(unsigned int *)(v92 + 8);
      v94 = v87 != v93 || v87 == 0xFFFFFFFFLL;
      v95 = !v94;
      if ((_DWORD)v93 == -1 || !v95)
      {
        if (v93 == 0xFFFFFFFFLL)
          LOBYTE(v95) = v87 == 0xFFFFFFFFLL;
        if (v95)
          goto LABEL_192;
      }
      else
      {
        v111 = v91;
        v113 = v86;
        v129 = &v128;
        if (((unsigned int (*)(char **, uint64_t, char ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v87])(&v129, v86 + 16 * v91, &v130))
        {
          v87 = v131;
LABEL_192:
          if (v87 != 0xFFFFFFFFLL)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v87]((char *)&v129, (uint64_t)&v130);
          goto LABEL_141;
        }
        v93 = *(unsigned int *)(v92 + 8);
        v87 = v131;
        v86 = v113;
        v91 = v111;
      }
      if (!v93 && *(_WORD *)v92 == 0)
        break;
      ++v88;
    }
    if (v87 != 0xFFFFFFFFLL)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v87]((char *)&v129, (uint64_t)&v130);
    v99 = *(_QWORD *)(v38 + 192);
    if (!v99)
      goto LABEL_20;
    LODWORD(v39) = 0;
    LODWORD(v40) = 1;
    if (!a4 || !*(_DWORD *)(v99 - 12))
      goto LABEL_21;
    v100 = *(_QWORD *)(*(_QWORD *)&a4[4] + 328);
    v101 = *((_QWORD *)v124 + 41);
    if ((v100 & 0x8000000000000) != 0)
    {
      if ((v101 & 0x8000000000000) != 0
        && *(float *)((v100 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v101 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v100 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v101 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v100 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v101 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v100 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v101 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v100) == HIBYTE(v101)
        && BYTE6(v100) == BYTE6(v101))
      {
        LODWORD(v39) = 0;
        LODWORD(v28) = v114;
        goto LABEL_21;
      }
      goto LABEL_190;
    }
    if (v100 == v101 && (v101 & 0x8000000000000) == 0)
    {
      LODWORD(v39) = 0;
      goto LABEL_21;
    }
LABEL_142:
    if (*(_BYTE *)(v38 + 305) == 2)
    {
      *(_BYTE *)(v38 + 305) = 2;
      WebCore::BlendingKeyframes::clear((WebCore::BlendingKeyframes *)(v38 + 136));
    }
    else if (!*(_BYTE *)(v38 + 305))
    {
      WebCore::KeyframeEffect::computeCSSAnimationBlendingKeyframes(v38, (int)&v120, a5);
    }
    LODWORD(v39) = (_DWORD)v40;
    LOBYTE(v40) = 0;
LABEL_21:
    v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 8) + 96);
    if (v41)
      v42 = *(_QWORD *)(v41 + 8);
    else
      v42 = 0;
    v43 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 272))(v42, a2, a5, 0, 0);
    v44 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
      v45 = *(_QWORD *)(v44 + 8);
    else
      v45 = 0;
    LODWORD(v36) = v43 | v36;
    v46 = *(_QWORD *)(v45 + 120);
    if ((v46 && (v47 = *(_QWORD *)(v46 + 8)) != 0
       || (v61 = *(_QWORD *)(v45 + 264)) != 0 && (v47 = *(_QWORD *)(*(_QWORD *)(v61 + 40) + 8)) != 0)
      && (*(_QWORD *)(*(_QWORD *)(v47 + 680) + 712) & 0x800000000000) != 0)
    {
      if (*(_BYTE *)(v45 + 328))
      {
        if (WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)v45))
        {
          v108 = *(WebCore::WebAnimation **)(*(_QWORD *)(v45 + 96) + 8);
          if (!*((_BYTE *)v108 + 156) && WebCore::WebAnimation::playState(v108) == 1)
          {
            v44 = *(_QWORD *)v37;
LABEL_224:
            LODWORD(v36) = v36 | 1;
            goto LABEL_32;
          }
        }
      }
    }
    else if (*(_BYTE *)(v45 + 310) == 1)
    {
      goto LABEL_224;
    }
    v44 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
      v48 = *(_QWORD *)(v44 + 8);
    else
      v48 = 0;
    if (*(_BYTE *)(v48 + 308) && *(_BYTE *)(v48 + 304) != 4)
      goto LABEL_224;
LABEL_32:
    v49 = *(unsigned __int16 **)(v44 + 8);
    if (*((_BYTE *)v49 + 312))
      v36 = v36 | 2;
    else
      v36 = v36;
    if ((_DWORD)v28)
    {
      v62 = *((_QWORD *)v49 + 15);
      if ((v62 && (v63 = *(_QWORD *)(v62 + 8)) != 0
         || (v77 = *((_QWORD *)v49 + 33)) != 0 && (v63 = *(_QWORD *)(*(_QWORD *)(v77 + 40) + 8)) != 0)
        && (*(_QWORD *)(*(_QWORD *)(v63 + 680) + 712) & 0x800000000000) != 0)
      {
LABEL_226:
        if (!*((_BYTE *)v49 + 328))
          goto LABEL_36;
        if (!WebCore::KeyframeEffect::canBeAccelerated((WebCore::KeyframeEffect *)v49))
          goto LABEL_36;
        v109 = *(WebCore::WebAnimation **)(*((_QWORD *)v49 + 12) + 8);
        if (*((_BYTE *)v109 + 156) || WebCore::WebAnimation::playState(v109) != 1)
          goto LABEL_36;
      }
      else if (*((_BYTE *)v49 + 310) != 1)
      {
        goto LABEL_36;
      }
      if (WebCore::propertiesContainTransformRelatedProperty((uint64_t *)v49 + 20))
      {
        if (*(_QWORD *)v37)
          v110 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v37 + 8);
        else
          v110 = 0;
        WebCore::KeyframeEffect::transformRelatedPropertyDidChange(v110);
        LODWORD(v28) = v114;
      }
    }
LABEL_36:
    if ((v40 & 1) == 0 && !(_DWORD)v39)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v42 + 64) + 40))(*(_QWORD *)(v42 + 64), v42);
    if (*(_QWORD *)v37)
      v50 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v37 + 8);
    else
      v50 = 0;
    v51 = WebCore::KeyframeEffect::animatedProperties(v50);
    v49 = (unsigned __int16 *)*v51;
    if (!*v51)
    {
      v42 = 0;
      v52 = 0;
LABEL_75:
      v39 = &v49[8 * v52];
      goto LABEL_53;
    }
    v52 = *((unsigned int *)v49 - 1);
    v39 = &v49[8 * v52];
    if (!*((_DWORD *)v49 - 3))
    {
      v42 = (uint64_t)&v49[8 * v52];
      goto LABEL_75;
    }
    if ((_DWORD)v52)
    {
      v40 = v51;
      v28 = 16 * v52;
      while (1)
      {
        v53 = *((unsigned int *)v49 + 2);
        if ((_DWORD)v53)
          v54 = 0;
        else
          v54 = *v49 == 0;
        if (!v54)
        {
          if ((_DWORD)v53 == -1)
          {
LABEL_225:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_226;
          }
          v130 = &v129;
          if (!((unsigned int (*)(char ***, unsigned __int16 *))off_1E3391998[v53])(&v130, v49))
            goto LABEL_52;
        }
        v49 += 8;
        v28 -= 16;
        if (!v28)
        {
          v49 = v39;
LABEL_52:
          v42 = (uint64_t)v49;
          v49 = (unsigned __int16 *)*v40;
          LODWORD(v28) = v114;
          goto LABEL_53;
        }
      }
    }
    v42 = *v51;
LABEL_53:
    if (v49)
      v49 += 8 * *((unsigned int *)v49 - 1);
    while ((unsigned __int16 *)v42 != v49)
    {
      WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(a3, v42, (uint64_t)&v130);
      v58 = v42 + 16;
      v42 = (uint64_t)v39;
      if ((unsigned __int16 *)v58 != v39)
      {
        v42 = v58;
        while (1)
        {
          v59 = *(unsigned int *)(v42 + 8);
          if ((_DWORD)v59 || *(_WORD *)v42 != 0)
          {
            if ((_DWORD)v59 == -1)
              goto LABEL_225;
            v130 = &v129;
            if (!((unsigned int (*)(char ***, uint64_t))off_1E3391998[v59])(&v130, v42))
              break;
          }
          v42 += 16;
          if ((unsigned __int16 *)v42 == v39)
          {
            v42 = (uint64_t)v39;
            break;
          }
        }
      }
    }
    v37 = (WTF *)((char *)v37 + 8);
  }
  while (v37 != v115);
  do
  {
    v72 = *(unsigned int **)v35;
    *(_QWORD *)v35 = 0;
    if (v72)
    {
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, v34);
      }
    }
    v35 = (WTF *)((char *)v35 + 8);
  }
  while (v35 != v115);
  v35 = v118;
LABEL_115:
  if (v35)
    WTF::fastFree(v35, v34);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v120, v34);
  return v36;
}

uint64_t WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  BOOL v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  char *v29;

  v6 = *a1;
  if (!*a1)
  {
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(a1, 8u, 0);
    v6 = *a1;
    if (!*a1)
      goto LABEL_47;
  }
  for (i = *(_DWORD *)(v6 - 8); ; i = 0)
  {
    v8 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v8 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_47:
    ;
  }
  v29 = &v28;
  v9 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v29, a2) & i;
  v10 = (char *)(v6 + 16 * v9);
  if (*((_DWORD *)v10 + 2))
    v11 = 0;
  else
    v11 = *(unsigned __int16 *)v10 == 0;
  if (v11)
  {
LABEL_10:
    v12 = *(_DWORD *)(a2 + 8);
    if (v12 == -1)
    {
      v22 = 0;
      v23 = v10;
LABEL_22:
      result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v22]((char *)&v29, (uint64_t)v10);
      *((_DWORD *)v10 + 2) = -1;
      goto LABEL_13;
    }
    v23 = v10;
LABEL_12:
    v29 = v23;
    result = ((uint64_t (*)(char **, char *, uint64_t))off_1E338CB50[v12])(&v29, v23, a2);
  }
  else
  {
    v23 = 0;
    v24 = 1;
    do
    {
      result = WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::equal<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>((uint64_t)v10, a2);
      if ((_DWORD)result)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v25 - 4);
        else
          v26 = 0;
        v21 = 0;
        v20 = v25 + 16 * v26;
        goto LABEL_20;
      }
      result = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::isDeletedBucket((uint64_t)v10);
      if ((_DWORD)result)
        v23 = v10;
      v9 = (v9 + v24) & i;
      v10 = (char *)(v6 + 16 * v9);
      ++v24;
      if (*((_DWORD *)v10 + 2))
        v27 = 0;
      else
        v27 = *(unsigned __int16 *)v10 == 0;
    }
    while (!v27);
    if (!v23)
      goto LABEL_10;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    --*(_DWORD *)(*a1 - 16);
    v22 = *((_DWORD *)v23 + 2);
    v12 = *(_DWORD *)(a2 + 8);
    if (v22 != -1)
    {
      if (v12 != -1)
        goto LABEL_12;
      v10 = v23;
      goto LABEL_22;
    }
    if (v12 != -1)
      goto LABEL_12;
  }
LABEL_13:
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      goto LABEL_19;
LABEL_30:
    result = (uint64_t)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::expand(a1, (unsigned __int16 *)v23);
    v23 = (char *)result;
    v16 = *a1;
    if (*a1)
      v19 = *(unsigned int *)(v16 - 4);
    else
      v19 = 0;
    goto LABEL_19;
  }
  if (3 * v19 <= 4 * v18)
    goto LABEL_30;
LABEL_19:
  v20 = v16 + 16 * v19;
  v21 = 1;
  v10 = v23;
LABEL_20:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = v21;
  return result;
}

unsigned __int16 *WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  unsigned __int16 *result;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  BOOL v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  char v18;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  result = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (unsigned __int16 *)v6;
    do
    {
      v13 = result;
      if ((WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::isDeletedBucket((uint64_t)v12) & 1) == 0)
      {
        if (*((_DWORD *)v12 + 2))
          v14 = 0;
        else
          v14 = *v12 == 0;
        if (v14)
        {
          *((_DWORD *)v12 + 2) = -1;
        }
        else
        {
          v15 = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::reinsert(a1, (uint64_t)v12);
          v16 = *((unsigned int *)v12 + 2);
          if ((_DWORD)v16 != -1)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v16](&v18, (uint64_t)v12);
          *((_DWORD *)v12 + 2) = -1;
          if (v12 == a3)
            v13 = v15;
        }
      }
      v12 += 8;
      --v7;
      result = v13;
    }
    while (v7);
  }
  if (v6)
  {
    v17 = result;
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v17;
  }
  return result;
}

uint64_t *WebCore::KeyframeEffect::animatedProperties(WebCore::KeyframeEffect *this)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  uint64_t (*v15[3])();
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;

  if (*((_DWORD *)this + 39))
    return (uint64_t *)((char *)this + 160);
  v1 = (uint64_t *)((char *)this + 208);
  v3 = *((_QWORD *)this + 26);
  if (!v3 || !*(_DWORD *)(v3 - 12))
  {
    v4 = *((unsigned int *)this + 61);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 29);
      v6 = v5 + (v4 << 6);
      do
      {
        WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::keys(&v18, (_QWORD *)(v5 + 40));
        v7 = v19;
        v8 = v21;
        if (v19 != v21)
        {
          v9 = v20;
          do
          {
            v10 = *v7;
            if (*v7)
              *(_DWORD *)v10 += 4;
            v16 = v10;
            v17 = 1;
            WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v1, (uint64_t)&v16, v15);
            if (v17 != -1)
              ((void (*)(uint64_t (**)(), WTF::StringImpl **))off_1E33919E8[v17])(v15, &v16);
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v11);
              else
                *(_DWORD *)v10 -= 2;
            }
            while (1)
            {
              v7 += 2;
              if (v7 == v9)
                break;
              if ((unint64_t)*v7 + 1 > 1)
                goto LABEL_21;
            }
            v7 = v9;
LABEL_21:
            ;
          }
          while (v7 != v8);
        }
        WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::keys(&v18, (_QWORD *)(v5 + 32));
        v12 = v19;
        v13 = v21;
        if (v19 != v21)
        {
          v14 = v20;
          do
          {
            LOWORD(v16) = *(_WORD *)v12;
            v17 = 0;
            WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v1, (uint64_t)&v16, v15);
            if (v17 != -1)
              ((void (*)(uint64_t (**)(), WTF::StringImpl **))off_1E33919E8[v17])(v15, &v16);
            while (1)
            {
              v12 += 2;
              if (v12 == v14)
                break;
              if ((unsigned __int16)(*(_WORD *)v12 + 1) > 1u)
                goto LABEL_32;
            }
            v12 = v14;
LABEL_32:
            ;
          }
          while (v12 != v13);
        }
        v5 += 64;
      }
      while (v5 != v6);
    }
  }
  return v1;
}

uint64_t WebCore::TranslateTransformOperation::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  int v6;
  float *v7;
  float v8;
  float v9;
  uint64_t result;
  char isCalculatedEqual;
  int v12;
  float *v13;
  float v14;
  float v15;
  int v16;
  float *v17;
  float v18;
  float v19;
  char v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;

  v2 = a1[12];
  if (v2 != a2[12])
    return 0;
  v3 = v2 > 0x10;
  v4 = (1 << v2) & 0x18038;
  if (v3 || v4 == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v6 = a1[20];
  if (v6 != a2[20] || (a1[21] != 0) != (a2[21] != 0))
    return 0;
  if (v6 != 13)
  {
    v7 = (float *)(a1 + 16);
    if (v6 == 11)
    {
      v21 = a2;
      v23 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 16), (const WebCore::Length *)(a2 + 16));
      a2 = v21;
      a1 = v23;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[22])
        v8 = *v7;
      else
        v8 = (float)*(int *)v7;
      v9 = *((float *)a2 + 4);
      if (!a2[22])
        v9 = (float)SLODWORD(v9);
      if (v8 != v9)
        return 0;
    }
  }
  v12 = a1[28];
  if (v12 != a2[28] || (a1[29] != 0) != (a2[29] != 0))
    return 0;
  if (v12 != 13)
  {
    v13 = (float *)(a1 + 24);
    if (v12 != 11)
    {
      if (a1[30])
        v14 = *v13;
      else
        v14 = (float)*(int *)v13;
      v15 = *((float *)a2 + 6);
      if (!a2[30])
        v15 = (float)SLODWORD(v15);
      if (v14 != v15)
        return 0;
      goto LABEL_28;
    }
    v22 = a2;
    v24 = a1;
    v20 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 24), (const WebCore::Length *)(a2 + 24));
    a2 = v22;
    a1 = v24;
    if ((v20 & 1) != 0)
      goto LABEL_28;
    return 0;
  }
LABEL_28:
  v16 = a1[36];
  if (v16 != a2[36] || (a1[37] != 0) != (a2[37] != 0))
    return 0;
  if (v16 == 13)
    return 1;
  v17 = (float *)(a1 + 32);
  if (v16 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 32), (const WebCore::Length *)(a2 + 32));
  if (a1[38])
    v18 = *v17;
  else
    v18 = (float)*(int *)v17;
  v19 = *((float *)a2 + 8);
  if (!a2[38])
    v19 = (float)SLODWORD(v19);
  return v18 == v19;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::equal<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v4])(&v11, a1);
  }
  return result;
}

void WebCore::RenderLayer::transformOriginPixelSnappedIfNeeded(WebCore::RenderLayer *this)
{
  uint64_t v2;
  WebCore::RenderStyle *v3;
  unint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  WebCore::RenderObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Page *v13;
  int v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  _DWORD v18[4];

  v2 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v2 + 22) & 2) != 0)
  {
    v3 = (WebCore::RenderStyle *)(v2 + 80);
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 40) + 44);
    v5 = v4 >= 5 ? 2 : 0x705020406uLL >> (8 * v4);
    v18[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 752))(v2, v5 & 7);
    v18[1] = v6;
    v18[2] = v7;
    v18[3] = v8;
    WebCore::RenderStyle::computeTransformOrigin(v3, (const WebCore::FloatRect *)v18);
    v9 = (WebCore::RenderObject *)*((_QWORD *)this + 4);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 3) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) == 0
      || (v17 = *((_QWORD *)this + 4), !WebCore::RenderObject::isSVGLayerAwareRenderer(v9))
      || *(_BYTE *)(v17 + 46) == 83)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40)
                                  + 8)
                      + 528);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 24);
          if (v12)
          {
            v13 = *(WebCore::Page **)(v12 + 8);
            if (v13)
            {
              v14 = (*(_DWORD *)v13)++;
              if (v14)
              {
                *(_DWORD *)v13 = v14;
              }
              else
              {
                WebCore::Page::~Page(v13);
                WTF::fastFree(v15, v16);
              }
            }
          }
        }
      }
    }
  }
}

float WebCore::RenderStyle::computeTransformOrigin(WebCore::RenderStyle *this, const WebCore::FloatRect *a2)
{
  float v3;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  float v10;
  char v11;
  int v12;
  char v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  int v19;
  float v20;
  float v21;
  float v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  float v27;
  unint64_t v28;
  unsigned int v29;
  float v30;
  char v31;
  char v32;
  char v33;
  int v34;
  char v35;
  char v36;
  char v37;
  int v38;
  unsigned __int8 v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  char v45;

  v3 = *(float *)a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40);
  v45 = 0;
  v43 = *(_BYTE *)(v4 + 28);
  v5 = v43;
  v6 = *(_BYTE *)(v4 + 29);
  v44 = v6;
  v7 = v43 - 2;
  if (v7 >= 9)
  {
    if (v43 == 11)
    {
      v42 = *(_DWORD *)(v4 + 24);
      v24 = v42;
      WebCore::Length::ref((int *)&v42);
      v9 = v24;
      v8 = 0;
      goto LABEL_4;
    }
    v9 = 0;
    v8 = 0;
    v11 = 1;
    v10 = 0.0;
  }
  else
  {
    if (!*(_BYTE *)(v4 + 30))
    {
      v8 = 0;
      v9 = *(unsigned int *)(v4 + 24);
LABEL_4:
      v10 = *(float *)&v9;
      v11 = 1;
      goto LABEL_7;
    }
    v11 = 0;
    v10 = *(float *)(v4 + 24);
    v9 = LODWORD(v10);
    v8 = 1;
  }
LABEL_7:
  v41 = 0;
  v39 = *(_BYTE *)(v4 + 36);
  v12 = v39;
  v13 = *(_BYTE *)(v4 + 37);
  v40 = v13;
  v14 = v39 - 2;
  if (v14 >= 9)
  {
    if (v39 == 11)
    {
      v16 = *(unsigned int *)(v4 + 32);
      v38 = v16;
      v29 = v9;
      WebCore::Length::ref(&v38);
      v9 = v29;
      v15 = 0;
      goto LABEL_10;
    }
    v16 = 0;
    v15 = 0;
    v18 = 1;
    v17 = 0;
  }
  else
  {
    v15 = *(_BYTE *)(v4 + 38);
    if (!v15)
    {
      v16 = *(unsigned int *)(v4 + 32);
LABEL_10:
      v17 = v16;
      v18 = 1;
      goto LABEL_13;
    }
    v18 = 0;
    v17 = *(_DWORD *)(v4 + 32);
    v16 = v17;
    v15 = 1;
  }
LABEL_13:
  v30 = 0.0;
  v33 = 0;
  v31 = v5;
  v32 = v6;
  if (v7 >= 9)
  {
    if (v5 != 11)
    {
      v9 = 0;
      v19 = 1;
      v10 = 0.0;
      goto LABEL_16;
    }
  }
  else
  {
    v33 = v8;
    if ((v11 & 1) == 0)
    {
      v19 = 0;
      v30 = v10;
      v9 = LODWORD(v10);
      goto LABEL_16;
    }
  }
  v30 = *(float *)&v9;
  v10 = *(float *)&v9;
  v19 = 1;
LABEL_16:
  v34 = 0;
  v37 = 0;
  v35 = v12;
  v36 = v13;
  if (v14 >= 9)
  {
    if (v12 != 11)
    {
      v16 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v37 = v15;
    if ((v18 & 1) == 0)
    {
      v34 = v17;
      v16 = v17;
      goto LABEL_19;
    }
  }
  v34 = v16;
LABEL_19:
  v20 = *((float *)a2 + 3);
  v21 = *((float *)a2 + 2);
  switch(v5)
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v23 = (float)SLODWORD(v10);
      if (!v19)
        v23 = v10;
      v21 = (float)(v21 * v23) / 100.0;
      break;
    case 4:
      if (v19)
        v21 = (float)(int)v9;
      else
        v21 = v10;
      break;
    case 11:
      v25 = *((float *)a2 + 2);
      v26 = v9;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v30, v25);
      v9 = v26;
      v21 = v27;
      break;
    default:
      v21 = 0.0;
      break;
  }
  switch(v12)
  {
    case 11:
      v28 = v9;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v34, v20);
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
      v9 = v28;
      break;
    default:
      break;
  }
  if (v5 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  return v3 + v21;
}

void WebCore::SVGSVGElement::~SVGSVGElement(WebCore::SVGSVGElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGSVGElement::~SVGSVGElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::SVGViewSpec *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::SVGViewSpec *v17;
  WebCore::SMILTimeContainer *v18;
  _DWORD *v19;
  _DWORD *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;

  v3 = (WebCore::SVGViewSpec *)*((_QWORD *)this + 32);
  if (v3)
  {
    ++*(_DWORD *)v3;
    v4 = *((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v27 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v27)
        {
          v30 = v4;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v27));
          v4 = v30;
        }
        v28 = *(WTF **)(v4 + 16);
        if (v28)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          v29 = v4;
          WTF::fastFree(v28, a2);
          v4 = v29;
        }
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::SVGViewSpec::~SVGViewSpec(v3, (WTF::StringImpl *)a2);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(v7 + 1840, this);
  WebCore::Document::checkedSVGExtensions((WebCore::Document *)v7, &v31);
  v8 = v31;
  WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGSVGElement>((uint64_t)(v31 + 4), this);
  if (v8)
  {
    if (!*v8)
    {
      __break(0xC471u);
      JUMPOUT(0x19443BCD8);
    }
    --*v8;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (_DWORD *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (_DWORD *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = (_DWORD *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v9);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  v17 = (WebCore::SVGViewSpec *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::SVGViewSpec::~SVGViewSpec(v17, (WTF::StringImpl *)v9);
      WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  v18 = (WebCore::SMILTimeContainer *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      WebCore::SMILTimeContainer::~SMILTimeContainer(v18, v9);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
  v19 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, v9);
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::~SVGAnimatedValueProperty(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::~SVGAnimatedValueProperty(a1);
  return WTF::fastFree(v1, v2);
}

{
  void *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_1E3456B10;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v12 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)a1 = off_1E347BE40;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v14 = i;
              v15 = v5;
              v13 = v7;
              WTF::fastFree((WTF *)v9, v2);
              v7 = v13;
              i = v14;
              v5 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  return a1;
}

uint64_t WebCore::SVGProperty::detach(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 0;
  return this;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>::~SVGAnimatedValueProperty(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>::~SVGAnimatedValueProperty(a1);
  return WTF::fastFree(v1, v2);
}

{
  void *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_1E3467A40;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v12 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)a1 = off_1E347BE40;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v14 = i;
              v15 = v5;
              v13 = v7;
              WTF::fastFree((WTF *)v9, v2);
              v7 = v13;
              i = v14;
              v5 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::~SVGAnimatedValueProperty(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::~SVGAnimatedValueProperty(a1);
  return WTF::fastFree(v1, v2);
}

{
  void *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_1E3461BE0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v12 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)a1 = off_1E347BE40;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v14 = i;
              v15 = v5;
              v13 = v7;
              WTF::fastFree((WTF *)v9, v2);
              v7 = v13;
              i = v14;
              v5 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>::~SVGAnimatedPropertyList(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>::~SVGAnimatedPropertyList(a1, a2);
  return WTF::fastFree(v2, v3);
}

_QWORD *WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>::~SVGAnimatedPropertyList(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = off_1E346A7D0;
  v3 = a1[5];
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  v4 = a1[6];
  if (v4)
  {
    *(_QWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 24) = 0;
    v13 = (_DWORD *)a1[6];
    a1[6] = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
  }
  else
  {
    a1[6] = 0;
  }
  v5 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *a1 = off_1E347BE40;
  v6 = a1[3];
  if (v6)
  {
    v8 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v6 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v15 = i;
              v16 = v6;
              v14 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v14;
              i = v15;
              v6 = v16;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  return a1;
}

void WebCore::SMILTimeContainer::~SMILTimeContainer(WebCore::SMILTimeContainer *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl **v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v17 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v17;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v16 = v3;
        WTF::fastFree(v9, a2);
        v3 = v16;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    v10 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v10)
    {
      v11 = v6 + 16;
      do
      {
        if (*(_QWORD *)(v11 - 16) != -1)
        {
          v12 = *(WTF **)v11;
          if (*(_QWORD *)v11)
          {
            *(_QWORD *)v11 = 0;
            *(_DWORD *)(v11 + 8) = 0;
            v19 = v11;
            v21 = v10;
            WTF::fastFree(v12, a2);
            v11 = v19;
            v10 = v21;
          }
          v13 = *(WTF::StringImpl ***)(v11 - 8);
          *(_QWORD *)(v11 - 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              v18 = v11;
              v20 = v10;
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v13);
              WTF::fastFree(v14, v15);
              v11 = v18;
              v10 = v20;
            }
            else
            {
              --*(_DWORD *)v13;
            }
          }
        }
        v11 += 32;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  *((_QWORD *)this + 7) = off_1E31F7378;
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebCore::SMILTimeContainer *)((char *)this + 56));
}

void WebCore::SVGTransformList::~SVGTransformList(WebCore::SVGTransformList *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)this = off_1E32EE2E0;
  *((_QWORD *)this + 6) = &unk_1E32EE358;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E32EE390;
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)this + 4);
      if (v3)
        goto LABEL_14;
      goto LABEL_15;
    }
  }
  else
  {
    *(_QWORD *)this = off_1E32EE390;
  }
  if (v3)
  {
LABEL_14:
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
LABEL_15:
  WTF::fastFree(this, a2);
}

{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)this = off_1E32EE2E0;
  *((_QWORD *)this + 6) = &unk_1E32EE358;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if (!(_DWORD)v4)
  {
    *(_QWORD *)this = off_1E32EE390;
    goto LABEL_13;
  }
  v5 = 8 * v4;
  do
  {
    v6 = *(_DWORD **)v3;
    v3 = (WTF *)((char *)v3 + 8);
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    v5 -= 8;
  }
  while (v5);
  v7 = *((unsigned int *)this + 11);
  *(_QWORD *)this = off_1E32EE390;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (!(_DWORD)v7)
  {
LABEL_13:
    if (!v3)
      return;
    goto LABEL_14;
  }
  v8 = 8 * v7;
  do
  {
    v9 = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    v3 = (WTF *)((char *)v3 + 8);
    v8 -= 8;
  }
  while (v8);
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
LABEL_14:
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
}

void WebCore::SVGElement::~SVGElement(WebCore::SVGElement *this, void *a2)
{
  _QWORD **v3;
  uint64_t v4;
  int *v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  WebCore::RenderStyle *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD **v39;
  _DWORD *v40;
  WTF *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t m;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  uint64_t k;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  uint64_t *v71;
  void *v72;
  WTF *v73;
  WebCore::SVGElementRareData *v74;
  uint64_t v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  WebCore::SVGDocumentExtensions *v87;
  WTF *v88;
  WebCore::TreeScope *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  _DWORD *v97;
  WTF *v98;
  void *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  int v104;
  unsigned int v105;

  *(_QWORD *)this = off_1E34572F8;
  *((_QWORD *)this + 14) = &unk_1E3457828;
  v3 = (_QWORD **)*((_QWORD *)this + 15);
  if (v3)
  {
    if ((WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v3) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19443CCF8);
    }
    v70 = *((_QWORD *)this + 15);
    if (v70)
    {
      v71 = (uint64_t *)(v70 + 40);
    }
    else
    {
      v71 = &WebCore::SVGElement::instances(void)const::emptyInstances;
      {
        WebCore::SVGElement::instances(void)const::emptyInstances = 0;
        *(_QWORD *)&dword_1EE2F9738 = 0;
      }
    }
    WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v71, v69, (uint64_t)&v103);
    v73 = v103;
    if (v105)
    {
      v90 = 8 * v105;
      do
      {
        v91 = *(_QWORD *)v73;
        v73 = (WTF *)((char *)v73 + 8);
        WebCore::SVGElementRareData::setCorrespondingElement(*(WebCore::SVGElementRareData **)(v91 + 120), 0);
        v90 -= 8;
      }
      while (v90);
      v73 = v103;
      if (v105)
      {
        v92 = 8 * v105;
        do
        {
          v93 = *(_QWORD *)v73;
          *(_QWORD *)v73 = 0;
          if (v93)
          {
            if (*(_DWORD *)(v93 + 24) == 2)
            {
              if ((*(_WORD *)(v93 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v93, v72);
            }
            else
            {
              *(_DWORD *)(v93 + 24) -= 2;
            }
          }
          v73 = (WTF *)((char *)v73 + 8);
          v92 -= 8;
        }
        while (v92);
        v73 = v103;
      }
    }
    if (v73)
    {
      v103 = 0;
      v104 = 0;
      WTF::fastFree(v73, v72);
    }
    v74 = (WebCore::SVGElementRareData *)*((_QWORD *)this + 15);
    v75 = *((_QWORD *)v74 + 7);
    if (v75 && *(_QWORD *)(v75 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19443CD18);
    }
    *((_QWORD *)this + 15) = 0;
    WebCore::SVGElementRareData::~SVGElementRareData(v74, v72);
    WTF::fastFree(v76, v77);
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  if (!*(_QWORD *)(v4 + 1808))
  {
    v78 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v78 = 0;
    v79 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 + 1, v79));
    *(_QWORD *)(v78 + 8) = v79;
    *(_OWORD *)(v78 + 16) = 0u;
    *(_OWORD *)(v78 + 32) = 0u;
    v81 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v81 = 0;
    *(_QWORD *)(v78 + 48) = v81;
    *(_QWORD *)(v78 + 56) = 0;
    *(_QWORD *)(v78 + 64) = 0;
    v82 = *(_QWORD *)(v4 + 528);
    if (!v82)
      goto LABEL_159;
    v83 = *(_QWORD *)(v82 + 8);
    if (v83
      && (v84 = *(_QWORD *)(v83 + 24)) != 0
      && (v85 = *(_QWORD *)(v84 + 8)) != 0
      && (*(_WORD *)(v85 + 658) & 4) != 0)
    {
      v86 = *(_BYTE *)(v85 + 545) == 0;
    }
    else
    {
LABEL_159:
      v86 = 1;
    }
    *(_BYTE *)(v78 + 72) = v86;
    v87 = *(WebCore::SVGDocumentExtensions **)(v4 + 1808);
    *(_QWORD *)(v4 + 1808) = v78;
    if (v87)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v87, a2);
      if (*(_DWORD *)v88)
      {
        *((_OWORD *)v88 + 3) = 0u;
        *((_OWORD *)v88 + 4) = 0u;
        *((_OWORD *)v88 + 1) = 0u;
        *((_OWORD *)v88 + 2) = 0u;
        *(_OWORD *)v88 = 0u;
      }
      else
      {
        WTF::fastFree(v88, a2);
      }
    }
  }
  v5 = *(int **)(v4 + 1808);
  v6 = *v5 + 1;
  *v5 = v6;
  v7 = v5[17];
  if ((_DWORD)v7)
  {
    a2 = 0;
    v100 = v5 + 14;
    while (*(WebCore::SVGElement **)(*v100 + 8 * (_QWORD)a2) != this)
    {
      a2 = (char *)a2 + 1;
      if ((void *)v7 == a2)
        goto LABEL_4;
    }
    WTF::Vector<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)v100, a2);
    v6 = *v5;
  }
LABEL_4:
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19443C9F4);
  }
  *v5 = v6 - 1;
  if ((*((_QWORD *)this + 2) & 0x8000000000000000) != 0)
  {
    v89 = (WebCore::TreeScope *)WebCore::Node::treeScopeForSVGReferences(this);
    WebCore::TreeScope::removeElementFromPendingSVGResources(v89, this);
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v58 = *(_WORD *)(v4 + 30);
      if ((v58 & 0x400) == 0)
      {
        v59 = *(_WORD *)(v4 + 28);
        if ((v59 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v59 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v58 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v58 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      v94 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v94)
      {
        v95 = *(_QWORD *)v10;
        do
        {
          v96 = *(WTF::StringImpl ***)v95;
          if (*(_QWORD *)v95 != -1)
          {
            v97 = *(_DWORD **)(v95 + 8);
            *(_QWORD *)(v95 + 8) = 0;
            if (v97)
            {
              if (v97[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v97 + 8))(v97);
                v96 = *(WTF::StringImpl ***)v95;
              }
              else
              {
                --v97[2];
              }
            }
            *(_QWORD *)v95 = 0;
            if (v96)
            {
              if (*(_DWORD *)v96 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v96);
                WTF::fastFree(v98, v99);
              }
              else
              {
                --*(_DWORD *)v96;
              }
            }
          }
          v95 += 16;
          --v94;
        }
        while (v94);
      }
      WTF::fastFree((WTF *)(v11 - 16), a2);
    }
    WTF::fastFree(v10, a2);
  }
  v12 = *((_QWORD *)this + 16);
  if (v12)
  {
    v30 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v30)
    {
      for (i = 0; i != v30; ++i)
      {
        v32 = *(_QWORD *)(v12 + 8 * i);
        if (v32 != -1)
        {
          *(_QWORD *)(v12 + 8 * i) = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr((unsigned int *)v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, (unsigned int *)v32));
            if (!v34)
            {
              atomic_store(1u, (unsigned int *)v32);
              v35 = *(unsigned int *)(v32 + 28);
              if ((_DWORD)v35)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v35));
              v36 = *(WTF **)(v32 + 16);
              if (v36)
              {
                *(_QWORD *)(v32 + 16) = 0;
                *(_DWORD *)(v32 + 24) = 0;
                WTF::fastFree(v36, a2);
              }
              WTF::fastFree((WTF *)v32, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v13)
  {
    v14 = (WTF *)*((_QWORD *)v13 + 11);
    *((_QWORD *)v13 + 11) = 0;
    if (v14)
    {
      v15 = (_DWORD *)*((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 2) = 0;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
      }
      v16 = (_DWORD *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
      v17 = *(_DWORD **)v14;
      *(_QWORD *)v14 = 0;
      if (v17)
      {
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
      }
      WTF::fastFree(v14, a2);
    }
    v18 = (WebCore::RenderStyle *)*((_QWORD *)v13 + 10);
    *((_QWORD *)v13 + 10) = 0;
    if (v18)
    {
      WebCore::RenderStyle::~RenderStyle(v18, a2);
      if (*(_DWORD *)v19)
      {
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v19, a2);
      }
    }
    v20 = *((_QWORD *)v13 + 9);
    *((_QWORD *)v13 + 9) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        v37 = *(unsigned int *)(v20 + 28);
        if ((_DWORD)v37)
        {
          v38 = 16 * v37;
          v39 = (_DWORD **)(*(_QWORD *)(v20 + 16) + 8);
          do
          {
            v40 = *v39;
            *v39 = 0;
            if (v40)
            {
              if (*v40 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, (WTF::StringImpl *)a2);
              else
                *v40 -= 2;
            }
            v39 += 2;
            v38 -= 16;
          }
          while (v38);
        }
        v41 = *(WTF **)(v20 + 16);
        if ((WTF *)(v20 + 32) != v41 && v41 != 0)
        {
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 24) = 0;
          WTF::fastFree(v41, a2);
        }
        v43 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        WTF::fastFree((WTF *)v20, a2);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
    v21 = *((_QWORD *)v13 + 7);
    *((_QWORD *)v13 + 7) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr((unsigned int *)v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v21));
      if (!v23)
      {
        atomic_store(1u, (unsigned int *)v21);
        v65 = *(unsigned int *)(v21 + 28);
        if ((_DWORD)v65)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v65));
        v66 = *(WTF **)(v21 + 16);
        if (v66)
        {
          *(_QWORD *)(v21 + 16) = 0;
          *(_DWORD *)(v21 + 24) = 0;
          WTF::fastFree(v66, a2);
        }
        WTF::fastFree((WTF *)v21, a2);
      }
    }
    v24 = *((_QWORD *)v13 + 5);
    if (v24)
    {
      v44 = *(unsigned int *)(v24 - 4);
      if ((_DWORD)v44)
      {
        for (j = 0; j != v44; ++j)
        {
          v46 = *(_QWORD *)(v24 + 8 * j);
          if (v46 != -1)
          {
            *(_QWORD *)(v24 + 8 * j) = 0;
            if (v46)
            {
              do
              {
                v47 = __ldaxr((unsigned int *)v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, (unsigned int *)v46));
              if (!v48)
              {
                v101 = v24;
                atomic_store(1u, (unsigned int *)v46);
                v49 = *(unsigned int *)(v46 + 28);
                if ((_DWORD)v49)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v46 + 16), (WTF::StringImpl *)(*(_QWORD *)(v46 + 16) + 32 * v49));
                v50 = *(WTF **)(v46 + 16);
                if (v50)
                {
                  *(_QWORD *)(v46 + 16) = 0;
                  *(_DWORD *)(v46 + 24) = 0;
                  WTF::fastFree(v50, a2);
                }
                WTF::fastFree((WTF *)v46, a2);
                v24 = v101;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v24 - 16), a2);
    }
    v25 = *((_QWORD *)v13 + 3);
    if (v25)
    {
      v60 = *(unsigned int *)(v25 - 4);
      if ((_DWORD)v60)
      {
        for (k = 0; k != v60; ++k)
        {
          v62 = *(unsigned int **)(v25 + 8 * k);
          if (v62 != (unsigned int *)-1)
          {
            *(_QWORD *)(v25 + 8 * k) = 0;
            if (v62)
            {
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
              {
                atomic_store(1u, v62);
                WTF::fastFree((WTF *)v62, a2);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v25 - 16), a2);
    }
    v26 = *((_QWORD *)v13 + 2);
    *((_QWORD *)v13 + 2) = 0;
    if (v26)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v26));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)v26);
        v67 = *(unsigned int *)(v26 + 28);
        if ((_DWORD)v67)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v67));
        v68 = *(WTF **)(v26 + 16);
        if (v68)
        {
          *(_QWORD *)(v26 + 16) = 0;
          *(_DWORD *)(v26 + 24) = 0;
          WTF::fastFree(v68, a2);
        }
        WTF::fastFree((WTF *)v26, a2);
      }
    }
    v29 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
    {
      v51 = *(unsigned int *)(v29 - 4);
      if ((_DWORD)v51)
      {
        for (m = 0; m != v51; ++m)
        {
          v53 = *(_QWORD *)(v29 + 8 * m);
          if (v53 != -1)
          {
            *(_QWORD *)(v29 + 8 * m) = 0;
            if (v53)
            {
              do
              {
                v54 = __ldaxr((unsigned int *)v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, (unsigned int *)v53));
              if (!v55)
              {
                v102 = v29;
                atomic_store(1u, (unsigned int *)v53);
                v56 = *(unsigned int *)(v53 + 28);
                if ((_DWORD)v56)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v53 + 16), (WTF::StringImpl *)(*(_QWORD *)(v53 + 16) + 32 * v56));
                v57 = *(WTF **)(v53 + 16);
                if (v57)
                {
                  *(_QWORD *)(v53 + 16) = 0;
                  *(_DWORD *)(v53 + 24) = 0;
                  WTF::fastFree(v57, a2);
                }
                WTF::fastFree((WTF *)v53, a2);
                v29 = v102;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v29 - 16), a2);
    }
    WTF::fastFree(v13, a2);
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::~SVGAnimatedPrimitiveProperty(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E3452E28;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)this = off_1E347BE40;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGSharedPrimitiveProperty<WTF::String>::~SVGSharedPrimitiveProperty(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3452EA8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGSVGElement>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_6:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_7:
      v8 = v7;
LABEL_8:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_2;
    }
    v9 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v9)
      goto LABEL_22;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v6 + 8 * v11;
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        v23 = a2;
        v25 = a1;
        v20 = v6;
        v21 = v10;
        v19 = v11;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket((uint64_t *)(v6 + 8 * v11), a2);
        v11 = v19;
        v6 = v20;
        a2 = v23;
        a1 = v25;
        v10 = v21 + 1;
      }
    }
    while ((unint64_t)v11--);
    v6 = *(_QWORD *)a1;
    if (v10)
    {
      v16 = v10;
      *(_DWORD *)(v6 - 16) += v10;
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      *(_DWORD *)(v17 - 12) = v18 - v16;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_6;
    v14 = *(_DWORD *)(v6 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v14)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v22 = a2;
      v24 = a1;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v22;
      a1 = v24;
      v6 = *(_QWORD *)v24;
      *(_DWORD *)(v24 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_7;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_2:
  v4 = (WTF *)(a2[2] & 0xFFFFFFFFFFFFLL);
  if (v4 && *((_QWORD *)v4 + 1))
    return WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a1, v4);
  else
    return 0;
}

void WebCore::LocalFrameView::~LocalFrameView(WebCore::LocalFrameView *this)
{
  _DWORD *v1;
  void *v2;

  WebCore::LocalFrameView::~LocalFrameView(this);
  if (v1[34])
    bzero(v1, 0x570uLL);
  else
    bmalloc::api::isoDeallocate((bmalloc::api *)v1, v2);
}

{
  int v2;
  int v3;
  const WebCore::RenderObject *v4;
  WebCore::ScrollAnchoringController *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF **v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  WTF **v46;
  WTF *v47;
  uint64_t v48;
  WTF **v49;
  WTF *v50;
  uint64_t v51;
  uint64_t i;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t j;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t k;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t m;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  WTF **v75;
  WTF *v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  _QWORD *v82;

  WebCore::LocalFrameView::removeFromAXObjectCache((uint64_t)this);
  *((_BYTE *)this + 475) = 1;
  if (!*((_BYTE *)this + 318))
  {
    *((_BYTE *)this + 318) = 1;
    if (*((_QWORD *)this + 5))
      WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)this, 0);
  }
  if (*((_BYTE *)this + 1364))
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v2 = 1;
    v3 = 1;
  }
  WebCore::ScrollView::setScrollbarModes((uint64_t)this, v2, v3, 0, 0);
  if (*((_BYTE *)this + 318))
  {
    *((_BYTE *)this + 318) = 0;
    if (*((_QWORD *)this + 5))
      WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)this, 0);
  }
  WebCore::ScrollView::setHasScrollbarInternal(this, (uint64_t *)this + 19, 0, 0, 0);
  WebCore::ScrollView::setHasScrollbarInternal(this, (uint64_t *)this + 20, 1, 0, 0);
  v5 = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v5)
  {
    WebCore::ScrollAnchoringController::~ScrollAnchoringController(v5, v4);
    WTF::fastFree(v6, v7);
  }
  v8 = *((_QWORD *)this + 167);
  if (v8)
  {
    v51 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v51)
    {
      for (i = 0; i != v51; ++i)
      {
        v53 = *(unsigned int **)(v8 + 8 * i);
        if (v53 != (unsigned int *)-1)
        {
          *(_QWORD *)(v8 + 8 * i) = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              WTF::fastFree((WTF *)v53, v4);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v8 - 16), v4);
  }
  v9 = (WTF *)*((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v9)
  {
    v10 = *(WTF ***)v9;
    if (*(_QWORD *)v9)
    {
      v45 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v45)
      {
        v46 = *(WTF ***)v9;
        do
        {
          v47 = *v46;
          if (*v46 != (WTF *)-1)
          {
            *v46 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 1)
                WTF::fastFree(v47, v4);
              else
                --*(_DWORD *)v47;
            }
          }
          ++v46;
          --v45;
        }
        while (v45);
      }
      WTF::fastFree((WTF *)(v10 - 2), v4);
    }
    WTF::fastFree(v9, v4);
  }
  v11 = (WTF *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v56 = *(unsigned int *)(v12 - 4);
      if ((_DWORD)v56)
      {
        for (j = 0; j != v56; ++j)
        {
          v58 = *(unsigned int **)(v12 + 8 * j);
          if (v58 != (unsigned int *)-1)
          {
            *(_QWORD *)(v12 + 8 * j) = 0;
            if (v58)
            {
              do
              {
                v59 = __ldaxr(v58);
                v60 = v59 - 1;
              }
              while (__stlxr(v60, v58));
              if (!v60)
              {
                atomic_store(1u, v58);
                v61 = v56;
                WTF::fastFree((WTF *)v58, v4);
                v56 = v61;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v12 - 16), v4);
    }
    WTF::fastFree(v11, v4);
  }
  v13 = (WTF *)*((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v13)
  {
    v14 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
    {
      v62 = *(unsigned int *)(v14 - 4);
      if ((_DWORD)v62)
      {
        for (k = 0; k != v62; ++k)
        {
          v64 = *(unsigned int **)(v14 + 8 * k);
          if (v64 != (unsigned int *)-1)
          {
            *(_QWORD *)(v14 + 8 * k) = 0;
            if (v64)
            {
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                atomic_store(1u, v64);
                v67 = v62;
                WTF::fastFree((WTF *)v64, v4);
                v62 = v67;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v14 - 16), v4);
    }
    WTF::fastFree(v13, v4);
  }
  v15 = (WTF *)*((_QWORD *)this + 132);
  if (v15)
  {
    *((_QWORD *)this + 132) = 0;
    *((_DWORD *)this + 266) = 0;
    WTF::fastFree(v15, v4);
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v4);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v4);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((_QWORD *)this + 128);
  if ((v18 & 0x8000000000000) != 0)
  {
    v79 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, v79);
      WTF::fastFree((WTF *)v79, v4);
    }
  }
  *((_QWORD *)this + 119) = off_1E31F7378;
  v19 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameView *)((char *)this + 952));
  *((_QWORD *)this + 112) = off_1E31F7378;
  v20 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameView *)((char *)this + 896));
  *((_QWORD *)this + 105) = off_1E31F7378;
  v21 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameView *)((char *)this + 840));
  *((_QWORD *)this + 98) = off_1E31F7378;
  v22 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameView *)((char *)this + 784));
  *((_QWORD *)this + 91) = off_1E31F7378;
  v23 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameView *)((char *)this + 728));
  *((_QWORD *)this + 84) = off_1E31F7378;
  v24 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameView *)((char *)this + 672));
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v25)
    WebCore::RenderObjectDeleter::operator()((uint64_t)this + 664, (uint64_t)v25);
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_BYTE *)this + 640))
  {
    v27 = *((_QWORD *)this + 78);
    *((_QWORD *)this + 78) = 0;
    if (v27)
    {
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v27, v25);
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
    }
    v28 = *((_QWORD *)this + 76);
    *((_QWORD *)this + 76) = 0;
    if (v28)
    {
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v25);
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
    }
  }
  v29 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v25);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  v30 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v30)
  {
    if (*(_DWORD *)(v30 + 24) == 2)
    {
      if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v30, v25);
    }
    else
    {
      *(_DWORD *)(v30 + 24) -= 2;
    }
  }
  v31 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v31)
  {
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v25);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
  }
  v32 = *((_QWORD *)this + 72);
  if (v32)
  {
    v68 = *(unsigned int *)(v32 - 4);
    if ((_DWORD)v68)
    {
      for (m = 0; m != v68; ++m)
      {
        if (*(_QWORD *)(v32 + 24 * m + 8) != -1)
        {
          v70 = v32 + 24 * m;
          v71 = *(unsigned int **)(v70 + 16);
          *(_QWORD *)(v70 + 16) = 0;
          if (v71)
          {
            do
            {
              v72 = __ldaxr(v71);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v71));
            if (!v73)
            {
              atomic_store(1u, v71);
              v78 = m;
              WTF::fastFree((WTF *)v71, v25);
              m = v78;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v32 - 16), v25);
  }
  v33 = (WTF *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v33)
  {
    v34 = *(WTF ***)v33;
    if (*(_QWORD *)v33)
    {
      v48 = *((unsigned int *)v34 - 1);
      if ((_DWORD)v48)
      {
        v49 = *(WTF ***)v33;
        do
        {
          v50 = *v49;
          if (*v49 != (WTF *)-1)
          {
            *v49 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 1)
                WTF::fastFree(v50, v25);
              else
                --*(_DWORD *)v50;
            }
          }
          ++v49;
          --v48;
        }
        while (v48);
      }
      WTF::fastFree((WTF *)(v34 - 2), v25);
    }
    WTF::fastFree(v33, v25);
  }
  v35 = (WTF *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v35)
  {
    v36 = (WTF *)*((_QWORD *)v35 + 1);
    while (v36)
    {
      v37 = v36;
      v36 = (WTF *)*((_QWORD *)v36 + 2);
      v38 = *(WTF **)v37;
      *(_QWORD *)v37 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
          WTF::fastFree(v38, v25);
        else
          --*(_DWORD *)v38;
      }
      WTF::fastFree(v37, v25);
    }
    if (*(_QWORD *)v35)
      WTF::fastFree((WTF *)(*(_QWORD *)v35 - 16), v25);
    WTF::fastFree(v35, v25);
  }
  v39 = *((_QWORD *)this + 69);
  if (v39)
  {
    v74 = *(unsigned int *)(v39 - 4);
    if ((_DWORD)v74)
    {
      v75 = (WTF **)*((_QWORD *)this + 69);
      do
      {
        v76 = *v75;
        if (*v75 != (WTF *)-1)
        {
          *v75 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 1)
              WTF::fastFree(v76, v25);
            else
              --*(_DWORD *)v76;
          }
        }
        ++v75;
        --v74;
      }
      while (v74);
    }
    WTF::fastFree((WTF *)(v39 - 16), v25);
  }
  WebCore::LocalFrameViewLayoutContext::~LocalFrameViewLayoutContext((WebCore::LocalFrameView *)((char *)this + 336), v25);
  v41 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v41)
  {
    v42 = (unsigned int *)(v41 + 8);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      v77 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v77 = off_1E31FE290;
      v77[1] = v42;
      v82 = v77;
      WTF::ensureOnMainThread();
      if (v82)
        (*(void (**)(_QWORD *))(*v82 + 8))(v82);
    }
  }
  WebCore::ScrollView::~ScrollView(this, v40);
}

uint64_t WebCore::ScrollView::setHasScrollbarInternal(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t result;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;

  result = *a2;
  if (a4)
  {
    if (result)
      return 0;
    (*(void (**)(_DWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 392))(&v15, a1, a3);
    v10 = v15;
    v15 = 0;
    v11 = (_DWORD *)*a2;
    *a2 = (uint64_t)v10;
    if (!v11)
      goto LABEL_8;
    v12 = v11[2] - 1;
    if (v11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      v11 = v15;
      v15 = 0;
      if (!v11)
        goto LABEL_8;
      v12 = v11[2] - 1;
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        goto LABEL_8;
      }
    }
    v11[2] = v12;
LABEL_8:
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 328))(a1, *a2);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[8] + 240))(a1 + 8, *a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 288))(*a2);
    if (!a5)
      return 1;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 272))(*a2);
LABEL_14:
    *a5 = v13 ^ 1;
    return 1;
  }
  if (result)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[8] + 248))(a1 + 8, *a2, a3);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 336))(a1, *a2);
    v14 = (_DWORD *)*a2;
    *a2 = 0;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
    if (!a5)
      return 1;
    goto LABEL_14;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::removeFromAXObjectCache(uint64_t this)
{
  _QWORD *v1;
  WebCore::Document *v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  WebCore::Document *v7;
  int v9;
  uint64_t v10;
  WebCore::AXObjectCache *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  WebCore::Widget *v18;
  WebCore::Widget *v19;
  WebCore::Widget *v20;

  v1 = *(_QWORD **)(this + 328);
  v2 = (WebCore::Document *)v1[37];
  v3 = WebCore::Document::hasEverCreatedAnAXObjectCache;
  if (v2)
    v4 = WebCore::Document::hasEverCreatedAnAXObjectCache == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v17 = *(_QWORD **)(this + 328);
    v18 = (WebCore::Widget *)this;
    v9 = WebCore::Document::hasEverCreatedAnAXObjectCache;
    v10 = WebCore::Document::existingAXObjectCacheSlow(v2);
    v3 = v9;
    v11 = (WebCore::AXObjectCache *)v10;
    v1 = v17;
    this = (uint64_t)v18;
    if (v11)
      goto LABEL_19;
  }
  v5 = *(_QWORD *)(v1[16] + 8);
  if ((_QWORD *)v5 != v1 && v5 && *(_BYTE *)(v5 + 144) == 0)
  {
    v7 = *(WebCore::Document **)(v5 + 296);
    if (v7 && v3 != 0)
    {
      v20 = (WebCore::Widget *)this;
      v15 = v1;
      v16 = WebCore::Document::existingAXObjectCacheSlow(v7);
      v1 = v15;
      v11 = (WebCore::AXObjectCache *)v16;
      this = (uint64_t)v20;
      if (v11)
      {
LABEL_19:
        v19 = (WebCore::Widget *)this;
        v12 = v1[15];
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 64);
            if ((v14 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              this = 105;
              __break(0xC471u);
              return this;
            }
            WebCore::AXObjectCache::childrenChanged(v11, (WebCore::RenderObject *)(v14 & 0xFFFFFFFFFFFFLL), 0);
          }
        }
        return (uint64_t)WebCore::AXObjectCache::remove((uint64_t *)v11, v19);
      }
    }
  }
  return this;
}

uint64_t WebCore::TileController::containerLayers@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;

  v2 = this;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(this + 56);
  if (v4)
  {
    v21 = *(_QWORD *)(v4 + 24);
    this = WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformCALayer*>(a2, &v21);
    v8 = (int *)(a2 + 12);
    v6 = *(unsigned int *)(a2 + 12);
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 24);
    v5 = *(_QWORD **)a2;
    if ((_DWORD)v6 != *(_DWORD *)(a2 + 8))
    {
      if (v7)
      {
        v19 = (unsigned int *)(v7 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
        v18 = *v8;
      }
      else
      {
        v18 = *(_DWORD *)(a2 + 12);
      }
      v5[v6] = v7;
LABEL_16:
      *v8 = v18 + 1;
      return this;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(this + 48) + 24);
    v8 = (int *)(a2 + 12);
  }
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v6 + 1)
    v11 = v6 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a2 + 8) = v11;
    *(_QWORD *)a2 = v12;
    this = (uint64_t)memcpy(v12, v5, 8 * v6);
    if (v5)
    {
      if (*(_QWORD **)a2 == v5)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v5, v13);
    }
    v14 = *(unsigned int *)(a2 + 12);
    v15 = *(_QWORD **)a2;
    if (v7)
    {
      v16 = (unsigned int *)(v7 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = *v8;
    }
    else
    {
      v18 = *(_DWORD *)(a2 + 12);
    }
    v15[v14] = v7;
    goto LABEL_16;
  }
  __break(0xC471u);
  return this;
}

void WebCore::SQLiteDatabase::useFastMalloc(WebCore::SQLiteDatabase *this)
{
  int v1;
  int v2;
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = sqlite3_config(13, 0, 0);
  if (v1)
  {
    v3 = v1;
    v4 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v8 = v3;
      _os_log_error_impl(&dword_1940B8000, v4, OS_LOG_TYPE_ERROR, "Unable to reduce lookaside buffer size: %d", buf, 8u);
    }
  }
  v2 = sqlite3_config(4, &WebCore::SQLiteDatabase::useFastMalloc(void)::fastMallocMethods);
  if (v2)
  {
    v5 = v2;
    v6 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v8 = v5;
      _os_log_error_impl(&dword_1940B8000, v6, OS_LOG_TYPE_ERROR, "Unable to replace SQLite malloc: %d", buf, 8u);
    }
  }
}

uint64_t WebCore::SQLiteStatement::bindBlob(sqlite3_stmt **this, int a2, const WTF::String *a3)
{
  uint64_t v6;
  WTF *v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  __int16 v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  unint64_t v20;
  __int128 v21;
  WTF *v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[64];
  WTF *v33;
  uint64_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(WTF **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v30 = (WTF *)v32;
  v31 = 32;
  v33 = 0;
  v34 = 0;
  v9 = v8;
  if ((v8 & 0x100000000) != 0)
  {
    if (v8 > 0x20uLL)
    {
      if (v8 <= 0x29uLL)
        v20 = 41;
      else
        v20 = v8;
      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v30, v20);
      HIDWORD(v31) = v8;
      v10 = v30;
      if (v8 < 0x40uLL)
      {
        v11 = v30;
      }
      else
      {
        v11 = (WTF *)((char *)v30 + 2 * (v8 & 0xFFFFFFC0));
        v21 = 0uLL;
        v22 = v30;
        do
        {
          v35.val[0] = *(int8x16_t *)v7;
          v23 = *((int8x16_t *)v7 + 1);
          v36.val[0] = (int8x16_t)*((_OWORD *)v7 + 2);
          v24 = *((_OWORD *)v7 + 3);
          v7 = (WTF *)((char *)v7 + 64);
          v25 = v24;
          v36.val[1] = 0uLL;
          v37.val[0] = v23;
          v35.val[1] = 0uLL;
          v26 = (char *)v22;
          vst2q_s8(v26, v35);
          v26 += 32;
          v37.val[1] = 0uLL;
          vst2q_s8(v26, v37);
          v27 = (char *)v22 + 64;
          vst2q_s8(v27, v36);
          v28 = (char *)v22 + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
          v22 = (WTF *)((char *)v22 + 128);
        }
        while (v22 != v11);
      }
    }
    else
    {
      HIDWORD(v31) = v8;
      v10 = (WTF *)v32;
      v11 = (WTF *)v32;
    }
    v12 = (WTF *)((char *)v10 + 2 * v8);
    while (v11 != v12)
    {
      v13 = *(unsigned __int8 *)v7;
      v7 = (WTF *)((char *)v7 + 1);
      *(_WORD *)v11 = v13;
      v11 = (WTF *)((char *)v11 + 2);
    }
    v7 = v30;
    v9 = HIDWORD(v31);
    v6 = *(_QWORD *)a3;
  }
  v33 = v7;
  v34 = v9;
  v29 = 0;
  if (v6)
  {
    v15 = *(_DWORD *)(v6 + 4);
    if (!v15)
      v7 = (WTF *)&v29;
    v14 = 2 * v15;
  }
  else
  {
    v14 = 0;
  }
  v17 = sqlite3_bind_blob(this[1], a2, v7, v14, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  v18 = v30;
  if (v32 != (_BYTE *)v30 && v30)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v18, v16);
  }
  return v17;
}

__n128 WebCore::CubicBezierTimingFunction::clone@<Q0>(__n128 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  __n128 result;
  __n128 v7;

  v4 = WTF::fastMalloc((WTF *)0x38);
  v5 = this[3].n128_u8[0];
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3347E18;
  result = this[1];
  v7 = this[2];
  *(__n128 *)(v4 + 16) = result;
  *(__n128 *)(v4 + 32) = v7;
  *(_BYTE *)(v4 + 48) = v5;
  *a2 = v4;
  return result;
}

_QWORD *WebCore::DOMGCOutputConstraint::executeImpl(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  JSC::Subspace **v4;
  JSC::Subspace **v5;
  JSC::Subspace *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v1 = *(_QWORD *)(result[5] + 1200);
  if (v1 != result[7])
  {
    result[7] = v1;
    v2 = result[6];
    v3 = *(unsigned int *)(v2 + 2844);
    if ((_DWORD)v3)
    {
      v4 = *(JSC::Subspace ***)(v2 + 2832);
      v5 = &v4[v3];
      do
      {
        v6 = *v4;
        v7 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(v7 + 8) = 1;
        v8 = (unsigned int *)(v7 + 8);
        *(_QWORD *)v7 = &off_1E3392810;
        *(_QWORD *)(v7 + 16) = v6;
        JSC::Subspace::parallelNotEmptyMarkedBlockSource(v6);
        *(_BYTE *)(v7 + 33) = 0;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        JSC::SlotVisitor::addParallelConstraintTask();
        result = (_QWORD *)v7;
        if (v7)
        {
          v10 = (unsigned int *)(v7 + 8);
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, (unsigned int *)(v7 + 8));
            result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          }
        }
        do
        {
          v13 = __ldaxr(v8);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v8));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)(v7 + 8));
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

_BYTE *WebCore::jsElementPrototypeFunction_setAttribute(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  JSC::JSGlobalObject *v6;
  WebCore::Element *v7;
  JSC::JSRopeString *v8;
  JSC::JSRopeString *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v23;
  _BOOL4 v24;
  char **v25;
  BOOL v26;
  JSC::VM *v27;
  JSC::JSRopeString *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  WTF::String *v34;
  int32x4_t v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  WTF *v42;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  _QWORD *v48;
  uint64_t v49;
  WTF::AtomStringImpl **v50;
  WTF::AtomStringImpl **v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  _QWORD *v55;
  uint64_t v56;
  WTF::AtomStringImpl **v57;
  WTF::AtomStringImpl **v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  JSValue v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  JSValue v69;
  WTF::AtomStringImpl *v70;
  WTF::AtomStringImpl *v71;
  int v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[40];
  uint64_t v80;
  JSC::JSGlobalObject *v81;
  int v82[2];
  WTF::StringImpl *v83;
  char v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  char v88;
  WTF::AtomStringImpl *v89;
  WTF::StringImpl *v90;
  int v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v74 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v74, "Element", "setAttribute");
  v6 = a2;
  v7 = *(WebCore::Element **)(v5 + 24);
  v77 = (WTF *)v79;
  v78 = 4;
  v79[32] = 0;
  v80 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v81 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v77;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v61.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v40 = JSC::VM::throwException((JSC::VM *)v4, this, v61);
    goto LABEL_62;
  }
  v8 = (JSC::JSRopeString *)*((_QWORD *)a2 + 6);
  *(_QWORD *)v82 = v8;
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (v9 = v8, *((_BYTE *)v8 + 5) != 2))
    v9 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)v82, this);
  v10 = (WTF::AtomStringImpl *)*((_QWORD *)v9 + 1);
  if ((v10 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(v9, this);
  }
  else
  {
    if (v10)
    {
      if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v10 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v10, a2);
        v10 = v89;
      }
      v11 = *((_QWORD *)v9 + 1);
      v85 = v10;
      if ((*(_BYTE *)(v11 + 16) & 0x10) != 0)
        goto LABEL_11;
      v46 = *((_QWORD *)this + 7);
      if (v10)
        *(_DWORD *)v10 += 2;
LABEL_83:
      __dmb(0xAu);
      v47 = (WTF::AtomStringImpl *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v10;
      v89 = v47;
      v48 = (_QWORD *)(v46 + 808);
      v49 = *(unsigned int *)(v46 + 820);
      if ((_DWORD)v49 == *(_DWORD *)(v46 + 816))
      {
        v51 = (WTF::AtomStringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v89);
        v49 = *(unsigned int *)(v46 + 820);
        v50 = (WTF::AtomStringImpl **)(*(_QWORD *)(v46 + 808) + 8 * v49);
        v47 = *v51;
      }
      else
      {
        v50 = (WTF::AtomStringImpl **)(*v48 + 8 * v49);
        v51 = &v89;
      }
      *v51 = 0;
      *v50 = v47;
      *(_DWORD *)(v46 + 820) = v49 + 1;
      v52 = v89;
      v89 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, a2);
        else
          *(_DWORD *)v52 -= 2;
      }
      goto LABEL_11;
    }
    v85 = 0;
    if ((MEMORY[0x10] & 0x10) == 0)
    {
      v10 = 0;
      v46 = *((_QWORD *)this + 7);
      goto LABEL_83;
    }
  }
LABEL_11:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v85;
    if (hasExceptionsAfterHandlingTraps)
    {
      v76 = 1;
      v85 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v40 = 0;
      v41 = 1;
      goto LABEL_61;
    }
  }
  else
  {
    v12 = v85;
  }
  v75 = v12;
  v76 = 0;
  v13 = *((_QWORD *)v6 + 7);
  LOBYTE(v82[0]) = 0;
  v84 = 0;
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    v85 = (WTF::StringImpl *)v13;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_118;
  }
  v14 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
  v15 = *(unsigned int *)(v14 + 0x4C);
  v16 = *(_DWORD *)(v14 + 0x4C) != 0;
  if ((_DWORD)v15)
  {
    v17 = 16 * v15;
    if ((char **)v17 != &WebCore::JSTrustedHTML::s_info)
    {
      do
      {
        v17 = *(_QWORD *)(v17 + 16);
        v16 = v17 != 0;
      }
      while ((char **)v17 != &WebCore::JSTrustedHTML::s_info && v17 != 0);
    }
  }
  if (v16)
  {
    v73 = *(WTF::AtomStringImpl **)(v13 + 24);
    if (v73)
    {
      ++*((_DWORD *)v73 + 2);
      v89 = v73;
      LODWORD(v90) = 0;
      std::optional<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>,void>((uint64_t)v82, (uint64_t)&v89);
      if ((_DWORD)v90 != -1)
        ((void (*)(WTF::StringImpl **, WTF::AtomStringImpl **))off_1E3273998[v90])(&v85, &v89);
      if (v84)
        goto LABEL_144;
      v14 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
    }
  }
  v19 = *(unsigned int *)(v14 + 76);
  v20 = *(_DWORD *)(v14 + 76) != 0;
  if ((_DWORD)v19)
  {
    v21 = 16 * v19;
    if ((char **)v21 != &WebCore::JSTrustedScript::s_info)
    {
      do
      {
        v21 = *(_QWORD *)(v21 + 16);
        v20 = v21 != 0;
      }
      while ((char **)v21 != &WebCore::JSTrustedScript::s_info && v21 != 0);
    }
  }
  if (!v20)
    goto LABEL_30;
  while (1)
  {
    v70 = *(WTF::AtomStringImpl **)(v13 + 24);
    if (!v70)
      goto LABEL_30;
    ++*((_DWORD *)v70 + 2);
    v89 = v70;
    LODWORD(v90) = 1;
    std::optional<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>,void>((uint64_t)v82, (uint64_t)&v89);
    if ((_DWORD)v90 != -1)
      ((void (*)(WTF::StringImpl **, WTF::AtomStringImpl **))off_1E3273998[v90])(&v85, &v89);
    if (!v84)
    {
LABEL_30:
      v23 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v24 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v25 = (char **)(16 * v23);
      if ((_DWORD)v23)
        v26 = v25 == &WebCore::JSTrustedScriptURL::s_info;
      else
        v26 = 1;
      if (!v26)
      {
        do
        {
          v25 = (char **)v25[2];
          v24 = v25 != 0;
        }
        while (v25 != &WebCore::JSTrustedScriptURL::s_info && v25 != 0);
      }
      if (v24)
      {
        v71 = *(WTF::AtomStringImpl **)(v13 + 24);
        if (v71)
        {
          ++*((_DWORD *)v71 + 2);
          v89 = v71;
          LODWORD(v90) = 2;
          std::optional<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::RefPtr<WebCore::TrustedScriptURL,WTF::RawPtrTraits<WebCore::TrustedScriptURL>,WTF::DefaultRefDerefTraits<WebCore::TrustedScriptURL>>,WTF::AtomString>,void>((uint64_t)v82, (uint64_t)&v89);
          if ((_DWORD)v90 != -1)
            ((void (*)(WTF::StringImpl **, WTF::AtomStringImpl **))off_1E3273998[v90])(&v85, &v89);
          if (v84)
            goto LABEL_144;
        }
      }
      v85 = (WTF::StringImpl *)v13;
      v27 = (JSC::VM *)*((_QWORD *)this + 7);
      v28 = (JSC::JSRopeString *)v13;
      if (*(_BYTE *)(v13 + 5) != 2)
LABEL_118:
        v28 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v85, this);
      v29 = (WTF::AtomStringImpl *)*((_QWORD *)v28 + 1);
      if ((v29 & 1) != 0)
      {
        JSC::JSRopeString::resolveRopeToAtomString(v28, this);
        goto LABEL_42;
      }
      if (v29)
      {
        if ((*((_BYTE *)v29 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v29 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v29, a2);
          v29 = v89;
        }
        v30 = *((_QWORD *)v28 + 1);
        v87 = v29;
        if ((*(_BYTE *)(v30 + 16) & 0x10) != 0)
          goto LABEL_42;
        v53 = *((_QWORD *)this + 7);
        if (v29)
          *(_DWORD *)v29 += 2;
      }
      else
      {
        v87 = 0;
        if ((MEMORY[0x10] & 0x10) != 0)
          goto LABEL_42;
        v29 = 0;
        v53 = *((_QWORD *)this + 7);
      }
      __dmb(0xAu);
      v54 = (WTF::AtomStringImpl *)*((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = v29;
      v89 = v54;
      v55 = (_QWORD *)(v53 + 808);
      v56 = *(unsigned int *)(v53 + 820);
      if ((_DWORD)v56 == *(_DWORD *)(v53 + 816))
      {
        v60 = v53;
        v58 = (WTF::AtomStringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v56 + 1, (unint64_t)&v89);
        v53 = v60;
        v56 = *(unsigned int *)(v60 + 820);
        v57 = (WTF::AtomStringImpl **)(*(_QWORD *)(v60 + 808) + 8 * v56);
        v54 = *v58;
      }
      else
      {
        v57 = (WTF::AtomStringImpl **)(*v55 + 8 * v56);
        v58 = &v89;
      }
      *v58 = 0;
      *v57 = v54;
      *(_DWORD *)(v53 + 820) = v56 + 1;
      v59 = v89;
      v89 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, a2);
        else
          *(_DWORD *)v59 -= 2;
      }
LABEL_42:
      if (*((_DWORD *)v27 + 20))
      {
        v67 = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
        v31 = v87;
        if (v67)
        {
          LODWORD(v83) = 1;
          v87 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v66);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = 1;
          v33 = 1;
          goto LABEL_45;
        }
      }
      else
      {
        v31 = v87;
      }
      v32 = 0;
      v33 = 0;
      LODWORD(v83) = 0;
      *(_QWORD *)v82 = 0;
      v90 = v31;
      v91 = 3;
LABEL_45:
      v92 = v32;
      ((void (*)(WTF::StringImpl **, int *))off_1E32712B8[v33])(&v85, v82);
      goto LABEL_46;
    }
LABEL_144:
    LOBYTE(v90) = 0;
    v91 = -1;
    v72 = (int)v83;
    if ((_DWORD)v83 == -1)
    {
      v92 = 0;
    }
    else
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **, int *))off_1E32739D8[v83])(&v85, &v90, v82);
      v91 = v72;
      v92 = 0;
      if (v84 && (_DWORD)v83 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E3273998[v83])(&v85, v82);
    }
LABEL_46:
    v36 = v92;
    if (v92)
    {
      v40 = 0;
      goto LABEL_58;
    }
    if (!v76)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v37 = v75;
  v75 = 0;
  v87 = v37;
  LOBYTE(v85) = 0;
  LODWORD(v86) = -1;
  v38 = v91;
  if (v91 != -1)
  {
    ((void (*)(int *, WTF::StringImpl **, WTF::StringImpl **))off_1E32739D8[v91])(v82, &v85, &v90);
    LODWORD(v86) = v38;
  }
  WebCore::Element::setAttribute(v7, (WTF::AtomString *)&v87, (uint64_t)&v85, v34, (uint64_t)v82, v35);
  if ((_DWORD)v86 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E3273998[v86])(&v88, &v85);
  v39 = v87;
  v87 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, a2);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (v84)
  {
    a2 = (JSC::JSGlobalObject *)LOBYTE(v82[0]);
    LOBYTE(v85) = v82[0];
    v68 = v83;
    v86 = v83;
    if (!*(_QWORD *)(v4 + 16))
    {
      v69.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v82[0]), (JSC::JSGlobalObject *)&v86);
      JSC::VM::throwException((JSC::VM *)v4, this, v69);
      v68 = v86;
    }
    v86 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, a2);
      else
        *(_DWORD *)v68 -= 2;
    }
    v40 = 0;
  }
  else
  {
    v40 = 10;
  }
  v36 = v92;
LABEL_58:
  if (v36 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E32739F8[v36])(v82, &v90);
  v41 = v76;
  if (v76 != -1)
LABEL_61:
    ((void (*)(WTF::AtomStringImpl **, WTF::StringImpl **))off_1E32712B8[v41])(&v89, &v75);
LABEL_62:
  if (HIDWORD(v78))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v77, v81);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v80;
    if (HIDWORD(v78))
    {
      v62 = v77;
      v63 = 8 * HIDWORD(v78);
      do
      {
        v64 = *(_QWORD *)v62;
        *(_QWORD *)v62 = 0;
        if (v64)
        {
          if (*(_DWORD *)(v64 + 24) == 2)
          {
            if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v64, a2);
          }
          else
          {
            *(_DWORD *)(v64 + 24) -= 2;
          }
        }
        v62 = (WTF *)((char *)v62 + 8);
        v63 -= 8;
      }
      while (v63);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v80;
  }
  v42 = v77;
  if (v79 != (_BYTE *)v77 && v77 != 0)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    WTF::fastFree(v42, a2);
  }
  return (_BYTE *)v40;
}

WTF::StringImpl *WebCore::Element::setAttribute@<X0>(WebCore::Element *this@<X0>, const WTF::AtomString *a2@<X1>, const WTF::AtomString *a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  _DWORD *v6;
  WTF::StringImpl *result;
  _DWORD *v8;
  int v9;
  char v10;

  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v6 += 2;
  v8 = v6;
  v9 = 3;
  result = WebCore::Element::setAttribute(this, a2, (uint64_t)&v8, a4, a5, a6);
  if (v9 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v9])(&v10, &v8);
  return result;
}

void WebCore::HTMLScriptElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v6;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::srcAttr)
  {
    if ((*(_WORD *)(a1 + 133) & 7) == 0
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 22) & 8) != 0
      && *a4)
    {
      if (*((_DWORD *)*a4 + 1))
      {
        v6 = 0;
        WebCore::ScriptElement::prepareScript(a1 + 112, (const WebCore::ContainerNode *)&v6);
      }
    }
  }
  else if (*(_QWORD *)a2 == WebCore::HTMLNames::asyncAttr)
  {
    *(_WORD *)(a1 + 133) &= ~0x100u;
  }
  else
  {
    WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  }
}

void WebCore::WindowEventLoop::~WindowEventLoop(WebCore::WindowEventLoop *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WindowEventLoop::~WindowEventLoop(this, a2);
  WTF::fastFree(v2, v3);
}

{
  const WTF::StringImpl **v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::MutationObserver **v15;
  WebCore::MutationObserver **v16;
  void *v17;
  void *v18;
  WebCore::MicrotaskQueue *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;

  v3 = (const WTF::StringImpl **)((char *)this + 136);
  if (*((_QWORD *)this + 17))
  {
    WebCore::windowEventLoopMap(this);
    if (!WTF::HashMap<WTF::String,WebCore::WindowEventLoop *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WindowEventLoop *>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(v3, v25, v26))
    {
      __break(0xC471u);
      JUMPOUT(0x19443F004);
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v4)
  {
    v5 = *((unsigned int *)v4 + 3);
    if ((_DWORD)v5)
    {
      v28 = *(WTF **)v4;
      v29 = 8 * v5;
      do
      {
        v30 = v4;
        v31 = *(_QWORD *)v28;
        *(_QWORD *)v28 = 0;
        if (v31)
        {
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31, a2);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
        }
        v28 = (WTF *)((char *)v28 + 8);
        v29 -= 8;
        v4 = v30;
      }
      while (v29);
    }
    v6 = *(WTF **)v4;
    if ((WTF *)((char *)v4 + 16) != *(WTF **)v4 && v6 != 0)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      v27 = v4;
      WTF::fastFree(v6, a2);
      v4 = v27;
    }
    WTF::fastFree(v4, a2);
  }
  v8 = *((_QWORD *)this + 37);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = (unsigned int **)(v8 + 16 * i);
        v12 = *v11;
        if (*v11 != (unsigned int *)-1)
        {
          *v11 = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v12);
              WTF::fastFree((WTF *)v12, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v15 = (WebCore::MutationObserver **)*((_QWORD *)this + 36);
  if (v15)
    WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(v15, a2);
  v16 = (WebCore::MutationObserver **)*((_QWORD *)this + 35);
  if (v16)
    WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(v16, a2);
  WTF::Vector<WebCore::GCReachableRef<WebCore::HTMLSlotElement,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, a2);
  WebCore::EventLoopTaskGroup::~EventLoopTaskGroup((WebCore::WindowEventLoop *)((char *)this + 208), v17);
  v19 = (WebCore::MicrotaskQueue *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v19)
  {
    WebCore::MicrotaskQueue::~MicrotaskQueue(v19, v18);
    WTF::fastFree(v20, v21);
  }
  *((_QWORD *)this + 18) = off_1E31F7378;
  v22 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  WebCore::TimerBase::~TimerBase((WebCore::WindowEventLoop *)((char *)this + 144));
  v24 = *v3;
  *v3 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  WebCore::EventLoop::~EventLoop(this, v23);
}

void WebCore::EventLoop::~EventLoop(WebCore::EventLoop *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t m;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t n;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *(_QWORD *)this = off_1E33A4C10;
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v17 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v17)
    {
      for (i = 0; i != v17; ++i)
      {
        v19 = *(unsigned int **)(v3 + 8 * i);
        if (v19 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              v47 = v3;
              v22 = i;
              WTF::fastFree((WTF *)v19, a2);
              i = v22;
              v3 = v47;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 11);
  if (v4)
  {
    v23 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v23)
    {
      for (j = 0; j != v23; ++j)
      {
        v25 = *(unsigned int **)(v4 + 8 * j);
        if (v25 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * j) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              v48 = v4;
              v28 = j;
              WTF::fastFree((WTF *)v25, a2);
              j = v28;
              v4 = v48;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v29 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v29)
    {
      for (k = 0; k != v29; ++k)
      {
        v31 = *(unsigned int **)(v5 + 8 * k);
        if (v31 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * k) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              v49 = v5;
              v34 = k;
              WTF::fastFree((WTF *)v31, a2);
              k = v34;
              v5 = v49;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v35 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v35)
    {
      for (m = 0; m != v35; ++m)
      {
        v37 = *(unsigned int **)(v6 + 8 * m);
        if (v37 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * m) = 0;
          if (v37)
          {
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              atomic_store(1u, v37);
              v50 = v6;
              v40 = m;
              WTF::fastFree((WTF *)v37, a2);
              m = v40;
              v6 = v50;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    v41 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v41)
    {
      for (n = 0; n != v41; ++n)
      {
        v43 = *(unsigned int **)(v7 + 8 * n);
        if (v43 != (unsigned int *)-1)
        {
          *(_QWORD *)(v7 + 8 * n) = 0;
          if (v43)
          {
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              atomic_store(1u, v43);
              v51 = v7;
              v46 = n;
              WTF::fastFree((WTF *)v43, a2);
              n = v46;
              v7 = v51;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 3);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::MicrotaskQueue::~MicrotaskQueue(WebCore::MicrotaskQueue *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  void *v20;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v19 = (WTF *)MEMORY[0x19AEA3AF8]();
      WTF::fastFree(v19, v20);
    }
  }
  v14 = *((unsigned int *)this + 5);
  if ((_DWORD)v14)
  {
    v15 = (uint64_t *)*((_QWORD *)this + 1);
    v16 = 8 * v14;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v18 = (WTF *)*((_QWORD *)this + 1);
  if (v18)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v18, a2);
  }
}

WebCore::ContentFilter *WebCore::DocumentLoader::detachFromFrame(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  void *v14;
  uint64_t v15;
  WebCore::CachedResource *v16;
  uint64_t v17;
  WebCore::CachedResource *v18;
  WebCore::ContentFilter *result;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  WTF *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[12];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v5 + 8));
        if (v40)
          v8 = v39;
        else
          v8 = 0;
        v7 = *(_QWORD *)(v6 + 32);
        LODWORD(v5) = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6;
      }
      else
      {
        LODWORD(v5) = 0;
        v7 = 0;
        v8 = 0;
      }
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v6 = 0;
    }
    *(_DWORD *)v46 = 134219008;
    *(_QWORD *)&v46[4] = a1;
    v47 = 2048;
    v48 = v8;
    v49 = 2048;
    v50 = v7;
    v51 = 1024;
    v52 = v5;
    v53 = 2048;
    v54 = v6;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::DocumentLoader::detachFromFrame: m_frame=%p", v46, 0x30u);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_57;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
LABEL_57:
    v13 = 1;
    goto LABEL_11;
  }
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = 0;
LABEL_11:
  ++*(_DWORD *)(a1 + 24);
  WebCore::DocumentLoader::stopLoading((WebCore::DocumentLoader *)a1);
  v15 = *(_QWORD *)(a1 + 80);
  if (v15)
  {
    v16 = *(WebCore::CachedResource **)(v15 + 8);
    if (v16)
    {
      if (WebCore::CachedResource::hasClient(v16, (const WebCore::CachedResourceClient *)(a1 + 56)))
      {
        v17 = *(_QWORD *)(a1 + 80);
        if (v17)
          v18 = *(WebCore::CachedResource **)(v17 + 8);
        else
          v18 = 0;
        WebCore::CachedResource::removeClient(v18, (unsigned int **)(a1 + 56));
      }
    }
  }
  result = *(WebCore::ContentFilter **)(a1 + 2888);
  if (result)
    result = WebCore::ContentFilter::stopFilteringMainResource(result);
  v20 = *(uint64_t **)(a1 + 2872);
  v21 = *v20;
  *v20 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v41 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v41)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v41));
      v42 = *(WTF **)(v21 + 16);
      if (v42)
      {
        *(_QWORD *)(v21 + 16) = 0;
        *(_DWORD *)(v21 + 24) = 0;
        WTF::fastFree(v42, v14);
      }
      result = (WebCore::ContentFilter *)WTF::fastFree((WTF *)v21, v14);
    }
  }
  if (*(_BYTE *)(a1 + 3549) || *(_BYTE *)(a1 + 3550))
  {
    v36 = *(_QWORD *)(a1 + 16);
    if (!v36 || (v37 = *(_QWORD *)(v36 + 8)) == 0 || (v38 = *(_QWORD *)(v37 + 280)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19443F578);
    }
    result = (WebCore::ContentFilter *)WebCore::PolicyChecker::stopCheck(*(WebCore::PolicyChecker **)(v38 + 24));
    *(_WORD *)(a1 + 3549) = 0;
  }
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v25 = *(_QWORD **)(v24 + 8);
    if (v25)
    {
      v26 = *(void **)(a1 + 2528);
      *(_QWORD *)(a1 + 2528) = 0;
      if (v26)
      {
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(v25[35] + 16) + 1232))(*(_QWORD *)(v25[35] + 16), v26, a2);
        v25 = *(_QWORD **)(a1 + 16);
        if (v25)
          v25 = (_QWORD *)v25[1];
      }
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v44 = v25[3];
        if (v44)
        {
          v45 = *(_QWORD *)(v44 + 8);
          if (v45)
            WebCore::InspectorInstrumentation::loaderDetachedFromFrameImpl(*(_QWORD *)(*(_QWORD *)(v45 + 80) + 8), a1);
        }
      }
      result = *(WebCore::ContentFilter **)(a1 + 16);
      if (!result)
      {
        *(_QWORD *)(a1 + 16) = 0;
        goto LABEL_39;
      }
      v28 = *((_QWORD *)result + 1);
      if (v28)
      {
        WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(v28 + 248, (_QWORD *)a1);
        result = *(WebCore::ContentFilter **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        if (!result)
          goto LABEL_39;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = 0;
      }
      do
      {
        v29 = __ldaxr((unsigned int *)result);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)result));
      if (!v30)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (WebCore::ContentFilter *)WTF::fastFree(result, v26);
      }
      v31 = *(_QWORD *)(a1 + 16);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
          result = (WebCore::ContentFilter *)WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>(v32 + 248, (_QWORD *)a1, (uint64_t)v46);
      }
    }
  }
LABEL_39:
  if (*(_DWORD *)(a1 + 24) == 1)
    result = (WebCore::ContentFilter *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  else
    --*(_DWORD *)(a1 + 24);
  if ((v13 & 1) == 0)
  {
    v33 = (unsigned int *)(v10 + 8);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v43 = off_1E31FE290;
      v43[1] = v33;
      *(_QWORD *)v46 = v43;
      WTF::ensureOnMainThread();
      result = *(WebCore::ContentFilter **)v46;
      *(_QWORD *)v46 = 0;
      if (result)
        return (WebCore::ContentFilter *)(*(uint64_t (**)(WebCore::ContentFilter *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::CSSFontSelector::~CSSFontSelector(WebCore::CSSFontSelector *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSFontSelector::~CSSFontSelector(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::CSSFontFaceSet *v23;
  WebCore::FontFaceSet *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  bmalloc::api *v35;
  void *v36;
  WTF *v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  _DWORD **v45;
  _DWORD *v46;
  uint64_t v47;
  WebCore::CSSFontFace **v48;
  WebCore::CSSFontFace *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  char v59;

  *((_BYTE *)this + 174) = 1;
  v3 = (WebCore *)WebCore::CSSFontFaceSet::clear(*((WebCore::CSSFontFaceSet **)this + 12), a2);
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 13) = 0;
    v3 = (WebCore *)WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(v3);
  if (!*(_BYTE *)(v7 + 24))
  {
    v8 = *(_QWORD *)(v7 + 80);
    if (v8
      || (WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v7), (v8 = *(_QWORD *)(v7 + 80)) != 0))
    {
      v9 = *(_DWORD *)(v8 + 68);
      v10 = *(_DWORD *)(v8 + 64) + 1;
      *(_DWORD *)(v8 + 64) = v10;
      if (v10 > v9)
      {
        _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore12FontSelectorES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v8 + 56), &v59);
        v39 = 0;
        *(_DWORD *)(v8 + 64) = 0;
        v40 = *(_QWORD *)(v8 + 56);
        if (v40)
        {
          v39 = *(_DWORD *)(v40 - 12);
          if (v39 > 0x7FFFFFFE)
            v39 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v8 + 68) = 2 * v39;
      }
      v4 = (_QWORD *)*((_QWORD *)this + 2);
      if (v4 && v4[1])
        WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(v8 + 56), (WTF *)v4);
    }
  }
  v11 = *((unsigned int *)this + 47);
  if ((_DWORD)v11)
  {
    v41 = (WTF::StringImpl **)*((_QWORD *)this + 22);
    v42 = 8 * v11;
    do
    {
      v43 = *v41;
      *v41 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)v43 -= 2;
      }
      ++v41;
      v42 -= 8;
    }
    while (v42);
  }
  v12 = (WTF *)*((_QWORD *)this + 22);
  if (v12)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 18);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 18) = 0;
  }
  v18 = *((_QWORD *)this + 17);
  if (v18)
  {
    v44 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v44)
    {
      v45 = (_DWORD **)*((_QWORD *)this + 17);
      do
      {
        v46 = *v45;
        if (*v45 != (_DWORD *)-1)
        {
          *v45 = 0;
          if (v46)
          {
            if (*v46 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v46, (WTF::StringImpl *)v4);
            else
              --*v46;
          }
        }
        ++v45;
        --v44;
      }
      while (v44);
    }
    WTF::fastFree((WTF *)(v18 - 16), v4);
  }
  v19 = *((_QWORD *)this + 16);
  if (v19)
  {
    v47 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v47)
    {
      v48 = (WebCore::CSSFontFace **)*((_QWORD *)this + 16);
      do
      {
        v49 = *v48;
        if (*v48 != (WebCore::CSSFontFace *)-1)
        {
          *v48 = 0;
          if (v49)
          {
            if (*((_DWORD *)v49 + 2) == 1)
            {
              WebCore::CSSFontFace::~CSSFontFace(v49);
              WTF::fastFree(v50, v51);
            }
            else
            {
              --*((_DWORD *)v49 + 2);
            }
          }
        }
        ++v48;
        --v47;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)(v19 - 16), v4);
  }
  v20 = *((_QWORD *)this + 15);
  if (v20)
  {
    v52 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v52)
    {
      v53 = *((_QWORD *)this + 15);
      do
      {
        v54 = *(WTF::StringImpl **)v53;
        if (*(_QWORD *)v53 != -1)
        {
          v55 = *(_DWORD **)(v53 + 8);
          *(_QWORD *)(v53 + 8) = 0;
          if (v55)
          {
            if (v55[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
              v54 = *(WTF::StringImpl **)v53;
            }
            else
            {
              --v55[2];
            }
          }
          *(_QWORD *)v53 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v54 -= 2;
          }
        }
        v53 += 16;
        --v52;
      }
      while (v52);
    }
    WTF::fastFree((WTF *)(v20 - 16), v4);
  }
  v21 = *((_QWORD *)this + 14);
  if (v21)
    WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>>,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(v21, v4);
  v22 = *((_QWORD *)this + 13);
  if (v22)
    WTF::fastFree((WTF *)(v22 - 16), v4);
  v23 = (WebCore::CSSFontFaceSet *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 4) == 1)
    {
      WebCore::CSSFontFaceSet::~CSSFontFaceSet(v23, v4);
      WTF::fastFree(v37, v38);
    }
    else
    {
      --*((_DWORD *)v23 + 4);
    }
  }
  v24 = (WebCore::FontFaceSet *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) == 1)
    {
      WebCore::FontFaceSet::~FontFaceSet(v24, v4);
      bmalloc::api::isoDeallocate(v35, v36);
    }
    else
    {
      --*((_DWORD *)v24 + 4);
    }
  }
  v25 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v4);
    }
  }
  v28 = (WTF *)*((_QWORD *)this + 8);
  if (v28)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v28, v4);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::CSSFontSelector *)((char *)this + 40), v4);
  v30 = *((_QWORD *)this + 4);
  if (v30)
  {
    *(_QWORD *)(v30 + 8) = 0;
    v56 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v56)
    {
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        atomic_store(1u, v56);
        WTF::fastFree((WTF *)v56, v29);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v31 = *((_QWORD *)this + 2);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 0;
    v32 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v29);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::EventLoopTaskGroup::~EventLoopTaskGroup(WebCore::EventLoopTaskGroup *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t i;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (v4)
    {
      if (WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTaskGroup>((uint64_t)(v4 + 9), this))WebCore::EventLoop::stopAssociatedGroupsIfNecessary(v4, a2);
    }
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v12 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v12)
    {
      for (i = 0; i != v12; ++i)
      {
        v14 = *(unsigned int **)(v5 + 8 * i);
        if (v14 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              v17 = i;
              v18 = v12;
              WTF::fastFree((WTF *)v14, a2);
              i = v17;
              v12 = v18;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v9 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

_QWORD *WebCore::EventLoop::stopAssociatedGroupsIfNecessary(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v2 = this[9];
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v5 = this[9];
    goto LABEL_71;
  }
  v31 = 8 * v4;
  v5 = this[9];
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 8;
    v31 -= 8;
    if (!v31)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  LODWORD(v4) = *(_DWORD *)(v2 - 4);
LABEL_71:
  v6 = v2 + 8 * v4;
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v39 = v5 + 8;
      v5 = v3;
      if (v39 != v3)
      {
        v5 = v39;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v7 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v7 = 0;
  while (v5 != v7)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 40) != 2)
      return this;
    v8 = v5 + 8;
    v9 = v3;
    if (v8 != v3)
    {
      v9 = v8;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v3)
        {
          v9 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v9 != v6)
    {
      v5 = v9;
      if (!*(_QWORD *)(*(_QWORD *)v9 + 8))
      {
        while (1)
        {
          v38 = v5 + 8;
          v5 = v3;
          if (v38 != v3)
          {
            v5 = v38;
            while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
            {
              v5 += 8;
              if (v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*(_QWORD *)v5 + 8))
            goto LABEL_19;
        }
        v5 = v6;
      }
    }
LABEL_19:
    ++*((_DWORD *)this + 20);
  }
  v10 = 0;
  v11 = 0;
  this[9] = 0;
  v12 = this[10];
  v47[0] = v2;
  v47[1] = v12;
  this[9] = 0;
  this[10] = 0;
  if (v2)
  {
    v11 = *(unsigned int *)(v2 - 4);
    v13 = v2 + 8 * v11;
    if (*(_DWORD *)(v2 - 12))
    {
      v10 = v2;
      if ((_DWORD)v11)
      {
        v32 = 8 * v11;
        v10 = v2;
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 += 8;
          v32 -= 8;
          if (!v32)
          {
            v10 = v13;
            goto LABEL_22;
          }
        }
      }
      goto LABEL_22;
    }
    v10 = v2 + 8 * v11;
  }
  v13 = v2 + 8 * v11;
LABEL_22:
  v42 = v47;
  v43 = v10;
  v44 = v13;
  if (v2)
  {
    v15 = *(unsigned int *)(v2 - 4);
    v14 = v2 + 8 * v15;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v45 = v14;
  v46 = v2 + 8 * v15;
  if (v10 != v14)
  {
    if (!*(_QWORD *)(*(_QWORD *)v10 + 8))
    {
      v40 = v10;
      do
      {
        v41 = v40 + 8;
        v40 = v13;
        if (v41 != v13)
        {
          v40 = v41;
          while ((unint64_t)(*(_QWORD *)v40 + 1) <= 1)
          {
            v40 += 8;
            if (v40 == v13)
            {
              v40 = v13;
              break;
            }
          }
        }
        v10 = v14;
        if (v40 == v14)
          break;
        v10 = v40;
      }
      while (!*(_QWORD *)(*(_QWORD *)v40 + 8));
    }
    v43 = v10;
  }
  if (v2)
    v16 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v16 = 0;
  if (v10 == v16)
    goto LABEL_30;
  do
  {
    v17 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    *(_BYTE *)(v17 + 40) = 3;
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 24);
        v21 = *(unsigned int *)(v19 + 36);
        v22 = (char *)(v20 + 8 * v21);
        v23 = 0;
        if ((_DWORD)v21)
        {
          v24 = *(_QWORD *)(v19 + 24);
          v25 = (char *)(v20 + 8 * v21);
          v26 = v25;
          while (1)
          {
            v27 = *(_QWORD *)v20;
            v28 = *(_QWORD *)(*(_QWORD *)v20 + 16);
            if (!v28 || *(_QWORD *)(v28 + 8) != v17)
              goto LABEL_38;
            v29 = (char *)v20;
            if (v26 != (char *)(*(_QWORD *)(v19 + 24) + 8 * *(unsigned int *)(v19 + 36)))
            {
              if ((char *)v20 != v25)
              {
                memmove(v26, v25, v24 - (_QWORD)v25);
                v29 = &v26[v24 - (_QWORD)v25];
                v27 = *(_QWORD *)v20;
                *(_QWORD *)v20 = 0;
                v25 = (char *)(v20 + 8);
                if (!v27)
                  goto LABEL_47;
                goto LABEL_46;
              }
              v29 = v26;
            }
            *(_QWORD *)v20 = 0;
            v25 = (char *)(v20 + 8);
LABEL_46:
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
LABEL_47:
            ++v23;
            v26 = v29;
LABEL_38:
            v20 += 8;
            v24 += 8;
            if (v20 >= (unint64_t)v22)
            {
              v20 = *(_QWORD *)(v19 + 24);
              LODWORD(v21) = *(_DWORD *)(v19 + 36);
              v22 = v26;
              goto LABEL_48;
            }
          }
        }
        v25 = (char *)(v20 + 8 * v21);
LABEL_48:
        v30 = (char *)(v20 + 8 * v21);
        if (v25 != v30)
        {
          memmove(v22, v25, v30 - v25);
          LODWORD(v21) = *(_DWORD *)(v19 + 36);
        }
        *(_DWORD *)(v19 + 36) = v21 - v23;
      }
    }
    this = WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v42);
    v10 = v43;
  }
  while (v43 != v16);
  v2 = v47[0];
LABEL_30:
  if (v2)
  {
    v33 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v33)
    {
      for (i = 0; i != v33; ++i)
      {
        v35 = *(unsigned int **)(v2 + 8 * i);
        if (v35 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, a2);
            }
          }
        }
      }
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTaskGroup>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  WTF *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v4 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v5 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v6 = v5;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v6;
      goto LABEL_6;
    }
    v9 = *(unsigned int *)(v4 - 4);
    if (!(_DWORD)v9)
      goto LABEL_22;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v4 + 8 * v11;
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        v22 = a2;
        v24 = a1;
        v19 = v4;
        v20 = v10;
        v18 = v11;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)(v4 + 8 * v11), a2);
        v11 = v18;
        v4 = v19;
        a2 = v22;
        a1 = v24;
        v10 = v20 + 1;
      }
    }
    while ((unint64_t)v11--);
    v4 = *(_QWORD *)a1;
    if (v10)
    {
      *(_DWORD *)(v4 - 16) += v10;
      v16 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v10;
      v4 = *(_QWORD *)a1;
    }
    if (!v4)
      goto LABEL_3;
    v14 = *(_DWORD *)(v4 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v14)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v21 = a2;
      v23 = a1;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v21;
      a1 = v23;
      v4 = *(_QWORD *)v23;
      *(_DWORD *)(v23 + 8) = 0;
      if (!v4)
      {
        v5 = 0;
        goto LABEL_4;
      }
    }
    v5 = *(_DWORD *)(v4 - 12);
    v6 = 0x7FFFFFFF;
    if (v5 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v7 = (WTF *)*a2;
  if (v7 && *((_QWORD *)v7 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v7);
  else
    return 0;
}

void WebCore::CSSFontFaceSet::~CSSFontFaceSet(WebCore::CSSFontFaceSet *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t j;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WebCore::CSSFontFace *v44;
  WTF *v45;
  void *v46;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v36 = (uint64_t *)*((_QWORD *)this + 3);
    v37 = 8 * v3;
    do
    {
      v38 = *v36++;
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v38 + 96, this);
      v37 -= 8;
    }
    while (v37);
  }
  v4 = *((_QWORD *)this + 6);
  if (!v4)
  {
    v5 = 0;
    LODWORD(v6) = 0;
LABEL_4:
    v7 = v4 + 24 * v6;
    goto LABEL_5;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = v4 + 24 * v6;
  if (!*(_DWORD *)(v4 - 12))
  {
    v5 = v4 + 24 * v6;
    goto LABEL_4;
  }
  v5 = *((_QWORD *)this + 6);
  if ((_DWORD)v6)
  {
    v39 = 24 * v6;
    v5 = *((_QWORD *)this + 6);
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 24;
      v39 -= 24;
      if (!v39)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_5:
  if (v4)
    v8 = v4 + 24 * *(unsigned int *)(v4 - 4);
  else
    v8 = 0;
  while (v5 != v8)
  {
    v31 = *(unsigned int *)(v5 + 20);
    if ((_DWORD)v31)
    {
      v32 = *(uint64_t **)(v5 + 8);
      v33 = 8 * v31;
      do
      {
        v34 = *v32++;
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v34 + 96, this);
        v33 -= 8;
      }
      while (v33);
    }
    v35 = v5 + 24;
    v5 = v7;
    if (v35 != v7)
    {
      v5 = v35;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 24;
        if (v5 == v7)
        {
          v5 = v7;
          break;
        }
      }
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((_QWORD *)this + 13);
  if (v12)
  {
    v21 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v23 = *(unsigned int **)(v12 + 8 * i);
        if (v23 != (unsigned int *)-1)
        {
          *(_QWORD *)(v12 + 8 * i) = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v13 = *((_QWORD *)this + 11);
  if (v13)
  {
    v26 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v26)
    {
      for (j = 0; j != v26; ++j)
      {
        v28 = *(unsigned int **)(v13 + 8 * j);
        if (v28 != (unsigned int *)-1)
        {
          *(_QWORD *)(v13 + 8 * j) = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  v14 = *((_QWORD *)this + 8);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), a2);
  v15 = *((_QWORD *)this + 7);
  if (v15)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, a2);
  v16 = *((_QWORD *)this + 6);
  if (v16)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, a2);
  v17 = *((_QWORD *)this + 5);
  if (v17)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, a2);
  v18 = *((unsigned int *)this + 9);
  v19 = (WTF *)*((_QWORD *)this + 3);
  if ((_DWORD)v18)
  {
    v43 = 8 * v18;
    do
    {
      v44 = *(WebCore::CSSFontFace **)v19;
      *(_QWORD *)v19 = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 2) == 1)
        {
          WebCore::CSSFontFace::~CSSFontFace(v44);
          WTF::fastFree(v45, v46);
        }
        else
        {
          --*((_DWORD *)v44 + 2);
        }
      }
      v19 = (WTF *)((char *)v19 + 8);
      v43 -= 8;
    }
    while (v43);
    v19 = (WTF *)*((_QWORD *)this + 3);
  }
  if (v19)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v19, a2);
  }
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v40 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v40)
    {
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSFontFaceSet::~CSSFontFaceSet(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSFontFaceSet::clear(WebCore::CSSFontFaceSet *this, void *a2)
{
  WebCore::CSSFontFace *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  v3 = (WebCore::CSSFontFaceSet *)((char *)this + 24);
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  v5 = *((unsigned int *)this + 9);
  if ((_DWORD)v5)
  {
    v10 = 8 * v5;
    do
    {
      v11 = *v4++;
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v11 + 96, this);
      v10 -= 8;
    }
    while (v10);
  }
  if (*((_DWORD *)this + 8))
  {
    if (*((_DWORD *)this + 9))
      WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v3);
    v12 = *(WTF **)v3;
    if (*(_QWORD *)v3)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v12, a2);
    }
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 5) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 6) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
  }
  result = *((_QWORD *)this + 7);
  if (result)
  {
    *((_QWORD *)this + 7) = 0;
    result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  v9 = *((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 8) = 0;
    result = WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 1;
  return result;
}

uint64_t WTF::Vector<WebCore::GCReachableRef<WebCore::HTMLSlotElement,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v10 = v8;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v10))*(_QWORD *)(v8 + 16) &= ~0x4000000000000uLL;
        v9 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
      }
      else
      {
        *(_QWORD *)v6 = 0;
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::DataRef<WebCore::StyleBoxData>::access(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  int *v8;
  int v9;
  int *v10;
  unsigned int v11;
  int v12;
  int *v13;
  unsigned int v14;
  int v15;
  int *v16;
  unsigned int v17;
  int v18;
  int *v19;
  unsigned int v20;
  int v21;
  int *v22;
  unsigned int v23;
  int v24;
  int *v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  v5 = WTF::fastMalloc((WTF *)0x48);
  v2 = v5;
  *(_QWORD *)v5 = 1;
  *(_WORD *)(v5 + 9) = 0;
  v7 = *(unsigned __int8 *)(v1 + 8);
  *(_BYTE *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 9) = *(_BYTE *)(v1 + 9);
  if (v7 <= 0xD)
  {
    v8 = (int *)(v5 + 4);
    v9 = 1 << v7;
    if ((v9 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 10) = *(_BYTE *)(v1 + 10);
      *v8 = *(_DWORD *)(v1 + 4);
    }
    else if ((v9 & 0x3003) != 0)
    {
      *v8 = 0;
    }
    else
    {
      *v8 = *(_DWORD *)(v1 + 4);
      WebCore::Length::ref(v8);
    }
  }
  *(_DWORD *)(v2 + 12) = 0;
  v10 = (int *)(v2 + 12);
  *(_WORD *)(v2 + 17) = 0;
  v11 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v2 + 16) = v11;
  *(_BYTE *)(v2 + 17) = *(_BYTE *)(v1 + 17);
  if (v11 <= 0xD)
  {
    v12 = 1 << v11;
    if ((v12 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 18) = *(_BYTE *)(v1 + 18);
      *v10 = *(_DWORD *)(v1 + 12);
    }
    else if ((v12 & 0x3003) != 0)
    {
      *v10 = 0;
    }
    else
    {
      *v10 = *(_DWORD *)(v1 + 12);
      WebCore::Length::ref(v10);
    }
  }
  *(_DWORD *)(v2 + 20) = 0;
  v13 = (int *)(v2 + 20);
  *(_WORD *)(v2 + 25) = 0;
  v14 = *(unsigned __int8 *)(v1 + 24);
  *(_BYTE *)(v2 + 24) = v14;
  *(_BYTE *)(v2 + 25) = *(_BYTE *)(v1 + 25);
  if (v14 <= 0xD)
  {
    v15 = 1 << v14;
    if ((v15 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 26) = *(_BYTE *)(v1 + 26);
      *v13 = *(_DWORD *)(v1 + 20);
    }
    else if ((v15 & 0x3003) != 0)
    {
      *v13 = 0;
    }
    else
    {
      *v13 = *(_DWORD *)(v1 + 20);
      WebCore::Length::ref(v13);
    }
  }
  *(_DWORD *)(v2 + 28) = 0;
  v16 = (int *)(v2 + 28);
  *(_WORD *)(v2 + 33) = 0;
  v17 = *(unsigned __int8 *)(v1 + 32);
  *(_BYTE *)(v2 + 32) = v17;
  *(_BYTE *)(v2 + 33) = *(_BYTE *)(v1 + 33);
  if (v17 <= 0xD)
  {
    v18 = 1 << v17;
    if ((v18 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 34) = *(_BYTE *)(v1 + 34);
      *v16 = *(_DWORD *)(v1 + 28);
    }
    else if ((v18 & 0x3003) != 0)
    {
      *v16 = 0;
    }
    else
    {
      *v16 = *(_DWORD *)(v1 + 28);
      WebCore::Length::ref(v16);
    }
  }
  *(_DWORD *)(v2 + 36) = 0;
  v19 = (int *)(v2 + 36);
  *(_WORD *)(v2 + 41) = 0;
  v20 = *(unsigned __int8 *)(v1 + 40);
  *(_BYTE *)(v2 + 40) = v20;
  *(_BYTE *)(v2 + 41) = *(_BYTE *)(v1 + 41);
  if (v20 <= 0xD)
  {
    v21 = 1 << v20;
    if ((v21 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 42) = *(_BYTE *)(v1 + 42);
      *v19 = *(_DWORD *)(v1 + 36);
    }
    else if ((v21 & 0x3003) != 0)
    {
      *v19 = 0;
    }
    else
    {
      *v19 = *(_DWORD *)(v1 + 36);
      WebCore::Length::ref(v19);
    }
  }
  *(_DWORD *)(v2 + 44) = 0;
  v22 = (int *)(v2 + 44);
  *(_WORD *)(v2 + 49) = 0;
  v23 = *(unsigned __int8 *)(v1 + 48);
  *(_BYTE *)(v2 + 48) = v23;
  *(_BYTE *)(v2 + 49) = *(_BYTE *)(v1 + 49);
  if (v23 <= 0xD)
  {
    v24 = 1 << v23;
    if ((v24 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 50) = *(_BYTE *)(v1 + 50);
      *v22 = *(_DWORD *)(v1 + 44);
    }
    else if ((v24 & 0x3003) != 0)
    {
      *v22 = 0;
    }
    else
    {
      *v22 = *(_DWORD *)(v1 + 44);
      WebCore::Length::ref(v22);
    }
  }
  *(_DWORD *)(v2 + 52) = 0;
  v25 = (int *)(v2 + 52);
  *(_WORD *)(v2 + 57) = 0;
  v26 = *(unsigned __int8 *)(v1 + 56);
  *(_BYTE *)(v2 + 56) = v26;
  *(_BYTE *)(v2 + 57) = *(_BYTE *)(v1 + 57);
  if (v26 <= 0xD)
  {
    v27 = 1 << v26;
    if ((v27 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 58) = *(_BYTE *)(v1 + 58);
      *v25 = *(_DWORD *)(v1 + 52);
    }
    else if ((v27 & 0x3003) != 0)
    {
      *v25 = 0;
    }
    else
    {
      *v25 = *(_DWORD *)(v1 + 52);
      WebCore::Length::ref(v25);
    }
  }
  *(_QWORD *)(v2 + 60) = *(_QWORD *)(v1 + 60);
  v28 = *(_BYTE *)(v2 + 68) & 0xFE | *(_BYTE *)(v1 + 68) & 1;
  *(_BYTE *)(v2 + 68) = v28;
  v29 = v28 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(v1 + 68) >> 1) & 1));
  *(_BYTE *)(v2 + 68) = v29;
  v30 = v29 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v1 + 68) >> 2) & 1));
  *(_BYTE *)(v2 + 68) = v30;
  v31 = v30 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(v1 + 68) >> 3) & 1));
  *(_BYTE *)(v2 + 68) = v31;
  *(_BYTE *)(v2 + 68) = *(_BYTE *)(v1 + 68) & 0xF0 | v31 & 0xF;
  v32 = *a1;
  *a1 = v2;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      if (*(_BYTE *)(v32 + 56) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 52));
      }
      if (*(_BYTE *)(v32 + 48) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 44));
      }
      if (*(_BYTE *)(v32 + 40) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 36));
      }
      if (*(_BYTE *)(v32 + 32) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 28));
      }
      if (*(_BYTE *)(v32 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 20));
      }
      if (*(_BYTE *)(v32 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 12));
      }
      if (*(_BYTE *)(v32 + 8) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 4));
      }
      WTF::fastFree((WTF *)v32, v6);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  return (_DWORD *)v2;
}

uint64_t WebCore::DisplayList::Recorder::fillRoundedRect(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  void *v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  void *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  _BOOL4 v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  __int128 v99;
  __int128 v100;

  v10 = *((unsigned int *)a1 + 183);
  if (!(_DWORD)v10)
  {
    __break(0xC471u);
    goto LABEL_137;
  }
  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = a1;
  v11 = a1[90];
  v8 = v11 + 760 * v10 - 760;
  v12 = (unsigned int *)(v11 + 760 * v10 - 584);
  v10 = *v12;
  if (!(_DWORD)v10)
    return (*(uint64_t (**)(_QWORD *, void *, uint64_t, uint64_t))(*v7 + 1096))(v7, v6, v5, v4);
  if ((v10 & 0xFFFFFFF2) != 0 || (v10 & 4) != 0 && (*(_DWORD *)(v8 + 168) || (*(_BYTE *)(v8 + 94) & 8) != 0))
    goto LABEL_74;
  if ((v10 & 1) == 0)
    goto LABEL_8;
  if (*(_DWORD *)(v8 + 80) || (*(_BYTE *)(v8 + 6) & 8) != 0)
  {
LABEL_74:
    if ((v10 & 1) != 0)
    {
      v57 = *((_DWORD *)a1 + 22);
      if (v57 == 1)
      {
        if (!*((_DWORD *)a1 + 8))
        {
          v59 = a1[3];
          if (v59)
          {
            if (*(_BYTE *)(v59 + 40))
              (*(void (**)(_QWORD *, uint64_t))(*a1 + 1360))(a1, v59);
          }
        }
      }
      else if (v57 == 2)
      {
        v58 = a1[3];
        if (v58)
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 1336))(a1, v58 + 8);
      }
    }
    if ((*(_BYTE *)v12 & 4) != 0)
    {
      v60 = *((_DWORD *)v7 + 44);
      if (v60 == 1)
      {
        if (!*((_DWORD *)v7 + 30))
        {
          v62 = v7[14];
          if (v62)
          {
            if (*(_BYTE *)(v62 + 40))
              (*(void (**)(_QWORD *, uint64_t))(*v7 + 1360))(v7, v62);
          }
        }
      }
      else if (v60 == 2)
      {
        v61 = v7[14];
        if (v61)
          (*(void (**)(_QWORD *, uint64_t))(*v7 + 1336))(v7, v61 + 8);
      }
    }
    (*(void (**)(_QWORD *, uint64_t))(*v7 + 800))(v7, v8);
    goto LABEL_15;
  }
  v10 = a1[1];
  if ((v10 & 0x8000000000000) != 0)
    goto LABEL_137;
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 784))(a1, a1[1]);
  v10 = *v12;
LABEL_8:
  if ((v10 & 0xC) != 0)
  {
    if ((v10 & 4) == 0)
    {
      v16 = 0;
      v15 = 0;
      v17 = 0;
      v14 = *((_DWORD *)v7 + 47);
      goto LABEL_13;
    }
    v13 = v7[12];
    if ((v10 & 8) != 0)
    {
      if ((v13 & 0x8000000000000) == 0)
      {
        v14 = *((_DWORD *)v7 + 47);
        v15 = 0x100000000;
        v16 = v7[12];
        v17 = v13 & 0xFFFFFF00;
LABEL_13:
        v18 = 0x100000000;
LABEL_14:
        *(_QWORD *)&v100 = v16 | (unint64_t)v15 | v17 & 0xFFFFFF00;
        *((_QWORD *)&v100 + 1) = v18 | v14;
        (*(void (**)(_QWORD *, __int128 *))(*v7 + 792))(v7, &v100);
        goto LABEL_15;
      }
    }
    else if ((v13 & 0x8000000000000) == 0)
    {
      v14 = 0;
      v18 = 0;
      v15 = 0x100000000;
      v16 = v7[12];
      v17 = v13 & 0xFFFFFF00;
      goto LABEL_14;
    }
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
LABEL_15:
  *v12 = 0;
  v19 = *((_DWORD *)v7 + 183);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x19444145CLL);
  }
  v20 = v7[90] + 760 * v19;
  v9 = v20 - 352;
  v21 = (void *)(v20 - 336);
  if (*(_BYTE *)(v20 - 8))
  {
    v22 = *(_QWORD *)v9;
    v23 = *(_QWORD *)v8;
    if ((*(_QWORD *)v9 & 0x8000000000000) != 0)
    {
      if ((v23 & 0x8000000000000) != 0)
      {
        v71 = v21;
        v100 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
        v99 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
        v72 = WebCore::operator==<float,4ul>((float *)&v100, (float *)&v99);
        v22 = *(_QWORD *)v9;
        if (v72 && HIBYTE(v22) == HIBYTE(*(_QWORD *)v8))
        {
          v21 = v71;
          if (BYTE6(v22) == BYTE6(*(_QWORD *)v8))
            goto LABEL_23;
        }
        else
        {
          v21 = v71;
        }
      }
    }
    else if (v22 == v23 && (v23 & 0x8000000000000) == 0)
    {
      goto LABEL_23;
    }
    if ((v22 & 0x8000000000000) != 0)
    {
      v87 = v21;
      v88 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        atomic_store(1u, v88);
        WTF::fastFree((WTF *)v88, v21);
        v21 = v87;
      }
    }
    v84 = *(_QWORD *)v8;
    *(_QWORD *)v9 = *(_QWORD *)v8;
    if ((v84 & 0x8000000000000) != 0)
    {
      v85 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 + 1, v85));
    }
LABEL_23:
    v25 = *(unsigned int *)(v9 + 80);
    v26 = *(unsigned int *)(v8 + 80);
    if ((_DWORD)v25 == -1)
    {
      if ((_DWORD)v26 != -1)
        goto LABEL_25;
    }
    else
    {
      if ((_DWORD)v26 != -1)
      {
LABEL_25:
        *(_QWORD *)&v100 = v21;
        ((void (*)(__int128 *))off_1E3413D80[v26])(&v100);
        goto LABEL_26;
      }
      ((void (*)(__int128 *, void *))off_1E3413D08[v25])(&v100, v21);
      *(_DWORD *)(v9 + 80) = -1;
    }
LABEL_26:
    v27 = *(_QWORD *)(v9 + 88);
    v28 = *(_QWORD *)(v8 + 88);
    if ((v27 & 0x8000000000000) != 0)
    {
      if ((v28 & 0x8000000000000) != 0)
      {
        v100 = *(_OWORD *)((v27 & 0xFFFFFFFFFFFFLL) + 4);
        v99 = *(_OWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 4);
        v73 = WebCore::operator==<float,4ul>((float *)&v100, (float *)&v99);
        v27 = *(_QWORD *)(v9 + 88);
        if (v73)
        {
          v74 = *(_QWORD *)(v8 + 88);
          if (HIBYTE(v27) == HIBYTE(v74) && BYTE6(v27) == BYTE6(v74))
            goto LABEL_29;
        }
      }
    }
    else if (v27 == v28 && (v28 & 0x8000000000000) == 0)
    {
      goto LABEL_29;
    }
    if ((v27 & 0x8000000000000) != 0)
    {
      v78 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        WTF::fastFree((WTF *)v78, v21);
      }
    }
    v75 = *(_QWORD *)(v8 + 88);
    *(_QWORD *)(v9 + 88) = v75;
    if ((v75 & 0x8000000000000) != 0)
    {
      v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 + 1, v76));
    }
LABEL_29:
    a2 = (void *)(v9 + 104);
    v29 = *(unsigned int *)(v9 + 168);
    v30 = *(unsigned int *)(v8 + 168);
    if ((_DWORD)v29 == -1)
    {
      if ((_DWORD)v30 != -1)
        goto LABEL_31;
    }
    else
    {
      if ((_DWORD)v30 != -1)
      {
LABEL_31:
        *(_QWORD *)&v100 = v9 + 104;
        ((void (*)(__int128 *))off_1E3413D80[v30])(&v100);
        goto LABEL_32;
      }
      ((void (*)(__int128 *, void *))off_1E3413D08[v29])(&v100, a2);
      *(_DWORD *)(v9 + 168) = -1;
    }
LABEL_32:
    v31 = *(_QWORD *)v12;
    *(_DWORD *)(v9 + 184) = v12[2];
    *(_QWORD *)(v9 + 176) = v31;
    v32 = (_QWORD *)(v9 + 192);
    v33 = (uint64_t *)(v8 + 192);
    if (*(unsigned __int8 *)(v9 + 224) == *(unsigned __int8 *)(v8 + 224))
    {
      if (!*(_BYTE *)(v9 + 224))
        goto LABEL_55;
      v34 = *v33;
      *(_DWORD *)(v9 + 200) = *(_DWORD *)(v8 + 200);
      *v32 = v34;
      v35 = *(_QWORD *)(v9 + 208);
      v36 = *(_QWORD *)(v8 + 208);
      if ((v35 & 0x8000000000000) != 0)
      {
        if ((v36 & 0x8000000000000) != 0)
        {
          v100 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFLL) + 4);
          v99 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
          v91 = WebCore::operator==<float,4ul>((float *)&v100, (float *)&v99);
          v35 = *(_QWORD *)(v9 + 208);
          if (v91)
          {
            v92 = *(_QWORD *)(v8 + 208);
            if (HIBYTE(v35) == HIBYTE(v92) && BYTE6(v35) == BYTE6(v92))
              goto LABEL_37;
          }
        }
      }
      else if (v35 == v36 && (v36 & 0x8000000000000) == 0)
      {
LABEL_37:
        *(_QWORD *)(v9 + 216) = *(_QWORD *)(v8 + 216);
        goto LABEL_55;
      }
      if ((v35 & 0x8000000000000) != 0)
      {
        v96 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
        do
        {
          v97 = __ldaxr(v96);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v96));
        if (!v98)
        {
          atomic_store(1u, v96);
          WTF::fastFree((WTF *)v96, a2);
        }
      }
      v93 = *(_QWORD *)(v8 + 208);
      *(_QWORD *)(v9 + 208) = v93;
      if ((v93 & 0x8000000000000) != 0)
      {
        v94 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 + 1, v94));
      }
      goto LABEL_37;
    }
    if (!*(_BYTE *)(v9 + 224))
    {
      v54 = *v33;
      *(_DWORD *)(v9 + 200) = *(_DWORD *)(v8 + 200);
      *v32 = v54;
      v55 = *(_QWORD *)(v8 + 208);
      *(_QWORD *)(v9 + 208) = v55;
      if ((v55 & 0x8000000000000) != 0)
      {
        v69 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 + 1, v69));
      }
      *(_QWORD *)(v9 + 216) = *(_QWORD *)(v8 + 216);
      *(_BYTE *)(v9 + 224) = 1;
LABEL_55:
      v47 = v9 + 232;
      v48 = v8 + 232;
      if (*(unsigned __int8 *)(v9 + 320) != *(unsigned __int8 *)(v8 + 320))
      {
        if (*(_BYTE *)(v9 + 320))
        {
          v51 = *(unsigned int *)(v9 + 312);
          if ((_DWORD)v51 != -1)
            ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v51])(&v100, v47, v48);
          *(_DWORD *)(v9 + 312) = -1;
          *(_BYTE *)(v9 + 320) = 0;
        }
        else
        {
          *(_BYTE *)(v9 + 232) = 0;
          *(_DWORD *)(v9 + 312) = -1;
          v56 = *(unsigned int *)(v8 + 312);
          if ((_DWORD)v56 != -1)
          {
            ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413D50[v56])(&v100, v47, v48);
            *(_DWORD *)(v9 + 312) = v56;
          }
          *(_BYTE *)(v9 + 320) = 1;
        }
        goto LABEL_64;
      }
      if (*(_BYTE *)(v9 + 320))
      {
        v49 = *(unsigned int *)(v9 + 312);
        v50 = *(unsigned int *)(v8 + 312);
        if ((_DWORD)v49 == -1)
        {
          if ((_DWORD)v50 == -1)
            goto LABEL_64;
        }
        else if ((_DWORD)v50 == -1)
        {
          ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v49])(&v100, v47, v48);
          *(_DWORD *)(v9 + 312) = -1;
          goto LABEL_64;
        }
        *(_QWORD *)&v100 = v9 + 232;
        ((void (*)(__int128 *))*(&off_1E3413D98 + v50))(&v100);
      }
LABEL_64:
      v52 = *(_QWORD *)(v8 + 328);
      *(_QWORD *)(v9 + 333) = *(_QWORD *)(v8 + 333);
      *(_QWORD *)(v9 + 328) = v52;
      return (*(uint64_t (**)(_QWORD *, void *, uint64_t, uint64_t))(*v7 + 1096))(v7, v6, v5, v4);
    }
    v10 = *(_QWORD *)(v9 + 208);
    if ((v10 & 0x8000000000000) == 0)
    {
LABEL_54:
      *(_BYTE *)(v9 + 224) = 0;
      goto LABEL_55;
    }
LABEL_138:
    v81 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v81);
      WTF::fastFree((WTF *)v81, a2);
    }
    goto LABEL_54;
  }
  v37 = *(_QWORD *)v8;
  *(_QWORD *)v9 = *(_QWORD *)v8;
  if ((v37 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
  }
  *(_BYTE *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 80) = -1;
  v38 = *(unsigned int *)(v8 + 80);
  if ((_DWORD)v38 != -1)
  {
    ((void (*)(__int128 *, void *, uint64_t))off_1E3413D38[v38])(&v100, v21, v8 + 16);
    *(_DWORD *)(v9 + 80) = v38;
  }
  v39 = *(_QWORD *)(v8 + 88);
  *(_QWORD *)(v9 + 88) = v39;
  if ((v39 & 0x8000000000000) != 0)
  {
    v65 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 + 1, v65));
  }
  *(_BYTE *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 168) = -1;
  v40 = *(unsigned int *)(v8 + 168);
  if ((_DWORD)v40 != -1)
  {
    ((void (*)(__int128 *))off_1E3413D38[v40])(&v100);
    *(_DWORD *)(v9 + 168) = v40;
  }
  v41 = *(_QWORD *)v12;
  v42 = v12[2];
  *(_BYTE *)(v9 + 192) = 0;
  *(_DWORD *)(v9 + 184) = v42;
  *(_QWORD *)(v9 + 176) = v41;
  *(_BYTE *)(v9 + 224) = 0;
  if (*(_BYTE *)(v8 + 224))
  {
    v43 = *(_QWORD *)(v8 + 192);
    *(_DWORD *)(v9 + 200) = *(_DWORD *)(v8 + 200);
    *(_QWORD *)(v9 + 192) = v43;
    v44 = *(_QWORD *)(v8 + 208);
    *(_QWORD *)(v9 + 208) = v44;
    if ((v44 & 0x8000000000000) != 0)
    {
      v67 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
    }
    *(_QWORD *)(v9 + 216) = *(_QWORD *)(v8 + 216);
    *(_BYTE *)(v9 + 224) = 1;
  }
  *(_BYTE *)(v9 + 232) = 0;
  *(_BYTE *)(v9 + 320) = 0;
  if (*(_BYTE *)(v8 + 320))
  {
    *(_DWORD *)(v9 + 312) = -1;
    v45 = *(unsigned int *)(v8 + 312);
    if ((_DWORD)v45 != -1)
    {
      ((void (*)(__int128 *))off_1E3413D50[v45])(&v100);
      *(_DWORD *)(v9 + 312) = v45;
    }
    *(_BYTE *)(v9 + 320) = 1;
  }
  v46 = *(_QWORD *)(v8 + 328);
  *(_QWORD *)(v9 + 333) = *(_QWORD *)(v8 + 333);
  *(_QWORD *)(v9 + 328) = v46;
  *(_BYTE *)(v9 + 344) = 1;
  return (*(uint64_t (**)(_QWORD *, void *, uint64_t, uint64_t))(*v7 + 1096))(v7, v6, v5, v4);
}

void WebCore::RenderBlock::insertPositionedObject(WebCore::RenderBlock *this, WebCore::RenderBox *a2)
{
  if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
    WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, a2);
  if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
    WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, a2);
  if ((*((_BYTE *)a2 + 52) & 7) != 1 || (*((_BYTE *)a2 + 53) & 2) == 0)
  {
    if ((*((_BYTE *)a2 + 20) & 0xF8) != 0)
      *((_DWORD *)this + 5) |= 0x40u;
    {
      WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
      unk_1ECE91358 = 0u;
    }
    WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, this, a2);
  }
}

uint64_t WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(uint64_t result)
{
  uint64_t v1;
  WTF *v2;
  WTF *v3;
  uint64_t v4;

  v1 = result;
  v2 = *(WTF **)(result + 8);
  if (v2)
  {
    do
    {
      v3 = (WTF *)*((_QWORD *)v2 + 2);
      if (!*(_QWORD *)(*(_QWORD *)v2 + 8))
        result = WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)v1, (void *)v1, v2);
      v2 = v3;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 24) = 0;
  v4 = *(_QWORD *)v1;
  if (*(_QWORD *)v1)
  {
    LODWORD(v4) = *(_DWORD *)(v4 - 12);
    if (v4 > 0x7FFFFFFE)
      LODWORD(v4) = 0x7FFFFFFF;
  }
  *(_DWORD *)(v1 + 28) = 2 * v4;
  return result;
}

void WTF::WeakHashMap<WebCore::RenderBox const,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_42;
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
LABEL_22:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_23;
  }
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v6;
    v8 = (WTF **)(v3 + 16 * v6);
    v9 = *v8;
    if ((unint64_t)*v8 + 1 >= 2 && !*((_QWORD *)v9 + 1))
    {
      *v8 = 0;
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, a2);
      else
        --*(_DWORD *)v9;
      *v8 = (WTF *)-1;
      v10 = v3 + 16 * v6;
      v11 = *(WTF **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          WTF::fastFree(v11, a2);
        else
          --*(_DWORD *)v11;
      }
      ++v5;
    }
    --v6;
  }
  while (v7);
  v3 = *(_QWORD *)a1;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    *(_DWORD *)(v17 - 12) = v18 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_42:
    v15 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_24;
  }
  v12 = *(_DWORD *)(v3 - 4);
  v13 = *(unsigned int *)(v3 - 12);
  if (6 * (int)v13 >= v12 || v12 < 9)
    goto LABEL_22;
  v19 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = (v20 | HIWORD(v20)) + 1;
  if (v21 > 0x400)
  {
    if (v21 > 2 * v13)
      goto LABEL_41;
  }
  else if (3 * v21 > 4 * v13)
  {
LABEL_32:
    v22 = (double)v13;
    v23 = (double)v21;
    v24 = 0.604166667;
    goto LABEL_33;
  }
  LODWORD(v21) = 2 * v21;
  if (v21 <= 0x400)
    goto LABEL_32;
LABEL_41:
  v22 = (double)v13;
  v23 = (double)v21;
  v24 = 0.416666667;
LABEL_33:
  if (v23 * v24 <= v22)
    LODWORD(v21) = 2 * v21;
  if (v21 <= 8)
    v25 = 8;
  else
    v25 = v21;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v25);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
  {
    v15 = 0;
    goto LABEL_24;
  }
LABEL_23:
  v15 = *(_DWORD *)(v3 - 12);
  v16 = 0x7FFFFFFF;
  if (v15 < 0x7FFFFFFF)
LABEL_24:
    v16 = v15;
  *(_DWORD *)(a1 + 12) = 2 * v16;
}

uint64_t WebCore::SWServer::SWServer(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8, uint64_t a9, char a10)
{
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint8_t buf[16];

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = (unsigned int *)(a1 + 8);
  WTF::WeakPtrFactory<WebCore::PageGroup,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v18 = *(unsigned int **)(a2 + 8);
  if (v18)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 16) = v18;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 117) = 0u;
  v20 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a6;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 177) = a4;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_BYTE *)(a1 + 256) = a7;
  *(_BYTE *)(a1 + 257) = a8;
  *(_BYTE *)(a1 + 258) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 264) = a9;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = a10;
  *(_QWORD *)(a1 + 288) = 0;
  if (!*(_QWORD *)a5 || !*(_DWORD *)(*(_QWORD *)a5 + 4))
  {
    v21 = off_1ECE7CA18;
    if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "No path to store the service worker registrations", buf, 2u);
    }
  }
  (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 72))(buf, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a1);
  v22 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v22 = *(_QWORD *)(a1 + 144);
  }
  if (v22)
  {
    WTF::WeakPtrFactory<WebCore::PageGroup,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v17, a1);
    v25 = *(unsigned int **)(a1 + 8);
    if (v25)
    {
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = &off_1E3482480;
    v27[1] = v25;
    *(_QWORD *)buf = v27;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v22 + 40))(v22, buf);
    v28 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  else
  {
    WebCore::SWServer::registrationStoreImportComplete((WebCore::SWServer *)a1);
  }
  return a1;
}

unsigned int *WTF::WeakPtrFactory<WebCore::PageGroup,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(unsigned int *result, uint64_t a2)
{
  unsigned int **v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (!*(_QWORD *)result)
  {
    v3 = (unsigned int **)result;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    result = *v3;
    *v3 = (unsigned int *)v5;
    if (result)
    {
      do
      {
        v6 = __ldaxr(result);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, result));
      if (!v7)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

uint64_t WebCore::FormData::resolveBlobReferences@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v12 = a2;
  v5 = *(unsigned int *)(result + 20);
  if ((_DWORD)v5)
  {
    v6 = (int *)(*(_QWORD *)(result + 8) + 40);
    v7 = 48 * v5;
    while (1)
    {
      v8 = *v6;
      v6 += 12;
      if (v8 == 2)
        break;
      v7 -= 48;
      if (!v7)
        goto LABEL_2;
    }
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)result = 1;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_BYTE *)(result + 56) = 0;
    *a3 = result;
    *(_BYTE *)(result + 32) = *(_BYTE *)(v3 + 32);
    *(_QWORD *)(result + 24) = *(_QWORD *)(v3 + 24);
    v9 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v3 + 8);
      v11 = 48 * v9;
      do
      {
        result = WTF::switchOn<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> &,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_0,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_1,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_2>(v10, (uint64_t)a3, (uint64_t)a3, (uint64_t)&v12, (uint64_t)a3);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
  else
  {
LABEL_2:
    ++*(_DWORD *)result;
    *a3 = result;
  }
  return result;
}

void WebCore::DocumentWriter::begin(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, __int128 *a5, uint64_t a6)
{
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::LocalFrame *v16;
  _DWORD *v17;
  WebCore::Document *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  WebCore::Node *v28;
  unsigned int v29;
  uint64_t v30;
  WebCore::Node *v31;
  void *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WebCore::Node *v40;
  const WTF::StringImpl *v41;
  void *v42;
  const WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WebCore::Node *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;
  unsigned int v61;
  uint64_t v62;
  _DWORD *v63;
  WebCore::LocalFrameView *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  WebCore::Node *v68;
  WTF::StringImpl *v69;
  int isSecureTransitionTo;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v74;
  uint64_t v75;
  const WTF::StringImpl **v76;
  const WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v83;
  WebCore::Node *v84;
  _DWORD *v85;
  char *v86;
  _DWORD *v87;
  uint64_t v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  WebCore::HTMLMetaCharsetParser *v94;
  WTF *v95;
  void *v96;
  uint64_t v97;
  WTF *v98;
  WebCore::HTMLMetaCharsetParser *v99;
  WTF *v100;
  void *v101;
  uint64_t v102;
  WTF *v103;
  WebCore::HTMLMetaCharsetParser *v104;
  WTF *v105;
  void *v106;
  uint64_t v107;
  WTF *v108;
  void *v109;
  WebCore::Node *v110;
  char *v111;
  WebCore::SecurityContext *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WebCore::SecurityContext *v116;
  char *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  unsigned int *v122;
  WTF::StringImpl *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  WTF::StringImpl *v128;
  void *v129;
  unsigned int v131;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t v138;
  WebCore::Document *v139;
  WTF::StringImpl *v140;
  unsigned int *v141;
  WTF::StringImpl *v142;
  WebCore::ContentSecurityPolicy *v143;
  unsigned int v144;
  const WebCore::SecurityOrigin *v145;
  unsigned int v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  const WebCore::SecurityOrigin *v157;
  uint64_t v158;
  WebCore::Document **v159;
  const WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162;
  __int128 v163;
  __int128 v164;
  _DWORD *v165;
  __int16 v166;
  _DWORD *v167;
  _DWORD *v168;
  char v169;
  WebCore::Node *v170;
  WTF::StringImpl *v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  WebCore::Document *v175;
  __int128 v176;
  __int128 v177;
  _OWORD v178[2];
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v10 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v10 += 2;
  v171 = v10;
  v11 = *(_OWORD *)(a2 + 24);
  v172 = *(_OWORD *)(a2 + 8);
  v173 = v11;
  v12 = a5[1];
  v176 = *a5;
  v177 = v12;
  v13 = *(unsigned int **)(*(_QWORD *)a1 + 8);
  v14 = v13 + 2;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v175 = (WebCore::Document *)v13;
  v174 = *((_QWORD *)v13 + 35);
  ++*(_DWORD *)v174;
  v162 = (WTF::StringImpl *)&v174;
  *(_QWORD *)&v163 = a1;
  *((_QWORD *)&v163 + 1) = &v171;
  *(_QWORD *)&v164 = &v175;
  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [2]>::contains<WTF::String>((unsigned __int8 ***)WebCore::MIMETypeRegistry::isPDFMIMEType(WTF::String const&)::set, (uint64_t *)(a1 + 8))&& WebCore::DocumentWriter::createDocument(WTF::URL const&,WebCore::ProcessQualified<WTF::UUID>)::$_0::operator()((uint64_t)&v162))
  {
    WebCore::SinkDocument::create((WebCore::SinkDocument *)v178, v175, (const WTF::URL *)&v171);
    v110 = *(WebCore::Node **)&v178[0];
    *(_QWORD *)&v178[0] = 0;
    v170 = v110;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v178);
  }
  else if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v174 + 16) + 24))(*(_QWORD *)(v174 + 16)) & 1) != 0)
  {
    v16 = (WebCore::LocalFrame *)*((_QWORD *)v175 + 17);
    v178[0] = v176;
    v178[1] = v177;
    WebCore::DOMImplementation::createDocument((WebCore::MIMETypeRegistry *)(a1 + 8), v175, v16, (uint64_t)&v171, v178, &v170);
  }
  else
  {
    WebCore::Document::createNonRenderedPlaceholder(v175, (WebCore::LocalFrame *)&v171, (unint64_t *)&v170);
  }
  v17 = (_DWORD *)v174;
  v174 = 0;
  if (v17)
  {
    if (!*v17)
    {
      __break(0xC471u);
      JUMPOUT(0x19444286CLL);
    }
    --*v17;
  }
  v18 = v175;
  v175 = 0;
  if (v18)
  {
    v19 = (unsigned int *)((char *)v18 + 8);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      v150 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v150 = off_1E31FE290;
      *((_QWORD *)v150 + 1) = v19;
      v162 = v150;
      WTF::ensureOnMainThread();
      v151 = v162;
      v162 = 0;
      if (v151)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v151 + 8))(v151);
    }
  }
  if (*(_QWORD *)a1)
    v22 = *(unsigned int **)(*(_QWORD *)a1 + 8);
  else
    v22 = 0;
  v23 = v22 + 2;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v25 = *((_QWORD *)v22 + 35);
  ++*(_DWORD *)v25;
  if ((*((_BYTE *)v170 + 3358) & 8) != 0 && (*((_BYTE *)v170 + 268) & 2) != 0)
  {
    WebCore::SinkDocument::create((WebCore::SinkDocument *)&v162, (WebCore::LocalFrame *)v22, (const WTF::URL *)&v171);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v170, (uint64_t *)&v162);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v162);
  }
  v161 = a3;
  if ((*(_DWORD *)(v25 + 64) - 1) <= 1
    && (isSecureTransitionTo = WebCore::SecurityContext::isSecureTransitionTo((WebCore::SecurityContext *)(*((_QWORD *)v22 + 37) + 192), (const WTF::URL *)&v171), isSecureTransitionTo&& WebCore::LocalFrame::window((WebCore::LocalFrame *)v22)&& !*(_BYTE *)(WebCore::LocalFrame::window((WebCore::LocalFrame *)v22) + 312)&& *(_BYTE *)(WebCore::LocalFrame::window((WebCore::LocalFrame *)v22) + 313)))
  {
    v71 = *(unsigned int **)(*(_QWORD *)(v25 + 88) + 2880);
    if (v71)
    {
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 + 1, v71));
      if (!atomic_load(v71))
      {
        __break(0xC471u);
        JUMPOUT(0x194442A68);
      }
      v26 = (v71[44] & 4) == 0;
      do
        v74 = __ldaxr(v71);
      while (__stlxr(v74 - 1, v71));
    }
    else
    {
      v26 = 1;
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = *((_QWORD *)v22 + 37);
  if (v27)
    *(_DWORD *)(v27 + 24) += 2;
  v28 = v170;
  *((_DWORD *)v170 + 6) += 2;
  do
    v29 = __ldaxr(v23);
  while (__stlxr(v29 + 1, v23));
  v30 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v30 = &off_1E33F39C0;
  *(_QWORD *)(v30 + 8) = v28;
  *(_QWORD *)(v30 + 16) = v22;
  *(_BYTE *)(v30 + 24) = v26;
  *(_QWORD *)&v178[0] = v30;
  v31 = v170;
  *((_DWORD *)v170 + 6) += 2;
  v162 = v31;
  WebCore::FrameLoader::clear(v25, (uint64_t)&v162, !v26, !v26, 1, (WebCore::Node **)v178);
  v33 = v162;
  v162 = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  v34 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
    {
      v93 = *(WTF **)(v34 + 72);
      if (v93)
      {
        *(_QWORD *)(v34 + 72) = 0;
        *(_DWORD *)(v34 + 80) = 0;
        WTF::fastFree(v93, v32);
      }
      v94 = *(WebCore::HTMLMetaCharsetParser **)(v34 + 48);
      *(_QWORD *)(v34 + 48) = 0;
      if (v94)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v94, (WTF::StringImpl *)v32);
        WTF::fastFree(v95, v96);
      }
      v97 = *(_QWORD *)(v34 + 40);
      *(_QWORD *)(v34 + 40) = 0;
      if (v97)
        (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
      WTF::fastFree((WTF *)v34, v32);
    }
    else
    {
      --*(_DWORD *)v34;
    }
  }
  *(_BYTE *)(a1 + 41) = 0;
  if (!*(_BYTE *)(a1 + 42))
  {
    v35 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  v36 = *((_QWORD *)v170 + 66);
  if (!v36)
    goto LABEL_79;
  v37 = *(_QWORD *)(v36 + 8);
  if (!v37 || !*(_QWORD *)(v37 + 288))
    goto LABEL_79;
  if (!v26)
  {
    v38 = *((_QWORD *)v22 + 38);
    ++*(_DWORD *)(v38 + 8);
    WebCore::ScriptController::updatePlatformScriptObjects(v38);
    v39 = *(_DWORD *)(v38 + 8);
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x194442904);
    }
    *(_DWORD *)(v38 + 8) = v39 - 1;
  }
  WebCore::FrameLoader::setOutgoingReferrer((WebCore::FrameLoader *)v25, (const WTF::URL *)&v171);
  v40 = v170;
  *((_DWORD *)v170 + 6) += 2;
  v162 = v40;
  WebCore::LocalFrame::setDocument((uint64_t)v22, &v162, v41);
  v44 = v162;
  v162 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
  v45 = *(_QWORD *)(a1 + 24);
  if (v45)
  {
    v46 = v170;
    *(_DWORD *)v45 += 2;
    v47 = *((_QWORD *)v46 + 218);
    *((_QWORD *)v46 + 218) = v45;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
      {
        v103 = *(WTF **)(v47 + 72);
        if (v103)
        {
          *(_QWORD *)(v47 + 72) = 0;
          *(_DWORD *)(v47 + 80) = 0;
          WTF::fastFree(v103, v42);
        }
        v104 = *(WebCore::HTMLMetaCharsetParser **)(v47 + 48);
        *(_QWORD *)(v47 + 48) = 0;
        if (v104)
        {
          WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v104, (WTF::StringImpl *)v42);
          WTF::fastFree(v105, v106);
        }
        v107 = *(_QWORD *)(v47 + 40);
        *(_QWORD *)(v47 + 40) = 0;
        if (v107)
          (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
        WTF::fastFree((WTF *)v47, v42);
      }
      else
      {
        --*(_DWORD *)v47;
      }
    }
    if (*(_DWORD *)v45 == 1)
    {
      v98 = *(WTF **)(v45 + 72);
      if (v98)
      {
        *(_QWORD *)(v45 + 72) = 0;
        *(_DWORD *)(v45 + 80) = 0;
        WTF::fastFree(v98, v42);
      }
      v99 = *(WebCore::HTMLMetaCharsetParser **)(v45 + 48);
      *(_QWORD *)(v45 + 48) = 0;
      if (v99)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v99, (WTF::StringImpl *)v42);
        WTF::fastFree(v100, v101);
      }
      v102 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v45 + 40) = 0;
      if (v102)
        (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
      WTF::fastFree((WTF *)v45, v42);
    }
    else
    {
      --*(_DWORD *)v45;
    }
  }
  if (!a4)
  {
    v48 = WTF::URL::protocolIs();
    if ((v48 & 1) == 0)
    {
      v48 = WTF::URL::protocolIs();
      if (!(_DWORD)v48)
        goto LABEL_55;
    }
    v75 = *(_QWORD *)(*((_QWORD *)v22 + 23) + 16);
    if (v75 && (++*(_DWORD *)v75, *(_BYTE *)(v75 + 464)))
    {
      WebCore::Document::inheritPolicyContainerFrom(v170, (WTF::StringImpl **)(v75 + 384));
    }
    else
    {
      v76 = (const WTF::StringImpl **)WTF::aboutSrcDocURL((WTF *)v48);
      if (!WTF::equal(v171, *v76, v77))
      {
        if (!a6)
          goto LABEL_194;
        if (!*(_BYTE *)(a6 + 224))
          goto LABEL_116;
        WebCore::Document::inheritPolicyContainerFrom(v170, (WTF::StringImpl **)(a6 + 56));
        v79 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::Node *)((char *)v170 + 192));
        v80 = v79;
        if (v79)
        {
          do
            v81 = __ldaxr(v79);
          while (__stlxr(v81 + 1, v79));
        }
        if (*(_BYTE *)(a6 + 224))
        {
          WebCore::ContentSecurityPolicy::updateSourceSelf((WebCore::ContentSecurityPolicy *)v79, *(const WebCore::SecurityOrigin **)(a6 + 40));
          if (v80)
          {
            if (!atomic_load(v80))
            {
              __break(0xC471u);
              JUMPOUT(0x194442A34);
            }
            do
              v83 = __ldaxr(v80);
            while (__stlxr(v83 - 1, v80));
          }
LABEL_116:
          if (v75 && *(_BYTE *)(a6 + 868) != 2)
          {
            v84 = v170;
            WebCore::ContentSecurityPolicy::responseHeaders(*((_QWORD *)v170 + 26), v78, (uint64_t)&v162);
            LOWORD(v164) = *((_WORD *)v84 + 108);
            v85 = (_DWORD *)*((_QWORD *)v84 + 28);
            if (v85)
              *v85 += 2;
            v86 = (char *)v84 + 192;
            *((_QWORD *)&v164 + 1) = v85;
            v87 = (_DWORD *)*((_QWORD *)v84 + 29);
            if (v87)
              *v87 += 2;
            v165 = v87;
            v88 = (**(uint64_t (***)(uint64_t))v86)((uint64_t)v84 + 192);
            v166 = *(_WORD *)v88;
            v89 = *(_DWORD **)(v88 + 8);
            if (v89)
              *v89 += 2;
            v167 = v89;
            v90 = *(_DWORD **)(v88 + 16);
            if (v90)
              *v90 += 2;
            v168 = v90;
            v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 8))((uint64_t)v84 + 192);
            v91 = v75 + 384;
            if (*(_BYTE *)(v75 + 464))
            {
              WebCore::PolicyContainer::operator=(v91, (uint64_t)&v162);
            }
            else
            {
              std::construct_at[abi:sn180100]<WebCore::PolicyContainer,WebCore::PolicyContainer const&,WebCore::PolicyContainer*>(v91, (uint64_t *)&v162, *(unsigned __int8 *)(v75 + 464));
              *(_BYTE *)(v75 + 464) = 1;
            }
            WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)&v162, v92);
LABEL_129:
            if (*(_DWORD *)v75 == 1)
            {
              WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)v75);
              WTF::fastFree(v108, v109);
            }
            else
            {
              --*(_DWORD *)v75;
            }
            goto LABEL_55;
          }
LABEL_194:
          if (!v75)
            goto LABEL_55;
          goto LABEL_129;
        }
LABEL_237:
        __break(1u);
        goto LABEL_238;
      }
      v134 = *((_QWORD *)v22 + 7);
      if (v134)
      {
        v135 = *(_QWORD *)(v134 + 8);
        if (v135)
        {
          if (!*(_BYTE *)(v135 + 144))
          {
            v136 = (unsigned int *)(v135 + 8);
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 + 1, v136));
            v138 = *(_QWORD *)(v135 + 296);
            if (v138)
            {
              v139 = v170;
              WebCore::SecurityContext::policyContainer((WebCore::SecurityContext *)(v138 + 192), v78, (uint64_t)&v162);
              WebCore::Document::inheritPolicyContainerFrom(v139, &v162);
              WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)&v162, v140);
              v141 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::Node *)((char *)v170 + 192));
              if (v141)
              {
                v143 = (WebCore::ContentSecurityPolicy *)v141;
                do
                  v144 = __ldaxr(v141);
                while (__stlxr(v144 + 1, v141));
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v135 + 296) + 192), v142);
                WebCore::ContentSecurityPolicy::updateSourceSelf(v143, v145);
                if (!atomic_load((unsigned int *)v143))
                {
                  __break(0xC471u);
                  goto LABEL_237;
                }
                do
                  v147 = __ldaxr((unsigned int *)v143);
                while (__stlxr(v147 - 1, (unsigned int *)v143));
              }
              else
              {
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v135 + 296) + 192), v142);
                WebCore::ContentSecurityPolicy::updateSourceSelf(0, v157);
              }
            }
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v135 + 8));
          }
        }
      }
    }
    if (!a6)
      goto LABEL_194;
    goto LABEL_116;
  }
  WebCore::Document::setCookieURL(v170, (const WTF::URL *)(a4 + 968), v43);
  v111 = (char *)v170 + 192;
  v112 = (WebCore::SecurityContext *)(a4 + 192);
  v113 = (WTF::StringImpl *)WebCore::SecurityContext::securityOriginPolicy((WebCore::SecurityContext *)(a4 + 192));
  if (v113)
    ++*(_DWORD *)v113;
  v162 = v113;
  WebCore::SecurityContext::setSecurityOriginPolicy((uint64_t)v111, (WTF::StringImpl *)&v162);
  v115 = v162;
  v162 = 0;
  if (v115)
    WTF::RefCounted<WebCore::SecurityOriginPolicy>::deref((uint64_t)v115, v114);
  v116 = (WebCore::Node *)((char *)v170 + 192);
  *((_BYTE *)v170 + 277) = a4[277];
  WebCore::SecurityContext::setCrossOriginEmbedderPolicy(v116, (const WebCore::CrossOriginEmbedderPolicy *)(a4 + 216));
  v117 = (char *)v170 + 192;
  v118 = v171;
  if (v171)
    *(_DWORD *)v171 += 2;
  v162 = v118;
  v163 = v172;
  v164 = v173;
  v119 = WTF::fastMalloc((WTF *)0xF0);
  v175 = (WebCore::Document *)WebCore::ContentSecurityPolicy::ContentSecurityPolicy(v119, (uint64_t *)&v162, (uint64_t)v170 + 192);
  WebCore::SecurityContext::setContentSecurityPolicy((uint64_t)v117, (WTF::StringImpl *)&v175);
  std::unique_ptr<WebCore::ContentSecurityPolicy>::~unique_ptr[abi:sn180100](&v175, v120);
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
      WTF::StringImpl::destroy(v162, v121);
    else
      *(_DWORD *)v162 -= 2;
  }
  v122 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::Node *)((char *)v170 + 192));
  v123 = (WTF::StringImpl *)v122;
  do
    v124 = __ldaxr(v122);
  while (__stlxr(v124 + 1, v122));
  v125 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy(v112);
  v126 = v125;
  do
    v127 = __ldaxr(v125);
  while (__stlxr(v127 + 1, v125));
  WebCore::ContentSecurityPolicy::copyStateFrom(v123, (uint64_t)v125, 0);
  v128 = (WTF::StringImpl *)*((_QWORD *)v126 + 24);
  *((_QWORD *)v126 + 24) = 0;
  v162 = v128;
  WebCore::ContentSecurityPolicy::setInsecureNavigationRequestsToUpgrade((uint64_t)v123, (uint64_t *)&v162);
  WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>::~HashSet(&v162, v129);
  if (!atomic_load(v126))
  {
    __break(0xC471u);
    JUMPOUT(0x194442A8CLL);
  }
  do
    v131 = __ldaxr(v126);
  while (__stlxr(v131 - 1, v126));
  if (v123)
  {
    if (!atomic_load((unsigned int *)v123))
    {
      __break(0xC471u);
      JUMPOUT(0x194442AACLL);
    }
    do
      v133 = __ldaxr((unsigned int *)v123);
    while (__stlxr(v133 - 1, (unsigned int *)v123));
  }
LABEL_55:
  if (v27
    && WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v27 + 192))
    && WebCore::SecurityContext::contentSecurityPolicy((WebCore::Node *)((char *)v170 + 192)))
  {
    v49 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::Node *)((char *)v170 + 192));
    v50 = v49;
    if (v49)
    {
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 + 1, v49));
    }
    v52 = WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v27 + 192));
    v54 = (unsigned int *)v52;
    if (v52)
    {
      do
        v55 = __ldaxr((unsigned int *)v52);
      while (__stlxr(v55 + 1, (unsigned int *)v52));
    }
    v56 = *(_QWORD *)(v52 + 192);
    *(_QWORD *)(v52 + 192) = 0;
    v57 = *((_QWORD *)v50 + 24);
    *((_QWORD *)v50 + 24) = v56;
    if (!v57)
    {
LABEL_63:
      if (!atomic_load(v54))
      {
        __break(0xC471u);
        JUMPOUT(0x194442968);
      }
      do
        v59 = __ldaxr(v54);
      while (__stlxr(v59 - 1, v54));
LABEL_65:
      if (v50)
      {
        if (!atomic_load(v50))
        {
          __break(0xC471u);
          JUMPOUT(0x194442988);
        }
        do
          v61 = __ldaxr(v50);
        while (__stlxr(v61 - 1, v50));
      }
      goto LABEL_68;
    }
    v152 = *(unsigned int *)(v57 - 4);
    if (!(_DWORD)v152)
    {
      WTF::fastFree((WTF *)(v57 - 16), v53);
      goto LABEL_63;
    }
    v153 = v57;
    while (1)
    {
      v154 = *(unsigned int *)(v153 + 24);
      if ((_DWORD)v154 == -1)
        break;
      v162 = (WTF::StringImpl *)&v175;
      if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v154])(&v162, v153) & 1) == 0)
      {
        v156 = *(unsigned int *)(v153 + 24);
        if ((_DWORD)v156 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v156])(&v162, v153);
        *(_DWORD *)(v153 + 24) = -1;
      }
      v153 += 32;
      if (!--v152)
      {
        WTF::fastFree((WTF *)(v57 - 16), v155);
        if (!v54)
          goto LABEL_65;
        goto LABEL_63;
      }
    }
LABEL_238:
    v158 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::LocalFrame::setDocument(v158, v159, v160);
    return;
  }
LABEL_68:
  WebCore::FrameLoader::didBeginDocument((WebCore::FrameLoader *)v25, v161);
  WebCore::Document::implicitOpen(v170);
  v62 = *((_QWORD *)v170 + 91);
  if (v62)
    ++*(_DWORD *)(v62 + 8);
  v63 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v62;
  if (v63)
  {
    if (v63[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
    else
      --v63[2];
  }
  if (*((_QWORD *)v22 + 36)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v25 + 16) + 24))(*(_QWORD *)(v25 + 16)))
  {
    v64 = (WebCore::LocalFrameView *)*((_QWORD *)v22 + 36);
    if (v64)
    {
      ++*((_DWORD *)v64 + 2);
      v162 = 0;
      WebCore::LocalFrameView::setContentsSize(v64, (const WebCore::IntSize *)&v162);
      if (*((_DWORD *)v64 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v64 + 8))(v64);
      else
        --*((_DWORD *)v64 + 2);
    }
    else
    {
      v162 = 0;
      WebCore::LocalFrameView::setContentsSize(0, (const WebCore::IntSize *)&v162);
    }
  }
  *(_BYTE *)(a1 + 40) = 1;
LABEL_79:
  v65 = *(_QWORD *)&v178[0];
  *(_QWORD *)&v178[0] = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  if (!*(_DWORD *)v25)
  {
    __break(0xC471u);
    JUMPOUT(0x19444288CLL);
  }
  --*(_DWORD *)v25;
  do
  {
    v66 = __ldaxr(v23);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v23));
  if (!v67)
  {
    atomic_store(1u, v23);
    v148 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v148 = off_1E31FE290;
    *((_QWORD *)v148 + 1) = v23;
    v162 = v148;
    WTF::ensureOnMainThread();
    v149 = v162;
    v162 = 0;
    if (v149)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v149 + 8))(v149);
  }
  v68 = v170;
  v170 = 0;
  if (v68)
  {
    if (*((_DWORD *)v68 + 6) == 2)
    {
      if ((*((_WORD *)v68 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v68);
    }
    else
    {
      *((_DWORD *)v68 + 6) -= 2;
    }
  }
  v69 = v171;
  v171 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v32);
    else
      *(_DWORD *)v69 -= 2;
  }
}

void WebCore::LocalFrame::setDocument(uint64_t a1, WebCore::Document **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  WebCore::Document *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Editor *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  WebCore::RTCController **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::Page *v28;
  WTF *v29;
  void *v30;
  WebCore::HTMLAttachmentElement *v31;
  WebCore::Editor *v32;
  const WTF::StringImpl *v33;
  _QWORD *v34;
  WebCore::HTMLAttachmentElement *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Editor *v41;
  void *v42;
  WebCore::Editor *v43;
  uint64_t v44;
  void *v45;
  WebCore::HTMLAttachmentElement *v46;

  if (*(_BYTE *)(a1 + 604))
    return;
  *(_BYTE *)(a1 + 604) = 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) == a1)
  {
    v23 = *(_QWORD *)(a1 + 24);
    if (v23)
    {
      v24 = *(WebCore::RTCController ***)(v23 + 8);
      if (v24)
      {
        ++*(_DWORD *)v24;
        WebCore::Page::didChangeMainDocument(v24, *a2);
        if (*(_DWORD *)v24 == 1)
        {
          WebCore::Page::~Page((WebCore::Page *)v24);
          WTF::fastFree(v29, v30);
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
    }
    v25 = *(_QWORD *)(a1 + 280);
    ++*(_DWORD *)v25;
    (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 16) + 216))(*(_QWORD *)(v25 + 16));
    if (!*(_DWORD *)v25)
    {
      __break(0xC471u);
      JUMPOUT(0x194442FBCLL);
    }
    --*(_DWORD *)v25;
  }
  v5 = *(_QWORD *)(a1 + 296);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    v6 = *(_QWORD *)(v5 + 2744);
    if (v6)
    {
      v8 = *(unsigned int *)(v6 - 4);
      v9 = (_QWORD *)(v6 + 16 * v8);
      if (*(_DWORD *)(v6 - 12))
      {
        v7 = *(_QWORD **)(v5 + 2744);
        if ((_DWORD)v8)
        {
          v37 = 16 * v8;
          v7 = *(_QWORD **)(v5 + 2744);
          while ((unint64_t)(*v7 + 1) <= 1)
          {
            v7 += 2;
            v37 -= 16;
            if (!v37)
            {
              v7 = v9;
              goto LABEL_7;
            }
          }
        }
        goto LABEL_7;
      }
      v7 = (_QWORD *)(v6 + 16 * v8);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v9 = (_QWORD *)(v6 + 16 * v8);
LABEL_7:
    if (v6)
      v10 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    else
      v10 = 0;
    while (v7 != v10)
    {
      v31 = (WebCore::HTMLAttachmentElement *)v7[1];
      *((_DWORD *)v31 + 6) += 2;
      v46 = v31;
      v32 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(a1 + 296));
      ++*(_DWORD *)v32;
      WebCore::Editor::didRemoveAttachmentElement(v32, v46, v33);
      if (!*(_DWORD *)v32)
      {
        __break(0xC471u);
        JUMPOUT(0x194442FDCLL);
      }
      --*(_DWORD *)v32;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v46);
      v34 = v7 + 2;
      v7 = v9;
      if (v34 != v9)
      {
        v7 = v34;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v9)
          {
            v7 = v9;
            break;
          }
        }
      }
    }
    if (*(_BYTE *)(v5 + 3362) != 2)
      WebCore::Document::willBeRemovedFromFrame((WebCore::Document *)v5);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v11 = *a2;
  if (*a2)
    *((_DWORD *)v11 + 6) += 2;
  v12 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v11;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (*a2)
    WebCore::Document::didBecomeCurrentDocumentInFrame(*a2);
  v13 = *(_QWORD *)(a1 + 296);
  if (v13)
  {
    *(_DWORD *)(v13 + 24) += 2;
    v14 = *(WebCore::Editor **)(v13 + 3056);
    if (!v14)
    {
      v41 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v41, (WebCore::Document *)v13);
      v43 = *(WebCore::Editor **)(v13 + 3056);
      *(_QWORD *)(v13 + 3056) = v41;
      if (v43)
      {
        WebCore::Editor::~Editor(v43, v42);
        if (*(_DWORD *)v44)
        {
          *(_QWORD *)(v44 + 496) = 0;
          *(_OWORD *)(v44 + 464) = 0u;
          *(_OWORD *)(v44 + 480) = 0u;
          *(_OWORD *)(v44 + 432) = 0u;
          *(_OWORD *)(v44 + 448) = 0u;
          *(_OWORD *)(v44 + 400) = 0u;
          *(_OWORD *)(v44 + 416) = 0u;
          *(_OWORD *)(v44 + 368) = 0u;
          *(_OWORD *)(v44 + 384) = 0u;
          *(_OWORD *)(v44 + 336) = 0u;
          *(_OWORD *)(v44 + 352) = 0u;
          *(_OWORD *)(v44 + 304) = 0u;
          *(_OWORD *)(v44 + 320) = 0u;
          *(_OWORD *)(v44 + 272) = 0u;
          *(_OWORD *)(v44 + 288) = 0u;
          *(_OWORD *)(v44 + 240) = 0u;
          *(_OWORD *)(v44 + 256) = 0u;
          *(_OWORD *)(v44 + 208) = 0u;
          *(_OWORD *)(v44 + 224) = 0u;
          *(_OWORD *)(v44 + 176) = 0u;
          *(_OWORD *)(v44 + 192) = 0u;
          *(_OWORD *)(v44 + 144) = 0u;
          *(_OWORD *)(v44 + 160) = 0u;
          *(_OWORD *)(v44 + 112) = 0u;
          *(_OWORD *)(v44 + 128) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 96) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 16) = 0u;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)v44 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v44, v45);
        }
      }
      v14 = *(WebCore::Editor **)(v13 + 3056);
    }
    v15 = *(_DWORD *)v14 + 1;
    *(_DWORD *)v14 = v15;
    v16 = *(_QWORD *)(v13 + 2744);
    if (v16)
    {
      v18 = *(unsigned int *)(v16 - 4);
      v19 = (_QWORD *)(v16 + 16 * v18);
      if (*(_DWORD *)(v16 - 12))
      {
        v17 = *(_QWORD **)(v13 + 2744);
        if ((_DWORD)v18)
        {
          v38 = 16 * v18;
          v17 = *(_QWORD **)(v13 + 2744);
          while ((unint64_t)(*v17 + 1) <= 1)
          {
            v17 += 2;
            v38 -= 16;
            if (!v38)
            {
              v17 = v19;
              goto LABEL_26;
            }
          }
        }
        goto LABEL_26;
      }
      v17 = (_QWORD *)(v16 + 16 * v18);
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v19 = (_QWORD *)(v16 + 16 * v18);
LABEL_26:
    if (v16)
      v20 = (_QWORD *)(v16 + 16 * *(unsigned int *)(v16 - 4));
    else
      v20 = 0;
    if (v20 != v17)
    {
      do
      {
        v35 = (WebCore::HTMLAttachmentElement *)v17[1];
        *((_DWORD *)v35 + 6) += 2;
        v46 = v35;
        WebCore::Editor::didInsertAttachmentElement(v14, v35, a3);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v46);
        v36 = v17 + 2;
        v17 = v19;
        if (v36 != v19)
        {
          v17 = v36;
          while ((unint64_t)(*v17 + 1) <= 1)
          {
            v17 += 2;
            if (v17 == v19)
            {
              v17 = v19;
              break;
            }
          }
        }
      }
      while (v17 != v20);
      v15 = *(_DWORD *)v14;
    }
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x194442F4CLL);
    }
    *(_DWORD *)v14 = v15 - 1;
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v21 = *(_QWORD *)(a1 + 24);
  if (v21
    && *(_QWORD *)(v21 + 8)
    && *(_QWORD *)(a1 + 296)
    && *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) == a1
    && !WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument((WebCore::FrameLoaderStateMachine *)(*(_QWORD *)(a1 + 280) + 64)))
  {
    v27 = *(_QWORD *)(a1 + 24);
    if (v27 && (v28 = *(WebCore::Page **)(v27 + 8)) != 0)
    {
      ++*(_DWORD *)v28;
      WebCore::Page::mainFrameDidChangeToNonInitialEmptyDocument(v28, v26);
      WTF::RefCounted<WebCore::Page>::deref(v28);
    }
    else
    {
      WebCore::Page::mainFrameDidChangeToNonInitialEmptyDocument(0, v26);
    }
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v39 = *(_QWORD *)(a1 + 24);
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
        WebCore::InspectorInstrumentation::frameDocumentUpdatedImpl(*(_QWORD *)(*(_QWORD *)(v40 + 80) + 8), (WebCore::LocalFrame *)a1);
    }
  }
  *(_BYTE *)(a1 + 617) = 0;
  *(_BYTE *)(a1 + 604) = 0;
}

uint64_t *WebCore::Document::didBecomeCurrentDocumentInFrame(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::ScriptController *v5;
  uint64_t *result;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  WebCore::RenderLayerCompositor *v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::DocumentTimelinesController *v31;
  _QWORD *v32;
  _QWORD v33[8];

  v2 = *(_QWORD *)(*((_QWORD *)this + 66) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(WebCore::ScriptController **)(v2 + 304);
  ++*((_DWORD *)v5 + 2);
  result = (uint64_t *)WebCore::ScriptController::updateDocument(v5);
  v7 = *((_DWORD *)v5 + 2);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194443308);
  }
  *((_DWORD *)v5 + 2) = v7 - 1;
  do
  {
    v8 = __ldaxr(v3);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v3));
  if (!v9)
  {
    atomic_store(1u, v3);
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v32 = off_1E31FE290;
    v32[1] = v3;
    v33[0] = v32;
    WTF::ensureOnMainThread();
    result = (uint64_t *)v33[0];
    v33[0] = 0;
    if (result)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  v10 = *((_QWORD *)this + 66);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      if (*((_QWORD *)this + 243) && !*((_BYTE *)this + 3405))
        goto LABEL_54;
      if (*((_BYTE *)this + 3400))
        goto LABEL_55;
      {
        WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
      }
      LODWORD(v33[0]) = 0;
      v12 = qword_1ECE913C0;
      ++*(_DWORD *)qword_1ECE913C0;
      v13 = qword_1ECE913D0;
      v33[1] = v12;
      v33[2] = qword_1ECE913C8;
      ++*(_DWORD *)qword_1ECE913D0;
      v33[3] = v13;
      v14 = qword_1ECE913D8;
      ++*(_DWORD *)qword_1ECE913D8;
      v33[4] = v14;
      v33[5] = qword_1ECE913E0;
      v33[6] = 0;
      v15 = qword_1ECE913F0;
      ++*(_DWORD *)qword_1ECE913F0;
      v33[7] = v15;
      v16 = bmalloc::api::isoAllocate();
      v17 = WebCore::RenderView::RenderView(v16, (uint64_t)this, v33);
      v18 = (void *)*((_QWORD *)this + 243);
      *((_QWORD *)this + 243) = v17;
      if (v18)
        WebCore::RenderObjectDeleter::operator()((uint64_t)this + 1944, (uint64_t)v18);
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v33, v18);
      v19 = *((_QWORD *)this + 243);
      if (v19)
        ++*(_DWORD *)(v19 + 16);
      *((_QWORD *)this + 8) = v19 | ((unint64_t)*((unsigned __int16 *)this + 35) << 48);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        WebCore::Node::notifyInspectorOfRendererChange(this);
      v21 = *(WebCore::RenderLayerCompositor **)(v19 + 400);
      if (v21)
        WebCore::RenderLayerCompositor::setIsInWindow(v21, 1);
      result = (uint64_t *)WebCore::Document::resolveStyle(this, 1);
      v22 = *(_DWORD *)(v19 + 16);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x194443378);
      }
      *(_DWORD *)(v19 + 16) = v22 - 1;
      v10 = *((_QWORD *)this + 66);
      if (v10)
      {
LABEL_55:
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
LABEL_54:
          if (*(_QWORD *)(*(_QWORD *)(v11 + 128) + 8) != v11
            || (v27 = *(_QWORD *)(v11 + 24)) == 0
            || (v28 = *(uint64_t **)(v27 + 8)) == 0
            || (++*(_DWORD *)v28,
                WebCore::Chrome::dispatchDisabledAdaptationsDidChange(v28[6]),
                result = (uint64_t *)WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v28),
                (v29 = *((_QWORD *)this + 66)) != 0)
            && *(_QWORD *)(v29 + 8))
          {
            result = (uint64_t *)WebCore::Document::updateViewportArguments((uint64_t)this);
            v24 = *((_QWORD *)this + 66);
            if (v24)
            {
              v25 = *(_QWORD *)(v24 + 8);
              if (v25)
              {
                v26 = *(_QWORD *)(v25 + 24);
                if (!v26
                  || !*(_QWORD *)(v26 + 8)
                  || *(_QWORD *)(*(_QWORD *)(v25 + 128) + 8) != v25
                  || (result = (uint64_t *)WebCore::Document::wheelEventHandlersChanged((uint64_t)this, 0),
                      (v30 = *((_QWORD *)this + 66)) != 0)
                  && (v25 = *(_QWORD *)(v30 + 8)) != 0)
                {
                  if (*(int *)(v25 + 600) >= 1)
                  {
                    v31 = (WebCore::DocumentTimelinesController *)*((_QWORD *)this + 367);
                    if (v31)
                      WebCore::DocumentTimelinesController::suspendAnimations(v31, v23);
                    return (uint64_t *)WebCore::Document::suspendScheduledTasks((uint64_t)this, 3);
                  }
                  else
                  {
                    WebCore::Document::resumeScheduledTasks((uint64_t)this, 3);
                    result = (uint64_t *)*((_QWORD *)this + 367);
                    if (result)
                      return WebCore::DocumentTimelinesController::resumeAnimations(result);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::updateViewportArguments(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Page *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::LocalFrame *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(this + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(WebCore::Page **)(v3 + 8);
        if (v4)
        {
          v5 = this;
          ++*(_DWORD *)v4;
          this = WebCore::Document::isViewportDocument((WebCore::Document *)this);
          if ((_DWORD)this)
          {
            v8 = *((_QWORD *)v4 + 6);
            v9 = *(_QWORD *)(v5 + 528);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 8);
              if (v10)
              {
                v11 = *(_QWORD *)(v10 + 24);
                if (v11)
                {
                  v12 = *(WebCore::Page **)(v11 + 8);
                  if (v12)
                  {
                    v13 = (*(_DWORD *)v12)++;
                    if (v13)
                    {
                      *(_DWORD *)v12 = v13;
                    }
                    else
                    {
                      WebCore::Page::~Page(v12);
                      WTF::fastFree(v23, v24);
                    }
                  }
                }
              }
            }
            WebCore::Chrome::dispatchViewportPropertiesDidChange(v8);
            v14 = *((_QWORD *)v4 + 6);
            v15 = *(_QWORD *)(v5 + 528);
            if (v15)
            {
              v16 = *(WebCore::LocalFrame **)(v15 + 8);
              if (v16)
              {
                v17 = (unsigned int *)((char *)v16 + 8);
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 + 1, v17));
              }
            }
            else
            {
              v16 = 0;
            }
            this = WebCore::Chrome::didReceiveDocType(v14, v16);
            v19 = (unsigned int *)((char *)v16 + 8);
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v22 = off_1E31FE290;
              v22[1] = v19;
              v25 = (uint64_t)v22;
              WTF::ensureOnMainThread();
              this = v25;
              if (v25)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            }
          }
          if (*(_DWORD *)v4 == 1)
          {
            WebCore::Page::~Page(v4);
            return WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v4;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::resumeScheduledTasks(uint64_t result, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  int v8;

  if (*(unsigned __int8 *)(result + 465) == a2)
  {
    v3 = result;
    if (a2 == 1)
    {
      v4 = *(_DWORD **)(result + 728);
      if (v4)
      {
        ++v4[2];
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 128))(v4);
        if (v4[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        else
          --v4[2];
      }
    }
    if (*(_BYTE *)(v3 + 3438))
    {
      *(_QWORD *)(v3 + 1664) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      result = WebCore::TimerBase::setNextFireTime(v3 + 1640, v5 + 0.0);
    }
    if (*(_DWORD *)(v3 + 2452))
    {
      *(_QWORD *)(v3 + 2408) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      WebCore::TimerBase::setNextFireTime(v3 + 2384, v6 + 0.0);
    }
    v7 = *(_QWORD *)(v3 + 1592);
    if (!v7)
      goto LABEL_13;
    ++*(_DWORD *)(v7 + 8);
    WebCore::ScriptRunner::resume(v7);
    v8 = *(_DWORD *)(v7 + 8);
    if (v8)
    {
      *(_DWORD *)(v7 + 8) = v8 - 1;
LABEL_13:
      WebCore::Document::resumeActiveDOMObjects(v3, a2);
      result = (uint64_t)WebCore::Document::resumeScriptedAnimationControllerCallbacks((WebCore::ScriptedAnimationController *)v3);
      *(_BYTE *)(v3 + 3413) = 0;
      return result;
    }
    result = 286;
    __break(0xC471u);
  }
  return result;
}

void WebCore::Document::implicitOpen(WebCore::Document *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;

  WebCore::ContainerNode::removeChildren((uint64_t)this);
  WebCore::Document::setCompatibilityMode((uint64_t)this, (void *)1);
  v2 = (_DWORD *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v2)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 112))(v2);
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  (*(void (**)(_DWORD **__return_ptr, WebCore::Document *))(*(_QWORD *)this + 520))(&v7, this);
  v3 = v7;
  v7 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v3;
  if (v4)
  {
    v5 = v4[2] - 1;
    if (v4[2] != 1)
    {
LABEL_4:
      v4[2] = v5;
      goto LABEL_5;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    v4 = v7;
    v7 = 0;
    if (v4)
    {
      v5 = v4[2] - 1;
      if (v4[2] != 1)
        goto LABEL_4;
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
LABEL_5:
  if (*((_DWORD *)this + 820))
  {
    v6 = (_DWORD *)*((_QWORD *)this + 91);
    if (v6)
      ++v6[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 136))(v6);
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::Document::setParsing(this, 1);
  WebCore::Document::setReadyState((os_signpost_id_t)this, 0);
}

void WebCore::Document::setParsing(WebCore::Document *this, int a2)
{
  _QWORD *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WebCore::ElementData **v6;
  uint64_t v7;
  WebCore::ElementData **v8;
  WebCore::ElementData *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)this + 3389) = a2;
  if (!a2)
    goto LABEL_17;
  if (!*((_QWORD *)this + 326))
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = 0;
    v5 = (WTF *)*((_QWORD *)this + 326);
    *((_QWORD *)this + 326) = v3;
    if (v5)
    {
      v6 = *(WebCore::ElementData ***)v5;
      if (*(_QWORD *)v5)
      {
        v7 = *((unsigned int *)v6 - 1);
        if ((_DWORD)v7)
        {
          v8 = *(WebCore::ElementData ***)v5;
          do
          {
            v9 = *v8;
            if (*v8 != (WebCore::ElementData *)-1)
            {
              *v8 = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 1)
                  WebCore::ElementData::destroy(v9, v4);
                else
                  --*(_DWORD *)v9;
              }
            }
            ++v8;
            --v7;
          }
          while (v7);
        }
        WTF::fastFree((WTF *)(v6 - 2), v4);
      }
      WTF::fastFree(v5, v4);
    }
    if (!*((_BYTE *)this + 3389))
    {
LABEL_17:
      v10 = *((_QWORD *)this + 66);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 288);
          if (v12)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 344) + 8) + 328) + 296);
            if (v13)
              v13 = *(_QWORD *)(v13 + 1944);
            if (((*(_QWORD *)(v12 + 384) & 0xFFFFFFFFFFFFLL) == 0
               || *(double *)((*(_QWORD *)(v12 + 384) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              && (!v13 || (*(_BYTE *)(v13 + 20) & 0xF8) == 0))
            {
              v14 = *(_QWORD *)(v12 + 464);
              if ((!v14 || !*(_QWORD *)(v14 + 8)) && (!*(_DWORD *)(v12 + 488) || !*(_BYTE *)(v12 + 478)))
              {
                ++*(_DWORD *)(v12 + 8);
                WebCore::LocalFrameView::fireLayoutRelatedMilestonesIfNeeded((WebCore::LocalFrameView *)v12);
                if (*(_DWORD *)(v12 + 8) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
                else
                  --*(_DWORD *)(v12 + 8);
              }
            }
          }
        }
      }
    }
  }
}

WebCore::Editor *WebCore::Editor::Editor(WebCore::Editor *this, WebCore::Document *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t StatusReg;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v25;
  unsigned int v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  *(_DWORD *)this = 0;
  v4 = *((_QWORD *)a2 + 66);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v6 = *(_QWORD *)(v5 + 24)) != 0
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (v25 = *(_QWORD *)(v7 + 152)) != 0)
  {
    v8 = *(_QWORD *)(v25 + 8);
    if (v8)
      goto LABEL_31;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v25;
    v28 = *(unsigned int **)(v25 + 8);
    *(_QWORD *)(v25 + 8) = v8;
    if (!v28)
      goto LABEL_31;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v27);
    }
    v8 = *(_QWORD *)(v25 + 8);
    if (v8)
    {
LABEL_31:
      do
        v26 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v26 + 1, (unsigned int *)v8));
    }
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)this + 1) = v8;
  v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v9;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 75) = 0u;
  *((_QWORD *)this + 12) = WTF::fastMalloc((WTF *)1);
  v11 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v11 = 0;
  v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  v15 = *(unsigned int **)(StatusReg + 736);
  if (!v15)
    v15 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(v11 + 72) = v15;
  *(_QWORD *)(v11 + 32) = off_1E31F7378;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v17 = off_1E33ADCA0;
  v17[1] = WebCore::SpellChecker::timerFiredToProcessQueuedRequest;
  v17[2] = 0;
  v17[3] = v11;
  *(_QWORD *)(v11 + 80) = v17;
  *(_QWORD *)(v11 + 120) = 0;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *((_QWORD *)this + 13) = v11;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v18 = 0;
  v19 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v18[1] = v19;
  *((_QWORD *)this + 14) = v18;
  *((_WORD *)this + 60) = 0;
  *((_BYTE *)this + 122) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *(_QWORD *)((char *)this + 141) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *(_QWORD *)((char *)this + 165) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_BYTE *)this + 212) &= 0xF0u;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_BYTE *)this + 228) &= 0xF0u;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_BYTE *)this + 244) &= 0xF0u;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_BYTE *)this + 260) &= 0xF0u;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_BYTE *)this + 276) &= 0xF0u;
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_BYTE *)this + 292) &= 0xF0u;
  *((_WORD *)this + 148) = 1;
  *((_BYTE *)this + 298) = *((_BYTE *)this + 298) & 0xFC | 1;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_BYTE *)this + 324) &= 0xF0u;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_BYTE *)this + 340) &= 0xF0u;
  *((_QWORD *)this + 43) = 0;
  *((_DWORD *)this + 88) = 0;
  *((_BYTE *)this + 356) &= 0xF0u;
  *((_QWORD *)this + 45) = 0;
  *((_DWORD *)this + 92) = 0;
  *((_BYTE *)this + 372) &= 0xF0u;
  *((_QWORD *)this + 47) = 0;
  *((_DWORD *)this + 96) = 0;
  *((_BYTE *)this + 388) &= 0xF0u;
  *((_QWORD *)this + 49) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_BYTE *)this + 404) &= 0xF0u;
  *((_WORD *)this + 204) = 1;
  *((_BYTE *)this + 410) = *((_BYTE *)this + 410) & 0xFC | 1;
  *((_QWORD *)this + 52) = off_1E3407128;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  v21 = *(unsigned int **)(StatusReg + 736);
  if (!v21)
    v21 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *((_QWORD *)this + 57) = v21;
  *((_QWORD *)this + 52) = off_1E31F7378;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v23 = off_1E33ACCA0;
  v23[1] = WebCore::Editor::editorUIUpdateTimerFired;
  v23[2] = 0;
  v23[3] = this;
  *((_QWORD *)this + 58) = v23;
  *((_QWORD *)this + 60) = 0;
  *((_WORD *)this + 244) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_BYTE *)this + 476) = 0;
  *((_DWORD *)this + 118) = 0;
  return this;
}

void WebCore::DOMImplementation::createDocument(WebCore::MIMETypeRegistry *this@<X0>, WebCore::XMLDocument *a2@<X1>, WebCore::LocalFrame *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  WTF::StringImpl *v15;
  double v16;
  float v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  const WTF::String *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Page *v25;
  WebCore::PluginData *v26;
  const WTF::String *v27;
  uint64_t v28;
  WebCore::Document *v29;
  void *v30;
  __int128 v31;
  WebCore::Document *v32;
  int v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  WebCore::Document *v40;
  uint64_t v41;
  int v42;
  WebCore::Document *v43;
  WTF::StringImpl *v44;
  _BOOL4 v45;
  WebCore::Document *v46;
  WTF::StringImpl *v47;
  WebCore::Document *v48;
  __int128 v49;
  WebCore::Document *v50;
  WebCore::Document *v51;
  WebCore::Document *v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  WTF::StringImpl *v60;
  WebCore::Document *v61;
  _OWORD v62[2];
  _OWORD v63[2];
  WTF::StringImpl *v64[2];
  _BYTE v65[24];
  __int128 v66;
  __int16 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  _OWORD v81[2];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
LABEL_2:
    v13 = 0;
    v14 = 0;
    if (a2)
      goto LABEL_3;
    goto LABEL_5;
  }
  v33 = *(_DWORD *)(v12 + 4);
  if (v33 <= 9)
  {
    if (v33 == 9)
    {
      v53 = *(_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v53 & 0xDF) != 0x54
          || (*(_BYTE *)(v53 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v53 + 2) & 0xDF) != 0x58
          || (*(_BYTE *)(v53 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v53 + 4) & 0xDF) != 0xF
          || (*(_BYTE *)(v53 + 5) & 0xDF) != 0x48
          || (*(_BYTE *)(v53 + 6) & 0xDF) != 0x54
          || (*(_BYTE *)(v53 + 7) & 0xDF) != 0x4D)
        {
          goto LABEL_98;
        }
        v54 = *(unsigned __int8 *)(v53 + 8);
      }
      else
      {
        if ((*(_WORD *)v53 & 0xFFDF) != 0x54
          || (*(_WORD *)(v53 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v53 + 4) & 0xFFDF) != 0x58
          || (*(_WORD *)(v53 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v53 + 8) & 0xFFDF) != 0xF
          || (*(_WORD *)(v53 + 10) & 0xFFDF) != 0x48
          || (*(_WORD *)(v53 + 12) & 0xFFDF) != 0x54
          || (*(_WORD *)(v53 + 14) & 0xFFDF) != 0x4D)
        {
          goto LABEL_98;
        }
        v54 = *(unsigned __int16 *)(v53 + 16);
      }
      if ((v54 & 0xFFFFFFDF) == 0x4C)
      {
        v55 = a5[1];
        *(_OWORD *)v64 = *a5;
        *(_OWORD *)v65 = v55;
        v56 = bmalloc::api::isoAllocate();
        v57 = WebCore::HTMLDocument::HTMLDocument(v56, (uint64_t)a2, (uint64_t)a3, a4, v64, 1u, 0);
        WebCore::ScriptExecutionContext::addToContextsMap((WebCore::ScriptExecutionContext *)(v57 + 192));
        *a6 = v56;
        return;
      }
      goto LABEL_98;
    }
    if (!v33)
      goto LABEL_2;
  }
  else
  {
    if (v33 == 21)
    {
      v58 = *(_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v58 & 0xDF) != 0x41
          || (*(_BYTE *)(v58 + 1) & 0xDF) != 0x50
          || (*(_BYTE *)(v58 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v58 + 3) & 0xDF) != 0x4C
          || (*(_BYTE *)(v58 + 4) & 0xDF) != 0x49
          || (*(_BYTE *)(v58 + 5) & 0xDF) != 0x43
          || (*(_BYTE *)(v58 + 6) & 0xDF) != 0x41
          || (*(_BYTE *)(v58 + 7) & 0xDF) != 0x54
          || (*(_BYTE *)(v58 + 8) & 0xDF) != 0x49
          || (*(_BYTE *)(v58 + 9) & 0xDF) != 0x4F
          || (*(_BYTE *)(v58 + 10) & 0xDF) != 0x4E
          || (*(_BYTE *)(v58 + 11) & 0xDF) != 0xF
          || (*(_BYTE *)(v58 + 12) & 0xDF) != 0x58
          || (*(_BYTE *)(v58 + 13) & 0xDF) != 0x48
          || (*(_BYTE *)(v58 + 14) & 0xDF) != 0x54
          || (*(_BYTE *)(v58 + 15) & 0xDF) != 0x4D
          || (*(_BYTE *)(v58 + 16) & 0xDF) != 0x4C
          || (*(_BYTE *)(v58 + 17) & 0xDF) != 0xB
          || (*(_BYTE *)(v58 + 18) & 0xDF) != 0x58
          || (*(_BYTE *)(v58 + 19) & 0xDF) != 0x4D)
        {
          goto LABEL_98;
        }
        v59 = *(unsigned __int8 *)(v58 + 20);
      }
      else
      {
        if ((*(_WORD *)v58 & 0xFFDF) != 0x41
          || (*(_WORD *)(v58 + 2) & 0xFFDF) != 0x50
          || (*(_WORD *)(v58 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v58 + 6) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v58 + 8) & 0xFFDF) != 0x49
          || (*(_WORD *)(v58 + 10) & 0xFFDF) != 0x43
          || (*(_WORD *)(v58 + 12) & 0xFFDF) != 0x41
          || (*(_WORD *)(v58 + 14) & 0xFFDF) != 0x54
          || (*(_WORD *)(v58 + 16) & 0xFFDF) != 0x49
          || (*(_WORD *)(v58 + 18) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v58 + 20) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v58 + 22) & 0xFFDF) != 0xF
          || (*(_WORD *)(v58 + 24) & 0xFFDF) != 0x58
          || (*(_WORD *)(v58 + 26) & 0xFFDF) != 0x48
          || (*(_WORD *)(v58 + 28) & 0xFFDF) != 0x54
          || (*(_WORD *)(v58 + 30) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v58 + 32) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v58 + 34) & 0xFFDF) != 0xB
          || (*(_WORD *)(v58 + 36) & 0xFFDF) != 0x58
          || (*(_WORD *)(v58 + 38) & 0xFFDF) != 0x4D)
        {
          goto LABEL_98;
        }
        v59 = *(unsigned __int16 *)(v58 + 40);
      }
      if ((v59 & 0xFFFFFFDF) == 0x4C)
      {
        WebCore::XMLDocument::createXHTML(a2, a3, (const WebCore::Settings *)a4, v64);
        v60 = v64[0];
        v64[0] = 0;
        *a6 = v60;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v64);
        return;
      }
      goto LABEL_98;
    }
    if (v33 == 10)
    {
      v34 = *(_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v34 & 0xDF) == 0x54
          && (*(_BYTE *)(v34 + 1) & 0xDF) == 0x45
          && (*(_BYTE *)(v34 + 2) & 0xDF) == 0x58
          && (*(_BYTE *)(v34 + 3) & 0xDF) == 0x54
          && (*(_BYTE *)(v34 + 4) & 0xDF) == 0xF
          && (*(_BYTE *)(v34 + 5) & 0xDF) == 0x50
          && (*(_BYTE *)(v34 + 6) & 0xDF) == 0x4C
          && (*(_BYTE *)(v34 + 7) & 0xDF) == 0x41
          && (*(_BYTE *)(v34 + 8) & 0xDF) == 0x49)
        {
          v35 = *(unsigned __int8 *)(v34 + 9);
          goto LABEL_44;
        }
      }
      else if ((*(_WORD *)v34 & 0xFFDF) == 0x54
             && (*(_WORD *)(v34 + 2) & 0xFFDF) == 0x45
             && (*(_WORD *)(v34 + 4) & 0xFFDF) == 0x58
             && (*(_WORD *)(v34 + 6) & 0xFFDF) == 0x54
             && (*(_WORD *)(v34 + 8) & 0xFFDF) == 0xF
             && (*(_WORD *)(v34 + 10) & 0xFFDF) == 0x50
             && (*(_WORD *)(v34 + 12) & 0xFFDF) == 0x4C
             && (*(_WORD *)(v34 + 14) & 0xFFDF) == 0x41
             && (*(_WORD *)(v34 + 16) & 0xFFDF) == 0x49)
      {
        v35 = *(unsigned __int16 *)(v34 + 18);
LABEL_44:
        if ((v35 & 0xFFFFFFDF) == 0x4E)
        {
          v36 = a5[1];
          v81[0] = *a5;
          v81[1] = v36;
          WebCore::TextDocument::create((uint64_t *)v64, (uint64_t)a2, (uint64_t)a3, a4, v81);
          v37 = v64[0];
          v64[0] = 0;
          *a6 = v37;
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v64);
          return;
        }
      }
    }
  }
LABEL_98:
  *(_DWORD *)v12 += 2;
  v64[0] = (WTF::StringImpl *)v12;
  if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)v64) & 1) != 0)
  {
    v13 = 1;
  }
  {
    if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
      v13 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)v64) != 0;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
    WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
  }
  v44 = v64[0];
  v64[0] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (a2)
    v45 = v13;
  else
    v45 = 0;
  if (v45)
  {
    if (!WebCore::MIMETypeRegistry::isPDFMIMEType(this, a2))
    {
LABEL_112:
      WebCore::ImageDocument::create((WebCore::ImageDocument *)v64, a2, (const WTF::URL *)a4);
      v47 = v64[0];
      v64[0] = 0;
      *a6 = v47;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v64);
      return;
    }
    v13 = 1;
    goto LABEL_3;
  }
  if (a2)
  {
LABEL_3:
    if (*(WebCore::XMLDocument **)(*((_QWORD *)a2 + 16) + 8) != a2
      && WebCore::MIMETypeRegistry::isPDFMIMEType(this, a2)
      && (*(_QWORD *)(*((_QWORD *)a2 + 17) + 704) & 2) != 0)
    {
      goto LABEL_112;
    }
    v14 = 1;
    goto LABEL_5;
  }
  v14 = 0;
LABEL_5:
  v64[0] = 0;
  LOBYTE(v64[1]) = 0;
  *(_QWORD *)v65 = 0;
  WTF::URL::invalidate((WTF::URL *)v65);
  v67 = 0;
  v68 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v18 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v18 += 2;
  v19 = v64[0];
  v64[0] = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  LOBYTE(v64[1]) = 0;
  v20 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v20 += 2;
  v21 = *(WTF::StringImpl **)v65;
  *(_QWORD *)v65 = v20;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  *(_OWORD *)&v65[8] = *(_OWORD *)(a4 + 8);
  v66 = *(_OWORD *)(a4 + 24);
  if (WebCore::MediaPlayer::supportsType((WebCore::MediaPlayer *)v64, v15, *(double *)&v66, v16, v17))
  {
    WebCore::MediaDocument::create((WebCore::MediaDocument *)&v61, (uint64_t **)a2, a3, (const WTF::URL *)a4);
    v46 = v61;
    v61 = 0;
    *a6 = v46;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v61);
    goto LABEL_28;
  }
  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [4]>::contains<WTF::String>((char ***)WebCore::MIMETypeRegistry::isUSDMIMEType(WTF::String const&)::usdMIMETypeSet, (uint64_t *)this))
  {
    {
      if (BYTE5(qword_1ECE90A60))
      {
        WebCore::ModelDocument::create((WebCore::ModelDocument *)&v61, (uint64_t **)a2, a3, (const WTF::URL *)a4);
        v48 = v61;
        v61 = 0;
        *a6 = v48;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v61);
        goto LABEL_28;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
  }
  v23 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v23 + 4) != 27)
    goto LABEL_18;
  v38 = *(_QWORD *)(v23 + 8);
  if ((*(_BYTE *)(v23 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v38 & 0xDF) != 0x41
      || (*(_BYTE *)(v38 + 1) & 0xDF) != 0x50
      || (*(_BYTE *)(v38 + 2) & 0xDF) != 0x50
      || (*(_BYTE *)(v38 + 3) & 0xDF) != 0x4C
      || (*(_BYTE *)(v38 + 4) & 0xDF) != 0x49
      || (*(_BYTE *)(v38 + 5) & 0xDF) != 0x43
      || (*(_BYTE *)(v38 + 6) & 0xDF) != 0x41
      || (*(_BYTE *)(v38 + 7) & 0xDF) != 0x54
      || (*(_BYTE *)(v38 + 8) & 0xDF) != 0x49
      || (*(_BYTE *)(v38 + 9) & 0xDF) != 0x4F
      || (*(_BYTE *)(v38 + 10) & 0xDF) != 0x4E
      || (*(_BYTE *)(v38 + 11) & 0xDF) != 0xF
      || (*(_BYTE *)(v38 + 12) & 0xDF) != 0x58
      || (*(_BYTE *)(v38 + 13) & 0xDF) != 0xD
      || (*(_BYTE *)(v38 + 14) & 0xDF) != 0x46
      || (*(_BYTE *)(v38 + 15) & 0xDF) != 0x54
      || (*(_BYTE *)(v38 + 16) & 0xDF) != 0x50
      || (*(_BYTE *)(v38 + 17) & 0xDF) != 0xD
      || (*(_BYTE *)(v38 + 18) & 0xDF) != 0x44
      || (*(_BYTE *)(v38 + 19) & 0xDF) != 0x49
      || (*(_BYTE *)(v38 + 20) & 0xDF) != 0x52
      || (*(_BYTE *)(v38 + 21) & 0xDF) != 0x45
      || (*(_BYTE *)(v38 + 22) & 0xDF) != 0x43
      || (*(_BYTE *)(v38 + 23) & 0xDF) != 0x54
      || (*(_BYTE *)(v38 + 24) & 0xDF) != 0x4F
      || (*(_BYTE *)(v38 + 25) & 0xDF) != 0x52)
    {
      goto LABEL_18;
    }
    v39 = *(unsigned __int8 *)(v38 + 26);
  }
  else
  {
    if ((*(_WORD *)v38 & 0xFFDF) != 0x41
      || (*(_WORD *)(v38 + 2) & 0xFFDF) != 0x50
      || (*(_WORD *)(v38 + 4) & 0xFFDF) != 0x50
      || (*(_WORD *)(v38 + 6) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v38 + 8) & 0xFFDF) != 0x49
      || (*(_WORD *)(v38 + 10) & 0xFFDF) != 0x43
      || (*(_WORD *)(v38 + 12) & 0xFFDF) != 0x41
      || (*(_WORD *)(v38 + 14) & 0xFFDF) != 0x54
      || (*(_WORD *)(v38 + 16) & 0xFFDF) != 0x49
      || (*(_WORD *)(v38 + 18) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v38 + 20) & 0xFFDF) != 0x4E
      || (*(_WORD *)(v38 + 22) & 0xFFDF) != 0xF
      || (*(_WORD *)(v38 + 24) & 0xFFDF) != 0x58
      || (*(_WORD *)(v38 + 26) & 0xFFDF) != 0xD
      || (*(_WORD *)(v38 + 28) & 0xFFDF) != 0x46
      || (*(_WORD *)(v38 + 30) & 0xFFDF) != 0x54
      || (*(_WORD *)(v38 + 32) & 0xFFDF) != 0x50
      || (*(_WORD *)(v38 + 34) & 0xFFDF) != 0xD
      || (*(_WORD *)(v38 + 36) & 0xFFDF) != 0x44
      || (*(_WORD *)(v38 + 38) & 0xFFDF) != 0x49
      || (*(_WORD *)(v38 + 40) & 0xFFDF) != 0x52
      || (*(_WORD *)(v38 + 42) & 0xFFDF) != 0x45
      || (*(_WORD *)(v38 + 44) & 0xFFDF) != 0x43
      || (*(_WORD *)(v38 + 46) & 0xFFDF) != 0x54
      || (*(_WORD *)(v38 + 48) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v38 + 50) & 0xFFDF) != 0x52)
    {
      goto LABEL_18;
    }
    v39 = *(unsigned __int16 *)(v38 + 52);
  }
  if ((v39 & 0xFFFFFFDF) != 0x59)
  {
LABEL_18:
    if (v14)
    {
      v24 = *((_QWORD *)a2 + 3);
      if (v24)
      {
        v25 = *(WebCore::Page **)(v24 + 8);
        if (v25)
        {
          v26 = (WebCore::PluginData *)WebCore::Page::pluginData(v25);
          if (WebCore::PluginData::supportsWebVisibleMimeType(v26, this, 1))
          {
            WebCore::PluginDocument::create((WebCore::PluginDocument *)&v61, a2, (const WTF::URL *)a4);
            v52 = v61;
            v61 = 0;
            *a6 = v52;
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v61);
            goto LABEL_28;
          }
        }
      }
      if (v13)
      {
        WebCore::ImageDocument::create((WebCore::ImageDocument *)&v61, a2, (const WTF::URL *)a4);
        v51 = v61;
        v61 = 0;
        *a6 = v51;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v61);
        goto LABEL_28;
      }
    }
    if (WebCore::MIMETypeRegistry::isTextMIMEType(this, v22))
    {
      v49 = a5[1];
      v63[0] = *a5;
      v63[1] = v49;
      WebCore::TextDocument::create((uint64_t *)&v61, (uint64_t)a2, (uint64_t)a3, a4, v63);
      v50 = v61;
      v61 = 0;
      *a6 = v50;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v61);
      goto LABEL_28;
    }
    v28 = *(_QWORD *)this;
    if (*(_QWORD *)this && *(_DWORD *)(v28 + 4) == 13)
    {
      v41 = *(_QWORD *)(v28 + 8);
      if ((*(_BYTE *)(v28 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v41 & 0xDF) != 0x49
          || (*(_BYTE *)(v41 + 1) & 0xDF) != 0x4D
          || (*(_BYTE *)(v41 + 2) & 0xDF) != 0x41
          || (*(_BYTE *)(v41 + 3) & 0xDF) != 0x47
          || (*(_BYTE *)(v41 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(v41 + 5) & 0xDF) != 0xF
          || (*(_BYTE *)(v41 + 6) & 0xDF) != 0x53
          || (*(_BYTE *)(v41 + 7) & 0xDF) != 0x56
          || (*(_BYTE *)(v41 + 8) & 0xDF) != 0x47
          || (*(_BYTE *)(v41 + 9) & 0xDF) != 0xB
          || (*(_BYTE *)(v41 + 10) & 0xDF) != 0x58
          || (*(_BYTE *)(v41 + 11) & 0xDF) != 0x4D)
        {
          goto LABEL_25;
        }
        v42 = *(unsigned __int8 *)(v41 + 12);
      }
      else
      {
        if ((*(_WORD *)v41 & 0xFFDF) != 0x49
          || (*(_WORD *)(v41 + 2) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v41 + 4) & 0xFFDF) != 0x41
          || (*(_WORD *)(v41 + 6) & 0xFFDF) != 0x47
          || (*(_WORD *)(v41 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(v41 + 10) & 0xFFDF) != 0xF
          || (*(_WORD *)(v41 + 12) & 0xFFDF) != 0x53
          || (*(_WORD *)(v41 + 14) & 0xFFDF) != 0x56
          || (*(_WORD *)(v41 + 16) & 0xFFDF) != 0x47
          || (*(_WORD *)(v41 + 18) & 0xFFDF) != 0xB
          || (*(_WORD *)(v41 + 20) & 0xFFDF) != 0x58
          || (*(_WORD *)(v41 + 22) & 0xFFDF) != 0x4D)
        {
          goto LABEL_25;
        }
        v42 = *(unsigned __int16 *)(v41 + 24);
      }
      if ((v42 & 0xFFFFFFDF) == 0x4C)
      {
        WebCore::SVGDocument::create(a2, a3, (const WebCore::Settings *)a4, (uint64_t *)&v61);
        v43 = v61;
        v61 = 0;
        *a6 = v43;
        WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v61);
        goto LABEL_28;
      }
    }
LABEL_25:
    if (WebCore::MIMETypeRegistry::isXMLMIMEType(this, v27))
    {
      WebCore::XMLDocument::create(a2, a3, (const WebCore::Settings *)a4, &v61);
      WebCore::Document::overrideMIMEType(v61, this);
      v29 = v61;
      v61 = 0;
      *a6 = v29;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v61);
    }
    else
    {
      v31 = a5[1];
      v62[0] = *a5;
      v62[1] = v31;
      WebCore::HTMLDocument::create((uint64_t *)&v61, (uint64_t)a2, (uint64_t)a3, a4, v62);
      v32 = v61;
      v61 = 0;
      *a6 = v32;
      WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v61);
    }
    goto LABEL_28;
  }
  WebCore::FTPDirectoryDocument::create((WebCore::FTPDirectoryDocument *)&v61, a2, a3, (const WTF::URL *)a4);
  v40 = v61;
  v61 = 0;
  *a6 = v40;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v61);
LABEL_28:
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)v64, v30);
}

uint64_t WebCore::ScriptExecutionContext::addToContextsMap(WebCore::ScriptExecutionContext *this)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;

  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v6 = this;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)this + 28, (uint64_t *)&v6, (uint64_t)&v5);
  v4 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
}

uint64_t WebCore::ScriptController::updatePlatformScriptObjects(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  if (*(_QWORD *)(this + 64))
  {
    v1 = this;
    v2 = WebCore::ScriptController::bindingRootObject((WebCore::ScriptController *)this);
    v3 = *(void **)(v1 + 64);
    if (v2)
      *(_DWORD *)(v2 + 8) += 2;
    v5 = (_DWORD *)v2;
    v6 = v2;
    objc_msgSend(v3, "_setOriginRootObject:andRootObject:", &v6, &v5);
    v4 = v5;
    v5 = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    this = v6;
    v6 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 8);
    }
  }
  return this;
}

void sub_194444E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, _DWORD *a10)
{
  if (a9)
  {
    if (a9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a9 + 8))(a9);
    else
      --a9[2];
  }
  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unsigned int v41;

  v6 = (uint64_t *)result;
  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)result),
        (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a2[1];
  v12 = (v11 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v11 - 1640531527) << 16) ^ ((unsigned __int16)v11
                                                                                             - 1640531527);
  v13 = (v11 >> 37) & 0x7FFF800 ^ ((v12 + WORD2(v11) + (v12 >> 11)) << 16) ^ (v12 + WORD2(v11) + (v12 >> 11));
  v14 = v13 + (unsigned __int16)*a2 + (v13 >> 11);
  v15 = (*a2 >> 5) & 0x7FFF800 ^ (v14 << 16) ^ v14;
  v16 = v15 + (unsigned __int16)WORD2(*a2) + (v15 >> 11);
  v17 = (*a2 >> 37) & 0x7FFF800 ^ (v16 << 16) ^ v16;
  v18 = (v17 + (v17 >> 11)) ^ (8 * (v17 + (v17 >> 11)));
  v19 = (v18 + (v18 >> 5)) ^ (4 * (v18 + (v18 >> 5)));
  v20 = (v19 + (v19 >> 15)) ^ ((v19 + (v19 >> 15)) << 10);
  if (!v20)
    v20 = 0x800000;
  v21 = v20 & v10;
  v22 = (uint64_t *)(v8 + 48 * (v20 & v10));
  v23 = *v22;
  v24 = v22[1];
  v25 = v22[2];
  if (*(_OWORD *)v22 != 0 || v25 != 0)
  {
    v27 = 0;
    result = 1;
    do
    {
      if (v24 == v11 && v23 == *a2 && v25 == a2[2])
      {
        if ((v9 & 1) != 0)
          v41 = 0;
        else
          v41 = *(_DWORD *)(v8 - 4);
        v39 = 0;
        v38 = v8 + 48 * v41;
        goto LABEL_33;
      }
      if (v25 == -1)
        v27 = v22;
      v21 = (v21 + result) & v10;
      v22 = (uint64_t *)(v8 + 48 * v21);
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[2];
      result = (result + 1);
    }
    while (*(_OWORD *)v22 != 0 || v25 != 0);
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      v27[4] = 0;
      --*(_DWORD *)(*v6 - 16);
      v22 = v27;
    }
  }
  v31 = *(_OWORD *)a2;
  v22[2] = a2[2];
  *(_OWORD *)v22 = v31;
  v22[4] = *a3;
  v32 = *v6;
  if (*v6)
    v33 = *(_DWORD *)(v32 - 12) + 1;
  else
    v33 = 1;
  *(_DWORD *)(v32 - 12) = v33;
  v34 = *v6;
  if (*v6)
    v35 = *(_DWORD *)(v34 - 12);
  else
    v35 = 0;
  v36 = (*(_DWORD *)(v34 - 16) + v35);
  v37 = *(unsigned int *)(v34 - 4);
  if (v37 > 0x400)
  {
    if (v37 > 2 * v36)
      goto LABEL_32;
    goto LABEL_38;
  }
  if (3 * v37 <= 4 * v36)
  {
    if (!(_DWORD)v37)
    {
      v40 = 8;
      goto LABEL_39;
    }
LABEL_38:
    v40 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_39:
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v6, v40, v22);
    v22 = (uint64_t *)result;
    v34 = *v6;
    if (*v6)
      LODWORD(v37) = *(_DWORD *)(v34 - 4);
    else
      LODWORD(v37) = 0;
  }
LABEL_32:
  v38 = v34 + 48 * v37;
  v39 = 1;
LABEL_33:
  *(_QWORD *)a4 = v22;
  *(_QWORD *)(a4 + 8) = v38;
  *(_BYTE *)(a4 + 16) = v39;
  return result;
}

uint64_t WebCore::Chrome::dispatchDisabledAdaptationsDidChange(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 464))(*(_QWORD *)(a1 + 16));
}

unsigned int *WebCore::Page::mainFrameDidChangeToNonInitialEmptyDocument(WebCore::Page *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  WebCore::UserStyleSheet *v8;
  uint64_t v9;

  if (*(_BYTE *)(*((_QWORD *)this + 20) + 144))
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 20);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *((_DWORD *)this + 411);
  if (v6)
  {
    v8 = (WebCore::UserStyleSheet *)*((_QWORD *)this + 204);
    v9 = 104 * v6;
    do
    {
      WebCore::Page::injectUserStyleSheet(this, v8);
      v8 = (WebCore::UserStyleSheet *)((char *)v8 + 104);
      v9 -= 104;
    }
    while (v9);
  }
  result = (unsigned int *)WTF::Vector<WebCore::UserStyleSheet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebCore::Page *)((char *)this + 1632), a2);
  if (v3)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  return result;
}

WTF *WTF::Vector<WebCore::UserStyleSheet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, WTF::StringImpl *a2)
{
  WTF *v2;
  unsigned int v3;
  WebCore::UserStyleSheet *v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((_DWORD *)result + 3);
    if (v3)
    {
      v4 = *(WebCore::UserStyleSheet **)result;
      v5 = 104 * v3;
      do
      {
        WebCore::UserStyleSheet::~UserStyleSheet(v4, a2);
        v4 = (WebCore::UserStyleSheet *)(v6 + 104);
        v5 -= 104;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

uint64_t WebCore::LocalFrame::window(WebCore::LocalFrame *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 37);
  if (v1)
    return *(_QWORD *)(v1 + 696);
  else
    return 0;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 48);
    do
    {
      *(v12 - 4) = 0;
      *(v12 - 3) = 0;
      *(v12 - 2) = 0;
      *v12 = 0;
      v12 += 6;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 48 * v13);
      v16 = v15[2];
      if (v16 != -1)
      {
        v18 = *v15;
        v17 = v15[1];
        if (v16 || *(_OWORD *)v15 != 0)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17 - 1640531527);
          v24 = (v17 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v17) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v17) + (v23 >> 11));
          v25 = (v18 >> 5) & 0x7FFF800 ^ ((v24 + (unsigned __int16)v18 + (v24 >> 11)) << 16) ^ (v24 + (unsigned __int16)v18 + (v24 >> 11));
          v26 = (v18 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v18) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v18) + (v25 >> 11));
          v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
          v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
          v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
          if (v29)
            v30 = v29;
          else
            v30 = 0x800000;
          do
          {
            v31 = v30 & v21;
            v32 = v20 + 48 * v31;
            v10 = (void *)(*(_QWORD *)v32 | *(_QWORD *)(v32 + 8));
            v30 = ++v22 + v31;
          }
          while (*(_OWORD *)v32 != 0 || *(_QWORD *)(v32 + 16) != 0);
          v34 = *(_OWORD *)v15;
          v35 = *((_OWORD *)v15 + 2);
          *(_OWORD *)(v32 + 16) = *((_OWORD *)v15 + 1);
          *(_OWORD *)(v32 + 32) = v35;
          *(_OWORD *)v32 = v34;
          if (v15 == (unint64_t *)a3)
            v14 = v32;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v3, 0);
}

BOOL WebCore::ResourceRequestBase::isEmpty(WebCore::ResourceRequestBase *this)
{
  char v2;

  v2 = *((_BYTE *)this + 184);
  if ((v2 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v2 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v2;
  }
  if ((v2 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return !*(_QWORD *)this || *(_DWORD *)(*(_QWORD *)this + 4) == 0;
}

_DWORD *WebCore::JSCredentialsContainer::destroy(WebCore::JSCredentialsContainer *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::SWServer::registrationStoreImportComplete(WebCore::SWServer *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD *v16;
  int v17;
  int v18;
  _QWORD *v19;
  int v20;
  int v21;

  *((_BYTE *)this + 176) = 1;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 17) + 16))(*((_QWORD *)this + 17));
  v2 = (_QWORD *)*((_QWORD *)this + 23);
  v19 = v2;
  v4 = *((_DWORD *)this + 48);
  v3 = *((unsigned int *)this + 49);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v20 = v4;
  v21 = v3;
  if ((_DWORD)v3)
  {
    v11 = 8 * v3;
    do
    {
      v12 = *v2;
      *v2++ = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v11 -= 8;
    }
    while (v11);
  }
  WebCore::SWServer::performGetOriginsWithRegistrationsCallbacks(this);
  v5 = (_QWORD *)*((_QWORD *)this + 29);
  v16 = v5;
  v6 = *((unsigned int *)this + 61);
  v17 = *((_DWORD *)this + 60);
  v18 = v6;
  v15[0] = 0;
  *((_QWORD *)this + 29) = 0;
  v15[1] = 0;
  *((_QWORD *)this + 30) = 0;
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v7);
  if ((_DWORD)v6)
  {
    v13 = 8 * v6;
    do
    {
      v14 = *v5;
      *v5++ = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v13 -= 8;
    }
    while (v13);
  }
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v8);
  return WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
}

uint64_t WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_QWORD *WebCore::SWServer::performGetOriginsWithRegistrationsCallbacks(_QWORD *this)
{
  _QWORD *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE v17[24];
  _QWORD v18[2];
  WTF::StringImpl *v19;
  _QWORD v20[2];
  WTF::StringImpl *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 53))
  {
    v1 = this;
    v26 = 0;
    WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,WTF::WeakRef<WebCore::SWServerRegistration,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WTF::WeakRef<WebCore::SWServerRegistration,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::keys((uint64_t)&v22, this + 4);
    v3 = v23;
    v4 = v25;
    if (v23 != v25)
    {
      v5 = v24;
      do
      {
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v26, v3, (uint64_t)v27);
        v20[0] = WTF::URL::protocol((WTF::URL *)(v3 + 32));
        v20[1] = v6;
        WTF::StringView::toString((uint64_t *)&v21, (WTF::StringView *)v20);
        v18[0] = WTF::URL::host((WTF::URL *)(v3 + 32));
        v18[1] = v7;
        WTF::StringView::toString((uint64_t *)&v19, (WTF::StringView *)v18);
        v8 = WTF::URL::port((WTF::URL *)(v3 + 32));
        WebCore::SecurityOriginData::SecurityOriginData((uint64_t)v27, v21, v19, v8);
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v26, (uint64_t)v27, (uint64_t)v17);
        if (v28 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E3482200[v28])(v17, v27);
        v28 = -1;
        v9 = v19;
        v19 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = v21;
        v21 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v2);
          else
            *(_DWORD *)v10 -= 2;
        }
        while (1)
        {
          v3 += 80;
          if (v3 == v5)
            break;
          if (!WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,WTF::WeakRef<WebCore::SWServerRegistration,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,WTF::WeakRef<WebCore::SWServerRegistration,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,WTF::WeakRef<WebCore::SWServerRegistration,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WTF::WeakRef<WebCore::SWServerRegistration,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::isEmptyOrDeletedBucket(v3))
            goto LABEL_16;
        }
        v3 = v5;
LABEL_16:
        ;
      }
      while (v3 != v4);
    }
    v11 = (uint64_t *)v1[25];
    v22 = v11;
    v13 = *((_DWORD *)v1 + 52);
    v12 = *((unsigned int *)v1 + 53);
    v1[25] = 0;
    v1[26] = 0;
    v23 = __PAIR64__(v12, v13);
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      do
      {
        v15 = *v11++;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, &v26);
        v14 -= 8;
      }
      while (v14);
    }
    WTF::Vector<WTF::Function<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
    return WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>::~HashSet(&v26, v16);
  }
  return this;
}

void WebCore::JSDOMWindowBase::~JSDOMWindowBase(WebCore::JSDOMWindowBase *this)
{
  _DWORD *v2;
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;

  v2 = (_DWORD *)*((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)v4);
      WTF::fastFree(v7, v8);
    }
  }
  WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(this);
}

{
  _DWORD *v2;
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;

  v2 = (_DWORD *)*((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)v4);
      WTF::fastFree(v7, v8);
    }
  }
  WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(this);
}

void WebCore::LocalDOMWindow::~LocalDOMWindow(WebCore::LocalDOMWindow *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::LocalDOMWindow::~LocalDOMWindow(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::CookieStore *v8;
  _DWORD *v9;
  WebCore::Performance *v10;
  _DWORD *v11;
  WebCore::Storage *v12;
  WebCore::Storage *v13;
  WTF::StringImpl *v14;
  WebCore::Navigation *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF *v19;
  _DWORD *v20;
  WebCore::Screen *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  WTF *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  bmalloc::api *v32;
  void *v33;
  bmalloc::api *v34;
  void *v35;
  bmalloc::api *v36;
  void *v37;
  bmalloc::api *v38;
  void *v39;
  bmalloc::api *v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  bmalloc::api *v54;
  void *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t i;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  WTF *v81;
  _DWORD *v82;
  uint64_t v83;
  WTF *v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  _DWORD *v88;
  uint64_t v89;
  WTF *v90;
  _DWORD *v91;
  uint64_t v92;
  WTF *v93;
  _DWORD *v94;
  uint64_t v95;
  WTF *v96;
  WTF *v97;
  uint64_t v98;
  WTF *v99;
  _DWORD *v100;
  uint64_t v101;
  WTF *v102;
  WTF *v103;
  WTF *v104;
  WTF *v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  _QWORD *v111;

  if (*((_BYTE *)this + 89))
  {
    WebCore::LocalDOMWindow::willDestroyCachedFrame(this);
  }
  else
  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E33FF7D8;
    v111 = v2;
    WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 12, &v111);
    v4 = v111;
    v111 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  if ((byte_1ECE8389B & 1) != 0)
  {
    v5 = qword_1ECE838A8;
    if (qword_1ECE838A8)
    {
      v77 = (_QWORD *)WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Layout::Box const*>>,WebCore::Layout::Box const*>(qword_1ECE838A8, (uint64_t)this);
      if (v77)
      {
        v3 = v77;
        if (v77 != (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4)))
        {
          WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(&qword_1ECE838A8, v77);
          WebCore::LocalDOMWindow::enableSuddenTermination(*((_QWORD *)this + 9));
        }
      }
    }
  }
  else
  {
    qword_1ECE838A8 = 0;
    byte_1ECE8389B = 1;
  }
  if ((byte_1ECE8389A & 1) != 0)
  {
    v6 = qword_1ECE838A0;
    if (qword_1ECE838A0)
    {
      v78 = (_QWORD *)WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Layout::Box const*>>,WebCore::Layout::Box const*>(qword_1ECE838A0, (uint64_t)this);
      if (v78)
      {
        v3 = v78;
        if (v78 != (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4)))
        {
          WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(&qword_1ECE838A0, v78);
          WebCore::LocalDOMWindow::enableSuddenTermination(*((_QWORD *)this + 9));
        }
      }
    }
  }
  else
  {
    qword_1ECE838A0 = 0;
    byte_1ECE8389A = 1;
  }
  if (*((_QWORD *)this + 30))
  {
    {
      WebCore::GamepadManager::singleton(void)::sharedManager = (uint64_t)&off_1E31FCE70;
      unk_1EE2EF6A0 = 0;
      byte_1EE2EF6A8 = 0;
      unk_1EE2EF6B0 = 0u;
      unk_1EE2EF6C0 = 0u;
      unk_1EE2EF6D0 = 0u;
      unk_1EE2EF6E0 = 0u;
    }
    WebCore::GamepadManager::unregisterDOMWindow((WebCore::GamepadManager *)&WebCore::GamepadManager::singleton(void)::sharedManager, this);
  }
  WTF::removeLanguageChangeObserver(this, v3);
  {
    WebCore::windowsInterestedInStorageEvents(void)::set = 0;
    *(_QWORD *)algn_1EE2F7E78 = 0;
  }
  WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>((uint64_t)&WebCore::windowsInterestedInStorageEvents(void)::set, this);
  v8 = (WebCore::CookieStore *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 1)
    {
      WebCore::CookieStore::~CookieStore(v8, v7);
      bmalloc::api::isoDeallocate(v32, v33);
    }
    else
    {
      --*((_DWORD *)v8 + 6);
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[4];
  }
  v10 = (WebCore::Performance *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 4) == 1)
    {
      WebCore::Performance::~Performance(v10, v7);
      bmalloc::api::isoDeallocate(v34, v35);
    }
    else
    {
      --*((_DWORD *)v10 + 4);
    }
  }
  v11 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[4];
  }
  v12 = (WebCore::Storage *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
    {
      WebCore::Storage::~Storage(v12);
      bmalloc::api::isoDeallocate(v36, v37);
    }
    else
    {
      --*((_DWORD *)v12 + 2);
    }
  }
  v13 = (WebCore::Storage *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
    {
      WebCore::Storage::~Storage(v13);
      bmalloc::api::isoDeallocate(v38, v39);
    }
    else
    {
      --*((_DWORD *)v13 + 2);
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WebCore::Navigation *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 1)
    {
      WebCore::Navigation::~Navigation(v15, v7);
      bmalloc::api::isoDeallocate(v40, v41);
    }
    else
    {
      --*((_DWORD *)v15 + 6);
    }
  }
  v16 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v16)
    WTF::RefCounted<WebCore::DOMApplicationCache>::deref(v16 + 24, v7);
  v17 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v17)
  {
    if (v17[2] == 1)
    {
      v42 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v42)
      {
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          v79 = v17;
          atomic_store(1u, v42);
          v103 = (WTF *)v42;
          v80 = v42[7];
          if ((_DWORD)v80)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v103 + 2), (WTF::StringImpl *)(*((_QWORD *)v103 + 2) + 32 * v80));
          v81 = (WTF *)*((_QWORD *)v103 + 2);
          if (v81)
          {
            *((_QWORD *)v103 + 2) = 0;
            *((_DWORD *)v103 + 6) = 0;
            WTF::fastFree(v81, v7);
          }
          WTF::fastFree(v103, v7);
          v17 = v79;
        }
      }
      if (*(_QWORD *)v17)
      {
        *(_QWORD *)(*(_QWORD *)v17 + 8) = 3;
        *(_QWORD *)v17 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v17, v7);
    }
    else
    {
      --v17[2];
    }
  }
  v18 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v18)
  {
    if (v18[2] == 1)
    {
      v45 = (unsigned int *)*((_QWORD *)v18 + 2);
      *((_QWORD *)v18 + 2) = 0;
      if (v45)
      {
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          v82 = v18;
          atomic_store(1u, v45);
          v104 = (WTF *)v45;
          v83 = v45[7];
          if ((_DWORD)v83)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v104 + 2), (WTF::StringImpl *)(*((_QWORD *)v104 + 2) + 32 * v83));
          v84 = (WTF *)*((_QWORD *)v104 + 2);
          if (v84)
          {
            *((_QWORD *)v104 + 2) = 0;
            *((_DWORD *)v104 + 6) = 0;
            WTF::fastFree(v84, v7);
          }
          WTF::fastFree(v104, v7);
          v18 = v82;
        }
      }
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
        *(_QWORD *)v18 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v18, v7);
    }
    else
    {
      --v18[2];
    }
  }
  v19 = (WTF *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      v48 = (unsigned int *)*((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = 0;
      if (v48)
      {
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          v85 = v19;
          atomic_store(1u, v48);
          v105 = (WTF *)v48;
          v86 = v48[7];
          if ((_DWORD)v86)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v105 + 2), (WTF::StringImpl *)(*((_QWORD *)v105 + 2) + 32 * v86));
          v87 = (WTF *)*((_QWORD *)v105 + 2);
          if (v87)
          {
            *((_QWORD *)v105 + 2) = 0;
            *((_DWORD *)v105 + 6) = 0;
            WTF::fastFree(v87, v7);
          }
          WTF::fastFree(v105, v7);
          v19 = v85;
        }
      }
      WTF::fastFree(v19, v7);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  v20 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v20)
  {
    if (v20[2] == 1)
    {
      v51 = (unsigned int *)*((_QWORD *)v20 + 2);
      *((_QWORD *)v20 + 2) = 0;
      if (v51)
      {
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          v88 = v20;
          atomic_store(1u, v51);
          v106 = (WTF *)v51;
          v89 = v51[7];
          if ((_DWORD)v89)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v106 + 2), (WTF::StringImpl *)(*((_QWORD *)v106 + 2) + 32 * v89));
          v90 = (WTF *)*((_QWORD *)v106 + 2);
          if (v90)
          {
            *((_QWORD *)v106 + 2) = 0;
            *((_DWORD *)v106 + 6) = 0;
            WTF::fastFree(v90, v7);
          }
          WTF::fastFree(v106, v7);
          v20 = v88;
        }
      }
      if (*(_QWORD *)v20)
      {
        *(_QWORD *)(*(_QWORD *)v20 + 8) = 3;
        *(_QWORD *)v20 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v20, v7);
    }
    else
    {
      --v20[2];
    }
  }
  v21 = (WebCore::Screen *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 2) == 1)
    {
      WebCore::Screen::~Screen(v21, v7);
      bmalloc::api::isoDeallocate(v54, v55);
    }
    else
    {
      --*((_DWORD *)v21 + 2);
    }
  }
  v22 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v22)
  {
    if (v22[2] == 1)
    {
      v56 = (unsigned int *)*((_QWORD *)v22 + 2);
      *((_QWORD *)v22 + 2) = 0;
      if (v56)
      {
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          v91 = v22;
          atomic_store(1u, v56);
          v107 = (WTF *)v56;
          v92 = v56[7];
          if ((_DWORD)v92)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v107 + 2), (WTF::StringImpl *)(*((_QWORD *)v107 + 2) + 32 * v92));
          v93 = (WTF *)*((_QWORD *)v107 + 2);
          if (v93)
          {
            *((_QWORD *)v107 + 2) = 0;
            *((_DWORD *)v107 + 6) = 0;
            WTF::fastFree(v93, v7);
          }
          WTF::fastFree(v107, v7);
          v22 = v91;
        }
      }
      if (*(_QWORD *)v22)
      {
        *(_QWORD *)(*(_QWORD *)v22 + 8) = 3;
        *(_QWORD *)v22 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v22, v7);
    }
    else
    {
      --v22[2];
    }
  }
  v23 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v23)
  {
    if (v23[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
    else
      --v23[4];
  }
  v24 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v24)
  {
    if (v24[2] == 1)
    {
      v59 = (unsigned int *)*((_QWORD *)v24 + 2);
      *((_QWORD *)v24 + 2) = 0;
      if (v59)
      {
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          v94 = v24;
          atomic_store(1u, v59);
          v108 = (WTF *)v59;
          v95 = v59[7];
          if ((_DWORD)v95)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v108 + 2), (WTF::StringImpl *)(*((_QWORD *)v108 + 2) + 32 * v95));
          v96 = (WTF *)*((_QWORD *)v108 + 2);
          if (v96)
          {
            *((_QWORD *)v108 + 2) = 0;
            *((_DWORD *)v108 + 6) = 0;
            WTF::fastFree(v96, v7);
          }
          WTF::fastFree(v108, v7);
          v24 = v94;
        }
      }
      if (*(_QWORD *)v24)
      {
        *(_QWORD *)(*(_QWORD *)v24 + 8) = 3;
        *(_QWORD *)v24 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v24, v7);
    }
    else
    {
      --v24[2];
    }
  }
  v25 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v62 = (unsigned int *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = 0;
      if (v62)
      {
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          v97 = v25;
          atomic_store(1u, v62);
          v109 = (WTF *)v62;
          v98 = v62[7];
          if ((_DWORD)v98)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v109 + 2), (WTF::StringImpl *)(*((_QWORD *)v109 + 2) + 32 * v98));
          v99 = (WTF *)*((_QWORD *)v109 + 2);
          if (v99)
          {
            *((_QWORD *)v109 + 2) = 0;
            *((_DWORD *)v109 + 6) = 0;
            WTF::fastFree(v99, v7);
          }
          WTF::fastFree(v109, v7);
          v25 = v97;
        }
      }
      WTF::fastFree(v25, v7);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v26)
  {
    if (v26[2] == 1)
    {
      v65 = (unsigned int *)*((_QWORD *)v26 + 2);
      *((_QWORD *)v26 + 2) = 0;
      if (v65)
      {
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          v100 = v26;
          atomic_store(1u, v65);
          v110 = (WTF *)v65;
          v101 = v65[7];
          if ((_DWORD)v101)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v110 + 2), (WTF::StringImpl *)(*((_QWORD *)v110 + 2) + 32 * v101));
          v102 = (WTF *)*((_QWORD *)v110 + 2);
          if (v102)
          {
            *((_QWORD *)v110 + 2) = 0;
            *((_DWORD *)v110 + 6) = 0;
            WTF::fastFree(v102, v7);
          }
          WTF::fastFree(v110, v7);
          v26 = v100;
        }
      }
      if (*(_QWORD *)v26)
      {
        *(_QWORD *)(*(_QWORD *)v26 + 8) = 3;
        *(_QWORD *)v26 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v26, v7);
    }
    else
    {
      --v26[2];
    }
  }
  v27 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v27)
    WTF::RefCounted<WebCore::History>::deref(v27 + 8, v7);
  v28 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[4];
  }
  v29 = *((_QWORD *)this + 12);
  if (v29)
  {
    v68 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v68)
    {
      for (i = 0; i != v68; ++i)
      {
        v70 = *(unsigned int **)(v29 + 8 * i);
        if (v70 != (unsigned int *)-1)
        {
          *(_QWORD *)(v29 + 8 * i) = 0;
          if (v70)
          {
            do
            {
              v71 = __ldaxr(v70);
              v72 = v71 - 1;
            }
            while (__stlxr(v72, v70));
            if (!v72)
            {
              atomic_store(1u, v70);
              v73 = v68;
              WTF::fastFree((WTF *)v70, v7);
              v68 = v73;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v29 - 16), v7);
  }
  v30 = *((_QWORD *)this + 10);
  if (v30)
  {
    v74 = *(unsigned int *)(v30 - 4);
    if ((_DWORD)v74)
    {
      v75 = (uint64_t *)(v30 + 16);
      do
      {
        if (*(v75 - 2) != -1)
        {
          v76 = *v75;
          *v75 = 0;
          if (v76)
            (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        }
        v75 += 3;
        --v74;
      }
      while (v74);
    }
    WTF::fastFree((WTF *)(v30 - 16), v7);
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::LocalDOMWindow *)((char *)this + 64), v7);
  WebCore::DOMWindow::~DOMWindow(this, v31);
}

void WebCore::DOMWindow::~DOMWindow(WebCore::DOMWindow *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  _DWORD *v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E33FE080;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v9 = v3;
          v10 = (WTF *)v4;
          atomic_store(1u, v4);
          v7 = v4[7];
          if ((_DWORD)v7)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v7));
          v8 = (WTF *)*((_QWORD *)v10 + 2);
          if (v8)
          {
            *((_QWORD *)v10 + 2) = 0;
            *((_DWORD *)v10 + 6) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v10, a2);
          v3 = v9;
        }
      }
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
        *(_QWORD *)v3 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --v3[2];
    }
  }
  WebCore::EventTarget::~EventTarget(this, a2);
}

WebCore::ReportingScope *WebCore::Document::removeAllEventListeners(WebCore::Document *this, void *a2)
{
  WebCore::ReportingScope *result;
  void *v4;
  WebCore::LocalDOMWindow *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;
  WebCore::ReportingScope **v14;

  result = (WebCore::ReportingScope *)WebCore::EventTarget::removeAllEventListeners((uint64_t)this, a2);
  v5 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
  if (v5)
  {
    ++*((_DWORD *)v5 + 6);
    result = (WebCore::ReportingScope *)WebCore::LocalDOMWindow::removeAllEventListeners(v5, v4);
    if (*((_DWORD *)v5 + 6) == 1)
      result = (WebCore::ReportingScope *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v5 + 72))(v5);
    else
      --*((_DWORD *)v5 + 6);
  }
  v6 = *((_QWORD *)this + 398);
  if (!v6)
  {
    v6 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v6 + 16) = 1;
    *(_QWORD *)v6 = &off_1E33A18C0;
    *(_QWORD *)(v6 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, (WebCore::Document *)((char *)this + 192));
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = &off_1E33662E0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 93) = 0u;
    result = (WebCore::ReportingScope *)*((_QWORD *)this + 398);
    *((_QWORD *)this + 398) = v6;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
      {
        WebCore::ReportingScope::~ReportingScope(result, (WTF::StringImpl *)v4);
        result = (WebCore::ReportingScope *)bmalloc::api::isoDeallocate(v12, v13);
        v6 = *((_QWORD *)this + 398);
      }
      else
      {
        --*((_DWORD *)result + 4);
      }
    }
  }
  ++*(_DWORD *)(v6 + 16);
  if (*(_DWORD *)(v6 + 40))
  {
    v14 = (WebCore::ReportingScope **)(v6 + 32);
    if (*(_DWORD *)(v6 + 44))
    {
      WTF::Vector<WTF::Ref<WebCore::ReportingObserver,WTF::RawPtrTraits<WebCore::ReportingObserver>,WTF::DefaultRefDerefTraits<WebCore::ReportingObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(v6 + 32), 0);
      v14 = (WebCore::ReportingScope **)(v6 + 32);
    }
    result = *v14;
    if (*v14)
    {
      *(_QWORD *)(v6 + 32) = 0;
      *(_DWORD *)(v6 + 40) = 0;
      result = (WebCore::ReportingScope *)WTF::fastFree(result, v4);
    }
  }
  if (*(_DWORD *)(v6 + 16) == 1)
  {
    WebCore::ReportingScope::~ReportingScope((WebCore::ReportingScope *)v6, (WTF::StringImpl *)v4);
    result = (WebCore::ReportingScope *)bmalloc::api::isoDeallocate(v10, v11);
  }
  else
  {
    --*(_DWORD *)(v6 + 16);
  }
  v7 = *((_QWORD *)this + 10);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    do
    {
      v8 = v7;
      result = (WebCore::ReportingScope *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_WORD *)(v7 + 28) & 4) != 0 && (v7 = *(_QWORD *)(v7 + 80)) != 0 || (v7 = *(_QWORD *)(v8 + 56)) != 0)
      {
LABEL_16:
        *(_DWORD *)(v7 + 24) += 2;
      }
      else
      {
        v9 = v8;
        while (1)
        {
          v9 = *(_QWORD *)(v9 + 32);
          if (!v9)
            break;
          v7 = *(_QWORD *)(v9 + 56);
          if (v7)
            goto LABEL_16;
        }
        v7 = 0;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          result = (WebCore::ReportingScope *)WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    while (v7);
  }
  return result;
}

uint64_t *WebCore::LocalDOMWindow::removeAllEventListeners(WebCore::LocalDOMWindow *this, void *a2)
{
  uint64_t *result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WebCore::LocalDOMWindow *v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WebCore::LocalDOMWindow *v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::Page *v40;
  unsigned int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::Page *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;

  WebCore::EventTarget::removeAllEventListeners((uint64_t)this, a2);
  WebCore::LocalDOMWindow::stopListeningForDeviceOrientationIfNecessary(this);
  result = (uint64_t *)WebCore::LocalDOMWindow::stopListeningForDeviceMotionIfNecessary(this);
  if (*((_DWORD *)this + 58))
  {
    *((_DWORD *)this + 58) = 1;
    result = (uint64_t *)WebCore::LocalDOMWindow::decrementScrollEventListenersCount((uint64_t)this);
  }
  *((_DWORD *)this + 59) = 0;
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
        goto LABEL_80;
      *(_DWORD *)(v6 - 264) += 2;
      result = (uint64_t *)WebCore::Document::didRemoveEventTargetNode((WebCore::Document *)(v6 - 288), (WebCore::Node *)(v6 - 288));
      if (*(_DWORD *)(v6 - 264) == 2)
      {
        if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288));
      }
      else
      {
        *(_DWORD *)(v6 - 264) -= 2;
      }
    }
  }
  v7 = *((_QWORD *)this + 34);
  if (v7)
  {
    ++*(_DWORD *)(v7 + 16);
    result = (uint64_t *)WebCore::EventTarget::removeAllEventListeners(v7 + 24, v4);
    v9 = (uint64_t **)(v7 + 208);
    v10 = *(_QWORD *)(v7 + 208);
    if (v10)
    {
      do
      {
        WebCore::PerformanceObserver::disassociate(*(WebCore::PerformanceObserver **)v10, v8);
        v10 = *(_QWORD *)(v10 + 16);
      }
      while (v10);
      result = *v9;
      if (*v9)
      {
        do
        {
          v14 = (uint64_t *)result[2];
          v15 = WTF::Ref<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>::~Ref(result, v8);
          WTF::fastFree((WTF *)v15, v16);
          result = v14;
        }
        while (v14);
      }
    }
    v11 = *(_QWORD *)(v7 + 200);
    if (v11)
    {
      *(_QWORD *)(v7 + 200) = 0;
      result = (uint64_t *)WTF::fastFree((WTF *)(v11 - 16), v8);
    }
    *v9 = 0;
    *(_QWORD *)(v7 + 216) = 0;
    if (*(_DWORD *)(v7 + 16) == 1)
    {
      WebCore::Performance::~Performance((WebCore::Performance *)v7, v8);
      result = (uint64_t *)bmalloc::api::isoDeallocate(v12, v13);
    }
    else
    {
      --*(_DWORD *)(v7 + 16);
    }
  }
  if ((byte_1ECE8389B & 1) != 0)
  {
    if (qword_1ECE838A8)
    {
      v17 = *(_DWORD *)(qword_1ECE838A8 - 8);
      v18 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(WebCore::LocalDOMWindow **)(qword_1ECE838A8 + 16 * v21);
      if (v22 == this)
      {
LABEL_31:
        if (v21 != *(_DWORD *)(qword_1ECE838A8 - 4))
        {
          *(_QWORD *)(qword_1ECE838A8 + 16 * v21) = -1;
          ++*(_DWORD *)(qword_1ECE838A8 - 16);
          if (qword_1ECE838A8)
            v24 = *(_DWORD *)(qword_1ECE838A8 - 12) - 1;
          else
            v24 = -1;
          *(_DWORD *)(qword_1ECE838A8 - 12) = v24;
          if (qword_1ECE838A8)
          {
            v33 = *(_DWORD *)(qword_1ECE838A8 - 4);
            if (6 * *(_DWORD *)(qword_1ECE838A8 - 12) < v33 && v33 >= 9)
              result = (uint64_t *)WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(&qword_1ECE838A8, v33 >> 1, 0);
          }
          v35 = *((_QWORD *)this + 9);
          if (v35)
          {
            v36 = *(_QWORD *)(v35 + 8);
            if (v36)
            {
              if (*(_BYTE *)(v36 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x194446B68);
              }
              v37 = *(_QWORD *)(v36 + 240);
              if (v37)
              {
                v38 = *(_QWORD *)(v37 + 8);
                if (v38)
                {
                  v39 = *(_QWORD *)(v38 + 24);
                  if (v39)
                  {
                    v40 = *(WebCore::Page **)(v39 + 8);
                    if (v40)
                    {
                      ++*(_DWORD *)v40;
                      result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v40 + 6) + 16)
                                                                            + 1264))(*(_QWORD *)(*((_QWORD *)v40 + 6)
                                                                                                 + 16));
                      if (*(_DWORD *)v40 == 1)
                      {
                        WebCore::Page::~Page(v40);
                        result = (uint64_t *)WTF::fastFree(v49, v50);
                      }
                      else
                      {
                        --*(_DWORD *)v40;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v17;
          v22 = *(WebCore::LocalDOMWindow **)(qword_1ECE838A8 + 16 * v21);
          ++v23;
          if (v22 == this)
            goto LABEL_31;
        }
      }
    }
  }
  else
  {
    qword_1ECE838A8 = 0;
    byte_1ECE8389B = 1;
  }
  if ((byte_1ECE8389A & 1) == 0)
  {
    qword_1ECE838A0 = 0;
    byte_1ECE8389A = 1;
    return result;
  }
  if (qword_1ECE838A0)
  {
    v25 = *(_DWORD *)(qword_1ECE838A0 - 8);
    v26 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    v30 = *(WebCore::LocalDOMWindow **)(qword_1ECE838A0 + 16 * v29);
    if (v30 != this)
    {
      v31 = 1;
      while (v30)
      {
        v29 = ((_DWORD)v29 + v31) & v25;
        v30 = *(WebCore::LocalDOMWindow **)(qword_1ECE838A0 + 16 * v29);
        ++v31;
        if (v30 == this)
          goto LABEL_38;
      }
      return result;
    }
LABEL_38:
    if (v29 == *(_DWORD *)(qword_1ECE838A0 - 4))
      return result;
    *(_QWORD *)(qword_1ECE838A0 + 16 * v29) = -1;
    ++*(_DWORD *)(qword_1ECE838A0 - 16);
    if (qword_1ECE838A0)
      v32 = *(_DWORD *)(qword_1ECE838A0 - 12) - 1;
    else
      v32 = -1;
    *(_DWORD *)(qword_1ECE838A0 - 12) = v32;
    if (qword_1ECE838A0)
    {
      v41 = *(_DWORD *)(qword_1ECE838A0 - 4);
      if (6 * *(_DWORD *)(qword_1ECE838A0 - 12) < v41 && v41 >= 9)
        result = (uint64_t *)WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(&qword_1ECE838A0, v41 >> 1, 0);
    }
    v43 = *((_QWORD *)this + 9);
    if (!v43)
      return result;
    v44 = *(_QWORD *)(v43 + 8);
    if (!v44)
      return result;
    if (!*(_BYTE *)(v44 + 178))
    {
      v45 = *(_QWORD *)(v44 + 240);
      if (v45)
      {
        v46 = *(_QWORD *)(v45 + 8);
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 24);
          if (v47)
          {
            v48 = *(WebCore::Page **)(v47 + 8);
            if (v48)
            {
              ++*(_DWORD *)v48;
              result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v48 + 6) + 16) + 1264))(*(_QWORD *)(*((_QWORD *)v48 + 6) + 16));
              if (*(_DWORD *)v48 == 1)
              {
                WebCore::Page::~Page(v48);
                return (uint64_t *)WTF::fastFree(v51, v52);
              }
              else
              {
                --*(_DWORD *)v48;
              }
            }
          }
        }
      }
      return result;
    }
LABEL_80:
    __break(0xC471u);
    JUMPOUT(0x194446810);
  }
  return result;
}

uint64_t WebCore::Document::didRemoveEventTargetNode(WebCore::Document *this, WebCore::Node *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;
  int v12;
  uint64_t v13;
  WebCore::Document *v14;
  WebCore::Document *v15;
  uint64_t result;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  v4 = (uint64_t *)*((_QWORD *)this + 287);
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(WebCore::Node **)(v5 + 16 * v10);
      if (v11 != a2)
      {
        v12 = 1;
        while (v11)
        {
          v10 = ((_DWORD)v10 + v12) & v6;
          v11 = *(WebCore::Node **)(v5 + 16 * v10);
          ++v12;
          if (v11 == a2)
            goto LABEL_9;
        }
        v10 = *(unsigned int *)(v5 - 4);
      }
LABEL_9:
      if (v10 != *(_DWORD *)(v5 - 4))
      {
        *(_QWORD *)(v5 + 16 * v10) = -1;
        ++*(_DWORD *)(*v4 - 16);
        v27 = *v4;
        v28 = *v4 ? *(_DWORD *)(v27 - 12) - 1 : -1;
        *(_DWORD *)(v27 - 12) = v28;
        v29 = *v4;
        if (*v4)
        {
          v30 = 6 * *(_DWORD *)(v29 - 12);
          v31 = *(_DWORD *)(v29 - 4);
          if (v30 < v31 && v31 >= 9)
            WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::shrink(v4);
        }
      }
    }
    if (a2 == this || (v13 = **((_QWORD **)this + 287)) == 0 || !*(_DWORD *)(v13 - 12))
    {
      v14 = (WebCore::Document *)WebCore::Document::parentDocument(this);
      if (v14)
      {
        v15 = v14;
        *((_DWORD *)v14 + 6) += 2;
        WebCore::Document::didRemoveEventTargetNode(v14, this);
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
    }
  }
  result = *((_QWORD *)this + 288);
  if (result)
  {
    v17 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = *(WebCore::Node **)(v17 + 16 * v22);
      if (v23 != a2)
      {
        v24 = 1;
        while (v23)
        {
          v22 = ((_DWORD)v22 + v24) & v18;
          v23 = *(WebCore::Node **)(v17 + 16 * v22);
          ++v24;
          if (v23 == a2)
            goto LABEL_24;
        }
        v22 = *(unsigned int *)(v17 - 4);
      }
LABEL_24:
      if (v22 != *(_DWORD *)(v17 - 4))
      {
        *(_QWORD *)(v17 + 16 * v22) = -1;
        ++*(_DWORD *)(*(_QWORD *)result - 16);
        v33 = *(_QWORD *)result;
        v34 = *(_QWORD *)result ? *(_DWORD *)(v33 - 12) - 1 : -1;
        *(_DWORD *)(v33 - 12) = v34;
        v35 = *(_QWORD *)result;
        if (*(_QWORD *)result)
        {
          v36 = 6 * *(_DWORD *)(v35 - 12);
          v37 = *(_DWORD *)(v35 - 4);
          if (v36 < v37 && v37 >= 9)
            result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::shrink((uint64_t *)result);
        }
      }
    }
    if (a2 == this || (v25 = **((_QWORD **)this + 288)) == 0 || !*(_DWORD *)(v25 - 12))
    {
      result = WebCore::Document::parentDocument(this);
      if (result)
      {
        v26 = result;
        *(_DWORD *)(result + 24) += 2;
        result = WebCore::Document::didRemoveEventTargetNode((WebCore::Document *)result, this);
        if (*(_DWORD *)(v26 + 24) == 2)
        {
          if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v26);
        }
        else
        {
          *(_DWORD *)(v26 + 24) -= 2;
        }
      }
    }
  }
  return result;
}

WebCore *WebCore::LocalDOMWindow::stopListeningForDeviceMotionIfNecessary(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (uint64_t)this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = *(_QWORD *)(v1 + 16);
  if ((v5 & 0x1000000000000) != 0 && (v11 = v5 & 0xFFFFFFFFFFFFLL, v12 = *(unsigned int *)(v11 + 28), (_DWORD)v12))
  {
    v13 = *(_QWORD **)(v11 + 16);
    v14 = *(_QWORD *)(v4 + 608);
    v15 = 32 * v12;
    while (*v13 != v14)
    {
      v13 += 4;
      v15 -= 32;
      if (!v15)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v6 = *(_QWORD *)(v1 + 72);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 178))
          goto LABEL_21;
        v8 = *(_QWORD *)(v7 + 2064);
        ++*(_DWORD *)(v8 + 8);
        WTF::HashCountedSet<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::remove<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>((uint64_t *)(v8 + 16), v1);
        this = (WebCore *)WTF::HashCountedSet<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::remove<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>((uint64_t *)(v8 + 24), v1);
        v9 = *(_QWORD *)(v8 + 16);
        if (!v9 || !*(_DWORD *)(v9 - 12))
          this = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
        v10 = *(_DWORD *)(v8 + 8);
        if (!v10)
        {
LABEL_21:
          __break(0xC471u);
          JUMPOUT(0x194446F90);
        }
        *(_DWORD *)(v8 + 8) = v10 - 1;
      }
    }
  }
  return this;
}

uint64_t WebCore::DeviceMotionClientIOS::stopUpdating(WebCore::DeviceMotionClientIOS *this)
{
  uint64_t v1;

  *((_BYTE *)this + 64) = 0;
  v1 = *((_QWORD *)this + 7);
  if (v1)
    return (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)v1 + 40))(*((_QWORD *)this + 7), (char *)this + 16);
  else
    return objc_msgSend(*((id *)this + 4), "removeMotionClient:", (char *)this + 16);
}

WebCore *WebCore::LocalDOMWindow::stopListeningForDeviceOrientationIfNecessary(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (uint64_t)this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = *(_QWORD *)(v1 + 16);
  if ((v5 & 0x1000000000000) != 0 && (v11 = v5 & 0xFFFFFFFFFFFFLL, v12 = *(unsigned int *)(v11 + 28), (_DWORD)v12))
  {
    v13 = *(_QWORD **)(v11 + 16);
    v14 = *(_QWORD *)(v4 + 616);
    v15 = 32 * v12;
    while (*v13 != v14)
    {
      v13 += 4;
      v15 -= 32;
      if (!v15)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v6 = *(_QWORD *)(v1 + 72);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 178))
          goto LABEL_21;
        v8 = *(_QWORD *)(v7 + 2080);
        ++*(_DWORD *)(v8 + 8);
        WTF::HashCountedSet<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::remove<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>((uint64_t *)(v8 + 16), v1);
        this = (WebCore *)WTF::HashCountedSet<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::remove<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>((uint64_t *)(v8 + 24), v1);
        v9 = *(_QWORD *)(v8 + 16);
        if (!v9 || !*(_DWORD *)(v9 - 12))
          this = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
        v10 = *(_DWORD *)(v8 + 8);
        if (!v10)
        {
LABEL_21:
          __break(0xC471u);
          JUMPOUT(0x194447100);
        }
        *(_DWORD *)(v8 + 8) = v10 - 1;
      }
    }
  }
  return this;
}

uint64_t WTF::HashCountedSet<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::remove<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = v2 + 16 * v8;
  if (*(_DWORD *)(v12 + 8) == 1)
  {
    v13 = *(_DWORD **)v12;
    *(_QWORD *)v12 = -1;
    if (v13)
    {
      if (v13[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 72))(v13);
      else
        --v13[6];
    }
    ++*(_DWORD *)(*a1 - 16);
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 12) - 1;
    else
      v15 = -1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *a1;
    if (*a1)
    {
      v17 = 6 * *(_DWORD *)(v16 - 12);
      v18 = *(_DWORD *)(v16 - 4);
      if (v17 < v18 && v18 >= 9)
        WTF::HashTable<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashMap<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::rehash(a1, v18 >> 1, 0);
    }
    return 1;
  }
  else
  {
    result = 0;
    --*(_DWORD *)(v12 + 8);
  }
  return result;
}

uint64_t WebCore::DeviceOrientationClientIOS::stopUpdating(WebCore::DeviceOrientationClientIOS *this)
{
  uint64_t v1;

  *((_BYTE *)this + 64) = 0;
  v1 = *((_QWORD *)this + 7);
  if (v1)
    return (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)v1 + 24))(*((_QWORD *)this + 7), (char *)this + 16);
  else
    return objc_msgSend(*((id *)this + 4), "removeOrientationClient:", (char *)this + 16);
}

void WebCore::Performance::~Performance(WebCore::Performance *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  void *v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;

  v3 = (uint64_t *)*((_QWORD *)this + 26);
  if (v3)
  {
    do
    {
      v29 = (uint64_t *)v3[2];
      v30 = WTF::Ref<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>::~Ref(v3, a2);
      WTF::fastFree((WTF *)v30, v31);
      v3 = v29;
    }
    while (v29);
  }
  v4 = *((_QWORD *)this + 25);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
    std::default_delete<WebCore::PerformanceUserTiming>::operator()[abi:sn180100]((_DWORD)this + 192, v5);
  v6 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((unsigned int *)this + 39);
  if ((_DWORD)v8)
  {
    v17 = (_DWORD **)*((_QWORD *)this + 18);
    v18 = 8 * v8;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
      {
        if (v19[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[2];
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v9 = (WTF *)*((_QWORD *)this + 18);
  if (v9)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v9, v5);
  }
  *((_QWORD *)this + 11) = off_1E31F7378;
  v10 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::TimerBase::~TimerBase((WebCore::Performance *)((char *)this + 88));
  v12 = *((unsigned int *)this + 19);
  if ((_DWORD)v12)
  {
    v20 = (_DWORD **)*((_QWORD *)this + 8);
    v21 = 8 * v12;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (v22[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
        else
          --v22[2];
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  v13 = (WTF *)*((_QWORD *)this + 8);
  if (v13)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v13, v11);
  }
  v14 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      v23 = (unsigned int *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v32 = v14;
          atomic_store(1u, v23);
          v38 = (WTF *)v23;
          v33 = v23[7];
          if ((_DWORD)v33)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v38 + 2), (WTF::StringImpl *)(*((_QWORD *)v38 + 2) + 32 * v33));
          v34 = (WTF *)*((_QWORD *)v38 + 2);
          if (v34)
          {
            *((_QWORD *)v38 + 2) = 0;
            *((_DWORD *)v38 + 6) = 0;
            WTF::fastFree(v34, v11);
          }
          WTF::fastFree(v38, v11);
          v14 = v32;
        }
      }
      WTF::fastFree(v14, v11);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v15 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v26 = (unsigned int *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v35 = v15;
          atomic_store(1u, v26);
          v39 = (WTF *)v26;
          v36 = v26[7];
          if ((_DWORD)v36)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v39 + 2), (WTF::StringImpl *)(*((_QWORD *)v39 + 2) + 32 * v36));
          v37 = (WTF *)*((_QWORD *)v39 + 2);
          if (v37)
          {
            *((_QWORD *)v39 + 2) = 0;
            *((_DWORD *)v39 + 6) = 0;
            WTF::fastFree(v37, v11);
          }
          WTF::fastFree(v39, v11);
          v15 = v35;
        }
      }
      WTF::fastFree(v15, v11);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  WebCore::EventTarget::~EventTarget((WebCore::Performance *)((char *)this + 24), v11);
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v16);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Performance::~Performance(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::Element::removeAllEventListeners(WebCore::Element *this, uint64_t a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (unsigned int *)WebCore::Node::removeAllEventListeners((uint64_t)this, a2);
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v5 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      result = (unsigned int *)WebCore::Node::removeAllEventListeners(v5, v4);
      v7 = *(_QWORD *)(v5 + 80);
      if (v7)
      {
        *(_DWORD *)(v7 + 24) += 2;
        do
        {
          v8 = v7;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          if ((*(_WORD *)(v7 + 28) & 4) != 0 && (v7 = *(_QWORD *)(v7 + 80)) != 0 || (v7 = *(_QWORD *)(v8 + 56)) != 0)
          {
LABEL_9:
            *(_DWORD *)(v7 + 24) += 2;
          }
          else
          {
            v9 = v8;
            while (1)
            {
              v9 = *(_QWORD *)(v9 + 32);
              if (!v9)
                break;
              v7 = *(_QWORD *)(v9 + 56);
              if (v7)
                goto LABEL_9;
            }
            v7 = 0;
          }
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        while (v7);
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::Node::removeAllEventListeners(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  WebCore::Quirks *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  unsigned int *v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  WebCore::Quirks *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v111;
  uint64_t j;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v130;
  uint64_t k;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v142;
  __int16 v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  __int16 v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  __int16 v151;
  __int16 v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  WTF *v163;
  void *v164;
  unsigned int *v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WebCore::StyleRareInheritedData *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WebCore::StyleRareInheritedData *v204;
  WebCore::StyleRareInheritedData *v205;
  WebCore::StyleRareInheritedData *v206;
  int v207;
  WebCore::StyleRareInheritedData *v208;
  WTF *v209;
  void *v210;
  WTF *v211;
  void *v212;
  _DWORD *v213;
  unsigned int v214;
  int v215;
  unint64_t StatusReg;
  WebCore::StyleRareInheritedData *v217;

  v2 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 96);
    if (v4)
      goto LABEL_3;
  }
  else
  {
    this = WTF::Thread::initializeCurrentTLS((WTF::Thread *)this);
    v3 = this;
    v4 = *(_QWORD *)(this + 96);
    if (v4)
      goto LABEL_3;
  }
  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v4 + 8) = 1;
  v165 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = off_1E31F4A70;
  v166 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v166 = 0;
  *(_QWORD *)(v4 + 16) = v166;
  *(_QWORD *)v4 = off_1E3407108;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v167 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v167 + 28) = 0;
  *(_QWORD *)(v167 + 32) = 0;
  *(_QWORD *)(v167 + 8) = 0;
  *(_QWORD *)(v167 + 16) = 0;
  *(_QWORD *)v167 = 0;
  *(_WORD *)(v167 + 24) = 0;
  if (WTF::isUIThread((WTF *)v167))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v167, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *(_QWORD *)(v4 + 48) = v167;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_BYTE *)(v4 + 88) = 0;
  if (pthread_main_np())
  {
    WebCore::sharedMainThreadStaticData = v4;
    do
      v168 = __ldaxr(v165);
    while (__stlxr(v168 + 1, v165));
  }
  this = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v4;
  if (this)
  {
    v169 = (unsigned int *)(this + 8);
    do
    {
      v170 = __ldaxr(v169);
      v171 = v170 - 1;
    }
    while (__stlxr(v171, v169));
    if (!v171)
    {
      atomic_store(1u, (unsigned int *)(this + 8));
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
LABEL_3:
  if (*(_BYTE *)(v4 + 88))
  {
    __break(0xC471u);
    JUMPOUT(0x1944485E0);
  }
  *(_BYTE *)(v4 + 88) = 1;
  v5 = *(_QWORD *)(v2 + 16);
  if ((v5 & 0x1000000000000) == 0)
  {
    *(_BYTE *)(v4 + 88) = 0;
    return this;
  }
  if (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C))
  {
    WebCore::EventListenerMap::clear((unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFLL) + 16), (void *)a2);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    v5 = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(v4 + 88) = 0;
    if ((v5 & 0x1000000000000) == 0)
      return this;
  }
  else
  {
    *(_BYTE *)(v4 + 88) = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFLL;
  v7 = *(unsigned int *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C);
  if ((_DWORD)v7)
  {
    v8 = *(_DWORD **)(v6 + 16);
    v213 = &v8[8 * v7];
    v9 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v214 = (v11 >> 31) ^ v11;
    while (1)
    {
      v215 = v8[5];
      if (v215)
        break;
LABEL_267:
      v8 += 8;
      if (v8 == v213)
        return this;
    }
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
      *(_DWORD *)(v13 + 24) += 2;
      v14 = *(_QWORD *)(v13 + 3296);
      v15 = *(unsigned int *)(v13 + 3304);
      if (v14)
      {
        v16 = v15 - 1;
        v17 = *(_DWORD *)(v13 + 3312);
        v18 = *(_DWORD *)(*(_QWORD *)v8 + 16) >> 8;
        v19 = (v18 ^ v17) & (v15 - 1);
        v20 = *(_QWORD *)(v14 + 16 * v19);
        if (v20)
        {
          v21 = -1;
          do
          {
            v22 = *(_DWORD *)(v20 + 16) >> 8;
            a2 = (v19 + v15);
            this = ((_DWORD)a2 - ((v22 ^ v17) & v16)) & v16;
            if (++v21 > this)
              break;
            if (v20 == *(_QWORD *)v8 && v22 == v18)
            {
              v23 = v14 + 16 * v19;
              goto LABEL_22;
            }
            v19 = ((_DWORD)v19 + 1) & v16;
            v20 = *(_QWORD *)(v14 + 16 * v19);
          }
          while (v20);
        }
        v23 = v14 + 16 * v15;
      }
      else
      {
        v23 = 16 * v15;
      }
LABEL_22:
      --*(_DWORD *)(v23 + 8);
      v24 = *(_QWORD *)(StatusReg + 736);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 96);
        if (!v25)
          goto LABEL_83;
      }
      else
      {
        this = WTF::Thread::initializeCurrentTLS((WTF::Thread *)this);
        v24 = this;
        v25 = *(_QWORD *)(this + 96);
        if (!v25)
        {
LABEL_83:
          v25 = WTF::fastMalloc((WTF *)0x60);
          *(_DWORD *)(v25 + 8) = 1;
          v59 = (unsigned int *)(v25 + 8);
          *(_QWORD *)v25 = off_1E31F4A70;
          v60 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          *v60 = 0;
          *(_QWORD *)(v25 + 16) = v60;
          *(_QWORD *)v25 = off_1E3407108;
          *(_BYTE *)(v25 + 24) = 0;
          *(_QWORD *)(v25 + 32) = 0;
          *(_QWORD *)(v25 + 40) = 0;
          v61 = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)(v61 + 28) = 0;
          *(_QWORD *)(v61 + 32) = 0;
          *(_QWORD *)(v61 + 8) = 0;
          *(_QWORD *)(v61 + 16) = 0;
          *(_QWORD *)v61 = 0;
          *(_WORD *)(v61 + 24) = 0;
          if (WTF::isUIThread((WTF *)v61))
          {
            {
              WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
              qword_1ECE90CE8 = 0;
            }
            WebCore::ThreadTimers::setSharedTimer((uint64_t **)v61, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
          }
          *(_QWORD *)(v25 + 48) = v61;
          *(_OWORD *)(v25 + 56) = 0u;
          *(_OWORD *)(v25 + 72) = 0u;
          *(_BYTE *)(v25 + 88) = 0;
          if (pthread_main_np())
          {
            WebCore::sharedMainThreadStaticData = v25;
            do
              v62 = __ldaxr(v59);
            while (__stlxr(v62 + 1, v59));
          }
          this = *(_QWORD *)(v24 + 96);
          *(_QWORD *)(v24 + 96) = v25;
          if (this)
          {
            v63 = (unsigned int *)(this + 8);
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
            {
              atomic_store(1u, (unsigned int *)(this + 8));
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            }
          }
        }
      }
      v26 = *(_QWORD *)(v25 + 40);
      if (!v26)
      {
        this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v25);
        v26 = *(_QWORD *)(v25 + 40);
      }
      v27 = *(_QWORD *)(v26 + 2552);
      if (v27)
      {
        v28 = *(_DWORD *)(v26 + 2560);
        v29 = v28 - 1;
        v30 = *(_DWORD *)(v26 + 2568);
        v31 = *(_DWORD *)(*(_QWORD *)v8 + 16) >> 8;
        v32 = (v31 ^ v30) & (v28 - 1);
        v33 = *(_QWORD *)(v27 + 16 * v32);
        if (v33)
        {
          v34 = -1;
          do
          {
            v35 = *(_DWORD *)(v33 + 16) >> 8;
            a2 = (v32 + v28);
            this = ((_DWORD)a2 - ((v35 ^ v30) & v29)) & v29;
            if (++v34 > this)
              break;
            if (v33 == *(_QWORD *)v8 && v35 == v31)
            {
              v36 = *(_DWORD *)(v27 + 16 * v32 + 8);
              if ((v36 & 0x4000000) == 0)
              {
                if ((v36 & 0x40000) != 0 && (*(_QWORD *)(v2 + 16) & 0x2000000000000) != 0)
                {
                  v37 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 688);
                  if (!v37)
                    v37 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8));
                  this = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v37, (const WebCore::EventTarget *)v2);
                  if ((v36 & 0x1000000) == 0 && (this & 1) == 0)
                  {
LABEL_41:
                    if ((v36 & 0x200000) != 0)
                    {
                      v38 = *(_QWORD *)(v13 + 528);
                      if (v38)
                      {
                        v39 = *(_QWORD *)(v38 + 8);
                        if (v39)
                        {
                          v40 = (unsigned int *)(v39 + 8);
                          do
                            v41 = __ldaxr(v40);
                          while (__stlxr(v41 + 1, v40));
                          v42 = *(_QWORD *)(v39 + 24);
                          if (v42)
                          {
                            a2 = *(_QWORD *)(v42 + 8);
                            if (a2)
                            {
                              this = WebCore::DebugPageOverlays::sharedDebugOverlays;
                              if (WebCore::DebugPageOverlays::sharedDebugOverlays)
                              {
                                this = WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, (WebCore::Page *)a2);
                                if ((_DWORD)this)
                                {
                                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v39, 0);
                                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v39, 1u);
                                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v39, 2u);
                                  this = (uint64_t)WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v39, 3u);
                                }
                              }
                            }
                          }
                          do
                          {
                            v43 = __ldaxr(v40);
                            v44 = v43 - 1;
                          }
                          while (__stlxr(v44, v40));
                          if (!v44)
                          {
                            atomic_store(1u, v40);
                            v198 = (WebCore::StyleRareInheritedData *)WTF::fastMalloc((WTF *)0x10);
                            *(_QWORD *)v198 = off_1E31FE290;
                            *((_QWORD *)v198 + 1) = v40;
                            v217 = v198;
                            WTF::ensureOnMainThread();
                            this = (uint64_t)v217;
                            v217 = 0;
                            if (this)
                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                          }
                        }
                      }
                    }
                    goto LABEL_107;
                  }
                }
                else if ((v36 & 0x1000000) == 0)
                {
                  goto LABEL_41;
                }
                this = WebCore::Document::didRemoveTouchEventHandler((WebCore::Document *)v13, v2, 0);
                goto LABEL_107;
              }
              this = *(_QWORD *)(v13 + 2304);
              if (this)
              {
                v217 = (WebCore::StyleRareInheritedData *)v2;
                this = WTF::HashCountedSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>>::remove((uint64_t *)this, &v217);
                if ((_DWORD)this)
                {
                  this = WebCore::Document::wheelEventHandlersChanged(v13, (WebCore::Node *)v2);
                  v159 = *(_QWORD *)(v13 + 528);
                  if (v159)
                  {
                    v160 = *(_QWORD *)(v159 + 8);
                    if (v160)
                    {
                      v161 = (unsigned int *)(v160 + 8);
                      do
                        v148 = __ldaxr(v161);
                      while (__stlxr(v148 + 1, v161));
                      v162 = *(_QWORD *)(v160 + 24);
                      if (v162)
                      {
                        a2 = *(_QWORD *)(v162 + 8);
                        if (a2)
                        {
                          this = WebCore::DebugPageOverlays::sharedDebugOverlays;
                          if (WebCore::DebugPageOverlays::sharedDebugOverlays)
                          {
                            this = WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, (WebCore::Page *)a2);
                            if ((_DWORD)this)
                            {
                              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v160, 0);
                              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v160, 1u);
                              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v160, 2u);
                              this = (uint64_t)WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v160, 3u);
                            }
                          }
                        }
                      }
                      do
                      {
                        v149 = __ldaxr(v161);
                        v150 = v149 - 1;
                      }
                      while (__stlxr(v150, v161));
                      if (!v150)
                      {
                        atomic_store(1u, v161);
                        v208 = (WebCore::StyleRareInheritedData *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v208 = off_1E31FE290;
                        *((_QWORD *)v208 + 1) = v161;
                        v217 = v208;
                        WTF::ensureOnMainThread();
                        this = (uint64_t)v217;
                        v217 = 0;
                        if (this)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                      }
                    }
                  }
                }
              }
              v45 = *(_QWORD *)(v13 + 1944);
              if (!v45 || !*(_QWORD *)(v13 + 1272))
                goto LABEL_107;
              ++*(_DWORD *)(v45 + 16);
              v46 = WebCore::Style::Adjuster::computeEventListenerRegionTypes((WebCore::EventNames **)this, a2, v13, 0);
              v47 = v46;
              v48 = *(_QWORD *)(v13 + 696);
              if (v48)
                v47 = WebCore::Style::Adjuster::computeEventListenerRegionTypes((WebCore::EventNames **)v46, a2, v48, 0) | v46;
              this = *(_QWORD *)(v45 + 104);
              if (*(unsigned __int8 *)(this + 241) == v47)
              {
                v49 = *(_QWORD *)(v13 + 1272);
                if (!v49)
                {
                  this = (uint64_t)WebCore::Element::invalidateStyleInternal(0);
                  goto LABEL_105;
                }
                v50 = *(_DWORD *)(v49 + 24);
                *(_DWORD *)(v49 + 24) = v50 + 2;
                if ((*(_BYTE *)(v49 + 22) & 8) == 0)
                  goto LABEL_103;
                v51 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8);
                if (!*(_QWORD *)(v51 + 1944))
                  goto LABEL_103;
                if (*(_BYTE *)(v51 + 3405))
                  goto LABEL_103;
                if (*(_BYTE *)(v51 + 3392))
                  goto LABEL_103;
                *(_WORD *)(v49 + 30) |= 0x10u;
                v52 = *(_QWORD *)(v49 + 64);
                v53 = HIWORD(v52) & 7;
                if (v53 > 2)
                  goto LABEL_103;
                *(_QWORD *)(v49 + 64) = v52 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
                if ((_DWORD)v53)
                  goto LABEL_103;
                *(_DWORD *)(v49 + 24) = v50 + 4;
                v54 = *(unsigned __int16 *)(v49 + 28);
                if ((v54 & 0x80) != 0)
                {
                  v158 = *(_QWORD *)(v49 + 200);
                  if (!v158)
                    goto LABEL_94;
                }
                else if ((~v54 & 0x408) == 0
                       && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 368))(v49), (_DWORD)this))
                {
                  v158 = *(_QWORD *)(v49 + 112);
                  if (!v158)
                    goto LABEL_94;
                }
                else
                {
                  a2 = *(_QWORD *)(v49 + 32);
                  if (!a2)
                    goto LABEL_94;
                  v55 = *(_WORD *)(a2 + 28);
                  if ((v55 & 0x80) == 0)
                  {
                    if ((v55 & 8) != 0)
                    {
                      if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0)
                        goto LABEL_72;
                      v145 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (!v145)
                        goto LABEL_72;
                      this = *(_QWORD *)(v145 + 224);
                      if (this)
                      {
                        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v49);
                        a2 = this;
LABEL_286:
                        if (a2)
                        {
LABEL_72:
                          *(_QWORD *)(a2 + 64) |= 0x10000000000000uLL;
                          do
                          {
                            if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                            {
                              v58 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                              if (v58)
                                *(_QWORD *)(v58 + 64) |= 0x8000000000000uLL;
                            }
                            v56 = *(_QWORD *)(a2 + 64);
                            if ((v56 & 0x8000000000000) != 0)
                              break;
                            *(_QWORD *)(a2 + 64) = v56 | 0x8000000000000;
                            this = *(_QWORD *)(a2 + 32);
                            if (!this)
                              break;
                            v57 = *(_WORD *)(this + 28);
                            if ((v57 & 0x80) != 0)
                            {
                              v172 = *(_QWORD *)(this + 200);
                              if (!v172)
                                break;
                              this = *(_QWORD *)(v172 + 8);
                            }
                            else
                            {
                              if ((v57 & 8) == 0)
                                break;
                              if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
                              {
                                v157 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                                if (v157)
                                {
                                  this = *(_QWORD *)(v157 + 224);
                                  if (!this)
                                    break;
                                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
                                }
                              }
                            }
                            a2 = this;
                          }
                          while (this);
                        }
                      }
                    }
LABEL_94:
                    if (*(_DWORD *)(v49 + 24) == 2)
                    {
                      v153 = *(_WORD *)(v49 + 30);
                      if ((v153 & 0x400) == 0)
                      {
                        v154 = *(_WORD *)(v49 + 28);
                        if ((v154 & 0xF000) == 0x9000)
                        {
                          this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v49, (void *)a2);
                        }
                        else
                        {
                          if ((v154 & 0x20) != 0)
                          {
                            (*(void (**)(_QWORD))(**(_QWORD **)(v49 + 160) + 16))(*(_QWORD *)(v49 + 160));
                            v153 = *(_WORD *)(v49 + 30);
                          }
                          *(_WORD *)(v49 + 30) = v153 | 0x400;
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 72))(v49);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v49 + 24) -= 2;
                    }
                    v66 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8);
                    v67 = *(_QWORD *)(v66 + 1272);
                    if (v67)
                    {
                      v68 = *(_QWORD *)(v67 + 64);
                      if ((v68 & 0x8000000000000) != 0
                        || (v68 & 0x7000000000000) != 0
                        || (*(_WORD *)(v67 + 30) & 0x20) != 0)
                      {
                        *(_DWORD *)(v66 + 24) += 2;
                        *(_QWORD *)(v66 + 64) |= 0x8000000000000uLL;
                        if (((*(_QWORD *)(v66 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                           || *(double *)((*(_QWORD *)(v66 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                          && !*(_BYTE *)(v66 + 3362))
                        {
                          *(_QWORD *)(v66 + 1528) = 0;
                          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
                          this = WebCore::TimerBase::setNextFireTime(v66 + 1504, v69 + 0.0);
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            v173 = *(_QWORD *)(v66 + 528);
                            if (v173)
                            {
                              v174 = *(_QWORD *)(v173 + 8);
                              if (v174)
                              {
                                v175 = *(_QWORD *)(v174 + 24);
                                if (v175)
                                {
                                  v176 = *(_QWORD *)(v175 + 8);
                                  if (v176)
                                    goto LABEL_326;
                                }
                              }
                            }
                            v199 = *(_QWORD *)(v66 + 2632);
                            if (v199)
                            {
                              v200 = *(_QWORD *)(v199 + 8);
                              if (v200)
                              {
                                v201 = *(_QWORD *)(v200 + 528);
                                if (v201)
                                {
                                  v202 = *(_QWORD *)(v201 + 8);
                                  if (v202)
                                  {
                                    v203 = *(_QWORD *)(v202 + 24);
                                    if (v203)
                                    {
                                      v176 = *(_QWORD *)(v203 + 8);
                                      if (v176)
                                      {
LABEL_326:
                                        this = *(_QWORD *)(*(_QWORD *)(v176 + 80) + 8);
                                        if (this)
                                          this = (uint64_t)WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl((WTF::StringImpl *)this, (WebCore::Document *)v66);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (*(_DWORD *)(v66 + 24) == 2)
                        {
                          v155 = *(_WORD *)(v66 + 30);
                          if ((v155 & 0x400) == 0)
                          {
                            v156 = *(_WORD *)(v66 + 28);
                            if ((v156 & 0xF000) == 0x9000)
                            {
                              this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v66, (void *)a2);
                            }
                            else
                            {
                              if ((v156 & 0x20) != 0)
                              {
                                (*(void (**)(_QWORD))(**(_QWORD **)(v66 + 160) + 16))(*(_QWORD *)(v66 + 160));
                                v155 = *(_WORD *)(v66 + 30);
                              }
                              *(_WORD *)(v66 + 30) = v155 | 0x400;
                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 72))(v66);
                            }
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v66 + 24) -= 2;
                        }
                      }
                    }
LABEL_103:
                    if (*(_DWORD *)(v49 + 24) == 2)
                    {
                      v146 = *(_WORD *)(v49 + 30);
                      if ((v146 & 0x400) == 0)
                      {
                        v147 = *(_WORD *)(v49 + 28);
                        if ((v147 & 0xF000) == 0x9000)
                        {
                          this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v49, (void *)a2);
                        }
                        else
                        {
                          if ((v147 & 0x20) != 0)
                          {
                            (*(void (**)(_QWORD))(**(_QWORD **)(v49 + 160) + 16))(*(_QWORD *)(v49 + 160));
                            v146 = *(_WORD *)(v49 + 30);
                          }
                          *(_WORD *)(v49 + 30) = v146 | 0x400;
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 72))(v49);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v49 + 24) -= 2;
                    }
LABEL_105:
                    v71 = *(_DWORD *)(v45 + 16);
                    if (!v71)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194448648);
                    }
                    *(_DWORD *)(v45 + 16) = v71 - 1;
LABEL_107:
                    if (v13 == v2 && (unsigned __int16)v36 == 218)
                    {
                      v72 = *(_QWORD *)(v2 + 696);
                      if (v72)
                      {
                        v73 = *(_QWORD *)(v72 + 72);
                        if (v73 && (v74 = *(_QWORD *)(v73 + 8)) != 0)
                        {
                          if (*(_BYTE *)(v74 + 178))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x194448690);
                          }
                          v75 = 0;
                          v76 = v74 - 288;
                          *(_DWORD *)(v74 - 264) += 2;
                        }
                        else
                        {
                          v76 = 0;
                          v75 = 1;
                        }
                        v77 = *(_DWORD *)(v72 + 232) - 1;
                        *(_DWORD *)(v72 + 232) = v77;
                        if (!v77)
                        {
                          if (*(_BYTE *)(v76 + 3362) || *(_BYTE *)(v76 + 3405))
                          {
                            v177 = *(_QWORD *)(v76 + 528);
                            i = v76;
                            if (v177)
                            {
                              v178 = *(_QWORD *)(v177 + 8);
                              i = v76;
                              if (v178)
                              {
                                v179 = *(_QWORD *)(v178 + 120);
                                i = v76;
                                if (v179)
                                {
                                  v180 = *(_QWORD *)(v179 + 8);
                                  for (i = v76; v180; v180 = *(_QWORD *)(v183 + 8))
                                  {
                                    i = *(_QWORD *)(*(_QWORD *)(v180 + 40) + 8);
                                    v181 = *(_QWORD *)(i + 528);
                                    if (!v181)
                                      break;
                                    v182 = *(_QWORD *)(v181 + 8);
                                    if (!v182)
                                      break;
                                    v183 = *(_QWORD *)(v182 + 120);
                                    if (!v183)
                                      break;
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
                            v91 = *(_QWORD *)(v76 + 528);
                            i = v76;
                            if (v91)
                            {
                              v93 = *(_QWORD *)(v91 + 8);
                              i = v76;
                              if (v93)
                              {
                                v94 = *(_QWORD *)(*(_QWORD *)(v93 + 128) + 8);
                                v95 = v94 && *(_BYTE *)(v94 + 144) == 0;
                                i = v76;
                                if (v95)
                                {
                                  v96 = *(_QWORD *)(v94 + 296);
                                  i = v76;
                                  if (v96)
                                    i = v96;
                                }
                              }
                            }
                          }
                          if (v73)
                          {
                            if (v76 == i)
                            {
                              v97 = *(_QWORD *)(v73 + 8);
                              if (v97)
                              {
                                if (*(_BYTE *)(v97 + 178))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1944488B0);
                                }
                                v98 = *(_QWORD *)(v97 + 240);
                                if (v98)
                                {
                                  a2 = *(_QWORD *)(v98 + 8);
                                  if (a2)
                                  {
                                    v99 = (unsigned int *)(a2 + 8);
                                    do
                                      v100 = __ldaxr(v99);
                                    while (__stlxr(v100 + 1, v99));
                                    v101 = *(_QWORD *)(a2 + 24);
                                    if (v101)
                                    {
                                      v102 = *(_QWORD *)(v101 + 8);
                                      if (v102)
                                      {
                                        if (!*(_BYTE *)(v76 + 3362))
                                        {
                                          ++*(_DWORD *)v102;
                                          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v102 + 48)
                                                                                                 + 16)
                                                                                   + 640))(*(_QWORD *)(*(_QWORD *)(v102 + 48) + 16));
                                          if (*(_DWORD *)v102 == 1)
                                          {
                                            WebCore::Page::~Page(v102);
                                            this = WTF::fastFree(v163, v164);
                                          }
                                          else
                                          {
                                            --*(_DWORD *)v102;
                                          }
                                        }
                                      }
                                    }
                                    do
                                    {
                                      v103 = __ldaxr(v99);
                                      v104 = v103 - 1;
                                    }
                                    while (__stlxr(v104, v99));
                                    if (!v104)
                                    {
                                      atomic_store(1u, v99);
                                      v204 = (WebCore::StyleRareInheritedData *)WTF::fastMalloc((WTF *)0x10);
                                      *(_QWORD *)v204 = off_1E31FE290;
                                      *((_QWORD *)v204 + 1) = v99;
                                      v217 = v204;
                                      WTF::ensureOnMainThread();
                                      this = (uint64_t)v217;
                                      v217 = 0;
                                      if (this)
                                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if ((v75 & 1) == 0)
                        {
                          if (*(_DWORD *)(v76 + 24) == 2)
                          {
                            v151 = *(_WORD *)(v76 + 30);
                            if ((v151 & 0x400) == 0)
                            {
                              v152 = *(_WORD *)(v76 + 28);
                              if ((v152 & 0xF000) == 0x9000)
                              {
                                this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v76, (void *)a2);
                              }
                              else
                              {
                                if ((v152 & 0x20) != 0)
                                {
                                  (*(void (**)(_QWORD))(**(_QWORD **)(v76 + 160) + 16))(*(_QWORD *)(v76 + 160));
                                  v151 = *(_WORD *)(v76 + 30);
                                }
                                *(_WORD *)(v76 + 30) = v151 | 0x400;
                                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 72))(v76);
                              }
                            }
                          }
                          else
                          {
                            *(_DWORD *)(v76 + 24) -= 2;
                          }
                        }
                      }
                    }
                    if ((v36 & 0x40000) != 0 && (*(_QWORD *)(v2 + 16) & 0x2000000000000) != 0)
                    {
                      v78 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 688);
                      if (!v78)
                        v78 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8));
                      this = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v78, (const WebCore::EventTarget *)v2);
                      if ((v36 & 0x1000000) == 0 && (this & 1) == 0)
                        goto LABEL_124;
LABEL_131:
                      v79 = *(_QWORD *)(v13 + 624);
                      if (!v79)
                        goto LABEL_124;
                      v80 = *(_DWORD *)(v79 - 8);
                      v81 = v80 & v214;
                      v82 = *(_QWORD *)(v79 + 16 * v81);
                      if (v82 != v2)
                      {
                        v83 = 1;
                        while (v82)
                        {
                          v81 = ((_DWORD)v81 + v83) & v80;
                          v82 = *(_QWORD *)(v79 + 16 * v81);
                          ++v83;
                          if (v82 == v2)
                            goto LABEL_138;
                        }
                        v81 = *(unsigned int *)(v79 - 4);
                      }
LABEL_138:
                      if (v81 == *(_DWORD *)(v79 - 4))
                        goto LABEL_124;
                      v84 = v79 + 16 * v81;
                      if (*(_DWORD *)(v84 + 8) != 1)
                      {
                        --*(_DWORD *)(v84 + 8);
                        if ((v36 & 0x100000) == 0)
                          break;
                        goto LABEL_141;
                      }
                      this = v13 + 624;
                      *(_QWORD *)v84 = -1;
                      ++*(_DWORD *)(*(_QWORD *)(v13 + 624) - 16);
                      v105 = *(_QWORD *)(v13 + 624);
                      if (v105)
                        v106 = *(_DWORD *)(v105 - 12) - 1;
                      else
                        v106 = -1;
                      *(_DWORD *)(v105 - 12) = v106;
                      v107 = *(_QWORD *)this;
                      if (*(_QWORD *)this)
                      {
                        v108 = 6 * *(_DWORD *)(v107 - 12);
                        v109 = *(_DWORD *)(v107 - 4);
                        if (v108 < v109 && v109 >= 9)
                          this = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::shrink((uint64_t *)this);
                      }
                      if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
                      {
                        v184 = *(_QWORD *)(v13 + 528);
                        j = v13;
                        if (v184)
                        {
                          v185 = *(_QWORD *)(v184 + 8);
                          j = v13;
                          if (v185)
                          {
                            v186 = *(_QWORD *)(v185 + 120);
                            j = v13;
                            if (v186)
                            {
                              v187 = *(_QWORD *)(v186 + 8);
                              for (j = v13; v187; v187 = *(_QWORD *)(v190 + 8))
                              {
                                j = *(_QWORD *)(*(_QWORD *)(v187 + 40) + 8);
                                v188 = *(_QWORD *)(j + 528);
                                if (!v188)
                                  break;
                                v189 = *(_QWORD *)(v188 + 8);
                                if (!v189)
                                  break;
                                v190 = *(_QWORD *)(v189 + 120);
                                if (!v190)
                                  break;
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        v111 = *(_QWORD *)(v13 + 528);
                        j = v13;
                        if (v111)
                        {
                          v113 = *(_QWORD *)(v111 + 8);
                          j = v13;
                          if (v113)
                          {
                            v114 = *(_QWORD *)(*(_QWORD *)(v113 + 128) + 8);
                            v115 = v114 && *(_BYTE *)(v114 + 144) == 0;
                            j = v13;
                            if (v115)
                            {
                              v116 = *(_QWORD *)(v114 + 296);
                              j = v13;
                              if (v116)
                                j = v116;
                            }
                          }
                        }
                      }
                      if (!*(_BYTE *)(j + 672))
                      {
                        *(_BYTE *)(j + 672) = 1;
                        v117 = *(_QWORD *)(j + 528);
                        if (v117)
                        {
                          v118 = *(_QWORD *)(v117 + 8);
                          if (v118)
                          {
                            v119 = *(_QWORD *)(v118 + 24);
                            if (v119)
                            {
                              v120 = *(_QWORD *)(v118 + 288);
                              v121 = *(_QWORD *)(v119 + 8);
                              if (v121 && v120 != 0)
                              {
                                v123 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v119 + 8));
                                if (v123)
                                  this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v123 + 88))(v123, v120);
                                else
                                  this = WebCore::Page::scheduleRenderingUpdate(v121, 0x2000);
                              }
                            }
                          }
                        }
                      }
                    }
                    else if ((v36 & 0x1000000) != 0)
                    {
                      goto LABEL_131;
                    }
LABEL_124:
                    if ((v36 & 0x100000) == 0)
                      break;
LABEL_141:
                    v85 = *(_QWORD *)(v13 + 632);
                    if (!v85)
                      goto LABEL_126;
                    v86 = *(_DWORD *)(v85 - 8);
                    v87 = v86 & v214;
                    v88 = *(_QWORD *)(v85 + 16 * v87);
                    if (v88 != v2)
                    {
                      v89 = 1;
                      while (v88)
                      {
                        v87 = ((_DWORD)v87 + v89) & v86;
                        v88 = *(_QWORD *)(v85 + 16 * v87);
                        ++v89;
                        if (v88 == v2)
                          goto LABEL_148;
                      }
                      v87 = *(unsigned int *)(v85 - 4);
                    }
LABEL_148:
                    if (v87 != *(_DWORD *)(v85 - 4))
                    {
                      v90 = v85 + 16 * v87;
                      if (*(_DWORD *)(v90 + 8) == 1)
                      {
                        this = v13 + 632;
                        *(_QWORD *)v90 = -1;
                        ++*(_DWORD *)(*(_QWORD *)(v13 + 632) - 16);
                        v124 = *(_QWORD *)(v13 + 632);
                        if (v124)
                          v125 = *(_DWORD *)(v124 - 12) - 1;
                        else
                          v125 = -1;
                        *(_DWORD *)(v124 - 12) = v125;
                        v126 = *(_QWORD *)this;
                        if (*(_QWORD *)this)
                        {
                          v127 = 6 * *(_DWORD *)(v126 - 12);
                          v128 = *(_DWORD *)(v126 - 4);
                          if (v127 < v128 && v128 >= 9)
                            this = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::shrink((uint64_t *)this);
                        }
                        if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
                        {
                          v191 = *(_QWORD *)(v13 + 528);
                          k = v13;
                          if (v191)
                          {
                            v192 = *(_QWORD *)(v191 + 8);
                            k = v13;
                            if (v192)
                            {
                              v193 = *(_QWORD *)(v192 + 120);
                              k = v13;
                              if (v193)
                              {
                                v194 = *(_QWORD *)(v193 + 8);
                                for (k = v13; v194; v194 = *(_QWORD *)(v197 + 8))
                                {
                                  k = *(_QWORD *)(*(_QWORD *)(v194 + 40) + 8);
                                  v195 = *(_QWORD *)(k + 528);
                                  if (!v195)
                                    break;
                                  v196 = *(_QWORD *)(v195 + 8);
                                  if (!v196)
                                    break;
                                  v197 = *(_QWORD *)(v196 + 120);
                                  if (!v197)
                                    break;
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          v130 = *(_QWORD *)(v13 + 528);
                          k = v13;
                          if (v130)
                          {
                            v132 = *(_QWORD *)(v130 + 8);
                            k = v13;
                            if (v132)
                            {
                              v133 = *(_QWORD *)(*(_QWORD *)(v132 + 128) + 8);
                              v134 = v133 && *(_BYTE *)(v133 + 144) == 0;
                              k = v13;
                              if (v134)
                              {
                                v135 = *(_QWORD *)(v133 + 296);
                                k = v13;
                                if (v135)
                                  k = v135;
                              }
                            }
                          }
                        }
                        if (!*(_BYTE *)(k + 672))
                        {
                          *(_BYTE *)(k + 672) = 1;
                          v136 = *(_QWORD *)(k + 528);
                          if (v136)
                          {
                            v137 = *(_QWORD *)(v136 + 8);
                            if (v137)
                            {
                              v138 = *(_QWORD *)(v137 + 24);
                              if (v138)
                              {
                                v139 = *(_QWORD *)(v137 + 288);
                                v140 = *(_QWORD *)(v138 + 8);
                                if (v140 && v139 != 0)
                                {
                                  v142 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v138 + 8));
                                  if (v142)
                                    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 88))(v142, v139);
                                  else
                                    this = WebCore::Page::scheduleRenderingUpdate(v140, 0x2000);
                                }
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        --*(_DWORD *)(v90 + 8);
                      }
                    }
                    break;
                  }
                  v158 = *(_QWORD *)(a2 + 200);
                  if (!v158)
                    goto LABEL_94;
                }
                a2 = *(_QWORD *)(v158 + 8);
                goto LABEL_286;
              }
              if (*(_DWORD *)this == 1)
              {
LABEL_365:
                *(_BYTE *)(this + 241) = v47;
                this = (uint64_t)WebCore::Document::scheduleFullStyleRebuild((WTF::StringImpl *)v13);
                goto LABEL_105;
              }
              WebCore::StyleRareInheritedData::copy((WebCore::StyleRareInheritedData *)this, &v217);
              v205 = v217;
              v217 = 0;
              v206 = *(WebCore::StyleRareInheritedData **)(v45 + 104);
              *(_QWORD *)(v45 + 104) = v205;
              if (v206)
              {
                v207 = *(_DWORD *)v206 - 1;
                if (*(_DWORD *)v206 != 1)
                  goto LABEL_374;
                WebCore::StyleRareInheritedData::~StyleRareInheritedData(v206);
                WTF::fastFree(v209, v210);
                v206 = v217;
                v217 = 0;
                if (v206)
                {
                  v207 = *(_DWORD *)v206 - 1;
                  if (*(_DWORD *)v206 == 1)
                  {
                    WebCore::StyleRareInheritedData::~StyleRareInheritedData(v206);
                    WTF::fastFree(v211, v212);
                  }
                  else
                  {
LABEL_374:
                    *(_DWORD *)v206 = v207;
                  }
                }
              }
              this = *(_QWORD *)(v45 + 104);
              goto LABEL_365;
            }
            v32 = ((_DWORD)v32 + 1) & v29;
            v33 = *(_QWORD *)(v27 + 16 * v32);
          }
          while (v33);
          if (!v13)
            goto LABEL_128;
        }
      }
LABEL_126:
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        v143 = *(_WORD *)(v13 + 30);
        if ((v143 & 0x400) == 0)
        {
          v144 = *(_WORD *)(v13 + 28);
          if ((v144 & 0xF000) == 0x9000)
          {
            this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v13, (void *)a2);
          }
          else
          {
            if ((v144 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
              v143 = *(_WORD *)(v13 + 30);
            }
            *(_WORD *)(v13 + 30) = v143 | 0x400;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
          }
        }
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
LABEL_128:
      if (++v12 == v215)
        goto LABEL_267;
    }
  }
  return this;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSBlob>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSBlob>::initializeProperties(v5, a1, a3);
  return v5;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSBlob>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::getDOMStructure<WebCore::JSBlob>((WebCore::JSBlob *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v12 + 48), 14);
}

unint64_t JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(uint64_t a1)
{
  _QWORD *v1;
  unint64_t result;
  unint64_t v3;

  v1 = *(_QWORD **)(a1 + 41456);
  result = v1[2846];
  if (result >= v1[2847])
  {
    result = v1[2848];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v3 = *(_QWORD *)(result + 8) ^ v1[2849];
    v1[2847] = result + HIDWORD(v3);
    v1[2848] = result + (int)v3;
  }
  v1[2846] = result + 48;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSFile>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSFile>::initializeProperties(v5, a1, a3);
  return v5;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSFile>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000002, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSFile>((WebCore::JSFile *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSFile>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSFile>(WebCore::JSFile *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSFile::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSFile::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSFile::s_info);
  }
  return result;
}

unint64_t WebCore::JSFile::createPrototype(WebCore::JSFile *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSBlob::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSFilePrototype::create(this, v6, v7, v8);
}

uint64_t WebCore::JSBlob::prototype(WebCore::JSBlob *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  return *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSBlob>(this, a2, a3) + 48);
}

uint64_t WebCore::getDOMStructure<WebCore::JSBlob>(WebCore::JSBlob *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSBlob::s_info + ~((_QWORD)&WebCore::JSBlob::s_info << 32)) ^ (((unint64_t)&WebCore::JSBlob::s_info + ~((_QWORD)&WebCore::JSBlob::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSBlob::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSBlob::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSBlob::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSBlob::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSBlob::s_info);
}

unint64_t WebCore::JSBlob::createPrototype(WebCore::JSBlob *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v5;
  JSC::Structure *v6;

  v5 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v5 + 16) |= 0x80000u;
  return WebCore::JSBlobPrototype::create(this, (JSC::VM *)a2, v5, v6);
}

unint64_t WebCore::JSFilePrototype::create(WebCore::JSFilePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSFilePrototype::finishCreation((WebCore::JSFilePrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSFilePrototype::finishCreation(WebCore::JSFilePrototype *this, JSC::VM *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSFile::s_info, &WebCore::JSFilePrototypeTableValues, this);
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5) + 440) & 0x2000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v13;
    v11 = *((_DWORD *)a2 + 23281);
    *((_DWORD *)a2 + 23281) = 1;
    LODWORD(v13) = -1;
    WORD2(v13) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)a2 + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2, this);
  }
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v6, v7, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::JSBlobPrototype::create(WebCore::JSBlobPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSBlobPrototype::finishCreation((WebCore::JSBlobPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSBlobPrototype::finishCreation(WebCore::JSBlobPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(a2, (uint64_t)&WebCore::JSBlob::s_info, (uint64_t)&WebCore::JSBlobPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSAbstractRangePrototype>(uint64_t a1)
{
  _QWORD *v1;
  unint64_t result;
  unint64_t v3;

  v1 = (_QWORD *)(a1 + 38904);
  result = *(_QWORD *)(a1 + 38904);
  if (result >= v1[1])
  {
    result = v1[2];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v3 = *(_QWORD *)(result + 8) ^ v1[3];
    v1[1] = result + HIDWORD(v3);
    v1[2] = result + (int)v3;
  }
  *v1 = result + 16;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSProgressEvent>(WebCore::JSProgressEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSProgressEvent::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSProgressEvent::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSProgressEvent::s_info);
  }
  return result;
}

unint64_t WebCore::JSProgressEvent::createPrototype(WebCore::JSProgressEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSProgressEventPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSProgressEventPrototype::create(WebCore::JSProgressEventPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSProgressEventPrototype::finishCreation((WebCore::JSProgressEventPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSProgressEventPrototype::finishCreation(WebCore::JSProgressEventPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSProgressEvent::s_info, &WebCore::JSProgressEventPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000001, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::getDOMStructure<WebCore::JSCustomEvent>((WebCore::JSCustomEvent *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v12 + 48), 14);
}

uint64_t WebCore::getDOMStructure<WebCore::JSCustomEvent>(WebCore::JSCustomEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSCustomEvent::s_info + ~((_QWORD)&WebCore::JSCustomEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSCustomEvent::s_info + ~((_QWORD)&WebCore::JSCustomEvent::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSCustomEvent::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSCustomEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSCustomEvent::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 8431;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSCustomEvent::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSCustomEvent::s_info);
}

unint64_t WebCore::JSCustomEvent::createPrototype(WebCore::JSCustomEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSCustomEventPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSCustomEventPrototype::create(WebCore::JSCustomEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSCustomEventPrototype::finishCreation((WebCore::JSCustomEventPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSCustomEventPrototype::finishCreation(WebCore::JSCustomEventPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSCustomEvent::s_info, &WebCore::JSCustomEventPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::MessageEvent::~MessageEvent(WebCore::MessageEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::MessageEvent::~MessageEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = *((_QWORD *)this + 23);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 23) = 0;
  }
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 21) = 0;
  }
  v5 = *((_QWORD *)this + 19);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v6 = *((unsigned int *)this + 35);
  if ((_DWORD)v6)
  {
    v12 = (uint64_t *)*((_QWORD *)this + 16);
    v13 = 8 * v6;
    do
    {
      v12 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v12, a2)+ 1;
      v13 -= 8;
    }
    while (v13);
  }
  v7 = (WTF *)*((_QWORD *)this + 16);
  if (v7)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v7, a2);
  }
  if (*((_BYTE *)this + 120))
  {
    v8 = *((unsigned int *)this + 28);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, char *))off_1E33A5868[v8])(&v14, (char *)this + 104);
    *((_DWORD *)this + 28) = -1;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((unsigned int *)this + 20);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, char *))off_1E33A5818[v11])(&v15, (char *)this + 72);
  *((_DWORD *)this + 20) = -1;
  WebCore::Event::~Event(this, a2);
}

uint64_t WebCore::wrap<WebCore::MessageEvent>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (!v8)
      goto LABEL_5;
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 16 * v13);
    if (v14 != a3)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v8 + 16 * v13);
        ++v15;
        if (v14 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 16);
  v16 = (_DWORD *)a3;
  if (*(void (***)(WebCore::MessageEvent *__hidden))a3 == off_1E33A5A68)
  {
    v5 = WebCore::createWrapper<WebCore::MessageEvent,WebCore::MessageEvent>(a2, (uint64_t *)&v16, (WebCore::JSDOMGlobalObject *)a3);
    v6 = v16;
    v16 = 0;
    if (v6)
    {
      if (v6[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[4];
    }
    return v5;
  }
  result = 509;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSMessageEvent>(WebCore::JSEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  JSC::Structure *v8;
  JSC::JSCell *v9;
  uint64_t v10;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSMessageEvent::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSEvent::prototype(a1, a2, v5);
    Structure = WebCore::JSMessageEventPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v9 = (JSC::JSCell *)WebCore::JSMessageEventPrototype::create(a1, a2, Structure, v8);
    v10 = WebCore::JSMessageEvent::createStructure((uint64_t *)a1, (uint64_t)a2, v9);
    return WebCore::cacheDOMStructure((JSCell *)a2, v10, (uint64_t)&WebCore::JSMessageEvent::s_info);
  }
  return result;
}

unint64_t WebCore::JSMessageEvent::createPrototype(WebCore::JSMessageEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
  Structure = WebCore::JSMessageEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSMessageEventPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSEvent::prototype(WebCore::JSEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t Structure;
  JSC::Structure *v14;
  JSC::JSCell *v15;
  uint64_t v16;
  int v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSEvent::s_info)
  {
    v18 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v18) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v18;
      if (v11 == &WebCore::JSEvent::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    Structure = WebCore::JSEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v15 = (JSC::JSCell *)WebCore::JSEventPrototype::create(this, a2, Structure, v14);
    v16 = WebCore::JSEvent::createStructure((uint64_t *)this, (uint64_t)a2, v15);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v16, (uint64_t)&WebCore::JSEvent::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

unint64_t WebCore::JSMessageEventPrototype::create(WebCore::JSMessageEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSMessageEvent::s_info, &WebCore::JSMessageEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

JSC::VM *JSC::reifyStaticProperties<7u>(JSC::VM *result, uint64_t a2, _QWORD *a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  v8 = a3[1];
  if (v8)
  {
    if (v8 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v9 = v30;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v30, (uint64_t)a3, (unsigned __int8 *)this);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = a3[6];
  if (v11)
  {
    if (v11 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v12 = v30;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v30, (uint64_t)(a3 + 5), (unsigned __int8 *)this);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v14 = a3[11];
  if (v14)
  {
    if (v14 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v15 = v30;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v30, (uint64_t)(a3 + 10), (unsigned __int8 *)this);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v17 = a3[16];
  if (v17)
  {
    if (v17 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v18 = v30;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v30, (uint64_t)(a3 + 15), (unsigned __int8 *)this);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  v20 = a3[21];
  if (v20)
  {
    if (v20 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v21 = v30;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v30, (uint64_t)(a3 + 20), (unsigned __int8 *)this);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v23 = a3[26];
  if (v23)
  {
    if (v23 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v24 = v30;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v30, (uint64_t)(a3 + 25), (unsigned __int8 *)this);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v26 = a3[31];
  if (v26)
  {
    v27 = (uint64_t)(a3 + 30);
    if (v26 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v28 = v30;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v30, v27, (unsigned __int8 *)this);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        return (JSC::VM *)WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::JSMessageEvent::subspaceForImpl(WebCore::JSMessageEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3752);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 3752);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 3752);
    *(_QWORD *)(v9 + 3752) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 3752);
  *(_QWORD *)(v3 + 3752) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

unint64_t WebCore::JSMessageEvent::finishCreation(WebCore::MessageEvent **this, JSC::VM *a2)
{
  unint64_t result;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  result = WebCore::MessageEvent::memoryCost(this[3]);
  if (result >= 0x101)
    return JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return result;
}

uint64_t WebCore::MessageEvent::memoryCost(WebCore::MessageEvent *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v8;
  uint64_t v9;
  JSC::JSCell *v10;
  char v11;
  char *v12;

  v2 = (unsigned __int8 *)this + 192;
  if (__ldaxr((unsigned __int8 *)this + 192))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C]((char *)this + 192);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
  {
    v12 = &v11;
    v5 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore12MessageEvent10memoryCostEvE3__0JZNKS9_10memoryCostEvE3__1ZNKS9_10memoryCostEvE3__2ZNKS9_10memoryCostEvE3__3ZNKS9_10memoryCostEvE3__4EEEEEJRKNS0_6__implIJNS9_10JSValueTagENS6_3RefINS8_21SerializedScriptValueENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS6_6StringENSJ_INS8_4BlobENSL_ISR_EENSN_ISR_EEEENSJ_IN3JSC11ArrayBufferENSL_ISW_EENSN_ISW_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v12, (char *)this + 72);
    v6 = __ldxr(v2);
    if (v6 == 1)
    {
      if (!__stlxr(0, v2))
        return v5;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    return v5;
  }
  v8 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSEvent::createStructure(v8, v9, v10);
}

uint64_t WebCore::JSEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSEventPrototype::create(WebCore::JSEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<22u>(this, (uint64_t)&WebCore::JSEvent::s_info, (uint64_t)&WebCore::JSEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

JSC::VM *JSC::reifyStaticProperties<22u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 880; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::RenderElement::selectionColor(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  int v7;
  WebCore::RenderStyle *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::Document *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;

  v4 = a1[13];
  if ((*(_BYTE *)(v4 + 239) & 1) != 0
    || ((v6 = a1, v7 = *(_DWORD *)(v4 + 228), (v7 & 0x30) == 0)
     || (*(_DWORD *)(*(_QWORD *)(a1[11] + 32) + 148) & 0xC00000) == 0x800000)
    && (v7 & 0x18000) == 0
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 1944)
                             + 248)
                 + 1148) & 0x81) != 0)
  {
    *(_QWORD *)a3 = 0;
  }
  else
  {
    WebCore::RenderElement::selectionPseudoStyle((uint64_t)&v35, (uint64_t)a1);
    v8 = (WebCore::RenderStyle *)v35;
    if (v35)
    {
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(v35, a2, 0, (unint64_t *)a3);
      if ((*(_BYTE *)(a3 + 6) & 4) != 0)
        goto LABEL_29;
      WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v8, 5, 0, &v34);
      WebCore::Color::operator=((unint64_t *)a3, &v34);
      if ((v34 & 0x8000000000000) != 0)
      {
        v31 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v22);
        }
      }
      v8 = (WebCore::RenderStyle *)v35;
      if (v35)
      {
LABEL_29:
        WebCore::RenderStyle::~RenderStyle(v8, v22);
        if (*(_DWORD *)v8)
        {
          *((_OWORD *)v8 + 2) = 0u;
          *((_OWORD *)v8 + 3) = 0u;
          *(_OWORD *)v8 = 0u;
          *((_OWORD *)v8 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v8, v23);
        }
      }
    }
    else
    {
      v9 = *(_QWORD *)(v6[3] + 8);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 528) + 8)
                                  + 296)
                      + 3064);
      if ((*(_WORD *)(v10 + 256) & 4) != 0
        && (v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 528)) != 0
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0)
      {
        v15 = *(_WORD *)(*(_QWORD *)(v14 + 72) + 26) & 1;
      }
      else
      {
        v15 = 0;
      }
      {
        v30 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        *(_OWORD *)(v30 + 40) = 0u;
        *(_OWORD *)(v30 + 24) = 0u;
        *(_QWORD *)v30 = &off_1E335BC30;
        v9 = *(_QWORD *)(v6[3] + 8);
      }
      v16 = *(WebCore::Document **)(*(_QWORD *)(v9 + 40) + 8);
      if ((*((_BYTE *)v6 + 45) & 2) != 0)
      {
        v21 = v6[4];
        if (v21)
          v6 = *(_QWORD **)(v21 + 8);
        else
          v6 = 0;
      }
      v17 = WebCore::Document::styleColorOptions(v16, (const WebCore::RenderStyle *)(v6 + 10));
      if (v15)
      {
        v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme + 1072))(&WebCore::RenderTheme::singleton(void)::theme, v17);
        v19 = (unint64_t *)(v18 + 64);
        if ((*(_BYTE *)(v18 + 70) & 4) == 0)
        {
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme + 656))(&WebCore::RenderTheme::singleton(void)::theme, v17))
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme
                                                                              + 552))(&v35, &WebCore::RenderTheme::singleton(void)::theme, v17);
            WebCore::Color::operator=(v19, &v35);
            if ((v35 & 0x8000000000000) != 0)
            {
              v25 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
              do
              {
                v26 = __ldaxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
              {
                atomic_store(1u, v25);
                WTF::fastFree((WTF *)v25, v24);
              }
            }
          }
        }
        v20 = *v19;
        *(_QWORD *)a3 = *v19;
        if ((v20 & 0x8000000000000) != 0)
        {
          v28 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
        }
      }
      else
      {
        WebCore::RenderTheme::inactiveSelectionForegroundColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, v17, (_QWORD *)a3);
      }
    }
  }
}

double WebCore::RenderElement::selectionBackgroundColor@<D0>(WebCore::RenderElement *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  WebCore::RenderElement *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderElement *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::Document *v16;
  unsigned __int8 v17;
  double result;
  uint64_t i;
  uint64_t v20;
  char *v21;
  unsigned __int8 v22;
  void *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unint64_t v28;
  WTF *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  WebCore::RenderStyle *v41;

  v3 = *((_QWORD *)this + 13);
  if ((*(_BYTE *)(v3 + 239) & 1) != 0
    || ((v4 = this, v5 = *(_DWORD *)(v3 + 228), (v5 & 0x30) == 0)
     || (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0xC00000) == 0x800000)
    && (v5 & 0x18000) == 0)
  {
    *a2 = 0;
    return result;
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 296) + 3064);
    if ((*(_WORD *)(v8 + 256) & 0x10) != 0 && *(_BYTE *)(v8 + 153) == 1)
    {
      v21 = (char *)this + 80;
      {
        WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        v21 = (char *)v4 + 80;
        unk_1ECE88AD0 = 0u;
        unk_1ECE88AC0 = 0u;
        WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      }
      WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v21, 5, 0, (unint64_t *)&v41);
      v22 = WebCore::RenderObject::styleColorOptions(v4);
      (*(void (**)(uint64_t *, WebCore::RenderStyle **, _QWORD))(WebCore::RenderTheme::singleton(void)::theme
                                                                         + 232))(&WebCore::RenderTheme::singleton(void)::theme, &v41, v22);
      if (((unint64_t)v41 & 0x8000000000000) != 0)
      {
        v24 = (unint64_t)v41 & 0xFFFFFFFFFFFFLL;
        do
        {
          v25 = __ldaxr((unsigned int *)v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)v24));
        if (!v26)
        {
          atomic_store(1u, (unsigned int *)v24);
LABEL_51:
          WTF::fastFree((WTF *)v24, v23);
          return result;
        }
      }
      return result;
    }
  }
  v9 = this;
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v9 + 4))
    {
      v9 = *(WebCore::RenderElement **)(i + 8);
      if (!v9)
        break;
      if ((*((_BYTE *)v9 + 45) & 1) == 0)
        goto LABEL_7;
    }
    goto LABEL_9;
  }
LABEL_7:
  WebCore::RenderElement::selectionPseudoStyle((uint64_t)&v41, (uint64_t)v9);
  if (!v41)
  {
LABEL_8:
    v6 = *(_QWORD *)(*((_QWORD *)v4 + 3) + 8);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528);
LABEL_9:
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 296) + 3064);
    if ((*(_WORD *)(v10 + 256) & 4) != 0
      && (v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 528)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0)
    {
      v15 = *(_WORD *)(*(_QWORD *)(v14 + 72) + 26) & 1;
    }
    else
    {
      v15 = 0;
    }
    {
      v32 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 24) = 0u;
      *(_QWORD *)v32 = &off_1E335BC30;
      v6 = *(_QWORD *)(*((_QWORD *)v4 + 3) + 8);
    }
    v16 = *(WebCore::Document **)(*(_QWORD *)(v6 + 40) + 8);
    if ((*((_BYTE *)v4 + 45) & 2) != 0)
    {
      v20 = *((_QWORD *)v4 + 4);
      if (v20)
        v4 = *(WebCore::RenderElement **)(v20 + 8);
      else
        v4 = 0;
    }
    v17 = WebCore::Document::styleColorOptions(v16, (WebCore::RenderElement *)((char *)v4 + 80));
    if (v15)
      WebCore::RenderTheme::activeSelectionBackgroundColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, v17, a2);
    else
      WebCore::RenderTheme::inactiveSelectionBackgroundColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, v17, a2);
    return result;
  }
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v41, 61, 0, &v40);
  v28 = v40;
  if ((v40 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v27);
    }
  }
  if ((v28 & 0x4000000000000) == 0)
  {
    if (v41)
    {
      WebCore::RenderStyle::~RenderStyle(v41, v27);
      if (*(_DWORD *)v29)
      {
        *((_OWORD *)v29 + 2) = 0u;
        *((_OWORD *)v29 + 3) = 0u;
        *(_OWORD *)v29 = 0u;
        *((_OWORD *)v29 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v29, v30);
      }
    }
    goto LABEL_8;
  }
  {
    v33 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v33 + 40) = 0u;
    *(_OWORD *)(v33 + 24) = 0u;
    *(_QWORD *)v33 = &off_1E335BC30;
  }
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v41, 61, 0, &v40);
  WebCore::RenderObject::styleColorOptions(v4);
  (*(void (**)(void))(WebCore::RenderTheme::singleton(void)::theme + 232))();
  if ((v40 & 0x8000000000000) != 0)
  {
    v37 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, v31);
    }
  }
  if (v41)
  {
    WebCore::RenderStyle::~RenderStyle(v41, v31);
    if (!*(_DWORD *)v24)
      goto LABEL_51;
    result = 0.0;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
  }
  return result;
}

uint64_t WebCore::RenderElement::selectionPseudoStyle(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  WebCore::Style **v3;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;

  v3 = (WebCore::Style **)this;
  if ((*(_BYTE *)(a2 + 45) & 1) != 0)
    goto LABEL_22;
  v19 = 8;
  v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v6 += 2;
  v20 = v6;
  v21 = 0;
  v22 = 0;
  WebCore::RenderElement::getUncachedPseudoStyle(a2, &v19, 0, 0, (WebCore::Style **)this);
  this = (uint64_t)v20;
  v20 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
    else
      *(_DWORD *)this -= 2;
  }
  if (!*v3)
  {
    *v3 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if ((*(_WORD *)(v8 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19444B800);
    }
    v9 = **(_QWORD **)(v8 + 40);
    if (v9)
      v10 = (*(_WORD *)(v9 + 28) & 0x80) == 0;
    else
      v10 = 1;
    if (!v10)
    {
      *(_DWORD *)(v9 + 24) += 2;
      if (!*(_BYTE *)(v9 + 193) && (v13 = *(_QWORD *)(v9 + 200)) != 0 && (this = *(_QWORD *)(v13 + 8)) != 0)
      {
        *(_DWORD *)(this + 24) += 2;
        v11 = 1;
        while ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v14 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
          if (!v14 || (*(_QWORD *)(v14 + 16) & 0x1FLL) != 0x12)
            break;
          v18 = *(_QWORD *)(this + 32);
          if (v18 && (*(_WORD *)(v18 + 28) & 8) != 0)
          {
            v17 = 0;
            *(_DWORD *)(v18 + 24) += 2;
          }
          else
          {
            v18 = 0;
            v17 = 1;
          }
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)this);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
          this = v18;
          if ((v17 & 1) != 0)
            goto LABEL_16;
        }
        v2 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
        if (v2 && (*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19444B880);
        }
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this);
          v11 = 0;
        }
        else
        {
          v11 = 0;
          *(_DWORD *)(this + 24) -= 2;
        }
      }
      else
      {
        v11 = 1;
      }
LABEL_16:
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      v12 = v2 ? v11 : 1;
      if ((v12 & 1) == 0)
      {
        v19 = 8;
        v15 = *v5;
        if (*v5)
          *(_DWORD *)v15 += 2;
        v20 = v15;
        v21 = 0;
        v22 = 0;
        WebCore::RenderElement::getUncachedPseudoStyle(v2, &v19, 0, 0, v3);
        this = (uint64_t)v20;
        v20 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
          else
            *(_DWORD *)this -= 2;
        }
        return this;
      }
    }
LABEL_22:
    *v3 = 0;
  }
  return this;
}

void WebCore::RenderElement::getUncachedPseudoStyle(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebCore::Style **a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  WebCore::Style::Resolver *v13;
  const WebCore::Element *v14;
  WebCore::Style *v15;
  void *v16;
  WebCore::Style *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  WebCore::Style *v25[3];
  char v26;

  v7 = a1;
  if ((a4 || *a2 > 0x10 || ((*(unsigned __int16 *)(a1 + 102) >> (*a2 - 1)) & 1) != 0)
    && (!a3 ? (v9 = a1 + 80) : (v9 = a3), (*(_BYTE *)(a1 + 45) & 1) == 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v10 && (*(_WORD *)(v10 + 28) & 8) == 0)
    {
      __break(0xC471u);
      goto LABEL_44;
    }
    *(_DWORD *)(v10 + 24) += 2;
    v11 = *(_QWORD **)(v10 + 40);
    if (*v11)
      v12 = (*(_WORD *)(*v11 + 28) & 0x80) == 0;
    else
      v12 = 1;
    if (v12)
      v18 = v11[1] + 1328;
    else
      v18 = *v11 + 216;
    v5 = *(_QWORD *)v18;
    if (!*(_QWORD *)(*(_QWORD *)v18 + 32))
    {
      if (*(_QWORD *)(v5 + 24))
      {
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v5);
        goto LABEL_33;
      }
      goto LABEL_45;
    }
    while (1)
    {
      v13 = *(WebCore::Style::Resolver **)(v5 + 32);
      v21 = v9;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      WebCore::Style::Resolver::styleForPseudoElement(v13, (WebCore::Element *)v10, a2, (uint64_t)&v21, (uint64_t)v25);
      if (!v26)
      {
        *a5 = 0;
        goto LABEL_18;
      }
      v15 = v25[0];
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
      *(_DWORD *)(v7 + 24) += 2;
      WebCore::Style::loadPendingResources(v15, (WebCore::RenderStyle *)v7, (WebCore::Document *)v10, v14);
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      if (v26)
        break;
LABEL_44:
      __break(1u);
LABEL_45:
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v5);
LABEL_33:
      v19 = *(_QWORD *)(v5 + 32);
      if (*(_DWORD *)(v19 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v20 = *(_QWORD *)(v5 + 32);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v19 + 32));
        v19 = v20;
      }
      if (*(_BYTE *)(v19 + 242)
        || *(_BYTE *)(v19 + 243)
        || *(_BYTE *)(v19 + 244)
        || *(_BYTE *)(v19 + 245)
        || *(_BYTE *)(v19 + 246)
        || *(_BYTE *)(v19 + 247)
        || *(_BYTE *)(v19 + 248))
      {
        *(_BYTE *)(v5 + 236) = 1;
      }
    }
    v17 = v25[0];
    v25[0] = 0;
    *a5 = v17;
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v25, v16);
LABEL_18:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  else
  {
    *a5 = 0;
  }
}

uint64_t WebCore::PowerSourceNotifier::PowerSourceNotifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  void *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v28;
  _QWORD handler[4];
  WTF *v30;
  int out_token;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v3;
  out_token = 0;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZN7WebCore19PowerSourceNotifierC2EON3WTF8FunctionIFvbEEE_block_invoke;
  handler[3] = &__block_descriptor_40_e8_32c66_ZTSKZN7WebCore19PowerSourceNotifierC1EON3WTF8FunctionIFvbEEEE3__0_e8_v12__0i8l;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    goto LABEL_35;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a1;
  v6 = *(unsigned int **)a1;
  *(_QWORD *)a1 = v4;
  if (!v6)
    goto LABEL_35;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
LABEL_35:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
    do
      v10 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v10 + 1, (unsigned int *)v4));
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  v30 = (WTF *)v4;
  v12 = notify_register_dispatch("com.apple.system.powersources.source", &out_token, MEMORY[0x1E0C80D38], handler);
  v14 = v12;
  if ((v11 & 1) != 0)
    goto LABEL_13;
  do
  {
    v15 = __ldaxr((unsigned int *)v4);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v4));
  if (v16)
  {
LABEL_13:
    if ((_DWORD)v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  atomic_store(1u, (unsigned int *)v4);
  v12 = WTF::fastFree((WTF *)v4, v13);
  if (!v14)
  {
LABEL_14:
    *(_DWORD *)(a1 + 8) = out_token;
    *(_BYTE *)(a1 + 12) = 1;
  }
LABEL_15:
  if ((unsigned __int16)WebCore::hasAC <= 0xFFu)
  {
    WTF::RunLoop::main((WTF::RunLoop *)v12);
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_36;
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = a1;
    v19 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v17;
    if (!v19)
      goto LABEL_36;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v18);
    }
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
LABEL_36:
      do
        v22 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v22 + 1, (unsigned int *)v17));
    }
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v23 = &off_1E3340118;
    v23[1] = v17;
    v28 = v23;
    WTF::RunLoop::dispatch();
    if (v28)
      (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  }
  v24 = (unsigned int *)v30;
  v30 = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v13);
    }
  }
  return a1;
}

void sub_19444BD88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15)
{
  unsigned int **v15;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  if (a15)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)a15);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)a15));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)a15);
      WTF::fastFree(a15, a2);
    }
  }
  v19 = v15[2];
  v15[2] = 0;
  if (v19)
    (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
  if (*v15)
  {
    *((_QWORD *)*v15 + 1) = 0;
    v20 = *v15;
    *v15 = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
      }
    }
  }
  else
  {
    *v15 = 0;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::Document::removedLastRef(WebCore::Document *this, void *a2)
{
  WebCore::Document *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Style::Update *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WebCore::Node *v25;
  WebCore::TreeScope *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  __int16 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  WTF *v74;
  uint64_t canCurrentThreadAccessThreadLocalData;
  uint64_t v76;
  uint64_t v77;
  unsigned int *result;
  int v79;
  double v80;
  WebCore::Document *v81;
  WebCore::TimerBase *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t **v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  double v96;
  WebCore::Document *v97;
  WebCore::TimerBase *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  uint64_t hasValidHeapPosition;
  unsigned int *v107;
  uint64_t **v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  double v112;
  __n128 v113;
  double v114;
  double v117;
  __n128 v118;
  double v119;
  unsigned int *v122;
  _QWORD *v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int *v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  double v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  double v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  WebCore::Document *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  char v174;

  v2 = this;
  ++WebCore::ScriptDisallowedScope::s_count;
  *((_BYTE *)this + 3448) = 1;
  v3 = *((_DWORD *)this + 831);
  if (!v3)
  {
    WebCore::Document::commonTeardown(this, a2);
    v60 = *((_WORD *)v2 + 15);
LABEL_213:
    *((_WORD *)v2 + 15) = v60 | 0x400;
    result = (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v2 + 72))(v2);
    goto LABEL_211;
  }
  *((_DWORD *)this + 831) = v3 + 1;
  if (*((_QWORD *)this + 243) && !*((_BYTE *)this + 3405))
  {
    __break(0xC471u);
    JUMPOUT(0x19444C408);
  }
  v4 = *((_QWORD *)this + 156);
  *((_QWORD *)v2 + 156) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)v2 + 157);
  *((_QWORD *)v2 + 157) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)v2 + 158);
  *((_QWORD *)v2 + 158) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)v2 + 185);
  *((_QWORD *)v2 + 185) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)v2 + 159);
  *((_QWORD *)v2 + 159) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)v2 + 151);
  *((_QWORD *)v2 + 151) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = (_QWORD *)*((_QWORD *)v2 + 160);
  if (!v10)
  {
    v11 = 0;
    v12 = 0;
LABEL_24:
    v13 = &v10[2 * v12];
    goto LABEL_25;
  }
  v12 = *((unsigned int *)v10 - 1);
  v13 = &v10[2 * v12];
  if (!*((_DWORD *)v10 - 3))
  {
    v11 = &v10[2 * v12];
    goto LABEL_24;
  }
  v11 = (uint64_t *)*((_QWORD *)v2 + 160);
  if (!(_DWORD)v12)
    goto LABEL_25;
  v46 = 16 * v12;
  v11 = (uint64_t *)*((_QWORD *)v2 + 160);
  do
  {
    if ((unint64_t)(*v11 + 1) > 1)
      goto LABEL_25;
    v11 += 2;
    v46 -= 16;
  }
  while (v46);
  v11 = v13;
LABEL_25:
  while (!v10)
  {
    if (!v11)
      goto LABEL_27;
LABEL_121:
    v52 = *v11;
    v51 = v11 + 2;
    *(_QWORD *)(v52 + 48) &= ~0x2000000000000uLL;
    v53 = v13;
    if (v51 != v13)
    {
      v53 = v51;
      while ((unint64_t)(*v53 + 1) <= 1)
      {
        v53 += 2;
        if (v53 == v13)
        {
          v53 = v13;
          break;
        }
      }
    }
    v10 = (_QWORD *)*((_QWORD *)v2 + 160);
    v11 = v53;
  }
  v47 = *((unsigned int *)v10 - 1);
  if (v11 != &v10[2 * v47])
    goto LABEL_121;
  *((_QWORD *)v2 + 160) = 0;
  if ((_DWORD)v47)
  {
    v48 = v10;
    do
    {
      v49 = *v48;
      if (*v48 != -1)
      {
        if (v49)
        {
          *v48 = 0;
          if (*(_DWORD *)(v49 + 24) == 2)
          {
            if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v49);
          }
          else
          {
            *(_DWORD *)(v49 + 24) -= 2;
          }
        }
        else
        {
          *v48 = 0;
        }
      }
      v48 += 2;
      --v47;
    }
    while (v47);
  }
  WTF::fastFree((WTF *)(v10 - 2), a2);
LABEL_27:
  v14 = *((_QWORD *)v2 + 249);
  if (v14)
  {
    ++*(_DWORD *)(v14 + 8);
    v15 = *(_QWORD *)(v14 + 56);
    *(_QWORD *)(v14 + 56) = 0;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    v16 = *(_QWORD *)(v14 + 48);
    *(_QWORD *)(v14 + 48) = 0;
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
    v17 = *(_DWORD **)(v14 + 32);
    *(_QWORD *)(v14 + 32) = 0;
    if (v17)
    {
      if (v17[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
      else
        --v17[4];
    }
    *(_BYTE *)(v14 + 128) = 0;
    v18 = *(_DWORD *)(v14 + 8);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19444C448);
    }
    *(_DWORD *)(v14 + 8) = v18 - 1;
  }
  v19 = *((_QWORD *)v2 + 361);
  if (v19)
  {
    *((_QWORD *)v2 + 361) = 0;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v19, a2);
    v20 = *((_QWORD *)v2 + 361);
    *((_DWORD *)v2 + 724) = 0;
    if (v20)
    {
      LODWORD(v20) = *(_DWORD *)(v20 - 12);
      if (v20 > 0x7FFFFFFE)
        LODWORD(v20) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v20) = 0;
    *((_DWORD *)v2 + 724) = 0;
  }
  *((_DWORD *)v2 + 725) = 2 * v20;
  v21 = (WebCore::Style::Update *)*((_QWORD *)v2 + 195);
  *((_QWORD *)v2 + 195) = 0;
  if (v21)
  {
    WebCore::Style::Update::~Update(v21, a2);
    if (*(_DWORD *)v22)
    {
      *(_QWORD *)(v22 + 80) = 0;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)v22 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  v23 = *((_QWORD *)v2 + 332);
  if (v23)
    WebCore::DocumentFontLoader::stopLoadingAndClearFonts(v23, a2);
  v24 = (_DWORD *)*((_QWORD *)v2 + 91);
  *((_QWORD *)v2 + 91) = 0;
  if (v24)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 112))(v24);
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  if (*(_BYTE *)(*((_QWORD *)v2 + 383) + 153))
  {
    __break(0xC471u);
    JUMPOUT(0x19444C428);
  }
  WebCore::TreeScope::destroyTreeScopeData((uint64_t)v2 + 96, a2);
  if ((*((_WORD *)v2 + 39) & 0x3FF) != 0)
  {
    v61 = *((_QWORD *)v2 + 10);
    if (v61)
    {
      *(_DWORD *)(v61 + 24) += 2;
      v171 = v61;
      do
      {
        WebCore::Node::updateAncestorConnectedSubframeCountForRemoval(v61);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v171, *(_QWORD *)(v171 + 56));
        v61 = v171;
      }
      while (v171);
    }
  }
  v27 = WebCore::ScriptDisallowedScope::s_count++;
  v28 = *((_QWORD *)v2 + 10);
  if (v28)
  {
    *(_DWORD *)(v28 + 24) += 2;
    do
    {
      v29 = v28;
      v28 = *(_QWORD *)(v28 + 56);
      if (v28)
      {
        *(_DWORD *)(v28 + 24) += 2;
        v31 = (_DWORD *)(v29 + 24);
        v30 = *(_DWORD *)(v29 + 24);
        *(_QWORD *)(v29 + 56) = 0;
        *(_QWORD *)(v29 + 32) = 0;
        *(_DWORD *)(v29 + 24) = v30 & 0xFFFFFFFE;
        *(_QWORD *)(v28 + 48) = (unint64_t)*(unsigned __int16 *)(v28 + 54) << 48;
      }
      else
      {
        v31 = (_DWORD *)(v29 + 24);
        v50 = *(_DWORD *)(v29 + 24);
        *(_QWORD *)(v29 + 56) = 0;
        *(_QWORD *)(v29 + 32) = 0;
        *(_DWORD *)(v29 + 24) = v50 & 0xFFFFFFFE;
      }
      *((_QWORD *)v2 + 10) = v28;
      v32 = *(_QWORD *)(*((_QWORD *)v2 + 5) + 8);
      v33 = *(_DWORD *)(v32 + 24) + 2;
      *(_DWORD *)(v32 + 24) = v33;
      v25 = *(WebCore::Node **)(v29 + 40);
      if (v25 != (WebCore::Node *)(v32 + 96))
      {
        WebCore::Node::moveTreeToNewScope(v29, v25, (WebCore::TreeScope *)(v32 + 96), v26);
        v33 = *(_DWORD *)(v32 + 24);
      }
      v34 = v33 - 2;
      if (v34)
      {
        *(_DWORD *)(v32 + 24) = v34;
      }
      else if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v32);
      }
      v35 = *(_QWORD *)(v29 + 16);
      if ((v35 & 0x18000000000000) != 0)
      {
        v45 = (*((_BYTE *)v2 + 22) & 0x18) == 0;
        if ((v35 & 0x8000000000000) != 0)
          WebCore::notifyNodeRemovedFromDocument((uint64_t)v2, v45, v29);
        else
          WebCore::notifyNodeRemovedFromTree((uint64_t)v2, v45, v29);
      }
      if (*v31 == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v29);
      }
      else
      {
        *v31 -= 2;
      }
    }
    while (v28);
    v27 = WebCore::ScriptDisallowedScope::s_count - 1;
  }
  *((_QWORD *)v2 + 11) = 0;
  WebCore::ScriptDisallowedScope::s_count = v27;
  v36 = *((_QWORD *)v2 + 386);
  if (v36 && *(_DWORD *)(v36 - 12))
  {
    __break(0xC471u);
    JUMPOUT(0x19444C62CLL);
  }
  v37 = (WTF *)*((_QWORD *)v2 + 169);
  *((_QWORD *)v2 + 169) = 0;
  if (v37)
  {
    v38 = (uint64_t *)*((_QWORD *)v37 + 1);
    *((_QWORD *)v37 + 1) = 0;
    if (v38)
    {
      v39 = v38[2];
      if (v39)
      {
        v54 = *(unsigned int *)(v39 - 4);
        if ((_DWORD)v54)
        {
          v55 = (WTF::StringImpl **)v38[2];
          do
          {
            v56 = *v55;
            if (*v55 != (WTF::StringImpl *)-1)
            {
              *v55 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, v25);
                else
                  *(_DWORD *)v56 -= 2;
              }
            }
            v55 += 2;
            --v54;
          }
          while (v54);
        }
        WTF::fastFree((WTF *)(v39 - 16), v25);
      }
      if (*v38)
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(*v38, v25);
      WTF::fastFree((WTF *)v38, v25);
    }
    v40 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
    {
      v57 = *(unsigned int *)(v40 - 4);
      if ((_DWORD)v57)
      {
        v58 = *(_QWORD *)v37;
        do
        {
          v59 = *(WTF::StringImpl **)v58;
          if (*(_QWORD *)v58 != -1)
          {
            if (*(_QWORD *)(v58 + 8))
            {
              WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(*(_QWORD *)(v58 + 8), v25);
              v59 = *(WTF::StringImpl **)v58;
            }
            *(_QWORD *)v58 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
                WTF::StringImpl::destroy(v59, v25);
              else
                *(_DWORD *)v59 -= 2;
            }
          }
          v58 += 16;
          --v57;
        }
        while (v57);
      }
      WTF::fastFree((WTF *)(v40 - 16), v25);
    }
    WTF::fastFree(v37, v25);
  }
  v41 = *((_QWORD *)v2 + 187);
  if (v41)
  {
    ++*(_DWORD *)v41;
    v42 = *(_QWORD *)(v41 + 8);
    if (v42)
    {
      v168 = v2;
      *(_QWORD *)(v41 + 8) = 0;
      v43 = *(unsigned int *)(v42 - 4);
      if ((_DWORD)v43)
      {
        for (i = 0; i != v43; ++i)
        {
          v62 = (uint64_t *)(v42 + 16 * i);
          v63 = *v62;
          if (*v62 != -1)
          {
            v64 = (WTF *)v62[1];
            v62[1] = 0;
            if (v64)
            {
              v65 = *((_DWORD *)v64 + 3);
              if (v65)
              {
                v66 = *(WTF **)v64;
                v67 = *(_QWORD *)v64 + 160 * v65;
                while (1)
                {
                  v68 = (WTF *)*((_QWORD *)v66 + 14);
                  if ((WTF *)((char *)v66 + 128) != v68 && v68 != 0)
                    break;
                  v70 = *((unsigned int *)v66 + 24);
                  if ((_DWORD)v70 != -1)
                    goto LABEL_180;
LABEL_181:
                  *((_DWORD *)v66 + 24) = -1;
                  if (*(_QWORD *)v66)
                  {
                    *(_QWORD *)(*(_QWORD *)v66 + 8) = 0;
                    v71 = *(unsigned int **)v66;
                    *(_QWORD *)v66 = 0;
                    if (v71)
                    {
                      do
                      {
                        v72 = __ldaxr(v71);
                        v73 = v72 - 1;
                      }
                      while (__stlxr(v73, v71));
                      if (!v73)
                      {
                        atomic_store(1u, v71);
                        WTF::fastFree((WTF *)v71, v25);
                      }
                    }
                  }
                  else
                  {
                    *(_QWORD *)v66 = 0;
                  }
                  v66 = (WTF *)((char *)v66 + 160);
                  if (v66 == (WTF *)v67)
                    goto LABEL_188;
                }
                *((_QWORD *)v66 + 14) = 0;
                *((_DWORD *)v66 + 30) = 0;
                WTF::fastFree(v68, v25);
                v70 = *((unsigned int *)v66 + 24);
                if ((_DWORD)v70 == -1)
                  goto LABEL_181;
LABEL_180:
                ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v70])(&v174, (char *)v66 + 32);
                goto LABEL_181;
              }
LABEL_188:
              v74 = *(WTF **)v64;
              if (*(_QWORD *)v64)
              {
                *(_QWORD *)v64 = 0;
                *((_DWORD *)v64 + 2) = 0;
                WTF::fastFree(v74, v25);
              }
              WTF::fastFree(v64, v25);
              v63 = *v62;
            }
            *v62 = 0;
            if (v63)
            {
              if (*(_DWORD *)(v63 + 24) == 2)
              {
                if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v63);
              }
              else
              {
                *(_DWORD *)(v63 + 24) -= 2;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v42 - 16), v25);
      v2 = v168;
    }
    *(_DWORD *)(v41 + 16) = 0;
    if ((*(_QWORD *)(v41 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_201;
    *(_QWORD *)(v41 + 56) = 0;
    canCurrentThreadAccessThreadLocalData = WTF::canCurrentThreadAccessThreadLocalData();
    if ((canCurrentThreadAccessThreadLocalData & 1) == 0)
    {
      canCurrentThreadAccessThreadLocalData = WebCore::shouldSuppressThreadSafetyCheck((WebCore *)canCurrentThreadAccessThreadLocalData);
      if ((canCurrentThreadAccessThreadLocalData & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19444C96CLL);
      }
    }
    if (*(double *)(v41 + 48) != 0.0)
      *(_QWORD *)(v41 + 48) = 0;
    if ((*(_QWORD *)(v41 + 64) & 0xFFFFFFFFFFFFLL) == 0
      || (v80 = *(double *)((*(_QWORD *)(v41 + 64) & 0xFFFFFFFFFFFFLL) + 8), v80 == 0.0))
    {
LABEL_201:
      if ((*(_QWORD *)(v41 + 120) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_206;
      *(_QWORD *)(v41 + 112) = 0;
      v76 = WTF::canCurrentThreadAccessThreadLocalData();
      if ((v76 & 1) == 0)
      {
        v76 = WebCore::shouldSuppressThreadSafetyCheck((WebCore *)v76);
        if ((v76 & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19444C994);
        }
      }
      if (*(double *)(v41 + 104) != 0.0)
        *(_QWORD *)(v41 + 104) = 0;
      if ((*(_QWORD *)(v41 + 120) & 0xFFFFFFFFFFFFLL) == 0
        || (v96 = *(double *)((*(_QWORD *)(v41 + 120) & 0xFFFFFFFFFFFFLL) + 8), v96 == 0.0))
      {
LABEL_206:
        if (!*(_DWORD *)v41)
        {
          __break(0xC471u);
          JUMPOUT(0x19444C8F8);
        }
        --*(_DWORD *)v41;
        goto LABEL_208;
      }
      v97 = v2;
      v170 = v41;
      v98 = (WebCore::TimerBase *)(v41 + 88);
      v99 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (v99)
      {
        v100 = *(_QWORD *)(v99 + 96);
        if (v100)
          goto LABEL_240;
      }
      else
      {
        v99 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v76);
        v100 = *(_QWORD *)(v99 + 96);
        if (v100)
        {
LABEL_240:
          v101 = *(_QWORD *)(v100 + 48);
          v102 = *(_DWORD *)(v101 + 28);
          *(_DWORD *)(v101 + 28) = v102 + 1;
          v103 = *(_QWORD *)(v170 + 120) & 0xFFFFFFFFFFFFLL;
          if (v103)
            goto LABEL_358;
          v143 = bmalloc::api::isoAllocate();
          *(_DWORD *)v143 = 1;
          *(_QWORD *)(v143 + 8) = 0;
          *(_DWORD *)(v143 + 16) = 0;
          *(_QWORD *)(v143 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v143) + 48);
          *(_QWORD *)(v143 + 32) = v98;
          *(_DWORD *)(v143 + 40) = -1;
          v144 = *(_QWORD *)(v170 + 120);
          *(_QWORD *)(v170 + 120) = v144 & 0xFF000000000000 | v143;
          v145 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFLL);
          if ((v144 & 0xFFFFFFFFFFFFLL) != 0)
          {
            do
            {
              v146 = __ldaxr(v145);
              v147 = v146 - 1;
            }
            while (__stlxr(v147, v145));
            if (!v147)
            {
              atomic_store(1u, v145);
              bmalloc::api::isoDeallocate((bmalloc::api *)v145, v25);
            }
          }
          v103 = *(_QWORD *)(v170 + 120) & 0xFFFFFFFFFFFFLL;
          if (v103)
          {
LABEL_358:
            do
              v104 = __ldaxr((unsigned int *)v103);
            while (__stlxr(v104 + 1, (unsigned int *)v103));
          }
          *(_QWORD *)(v103 + 8) = 0;
          *(_DWORD *)(v103 + 16) = v102;
          v105 = *(_DWORD *)(v103 + 40);
          if ((*(_QWORD *)(v170 + 120) & 0xFFFFFFFFFFFFLL) == 0
            || (v158 = *(double *)((*(_QWORD *)(v170 + 120) & 0xFFFFFFFFFFFFLL) + 8), v158 == 0.0))
          {
            hasValidHeapPosition = (uint64_t)WebCore::TimerBase::heapDelete(v98, v25);
          }
          else
          {
            hasValidHeapPosition = WebCore::TimerBase::hasValidHeapPosition(v98, v25);
            if ((hasValidHeapPosition & 1) == 0)
            {
              if (v158 >= v96)
              {
                v159 = *(_QWORD *)(v170 + 120) & 0xFFFFFFFFFFFFLL;
                if (v159)
                {
                  do
                    v160 = __ldaxr((unsigned int *)v159);
                  while (__stlxr(v160 + 1, (unsigned int *)v159));
                }
                v161 = *(_QWORD *)(v159 + 8);
                *(_QWORD *)(v159 + 8) = 0xFFF0000000000000;
                WebCore::TimerBase::heapDecreaseKey((uint64_t)v98, v25);
                v162 = *(_QWORD *)(v170 + 120) & 0xFFFFFFFFFFFFLL;
                if (v162)
                {
                  do
                    v163 = __ldaxr((unsigned int *)v162);
                  while (__stlxr(v163 + 1, (unsigned int *)v162));
                }
                std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v162 + 24), (void *)(**(_QWORD **)(v162 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v162 + 24) + 12)), (uint64_t)&v172, *(unsigned int *)(*(_QWORD *)(v162 + 24) + 12));
                do
                {
                  v164 = __ldaxr((unsigned int *)v162);
                  v165 = v164 - 1;
                }
                while (__stlxr(v165, (unsigned int *)v162));
                if (!v165)
                {
                  atomic_store(1u, (unsigned int *)v162);
                  bmalloc::api::isoDeallocate((bmalloc::api *)v162, v25);
                }
                *(_QWORD *)(v159 + 8) = v161;
                do
                {
                  v166 = __ldaxr((unsigned int *)v159);
                  v167 = v166 - 1;
                }
                while (__stlxr(v167, (unsigned int *)v159));
                if (!v167)
                {
                  atomic_store(1u, (unsigned int *)v159);
                  bmalloc::api::isoDeallocate((bmalloc::api *)v159, v25);
                }
              }
              hasValidHeapPosition = WebCore::TimerBase::heapDecreaseKey((uint64_t)v98, v25);
            }
          }
          if (v105 && *(_DWORD *)(v103 + 40))
            goto LABEL_359;
          v107 = (unsigned int *)WebCore::threadGlobalData((WebCore *)hasValidHeapPosition);
          v108 = (uint64_t **)*((_QWORD *)v107 + 6);
          if (!v108[2])
            goto LABEL_359;
          while (1)
          {
            if (!*((_DWORD *)v108 + 3))
              goto LABEL_250;
            v109 = **v108;
            if (*(_QWORD *)(v109 + 32))
              break;
            v107 = WebCore::TimerBase::heapDeleteNullMin(v108);
          }
          if (*((_BYTE *)v108 + 24))
          {
LABEL_250:
            v108[4] = 0;
            (*(void (**)(uint64_t *))(*v108[2] + 32))(v108[2]);
            goto LABEL_251;
          }
          v117 = *(double *)(v109 + 8);
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v107);
          v119 = *((double *)v108 + 4);
          if (v119 == 0.0 || v119 > v118.n128_f64[0] || v118.n128_f64[0] < v117)
          {
            *((double *)v108 + 4) = v117;
            v118.n128_f64[0] = v117 - v118.n128_f64[0];
            if (v118.n128_f64[0] < 0.0)
              v118.n128_f64[0] = 0.0;
            (*(void (**)(uint64_t *, __n128))(*v108[2] + 24))(v108[2], v118);
          }
LABEL_251:
          v41 = v170;
          v2 = v97;
          if (v103)
          {
LABEL_359:
            do
            {
              v110 = __ldaxr((unsigned int *)v103);
              v111 = v110 - 1;
            }
            while (__stlxr(v111, (unsigned int *)v103));
            v41 = v170;
            v2 = v97;
            if (!v111)
            {
              atomic_store(1u, (unsigned int *)v103);
              bmalloc::api::isoDeallocate((bmalloc::api *)v103, v25);
            }
          }
          goto LABEL_206;
        }
      }
      v100 = WTF::fastMalloc((WTF *)0x60);
      *(_DWORD *)(v100 + 8) = 1;
      v135 = (unsigned int *)(v100 + 8);
      *(_QWORD *)v100 = off_1E31F4A70;
      v136 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v136 = 0;
      *(_QWORD *)(v100 + 16) = v136;
      *(_QWORD *)v100 = off_1E3407108;
      *(_BYTE *)(v100 + 24) = 0;
      *(_QWORD *)(v100 + 32) = 0;
      *(_QWORD *)(v100 + 40) = 0;
      v137 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v137 + 28) = 0;
      *(_QWORD *)(v137 + 32) = 0;
      *(_QWORD *)(v137 + 8) = 0;
      *(_QWORD *)(v137 + 16) = 0;
      *(_QWORD *)v137 = 0;
      *(_WORD *)(v137 + 24) = 0;
      if (WTF::isUIThread((WTF *)v137))
      {
        {
          WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
          qword_1ECE90CE8 = 0;
        }
        WebCore::ThreadTimers::setSharedTimer((uint64_t **)v137, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
      }
      *(_QWORD *)(v100 + 48) = v137;
      *(_OWORD *)(v100 + 56) = 0u;
      *(_OWORD *)(v100 + 72) = 0u;
      *(_BYTE *)(v100 + 88) = 0;
      if (pthread_main_np())
      {
        WebCore::sharedMainThreadStaticData = v100;
        do
          v138 = __ldaxr(v135);
        while (__stlxr(v138 + 1, v135));
      }
      v139 = *(unsigned int **)(v99 + 96);
      *(_QWORD *)(v99 + 96) = v100;
      if (v139)
      {
        v140 = v139 + 2;
        do
        {
          v141 = __ldaxr(v140);
          v142 = v141 - 1;
        }
        while (__stlxr(v142, v140));
        if (!v142)
        {
          atomic_store(1u, v139 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v139 + 8))(v139);
        }
      }
      goto LABEL_240;
    }
    v81 = v2;
    v169 = v41;
    v82 = (WebCore::TimerBase *)(v41 + 32);
    v83 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (v83)
    {
      v84 = *(_QWORD *)(v83 + 96);
      if (v84)
        goto LABEL_222;
    }
    else
    {
      v83 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)canCurrentThreadAccessThreadLocalData);
      v84 = *(_QWORD *)(v83 + 96);
      if (v84)
      {
LABEL_222:
        v85 = *(_QWORD *)(v84 + 48);
        v86 = *(_DWORD *)(v85 + 28);
        *(_DWORD *)(v85 + 28) = v86 + 1;
        v87 = *(_QWORD *)(v169 + 64) & 0xFFFFFFFFFFFFLL;
        if (v87)
          goto LABEL_360;
        v130 = bmalloc::api::isoAllocate();
        *(_DWORD *)v130 = 1;
        *(_QWORD *)(v130 + 8) = 0;
        *(_DWORD *)(v130 + 16) = 0;
        *(_QWORD *)(v130 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v130) + 48);
        *(_QWORD *)(v130 + 32) = v82;
        *(_DWORD *)(v130 + 40) = -1;
        v131 = *(_QWORD *)(v169 + 64);
        *(_QWORD *)(v169 + 64) = v131 & 0xFF000000000000 | v130;
        v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFLL);
        if ((v131 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v133 = __ldaxr(v132);
            v134 = v133 - 1;
          }
          while (__stlxr(v134, v132));
          if (!v134)
          {
            atomic_store(1u, v132);
            bmalloc::api::isoDeallocate((bmalloc::api *)v132, v25);
          }
        }
        v87 = *(_QWORD *)(v169 + 64) & 0xFFFFFFFFFFFFLL;
        if (v87)
        {
LABEL_360:
          do
            v88 = __ldaxr((unsigned int *)v87);
          while (__stlxr(v88 + 1, (unsigned int *)v87));
        }
        *(_QWORD *)(v87 + 8) = 0;
        *(_DWORD *)(v87 + 16) = v86;
        v89 = *(_DWORD *)(v87 + 40);
        if ((*(_QWORD *)(v169 + 64) & 0xFFFFFFFFFFFFLL) == 0
          || (v148 = *(double *)((*(_QWORD *)(v169 + 64) & 0xFFFFFFFFFFFFLL) + 8), v148 == 0.0))
        {
          v90 = (uint64_t)WebCore::TimerBase::heapDelete(v82, v25);
        }
        else
        {
          v90 = WebCore::TimerBase::hasValidHeapPosition(v82, v25);
          if ((v90 & 1) == 0)
          {
            if (v148 >= v80)
            {
              v149 = *(_QWORD *)(v169 + 64) & 0xFFFFFFFFFFFFLL;
              if (v149)
              {
                do
                  v150 = __ldaxr((unsigned int *)v149);
                while (__stlxr(v150 + 1, (unsigned int *)v149));
              }
              v151 = *(_QWORD *)(v149 + 8);
              *(_QWORD *)(v149 + 8) = 0xFFF0000000000000;
              WebCore::TimerBase::heapDecreaseKey((uint64_t)v82, v25);
              v152 = *(_QWORD *)(v169 + 64) & 0xFFFFFFFFFFFFLL;
              if (v152)
              {
                do
                  v153 = __ldaxr((unsigned int *)v152);
                while (__stlxr(v153 + 1, (unsigned int *)v152));
              }
              std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v152 + 24), (void *)(**(_QWORD **)(v152 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v152 + 24) + 12)), (uint64_t)&v173, *(unsigned int *)(*(_QWORD *)(v152 + 24) + 12));
              do
              {
                v154 = __ldaxr((unsigned int *)v152);
                v155 = v154 - 1;
              }
              while (__stlxr(v155, (unsigned int *)v152));
              if (!v155)
              {
                atomic_store(1u, (unsigned int *)v152);
                bmalloc::api::isoDeallocate((bmalloc::api *)v152, v25);
              }
              *(_QWORD *)(v149 + 8) = v151;
              do
              {
                v156 = __ldaxr((unsigned int *)v149);
                v157 = v156 - 1;
              }
              while (__stlxr(v157, (unsigned int *)v149));
              if (!v157)
              {
                atomic_store(1u, (unsigned int *)v149);
                bmalloc::api::isoDeallocate((bmalloc::api *)v149, v25);
              }
            }
            v90 = WebCore::TimerBase::heapDecreaseKey((uint64_t)v82, v25);
          }
        }
        if (v89 && *(_DWORD *)(v87 + 40))
          goto LABEL_361;
        v91 = (unsigned int *)WebCore::threadGlobalData((WebCore *)v90);
        v92 = (uint64_t **)*((_QWORD *)v91 + 6);
        if (!v92[2])
          goto LABEL_361;
        while (1)
        {
          if (!*((_DWORD *)v92 + 3))
            goto LABEL_232;
          v93 = **v92;
          if (*(_QWORD *)(v93 + 32))
            break;
          v91 = WebCore::TimerBase::heapDeleteNullMin(v92);
        }
        if (*((_BYTE *)v92 + 24))
        {
LABEL_232:
          v92[4] = 0;
          (*(void (**)(uint64_t *))(*v92[2] + 32))(v92[2]);
          goto LABEL_233;
        }
        v112 = *(double *)(v93 + 8);
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v91);
        v114 = *((double *)v92 + 4);
        if (v114 == 0.0 || v114 > v113.n128_f64[0] || v113.n128_f64[0] < v112)
        {
          *((double *)v92 + 4) = v112;
          v113.n128_f64[0] = v112 - v113.n128_f64[0];
          if (v113.n128_f64[0] < 0.0)
            v113.n128_f64[0] = 0.0;
          (*(void (**)(uint64_t *, __n128))(*v92[2] + 24))(v92[2], v113);
        }
LABEL_233:
        v41 = v169;
        v2 = v81;
        if (v87)
        {
LABEL_361:
          do
          {
            v94 = __ldaxr((unsigned int *)v87);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, (unsigned int *)v87));
          v41 = v169;
          v2 = v81;
          if (!v95)
          {
            atomic_store(1u, (unsigned int *)v87);
            bmalloc::api::isoDeallocate((bmalloc::api *)v87, v25);
          }
        }
        goto LABEL_201;
      }
    }
    v84 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v84 + 8) = 1;
    v122 = (unsigned int *)(v84 + 8);
    *(_QWORD *)v84 = off_1E31F4A70;
    v123 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v123 = 0;
    *(_QWORD *)(v84 + 16) = v123;
    *(_QWORD *)v84 = off_1E3407108;
    *(_BYTE *)(v84 + 24) = 0;
    *(_QWORD *)(v84 + 32) = 0;
    *(_QWORD *)(v84 + 40) = 0;
    v124 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v124 + 28) = 0;
    *(_QWORD *)(v124 + 32) = 0;
    *(_QWORD *)(v124 + 8) = 0;
    *(_QWORD *)(v124 + 16) = 0;
    *(_QWORD *)v124 = 0;
    *(_WORD *)(v124 + 24) = 0;
    if (WTF::isUIThread((WTF *)v124))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v124, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v84 + 48) = v124;
    *(_OWORD *)(v84 + 56) = 0u;
    *(_OWORD *)(v84 + 72) = 0u;
    *(_BYTE *)(v84 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v84;
      do
        v125 = __ldaxr(v122);
      while (__stlxr(v125 + 1, v122));
    }
    v126 = *(unsigned int **)(v83 + 96);
    *(_QWORD *)(v83 + 96) = v84;
    if (v126)
    {
      v127 = v126 + 2;
      do
      {
        v128 = __ldaxr(v127);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, v127));
      if (!v129)
      {
        atomic_store(1u, v126 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v126 + 8))(v126);
      }
    }
    goto LABEL_222;
  }
LABEL_208:
  v77 = *((_QWORD *)v2 + 229);
  if (v77)
  {
    *((_QWORD *)v2 + 229) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v77, v25);
  }
  result = WebCore::Document::commonTeardown(v2, v25);
  *((_DWORD *)v2 + 6) = 0;
  v79 = *((_DWORD *)v2 + 831) - 1;
  *((_DWORD *)v2 + 831) = v79;
  if (!v79)
  {
    v60 = *((_WORD *)v2 + 15);
    if ((v60 & 0x400) == 0)
      goto LABEL_213;
  }
LABEL_211:
  --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

void WebCore::ShadowRoot::~ShadowRoot(WebCore::ShadowRoot *this, uint64_t a2, const WTF::StringImpl *a3)
{
  bmalloc::api *v3;
  void *v4;

  WebCore::ShadowRoot::~ShadowRoot(this, a2, a3);
  bmalloc::api::isoDeallocate(v3, v4);
}

{
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::TreeScope *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Style::Scope *v12;
  uint64_t v13;
  WebCore::StyleSheetList *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  WebCore::TreeScope *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;

  if ((*((_BYTE *)this + 22) & 8) != 0)
    WTF::WeakListHashSet<WebCore::ShadowRoot,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ShadowRoot>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 2688, (uint64_t)this);
  v4 = (WTF *)*((_QWORD *)this + 26);
  if (v4)
  {
    ++*(_DWORD *)v4;
    WebCore::StyleSheetList::detach(v4, a2, a3);
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::StyleSheetList::~StyleSheetList(v4, v5);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::Node::willBeDeletedFrom((uint64_t)this, *(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
  *((_BYTE *)this + 192) |= 1u;
  WebCore::ContainerNode::removeDetachedChildren((uint64_t)this, v6, v7, v8);
  if (*((_BYTE *)this + 240))
  {
    v10 = *((_QWORD *)this + 29);
    if (v10)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Vector<WTF::AtomString,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v10, v9);
  }
  v11 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (WebCore::Style::Scope *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v12)
  {
    WebCore::Style::Scope::~Scope(v12, v9);
    if (*(_DWORD *)(v13 + 8))
    {
      *(_OWORD *)(v13 + 288) = 0u;
      *(_OWORD *)(v13 + 304) = 0u;
      *(_OWORD *)(v13 + 256) = 0u;
      *(_OWORD *)(v13 + 272) = 0u;
      *(_OWORD *)(v13 + 224) = 0u;
      *(_OWORD *)(v13 + 240) = 0u;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 208) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 176) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v13, v9);
    }
  }
  v14 = (WebCore::StyleSheetList *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::StyleSheetList::~StyleSheetList(v14, v9);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v15 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v25 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v25)
      {
        v28 = v15;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v25));
        v15 = v28;
      }
      v26 = *(WTF **)(v15 + 16);
      if (v26)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        v27 = v15;
        WTF::fastFree(v26, v9);
        v15 = v27;
      }
      WTF::fastFree((WTF *)v15, v9);
    }
  }
  WebCore::TreeScope::~TreeScope((WebCore::ShadowRoot *)((char *)this + 96), v9);
  WebCore::ContainerNode::~ContainerNode((uint64_t)this, v18, v19, v20);
}

void WebCore::TreeScope::~TreeScope(WebCore::TreeScope *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t **v18;
  WTF::StringImpl *v19;

  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    v4 = *(WTF::StringImpl ***)(v3 + 48);
    if (v4)
      WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*(unsigned int *)(v3 + 56));
    v5 = *(WTF **)(v3 + 24);
    if (v5)
      WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, (void *)*(unsigned int *)(v3 + 32));
    if (*(_QWORD *)v3)
      WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)v3, (void *)*(unsigned int *)(v3 + 8));
    WTF::fastFree((WTF *)v3, a2);
  }
  v6 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
    {
      v17 = *(unsigned int *)(v8 - 4);
      if ((_DWORD)v17)
      {
        v18 = (uint64_t **)(v8 + 8);
        do
        {
          if (*(v18 - 1) != (uint64_t *)-1)
          {
            std::unique_ptr<WebCore::RadioButtonGroup>::~unique_ptr[abi:sn180100](v18, a2);
            v19 = (WTF::StringImpl *)*(v18 - 1);
            *(v18 - 1) = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v19 -= 2;
            }
          }
          v18 += 2;
          --v17;
        }
        while (v17);
      }
      WTF::fastFree((WTF *)(v8 - 16), a2);
    }
    WTF::fastFree(v7, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    v10 = (_DWORD *)*((_QWORD *)v9 + 2);
    if (v10)
    {
      if (!*v10)
      {
        __break(0xC471u);
        JUMPOUT(0x19444D5D4);
      }
      --*v10;
    }
    v11 = *((_QWORD *)v9 + 1);
    if (v11)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::IdTargetObserverRegistry::ObserverSet>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v11, a2);
    if (*(_DWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v9, a2);
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*v12)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v12, a2);
    WTF::fastFree((WTF *)v12, a2);
  }
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (*v13)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v13, a2);
    WTF::fastFree((WTF *)v13, a2);
  }
  v14 = (uint64_t *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    if (*v14)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v14, a2);
    WTF::fastFree((WTF *)v14, a2);
  }
  v15 = (uint64_t *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    if (*v15)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v15, a2);
    WTF::fastFree((WTF *)v15, a2);
  }
  v16 = (uint64_t *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
  {
    if (*v16)
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v16, a2);
    WTF::fastFree((WTF *)v16, a2);
  }
}

void WebCore::Style::Scope::~Scope(WebCore::Style::Scope *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WebCore::RenderStyle *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WebCore::Style::RuleSet *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  WebCore::Style::Resolver *v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  WTF *v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  WTF **v41;
  WTF *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF *v46;
  WTF *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  WebCore::CSSCounterStyle *v57;
  WTF *v58;
  WTF *v59;
  void *v60;
  WTF *v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  WebCore::CSSRegisteredCustomProperty *v64;
  WTF *v65;
  void *v66;
  WTF *v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  WebCore::CSSRegisteredCustomProperty *v70;
  WTF *v71;
  void *v72;
  WTF *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  WTF::StringImpl **v83;
  WTF::StringImpl **v84;
  WTF::StringImpl **v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;

  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    do
    {
      v36 = __ldaxr((unsigned int *)v3);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v3));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v4 = *((_QWORD *)this + 39);
  if (v4)
    WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::deallocateTable(v4, a2);
  v5 = (WTF *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v5)
  {
    if (*(_QWORD *)v5)
    {
      v83 = *(WTF::StringImpl ***)v5;
      v54 = *(unsigned int *)(*(_QWORD *)v5 - 4);
      if ((_DWORD)v54)
      {
        v55 = *(WTF::StringImpl ***)v5;
        do
        {
          v56 = *v55;
          if (*v55 != (WTF::StringImpl *)-1)
          {
            v57 = v55[1];
            v55[1] = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 1)
              {
                v79 = v54;
                v58 = v57;
                v88 = (WTF *)v55;
                WebCore::CSSCounterStyle::~CSSCounterStyle(v57, a2);
                v59 = v58;
                v54 = v79;
                WTF::fastFree(v59, v60);
                v55 = (WTF::StringImpl **)v88;
                v56 = *(WTF::StringImpl **)v88;
              }
              else
              {
                --*(_DWORD *)v57;
              }
            }
            *v55 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
              {
                v89 = (WTF *)v55;
                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
                v55 = (WTF::StringImpl **)v89;
              }
              else
              {
                *(_DWORD *)v56 -= 2;
              }
            }
          }
          v55 += 2;
          --v54;
        }
        while (v54);
      }
      WTF::fastFree((WTF *)(v83 - 2), a2);
    }
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v6)
  {
    v7 = (WebCore::RenderStyle *)*((_QWORD *)v6 + 3);
    *((_QWORD *)v6 + 3) = 0;
    if (v7)
    {
      WebCore::RenderStyle::~RenderStyle(v7, a2);
      if (*(_DWORD *)v8)
      {
        *((_OWORD *)v8 + 2) = 0u;
        *((_OWORD *)v8 + 3) = 0u;
        *(_OWORD *)v8 = 0u;
        *((_OWORD *)v8 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v8, a2);
      }
    }
    v9 = *((_QWORD *)v6 + 2);
    if (v9)
    {
      v80 = *((_QWORD *)v6 + 2);
      v61 = (WTF *)*(unsigned int *)(v9 - 4);
      if ((_DWORD)v61)
      {
        v62 = (WTF::StringImpl **)*((_QWORD *)v6 + 2);
        do
        {
          v63 = *v62;
          if (*v62 != (WTF::StringImpl *)-1)
          {
            v84 = v62;
            v90 = v61;
            v64 = v62[1];
            v62[1] = 0;
            if (v64)
            {
              v65 = v64;
              WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v64, (WTF::StringImpl *)a2);
              WTF::fastFree(v65, v66);
              v62 = v84;
              v63 = *v84;
            }
            *v62 = 0;
            v61 = v90;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
              {
                WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
                v61 = v90;
              }
              else
              {
                *(_DWORD *)v63 -= 2;
              }
            }
          }
          v62 += 2;
          v61 = (WTF *)((char *)v61 - 1);
        }
        while (v61);
      }
      WTF::fastFree((WTF *)(v80 - 16), a2);
    }
    v10 = *((_QWORD *)v6 + 1);
    if (v10)
    {
      v81 = *((_QWORD *)v6 + 1);
      v67 = (WTF *)*(unsigned int *)(v10 - 4);
      if ((_DWORD)v67)
      {
        v68 = (WTF::StringImpl **)*((_QWORD *)v6 + 1);
        do
        {
          v69 = *v68;
          if (*v68 != (WTF::StringImpl *)-1)
          {
            v85 = v68;
            v91 = v67;
            v70 = v68[1];
            v68[1] = 0;
            if (v70)
            {
              v71 = v70;
              WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v70, (WTF::StringImpl *)a2);
              WTF::fastFree(v71, v72);
              v68 = v85;
              v69 = *v85;
            }
            *v68 = 0;
            v67 = v91;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
              {
                WTF::StringImpl::destroy(v69, (WTF::StringImpl *)a2);
                v67 = v91;
              }
              else
              {
                *(_DWORD *)v69 -= 2;
              }
            }
          }
          v68 += 2;
          v67 = (WTF *)((char *)v67 - 1);
        }
        while (v67);
      }
      WTF::fastFree((WTF *)(v81 - 16), a2);
    }
    WTF::fastFree(v6, a2);
  }
  v11 = *((_QWORD *)this + 35);
  if (v11)
  {
    v38 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v38)
    {
      v39 = (uint64_t *)*((_QWORD *)this + 35);
      do
      {
        if (*v39 != -1)
          v39 = WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>::~KeyValuePair(v39, a2);
        v39 += 2;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v12 = *((_QWORD *)this + 33);
  if (v12)
  {
    v46 = (WTF *)*(unsigned int *)(v12 - 4);
    if ((_DWORD)v46)
    {
      v47 = 0;
      v82 = (WTF *)*(unsigned int *)(v12 - 4);
      do
      {
        v48 = (uint64_t *)(v12 + 16 * (_QWORD)v47);
        v49 = *v48;
        if (*v48 != -1)
        {
          *v48 = 0;
          if (v49)
          {
            v87 = v47;
            do
            {
              v50 = __ldaxr((unsigned int *)v49);
              v51 = --v50 == 0;
            }
            while (__stlxr(v50, (unsigned int *)v49));
            v46 = v82;
            if (v51)
            {
              atomic_store(1u, (unsigned int *)v49);
              v52 = *(unsigned int *)(v49 + 28);
              if ((_DWORD)v52)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v49 + 16), (WTF::StringImpl *)(*(_QWORD *)(v49 + 16) + 32 * v52));
              v53 = *(WTF **)(v49 + 16);
              if (v53)
              {
                *(_QWORD *)(v49 + 16) = 0;
                *(_DWORD *)(v49 + 24) = 0;
                WTF::fastFree(v53, a2);
              }
              WTF::fastFree((WTF *)v49, a2);
              v46 = v82;
              v47 = v87;
            }
          }
        }
        v47 = (WTF *)((char *)v47 + 1);
      }
      while (v47 != v46);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF *)*((_QWORD *)this + 25);
  while (v14)
  {
    v73 = v14;
    v14 = (WTF *)*((_QWORD *)v14 + 2);
    v74 = *(unsigned int **)v73;
    *(_QWORD *)v73 = 0;
    if (v74)
    {
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        atomic_store(1u, v74);
        v92 = (WTF *)v74;
        v77 = v74[7];
        if ((_DWORD)v77)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v92 + 2), (WTF::StringImpl *)(*((_QWORD *)v92 + 2) + 32 * v77));
        v78 = (WTF *)*((_QWORD *)v92 + 2);
        if (v78)
        {
          *((_QWORD *)v92 + 2) = 0;
          *((_DWORD *)v92 + 6) = 0;
          WTF::fastFree(v78, a2);
        }
        WTF::fastFree(v92, a2);
      }
    }
    WTF::fastFree(v73, a2);
  }
  v15 = *((_QWORD *)this + 24);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), a2);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 22, a2);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 20, v16);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 18, v17);
  v19 = *((_QWORD *)this + 17);
  if (v19)
  {
    v40 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v40)
    {
      v41 = (WTF **)*((_QWORD *)this + 17);
      do
      {
        v42 = *v41;
        if (*v41 != (WTF *)-1)
        {
          *v41 = 0;
          if (v42)
          {
            v86 = (WTF *)v41;
            if (*(_DWORD *)v42 == 1)
              WTF::fastFree(v42, v18);
            else
              --*(_DWORD *)v42;
            v41 = (WTF **)v86;
          }
        }
        ++v41;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v19 - 16), v18);
  }
  *((_QWORD *)this + 10) = off_1E31F7378;
  v20 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  WebCore::TimerBase::~TimerBase((WebCore::Style::Scope *)((char *)this + 80));
  v22 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v22, v21);
      WTF::fastFree(v34, v35);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  v23 = *((unsigned int *)this + 17);
  if ((_DWORD)v23)
  {
    v31 = (_DWORD **)*((_QWORD *)this + 7);
    v32 = 8 * v23;
    do
    {
      v33 = *v31;
      *v31 = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        else
          --v33[2];
      }
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v24 = (WTF *)*((_QWORD *)this + 7);
  if (v24)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v24, v21);
  }
  v25 = *((unsigned int *)this + 13);
  if ((_DWORD)v25)
  {
    v28 = (_DWORD **)*((_QWORD *)this + 5);
    v29 = 8 * v25;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  v26 = (WTF *)*((_QWORD *)this + 5);
  if (v26)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v26, v21);
  }
  v27 = (WebCore::Style::Resolver *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v27)
    WTF::RefCounted<WebCore::Style::Resolver>::deref(v27);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v43 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v43)
    {
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, v21);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::ContainerNode::removeDetachedChildren(uint64_t this, uint64_t a2, uint64_t a3, WebCore::TreeScope *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  WebCore::Node *v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;

  v4 = this;
  if ((*(_WORD *)(this + 78) & 0x3FF) != 0)
  {
    this = *(_QWORD *)(this + 80);
    if (this)
    {
      *(_DWORD *)(this + 24) += 2;
      v17 = this;
      do
      {
        WebCore::Node::updateAncestorConnectedSubframeCountForRemoval(this);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v17, *(_QWORD *)(v17 + 56));
        this = v17;
      }
      while (v17);
    }
  }
  v5 = WebCore::ScriptDisallowedScope::s_count++;
  v6 = *(_QWORD *)(v4 + 80);
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 56);
      if (v6)
      {
        *(_DWORD *)(v6 + 24) += 2;
        v9 = (_DWORD *)(v7 + 24);
        v8 = *(_DWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 24) = v8 & 0xFFFFFFFE;
        *(_QWORD *)(v6 + 48) = (unint64_t)*(unsigned __int16 *)(v6 + 54) << 48;
      }
      else
      {
        v9 = (_DWORD *)(v7 + 24);
        v16 = *(_DWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 24) = v16 & 0xFFFFFFFE;
      }
      *(_QWORD *)(v4 + 80) = v6;
      v10 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
      v11 = *(_DWORD *)(v10 + 24) + 2;
      *(_DWORD *)(v10 + 24) = v11;
      v12 = *(WebCore::Node **)(v7 + 40);
      if (v12 != (WebCore::Node *)(v10 + 96))
      {
        this = WebCore::Node::moveTreeToNewScope(v7, v12, (WebCore::TreeScope *)(v10 + 96), a4);
        v11 = *(_DWORD *)(v10 + 24);
      }
      v13 = v11 - 2;
      if (v13)
      {
        *(_DWORD *)(v10 + 24) = v13;
      }
      else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
      }
      v14 = *(_QWORD *)(v7 + 16);
      if ((v14 & 0x18000000000000) != 0)
      {
        v15 = (*(_BYTE *)(v4 + 22) & 0x18) == 0;
        if ((v14 & 0x8000000000000) != 0)
          this = WebCore::notifyNodeRemovedFromDocument(v4, v15, v7);
        else
          this = WebCore::notifyNodeRemovedFromTree(v4, v15, v7);
      }
      if (*v9 == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v12);
      }
      else
      {
        *v9 -= 2;
      }
    }
    while (v6);
    v5 = WebCore::ScriptDisallowedScope::s_count - 1;
  }
  *(_QWORD *)(v4 + 88) = 0;
  WebCore::ScriptDisallowedScope::s_count = v5;
  return this;
}

uint64_t WebCore::Node::willBeDeletedFrom(uint64_t this, WebCore::Document *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  WebCore::Document *i;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  WebCore::Document *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v3 = this;
  if ((*(_BYTE *)(this + 22) & 1) != 0)
  {
    WebCore::Document::didRemoveWheelEventHandler((uint64_t)a2, (WebCore::Node *)this, 1);
    WebCore::Document::removeTouchEventListener((uint64_t)a2, v3, 1);
    this = WebCore::Document::didRemoveTouchEventHandler(a2, v3, 1);
  }
  v4 = *((_QWORD *)a2 + 79);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 != v3)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(v4 + 16 * v9);
        ++v11;
        if (v10 == v3)
          goto LABEL_10;
      }
      v9 = *(unsigned int *)(v4 - 4);
    }
LABEL_10:
    if (v9 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 16 * v9) = -1;
      this = (uint64_t)a2 + 632;
      ++*(_DWORD *)(*((_QWORD *)a2 + 79) - 16);
      v12 = *((_QWORD *)a2 + 79);
      if (v12)
        v13 = *(_DWORD *)(v12 - 12) - 1;
      else
        v13 = -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          this = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash((uint64_t *)this, v16 >> 1, 0);
      }
      v18 = *((_QWORD *)a2 + 66);
      if (*((unsigned __int8 *)a2 + 3362) | *((unsigned __int8 *)a2 + 3405))
      {
        i = a2;
        if (v18)
        {
          v31 = *(_QWORD *)(v18 + 8);
          i = a2;
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 120);
            i = a2;
            if (v32)
            {
              v33 = *(_QWORD *)(v32 + 8);
              for (i = a2; v33; v33 = *(_QWORD *)(v36 + 8))
              {
                i = *(WebCore::Document **)(*(_QWORD *)(v33 + 40) + 8);
                v34 = *((_QWORD *)i + 66);
                if (!v34)
                  break;
                v35 = *(_QWORD *)(v34 + 8);
                if (!v35)
                  break;
                v36 = *(_QWORD *)(v35 + 120);
                if (!v36)
                  break;
              }
            }
          }
        }
      }
      else
      {
        i = a2;
        if (v18)
        {
          v20 = *(_QWORD *)(v18 + 8);
          i = a2;
          if (v20)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v20 + 128) + 8);
            v22 = v21 && *(_BYTE *)(v21 + 144) == 0;
            i = a2;
            if (v22)
            {
              v23 = *(WebCore::Document **)(v21 + 296);
              i = a2;
              if (v23)
                i = v23;
            }
          }
        }
      }
      if (!*((_BYTE *)i + 672))
      {
        *((_BYTE *)i + 672) = 1;
        v24 = *((_QWORD *)i + 66);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 8);
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 24);
            if (v26)
            {
              v27 = *(_QWORD *)(v25 + 288);
              v28 = *(_QWORD *)(v26 + 8);
              if (v28 && v27 != 0)
              {
                v30 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v26 + 8));
                if (v30)
                  this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 88))(v30, v27);
                else
                  this = WebCore::Page::scheduleRenderingUpdate(v28, 0x2000);
              }
            }
          }
        }
      }
    }
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    this = WebCore::Document::existingAXObjectCacheSlow(a2);
    if (this)
    {
      v37 = this;
      ++*(_DWORD *)(this + 8);
      this = (uint64_t)WebCore::AXObjectCache::remove((WebCore::AXObjectCache *)this, (WebCore::Node *)v3);
      v38 = *(_DWORD *)(v37 + 8);
      if (v38)
      {
        *(_DWORD *)(v37 + 8) = v38 - 1;
      }
      else
      {
        this = 286;
        __break(0xC471u);
      }
    }
  }
  return this;
}

